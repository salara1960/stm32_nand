
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000023f8  0800aba8  0800aba8  0001aba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfa0  0800cfa0  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfa0  0800cfa0  0001cfa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfa8  0800cfa8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfa8  0800cfa8  0001cfa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfac  0800cfac  0001cfac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cfb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200b4  2**0
                  CONTENTS
 10 .bss          000054c8  200000b8  200000b8  000200b8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20005580  20005580  000200b8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027f9e  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000478e  00000000  00000000  00048082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  0004c810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002682e  00000000  00000000  0004e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f65a  00000000  00000000  00074b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ce8  00000000  00000000  00094190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00176e78  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001940  00000000  00000000  00176ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007a20  00000000  00000000  00178810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab90 	.word	0x0800ab90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800ab90 	.word	0x0800ab90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9b9 	b.w	8000c20 <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b96e 	b.w	8000c20 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468c      	mov	ip, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 8083 	bne.w	8000a72 <__udivmoddi4+0x116>
 800096c:	428a      	cmp	r2, r1
 800096e:	4617      	mov	r7, r2
 8000970:	d947      	bls.n	8000a02 <__udivmoddi4+0xa6>
 8000972:	fab2 f282 	clz	r2, r2
 8000976:	b142      	cbz	r2, 800098a <__udivmoddi4+0x2e>
 8000978:	f1c2 0020 	rsb	r0, r2, #32
 800097c:	fa24 f000 	lsr.w	r0, r4, r0
 8000980:	4091      	lsls	r1, r2
 8000982:	4097      	lsls	r7, r2
 8000984:	ea40 0c01 	orr.w	ip, r0, r1
 8000988:	4094      	lsls	r4, r2
 800098a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800098e:	0c23      	lsrs	r3, r4, #16
 8000990:	fbbc f6f8 	udiv	r6, ip, r8
 8000994:	fa1f fe87 	uxth.w	lr, r7
 8000998:	fb08 c116 	mls	r1, r8, r6, ip
 800099c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009a0:	fb06 f10e 	mul.w	r1, r6, lr
 80009a4:	4299      	cmp	r1, r3
 80009a6:	d909      	bls.n	80009bc <__udivmoddi4+0x60>
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009ae:	f080 8119 	bcs.w	8000be4 <__udivmoddi4+0x288>
 80009b2:	4299      	cmp	r1, r3
 80009b4:	f240 8116 	bls.w	8000be4 <__udivmoddi4+0x288>
 80009b8:	3e02      	subs	r6, #2
 80009ba:	443b      	add	r3, r7
 80009bc:	1a5b      	subs	r3, r3, r1
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c4:	fb08 3310 	mls	r3, r8, r0, r3
 80009c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d909      	bls.n	80009e8 <__udivmoddi4+0x8c>
 80009d4:	193c      	adds	r4, r7, r4
 80009d6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009da:	f080 8105 	bcs.w	8000be8 <__udivmoddi4+0x28c>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	f240 8102 	bls.w	8000be8 <__udivmoddi4+0x28c>
 80009e4:	3802      	subs	r0, #2
 80009e6:	443c      	add	r4, r7
 80009e8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ec:	eba4 040e 	sub.w	r4, r4, lr
 80009f0:	2600      	movs	r6, #0
 80009f2:	b11d      	cbz	r5, 80009fc <__udivmoddi4+0xa0>
 80009f4:	40d4      	lsrs	r4, r2
 80009f6:	2300      	movs	r3, #0
 80009f8:	e9c5 4300 	strd	r4, r3, [r5]
 80009fc:	4631      	mov	r1, r6
 80009fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a02:	b902      	cbnz	r2, 8000a06 <__udivmoddi4+0xaa>
 8000a04:	deff      	udf	#255	; 0xff
 8000a06:	fab2 f282 	clz	r2, r2
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	d150      	bne.n	8000ab0 <__udivmoddi4+0x154>
 8000a0e:	1bcb      	subs	r3, r1, r7
 8000a10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a14:	fa1f f887 	uxth.w	r8, r7
 8000a18:	2601      	movs	r6, #1
 8000a1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a1e:	0c21      	lsrs	r1, r4, #16
 8000a20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a28:	fb08 f30c 	mul.w	r3, r8, ip
 8000a2c:	428b      	cmp	r3, r1
 8000a2e:	d907      	bls.n	8000a40 <__udivmoddi4+0xe4>
 8000a30:	1879      	adds	r1, r7, r1
 8000a32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000a36:	d202      	bcs.n	8000a3e <__udivmoddi4+0xe2>
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	f200 80e9 	bhi.w	8000c10 <__udivmoddi4+0x2b4>
 8000a3e:	4684      	mov	ip, r0
 8000a40:	1ac9      	subs	r1, r1, r3
 8000a42:	b2a3      	uxth	r3, r4
 8000a44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a50:	fb08 f800 	mul.w	r8, r8, r0
 8000a54:	45a0      	cmp	r8, r4
 8000a56:	d907      	bls.n	8000a68 <__udivmoddi4+0x10c>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x10a>
 8000a60:	45a0      	cmp	r8, r4
 8000a62:	f200 80d9 	bhi.w	8000c18 <__udivmoddi4+0x2bc>
 8000a66:	4618      	mov	r0, r3
 8000a68:	eba4 0408 	sub.w	r4, r4, r8
 8000a6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a70:	e7bf      	b.n	80009f2 <__udivmoddi4+0x96>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d909      	bls.n	8000a8a <__udivmoddi4+0x12e>
 8000a76:	2d00      	cmp	r5, #0
 8000a78:	f000 80b1 	beq.w	8000bde <__udivmoddi4+0x282>
 8000a7c:	2600      	movs	r6, #0
 8000a7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a82:	4630      	mov	r0, r6
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	fab3 f683 	clz	r6, r3
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	d14a      	bne.n	8000b28 <__udivmoddi4+0x1cc>
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d302      	bcc.n	8000a9c <__udivmoddi4+0x140>
 8000a96:	4282      	cmp	r2, r0
 8000a98:	f200 80b8 	bhi.w	8000c0c <__udivmoddi4+0x2b0>
 8000a9c:	1a84      	subs	r4, r0, r2
 8000a9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	468c      	mov	ip, r1
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d0a8      	beq.n	80009fc <__udivmoddi4+0xa0>
 8000aaa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000aae:	e7a5      	b.n	80009fc <__udivmoddi4+0xa0>
 8000ab0:	f1c2 0320 	rsb	r3, r2, #32
 8000ab4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ab8:	4097      	lsls	r7, r2
 8000aba:	fa01 f002 	lsl.w	r0, r1, r2
 8000abe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ac2:	40d9      	lsrs	r1, r3
 8000ac4:	4330      	orrs	r0, r6
 8000ac6:	0c03      	lsrs	r3, r0, #16
 8000ac8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000acc:	fa1f f887 	uxth.w	r8, r7
 8000ad0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ad4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad8:	fb06 f108 	mul.w	r1, r6, r8
 8000adc:	4299      	cmp	r1, r3
 8000ade:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae2:	d909      	bls.n	8000af8 <__udivmoddi4+0x19c>
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aea:	f080 808d 	bcs.w	8000c08 <__udivmoddi4+0x2ac>
 8000aee:	4299      	cmp	r1, r3
 8000af0:	f240 808a 	bls.w	8000c08 <__udivmoddi4+0x2ac>
 8000af4:	3e02      	subs	r6, #2
 8000af6:	443b      	add	r3, r7
 8000af8:	1a5b      	subs	r3, r3, r1
 8000afa:	b281      	uxth	r1, r0
 8000afc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b08:	fb00 f308 	mul.w	r3, r0, r8
 8000b0c:	428b      	cmp	r3, r1
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x1c4>
 8000b10:	1879      	adds	r1, r7, r1
 8000b12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000b16:	d273      	bcs.n	8000c00 <__udivmoddi4+0x2a4>
 8000b18:	428b      	cmp	r3, r1
 8000b1a:	d971      	bls.n	8000c00 <__udivmoddi4+0x2a4>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	4439      	add	r1, r7
 8000b20:	1acb      	subs	r3, r1, r3
 8000b22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b26:	e778      	b.n	8000a1a <__udivmoddi4+0xbe>
 8000b28:	f1c6 0c20 	rsb	ip, r6, #32
 8000b2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b34:	431c      	orrs	r4, r3
 8000b36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b46:	431f      	orrs	r7, r3
 8000b48:	0c3b      	lsrs	r3, r7, #16
 8000b4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4e:	fa1f f884 	uxth.w	r8, r4
 8000b52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b5e:	458a      	cmp	sl, r1
 8000b60:	fa02 f206 	lsl.w	r2, r2, r6
 8000b64:	fa00 f306 	lsl.w	r3, r0, r6
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x220>
 8000b6a:	1861      	adds	r1, r4, r1
 8000b6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b70:	d248      	bcs.n	8000c04 <__udivmoddi4+0x2a8>
 8000b72:	458a      	cmp	sl, r1
 8000b74:	d946      	bls.n	8000c04 <__udivmoddi4+0x2a8>
 8000b76:	f1a9 0902 	sub.w	r9, r9, #2
 8000b7a:	4421      	add	r1, r4
 8000b7c:	eba1 010a 	sub.w	r1, r1, sl
 8000b80:	b2bf      	uxth	r7, r7
 8000b82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b8e:	fb00 f808 	mul.w	r8, r0, r8
 8000b92:	45b8      	cmp	r8, r7
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x24a>
 8000b96:	19e7      	adds	r7, r4, r7
 8000b98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b9c:	d22e      	bcs.n	8000bfc <__udivmoddi4+0x2a0>
 8000b9e:	45b8      	cmp	r8, r7
 8000ba0:	d92c      	bls.n	8000bfc <__udivmoddi4+0x2a0>
 8000ba2:	3802      	subs	r0, #2
 8000ba4:	4427      	add	r7, r4
 8000ba6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000baa:	eba7 0708 	sub.w	r7, r7, r8
 8000bae:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb2:	454f      	cmp	r7, r9
 8000bb4:	46c6      	mov	lr, r8
 8000bb6:	4649      	mov	r1, r9
 8000bb8:	d31a      	bcc.n	8000bf0 <__udivmoddi4+0x294>
 8000bba:	d017      	beq.n	8000bec <__udivmoddi4+0x290>
 8000bbc:	b15d      	cbz	r5, 8000bd6 <__udivmoddi4+0x27a>
 8000bbe:	ebb3 020e 	subs.w	r2, r3, lr
 8000bc2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bc6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bca:	40f2      	lsrs	r2, r6
 8000bcc:	ea4c 0202 	orr.w	r2, ip, r2
 8000bd0:	40f7      	lsrs	r7, r6
 8000bd2:	e9c5 2700 	strd	r2, r7, [r5]
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	462e      	mov	r6, r5
 8000be0:	4628      	mov	r0, r5
 8000be2:	e70b      	b.n	80009fc <__udivmoddi4+0xa0>
 8000be4:	4606      	mov	r6, r0
 8000be6:	e6e9      	b.n	80009bc <__udivmoddi4+0x60>
 8000be8:	4618      	mov	r0, r3
 8000bea:	e6fd      	b.n	80009e8 <__udivmoddi4+0x8c>
 8000bec:	4543      	cmp	r3, r8
 8000bee:	d2e5      	bcs.n	8000bbc <__udivmoddi4+0x260>
 8000bf0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bf4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bf8:	3801      	subs	r0, #1
 8000bfa:	e7df      	b.n	8000bbc <__udivmoddi4+0x260>
 8000bfc:	4608      	mov	r0, r1
 8000bfe:	e7d2      	b.n	8000ba6 <__udivmoddi4+0x24a>
 8000c00:	4660      	mov	r0, ip
 8000c02:	e78d      	b.n	8000b20 <__udivmoddi4+0x1c4>
 8000c04:	4681      	mov	r9, r0
 8000c06:	e7b9      	b.n	8000b7c <__udivmoddi4+0x220>
 8000c08:	4666      	mov	r6, ip
 8000c0a:	e775      	b.n	8000af8 <__udivmoddi4+0x19c>
 8000c0c:	4630      	mov	r0, r6
 8000c0e:	e74a      	b.n	8000aa6 <__udivmoddi4+0x14a>
 8000c10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c14:	4439      	add	r1, r7
 8000c16:	e713      	b.n	8000a40 <__udivmoddi4+0xe4>
 8000c18:	3802      	subs	r0, #2
 8000c1a:	443c      	add	r4, r7
 8000c1c:	e724      	b.n	8000a68 <__udivmoddi4+0x10c>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_idiv0>:
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop

08000c24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c28:	f3bf 8f4f 	dsb	sy
}
 8000c2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <__NVIC_SystemReset+0x24>)
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c36:	4904      	ldr	r1, [pc, #16]	; (8000c48 <__NVIC_SystemReset+0x24>)
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <__NVIC_SystemReset+0x28>)
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
}
 8000c42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <__NVIC_SystemReset+0x20>
 8000c48:	e000ed00 	.word	0xe000ed00
 8000c4c:	05fa0004 	.word	0x05fa0004

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 fe5c 	bl	8002910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f870 	bl	8000d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 fa14 	bl	8001088 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c60:	f000 f9dc 	bl	800101c <MX_DMA_Init>
  MX_TIM2_Init();
 8000c64:	f000 f964 	bl	8000f30 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c68:	f000 f8d2 	bl	8000e10 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c6c:	f000 fab2 	bl	80011d4 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c70:	f000 f9aa 	bl	8000fc8 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c74:	f000 f926 	bl	8000ec4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c78:	2201      	movs	r2, #1
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	4823      	ldr	r0, [pc, #140]	; (8000d0c <main+0xbc>)
 8000c7e:	f002 fd2d 	bl	80036dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4821      	ldr	r0, [pc, #132]	; (8000d10 <main+0xc0>)
 8000c8a:	f002 fd27 	bl	80036dc <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8000c8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c92:	f001 fe7f 	bl	8002994 <HAL_Delay>
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	481c      	ldr	r0, [pc, #112]	; (8000d0c <main+0xbc>)
 8000c9c:	f002 fd1e 	bl	80036dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca6:	481a      	ldr	r0, [pc, #104]	; (8000d10 <main+0xc0>)
 8000ca8:	f002 fd18 	bl	80036dc <HAL_GPIO_WritePin>

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <main+0xc4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f004 fc6d 	bl	8005590 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <main+0xc8>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4917      	ldr	r1, [pc, #92]	; (8000d1c <main+0xcc>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 f8e5 	bl	8005e8e <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <main+0xd0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fb59 	bl	8001380 <set_Date>

  ST7789_Reset();
 8000cce:	f001 f8b3 	bl	8001e38 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <main+0xd4>)
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f8c8 	bl	8001e6c <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cdc:	f006 f990 	bl	8007000 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000ce0:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <main+0xd8>)
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f006 fa84 	bl	80071f2 <osSemaphoreNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a0f      	ldr	r2, [pc, #60]	; (8000d2c <main+0xdc>)
 8000cee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000cf0:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <main+0xe0>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	480f      	ldr	r0, [pc, #60]	; (8000d34 <main+0xe4>)
 8000cf6:	f006 f9cf 	bl	8007098 <osThreadNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <main+0xe8>)
 8000cfe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d00:	f006 f9a4 	bl	800704c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LOOP_FOREVER();
 8000d04:	2001      	movs	r0, #1
 8000d06:	f001 fe45 	bl	8002994 <HAL_Delay>
 8000d0a:	e7fb      	b.n	8000d04 <main+0xb4>
 8000d0c:	40020800 	.word	0x40020800
 8000d10:	40020c00 	.word	0x40020c00
 8000d14:	20000020 	.word	0x20000020
 8000d18:	20000024 	.word	0x20000024
 8000d1c:	200008e8 	.word	0x200008e8
 8000d20:	2000001c 	.word	0x2000001c
 8000d24:	200008ee 	.word	0x200008ee
 8000d28:	0800cdd0 	.word	0x0800cdd0
 8000d2c:	200053dc 	.word	0x200053dc
 8000d30:	0800cdac 	.word	0x0800cdac
 8000d34:	080017a9 	.word	0x080017a9
 8000d38:	200054e0 	.word	0x200054e0

08000d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	2230      	movs	r2, #48	; 0x30
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f009 f998 	bl	800a080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <SystemClock_Config+0xcc>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
 8000d80:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <SystemClock_Config+0xd0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da2:	2302      	movs	r3, #2
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000da6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000daa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dac:	2308      	movs	r3, #8
 8000dae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000db0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000db4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f002 fdea 	bl	800399c <HAL_RCC_OscConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000dce:	f000 fea1 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd2:	230f      	movs	r3, #15
 8000dd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000dde:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000de2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000de4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	2105      	movs	r1, #5
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f84b 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000dfc:	f000 fe8a 	bl	8001b14 <Error_Handler>
  }
}
 8000e00:	bf00      	nop
 8000e02:	3750      	adds	r7, #80	; 0x50
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40007000 	.word	0x40007000

08000e10 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e28:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e2a:	4a25      	ldr	r2, [pc, #148]	; (8000ec0 <MX_RTC_Init+0xb0>)
 8000e2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e34:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e36:	227f      	movs	r2, #127	; 0x7f
 8000e38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e3a:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e3c:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e40:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e42:	4b1e      	ldr	r3, [pc, #120]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e48:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e4e:	4b1b      	ldr	r3, [pc, #108]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e54:	4819      	ldr	r0, [pc, #100]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e56:	f003 fb29 	bl	80044ac <HAL_RTC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 fe58 	bl	8001b14 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e78:	1d3b      	adds	r3, r7, #4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <MX_RTC_Init+0xac>)
 8000e80:	f003 fba5 	bl	80045ce <HAL_RTC_SetTime>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000e8a:	f000 fe43 	bl	8001b14 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e92:	2301      	movs	r3, #1
 8000e94:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_RTC_Init+0xac>)
 8000ea6:	f003 fcad 	bl	8004804 <HAL_RTC_SetDate>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000eb0:	f000 fe30 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20005420 	.word	0x20005420
 8000ec0:	40002800 	.word	0x40002800

08000ec4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <MX_SPI1_Init+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eee:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ef4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000efc:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f10:	220a      	movs	r2, #10
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_SPI1_Init+0x64>)
 8000f16:	f003 fdfb 	bl	8004b10 <HAL_SPI_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f20:	f000 fdf8 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20005440 	.word	0x20005440
 8000f2c:	40013000 	.word	0x40013000

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f56:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f62:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f64:	22f9      	movs	r2, #249	; 0xf9
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f74:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f76:	f004 fabb 	bl	80054f0 <HAL_TIM_Base_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f80:	f000 fdc8 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000f92:	f004 fc75 	bl	8005880 <HAL_TIM_ConfigClockSource>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f9c:	f000 fdba 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM2_Init+0x94>)
 8000fae:	f004 fe91 	bl	8005cd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fb8:	f000 fdac 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20005498 	.word	0x20005498

08000fc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART3_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART3_UART_Init+0x4c>)
 8001000:	f004 fef8 	bl	8005df4 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 fd83 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20005338 	.word	0x20005338
 8001018:	40004800 	.word	0x40004800

0800101c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_DMA_Init+0x68>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_DMA_Init+0x68>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_DMA_Init+0x68>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_DMA_Init+0x68>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <MX_DMA_Init+0x68>)
 8001048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_DMA_Init+0x68>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2105      	movs	r1, #5
 800105e:	200e      	movs	r0, #14
 8001060:	f001 fd74 	bl	8002b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001064:	200e      	movs	r0, #14
 8001066:	f001 fd8d 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2105      	movs	r1, #5
 800106e:	203b      	movs	r0, #59	; 0x3b
 8001070:	f001 fd6c 	bl	8002b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001074:	203b      	movs	r0, #59	; 0x3b
 8001076:	f001 fd85 	bl	8002b84 <HAL_NVIC_EnableIRQ>

}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a47      	ldr	r2, [pc, #284]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	61bb      	str	r3, [r7, #24]
 80010b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b3e      	ldr	r3, [pc, #248]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b3a      	ldr	r3, [pc, #232]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a39      	ldr	r2, [pc, #228]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010e0:	f043 0310 	orr.w	r3, r3, #16
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b37      	ldr	r3, [pc, #220]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b33      	ldr	r3, [pc, #204]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a32      	ldr	r2, [pc, #200]	; (80011c4 <MX_GPIO_Init+0x13c>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	4b2c      	ldr	r3, [pc, #176]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a2b      	ldr	r2, [pc, #172]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b29      	ldr	r3, [pc, #164]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <MX_GPIO_Init+0x13c>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <MX_GPIO_Init+0x13c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	210e      	movs	r1, #14
 800114a:	481f      	ldr	r0, [pc, #124]	; (80011c8 <MX_GPIO_Init+0x140>)
 800114c:	f002 fac6 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001156:	481d      	ldr	r0, [pc, #116]	; (80011cc <MX_GPIO_Init+0x144>)
 8001158:	f002 fac0 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <MX_GPIO_Init+0x148>)
 8001162:	f002 fabb 	bl	80036dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8001166:	230e      	movs	r3, #14
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800116e:	2301      	movs	r3, #1
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001172:	2301      	movs	r3, #1
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	4619      	mov	r1, r3
 800117c:	4812      	ldr	r0, [pc, #72]	; (80011c8 <MX_GPIO_Init+0x140>)
 800117e:	f002 f911 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001190:	2302      	movs	r3, #2
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	480c      	ldr	r0, [pc, #48]	; (80011cc <MX_GPIO_Init+0x144>)
 800119c:	f002 f902 	bl	80033a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011a8:	2302      	movs	r3, #2
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_GPIO_Init+0x148>)
 80011b8:	f002 f8f4 	bl	80033a4 <HAL_GPIO_Init>

}
 80011bc:	bf00      	nop
 80011be:	3730      	adds	r7, #48	; 0x30
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40020800 	.word	0x40020800

080011d4 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
 80011e6:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 80011e8:	463b      	mov	r3, r7
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <MX_FSMC_Init+0xbc>)
 80011f6:	4a27      	ldr	r2, [pc, #156]	; (8001294 <MX_FSMC_Init+0xc0>)
 80011f8:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 80011fa:	4b25      	ldr	r3, [pc, #148]	; (8001290 <MX_FSMC_Init+0xbc>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001202:	2202      	movs	r2, #2
 8001204:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_FSMC_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001218:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_FSMC_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 800121e:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_FSMC_Init+0xbc>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8001230:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001232:	2200      	movs	r2, #0
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_FSMC_Init+0xbc>)
 800123e:	2200      	movs	r2, #0
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_FSMC_Init+0xbc>)
 8001244:	2200      	movs	r2, #0
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_FSMC_Init+0xbc>)
 800124a:	2200      	movs	r2, #0
 800124c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8001250:	23fc      	movs	r3, #252	; 0xfc
 8001252:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8001254:	23fc      	movs	r3, #252	; 0xfc
 8001256:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8001258:	23fc      	movs	r3, #252	; 0xfc
 800125a:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 800125c:	23fc      	movs	r3, #252	; 0xfc
 800125e:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8001260:	23fc      	movs	r3, #252	; 0xfc
 8001262:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8001264:	23fc      	movs	r3, #252	; 0xfc
 8001266:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 8001268:	23fc      	movs	r3, #252	; 0xfc
 800126a:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 800126c:	23fc      	movs	r3, #252	; 0xfc
 800126e:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8001270:	463a      	mov	r2, r7
 8001272:	f107 0310 	add.w	r3, r7, #16
 8001276:	4619      	mov	r1, r3
 8001278:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_FSMC_Init+0xbc>)
 800127a:	f002 fa62 	bl	8003742 <HAL_NAND_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001284:	f000 fc46 	bl	8001b14 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001288:	bf00      	nop
 800128a:	3720      	adds	r7, #32
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	200053e0 	.word	0x200053e0
 8001294:	a0000060 	.word	0xa0000060

08001298 <errLedOn>:

/* USER CODE BEGIN 4 */
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	if (on)
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ae:	4807      	ldr	r0, [pc, #28]	; (80012cc <errLedOn+0x34>)
 80012b0:	f002 fa14 	bl	80036dc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80012b4:	e005      	b.n	80012c2 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <errLedOn+0x34>)
 80012be:	f002 fa0d 	bl	80036dc <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40020c00 	.word	0x40020c00

080012d0 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	return secCounter;
 80012d4:	4b03      	ldr	r3, [pc, #12]	; (80012e4 <get_secCounter+0x14>)
 80012d6:	681b      	ldr	r3, [r3, #0]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	200000d8 	.word	0x200000d8

080012e8 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	secCounter++;
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <inc_secCounter+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a03      	ldr	r2, [pc, #12]	; (8001300 <inc_secCounter+0x18>)
 80012f4:	6013      	str	r3, [r2, #0]
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200000d8 	.word	0x200000d8

08001304 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	return msCounter;
 8001308:	4b04      	ldr	r3, [pc, #16]	; (800131c <get_msCounter+0x18>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200000e0 	.word	0x200000e0

08001320 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
	msCounter++;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <inc_msCounter+0x20>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	1c50      	adds	r0, r2, #1
 800132c:	f143 0100 	adc.w	r1, r3, #0
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <inc_msCounter+0x20>)
 8001332:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	200000e0 	.word	0x200000e0

08001344 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 800134c:	f7ff ffc0 	bl	80012d0 <get_secCounter>
 8001350:	4602      	mov	r2, r0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4413      	add	r3, r2
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001366:	f7ff ffb3 	bl	80012d0 <get_secCounter>
 800136a:	4602      	mov	r2, r0
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4293      	cmp	r3, r2
 8001370:	bf94      	ite	ls
 8001372:	2301      	movls	r3, #1
 8001374:	2300      	movhi	r3, #0
 8001376:	b2db      	uxtb	r3, r3
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b094      	sub	sp, #80	; 0x50
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = usec;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	461a      	mov	r2, r3
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9c7 2308 	strd	r2, r3, [r7, #32]

	if (!gmtime_r(&ep, &ts)) {
 8001394:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001398:	f107 0320 	add.w	r3, r7, #32
 800139c:	4611      	mov	r1, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fd82 	bl	8009ea8 <gmtime_r>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <set_Date+0x32>
		errLedOn(true);
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ff74 	bl	8001298 <errLedOn>
 80013b0:	e03b      	b.n	800142a <set_Date+0xaa>
		return;
	}

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 80013b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 80013b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	3301      	adds	r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 80013c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 80013c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour;
 80013ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 80013d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 80013da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	73bb      	strb	r3, [r7, #14]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2200      	movs	r2, #0
 80013e6:	4619      	mov	r1, r3
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <set_Date+0xb0>)
 80013ea:	f003 f8f0 	bl	80045ce <HAL_RTC_SetTime>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <set_Date+0x82>
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <set_Date+0xb4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f043 0304 	orr.w	r3, r3, #4
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <set_Date+0xb4>)
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e013      	b.n	800142a <set_Date+0xaa>
	else {
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN))
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	2200      	movs	r2, #0
 8001408:	4619      	mov	r1, r3
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <set_Date+0xb0>)
 800140c:	f003 f9fa 	bl	8004804 <HAL_RTC_SetDate>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <set_Date+0xa4>
			devError |= devRTC;
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <set_Date+0xb4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	4a05      	ldr	r2, [pc, #20]	; (8001434 <set_Date+0xb4>)
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	e002      	b.n	800142a <set_Date+0xaa>
		else
			setDate = true;
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <set_Date+0xb8>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
	}
}
 800142a:	3750      	adds	r7, #80	; 0x50
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20005420 	.word	0x20005420
 8001434:	200052d4 	.word	0x200052d4
 8001438:	200008ec 	.word	0x200008ec

0800143c <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b093      	sub	sp, #76	; 0x4c
 8001440:	af04      	add	r7, sp, #16
 8001442:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <sec2str+0x10c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	f083 0301 	eor.w	r3, r3, #1
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d040      	beq.n	80014d8 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8001456:	f7ff ff3b 	bl	80012d0 <get_secCounter>
 800145a:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 800145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145e:	4a3b      	ldr	r2, [pc, #236]	; (800154c <sec2str+0x110>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c1b      	lsrs	r3, r3, #16
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8001468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800146a:	4a38      	ldr	r2, [pc, #224]	; (800154c <sec2str+0x110>)
 800146c:	fba2 1203 	umull	r1, r2, r2, r3
 8001470:	0c12      	lsrs	r2, r2, #16
 8001472:	4937      	ldr	r1, [pc, #220]	; (8001550 <sec2str+0x114>)
 8001474:	fb01 f202 	mul.w	r2, r1, r2
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 800147c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147e:	4a35      	ldr	r2, [pc, #212]	; (8001554 <sec2str+0x118>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0adb      	lsrs	r3, r3, #11
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8001488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148a:	4a32      	ldr	r2, [pc, #200]	; (8001554 <sec2str+0x118>)
 800148c:	fba2 1203 	umull	r1, r2, r2, r3
 8001490:	0ad2      	lsrs	r2, r2, #11
 8001492:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001496:	fb01 f202 	mul.w	r2, r1, r2
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800149e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <sec2str+0x11c>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80014aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <sec2str+0x11c>)
 80014ae:	fba3 1302 	umull	r1, r3, r3, r2
 80014b2:	0959      	lsrs	r1, r3, #5
 80014b4:	460b      	mov	r3, r1
 80014b6:	011b      	lsls	r3, r3, #4
 80014b8:	1a5b      	subs	r3, r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014cc:	4923      	ldr	r1, [pc, #140]	; (800155c <sec2str+0x120>)
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f008 ff12 	bl	800a2f8 <siprintf>
 80014d4:	6378      	str	r0, [r7, #52]	; 0x34
 80014d6:	e032      	b.n	800153e <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80014d8:	f107 030c 	add.w	r3, r7, #12
 80014dc:	2200      	movs	r2, #0
 80014de:	4619      	mov	r1, r3
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <sec2str+0x124>)
 80014e2:	f003 fa36 	bl	8004952 <HAL_RTC_GetDate>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <sec2str+0xbe>
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <sec2str+0x128>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	4a1b      	ldr	r2, [pc, #108]	; (8001564 <sec2str+0x128>)
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	e021      	b.n	800153e <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	4817      	ldr	r0, [pc, #92]	; (8001560 <sec2str+0x124>)
 8001504:	f003 f920 	bl	8004748 <HAL_RTC_GetTime>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <sec2str+0xe0>
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <sec2str+0x128>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	4a13      	ldr	r2, [pc, #76]	; (8001564 <sec2str+0x128>)
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e010      	b.n	800153e <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 800151c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800151e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001520:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001522:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001524:	7c3b      	ldrb	r3, [r7, #16]
 8001526:	7c7a      	ldrb	r2, [r7, #17]
 8001528:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800152a:	9102      	str	r1, [sp, #8]
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4623      	mov	r3, r4
 8001532:	4602      	mov	r2, r0
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <sec2str+0x12c>)
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f008 fede 	bl	800a2f8 <siprintf>
 800153c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800153e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001540:	4618      	mov	r0, r3
 8001542:	373c      	adds	r7, #60	; 0x3c
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	200008ec 	.word	0x200008ec
 800154c:	c22e4507 	.word	0xc22e4507
 8001550:	00015180 	.word	0x00015180
 8001554:	91a2b3c5 	.word	0x91a2b3c5
 8001558:	88888889 	.word	0x88888889
 800155c:	0800abe4 	.word	0x0800abe4
 8001560:	20005420 	.word	0x20005420
 8001564:	200052d4 	.word	0x200052d4
 8001568:	0800abfc 	.word	0x0800abfc

0800156c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 800156c:	b40e      	push	{r1, r2, r3}
 800156e:	b590      	push	{r4, r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8001578:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800157c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8001582:	4b29      	ldr	r3, [pc, #164]	; (8001628 <Report+0xbc>)
 8001584:	60fb      	str	r3, [r7, #12]

	//if (buf) {
	    *buf = '\0';
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
		if (addTime) {
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <Report+0x4c>
			dl = sec2str(buf);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7ff ff52 	bl	800143c <sec2str>
 8001598:	6178      	str	r0, [r7, #20]
			strcat(buf, "| ");
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f7fe fe18 	bl	80001d0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a20      	ldr	r2, [pc, #128]	; (800162c <Report+0xc0>)
 80015aa:	8811      	ldrh	r1, [r2, #0]
 80015ac:	7892      	ldrb	r2, [r2, #2]
 80015ae:	8019      	strh	r1, [r3, #0]
 80015b0:	709a      	strb	r2, [r3, #2]
			dl += 2;
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3302      	adds	r3, #2
 80015b6:	617b      	str	r3, [r7, #20]
		}

		va_start(args, fmt);
 80015b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015bc:	60bb      	str	r3, [r7, #8]
		vsnprintf(buf + dl, len - dl, fmt, args);
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	18d0      	adds	r0, r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	1ad1      	subs	r1, r2, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ce:	f008 ff8d 	bl	800a4ec <vsniprintf>

		uartRdy = false;
 80015d2:	4b17      	ldr	r3, [pc, #92]	; (8001630 <Report+0xc4>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
		if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80015d8:	4b16      	ldr	r3, [pc, #88]	; (8001634 <Report+0xc8>)
 80015da:	681c      	ldr	r4, [r3, #0]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7fe fdf7 	bl	80001d0 <strlen>
 80015e2:	4603      	mov	r3, r0
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	4620      	mov	r0, r4
 80015ec:	f004 fc80 	bl	8005ef0 <HAL_UART_Transmit_DMA>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <Report+0x9e>
 80015f6:	4b10      	ldr	r3, [pc, #64]	; (8001638 <Report+0xcc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <Report+0xcc>)
 8001600:	6013      	str	r3, [r2, #0]
		while (!uartRdy) HAL_Delay(1);
 8001602:	e002      	b.n	800160a <Report+0x9e>
 8001604:	2001      	movs	r0, #1
 8001606:	f001 f9c5 	bl	8002994 <HAL_Delay>
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <Report+0xc4>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f5      	bne.n	8001604 <Report+0x98>
		va_end(args);

	//	free(buf);
	//}

	return 0;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001624:	b003      	add	sp, #12
 8001626:	4770      	bx	lr
 8001628:	200000e8 	.word	0x200000e8
 800162c:	0800ac18 	.word	0x0800ac18
 8001630:	20000018 	.word	0x20000018
 8001634:	20000024 	.word	0x20000024
 8001638:	200052d4 	.word	0x200052d4

0800163c <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_UART_RxCpltCallback+0xf0>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d169      	bne.n	8001722 <HAL_UART_RxCpltCallback+0xe6>
		rxBuf[ruk++] = (char)rxByte;
 800164e:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_UART_RxCpltCallback+0xf4>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	b291      	uxth	r1, r2
 8001656:	4a36      	ldr	r2, [pc, #216]	; (8001730 <HAL_UART_RxCpltCallback+0xf4>)
 8001658:	8011      	strh	r1, [r2, #0]
 800165a:	461a      	mov	r2, r3
 800165c:	4b35      	ldr	r3, [pc, #212]	; (8001734 <HAL_UART_RxCpltCallback+0xf8>)
 800165e:	7819      	ldrb	r1, [r3, #0]
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_UART_RxCpltCallback+0xfc>)
 8001662:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_UART_RxCpltCallback+0xf8>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b0a      	cmp	r3, #10
 800166a:	d155      	bne.n	8001718 <HAL_UART_RxCpltCallback+0xdc>
			char *uk = NULL;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
			if (strstr(rxBuf, s_restart)) {
 8001670:	4b32      	ldr	r3, [pc, #200]	; (800173c <HAL_UART_RxCpltCallback+0x100>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4830      	ldr	r0, [pc, #192]	; (8001738 <HAL_UART_RxCpltCallback+0xfc>)
 8001678:	f008 fe66 	bl	800a348 <strstr>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_UART_RxCpltCallback+0x52>
				flags.restart = 1;
 8001682:	4a2f      	ldr	r2, [pc, #188]	; (8001740 <HAL_UART_RxCpltCallback+0x104>)
 8001684:	7813      	ldrb	r3, [r2, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	7013      	strb	r3, [r2, #0]
 800168c:	e03b      	b.n	8001706 <HAL_UART_RxCpltCallback+0xca>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_UART_RxCpltCallback+0x108>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4619      	mov	r1, r3
 8001694:	4828      	ldr	r0, [pc, #160]	; (8001738 <HAL_UART_RxCpltCallback+0xfc>)
 8001696:	f008 fe57 	bl	800a348 <strstr>
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d031      	beq.n	8001706 <HAL_UART_RxCpltCallback+0xca>
				uk += strlen(s_epoch);
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_UART_RxCpltCallback+0x108>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fd92 	bl	80001d0 <strlen>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
				if (*uk != '?') {
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b3f      	cmp	r3, #63	; 0x3f
 80016ba:	d01c      	beq.n	80016f6 <HAL_UART_RxCpltCallback+0xba>
					if (strlen(uk) < 10) setDate = false;
 80016bc:	68f8      	ldr	r0, [r7, #12]
 80016be:	f7fe fd87 	bl	80001d0 <strlen>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b09      	cmp	r3, #9
 80016c6:	d803      	bhi.n	80016d0 <HAL_UART_RxCpltCallback+0x94>
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <HAL_UART_RxCpltCallback+0x10c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
 80016ce:	e01a      	b.n	8001706 <HAL_UART_RxCpltCallback+0xca>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f008 fbd7 	bl	8009e84 <atol>
 80016d6:	4603      	mov	r3, r0
 80016d8:	60bb      	str	r3, [r7, #8]
						if (ep > epoch) {
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <HAL_UART_RxCpltCallback+0x110>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d910      	bls.n	8001706 <HAL_UART_RxCpltCallback+0xca>
							epoch = ep;
 80016e4:	4a19      	ldr	r2, [pc, #100]	; (800174c <HAL_UART_RxCpltCallback+0x110>)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_UART_RxCpltCallback+0x104>)
 80016ec:	7813      	ldrb	r3, [r2, #0]
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	7013      	strb	r3, [r2, #0]
 80016f4:	e007      	b.n	8001706 <HAL_UART_RxCpltCallback+0xca>
						}
					}
				} else {
					setDate = true;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_UART_RxCpltCallback+0x10c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 80016fc:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_UART_RxCpltCallback+0x104>)
 80016fe:	7813      	ldrb	r3, [r2, #0]
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	7013      	strb	r3, [r2, #0]
				}
			}
			ruk = 0;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_UART_RxCpltCallback+0xf4>)
 8001708:	2200      	movs	r2, #0
 800170a:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 800170c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001710:	2100      	movs	r1, #0
 8001712:	4809      	ldr	r0, [pc, #36]	; (8001738 <HAL_UART_RxCpltCallback+0xfc>)
 8001714:	f008 fcb4 	bl	800a080 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	4906      	ldr	r1, [pc, #24]	; (8001734 <HAL_UART_RxCpltCallback+0xf8>)
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f004 fbb6 	bl	8005e8e <HAL_UART_Receive_IT>
	}
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40004800 	.word	0x40004800
 8001730:	200008ea 	.word	0x200008ea
 8001734:	200008e8 	.word	0x200008e8
 8001738:	200004e8 	.word	0x200004e8
 800173c:	20000010 	.word	0x20000010
 8001740:	200000d4 	.word	0x200000d4
 8001744:	20000014 	.word	0x20000014
 8001748:	200008ec 	.word	0x200008ec
 800174c:	2000001c 	.word	0x2000001c

08001750 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_UART_TxCpltCallback+0x24>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d102      	bne.n	8001768 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <HAL_UART_TxCpltCallback+0x28>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
	}
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40004800 	.word	0x40004800
 8001778:	20000018 	.word	0x20000018

0800177c <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
/**/
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <HAL_SPI_TxCpltCallback+0x24>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 800178e:	4b05      	ldr	r3, [pc, #20]	; (80017a4 <HAL_SPI_TxCpltCallback+0x28>)
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
	}
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	40013000 	.word	0x40013000
 80017a4:	20000004 	.word	0x20000004

080017a8 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af04      	add	r7, sp, #16
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	*(uint8_t *)&flags = 0;
 80017b0:	4bb1      	ldr	r3, [pc, #708]	; (8001a78 <defThread+0x2d0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]

	char *stx = (char *)calloc(1, 128);
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	2001      	movs	r0, #1
 80017ba:	f008 fb67 	bl	8009e8c <calloc>
 80017be:	4603      	mov	r3, r0
 80017c0:	60fb      	str	r3, [r7, #12]
	if (!stx) devError |= devMEM;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d105      	bne.n	80017d4 <defThread+0x2c>
 80017c8:	4bac      	ldr	r3, [pc, #688]	; (8001a7c <defThread+0x2d4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f043 0302 	orr.w	r3, r3, #2
 80017d0:	4aaa      	ldr	r2, [pc, #680]	; (8001a7c <defThread+0x2d4>)
 80017d2:	6013      	str	r3, [r2, #0]

	HAL_Delay(1000);
 80017d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d8:	f001 f8dc 	bl	8002994 <HAL_Delay>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80017dc:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <defThread+0x2d8>)
 80017de:	681c      	ldr	r4, [r3, #0]
 80017e0:	f008 fa20 	bl	8009c24 <xPortGetFreeHeapSize>
 80017e4:	4602      	mov	r2, r0
 80017e6:	4ba7      	ldr	r3, [pc, #668]	; (8001a84 <defThread+0x2dc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	9302      	str	r3, [sp, #8]
 80017ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	9200      	str	r2, [sp, #0]
 80017f4:	4ba4      	ldr	r3, [pc, #656]	; (8001a88 <defThread+0x2e0>)
 80017f6:	4622      	mov	r2, r4
 80017f8:	49a4      	ldr	r1, [pc, #656]	; (8001a8c <defThread+0x2e4>)
 80017fa:	2001      	movs	r0, #1
 80017fc:	f7ff feb6 	bl	800156c <Report>

	//fntKey = &Font_16x26;
	//tFont = &Font_11x18;
	//ipsOn(0);
	uint16_t err_color = BLACK;
 8001800:	2300      	movs	r3, #0
 8001802:	82fb      	strh	r3, [r7, #22]
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8001804:	4ba2      	ldr	r3, [pc, #648]	; (8001a90 <defThread+0x2e8>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	785b      	ldrb	r3, [r3, #1]
 800180a:	b29b      	uxth	r3, r3
 800180c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	22ef      	movs	r2, #239	; 0xef
 8001814:	2100      	movs	r1, #0
 8001816:	2000      	movs	r0, #0
 8001818:	f000 fc04 	bl	8002024 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 800181c:	4b9c      	ldr	r3, [pc, #624]	; (8001a90 <defThread+0x2e8>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	785b      	ldrb	r3, [r3, #1]
 8001822:	b29b      	uxth	r3, r3
 8001824:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001828:	b299      	uxth	r1, r3
 800182a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	23ef      	movs	r3, #239	; 0xef
 8001832:	22ef      	movs	r2, #239	; 0xef
 8001834:	2000      	movs	r0, #0
 8001836:	f000 fbf5 	bl	8002024 <ST7789_Fill>

	strcpy(stx, "NAND : K9F1G08U0E");
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a95      	ldr	r2, [pc, #596]	; (8001a94 <defThread+0x2ec>)
 800183e:	461d      	mov	r5, r3
 8001840:	4614      	mov	r4, r2
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	6028      	str	r0, [r5, #0]
 8001846:	6069      	str	r1, [r5, #4]
 8001848:	60aa      	str	r2, [r5, #8]
 800184a:	60eb      	str	r3, [r5, #12]
 800184c:	8823      	ldrh	r3, [r4, #0]
 800184e:	822b      	strh	r3, [r5, #16]
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <defThread+0x2f0>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	785b      	ldrb	r3, [r3, #1]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe ff8e 	bl	8000778 <__aeabi_i2d>
 800185c:	4604      	mov	r4, r0
 800185e:	460d      	mov	r5, r1
 8001860:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <defThread+0x2f0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe ff86 	bl	8000778 <__aeabi_i2d>
 800186c:	a380      	add	r3, pc, #512	; (adr r3, 8001a70 <defThread+0x2c8>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	f7fe fd05 	bl	8000280 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4620      	mov	r0, r4
 800187c:	4629      	mov	r1, r5
 800187e:	f7fe fe2f 	bl	80004e0 <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7fe ffdf 	bl	800084c <__aeabi_d2uiz>
 800188e:	4603      	mov	r3, r0
 8001890:	b29c      	uxth	r4, r3
					   mkLineCenter(stx, ST7789_WIDTH / tFont->width),
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <defThread+0x2f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	23f0      	movs	r3, #240	; 0xf0
 800189c:	fb93 f3f2 	sdiv	r3, r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4619      	mov	r1, r3
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	f000 fcca 	bl	800223e <mkLineCenter>
	ST7789_WriteString(0,
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <defThread+0x2f0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7b      	ldr	r2, [pc, #492]	; (8001a9c <defThread+0x2f4>)
 80018b0:	8812      	ldrh	r2, [r2, #0]
 80018b2:	43d2      	mvns	r2, r2
 80018b4:	b292      	uxth	r2, r2
 80018b6:	4979      	ldr	r1, [pc, #484]	; (8001a9c <defThread+0x2f4>)
 80018b8:	8809      	ldrh	r1, [r1, #0]
 80018ba:	9102      	str	r1, [sp, #8]
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	9200      	str	r2, [sp, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4602      	mov	r2, r0
 80018c6:	4621      	mov	r1, r4
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 fc62 	bl	8002192 <ST7789_WriteString>
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 80018ce:	2001      	movs	r0, #1
 80018d0:	f000 fa22 	bl	8001d18 <ipsOn>

	bool led = false;
 80018d4:	2300      	movs	r3, #0
 80018d6:	757b      	strb	r3, [r7, #21]
	uint32_t tmr = get_tmr(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff fd33 	bl	8001344 <get_tmr>
 80018de:	6138      	str	r0, [r7, #16]

  /* Infinite loop */

  while (1) {

	  if (check_tmr(tmr)) {
 80018e0:	6938      	ldr	r0, [r7, #16]
 80018e2:	f7ff fd3c 	bl	800135e <check_tmr>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d056      	beq.n	800199a <defThread+0x1f2>
		  tmr = get_tmr(1);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff fd29 	bl	8001344 <get_tmr>
 80018f2:	6138      	str	r0, [r7, #16]
		  //
		  sec2str(stx);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7ff fda1 	bl	800143c <sec2str>
		  ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80018fa:	4b65      	ldr	r3, [pc, #404]	; (8001a90 <defThread+0x2e8>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	461a      	mov	r2, r3
 8001902:	23f0      	movs	r3, #240	; 0xf0
 8001904:	fb93 f3f2 	sdiv	r3, r3, r2
 8001908:	b29b      	uxth	r3, r3
 800190a:	4619      	mov	r1, r3
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 fc96 	bl	800223e <mkLineCenter>
 8001912:	4601      	mov	r1, r0
 8001914:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <defThread+0x2e8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800191c:	9202      	str	r2, [sp, #8]
 800191e:	221f      	movs	r2, #31
 8001920:	9201      	str	r2, [sp, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	460a      	mov	r2, r1
 800192a:	2100      	movs	r1, #0
 800192c:	2008      	movs	r0, #8
 800192e:	f000 fc30 	bl	8002192 <ST7789_WriteString>

		  sprintf(stx, "Error: 0x%04X", (unsigned int)devError);
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <defThread+0x2d4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4959      	ldr	r1, [pc, #356]	; (8001aa0 <defThread+0x2f8>)
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f008 fcdc 	bl	800a2f8 <siprintf>
		  if (devError) err_color = RED; else err_color = BLACK;
 8001940:	4b4e      	ldr	r3, [pc, #312]	; (8001a7c <defThread+0x2d4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <defThread+0x1a8>
 8001948:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800194c:	82fb      	strh	r3, [r7, #22]
 800194e:	e001      	b.n	8001954 <defThread+0x1ac>
 8001950:	2300      	movs	r3, #0
 8001952:	82fb      	strh	r3, [r7, #22]
		  ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8001954:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <defThread+0x2e8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	785b      	ldrb	r3, [r3, #1]
 800195a:	b29b      	uxth	r3, r3
 800195c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001960:	b29c      	uxth	r4, r3
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <defThread+0x2e8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	23f0      	movs	r3, #240	; 0xf0
 800196c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001970:	b29b      	uxth	r3, r3
 8001972:	4619      	mov	r1, r3
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 fc62 	bl	800223e <mkLineCenter>
 800197a:	4601      	mov	r1, r0
 800197c:	4b44      	ldr	r3, [pc, #272]	; (8001a90 <defThread+0x2e8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001984:	9202      	str	r2, [sp, #8]
 8001986:	8afa      	ldrh	r2, [r7, #22]
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	9200      	str	r2, [sp, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	460a      	mov	r2, r1
 8001992:	4621      	mov	r1, r4
 8001994:	2000      	movs	r0, #0
 8001996:	f000 fbfc 	bl	8002192 <ST7789_WriteString>
	  }

	  if (devError) led = true; else led = false;
 800199a:	4b38      	ldr	r3, [pc, #224]	; (8001a7c <defThread+0x2d4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <defThread+0x200>
 80019a2:	2301      	movs	r3, #1
 80019a4:	757b      	strb	r3, [r7, #21]
 80019a6:	e001      	b.n	80019ac <defThread+0x204>
 80019a8:	2300      	movs	r3, #0
 80019aa:	757b      	strb	r3, [r7, #21]
	  errLedOn(led);
 80019ac:	7d7b      	ldrb	r3, [r7, #21]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fc72 	bl	8001298 <errLedOn>

	  if (flags.restart) {
 80019b4:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <defThread+0x2d0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <defThread+0x22e>
		  flags.restart = 0;
 80019c2:	4a2d      	ldr	r2, [pc, #180]	; (8001a78 <defThread+0x2d0>)
 80019c4:	7813      	ldrb	r3, [r2, #0]
 80019c6:	f36f 0300 	bfc	r3, #0, #1
 80019ca:	7013      	strb	r3, [r2, #0]
		  break;
 80019cc:	bf00      	nop
	  }

	  osDelay(250);
  }

  if (stx) free(stx);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d032      	beq.n	8001a3a <defThread+0x292>
 80019d4:	e02e      	b.n	8001a34 <defThread+0x28c>
	  } else if (flags.time_set) {
 80019d6:	4b28      	ldr	r3, [pc, #160]	; (8001a78 <defThread+0x2d0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00a      	beq.n	80019fa <defThread+0x252>
		  flags.time_set = 0;
 80019e4:	4a24      	ldr	r2, [pc, #144]	; (8001a78 <defThread+0x2d0>)
 80019e6:	7813      	ldrb	r3, [r2, #0]
 80019e8:	f36f 0341 	bfc	r3, #1, #1
 80019ec:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 80019ee:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <defThread+0x2fc>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fcc4 	bl	8001380 <set_Date>
 80019f8:	e018      	b.n	8001a2c <defThread+0x284>
	  } else if (flags.time_show) {
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <defThread+0x2d0>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d011      	beq.n	8001a2c <defThread+0x284>
		  flags.time_show = 0;
 8001a08:	4a1b      	ldr	r2, [pc, #108]	; (8001a78 <defThread+0x2d0>)
 8001a0a:	7813      	ldrb	r3, [r2, #0]
 8001a0c:	f36f 0382 	bfc	r3, #2, #1
 8001a10:	7013      	strb	r3, [r2, #0]
		  if (stx) {
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d009      	beq.n	8001a2c <defThread+0x284>
			  sec2str(stx);
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f7ff fd0f 	bl	800143c <sec2str>
			  Report(0, "Current date&time -> %s%s", stx, eol);
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <defThread+0x2dc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	4920      	ldr	r1, [pc, #128]	; (8001aa8 <defThread+0x300>)
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fda0 	bl	800156c <Report>
	  osDelay(250);
 8001a2c:	20fa      	movs	r0, #250	; 0xfa
 8001a2e:	f005 fbc5 	bl	80071bc <osDelay>
	  if (check_tmr(tmr)) {
 8001a32:	e755      	b.n	80018e0 <defThread+0x138>
  if (stx) free(stx);
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f008 fb0d 	bl	800a054 <free>

  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <defThread+0x2d8>)
 8001a3c:	681c      	ldr	r4, [r3, #0]
 8001a3e:	f008 f8f1 	bl	8009c24 <xPortGetFreeHeapSize>
 8001a42:	4602      	mov	r2, r0
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <defThread+0x2dc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	9302      	str	r3, [sp, #8]
 8001a4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9200      	str	r2, [sp, #0]
 8001a52:	4b0d      	ldr	r3, [pc, #52]	; (8001a88 <defThread+0x2e0>)
 8001a54:	4622      	mov	r2, r4
 8001a56:	4915      	ldr	r1, [pc, #84]	; (8001aac <defThread+0x304>)
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff fd87 	bl	800156c <Report>
  osDelay(1000);
 8001a5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a62:	f005 fbab 	bl	80071bc <osDelay>

  NVIC_SystemReset();
 8001a66:	f7ff f8dd 	bl	8000c24 <__NVIC_SystemReset>
 8001a6a:	bf00      	nop
 8001a6c:	f3af 8000 	nop.w
 8001a70:	33333333 	.word	0x33333333
 8001a74:	3feb3333 	.word	0x3feb3333
 8001a78:	200000d4 	.word	0x200000d4
 8001a7c:	200052d4 	.word	0x200052d4
 8001a80:	20000008 	.word	0x20000008
 8001a84:	2000000c 	.word	0x2000000c
 8001a88:	0800cde0 	.word	0x0800cde0
 8001a8c:	0800ac1c 	.word	0x0800ac1c
 8001a90:	20000028 	.word	0x20000028
 8001a94:	0800ac48 	.word	0x0800ac48
 8001a98:	2000002c 	.word	0x2000002c
 8001a9c:	200008ee 	.word	0x200008ee
 8001aa0:	0800ac5c 	.word	0x0800ac5c
 8001aa4:	2000001c 	.word	0x2000001c
 8001aa8:	0800ac6c 	.word	0x0800ac6c
 8001aac:	0800ac88 	.word	0x0800ac88

08001ab0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d102      	bne.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001ac2:	f000 ff47 	bl	8002954 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8001ac6:	e01c      	b.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x52>
  else if (htim->Instance == TIM2) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad0:	d117      	bne.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x52>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8001ad2:	f7ff fc17 	bl	8001304 <get_msCounter>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	f04f 0003 	mov.w	r0, #3
 8001ade:	f04f 0100 	mov.w	r1, #0
 8001ae2:	ea02 0400 	and.w	r4, r2, r0
 8001ae6:	ea03 0501 	and.w	r5, r3, r1
 8001aea:	2d00      	cmp	r5, #0
 8001aec:	bf08      	it	eq
 8001aee:	2c03      	cmpeq	r4, #3
 8001af0:	d105      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x4e>
		  inc_secCounter();
 8001af2:	f7ff fbf9 	bl	80012e8 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001afa:	f001 fe08 	bl	800370e <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8001afe:	f7ff fc0f 	bl	8001320 <inc_msCounter>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bdb0      	pop	{r4, r5, r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40020800 	.word	0x40020800

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2104      	movs	r1, #4
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <ST7789_WriteCommand+0x3c>)
 8001b34:	f001 fdd2 	bl	80036dc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <ST7789_WriteCommand+0x40>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	2396      	movs	r3, #150	; 0x96
 8001b3e:	1df9      	adds	r1, r7, #7
 8001b40:	2201      	movs	r2, #1
 8001b42:	f003 f86e 	bl	8004c22 <HAL_SPI_Transmit>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <ST7789_WriteCommand+0x34>
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <ST7789_WriteCommand+0x44>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f043 0305 	orr.w	r3, r3, #5
 8001b54:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <ST7789_WriteCommand+0x44>)
 8001b56:	6013      	str	r3, [r2, #0]
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40020000 	.word	0x40020000
 8001b64:	20000000 	.word	0x20000000
 8001b68:	200052d4 	.word	0x200052d4

08001b6c <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8001b76:	2200      	movs	r2, #0
 8001b78:	2104      	movs	r1, #4
 8001b7a:	480e      	ldr	r0, [pc, #56]	; (8001bb4 <ST7789_WriteCommands+0x48>)
 8001b7c:	f001 fdae 	bl	80036dc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8001b80:	4b0d      	ldr	r3, [pc, #52]	; (8001bb8 <ST7789_WriteCommands+0x4c>)
 8001b82:	6818      	ldr	r0, [r3, #0]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	2196      	movs	r1, #150	; 0x96
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f003 f845 	bl	8004c22 <HAL_SPI_Transmit>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <ST7789_WriteCommands+0x3e>
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <ST7789_WriteCommands+0x50>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f043 0305 	orr.w	r3, r3, #5
 8001ba6:	4a05      	ldr	r2, [pc, #20]	; (8001bbc <ST7789_WriteCommands+0x50>)
 8001ba8:	6013      	str	r3, [r2, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	200052d4 	.word	0x200052d4

08001bc0 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2104      	movs	r1, #4
 8001bd2:	481e      	ldr	r0, [pc, #120]	; (8001c4c <ST7789_WriteData+0x8c>)
 8001bd4:	f001 fd82 	bl	80036dc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8001bd8:	e028      	b.n	8001c2c <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bf28      	it	cs
 8001be4:	4613      	movcs	r3, r2
 8001be6:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <ST7789_WriteData+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <ST7789_WriteData+0x94>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	89ba      	ldrh	r2, [r7, #12]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 f950 	bl	8004e9c <HAL_SPI_Transmit_DMA>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001c06:	e002      	b.n	8001c0e <ST7789_WriteData+0x4e>
 8001c08:	2001      	movs	r0, #1
 8001c0a:	f000 fec3 	bl	8002994 <HAL_Delay>
 8001c0e:	4b10      	ldr	r3, [pc, #64]	; (8001c50 <ST7789_WriteData+0x90>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f5      	bne.n	8001c08 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8001c1c:	89bb      	ldrh	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1d3      	bne.n	8001bda <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <ST7789_WriteData+0x84>
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <ST7789_WriteData+0x98>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f043 0305 	orr.w	r3, r3, #5
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <ST7789_WriteData+0x98>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	20000004 	.word	0x20000004
 8001c54:	20000000 	.word	0x20000000
 8001c58:	200052d4 	.word	0x200052d4

08001c5c <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2104      	movs	r1, #4
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <ST7789_WriteDataLine+0x64>)
 8001c70:	f001 fd34 	bl	80036dc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8001c74:	4b13      	ldr	r3, [pc, #76]	; (8001cc4 <ST7789_WriteDataLine+0x68>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8001c7a:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <ST7789_WriteDataLine+0x6c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	b292      	uxth	r2, r2
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f003 f909 	bl	8004e9c <HAL_SPI_Transmit_DMA>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8001c8e:	e002      	b.n	8001c96 <ST7789_WriteDataLine+0x3a>
 8001c90:	2001      	movs	r0, #1
 8001c92:	f000 fe7f 	bl	8002994 <HAL_Delay>
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <ST7789_WriteDataLine+0x68>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	f083 0301 	eor.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f5      	bne.n	8001c90 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <ST7789_WriteDataLine+0x5a>
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <ST7789_WriteDataLine+0x70>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f043 0305 	orr.w	r3, r3, #5
 8001cb2:	4a06      	ldr	r2, [pc, #24]	; (8001ccc <ST7789_WriteDataLine+0x70>)
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	20000004 	.word	0x20000004
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	200052d4 	.word	0x200052d4

08001cd0 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8001cda:	2201      	movs	r2, #1
 8001cdc:	2104      	movs	r1, #4
 8001cde:	480b      	ldr	r0, [pc, #44]	; (8001d0c <ST7789_WriteSmallData+0x3c>)
 8001ce0:	f001 fcfc 	bl	80036dc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <ST7789_WriteSmallData+0x40>)
 8001ce6:	6818      	ldr	r0, [r3, #0]
 8001ce8:	2396      	movs	r3, #150	; 0x96
 8001cea:	1df9      	adds	r1, r7, #7
 8001cec:	2201      	movs	r2, #1
 8001cee:	f002 ff98 	bl	8004c22 <HAL_SPI_Transmit>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <ST7789_WriteSmallData+0x34>
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <ST7789_WriteSmallData+0x44>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f043 0305 	orr.w	r3, r3, #5
 8001d00:	4a04      	ldr	r2, [pc, #16]	; (8001d14 <ST7789_WriteSmallData+0x44>)
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	20000000 	.word	0x20000000
 8001d14:	200052d4 	.word	0x200052d4

08001d18 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d003      	beq.n	8001d30 <ipsOn+0x18>
 8001d28:	2029      	movs	r0, #41	; 0x29
 8001d2a:	f7ff fefb 	bl	8001b24 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8001d2e:	e002      	b.n	8001d36 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8001d30:	2028      	movs	r0, #40	; 0x28
 8001d32:	f7ff fef7 	bl	8001b24 <ST7789_WriteCommand>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8001d4a:	2036      	movs	r0, #54	; 0x36
 8001d4c:	f7ff feea 	bl	8001b24 <ST7789_WriteCommand>
	switch (m) {
 8001d50:	79fb      	ldrb	r3, [r7, #7]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d81a      	bhi.n	8001d8c <ST7789_SetRotation+0x4c>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <ST7789_SetRotation+0x1c>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d75 	.word	0x08001d75
 8001d64:	08001d7d 	.word	0x08001d7d
 8001d68:	08001d85 	.word	0x08001d85
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8001d6c:	20c0      	movs	r0, #192	; 0xc0
 8001d6e:	f7ff ffaf 	bl	8001cd0 <ST7789_WriteSmallData>
		break;
 8001d72:	e00c      	b.n	8001d8e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d74:	20a0      	movs	r0, #160	; 0xa0
 8001d76:	f7ff ffab 	bl	8001cd0 <ST7789_WriteSmallData>
		break;
 8001d7a:	e008      	b.n	8001d8e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f7ff ffa7 	bl	8001cd0 <ST7789_WriteSmallData>
		break;
 8001d82:	e004      	b.n	8001d8e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8001d84:	2060      	movs	r0, #96	; 0x60
 8001d86:	f7ff ffa3 	bl	8001cd0 <ST7789_WriteSmallData>
		break;
 8001d8a:	e000      	b.n	8001d8e <ST7789_SetRotation+0x4e>
	default:
		break;
 8001d8c:	bf00      	nop
	}
}
 8001d8e:	bf00      	nop
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop

08001d98 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001d98:	b590      	push	{r4, r7, lr}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4604      	mov	r4, r0
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	4623      	mov	r3, r4
 8001da8:	80fb      	strh	r3, [r7, #6]
 8001daa:	4603      	mov	r3, r0
 8001dac:	80bb      	strh	r3, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	807b      	strh	r3, [r7, #2]
 8001db2:	4613      	mov	r3, r2
 8001db4:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	82fb      	strh	r3, [r7, #22]
 8001dba:	887b      	ldrh	r3, [r7, #2]
 8001dbc:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	827b      	strh	r3, [r7, #18]
 8001dc2:	883b      	ldrh	r3, [r7, #0]
 8001dc4:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8001dc6:	202a      	movs	r0, #42	; 0x2a
 8001dc8:	f7ff feac 	bl	8001b24 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8001dcc:	8afb      	ldrh	r3, [r7, #22]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	733b      	strb	r3, [r7, #12]
 8001dd6:	8afb      	ldrh	r3, [r7, #22]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	737b      	strb	r3, [r7, #13]
 8001ddc:	8abb      	ldrh	r3, [r7, #20]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	73bb      	strb	r3, [r7, #14]
 8001de6:	8abb      	ldrh	r3, [r7, #20]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2104      	movs	r1, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fee4 	bl	8001bc0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8001df8:	202b      	movs	r0, #43	; 0x2b
 8001dfa:	f7ff fe93 	bl	8001b24 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8001dfe:	8a7b      	ldrh	r3, [r7, #18]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	723b      	strb	r3, [r7, #8]
 8001e08:	8a7b      	ldrh	r3, [r7, #18]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	727b      	strb	r3, [r7, #9]
 8001e0e:	8a3b      	ldrh	r3, [r7, #16]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	72bb      	strb	r3, [r7, #10]
 8001e18:	8a3b      	ldrh	r3, [r7, #16]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	2104      	movs	r1, #4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fecb 	bl	8001bc0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8001e2a:	202c      	movs	r0, #44	; 0x2c
 8001e2c:	f7ff fe7a 	bl	8001b24 <ST7789_WriteCommand>
}
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd90      	pop	{r4, r7, pc}

08001e38 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8001e3c:	2014      	movs	r0, #20
 8001e3e:	f000 fda9 	bl	8002994 <HAL_Delay>
    ST7789_RST_Clr();
 8001e42:	2200      	movs	r2, #0
 8001e44:	2102      	movs	r1, #2
 8001e46:	4808      	ldr	r0, [pc, #32]	; (8001e68 <ST7789_Reset+0x30>)
 8001e48:	f001 fc48 	bl	80036dc <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8001e4c:	200a      	movs	r0, #10
 8001e4e:	f000 fda1 	bl	8002994 <HAL_Delay>
    ST7789_RST_Set();
 8001e52:	2201      	movs	r2, #1
 8001e54:	2102      	movs	r1, #2
 8001e56:	4804      	ldr	r0, [pc, #16]	; (8001e68 <ST7789_Reset+0x30>)
 8001e58:	f001 fc40 	bl	80036dc <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8001e5c:	2014      	movs	r0, #20
 8001e5e:	f000 fd99 	bl	8002994 <HAL_Delay>
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40020000 	.word	0x40020000

08001e6c <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b08f      	sub	sp, #60	; 0x3c
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8001e76:	203a      	movs	r0, #58	; 0x3a
 8001e78:	f7ff fe54 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8001e7c:	2055      	movs	r0, #85	; 0x55
 8001e7e:	f7ff ff27 	bl	8001cd0 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8001e82:	20b2      	movs	r0, #178	; 0xb2
 8001e84:	f7ff fe4e 	bl	8001b24 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <ST7789_Init+0x108>)
 8001e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e92:	6018      	str	r0, [r3, #0]
 8001e94:	3304      	adds	r3, #4
 8001e96:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8001e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fe8e 	bl	8001bc0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f7ff ff4b 	bl	8001d40 <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8001eaa:	20b7      	movs	r0, #183	; 0xb7
 8001eac:	f7ff fe3a 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8001eb0:	2035      	movs	r0, #53	; 0x35
 8001eb2:	f7ff ff0d 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8001eb6:	20bb      	movs	r0, #187	; 0xbb
 8001eb8:	f7ff fe34 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8001ebc:	2019      	movs	r0, #25
 8001ebe:	f7ff ff07 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8001ec2:	20c0      	movs	r0, #192	; 0xc0
 8001ec4:	f7ff fe2e 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8001ec8:	202c      	movs	r0, #44	; 0x2c
 8001eca:	f7ff ff01 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8001ece:	20c2      	movs	r0, #194	; 0xc2
 8001ed0:	f7ff fe28 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f7ff fefb 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8001eda:	20ff      	movs	r0, #255	; 0xff
 8001edc:	f7ff fef8 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8001ee0:	20c3      	movs	r0, #195	; 0xc3
 8001ee2:	f7ff fe1f 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8001ee6:	2012      	movs	r0, #18
 8001ee8:	f7ff fef2 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8001eec:	20c4      	movs	r0, #196	; 0xc4
 8001eee:	f7ff fe19 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8001ef2:	2020      	movs	r0, #32
 8001ef4:	f7ff feec 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8001ef8:	20c6      	movs	r0, #198	; 0xc6
 8001efa:	f7ff fe13 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8001efe:	200f      	movs	r0, #15
 8001f00:	f7ff fee6 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8001f04:	20d0      	movs	r0, #208	; 0xd0
 8001f06:	f7ff fe0d 	bl	8001b24 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8001f0a:	20a4      	movs	r0, #164	; 0xa4
 8001f0c:	f7ff fee0 	bl	8001cd0 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8001f10:	20a1      	movs	r0, #161	; 0xa1
 8001f12:	f7ff fedd 	bl	8001cd0 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8001f16:	20e0      	movs	r0, #224	; 0xe0
 8001f18:	f7ff fe04 	bl	8001b24 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8001f1c:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <ST7789_Init+0x10c>)
 8001f1e:	f107 041c 	add.w	r4, r7, #28
 8001f22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f24:	c407      	stmia	r4!, {r0, r1, r2}
 8001f26:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f28:	f107 031c 	add.w	r3, r7, #28
 8001f2c:	210e      	movs	r1, #14
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fe46 	bl	8001bc0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8001f34:	20e1      	movs	r0, #225	; 0xe1
 8001f36:	f7ff fdf5 	bl	8001b24 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <ST7789_Init+0x110>)
 8001f3c:	f107 040c 	add.w	r4, r7, #12
 8001f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f42:	c407      	stmia	r4!, {r0, r1, r2}
 8001f44:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8001f46:	f107 030c 	add.w	r3, r7, #12
 8001f4a:	210e      	movs	r1, #14
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe37 	bl	8001bc0 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8001f52:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <ST7789_Init+0x114>)
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8001f56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fe05 	bl	8001b6c <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8001f62:	88fb      	ldrh	r3, [r7, #6]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f80d 	bl	8001f84 <ST7789_Fill_Color>
}
 8001f6a:	bf00      	nop
 8001f6c:	373c      	adds	r7, #60	; 0x3c
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd90      	pop	{r4, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	0800acb4 	.word	0x0800acb4
 8001f78:	0800acbc 	.word	0x0800acbc
 8001f7c:	0800accc 	.word	0x0800accc
 8001f80:	28131121 	.word	0x28131121

08001f84 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b0fc      	sub	sp, #496	; 0x1f0
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	1dbb      	adds	r3, r7, #6
 8001f8e:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8001f90:	23ef      	movs	r3, #239	; 0xef
 8001f92:	22ef      	movs	r2, #239	; 0xef
 8001f94:	2100      	movs	r1, #0
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fefe 	bl	8001d98 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8001fa8:	e01e      	b.n	8001fe8 <ST7789_Fill_Color+0x64>
		*(uint16_t *)(data + i) = HTONS(color);
 8001faa:	1dbb      	adds	r3, r7, #6
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	0a1b      	lsrs	r3, r3, #8
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	1dbb      	adds	r3, r7, #6
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21b      	sxth	r3, r3
 8001fbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b219      	sxth	r1, r3
 8001fc6:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8001fca:	f107 020c 	add.w	r2, r7, #12
 8001fce:	4413      	add	r3, r2
 8001fd0:	b28a      	uxth	r2, r1
 8001fd2:	801a      	strh	r2, [r3, #0]
		i += 2;
 8001fd4:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8001fd8:	3302      	adds	r3, #2
 8001fda:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8001fde:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8001fe8:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8001fec:	2bef      	cmp	r3, #239	; 0xef
 8001fee:	d9dc      	bls.n	8001faa <ST7789_Fill_Color+0x26>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8001ff6:	e00b      	b.n	8002010 <ST7789_Fill_Color+0x8c>
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff fe2b 	bl	8001c5c <ST7789_WriteDataLine>
 8002006:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800200a:	3301      	adds	r3, #1
 800200c:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002010:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002014:	2bef      	cmp	r3, #239	; 0xef
 8002016:	d9ef      	bls.n	8001ff8 <ST7789_Fill_Color+0x74>

//#endif
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	80fb      	strh	r3, [r7, #6]
 8002036:	4603      	mov	r3, r0
 8002038:	80bb      	strh	r3, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	2bef      	cmp	r3, #239	; 0xef
 8002046:	d82b      	bhi.n	80020a0 <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002048:	883b      	ldrh	r3, [r7, #0]
 800204a:	2bef      	cmp	r3, #239	; 0xef
 800204c:	d828      	bhi.n	80020a0 <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 800204e:	8c3b      	ldrh	r3, [r7, #32]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	723b      	strb	r3, [r7, #8]
 8002058:	8c3b      	ldrh	r3, [r7, #32]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	887a      	ldrh	r2, [r7, #2]
 8002062:	88b9      	ldrh	r1, [r7, #4]
 8002064:	88f8      	ldrh	r0, [r7, #6]
 8002066:	f7ff fe97 	bl	8001d98 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 800206a:	88bb      	ldrh	r3, [r7, #4]
 800206c:	81fb      	strh	r3, [r7, #14]
 800206e:	e012      	b.n	8002096 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8002070:	88fb      	ldrh	r3, [r7, #6]
 8002072:	81bb      	strh	r3, [r7, #12]
 8002074:	e008      	b.n	8002088 <ST7789_Fill+0x64>
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	2102      	movs	r1, #2
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fd9f 	bl	8001bc0 <ST7789_WriteData>
 8002082:	89bb      	ldrh	r3, [r7, #12]
 8002084:	3301      	adds	r3, #1
 8002086:	81bb      	strh	r3, [r7, #12]
 8002088:	89ba      	ldrh	r2, [r7, #12]
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	429a      	cmp	r2, r3
 800208e:	d9f2      	bls.n	8002076 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8002090:	89fb      	ldrh	r3, [r7, #14]
 8002092:	3301      	adds	r3, #1
 8002094:	81fb      	strh	r3, [r7, #14]
 8002096:	89fa      	ldrh	r2, [r7, #14]
 8002098:	883b      	ldrh	r3, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d9e8      	bls.n	8002070 <ST7789_Fill+0x4c>
 800209e:	e000      	b.n	80020a2 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80020a0:	bf00      	nop
	}
}
 80020a2:	3714      	adds	r7, #20
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd90      	pop	{r4, r7, pc}

080020a8 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80020a8:	b082      	sub	sp, #8
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b089      	sub	sp, #36	; 0x24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	4603      	mov	r3, r0
 80020b4:	80fb      	strh	r3, [r7, #6]
 80020b6:	460b      	mov	r3, r1
 80020b8:	80bb      	strh	r3, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80020be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	4413      	add	r3, r2
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29c      	uxth	r4, r3
 80020ce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29b      	uxth	r3, r3
 80020de:	88b9      	ldrh	r1, [r7, #4]
 80020e0:	88f8      	ldrh	r0, [r7, #6]
 80020e2:	4622      	mov	r2, r4
 80020e4:	f7ff fe58 	bl	8001d98 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 80020e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	733b      	strb	r3, [r7, #12]
 80020f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 80020f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	b29b      	uxth	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	723b      	strb	r3, [r7, #8]
 8002104:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002108:	b2db      	uxtb	r3, r3
 800210a:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8002110:	2300      	movs	r3, #0
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	e02f      	b.n	8002176 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8002116:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	3b20      	subs	r3, #32
 800211c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4619      	mov	r1, r3
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	440b      	add	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e015      	b.n	8002164 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d003      	beq.n	8002150 <ST7789_WriteChar+0xa8>
				uk = cdata;
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	e002      	b.n	8002156 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8002150:	f107 0308 	add.w	r3, r7, #8
 8002154:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8002156:	2102      	movs	r1, #2
 8002158:	6978      	ldr	r0, [r7, #20]
 800215a:	f7ff fd31 	bl	8001bc0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	3301      	adds	r3, #1
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002168:	461a      	mov	r2, r3
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	4293      	cmp	r3, r2
 800216e:	d3e3      	bcc.n	8002138 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	3301      	adds	r3, #1
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800217a:	461a      	mov	r2, r3
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4293      	cmp	r3, r2
 8002180:	d3c9      	bcc.n	8002116 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	3724      	adds	r7, #36	; 0x24
 8002188:	46bd      	mov	sp, r7
 800218a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800218e:	b002      	add	sp, #8
 8002190:	4770      	bx	lr

08002192 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002192:	b082      	sub	sp, #8
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af04      	add	r7, sp, #16
 800219a:	603a      	str	r2, [r7, #0]
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
 80021a2:	460b      	mov	r3, r1
 80021a4:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d03f      	beq.n	800222c <ST7789_WriteString+0x9a>

	while (*str) {
 80021ac:	e039      	b.n	8002222 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	7d3a      	ldrb	r2, [r7, #20]
 80021b2:	4413      	add	r3, r2
 80021b4:	2bef      	cmp	r3, #239	; 0xef
 80021b6:	dd13      	ble.n	80021e0 <ST7789_WriteString+0x4e>
			x = 0;
 80021b8:	2300      	movs	r3, #0
 80021ba:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80021bc:	7d7b      	ldrb	r3, [r7, #21]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	88bb      	ldrh	r3, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 80021c6:	88bb      	ldrh	r3, [r7, #4]
 80021c8:	7d7a      	ldrb	r2, [r7, #21]
 80021ca:	4413      	add	r3, r2
 80021cc:	2bef      	cmp	r3, #239	; 0xef
 80021ce:	dc2f      	bgt.n	8002230 <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b20      	cmp	r3, #32
 80021d6:	d103      	bne.n	80021e0 <ST7789_WriteString+0x4e>
				str++;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3301      	adds	r3, #1
 80021dc:	603b      	str	r3, [r7, #0]
				continue;
 80021de:	e020      	b.n	8002222 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b0a      	cmp	r3, #10
 80021e6:	d012      	beq.n	800220e <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	781a      	ldrb	r2, [r3, #0]
 80021ec:	88b9      	ldrh	r1, [r7, #4]
 80021ee:	88f8      	ldrh	r0, [r7, #6]
 80021f0:	8c3b      	ldrh	r3, [r7, #32]
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	f7ff ff53 	bl	80020a8 <ST7789_WriteChar>
			x += font.width;
 8002202:	7d3b      	ldrb	r3, [r7, #20]
 8002204:	b29a      	uxth	r2, r3
 8002206:	88fb      	ldrh	r3, [r7, #6]
 8002208:	4413      	add	r3, r2
 800220a:	80fb      	strh	r3, [r7, #6]
 800220c:	e006      	b.n	800221c <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002212:	7d7b      	ldrb	r3, [r7, #21]
 8002214:	b29a      	uxth	r2, r3
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1c1      	bne.n	80021ae <ST7789_WriteString+0x1c>
 800222a:	e002      	b.n	8002232 <ST7789_WriteString+0xa0>
	if (!str) return;
 800222c:	bf00      	nop
 800222e:	e000      	b.n	8002232 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8002230:	bf00      	nop
	}
}
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800223a:	b002      	add	sp, #8
 800223c:	4770      	bx	lr

0800223e <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b0a4      	sub	sp, #144	; 0x90
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	f107 0310 	add.w	r3, r7, #16
 8002252:	227c      	movs	r2, #124	; 0x7c
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f007 ff12 	bl	800a080 <memset>

	memset(st, 0x20, 127);
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	227f      	movs	r2, #127	; 0x7f
 8002262:	2120      	movs	r1, #32
 8002264:	4618      	mov	r0, r3
 8002266:	f007 ff0b 	bl	800a080 <memset>
	int8_t k = strlen(str);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7fd ffb0 	bl	80001d0 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8002276:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	429a      	cmp	r2, r3
 800227e:	da26      	bge.n	80022ce <mkLineCenter+0x90>
		int8_t n = (width - k)/2;
 8002280:	887a      	ldrh	r2, [r7, #2]
 8002282:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	0fda      	lsrs	r2, r3, #31
 800228a:	4413      	add	r3, r2
 800228c:	105b      	asrs	r3, r3, #1
 800228e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8002292:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8002296:	f107 020c 	add.w	r2, r7, #12
 800229a:	4413      	add	r3, r2
 800229c:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f007 fede 	bl	800a064 <memcpy>
		st[k + n*2 + 1] = '\0';
 80022a8:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80022ac:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	3301      	adds	r3, #1
 80022b6:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 80022c2:	f107 030c 	add.w	r3, r7, #12
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f008 f835 	bl	800a338 <strcpy>
	}

	return str;
 80022ce:	687b      	ldr	r3, [r7, #4]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3790      	adds	r7, #144	; 0x90
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_MspInit+0x54>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_MspInit+0x54>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <HAL_MspInit+0x54>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_MspInit+0x54>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_MspInit+0x54>)
 8002304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002308:	6413      	str	r3, [r2, #64]	; 0x40
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_MspInit+0x54>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	210f      	movs	r1, #15
 800231a:	f06f 0001 	mvn.w	r0, #1
 800231e:	f000 fc15 	bl	8002b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023800 	.word	0x40023800

08002330 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002338:	f107 0308 	add.w	r3, r7, #8
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a0c      	ldr	r2, [pc, #48]	; (800237c <HAL_RTC_MspInit+0x4c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d110      	bne.n	8002372 <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002350:	2302      	movs	r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002354:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_RTC_MspInit+0x50>)
 8002356:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	4618      	mov	r0, r3
 800235e:	f001 ffc3 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8002368:	f7ff fbd4 	bl	8001b14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RTC_MspInit+0x54>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002372:	bf00      	nop
 8002374:	3718      	adds	r7, #24
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40002800 	.word	0x40002800
 8002380:	00190300 	.word	0x00190300
 8002384:	42470e3c 	.word	0x42470e3c

08002388 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	; 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a39      	ldr	r2, [pc, #228]	; (800248c <HAL_SPI_MspInit+0x104>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d16b      	bne.n	8002482 <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	4b38      	ldr	r3, [pc, #224]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b2:	4a37      	ldr	r2, [pc, #220]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023b8:	6453      	str	r3, [r2, #68]	; 0x44
 80023ba:	4b35      	ldr	r3, [pc, #212]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c2:	613b      	str	r3, [r7, #16]
 80023c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a30      	ldr	r2, [pc, #192]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_SPI_MspInit+0x108>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 80023e2:	23a0      	movs	r3, #160	; 0xa0
 80023e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023f2:	2305      	movs	r3, #5
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4825      	ldr	r0, [pc, #148]	; (8002494 <HAL_SPI_MspInit+0x10c>)
 80023fe:	f000 ffd1 	bl	80033a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002402:	4b25      	ldr	r3, [pc, #148]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002404:	4a25      	ldr	r2, [pc, #148]	; (800249c <HAL_SPI_MspInit+0x114>)
 8002406:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800240a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800240e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002412:	2240      	movs	r2, #64	; 0x40
 8002414:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002416:	4b20      	ldr	r3, [pc, #128]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002418:	2200      	movs	r2, #0
 800241a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800241c:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800241e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002422:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002424:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002426:	2200      	movs	r2, #0
 8002428:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002438:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800243c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800243e:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002440:	2204      	movs	r2, #4
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002444:	4b14      	ldr	r3, [pc, #80]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002446:	2203      	movs	r2, #3
 8002448:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800244a:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800244c:	2200      	movs	r2, #0
 800244e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002450:	4b11      	ldr	r3, [pc, #68]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002452:	2200      	movs	r2, #0
 8002454:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002456:	4810      	ldr	r0, [pc, #64]	; (8002498 <HAL_SPI_MspInit+0x110>)
 8002458:	f000 fba2 	bl	8002ba0 <HAL_DMA_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002462:	f7ff fb57 	bl	8001b14 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800246a:	649a      	str	r2, [r3, #72]	; 0x48
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <HAL_SPI_MspInit+0x110>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002472:	2200      	movs	r2, #0
 8002474:	2105      	movs	r1, #5
 8002476:	2023      	movs	r0, #35	; 0x23
 8002478:	f000 fb68 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800247c:	2023      	movs	r0, #35	; 0x23
 800247e:	f000 fb81 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002482:	bf00      	nop
 8002484:	3728      	adds	r7, #40	; 0x28
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40013000 	.word	0x40013000
 8002490:	40023800 	.word	0x40023800
 8002494:	40020000 	.word	0x40020000
 8002498:	200052d8 	.word	0x200052d8
 800249c:	40026458 	.word	0x40026458

080024a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d115      	bne.n	80024de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_TIM_Base_MspInit+0x48>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a0b      	ldr	r2, [pc, #44]	; (80024e8 <HAL_TIM_Base_MspInit+0x48>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <HAL_TIM_Base_MspInit+0x48>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80024ce:	2200      	movs	r2, #0
 80024d0:	2101      	movs	r1, #1
 80024d2:	201c      	movs	r0, #28
 80024d4:	f000 fb3a 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024d8:	201c      	movs	r0, #28
 80024da:	f000 fb53 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023800 	.word	0x40023800

080024ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08a      	sub	sp, #40	; 0x28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f4:	f107 0314 	add.w	r3, r7, #20
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	609a      	str	r2, [r3, #8]
 8002500:	60da      	str	r2, [r3, #12]
 8002502:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a35      	ldr	r2, [pc, #212]	; (80025e0 <HAL_UART_MspInit+0xf4>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d163      	bne.n	80025d6 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b34      	ldr	r3, [pc, #208]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	4a33      	ldr	r2, [pc, #204]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6413      	str	r3, [r2, #64]	; 0x40
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	4a2c      	ldr	r2, [pc, #176]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <HAL_UART_MspInit+0xf8>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8002546:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800254a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254c:	2302      	movs	r3, #2
 800254e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002554:	2303      	movs	r3, #3
 8002556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002558:	2307      	movs	r3, #7
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800255c:	f107 0314 	add.w	r3, r7, #20
 8002560:	4619      	mov	r1, r3
 8002562:	4821      	ldr	r0, [pc, #132]	; (80025e8 <HAL_UART_MspInit+0xfc>)
 8002564:	f000 ff1e 	bl	80033a4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_UART_MspInit+0x100>)
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_UART_MspInit+0x104>)
 800256c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_UART_MspInit+0x100>)
 8002570:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002574:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002576:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <HAL_UART_MspInit+0x100>)
 8002578:	2240      	movs	r2, #64	; 0x40
 800257a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <HAL_UART_MspInit+0x100>)
 800257e:	2200      	movs	r2, #0
 8002580:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002582:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <HAL_UART_MspInit+0x100>)
 8002584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002588:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800258a:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_UART_MspInit+0x100>)
 800258c:	2200      	movs	r2, #0
 800258e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_UART_MspInit+0x100>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_UART_MspInit+0x100>)
 8002598:	2200      	movs	r2, #0
 800259a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_UART_MspInit+0x100>)
 800259e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025a2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <HAL_UART_MspInit+0x100>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80025aa:	4810      	ldr	r0, [pc, #64]	; (80025ec <HAL_UART_MspInit+0x100>)
 80025ac:	f000 faf8 	bl	8002ba0 <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80025b6:	f7ff faad 	bl	8001b14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_UART_MspInit+0x100>)
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
 80025c0:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_UART_MspInit+0x100>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2105      	movs	r1, #5
 80025ca:	2027      	movs	r0, #39	; 0x27
 80025cc:	f000 fabe 	bl	8002b4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025d0:	2027      	movs	r0, #39	; 0x27
 80025d2:	f000 fad7 	bl	8002b84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40004800 	.word	0x40004800
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020400 	.word	0x40020400
 80025ec:	2000537c 	.word	0x2000537c
 80025f0:	40026058 	.word	0x40026058

080025f4 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025fa:	1d3b      	adds	r3, r7, #4
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002608:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_FSMC_MspInit+0x98>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d139      	bne.n	8002684 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8002610:	4b1e      	ldr	r3, [pc, #120]	; (800268c <HAL_FSMC_MspInit+0x98>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_FSMC_MspInit+0x9c>)
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	4a1c      	ldr	r2, [pc, #112]	; (8002690 <HAL_FSMC_MspInit+0x9c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6393      	str	r3, [r2, #56]	; 0x38
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_FSMC_MspInit+0x9c>)
 8002628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002632:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002636:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002640:	2303      	movs	r3, #3
 8002642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002644:	230c      	movs	r3, #12
 8002646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002648:	1d3b      	adds	r3, r7, #4
 800264a:	4619      	mov	r1, r3
 800264c:	4811      	ldr	r0, [pc, #68]	; (8002694 <HAL_FSMC_MspInit+0xa0>)
 800264e:	f000 fea9 	bl	80033a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8002652:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8002656:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002664:	230c      	movs	r3, #12
 8002666:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002668:	1d3b      	adds	r3, r7, #4
 800266a:	4619      	mov	r1, r3
 800266c:	480a      	ldr	r0, [pc, #40]	; (8002698 <HAL_FSMC_MspInit+0xa4>)
 800266e:	f000 fe99 	bl	80033a4 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2105      	movs	r1, #5
 8002676:	2030      	movs	r0, #48	; 0x30
 8002678:	f000 fa68 	bl	8002b4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 800267c:	2030      	movs	r0, #48	; 0x30
 800267e:	f000 fa81 	bl	8002b84 <HAL_NVIC_EnableIRQ>
 8002682:	e000      	b.n	8002686 <HAL_FSMC_MspInit+0x92>
    return;
 8002684:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	200008f0 	.word	0x200008f0
 8002690:	40023800 	.word	0x40023800
 8002694:	40021000 	.word	0x40021000
 8002698:	40020c00 	.word	0x40020c00

0800269c <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 80026a4:	f7ff ffa6 	bl	80025f4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b08c      	sub	sp, #48	; 0x30
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80026c0:	2200      	movs	r2, #0
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	2019      	movs	r0, #25
 80026c6:	f000 fa41 	bl	8002b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026ca:	2019      	movs	r0, #25
 80026cc:	f000 fa5a 	bl	8002b84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026d0:	2300      	movs	r3, #0
 80026d2:	60fb      	str	r3, [r7, #12]
 80026d4:	4b1f      	ldr	r3, [pc, #124]	; (8002754 <HAL_InitTick+0xa4>)
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	4a1e      	ldr	r2, [pc, #120]	; (8002754 <HAL_InitTick+0xa4>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6453      	str	r3, [r2, #68]	; 0x44
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_InitTick+0xa4>)
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ec:	f107 0210 	add.w	r2, r7, #16
 80026f0:	f107 0314 	add.w	r3, r7, #20
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fdc4 	bl	8004284 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80026fc:	f001 fdae 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8002700:	4603      	mov	r3, r0
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002708:	4a13      	ldr	r2, [pc, #76]	; (8002758 <HAL_InitTick+0xa8>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0c9b      	lsrs	r3, r3, #18
 8002710:	3b01      	subs	r3, #1
 8002712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002714:	4b11      	ldr	r3, [pc, #68]	; (800275c <HAL_InitTick+0xac>)
 8002716:	4a12      	ldr	r2, [pc, #72]	; (8002760 <HAL_InitTick+0xb0>)
 8002718:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_InitTick+0xac>)
 800271c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002720:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_InitTick+0xac>)
 8002724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002726:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <HAL_InitTick+0xac>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_InitTick+0xac>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002734:	4809      	ldr	r0, [pc, #36]	; (800275c <HAL_InitTick+0xac>)
 8002736:	f002 fedb 	bl	80054f0 <HAL_TIM_Base_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <HAL_InitTick+0xac>)
 8002742:	f002 ff25 	bl	8005590 <HAL_TIM_Base_Start_IT>
 8002746:	4603      	mov	r3, r0
 8002748:	e000      	b.n	800274c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3730      	adds	r7, #48	; 0x30
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	431bde83 	.word	0x431bde83
 800275c:	200054e4 	.word	0x200054e4
 8002760:	40010000 	.word	0x40010000

08002764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002776:	e7fe      	b.n	8002776 <HardFault_Handler+0x4>

08002778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler+0x4>

0800277e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800277e:	b480      	push	{r7}
 8002780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002782:	e7fe      	b.n	8002782 <BusFault_Handler+0x4>

08002784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002788:	e7fe      	b.n	8002788 <UsageFault_Handler+0x4>

0800278a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA1_Stream3_IRQHandler+0x10>)
 800279e:	f000 fb97 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	2000537c 	.word	0x2000537c

080027ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80027b2:	f002 ff5d 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200054e4 	.word	0x200054e4

080027c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027c4:	4802      	ldr	r0, [pc, #8]	; (80027d0 <TIM2_IRQHandler+0x10>)
 80027c6:	f002 ff53 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20005498 	.word	0x20005498

080027d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <SPI1_IRQHandler+0x10>)
 80027da:	f002 fc15 	bl	8005008 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20005440 	.word	0x20005440

080027e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <USART3_IRQHandler+0x10>)
 80027ee:	f003 fbfd 	bl	8005fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20005338 	.word	0x20005338

080027fc <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <FSMC_IRQHandler+0x10>)
 8002802:	f000 ffec 	bl	80037de <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200053e0 	.word	0x200053e0

08002810 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <DMA2_Stream3_IRQHandler+0x10>)
 8002816:	f000 fb5b 	bl	8002ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200052d8 	.word	0x200052d8

08002824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800282c:	4a14      	ldr	r2, [pc, #80]	; (8002880 <_sbrk+0x5c>)
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <_sbrk+0x60>)
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002838:	4b13      	ldr	r3, [pc, #76]	; (8002888 <_sbrk+0x64>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <_sbrk+0x64>)
 8002842:	4a12      	ldr	r2, [pc, #72]	; (800288c <_sbrk+0x68>)
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <_sbrk+0x64>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4413      	add	r3, r2
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	429a      	cmp	r2, r3
 8002852:	d207      	bcs.n	8002864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002854:	f007 fb22 	bl	8009e9c <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	220c      	movs	r2, #12
 800285c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002862:	e009      	b.n	8002878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <_sbrk+0x64>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <_sbrk+0x64>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4413      	add	r3, r2
 8002872:	4a05      	ldr	r2, [pc, #20]	; (8002888 <_sbrk+0x64>)
 8002874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	20020000 	.word	0x20020000
 8002884:	00000800 	.word	0x00000800
 8002888:	200008f4 	.word	0x200008f4
 800288c:	20005580 	.word	0x20005580

08002890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002894:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <SystemInit+0x28>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <SystemInit+0x28>)
 800289c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <SystemInit+0x28>)
 80028a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028aa:	609a      	str	r2, [r3, #8]
#endif
}
 80028ac:	bf00      	nop
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80028c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80028c2:	e003      	b.n	80028cc <LoopCopyDataInit>

080028c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80028c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80028c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80028ca:	3104      	adds	r1, #4

080028cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80028cc:	480b      	ldr	r0, [pc, #44]	; (80028fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80028d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80028d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80028d4:	d3f6      	bcc.n	80028c4 <CopyDataInit>
  ldr  r2, =_sbss
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80028d8:	e002      	b.n	80028e0 <LoopFillZerobss>

080028da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80028da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028dc:	f842 3b04 	str.w	r3, [r2], #4

080028e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028e0:	4b09      	ldr	r3, [pc, #36]	; (8002908 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028e4:	d3f9      	bcc.n	80028da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028e6:	f7ff ffd3 	bl	8002890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ea:	f007 fb8d 	bl	800a008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ee:	f7fe f9af 	bl	8000c50 <main>
  bx  lr    
 80028f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028f4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028f8:	0800cfb0 	.word	0x0800cfb0
  ldr  r0, =_sdata
 80028fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002900:	200000b4 	.word	0x200000b4
  ldr  r2, =_sbss
 8002904:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 8002908:	20005580 	.word	0x20005580

0800290c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800290c:	e7fe      	b.n	800290c <ADC_IRQHandler>
	...

08002910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <HAL_Init+0x40>)
 800291a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002920:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0a      	ldr	r2, [pc, #40]	; (8002950 <HAL_Init+0x40>)
 8002926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800292a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <HAL_Init+0x40>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a07      	ldr	r2, [pc, #28]	; (8002950 <HAL_Init+0x40>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f000 f8fc 	bl	8002b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293e:	200f      	movs	r0, #15
 8002940:	f7ff feb6 	bl	80026b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002944:	f7ff fcc8 	bl	80022d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40023c00 	.word	0x40023c00

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000038 	.word	0x20000038
 8002978:	2000552c 	.word	0x2000552c

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	; (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	2000552c 	.word	0x2000552c

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	; (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000038 	.word	0x20000038

080029dc <__NVIC_SetPriorityGrouping>:
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029f2:	68ba      	ldr	r2, [r7, #8]
 80029f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f8:	4013      	ands	r3, r2
 80029fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a0e:	4a04      	ldr	r2, [pc, #16]	; (8002a20 <__NVIC_SetPriorityGrouping+0x44>)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	60d3      	str	r3, [r2, #12]
}
 8002a14:	bf00      	nop
 8002a16:	3714      	adds	r7, #20
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <__NVIC_GetPriorityGrouping>:
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a28:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <__NVIC_GetPriorityGrouping+0x18>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0a1b      	lsrs	r3, r3, #8
 8002a2e:	f003 0307 	and.w	r3, r3, #7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <__NVIC_EnableIRQ>:
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0b      	blt.n	8002a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	; (8002a78 <__NVIC_EnableIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_SetPriority>:
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff4c 	bl	80029dc <__NVIC_SetPriorityGrouping>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5e:	f7ff ff61 	bl	8002a24 <__NVIC_GetPriorityGrouping>
 8002b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	6978      	ldr	r0, [r7, #20]
 8002b6a:	f7ff ffb1 	bl	8002ad0 <NVIC_EncodePriority>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff80 	bl	8002a7c <__NVIC_SetPriority>
}
 8002b7c:	bf00      	nop
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ff54 	bl	8002a40 <__NVIC_EnableIRQ>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff fee6 	bl	800297c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e099      	b.n	8002cf0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bdc:	e00f      	b.n	8002bfe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bde:	f7ff fecd 	bl	800297c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d908      	bls.n	8002bfe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e078      	b.n	8002cf0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1e8      	bne.n	8002bde <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	4b38      	ldr	r3, [pc, #224]	; (8002cf8 <HAL_DMA_Init+0x158>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2b04      	cmp	r3, #4
 8002c56:	d107      	bne.n	8002c68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4313      	orrs	r3, r2
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d117      	bne.n	8002cc2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00e      	beq.n	8002cc2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 fb01 	bl	80032ac <DMA_CheckFifoParam>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2240      	movs	r2, #64	; 0x40
 8002cb4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e016      	b.n	8002cf0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fab8 	bl	8003240 <DMA_CalcBaseAndBitshift>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd8:	223f      	movs	r2, #63	; 0x3f
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	f010803f 	.word	0xf010803f

08002cfc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d101      	bne.n	8002d22 <HAL_DMA_Start_IT+0x26>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e040      	b.n	8002da4 <HAL_DMA_Start_IT+0xa8>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d12f      	bne.n	8002d96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 fa4a 	bl	80031e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	223f      	movs	r2, #63	; 0x3f
 8002d56:	409a      	lsls	r2, r3
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0216 	orr.w	r2, r2, #22
 8002d6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d007      	beq.n	8002d84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0208 	orr.w	r2, r2, #8
 8002d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	e005      	b.n	8002da2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002dba:	f7ff fddf 	bl	800297c <HAL_GetTick>
 8002dbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d008      	beq.n	8002dde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e052      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0216 	bic.w	r2, r2, #22
 8002dec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d103      	bne.n	8002e0e <HAL_DMA_Abort+0x62>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0208 	bic.w	r2, r2, #8
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e2e:	e013      	b.n	8002e58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e30:	f7ff fda4 	bl	800297c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b05      	cmp	r3, #5
 8002e3c:	d90c      	bls.n	8002e58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2203      	movs	r2, #3
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e015      	b.n	8002e84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e4      	bne.n	8002e30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	223f      	movs	r2, #63	; 0x3f
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d004      	beq.n	8002eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e00c      	b.n	8002ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0201 	bic.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002edc:	4b92      	ldr	r3, [pc, #584]	; (8003128 <HAL_DMA_IRQHandler+0x258>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a92      	ldr	r2, [pc, #584]	; (800312c <HAL_DMA_IRQHandler+0x25c>)
 8002ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee6:	0a9b      	lsrs	r3, r3, #10
 8002ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	2208      	movs	r2, #8
 8002efc:	409a      	lsls	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f28:	2208      	movs	r2, #8
 8002f2a:	409a      	lsls	r2, r3
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f34:	f043 0201 	orr.w	r2, r3, #1
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f40:	2201      	movs	r2, #1
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d012      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	2201      	movs	r2, #1
 8002f60:	409a      	lsls	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f043 0202 	orr.w	r2, r3, #2
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f76:	2204      	movs	r2, #4
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d012      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00b      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2204      	movs	r2, #4
 8002f96:	409a      	lsls	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa0:	f043 0204 	orr.w	r2, r3, #4
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2210      	movs	r2, #16
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d043      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03c      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fca:	2210      	movs	r2, #16
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d018      	beq.n	8003012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d108      	bne.n	8003000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d024      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	4798      	blx	r3
 8002ffe:	e01f      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003004:	2b00      	cmp	r3, #0
 8003006:	d01b      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e016      	b.n	8003040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d107      	bne.n	8003030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0208 	bic.w	r2, r2, #8
 800302e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2220      	movs	r2, #32
 8003046:	409a      	lsls	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 808e 	beq.w	800316e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 8086 	beq.w	800316e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2220      	movs	r2, #32
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b05      	cmp	r3, #5
 8003078:	d136      	bne.n	80030e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f022 0216 	bic.w	r2, r2, #22
 8003088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <HAL_DMA_IRQHandler+0x1da>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d007      	beq.n	80030ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0208 	bic.w	r2, r2, #8
 80030b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	223f      	movs	r2, #63	; 0x3f
 80030c0:	409a      	lsls	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d07d      	beq.n	80031da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
        }
        return;
 80030e6:	e078      	b.n	80031da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d01c      	beq.n	8003130 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d108      	bne.n	8003116 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003108:	2b00      	cmp	r3, #0
 800310a:	d030      	beq.n	800316e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
 8003114:	e02b      	b.n	800316e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d027      	beq.n	800316e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
 8003126:	e022      	b.n	800316e <HAL_DMA_IRQHandler+0x29e>
 8003128:	20000030 	.word	0x20000030
 800312c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10f      	bne.n	800315e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0210 	bic.w	r2, r2, #16
 800314c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	2b00      	cmp	r3, #0
 8003174:	d032      	beq.n	80031dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d022      	beq.n	80031c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2205      	movs	r2, #5
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	3301      	adds	r3, #1
 800319e:	60bb      	str	r3, [r7, #8]
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d307      	bcc.n	80031b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f2      	bne.n	800319a <HAL_DMA_IRQHandler+0x2ca>
 80031b4:	e000      	b.n	80031b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80031b6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	4798      	blx	r3
 80031d8:	e000      	b.n	80031dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80031da:	bf00      	nop
    }
  }
}
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop

080031e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003200:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d108      	bne.n	8003224 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003222:	e007      	b.n	8003234 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	60da      	str	r2, [r3, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3b10      	subs	r3, #16
 8003250:	4a14      	ldr	r2, [pc, #80]	; (80032a4 <DMA_CalcBaseAndBitshift+0x64>)
 8003252:	fba2 2303 	umull	r2, r3, r2, r3
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <DMA_CalcBaseAndBitshift+0x68>)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4413      	add	r3, r2
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d909      	bls.n	8003282 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003276:	f023 0303 	bic.w	r3, r3, #3
 800327a:	1d1a      	adds	r2, r3, #4
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	659a      	str	r2, [r3, #88]	; 0x58
 8003280:	e007      	b.n	8003292 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	aaaaaaab 	.word	0xaaaaaaab
 80032a8:	0800ce04 	.word	0x0800ce04

080032ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11f      	bne.n	8003306 <DMA_CheckFifoParam+0x5a>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d856      	bhi.n	800337a <DMA_CheckFifoParam+0xce>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <DMA_CheckFifoParam+0x28>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032f7 	.word	0x080032f7
 80032dc:	080032e5 	.word	0x080032e5
 80032e0:	0800337b 	.word	0x0800337b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d046      	beq.n	800337e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032f4:	e043      	b.n	800337e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032fe:	d140      	bne.n	8003382 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003304:	e03d      	b.n	8003382 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800330e:	d121      	bne.n	8003354 <DMA_CheckFifoParam+0xa8>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b03      	cmp	r3, #3
 8003314:	d837      	bhi.n	8003386 <DMA_CheckFifoParam+0xda>
 8003316:	a201      	add	r2, pc, #4	; (adr r2, 800331c <DMA_CheckFifoParam+0x70>)
 8003318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331c:	0800332d 	.word	0x0800332d
 8003320:	08003333 	.word	0x08003333
 8003324:	0800332d 	.word	0x0800332d
 8003328:	08003345 	.word	0x08003345
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e030      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d025      	beq.n	800338a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003342:	e022      	b.n	800338a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003348:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800334c:	d11f      	bne.n	800338e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003352:	e01c      	b.n	800338e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d903      	bls.n	8003362 <DMA_CheckFifoParam+0xb6>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d003      	beq.n	8003368 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003360:	e018      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
      break;
 8003366:	e015      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e00b      	b.n	8003392 <DMA_CheckFifoParam+0xe6>
      break;
 800337a:	bf00      	nop
 800337c:	e00a      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800337e:	bf00      	nop
 8003380:	e008      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003382:	bf00      	nop
 8003384:	e006      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;   
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <DMA_CheckFifoParam+0xe8>
      break;
 8003392:	bf00      	nop
    }
  } 
  
  return status; 
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop

080033a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033b6:	2300      	movs	r3, #0
 80033b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	2300      	movs	r3, #0
 80033bc:	61fb      	str	r3, [r7, #28]
 80033be:	e16b      	b.n	8003698 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4013      	ands	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	429a      	cmp	r2, r3
 80033da:	f040 815a 	bne.w	8003692 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d005      	beq.n	80033f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d130      	bne.n	8003458 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	2203      	movs	r2, #3
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4313      	orrs	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	091b      	lsrs	r3, r3, #4
 8003442:	f003 0201 	and.w	r2, r3, #1
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	2b03      	cmp	r3, #3
 8003462:	d017      	beq.n	8003494 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2203      	movs	r2, #3
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d123      	bne.n	80034e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	220f      	movs	r2, #15
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	691a      	ldr	r2, [r3, #16]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	08da      	lsrs	r2, r3, #3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3208      	adds	r2, #8
 80034e2:	69b9      	ldr	r1, [r7, #24]
 80034e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0203 	and.w	r2, r3, #3
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80b4 	beq.w	8003692 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
 800352e:	4b60      	ldr	r3, [pc, #384]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	4a5f      	ldr	r2, [pc, #380]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 8003534:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003538:	6453      	str	r3, [r2, #68]	; 0x44
 800353a:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_GPIO_Init+0x30c>)
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003542:	60fb      	str	r3, [r7, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003546:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_GPIO_Init+0x310>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	220f      	movs	r2, #15
 800355e:	fa02 f303 	lsl.w	r3, r2, r3
 8003562:	43db      	mvns	r3, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4013      	ands	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_GPIO_Init+0x314>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d02b      	beq.n	80035ca <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a51      	ldr	r2, [pc, #324]	; (80036bc <HAL_GPIO_Init+0x318>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d025      	beq.n	80035c6 <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_GPIO_Init+0x31c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01f      	beq.n	80035c2 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4f      	ldr	r2, [pc, #316]	; (80036c4 <HAL_GPIO_Init+0x320>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d019      	beq.n	80035be <HAL_GPIO_Init+0x21a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a4e      	ldr	r2, [pc, #312]	; (80036c8 <HAL_GPIO_Init+0x324>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_GPIO_Init+0x216>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a4d      	ldr	r2, [pc, #308]	; (80036cc <HAL_GPIO_Init+0x328>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00d      	beq.n	80035b6 <HAL_GPIO_Init+0x212>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a4c      	ldr	r2, [pc, #304]	; (80036d0 <HAL_GPIO_Init+0x32c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d007      	beq.n	80035b2 <HAL_GPIO_Init+0x20e>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a4b      	ldr	r2, [pc, #300]	; (80036d4 <HAL_GPIO_Init+0x330>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d101      	bne.n	80035ae <HAL_GPIO_Init+0x20a>
 80035aa:	2307      	movs	r3, #7
 80035ac:	e00e      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e00c      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035b2:	2306      	movs	r3, #6
 80035b4:	e00a      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035b6:	2305      	movs	r3, #5
 80035b8:	e008      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ba:	2304      	movs	r3, #4
 80035bc:	e006      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035be:	2303      	movs	r3, #3
 80035c0:	e004      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035c2:	2302      	movs	r3, #2
 80035c4:	e002      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <HAL_GPIO_Init+0x228>
 80035ca:	2300      	movs	r3, #0
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	f002 0203 	and.w	r2, r2, #3
 80035d2:	0092      	lsls	r2, r2, #2
 80035d4:	4093      	lsls	r3, r2
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4313      	orrs	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035dc:	4935      	ldr	r1, [pc, #212]	; (80036b4 <HAL_GPIO_Init+0x310>)
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	089b      	lsrs	r3, r3, #2
 80035e2:	3302      	adds	r3, #2
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ea:	4b3b      	ldr	r3, [pc, #236]	; (80036d8 <HAL_GPIO_Init+0x334>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800360e:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003614:	4b30      	ldr	r3, [pc, #192]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003638:	4a27      	ldr	r2, [pc, #156]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b26      	ldr	r3, [pc, #152]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_GPIO_Init+0x334>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <HAL_GPIO_Init+0x334>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	3301      	adds	r3, #1
 8003696:	61fb      	str	r3, [r7, #28]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	f67f ae90 	bls.w	80033c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	3724      	adds	r7, #36	; 0x24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800
 80036b4:	40013800 	.word	0x40013800
 80036b8:	40020000 	.word	0x40020000
 80036bc:	40020400 	.word	0x40020400
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020c00 	.word	0x40020c00
 80036c8:	40021000 	.word	0x40021000
 80036cc:	40021400 	.word	0x40021400
 80036d0:	40021800 	.word	0x40021800
 80036d4:	40021c00 	.word	0x40021c00
 80036d8:	40013c00 	.word	0x40013c00

080036dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	460b      	mov	r3, r1
 80036e6:	807b      	strh	r3, [r7, #2]
 80036e8:	4613      	mov	r3, r2
 80036ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036ec:	787b      	ldrb	r3, [r7, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036f8:	e003      	b.n	8003702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	041a      	lsls	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	619a      	str	r2, [r3, #24]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800370e:	b480      	push	{r7}
 8003710:	b085      	sub	sp, #20
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003720:	887a      	ldrh	r2, [r7, #2]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4013      	ands	r3, r2
 8003726:	041a      	lsls	r2, r3, #16
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43d9      	mvns	r1, r3
 800372c:	887b      	ldrh	r3, [r7, #2]
 800372e:	400b      	ands	r3, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	619a      	str	r2, [r3, #24]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e03e      	b.n	80037d6 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d106      	bne.n	8003772 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f7fe ff95 	bl	800269c <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f003 fb4d 	bl	8006e1c <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	461a      	mov	r2, r3
 800378c:	68b9      	ldr	r1, [r7, #8]
 800378e:	f003 fb87 	bl	8006ea0 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	461a      	mov	r2, r3
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	f003 fbb5 	bl	8006f0c <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d108      	bne.n	80037bc <HAL_NAND_Init+0x7a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0204 	orr.w	r2, r2, #4
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e007      	b.n	80037cc <HAL_NAND_Init+0x8a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6a1a      	ldr	r2, [r3, #32]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0204 	orr.w	r2, r2, #4
 80037ca:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b082      	sub	sp, #8
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d10a      	bne.n	8003804 <HAL_NAND_IRQHandler+0x26>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	bf0c      	ite	eq
 80037fc:	2301      	moveq	r3, #1
 80037fe:	2300      	movne	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e009      	b.n	8003818 <HAL_NAND_IRQHandler+0x3a>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8b2 	bl	8003986 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2b10      	cmp	r3, #16
 8003828:	d108      	bne.n	800383c <HAL_NAND_IRQHandler+0x5e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	e007      	b.n	800384c <HAL_NAND_IRQHandler+0x6e>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b10      	cmp	r3, #16
 8003852:	d10a      	bne.n	800386a <HAL_NAND_IRQHandler+0x8c>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b02      	cmp	r3, #2
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	e009      	b.n	800387e <HAL_NAND_IRQHandler+0xa0>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b02      	cmp	r3, #2
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d017      	beq.n	80038b2 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f87f 	bl	8003986 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d108      	bne.n	80038a2 <HAL_NAND_IRQHandler+0xc4>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0202 	bic.w	r2, r2, #2
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e007      	b.n	80038b2 <HAL_NAND_IRQHandler+0xd4>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0202 	bic.w	r2, r2, #2
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b10      	cmp	r3, #16
 80038b8:	d10a      	bne.n	80038d0 <HAL_NAND_IRQHandler+0xf2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e009      	b.n	80038e4 <HAL_NAND_IRQHandler+0x106>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d017      	beq.n	8003918 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f84c 	bl	8003986 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d108      	bne.n	8003908 <HAL_NAND_IRQHandler+0x12a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 0204 	bic.w	r2, r2, #4
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	e007      	b.n	8003918 <HAL_NAND_IRQHandler+0x13a>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f022 0204 	bic.w	r2, r2, #4
 8003916:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b10      	cmp	r3, #16
 800391e:	d10a      	bne.n	8003936 <HAL_NAND_IRQHandler+0x158>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	e009      	b.n	800394a <HAL_NAND_IRQHandler+0x16c>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b40      	cmp	r3, #64	; 0x40
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d017      	beq.n	800397e <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f819 	bl	8003986 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b10      	cmp	r3, #16
 800395a:	d108      	bne.n	800396e <HAL_NAND_IRQHandler+0x190>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	e007      	b.n	800397e <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800397c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e264      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d075      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ba:	4ba3      	ldr	r3, [pc, #652]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f003 030c 	and.w	r3, r3, #12
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d00c      	beq.n	80039e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039c6:	4ba0      	ldr	r3, [pc, #640]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039ce:	2b08      	cmp	r3, #8
 80039d0:	d112      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039d2:	4b9d      	ldr	r3, [pc, #628]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039de:	d10b      	bne.n	80039f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039e0:	4b99      	ldr	r3, [pc, #612]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d05b      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x108>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d157      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e23f      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x74>
 8003a02:	4b91      	ldr	r3, [pc, #580]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a90      	ldr	r2, [pc, #576]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e01d      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x98>
 8003a1a:	4b8b      	ldr	r3, [pc, #556]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a8a      	ldr	r2, [pc, #552]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b88      	ldr	r3, [pc, #544]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a87      	ldr	r2, [pc, #540]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0xb0>
 8003a34:	4b84      	ldr	r3, [pc, #528]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a83      	ldr	r2, [pc, #524]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	4b81      	ldr	r3, [pc, #516]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a80      	ldr	r2, [pc, #512]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a54:	f7fe ff92 	bl	800297c <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe ff8e 	bl	800297c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e204      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b76      	ldr	r3, [pc, #472]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xc0>
 8003a7a:	e014      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe ff7e 	bl	800297c <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a84:	f7fe ff7a 	bl	800297c <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b64      	cmp	r3, #100	; 0x64
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e1f0      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0xe8>
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d063      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ab2:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003abe:	4b62      	ldr	r3, [pc, #392]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d11c      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	4b5f      	ldr	r3, [pc, #380]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d116      	bne.n	8003b04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad6:	4b5c      	ldr	r3, [pc, #368]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d001      	beq.n	8003aee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e1c4      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aee:	4b56      	ldr	r3, [pc, #344]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	4952      	ldr	r1, [pc, #328]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	e03a      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b0c:	4b4f      	ldr	r3, [pc, #316]	; (8003c4c <HAL_RCC_OscConfig+0x2b0>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fe ff33 	bl	800297c <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b1a:	f7fe ff2f 	bl	800297c <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e1a5      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b38:	4b43      	ldr	r3, [pc, #268]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	00db      	lsls	r3, r3, #3
 8003b46:	4940      	ldr	r1, [pc, #256]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	600b      	str	r3, [r1, #0]
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <HAL_RCC_OscConfig+0x2b0>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe ff12 	bl	800297c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe ff0e 	bl	800297c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e184      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d030      	beq.n	8003be8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_RCC_OscConfig+0x2b4>)
 8003b90:	2201      	movs	r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b94:	f7fe fef2 	bl	800297c <HAL_GetTick>
 8003b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b9a:	e008      	b.n	8003bae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b9c:	f7fe feee 	bl	800297c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d901      	bls.n	8003bae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003baa:	2303      	movs	r3, #3
 8003bac:	e164      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	4b26      	ldr	r3, [pc, #152]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d0f0      	beq.n	8003b9c <HAL_RCC_OscConfig+0x200>
 8003bba:	e015      	b.n	8003be8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <HAL_RCC_OscConfig+0x2b4>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bc2:	f7fe fedb 	bl	800297c <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bca:	f7fe fed7 	bl	800297c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e14d      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bdc:	4b1a      	ldr	r3, [pc, #104]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d1f0      	bne.n	8003bca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 80a0 	beq.w	8003d36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfa:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10f      	bne.n	8003c26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
 8003c16:	4b0c      	ldr	r3, [pc, #48]	; (8003c48 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c22:	2301      	movs	r3, #1
 8003c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c26:	4b0b      	ldr	r3, [pc, #44]	; (8003c54 <HAL_RCC_OscConfig+0x2b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d121      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c32:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <HAL_RCC_OscConfig+0x2b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a07      	ldr	r2, [pc, #28]	; (8003c54 <HAL_RCC_OscConfig+0x2b8>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3e:	f7fe fe9d 	bl	800297c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c44:	e011      	b.n	8003c6a <HAL_RCC_OscConfig+0x2ce>
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800
 8003c4c:	42470000 	.word	0x42470000
 8003c50:	42470e80 	.word	0x42470e80
 8003c54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c58:	f7fe fe90 	bl	800297c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e106      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b85      	ldr	r3, [pc, #532]	; (8003e80 <HAL_RCC_OscConfig+0x4e4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d106      	bne.n	8003c8c <HAL_RCC_OscConfig+0x2f0>
 8003c7e:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a80      	ldr	r2, [pc, #512]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	e01c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x32a>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d10c      	bne.n	8003cae <HAL_RCC_OscConfig+0x312>
 8003c94:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca0:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca4:	4a77      	ldr	r2, [pc, #476]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6713      	str	r3, [r2, #112]	; 0x70
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x32a>
 8003cae:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb2:	4a74      	ldr	r2, [pc, #464]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cba:	4b72      	ldr	r3, [pc, #456]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbe:	4a71      	ldr	r2, [pc, #452]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cce:	f7fe fe55 	bl	800297c <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fe fe51 	bl	800297c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0c5      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	4b65      	ldr	r3, [pc, #404]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x33a>
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fe fe3f 	bl	800297c <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fe fe3b 	bl	800297c <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e0af      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ee      	bne.n	8003d02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b56      	ldr	r3, [pc, #344]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	4a55      	ldr	r2, [pc, #340]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 809b 	beq.w	8003e76 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d40:	4b50      	ldr	r3, [pc, #320]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d05c      	beq.n	8003e06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d141      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fe fe0f 	bl	800297c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fe fe0b 	bl	800297c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e081      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d74:	4b43      	ldr	r3, [pc, #268]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69da      	ldr	r2, [r3, #28]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	019b      	lsls	r3, r3, #6
 8003d90:	431a      	orrs	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	041b      	lsls	r3, r3, #16
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	061b      	lsls	r3, r3, #24
 8003da4:	4937      	ldr	r1, [pc, #220]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003daa:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db0:	f7fe fde4 	bl	800297c <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe fde0 	bl	800297c <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e056      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b2e      	ldr	r3, [pc, #184]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x41c>
 8003dd6:	e04e      	b.n	8003e76 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	; (8003e88 <HAL_RCC_OscConfig+0x4ec>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fe fdcd 	bl	800297c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fe fdc9 	bl	800297c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e03f      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df8:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x44a>
 8003e04:	e037      	b.n	8003e76 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e032      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d028      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d121      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d11a      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e42:	4013      	ands	r3, r2
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e48:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d111      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	085b      	lsrs	r3, r3, #1
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d107      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40007000 	.word	0x40007000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	42470060 	.word	0x42470060

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0cc      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b68      	ldr	r3, [pc, #416]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90c      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b65      	ldr	r3, [pc, #404]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0307 	and.w	r3, r3, #7
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b8      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a58      	ldr	r2, [pc, #352]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b53      	ldr	r3, [pc, #332]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a52      	ldr	r2, [pc, #328]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b50      	ldr	r3, [pc, #320]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494d      	ldr	r1, [pc, #308]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e067      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4934      	ldr	r1, [pc, #208]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fe fcfe 	bl	800297c <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fe fcfa 	bl	800297c <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04f      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2b      	ldr	r3, [pc, #172]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d20c      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e032      	b.n	800403a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b19      	ldr	r3, [pc, #100]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4916      	ldr	r1, [pc, #88]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b12      	ldr	r3, [pc, #72]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490e      	ldr	r1, [pc, #56]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f821 	bl	8004058 <HAL_RCC_GetSysClockFreq>
 8004016:	4602      	mov	r2, r0
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	490a      	ldr	r1, [pc, #40]	; (800404c <HAL_RCC_ClockConfig+0x1c0>)
 8004024:	5ccb      	ldrb	r3, [r1, r3]
 8004026:	fa22 f303 	lsr.w	r3, r2, r3
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800402e:	4b09      	ldr	r3, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7fe fb3c 	bl	80026b0 <HAL_InitTick>

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	40023c00 	.word	0x40023c00
 8004048:	40023800 	.word	0x40023800
 800404c:	0800cdec 	.word	0x0800cdec
 8004050:	20000030 	.word	0x20000030
 8004054:	20000034 	.word	0x20000034

08004058 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004058:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800405c:	b084      	sub	sp, #16
 800405e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	2300      	movs	r3, #0
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	2300      	movs	r3, #0
 800406a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004070:	4b67      	ldr	r3, [pc, #412]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d00d      	beq.n	8004098 <HAL_RCC_GetSysClockFreq+0x40>
 800407c:	2b08      	cmp	r3, #8
 800407e:	f200 80bd 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_RCC_GetSysClockFreq+0x34>
 8004086:	2b04      	cmp	r3, #4
 8004088:	d003      	beq.n	8004092 <HAL_RCC_GetSysClockFreq+0x3a>
 800408a:	e0b7      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800408c:	4b61      	ldr	r3, [pc, #388]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800408e:	60bb      	str	r3, [r7, #8]
       break;
 8004090:	e0b7      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004092:	4b61      	ldr	r3, [pc, #388]	; (8004218 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004094:	60bb      	str	r3, [r7, #8]
      break;
 8004096:	e0b4      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004098:	4b5d      	ldr	r3, [pc, #372]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d04d      	beq.n	800414a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ae:	4b58      	ldr	r3, [pc, #352]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	099b      	lsrs	r3, r3, #6
 80040b4:	461a      	mov	r2, r3
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	ea02 0800 	and.w	r8, r2, r0
 80040c6:	ea03 0901 	and.w	r9, r3, r1
 80040ca:	4640      	mov	r0, r8
 80040cc:	4649      	mov	r1, r9
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	f04f 0300 	mov.w	r3, #0
 80040d6:	014b      	lsls	r3, r1, #5
 80040d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80040dc:	0142      	lsls	r2, r0, #5
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	ebb0 0008 	subs.w	r0, r0, r8
 80040e6:	eb61 0109 	sbc.w	r1, r1, r9
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	f04f 0300 	mov.w	r3, #0
 80040f2:	018b      	lsls	r3, r1, #6
 80040f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80040f8:	0182      	lsls	r2, r0, #6
 80040fa:	1a12      	subs	r2, r2, r0
 80040fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004100:	f04f 0000 	mov.w	r0, #0
 8004104:	f04f 0100 	mov.w	r1, #0
 8004108:	00d9      	lsls	r1, r3, #3
 800410a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800410e:	00d0      	lsls	r0, r2, #3
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	eb12 0208 	adds.w	r2, r2, r8
 8004118:	eb43 0309 	adc.w	r3, r3, r9
 800411c:	f04f 0000 	mov.w	r0, #0
 8004120:	f04f 0100 	mov.w	r1, #0
 8004124:	0259      	lsls	r1, r3, #9
 8004126:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800412a:	0250      	lsls	r0, r2, #9
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	461a      	mov	r2, r3
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	f7fc fbf6 	bl	800092c <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	e04a      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414a:	4b31      	ldr	r3, [pc, #196]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f240 10ff 	movw	r0, #511	; 0x1ff
 800415a:	f04f 0100 	mov.w	r1, #0
 800415e:	ea02 0400 	and.w	r4, r2, r0
 8004162:	ea03 0501 	and.w	r5, r3, r1
 8004166:	4620      	mov	r0, r4
 8004168:	4629      	mov	r1, r5
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	f04f 0300 	mov.w	r3, #0
 8004172:	014b      	lsls	r3, r1, #5
 8004174:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004178:	0142      	lsls	r2, r0, #5
 800417a:	4610      	mov	r0, r2
 800417c:	4619      	mov	r1, r3
 800417e:	1b00      	subs	r0, r0, r4
 8004180:	eb61 0105 	sbc.w	r1, r1, r5
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	018b      	lsls	r3, r1, #6
 800418e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004192:	0182      	lsls	r2, r0, #6
 8004194:	1a12      	subs	r2, r2, r0
 8004196:	eb63 0301 	sbc.w	r3, r3, r1
 800419a:	f04f 0000 	mov.w	r0, #0
 800419e:	f04f 0100 	mov.w	r1, #0
 80041a2:	00d9      	lsls	r1, r3, #3
 80041a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041a8:	00d0      	lsls	r0, r2, #3
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	1912      	adds	r2, r2, r4
 80041b0:	eb45 0303 	adc.w	r3, r5, r3
 80041b4:	f04f 0000 	mov.w	r0, #0
 80041b8:	f04f 0100 	mov.w	r1, #0
 80041bc:	0299      	lsls	r1, r3, #10
 80041be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80041c2:	0290      	lsls	r0, r2, #10
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	461a      	mov	r2, r3
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f7fc fbaa 	bl	800092c <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	60bb      	str	r3, [r7, #8]
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80041fe:	60bb      	str	r3, [r7, #8]
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	68bb      	ldr	r3, [r7, #8]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	007a1200 	.word	0x007a1200

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000030 	.word	0x20000030

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004238:	f7ff fff0 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423c:	4602      	mov	r2, r0
 800423e:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	0a9b      	lsrs	r3, r3, #10
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	4903      	ldr	r1, [pc, #12]	; (8004258 <HAL_RCC_GetPCLK1Freq+0x24>)
 800424a:	5ccb      	ldrb	r3, [r1, r3]
 800424c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004250:	4618      	mov	r0, r3
 8004252:	bd80      	pop	{r7, pc}
 8004254:	40023800 	.word	0x40023800
 8004258:	0800cdfc 	.word	0x0800cdfc

0800425c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004260:	f7ff ffdc 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004264:	4602      	mov	r2, r0
 8004266:	4b05      	ldr	r3, [pc, #20]	; (800427c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	0b5b      	lsrs	r3, r3, #13
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	4903      	ldr	r1, [pc, #12]	; (8004280 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004272:	5ccb      	ldrb	r3, [r1, r3]
 8004274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004278:	4618      	mov	r0, r3
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40023800 	.word	0x40023800
 8004280:	0800cdfc 	.word	0x0800cdfc

08004284 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	220f      	movs	r2, #15
 8004292:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004294:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 0203 	and.w	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042a0:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042ac:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_GetClockConfig+0x5c>)
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_RCC_GetClockConfig+0x60>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40023c00 	.word	0x40023c00

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	2b00      	cmp	r3, #0
 8004302:	d105      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800430c:	2b00      	cmp	r3, #0
 800430e:	d035      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004310:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004316:	f7fe fb31 	bl	800297c <HAL_GetTick>
 800431a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800431e:	f7fe fb2d 	bl	800297c <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0b0      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004330:	4b5b      	ldr	r3, [pc, #364]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1f0      	bne.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	019a      	lsls	r2, r3, #6
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	071b      	lsls	r3, r3, #28
 8004348:	4955      	ldr	r1, [pc, #340]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004350:	4b52      	ldr	r3, [pc, #328]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7fe fb11 	bl	800297c <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435e:	f7fe fb0d 	bl	800297c <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e090      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8083 	beq.w	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	4b44      	ldr	r3, [pc, #272]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	4a43      	ldr	r2, [pc, #268]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004398:	6413      	str	r3, [r2, #64]	; 0x40
 800439a:	4b41      	ldr	r3, [pc, #260]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043a6:	4b3f      	ldr	r3, [pc, #252]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a3e      	ldr	r2, [pc, #248]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043b2:	f7fe fae3 	bl	800297c <HAL_GetTick>
 80043b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043b8:	e008      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ba:	f7fe fadf 	bl	800297c <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d901      	bls.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e062      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043cc:	4b35      	ldr	r3, [pc, #212]	; (80044a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0f0      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043d8:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d02f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d028      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004400:	4b29      	ldr	r3, [pc, #164]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004406:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800440c:	4a24      	ldr	r2, [pc, #144]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004412:	4b23      	ldr	r3, [pc, #140]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b01      	cmp	r3, #1
 800441c:	d114      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800441e:	f7fe faad 	bl	800297c <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004424:	e00a      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fe faa9 	bl	800297c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f241 3288 	movw	r2, #5000	; 0x1388
 8004434:	4293      	cmp	r3, r2
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e02a      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443c:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800443e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ee      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004450:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004454:	d10d      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446a:	490d      	ldr	r1, [pc, #52]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	4313      	orrs	r3, r2
 800446e:	608b      	str	r3, [r1, #8]
 8004470:	e005      	b.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004472:	4b0b      	ldr	r3, [pc, #44]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004478:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800447c:	6093      	str	r3, [r2, #8]
 800447e:	4b08      	ldr	r3, [pc, #32]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800448a:	4905      	ldr	r1, [pc, #20]	; (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800448c:	4313      	orrs	r3, r2
 800448e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	42470068 	.word	0x42470068
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40007000 	.word	0x40007000
 80044a8:	42470e40 	.word	0x42470e40

080044ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e083      	b.n	80045c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	7f5b      	ldrb	r3, [r3, #29]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d105      	bne.n	80044d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd ff2e 	bl	8002330 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	22ca      	movs	r2, #202	; 0xca
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2253      	movs	r2, #83	; 0x53
 80044e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 faa8 	bl	8004a40 <RTC_EnterInitMode>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	22ff      	movs	r2, #255	; 0xff
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2204      	movs	r2, #4
 8004502:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e05e      	b.n	80045c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800451a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68d2      	ldr	r2, [r2, #12]
 8004542:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6919      	ldr	r1, [r3, #16]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	041a      	lsls	r2, r3, #16
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	430a      	orrs	r2, r1
 8004556:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004566:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10e      	bne.n	8004594 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 fa3a 	bl	80049f0 <HAL_RTC_WaitForSynchro>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d008      	beq.n	8004594 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	22ff      	movs	r2, #255	; 0xff
 8004588:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2204      	movs	r2, #4
 800458e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e018      	b.n	80045c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699a      	ldr	r2, [r3, #24]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
  }
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045ce:	b590      	push	{r4, r7, lr}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045da:	2300      	movs	r3, #0
 80045dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	7f1b      	ldrb	r3, [r3, #28]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_RTC_SetTime+0x1c>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0aa      	b.n	8004740 <HAL_RTC_SetTime+0x172>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2202      	movs	r2, #2
 80045f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d126      	bne.n	800464a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d102      	bne.n	8004610 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2200      	movs	r2, #0
 800460e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fa3f 	bl	8004a98 <RTC_ByteToBcd2>
 800461a:	4603      	mov	r3, r0
 800461c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	785b      	ldrb	r3, [r3, #1]
 8004622:	4618      	mov	r0, r3
 8004624:	f000 fa38 	bl	8004a98 <RTC_ByteToBcd2>
 8004628:	4603      	mov	r3, r0
 800462a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800462c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	789b      	ldrb	r3, [r3, #2]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa30 	bl	8004a98 <RTC_ByteToBcd2>
 8004638:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800463a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	78db      	ldrb	r3, [r3, #3]
 8004642:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004644:	4313      	orrs	r3, r2
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	e018      	b.n	800467c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004654:	2b00      	cmp	r3, #0
 8004656:	d102      	bne.n	800465e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2200      	movs	r2, #0
 800465c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	785b      	ldrb	r3, [r3, #1]
 8004668:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800466a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004670:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	78db      	ldrb	r3, [r3, #3]
 8004676:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004678:	4313      	orrs	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	22ca      	movs	r2, #202	; 0xca
 8004682:	625a      	str	r2, [r3, #36]	; 0x24
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2253      	movs	r2, #83	; 0x53
 800468a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f9d7 	bl	8004a40 <RTC_EnterInitMode>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00b      	beq.n	80046b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2204      	movs	r2, #4
 80046a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e047      	b.n	8004740 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80046ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80046be:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046ce:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6899      	ldr	r1, [r3, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	431a      	orrs	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	68da      	ldr	r2, [r3, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d111      	bne.n	800472a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 f972 	bl	80049f0 <HAL_RTC_WaitForSynchro>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2204      	movs	r2, #4
 800471e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e00a      	b.n	8004740 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	22ff      	movs	r2, #255	; 0xff
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800473e:	2300      	movs	r3, #0
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd90      	pop	{r4, r7, pc}

08004748 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800477a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800477e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	0c1b      	lsrs	r3, r3, #16
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800478a:	b2da      	uxtb	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	0a1b      	lsrs	r3, r3, #8
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11a      	bne.n	80047fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f000 f983 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047ce:	4603      	mov	r3, r0
 80047d0:	461a      	mov	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 f97a 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047e0:	4603      	mov	r3, r0
 80047e2:	461a      	mov	r2, r3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	789b      	ldrb	r3, [r3, #2]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f971 	bl	8004ad4 <RTC_Bcd2ToByte>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461a      	mov	r2, r3
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	7f1b      	ldrb	r3, [r3, #28]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <HAL_RTC_SetDate+0x1c>
 800481c:	2302      	movs	r3, #2
 800481e:	e094      	b.n	800494a <HAL_RTC_SetDate+0x146>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10e      	bne.n	8004850 <HAL_RTC_SetDate+0x4c>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d008      	beq.n	8004850 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	785b      	ldrb	r3, [r3, #1]
 8004842:	f023 0310 	bic.w	r3, r3, #16
 8004846:	b2db      	uxtb	r3, r3
 8004848:	330a      	adds	r3, #10
 800484a:	b2da      	uxtb	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d11c      	bne.n	8004890 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	78db      	ldrb	r3, [r3, #3]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 f91c 	bl	8004a98 <RTC_ByteToBcd2>
 8004860:	4603      	mov	r3, r0
 8004862:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 f915 	bl	8004a98 <RTC_ByteToBcd2>
 800486e:	4603      	mov	r3, r0
 8004870:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004872:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	789b      	ldrb	r3, [r3, #2]
 8004878:	4618      	mov	r0, r3
 800487a:	f000 f90d 	bl	8004a98 <RTC_ByteToBcd2>
 800487e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004880:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800488a:	4313      	orrs	r3, r2
 800488c:	617b      	str	r3, [r7, #20]
 800488e:	e00e      	b.n	80048ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800489c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800489e:	68ba      	ldr	r2, [r7, #8]
 80048a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80048a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	22ca      	movs	r2, #202	; 0xca
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2253      	movs	r2, #83	; 0x53
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f8be 	bl	8004a40 <RTC_EnterInitMode>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	22ff      	movs	r2, #255	; 0xff
 80048d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2204      	movs	r2, #4
 80048d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e033      	b.n	800494a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004900:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f86d 	bl	80049f0 <HAL_RTC_WaitForSynchro>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	22ff      	movs	r2, #255	; 0xff
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2204      	movs	r2, #4
 8004928:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e00a      	b.n	800494a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	22ff      	movs	r2, #255	; 0xff
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2201      	movs	r2, #1
 8004940:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
  }
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd90      	pop	{r4, r7, pc}

08004952 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800496c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004970:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	b2da      	uxtb	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	0a1b      	lsrs	r3, r3, #8
 8004980:	b2db      	uxtb	r3, r3
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004994:	b2da      	uxtb	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0b5b      	lsrs	r3, r3, #13
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11a      	bne.n	80049e6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	78db      	ldrb	r3, [r3, #3]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 f88d 	bl	8004ad4 <RTC_Bcd2ToByte>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	785b      	ldrb	r3, [r3, #1]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 f884 	bl	8004ad4 <RTC_Bcd2ToByte>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	789b      	ldrb	r3, [r3, #2]
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f87b 	bl	8004ad4 <RTC_Bcd2ToByte>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3718      	adds	r7, #24
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a0a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7fd ffb6 	bl	800297c <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a12:	e009      	b.n	8004a28 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a14:	f7fd ffb2 	bl	800297c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a22:	d901      	bls.n	8004a28 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e007      	b.n	8004a38 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0ee      	beq.n	8004a14 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d119      	bne.n	8004a8e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a62:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a64:	f7fd ff8a 	bl	800297c <HAL_GetTick>
 8004a68:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a6a:	e009      	b.n	8004a80 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004a6c:	f7fd ff86 	bl	800297c <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7a:	d901      	bls.n	8004a80 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e007      	b.n	8004a90 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0ee      	beq.n	8004a6c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004aa6:	e005      	b.n	8004ab4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	3b0a      	subs	r3, #10
 8004ab2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004ab4:	79fb      	ldrb	r3, [r7, #7]
 8004ab6:	2b09      	cmp	r3, #9
 8004ab8:	d8f6      	bhi.n	8004aa8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	b2db      	uxtb	r3, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	091b      	lsrs	r3, r3, #4
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4613      	mov	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	4413      	add	r3, r2
 8004b02:	b2db      	uxtb	r3, r3
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07b      	b.n	8004c1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d108      	bne.n	8004b3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b32:	d009      	beq.n	8004b48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	61da      	str	r2, [r3, #28]
 8004b3a:	e005      	b.n	8004b48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fd fc10 	bl	8002388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695b      	ldr	r3, [r3, #20]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	ea42 0103 	orr.w	r1, r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	0c1b      	lsrs	r3, r3, #16
 8004be6:	f003 0104 	and.w	r1, r3, #4
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	f003 0210 	and.w	r2, r3, #16
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b088      	sub	sp, #32
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	60f8      	str	r0, [r7, #12]
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	603b      	str	r3, [r7, #0]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c32:	2300      	movs	r3, #0
 8004c34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_SPI_Transmit+0x22>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e126      	b.n	8004e92 <HAL_SPI_Transmit+0x270>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4c:	f7fd fe96 	bl	800297c <HAL_GetTick>
 8004c50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c52:	88fb      	ldrh	r3, [r7, #6]
 8004c54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d002      	beq.n	8004c68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
 8004c64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c66:	e10b      	b.n	8004e80 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <HAL_SPI_Transmit+0x52>
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c78:	e102      	b.n	8004e80 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	88fa      	ldrh	r2, [r7, #6]
 8004c92:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	88fa      	ldrh	r2, [r7, #6]
 8004c98:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cc0:	d10f      	bne.n	8004ce2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ce0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cec:	2b40      	cmp	r3, #64	; 0x40
 8004cee:	d007      	beq.n	8004d00 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d08:	d14b      	bne.n	8004da2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_SPI_Transmit+0xf6>
 8004d12:	8afb      	ldrh	r3, [r7, #22]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d13e      	bne.n	8004d96 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d3c:	e02b      	b.n	8004d96 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d112      	bne.n	8004d72 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	1c9a      	adds	r2, r3, #2
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d70:	e011      	b.n	8004d96 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d72:	f7fd fe03 	bl	800297c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d803      	bhi.n	8004d8a <HAL_SPI_Transmit+0x168>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_Transmit+0x16e>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d94:	e074      	b.n	8004e80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ce      	bne.n	8004d3e <HAL_SPI_Transmit+0x11c>
 8004da0:	e04c      	b.n	8004e3c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <HAL_SPI_Transmit+0x18e>
 8004daa:	8afb      	ldrh	r3, [r7, #22]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d140      	bne.n	8004e32 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	7812      	ldrb	r2, [r2, #0]
 8004dbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dd6:	e02c      	b.n	8004e32 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d113      	bne.n	8004e0e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	330c      	adds	r3, #12
 8004df0:	7812      	ldrb	r2, [r2, #0]
 8004df2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e0c:	e011      	b.n	8004e32 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0e:	f7fd fdb5 	bl	800297c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d803      	bhi.n	8004e26 <HAL_SPI_Transmit+0x204>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e24:	d102      	bne.n	8004e2c <HAL_SPI_Transmit+0x20a>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d102      	bne.n	8004e32 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e30:	e026      	b.n	8004e80 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1cd      	bne.n	8004dd8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fb13 	bl	800546c <SPI_EndRxTxTransaction>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10a      	bne.n	8004e70 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	613b      	str	r3, [r7, #16]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	77fb      	strb	r3, [r7, #31]
 8004e7c:	e000      	b.n	8004e80 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e90:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b086      	sub	sp, #24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_SPI_Transmit_DMA+0x20>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e09b      	b.n	8004ff4 <HAL_SPI_Transmit_DMA+0x158>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ed4:	e089      	b.n	8004fea <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <HAL_SPI_Transmit_DMA+0x46>
 8004edc:	88fb      	ldrh	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee6:	e080      	b.n	8004fea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2203      	movs	r2, #3
 8004eec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2200      	movs	r2, #0
 8004f12:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f2e:	d10f      	bne.n	8004f50 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f54:	4a29      	ldr	r2, [pc, #164]	; (8004ffc <HAL_SPI_Transmit_DMA+0x160>)
 8004f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f5c:	4a28      	ldr	r2, [pc, #160]	; (8005000 <HAL_SPI_Transmit_DMA+0x164>)
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	4a27      	ldr	r2, [pc, #156]	; (8005004 <HAL_SPI_Transmit_DMA+0x168>)
 8004f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	4619      	mov	r1, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	330c      	adds	r3, #12
 8004f80:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f86:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004f88:	f7fd feb8 	bl	8002cfc <HAL_DMA_Start_IT>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00c      	beq.n	8004fac <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f96:	f043 0210 	orr.w	r2, r3, #16
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004faa:	e01e      	b.n	8004fea <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d007      	beq.n	8004fca <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fc8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0220 	orr.w	r2, r2, #32
 8004fd8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0202 	orr.w	r2, r2, #2
 8004fe8:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3718      	adds	r7, #24
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	080052d9 	.word	0x080052d9
 8005000:	08005231 	.word	0x08005231
 8005004:	080052f5 	.word	0x080052f5

08005008 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	099b      	lsrs	r3, r3, #6
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d004      	beq.n	800504c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4798      	blx	r3
    return;
 800504a:	e0d7      	b.n	80051fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	085b      	lsrs	r3, r3, #1
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00a      	beq.n	800506e <HAL_SPI_IRQHandler+0x66>
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
    return;
 800506c:	e0c6      	b.n	80051fc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_SPI_IRQHandler+0x8c>
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	099b      	lsrs	r3, r3, #6
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	0a1b      	lsrs	r3, r3, #8
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80b4 	beq.w	80051fc <HAL_SPI_IRQHandler+0x1f4>
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	095b      	lsrs	r3, r3, #5
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80ad 	beq.w	80051fc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d023      	beq.n	80050f6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d011      	beq.n	80050de <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f043 0204 	orr.w	r2, r3, #4
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	e00b      	b.n	80050f6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80050de:	2300      	movs	r3, #0
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	693b      	ldr	r3, [r7, #16]
        return;
 80050f4:	e082      	b.n	80051fc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d014      	beq.n	800512c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	0a1b      	lsrs	r3, r3, #8
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d00c      	beq.n	8005152 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	f043 0208 	orr.w	r2, r3, #8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005144:	2300      	movs	r3, #0
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04f      	beq.n	80051fa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005168:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d104      	bne.n	8005186 <HAL_SPI_IRQHandler+0x17e>
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d034      	beq.n	80051f0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0203 	bic.w	r2, r2, #3
 8005194:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051a2:	4a18      	ldr	r2, [pc, #96]	; (8005204 <HAL_SPI_IRQHandler+0x1fc>)
 80051a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fd fe6e 	bl	8002e8c <HAL_DMA_Abort_IT>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d016      	beq.n	80051f8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ce:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <HAL_SPI_IRQHandler+0x1fc>)
 80051d0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7fd fe58 	bl	8002e8c <HAL_DMA_Abort_IT>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d00a      	beq.n	80051f8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80051ee:	e003      	b.n	80051f8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f813 	bl	800521c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80051f6:	e000      	b.n	80051fa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80051f8:	bf00      	nop
    return;
 80051fa:	bf00      	nop
  }
}
 80051fc:	3720      	adds	r7, #32
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	08005335 	.word	0x08005335

08005208 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005224:	bf00      	nop
 8005226:	370c      	adds	r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fd fb9d 	bl	800297c <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800524e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005252:	d03b      	beq.n	80052cc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f022 0220 	bic.w	r2, r2, #32
 8005262:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 0202 	bic.w	r2, r2, #2
 8005272:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	2164      	movs	r1, #100	; 0x64
 8005278:	6978      	ldr	r0, [r7, #20]
 800527a:	f000 f8f7 	bl	800546c <SPI_EndRxTxTransaction>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005288:	f043 0220 	orr.w	r2, r3, #32
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005298:	2300      	movs	r3, #0
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2200      	movs	r2, #0
 80052b2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80052c4:	6978      	ldr	r0, [r7, #20]
 80052c6:	f7ff ffa9 	bl	800521c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80052ca:	e002      	b.n	80052d2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f7fc fa55 	bl	800177c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7ff ff8e 	bl	8005208 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005300:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f022 0203 	bic.w	r2, r2, #3
 8005310:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005316:	f043 0210 	orr.w	r2, r3, #16
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7ff ff78 	bl	800521c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005340:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f7ff ff64 	bl	800521c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800536c:	f7fd fb06 	bl	800297c <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005374:	1a9b      	subs	r3, r3, r2
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	4413      	add	r3, r2
 800537a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800537c:	f7fd fafe 	bl	800297c <HAL_GetTick>
 8005380:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005382:	4b39      	ldr	r3, [pc, #228]	; (8005468 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	015b      	lsls	r3, r3, #5
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	69fa      	ldr	r2, [r7, #28]
 800538c:	fb02 f303 	mul.w	r3, r2, r3
 8005390:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005392:	e054      	b.n	800543e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800539a:	d050      	beq.n	800543e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800539c:	f7fd faee 	bl	800297c <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d902      	bls.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d13d      	bne.n	800542e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053ca:	d111      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d4:	d004      	beq.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053de:	d107      	bne.n	80053f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053f8:	d10f      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005418:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e017      	b.n	800545e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	3b01      	subs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	4013      	ands	r3, r2
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	429a      	cmp	r2, r3
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
 8005454:	461a      	mov	r2, r3
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	429a      	cmp	r2, r3
 800545a:	d19b      	bne.n	8005394 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800545c:	2300      	movs	r3, #0
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000030 	.word	0x20000030

0800546c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b088      	sub	sp, #32
 8005470:	af02      	add	r7, sp, #8
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005478:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <SPI_EndRxTxTransaction+0x7c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a1b      	ldr	r2, [pc, #108]	; (80054ec <SPI_EndRxTxTransaction+0x80>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	0d5b      	lsrs	r3, r3, #21
 8005484:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005488:	fb02 f303 	mul.w	r3, r2, r3
 800548c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005496:	d112      	bne.n	80054be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	2180      	movs	r1, #128	; 0x80
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f7ff ff5a 	bl	800535c <SPI_WaitFlagStateUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b2:	f043 0220 	orr.w	r2, r3, #32
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e00f      	b.n	80054de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00a      	beq.n	80054da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3b01      	subs	r3, #1
 80054c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d4:	2b80      	cmp	r3, #128	; 0x80
 80054d6:	d0f2      	beq.n	80054be <SPI_EndRxTxTransaction+0x52>
 80054d8:	e000      	b.n	80054dc <SPI_EndRxTxTransaction+0x70>
        break;
 80054da:	bf00      	nop
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20000030 	.word	0x20000030
 80054ec:	165e9f81 	.word	0x165e9f81

080054f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e041      	b.n	8005586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fc ffc2 	bl	80024a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3304      	adds	r3, #4
 800552c:	4619      	mov	r1, r3
 800552e:	4610      	mov	r0, r2
 8005530:	f000 fa96 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
	...

08005590 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d001      	beq.n	80055a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e04e      	b.n	8005646 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2202      	movs	r2, #2
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a23      	ldr	r2, [pc, #140]	; (8005654 <HAL_TIM_Base_Start_IT+0xc4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d022      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d2:	d01d      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	; (8005658 <HAL_TIM_Base_Start_IT+0xc8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d018      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	; (800565c <HAL_TIM_Base_Start_IT+0xcc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d013      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <HAL_TIM_Base_Start_IT+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d00e      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1b      	ldr	r2, [pc, #108]	; (8005664 <HAL_TIM_Base_Start_IT+0xd4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d009      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a19      	ldr	r2, [pc, #100]	; (8005668 <HAL_TIM_Base_Start_IT+0xd8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <HAL_TIM_Base_Start_IT+0x80>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a18      	ldr	r2, [pc, #96]	; (800566c <HAL_TIM_Base_Start_IT+0xdc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d111      	bne.n	8005634 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2b06      	cmp	r3, #6
 8005620:	d010      	beq.n	8005644 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0201 	orr.w	r2, r2, #1
 8005630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005632:	e007      	b.n	8005644 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40010000 	.word	0x40010000
 8005658:	40000400 	.word	0x40000400
 800565c:	40000800 	.word	0x40000800
 8005660:	40000c00 	.word	0x40000c00
 8005664:	40010400 	.word	0x40010400
 8005668:	40014000 	.word	0x40014000
 800566c:	40001800 	.word	0x40001800

08005670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b02      	cmp	r3, #2
 8005684:	d122      	bne.n	80056cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0302 	and.w	r3, r3, #2
 8005690:	2b02      	cmp	r3, #2
 8005692:	d11b      	bne.n	80056cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0202 	mvn.w	r2, #2
 800569c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	f003 0303 	and.w	r3, r3, #3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f9b5 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f9a7 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f9b8 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b04      	cmp	r3, #4
 80056d8:	d122      	bne.n	8005720 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d11b      	bne.n	8005720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0204 	mvn.w	r2, #4
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f98b 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f97d 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f98e 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b08      	cmp	r3, #8
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0208 	mvn.w	r2, #8
 8005744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2204      	movs	r2, #4
 800574a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f961 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f953 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f964 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0310 	and.w	r3, r3, #16
 800577e:	2b10      	cmp	r3, #16
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0310 	and.w	r3, r3, #16
 800578c:	2b10      	cmp	r3, #16
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0210 	mvn.w	r2, #16
 8005798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2208      	movs	r2, #8
 800579e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f937 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f929 	bl	8005a0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f93a 	bl	8005a36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d10e      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d107      	bne.n	80057f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0201 	mvn.w	r2, #1
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fc f95e 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b80      	cmp	r3, #128	; 0x80
 8005800:	d10e      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580c:	2b80      	cmp	r3, #128	; 0x80
 800580e:	d107      	bne.n	8005820 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fae0 	bl	8005de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d10e      	bne.n	800584c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005838:	2b40      	cmp	r3, #64	; 0x40
 800583a:	d107      	bne.n	800584c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8ff 	bl	8005a4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b20      	cmp	r3, #32
 8005858:	d10e      	bne.n	8005878 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b20      	cmp	r3, #32
 8005866:	d107      	bne.n	8005878 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0220 	mvn.w	r2, #32
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 faaa 	bl	8005dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588a:	2300      	movs	r3, #0
 800588c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_TIM_ConfigClockSource+0x1c>
 8005898:	2302      	movs	r3, #2
 800589a:	e0b4      	b.n	8005a06 <HAL_TIM_ConfigClockSource+0x186>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d4:	d03e      	beq.n	8005954 <HAL_TIM_ConfigClockSource+0xd4>
 80058d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058da:	f200 8087 	bhi.w	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	f000 8086 	beq.w	80059f2 <HAL_TIM_ConfigClockSource+0x172>
 80058e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ea:	d87f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058ec:	2b70      	cmp	r3, #112	; 0x70
 80058ee:	d01a      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0xa6>
 80058f0:	2b70      	cmp	r3, #112	; 0x70
 80058f2:	d87b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058f4:	2b60      	cmp	r3, #96	; 0x60
 80058f6:	d050      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x11a>
 80058f8:	2b60      	cmp	r3, #96	; 0x60
 80058fa:	d877      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 80058fc:	2b50      	cmp	r3, #80	; 0x50
 80058fe:	d03c      	beq.n	800597a <HAL_TIM_ConfigClockSource+0xfa>
 8005900:	2b50      	cmp	r3, #80	; 0x50
 8005902:	d873      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005904:	2b40      	cmp	r3, #64	; 0x40
 8005906:	d058      	beq.n	80059ba <HAL_TIM_ConfigClockSource+0x13a>
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d86f      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800590c:	2b30      	cmp	r3, #48	; 0x30
 800590e:	d064      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d86b      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 8005914:	2b20      	cmp	r3, #32
 8005916:	d060      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d867      	bhi.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
 800591c:	2b00      	cmp	r3, #0
 800591e:	d05c      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005920:	2b10      	cmp	r3, #16
 8005922:	d05a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0x15a>
 8005924:	e062      	b.n	80059ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6899      	ldr	r1, [r3, #8]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f000 f9ad 	bl	8005c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005948:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	609a      	str	r2, [r3, #8]
      break;
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6818      	ldr	r0, [r3, #0]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	6899      	ldr	r1, [r3, #8]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f000 f996 	bl	8005c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005976:	609a      	str	r2, [r3, #8]
      break;
 8005978:	e03c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	461a      	mov	r2, r3
 8005988:	f000 f90a 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2150      	movs	r1, #80	; 0x50
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f963 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 8005998:	e02c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	6859      	ldr	r1, [r3, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f000 f929 	bl	8005bfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2160      	movs	r1, #96	; 0x60
 80059b2:	4618      	mov	r0, r3
 80059b4:	f000 f953 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059b8:	e01c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6818      	ldr	r0, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f000 f8ea 	bl	8005ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 f943 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059d8:	e00c      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4619      	mov	r1, r3
 80059e4:	4610      	mov	r0, r2
 80059e6:	f000 f93a 	bl	8005c5e <TIM_ITRx_SetConfig>
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
      break;
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3710      	adds	r7, #16
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a3e:	bf00      	nop
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr

08005a4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a52:	bf00      	nop
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
	...

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d00f      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3d      	ldr	r2, [pc, #244]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00b      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a3c      	ldr	r2, [pc, #240]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d007      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a3b      	ldr	r2, [pc, #236]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d003      	beq.n	8005aa0 <TIM_Base_SetConfig+0x40>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a3a      	ldr	r2, [pc, #232]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d02b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d027      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2c      	ldr	r2, [pc, #176]	; (8005b78 <TIM_Base_SetConfig+0x118>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d023      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2b      	ldr	r2, [pc, #172]	; (8005b7c <TIM_Base_SetConfig+0x11c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <TIM_Base_SetConfig+0x120>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d01b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a29      	ldr	r2, [pc, #164]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d017      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a28      	ldr	r2, [pc, #160]	; (8005b88 <TIM_Base_SetConfig+0x128>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d013      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a27      	ldr	r2, [pc, #156]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00f      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a26      	ldr	r2, [pc, #152]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00b      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d007      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d003      	beq.n	8005b12 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d108      	bne.n	8005b24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4313      	orrs	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0a      	ldr	r2, [pc, #40]	; (8005b74 <TIM_Base_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d003      	beq.n	8005b58 <TIM_Base_SetConfig+0xf8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a0c      	ldr	r2, [pc, #48]	; (8005b84 <TIM_Base_SetConfig+0x124>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d103      	bne.n	8005b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	615a      	str	r2, [r3, #20]
}
 8005b66:	bf00      	nop
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40000400 	.word	0x40000400
 8005b7c:	40000800 	.word	0x40000800
 8005b80:	40000c00 	.word	0x40000c00
 8005b84:	40010400 	.word	0x40010400
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800
 8005b94:	40001800 	.word	0x40001800
 8005b98:	40001c00 	.word	0x40001c00
 8005b9c:	40002000 	.word	0x40002000

08005ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f023 0201 	bic.w	r2, r3, #1
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	011b      	lsls	r3, r3, #4
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 030a 	bic.w	r3, r3, #10
 8005bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b087      	sub	sp, #28
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	60f8      	str	r0, [r7, #12]
 8005c06:	60b9      	str	r1, [r7, #8]
 8005c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f023 0210 	bic.w	r2, r3, #16
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	031b      	lsls	r3, r3, #12
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	011b      	lsls	r3, r3, #4
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	621a      	str	r2, [r3, #32]
}
 8005c52:	bf00      	nop
 8005c54:	371c      	adds	r7, #28
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b085      	sub	sp, #20
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	f043 0307 	orr.w	r3, r3, #7
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68fa      	ldr	r2, [r7, #12]
 8005c86:	609a      	str	r2, [r3, #8]
}
 8005c88:	bf00      	nop
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
 8005ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	021a      	lsls	r2, r3, #8
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e05a      	b.n	8005da2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68fa      	ldr	r2, [r7, #12]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a21      	ldr	r2, [pc, #132]	; (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d022      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d38:	d01d      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1d      	ldr	r2, [pc, #116]	; (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d018      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d00e      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d009      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d004      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a15      	ldr	r2, [pc, #84]	; (8005dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d10c      	bne.n	8005d90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005da0:	2300      	movs	r3, #0
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40010000 	.word	0x40010000
 8005db4:	40000400 	.word	0x40000400
 8005db8:	40000800 	.word	0x40000800
 8005dbc:	40000c00 	.word	0x40000c00
 8005dc0:	40010400 	.word	0x40010400
 8005dc4:	40014000 	.word	0x40014000
 8005dc8:	40001800 	.word	0x40001800

08005dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005dd4:	bf00      	nop
 8005dd6:	370c      	adds	r7, #12
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr

08005de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e03f      	b.n	8005e86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d106      	bne.n	8005e20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f7fc fb66 	bl	80024ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2224      	movs	r2, #36	; 0x24
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fe27 	bl	8006a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695a      	ldr	r2, [r3, #20]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2220      	movs	r2, #32
 8005e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b084      	sub	sp, #16
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b20      	cmp	r3, #32
 8005ea6:	d11d      	bne.n	8005ee4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_UART_Receive_IT+0x26>
 8005eae:	88fb      	ldrh	r3, [r7, #6]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d101      	bne.n	8005eb8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e016      	b.n	8005ee6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d101      	bne.n	8005ec6 <HAL_UART_Receive_IT+0x38>
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	e00f      	b.n	8005ee6 <HAL_UART_Receive_IT+0x58>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ed4:	88fb      	ldrh	r3, [r7, #6]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 fbd9 	bl	8006692 <UART_Start_Receive_IT>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08c      	sub	sp, #48	; 0x30
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	4613      	mov	r3, r2
 8005efc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d165      	bne.n	8005fd6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <HAL_UART_Transmit_DMA+0x26>
 8005f10:	88fb      	ldrh	r3, [r7, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e05e      	b.n	8005fd8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Transmit_DMA+0x38>
 8005f24:	2302      	movs	r3, #2
 8005f26:	e057      	b.n	8005fd8 <HAL_UART_Transmit_DMA+0xe8>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	88fa      	ldrh	r2, [r7, #6]
 8005f3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	88fa      	ldrh	r2, [r7, #6]
 8005f40:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2221      	movs	r2, #33	; 0x21
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_UART_Transmit_DMA+0xf0>)
 8005f56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f5c:	4a21      	ldr	r2, [pc, #132]	; (8005fe4 <HAL_UART_Transmit_DMA+0xf4>)
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f64:	4a20      	ldr	r2, [pc, #128]	; (8005fe8 <HAL_UART_Transmit_DMA+0xf8>)
 8005f66:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005f70:	f107 0308 	add.w	r3, r7, #8
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f7c:	6819      	ldr	r1, [r3, #0]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3304      	adds	r3, #4
 8005f84:	461a      	mov	r2, r3
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	f7fc feb8 	bl	8002cfc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f94:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	617b      	str	r3, [r7, #20]
   return(result);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005fbe:	627a      	str	r2, [r7, #36]	; 0x24
 8005fc0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6a39      	ldr	r1, [r7, #32]
 8005fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e5      	bne.n	8005f9e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	e000      	b.n	8005fd8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005fd6:	2302      	movs	r3, #2
  }
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3730      	adds	r7, #48	; 0x30
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	08006549 	.word	0x08006549
 8005fe4:	080065e3 	.word	0x080065e3
 8005fe8:	080065ff 	.word	0x080065ff

08005fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b0ba      	sub	sp, #232	; 0xe8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006012:	2300      	movs	r3, #0
 8006014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006018:	2300      	movs	r3, #0
 800601a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800602a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10f      	bne.n	8006052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0320 	and.w	r3, r3, #32
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <HAL_UART_IRQHandler+0x66>
 800603e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006042:	f003 0320 	and.w	r3, r3, #32
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fc62 	bl	8006914 <UART_Receive_IT>
      return;
 8006050:	e256      	b.n	8006500 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80de 	beq.w	8006218 <HAL_UART_IRQHandler+0x22c>
 800605c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800606c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006070:	2b00      	cmp	r3, #0
 8006072:	f000 80d1 	beq.w	8006218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <HAL_UART_IRQHandler+0xae>
 8006082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f043 0201 	orr.w	r2, r3, #1
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <HAL_UART_IRQHandler+0xd2>
 80060a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0202 	orr.w	r2, r3, #2
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_UART_IRQHandler+0xf6>
 80060ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d005      	beq.n	80060e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	f043 0204 	orr.w	r2, r3, #4
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d011      	beq.n	8006112 <HAL_UART_IRQHandler+0x126>
 80060ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d105      	bne.n	8006106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	f043 0208 	orr.w	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 81ed 	beq.w	80064f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b00      	cmp	r3, #0
 8006126:	d008      	beq.n	800613a <HAL_UART_IRQHandler+0x14e>
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612c:	f003 0320 	and.w	r3, r3, #32
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fbed 	bl	8006914 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006144:	2b40      	cmp	r3, #64	; 0x40
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006156:	f003 0308 	and.w	r3, r3, #8
 800615a:	2b00      	cmp	r3, #0
 800615c:	d103      	bne.n	8006166 <HAL_UART_IRQHandler+0x17a>
 800615e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006162:	2b00      	cmp	r3, #0
 8006164:	d04f      	beq.n	8006206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 faf5 	bl	8006756 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	695b      	ldr	r3, [r3, #20]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d141      	bne.n	80061fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	3314      	adds	r3, #20
 80061a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80061a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80061aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80061b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80061be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1d9      	bne.n	800617a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d013      	beq.n	80061f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	4a7d      	ldr	r2, [pc, #500]	; (80063c8 <HAL_UART_IRQHandler+0x3dc>)
 80061d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fc fe56 	bl	8002e8c <HAL_DMA_Abort_IT>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061f0:	4610      	mov	r0, r2
 80061f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f4:	e00e      	b.n	8006214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f990 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061fc:	e00a      	b.n	8006214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f98c 	bl	800651c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006204:	e006      	b.n	8006214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f988 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006212:	e170      	b.n	80064f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006214:	bf00      	nop
    return;
 8006216:	e16e      	b.n	80064f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	2b01      	cmp	r3, #1
 800621e:	f040 814a 	bne.w	80064b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006226:	f003 0310 	and.w	r3, r3, #16
 800622a:	2b00      	cmp	r3, #0
 800622c:	f000 8143 	beq.w	80064b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 813c 	beq.w	80064b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	60bb      	str	r3, [r7, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625e:	2b40      	cmp	r3, #64	; 0x40
 8006260:	f040 80b4 	bne.w	80063cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8140 	beq.w	80064fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800627e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006282:	429a      	cmp	r2, r3
 8006284:	f080 8139 	bcs.w	80064fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800628e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	69db      	ldr	r3, [r3, #28]
 8006296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629a:	f000 8088 	beq.w	80063ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	330c      	adds	r3, #12
 80062a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062ac:	e853 3f00 	ldrex	r3, [r3]
 80062b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80062b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80062b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	330c      	adds	r3, #12
 80062c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062da:	e841 2300 	strex	r3, r2, [r1]
 80062de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1d9      	bne.n	800629e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062fc:	f023 0301 	bic.w	r3, r3, #1
 8006300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800630e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800631a:	e841 2300 	strex	r3, r2, [r1]
 800631e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e1      	bne.n	80062ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3314      	adds	r3, #20
 800632c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006330:	e853 3f00 	ldrex	r3, [r3]
 8006334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3314      	adds	r3, #20
 8006346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800634a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800634c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e3      	bne.n	8006326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	330c      	adds	r3, #12
 8006372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800637c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800637e:	f023 0310 	bic.w	r3, r3, #16
 8006382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	330c      	adds	r3, #12
 800638c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006390:	65ba      	str	r2, [r7, #88]	; 0x58
 8006392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800639e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e3      	bne.n	800636c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fc fcff 	bl	8002dac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4619      	mov	r1, r3
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f8b6 	bl	8006530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063c4:	e099      	b.n	80064fa <HAL_UART_IRQHandler+0x50e>
 80063c6:	bf00      	nop
 80063c8:	0800681d 	.word	0x0800681d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	1ad3      	subs	r3, r2, r3
 80063d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 808b 	beq.w	80064fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8086 	beq.w	80064fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	330c      	adds	r3, #12
 80063f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006416:	647a      	str	r2, [r7, #68]	; 0x44
 8006418:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800641c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e3      	bne.n	80063f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	3314      	adds	r3, #20
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	623b      	str	r3, [r7, #32]
   return(result);
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f023 0301 	bic.w	r3, r3, #1
 8006440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3314      	adds	r3, #20
 800644a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800644e:	633a      	str	r2, [r7, #48]	; 0x30
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006456:	e841 2300 	strex	r3, r2, [r1]
 800645a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1e3      	bne.n	800642a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2220      	movs	r2, #32
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0310 	bic.w	r3, r3, #16
 8006486:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	330c      	adds	r3, #12
 8006490:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006494:	61fa      	str	r2, [r7, #28]
 8006496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	69b9      	ldr	r1, [r7, #24]
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	617b      	str	r3, [r7, #20]
   return(result);
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e3      	bne.n	8006470 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f83e 	bl	8006530 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064b4:	e023      	b.n	80064fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d009      	beq.n	80064d6 <HAL_UART_IRQHandler+0x4ea>
 80064c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9b8 	bl	8006844 <UART_Transmit_IT>
    return;
 80064d4:	e014      	b.n	8006500 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00e      	beq.n	8006500 <HAL_UART_IRQHandler+0x514>
 80064e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d008      	beq.n	8006500 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9f8 	bl	80068e4 <UART_EndTransmit_IT>
    return;
 80064f4:	e004      	b.n	8006500 <HAL_UART_IRQHandler+0x514>
    return;
 80064f6:	bf00      	nop
 80064f8:	e002      	b.n	8006500 <HAL_UART_IRQHandler+0x514>
      return;
 80064fa:	bf00      	nop
 80064fc:	e000      	b.n	8006500 <HAL_UART_IRQHandler+0x514>
      return;
 80064fe:	bf00      	nop
  }
}
 8006500:	37e8      	adds	r7, #232	; 0xe8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop

08006508 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b090      	sub	sp, #64	; 0x40
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006554:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006560:	2b00      	cmp	r3, #0
 8006562:	d137      	bne.n	80065d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006566:	2200      	movs	r2, #0
 8006568:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3314      	adds	r3, #20
 8006570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	623b      	str	r3, [r7, #32]
   return(result);
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
 8006582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800658a:	633a      	str	r2, [r7, #48]	; 0x30
 800658c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1e5      	bne.n	800656a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	e853 3f00 	ldrex	r3, [r3]
 80065ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	637b      	str	r3, [r7, #52]	; 0x34
 80065b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330c      	adds	r3, #12
 80065bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065be:	61fa      	str	r2, [r7, #28]
 80065c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c2:	69b9      	ldr	r1, [r7, #24]
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	617b      	str	r3, [r7, #20]
   return(result);
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e5      	bne.n	800659e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80065d2:	e002      	b.n	80065da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80065d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80065d6:	f7fb f8bb 	bl	8001750 <HAL_UART_TxCpltCallback>
}
 80065da:	bf00      	nop
 80065dc:	3740      	adds	r7, #64	; 0x40
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff ff89 	bl	8006508 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065f6:	bf00      	nop
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661a:	2b80      	cmp	r3, #128	; 0x80
 800661c:	bf0c      	ite	eq
 800661e:	2301      	moveq	r3, #1
 8006620:	2300      	movne	r3, #0
 8006622:	b2db      	uxtb	r3, r3
 8006624:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b21      	cmp	r3, #33	; 0x21
 8006630:	d108      	bne.n	8006644 <UART_DMAError+0x46>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2200      	movs	r2, #0
 800663c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800663e:	68b8      	ldr	r0, [r7, #8]
 8006640:	f000 f861 	bl	8006706 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b40      	cmp	r3, #64	; 0x40
 8006650:	bf0c      	ite	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	2300      	movne	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b22      	cmp	r3, #34	; 0x22
 8006664:	d108      	bne.n	8006678 <UART_DMAError+0x7a>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2200      	movs	r2, #0
 8006670:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006672:	68b8      	ldr	r0, [r7, #8]
 8006674:	f000 f86f 	bl	8006756 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667c:	f043 0210 	orr.w	r2, r3, #16
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006684:	68b8      	ldr	r0, [r7, #8]
 8006686:	f7ff ff49 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006692:	b480      	push	{r7}
 8006694:	b085      	sub	sp, #20
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	4613      	mov	r3, r2
 800669e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	88fa      	ldrh	r2, [r7, #6]
 80066aa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	88fa      	ldrh	r2, [r7, #6]
 80066b0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2222      	movs	r2, #34	; 0x22
 80066bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68da      	ldr	r2, [r3, #12]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066d6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	695a      	ldr	r2, [r3, #20]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 0220 	orr.w	r2, r2, #32
 80066f6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006706:	b480      	push	{r7}
 8006708:	b089      	sub	sp, #36	; 0x24
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
   return(result);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006724:	61fb      	str	r3, [r7, #28]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	61ba      	str	r2, [r7, #24]
 8006730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
   return(result);
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800674a:	bf00      	nop
 800674c:	3724      	adds	r7, #36	; 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006756:	b480      	push	{r7}
 8006758:	b095      	sub	sp, #84	; 0x54
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	330c      	adds	r3, #12
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800676e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006774:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	330c      	adds	r3, #12
 800677c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800677e:	643a      	str	r2, [r7, #64]	; 0x40
 8006780:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e5      	bne.n	800675e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3314      	adds	r3, #20
 80067b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d119      	bne.n	8006802 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f023 0310 	bic.w	r3, r3, #16
 80067e4:	647b      	str	r3, [r7, #68]	; 0x44
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	330c      	adds	r3, #12
 80067ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067ee:	61ba      	str	r2, [r7, #24]
 80067f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6979      	ldr	r1, [r7, #20]
 80067f4:	69ba      	ldr	r2, [r7, #24]
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	613b      	str	r3, [r7, #16]
   return(result);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e5      	bne.n	80067ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2220      	movs	r2, #32
 8006806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2200      	movs	r2, #0
 800680e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006810:	bf00      	nop
 8006812:	3754      	adds	r7, #84	; 0x54
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f7ff fe70 	bl	800651c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800683c:	bf00      	nop
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b21      	cmp	r3, #33	; 0x21
 8006856:	d13e      	bne.n	80068d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006860:	d114      	bne.n	800688c <UART_Transmit_IT+0x48>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d110      	bne.n	800688c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	461a      	mov	r2, r3
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800687e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	1c9a      	adds	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	621a      	str	r2, [r3, #32]
 800688a:	e008      	b.n	800689e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a1b      	ldr	r3, [r3, #32]
 8006890:	1c59      	adds	r1, r3, #1
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	6211      	str	r1, [r2, #32]
 8006896:	781a      	ldrb	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	4619      	mov	r1, r3
 80068ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10f      	bne.n	80068d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68da      	ldr	r2, [r3, #12]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80068d2:	2300      	movs	r3, #0
 80068d4:	e000      	b.n	80068d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80068d6:	2302      	movs	r3, #2
  }
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f7fa ff23 	bl	8001750 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b08c      	sub	sp, #48	; 0x30
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b22      	cmp	r3, #34	; 0x22
 8006926:	f040 80ab 	bne.w	8006a80 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d117      	bne.n	8006964 <UART_Receive_IT+0x50>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d113      	bne.n	8006964 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800693c:	2300      	movs	r3, #0
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006952:	b29a      	uxth	r2, r3
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	629a      	str	r2, [r3, #40]	; 0x28
 8006962:	e026      	b.n	80069b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d007      	beq.n	8006988 <UART_Receive_IT+0x74>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d10a      	bne.n	8006996 <UART_Receive_IT+0x82>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d106      	bne.n	8006996 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e008      	b.n	80069a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	b2db      	uxtb	r3, r3
 800699e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4619      	mov	r1, r3
 80069c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d15a      	bne.n	8006a7c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68da      	ldr	r2, [r3, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0220 	bic.w	r2, r2, #32
 80069d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68da      	ldr	r2, [r3, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	695a      	ldr	r2, [r3, #20]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0201 	bic.w	r2, r2, #1
 80069f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d135      	bne.n	8006a72 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2c:	623a      	str	r2, [r7, #32]
 8006a2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	69f9      	ldr	r1, [r7, #28]
 8006a32:	6a3a      	ldr	r2, [r7, #32]
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b10      	cmp	r3, #16
 8006a4c:	d10a      	bne.n	8006a64 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60fb      	str	r3, [r7, #12]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fd60 	bl	8006530 <HAL_UARTEx_RxEventCallback>
 8006a70:	e002      	b.n	8006a78 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fa fde2 	bl	800163c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e002      	b.n	8006a82 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e000      	b.n	8006a82 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
  }
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3730      	adds	r7, #48	; 0x30
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b09f      	sub	sp, #124	; 0x7c
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa2:	68d9      	ldr	r1, [r3, #12]
 8006aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	ea40 0301 	orr.w	r3, r0, r1
 8006aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	431a      	orrs	r2, r3
 8006abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ad0:	f021 010c 	bic.w	r1, r1, #12
 8006ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ada:	430b      	orrs	r3, r1
 8006adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aea:	6999      	ldr	r1, [r3, #24]
 8006aec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	ea40 0301 	orr.w	r3, r0, r1
 8006af4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4bc5      	ldr	r3, [pc, #788]	; (8006e10 <UART_SetConfig+0x384>)
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d004      	beq.n	8006b0a <UART_SetConfig+0x7e>
 8006b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4bc3      	ldr	r3, [pc, #780]	; (8006e14 <UART_SetConfig+0x388>)
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d103      	bne.n	8006b12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b0a:	f7fd fba7 	bl	800425c <HAL_RCC_GetPCLK2Freq>
 8006b0e:	6778      	str	r0, [r7, #116]	; 0x74
 8006b10:	e002      	b.n	8006b18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b12:	f7fd fb8f 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8006b16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b20:	f040 80b6 	bne.w	8006c90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006b24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b26:	461c      	mov	r4, r3
 8006b28:	f04f 0500 	mov.w	r5, #0
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	462b      	mov	r3, r5
 8006b30:	1891      	adds	r1, r2, r2
 8006b32:	6439      	str	r1, [r7, #64]	; 0x40
 8006b34:	415b      	adcs	r3, r3
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
 8006b38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b3c:	1912      	adds	r2, r2, r4
 8006b3e:	eb45 0303 	adc.w	r3, r5, r3
 8006b42:	f04f 0000 	mov.w	r0, #0
 8006b46:	f04f 0100 	mov.w	r1, #0
 8006b4a:	00d9      	lsls	r1, r3, #3
 8006b4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006b50:	00d0      	lsls	r0, r2, #3
 8006b52:	4602      	mov	r2, r0
 8006b54:	460b      	mov	r3, r1
 8006b56:	1911      	adds	r1, r2, r4
 8006b58:	6639      	str	r1, [r7, #96]	; 0x60
 8006b5a:	416b      	adcs	r3, r5
 8006b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8006b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	461a      	mov	r2, r3
 8006b64:	f04f 0300 	mov.w	r3, #0
 8006b68:	1891      	adds	r1, r2, r2
 8006b6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006b6c:	415b      	adcs	r3, r3
 8006b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006b74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006b78:	f7f9 fed8 	bl	800092c <__aeabi_uldivmod>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	460b      	mov	r3, r1
 8006b80:	4ba5      	ldr	r3, [pc, #660]	; (8006e18 <UART_SetConfig+0x38c>)
 8006b82:	fba3 2302 	umull	r2, r3, r3, r2
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	011e      	lsls	r6, r3, #4
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b8c:	461c      	mov	r4, r3
 8006b8e:	f04f 0500 	mov.w	r5, #0
 8006b92:	4622      	mov	r2, r4
 8006b94:	462b      	mov	r3, r5
 8006b96:	1891      	adds	r1, r2, r2
 8006b98:	6339      	str	r1, [r7, #48]	; 0x30
 8006b9a:	415b      	adcs	r3, r3
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ba2:	1912      	adds	r2, r2, r4
 8006ba4:	eb45 0303 	adc.w	r3, r5, r3
 8006ba8:	f04f 0000 	mov.w	r0, #0
 8006bac:	f04f 0100 	mov.w	r1, #0
 8006bb0:	00d9      	lsls	r1, r3, #3
 8006bb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bb6:	00d0      	lsls	r0, r2, #3
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	1911      	adds	r1, r2, r4
 8006bbe:	65b9      	str	r1, [r7, #88]	; 0x58
 8006bc0:	416b      	adcs	r3, r5
 8006bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	1891      	adds	r1, r2, r2
 8006bd0:	62b9      	str	r1, [r7, #40]	; 0x28
 8006bd2:	415b      	adcs	r3, r3
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006bda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006bde:	f7f9 fea5 	bl	800092c <__aeabi_uldivmod>
 8006be2:	4602      	mov	r2, r0
 8006be4:	460b      	mov	r3, r1
 8006be6:	4b8c      	ldr	r3, [pc, #560]	; (8006e18 <UART_SetConfig+0x38c>)
 8006be8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	2164      	movs	r1, #100	; 0x64
 8006bf0:	fb01 f303 	mul.w	r3, r1, r3
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	3332      	adds	r3, #50	; 0x32
 8006bfa:	4a87      	ldr	r2, [pc, #540]	; (8006e18 <UART_SetConfig+0x38c>)
 8006bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8006c00:	095b      	lsrs	r3, r3, #5
 8006c02:	005b      	lsls	r3, r3, #1
 8006c04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c08:	441e      	add	r6, r3
 8006c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f04f 0100 	mov.w	r1, #0
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	1894      	adds	r4, r2, r2
 8006c18:	623c      	str	r4, [r7, #32]
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c22:	1812      	adds	r2, r2, r0
 8006c24:	eb41 0303 	adc.w	r3, r1, r3
 8006c28:	f04f 0400 	mov.w	r4, #0
 8006c2c:	f04f 0500 	mov.w	r5, #0
 8006c30:	00dd      	lsls	r5, r3, #3
 8006c32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c36:	00d4      	lsls	r4, r2, #3
 8006c38:	4622      	mov	r2, r4
 8006c3a:	462b      	mov	r3, r5
 8006c3c:	1814      	adds	r4, r2, r0
 8006c3e:	653c      	str	r4, [r7, #80]	; 0x50
 8006c40:	414b      	adcs	r3, r1
 8006c42:	657b      	str	r3, [r7, #84]	; 0x54
 8006c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	1891      	adds	r1, r2, r2
 8006c50:	61b9      	str	r1, [r7, #24]
 8006c52:	415b      	adcs	r3, r3
 8006c54:	61fb      	str	r3, [r7, #28]
 8006c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006c5e:	f7f9 fe65 	bl	800092c <__aeabi_uldivmod>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4b6c      	ldr	r3, [pc, #432]	; (8006e18 <UART_SetConfig+0x38c>)
 8006c68:	fba3 1302 	umull	r1, r3, r3, r2
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	2164      	movs	r1, #100	; 0x64
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	3332      	adds	r3, #50	; 0x32
 8006c7a:	4a67      	ldr	r2, [pc, #412]	; (8006e18 <UART_SetConfig+0x38c>)
 8006c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c80:	095b      	lsrs	r3, r3, #5
 8006c82:	f003 0207 	and.w	r2, r3, #7
 8006c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4432      	add	r2, r6
 8006c8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c8e:	e0b9      	b.n	8006e04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c92:	461c      	mov	r4, r3
 8006c94:	f04f 0500 	mov.w	r5, #0
 8006c98:	4622      	mov	r2, r4
 8006c9a:	462b      	mov	r3, r5
 8006c9c:	1891      	adds	r1, r2, r2
 8006c9e:	6139      	str	r1, [r7, #16]
 8006ca0:	415b      	adcs	r3, r3
 8006ca2:	617b      	str	r3, [r7, #20]
 8006ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ca8:	1912      	adds	r2, r2, r4
 8006caa:	eb45 0303 	adc.w	r3, r5, r3
 8006cae:	f04f 0000 	mov.w	r0, #0
 8006cb2:	f04f 0100 	mov.w	r1, #0
 8006cb6:	00d9      	lsls	r1, r3, #3
 8006cb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006cbc:	00d0      	lsls	r0, r2, #3
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	eb12 0804 	adds.w	r8, r2, r4
 8006cc6:	eb43 0905 	adc.w	r9, r3, r5
 8006cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f04f 0100 	mov.w	r1, #0
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	f04f 0300 	mov.w	r3, #0
 8006cdc:	008b      	lsls	r3, r1, #2
 8006cde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ce2:	0082      	lsls	r2, r0, #2
 8006ce4:	4640      	mov	r0, r8
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	f7f9 fe20 	bl	800092c <__aeabi_uldivmod>
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	4b49      	ldr	r3, [pc, #292]	; (8006e18 <UART_SetConfig+0x38c>)
 8006cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8006cf6:	095b      	lsrs	r3, r3, #5
 8006cf8:	011e      	lsls	r6, r3, #4
 8006cfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f04f 0100 	mov.w	r1, #0
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	1894      	adds	r4, r2, r2
 8006d08:	60bc      	str	r4, [r7, #8]
 8006d0a:	415b      	adcs	r3, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d12:	1812      	adds	r2, r2, r0
 8006d14:	eb41 0303 	adc.w	r3, r1, r3
 8006d18:	f04f 0400 	mov.w	r4, #0
 8006d1c:	f04f 0500 	mov.w	r5, #0
 8006d20:	00dd      	lsls	r5, r3, #3
 8006d22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d26:	00d4      	lsls	r4, r2, #3
 8006d28:	4622      	mov	r2, r4
 8006d2a:	462b      	mov	r3, r5
 8006d2c:	1814      	adds	r4, r2, r0
 8006d2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006d30:	414b      	adcs	r3, r1
 8006d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f04f 0100 	mov.w	r1, #0
 8006d3e:	f04f 0200 	mov.w	r2, #0
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	008b      	lsls	r3, r1, #2
 8006d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d4c:	0082      	lsls	r2, r0, #2
 8006d4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006d52:	f7f9 fdeb 	bl	800092c <__aeabi_uldivmod>
 8006d56:	4602      	mov	r2, r0
 8006d58:	460b      	mov	r3, r1
 8006d5a:	4b2f      	ldr	r3, [pc, #188]	; (8006e18 <UART_SetConfig+0x38c>)
 8006d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d60:	095b      	lsrs	r3, r3, #5
 8006d62:	2164      	movs	r1, #100	; 0x64
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	3332      	adds	r3, #50	; 0x32
 8006d6e:	4a2a      	ldr	r2, [pc, #168]	; (8006e18 <UART_SetConfig+0x38c>)
 8006d70:	fba2 2303 	umull	r2, r3, r2, r3
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d7a:	441e      	add	r6, r3
 8006d7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	4602      	mov	r2, r0
 8006d86:	460b      	mov	r3, r1
 8006d88:	1894      	adds	r4, r2, r2
 8006d8a:	603c      	str	r4, [r7, #0]
 8006d8c:	415b      	adcs	r3, r3
 8006d8e:	607b      	str	r3, [r7, #4]
 8006d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d94:	1812      	adds	r2, r2, r0
 8006d96:	eb41 0303 	adc.w	r3, r1, r3
 8006d9a:	f04f 0400 	mov.w	r4, #0
 8006d9e:	f04f 0500 	mov.w	r5, #0
 8006da2:	00dd      	lsls	r5, r3, #3
 8006da4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006da8:	00d4      	lsls	r4, r2, #3
 8006daa:	4622      	mov	r2, r4
 8006dac:	462b      	mov	r3, r5
 8006dae:	eb12 0a00 	adds.w	sl, r2, r0
 8006db2:	eb43 0b01 	adc.w	fp, r3, r1
 8006db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f04f 0100 	mov.w	r1, #0
 8006dc0:	f04f 0200 	mov.w	r2, #0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	008b      	lsls	r3, r1, #2
 8006dca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006dce:	0082      	lsls	r2, r0, #2
 8006dd0:	4650      	mov	r0, sl
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	f7f9 fdaa 	bl	800092c <__aeabi_uldivmod>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <UART_SetConfig+0x38c>)
 8006dde:	fba3 1302 	umull	r1, r3, r3, r2
 8006de2:	095b      	lsrs	r3, r3, #5
 8006de4:	2164      	movs	r1, #100	; 0x64
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	3332      	adds	r3, #50	; 0x32
 8006df0:	4a09      	ldr	r2, [pc, #36]	; (8006e18 <UART_SetConfig+0x38c>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4432      	add	r2, r6
 8006e02:	609a      	str	r2, [r3, #8]
}
 8006e04:	bf00      	nop
 8006e06:	377c      	adds	r7, #124	; 0x7c
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e0e:	bf00      	nop
 8006e10:	40011000 	.word	0x40011000
 8006e14:	40011400 	.word	0x40011400
 8006e18:	51eb851f 	.word	0x51eb851f

08006e1c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8006e26:	2300      	movs	r3, #0
 8006e28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d103      	bne.n	8006e3a <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e002      	b.n	8006e40 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <FSMC_NAND_Init+0x80>)
 8006e44:	4013      	ands	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8006e50:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8006e56:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8006e5c:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8006e64:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	f043 0308 	orr.w	r3, r3, #8
 8006e76:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b10      	cmp	r3, #16
 8006e7e:	d103      	bne.n	8006e88 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e002      	b.n	8006e8e <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr
 8006e9c:	fff00181 	.word	0xfff00181

08006ea0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8006eac:	2300      	movs	r3, #0
 8006eae:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b10      	cmp	r3, #16
 8006eb4:	d103      	bne.n	8006ebe <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	617b      	str	r3, [r7, #20]
 8006ebc:	e002      	b.n	8006ec4 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006ed2:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006eda:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8006ee2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b10      	cmp	r3, #16
 8006eee:	d103      	bne.n	8006ef8 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	e002      	b.n	8006efe <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8006f18:	2300      	movs	r3, #0
 8006f1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b10      	cmp	r3, #16
 8006f20:	d103      	bne.n	8006f2a <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	617b      	str	r3, [r7, #20]
 8006f28:	e002      	b.n	8006f30 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8006f30:	2300      	movs	r3, #0
 8006f32:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006f3e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006f46:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8006f4e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d103      	bne.n	8006f64 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	60da      	str	r2, [r3, #12]
 8006f62:	e002      	b.n	8006f6a <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <__NVIC_SetPriority>:
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	4603      	mov	r3, r0
 8006f80:	6039      	str	r1, [r7, #0]
 8006f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	db0a      	blt.n	8006fa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	b2da      	uxtb	r2, r3
 8006f90:	490c      	ldr	r1, [pc, #48]	; (8006fc4 <__NVIC_SetPriority+0x4c>)
 8006f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f96:	0112      	lsls	r2, r2, #4
 8006f98:	b2d2      	uxtb	r2, r2
 8006f9a:	440b      	add	r3, r1
 8006f9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fa0:	e00a      	b.n	8006fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	4908      	ldr	r1, [pc, #32]	; (8006fc8 <__NVIC_SetPriority+0x50>)
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	3b04      	subs	r3, #4
 8006fb0:	0112      	lsls	r2, r2, #4
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	761a      	strb	r2, [r3, #24]
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	e000e100 	.word	0xe000e100
 8006fc8:	e000ed00 	.word	0xe000ed00

08006fcc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <SysTick_Handler+0x1c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fd4:	f001 fea4 	bl	8008d20 <xTaskGetSchedulerState>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d001      	beq.n	8006fe2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fde:	f002 fc8b 	bl	80098f8 <xPortSysTickHandler>
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	e000e010 	.word	0xe000e010

08006fec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fec:	b580      	push	{r7, lr}
 8006fee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	f06f 0004 	mvn.w	r0, #4
 8006ff6:	f7ff ffbf 	bl	8006f78 <__NVIC_SetPriority>
#endif
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007006:	f3ef 8305 	mrs	r3, IPSR
 800700a:	603b      	str	r3, [r7, #0]
  return(result);
 800700c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007012:	f06f 0305 	mvn.w	r3, #5
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	e00f      	b.n	800703a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800701a:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <osKernelInitialize+0x44>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d108      	bne.n	8007034 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8007022:	4809      	ldr	r0, [pc, #36]	; (8007048 <osKernelInitialize+0x48>)
 8007024:	f002 fe64 	bl	8009cf0 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <osKernelInitialize+0x44>)
 800702a:	2201      	movs	r2, #1
 800702c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800702e:	2300      	movs	r3, #0
 8007030:	607b      	str	r3, [r7, #4]
 8007032:	e002      	b.n	800703a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8007034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007038:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800703a:	687b      	ldr	r3, [r7, #4]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200008f8 	.word	0x200008f8
 8007048:	2000003c 	.word	0x2000003c

0800704c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007052:	f3ef 8305 	mrs	r3, IPSR
 8007056:	603b      	str	r3, [r7, #0]
  return(result);
 8007058:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <osKernelStart+0x1a>
    stat = osErrorISR;
 800705e:	f06f 0305 	mvn.w	r3, #5
 8007062:	607b      	str	r3, [r7, #4]
 8007064:	e010      	b.n	8007088 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007066:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <osKernelStart+0x48>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d109      	bne.n	8007082 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800706e:	f7ff ffbd 	bl	8006fec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <osKernelStart+0x48>)
 8007074:	2202      	movs	r2, #2
 8007076:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007078:	f001 f9f6 	bl	8008468 <vTaskStartScheduler>
      stat = osOK;
 800707c:	2300      	movs	r3, #0
 800707e:	607b      	str	r3, [r7, #4]
 8007080:	e002      	b.n	8007088 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007088:	687b      	ldr	r3, [r7, #4]
}
 800708a:	4618      	mov	r0, r3
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	200008f8 	.word	0x200008f8

08007098 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007098:	b580      	push	{r7, lr}
 800709a:	b08e      	sub	sp, #56	; 0x38
 800709c:	af04      	add	r7, sp, #16
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070a8:	f3ef 8305 	mrs	r3, IPSR
 80070ac:	617b      	str	r3, [r7, #20]
  return(result);
 80070ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d17e      	bne.n	80071b2 <osThreadNew+0x11a>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d07b      	beq.n	80071b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070ba:	2380      	movs	r3, #128	; 0x80
 80070bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070be:	2318      	movs	r3, #24
 80070c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80070c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d045      	beq.n	800715e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d002      	beq.n	80070e0 <osThreadNew+0x48>
        name = attr->name;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d002      	beq.n	80070ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	699b      	ldr	r3, [r3, #24]
 80070ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d008      	beq.n	8007106 <osThreadNew+0x6e>
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b38      	cmp	r3, #56	; 0x38
 80070f8:	d805      	bhi.n	8007106 <osThreadNew+0x6e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <osThreadNew+0x72>
        return (NULL);
 8007106:	2300      	movs	r3, #0
 8007108:	e054      	b.n	80071b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	089b      	lsrs	r3, r3, #2
 8007118:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <osThreadNew+0xa8>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	2bbb      	cmp	r3, #187	; 0xbb
 8007128:	d90a      	bls.n	8007140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800712e:	2b00      	cmp	r3, #0
 8007130:	d006      	beq.n	8007140 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <osThreadNew+0xa8>
        mem = 1;
 800713a:	2301      	movs	r3, #1
 800713c:	61bb      	str	r3, [r7, #24]
 800713e:	e010      	b.n	8007162 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10c      	bne.n	8007162 <osThreadNew+0xca>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d108      	bne.n	8007162 <osThreadNew+0xca>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <osThreadNew+0xca>
          mem = 0;
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
 800715c:	e001      	b.n	8007162 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d110      	bne.n	800718a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007170:	9202      	str	r2, [sp, #8]
 8007172:	9301      	str	r3, [sp, #4]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6a3a      	ldr	r2, [r7, #32]
 800717c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f000 ff86 	bl	8008090 <xTaskCreateStatic>
 8007184:	4603      	mov	r3, r0
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	e013      	b.n	80071b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d110      	bne.n	80071b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	b29a      	uxth	r2, r3
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	9301      	str	r3, [sp, #4]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80071a2:	68f8      	ldr	r0, [r7, #12]
 80071a4:	f000 ffd1 	bl	800814a <xTaskCreate>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d001      	beq.n	80071b2 <osThreadNew+0x11a>
            hTask = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80071b2:	693b      	ldr	r3, [r7, #16]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3728      	adds	r7, #40	; 0x28
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071c4:	f3ef 8305 	mrs	r3, IPSR
 80071c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80071ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <osDelay+0x1c>
    stat = osErrorISR;
 80071d0:	f06f 0305 	mvn.w	r3, #5
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e007      	b.n	80071e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071d8:	2300      	movs	r3, #0
 80071da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f90c 	bl	8008400 <vTaskDelay>
    }
  }

  return (stat);
 80071e8:	68fb      	ldr	r3, [r7, #12]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80071f2:	b580      	push	{r7, lr}
 80071f4:	b08a      	sub	sp, #40	; 0x28
 80071f6:	af02      	add	r7, sp, #8
 80071f8:	60f8      	str	r0, [r7, #12]
 80071fa:	60b9      	str	r1, [r7, #8]
 80071fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007202:	f3ef 8305 	mrs	r3, IPSR
 8007206:	613b      	str	r3, [r7, #16]
  return(result);
 8007208:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800720a:	2b00      	cmp	r3, #0
 800720c:	d175      	bne.n	80072fa <osSemaphoreNew+0x108>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d072      	beq.n	80072fa <osSemaphoreNew+0x108>
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d86e      	bhi.n	80072fa <osSemaphoreNew+0x108>
    mem = -1;
 800721c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007220:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d015      	beq.n	8007254 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d006      	beq.n	800723e <osSemaphoreNew+0x4c>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	2b4f      	cmp	r3, #79	; 0x4f
 8007236:	d902      	bls.n	800723e <osSemaphoreNew+0x4c>
        mem = 1;
 8007238:	2301      	movs	r3, #1
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	e00c      	b.n	8007258 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <osSemaphoreNew+0x66>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <osSemaphoreNew+0x66>
          mem = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]
 8007252:	e001      	b.n	8007258 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007254:	2300      	movs	r3, #0
 8007256:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800725e:	d04c      	beq.n	80072fa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2b01      	cmp	r3, #1
 8007264:	d128      	bne.n	80072b8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d10a      	bne.n	8007282 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	2203      	movs	r2, #3
 8007272:	9200      	str	r2, [sp, #0]
 8007274:	2200      	movs	r2, #0
 8007276:	2100      	movs	r1, #0
 8007278:	2001      	movs	r0, #1
 800727a:	f000 f993 	bl	80075a4 <xQueueGenericCreateStatic>
 800727e:	61f8      	str	r0, [r7, #28]
 8007280:	e005      	b.n	800728e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007282:	2203      	movs	r2, #3
 8007284:	2100      	movs	r1, #0
 8007286:	2001      	movs	r0, #1
 8007288:	f000 fa04 	bl	8007694 <xQueueGenericCreate>
 800728c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d022      	beq.n	80072da <osSemaphoreNew+0xe8>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01f      	beq.n	80072da <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800729a:	2300      	movs	r3, #0
 800729c:	2200      	movs	r2, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	69f8      	ldr	r0, [r7, #28]
 80072a2:	f000 fabf 	bl	8007824 <xQueueGenericSend>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d016      	beq.n	80072da <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80072ac:	69f8      	ldr	r0, [r7, #28]
 80072ae:	f000 fd33 	bl	8007d18 <vQueueDelete>
            hSemaphore = NULL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	61fb      	str	r3, [r7, #28]
 80072b6:	e010      	b.n	80072da <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d108      	bne.n	80072d0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	461a      	mov	r2, r3
 80072c4:	68b9      	ldr	r1, [r7, #8]
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fa41 	bl	800774e <xQueueCreateCountingSemaphoreStatic>
 80072cc:	61f8      	str	r0, [r7, #28]
 80072ce:	e004      	b.n	80072da <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80072d0:	68b9      	ldr	r1, [r7, #8]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fa72 	bl	80077bc <xQueueCreateCountingSemaphore>
 80072d8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <osSemaphoreNew+0xfc>
          name = attr->name;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]
 80072ec:	e001      	b.n	80072f2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80072f2:	6979      	ldr	r1, [r7, #20]
 80072f4:	69f8      	ldr	r0, [r7, #28]
 80072f6:	f000 fe43 	bl	8007f80 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80072fa:	69fb      	ldr	r3, [r7, #28]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3720      	adds	r7, #32
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007304:	b480      	push	{r7}
 8007306:	b085      	sub	sp, #20
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4a07      	ldr	r2, [pc, #28]	; (8007330 <vApplicationGetIdleTaskMemory+0x2c>)
 8007314:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4a06      	ldr	r2, [pc, #24]	; (8007334 <vApplicationGetIdleTaskMemory+0x30>)
 800731a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2280      	movs	r2, #128	; 0x80
 8007320:	601a      	str	r2, [r3, #0]
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	200044fc 	.word	0x200044fc
 8007334:	200045b8 	.word	0x200045b8

08007338 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4a07      	ldr	r2, [pc, #28]	; (8007364 <vApplicationGetTimerTaskMemory+0x2c>)
 8007348:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	4a06      	ldr	r2, [pc, #24]	; (8007368 <vApplicationGetTimerTaskMemory+0x30>)
 800734e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007356:	601a      	str	r2, [r3, #0]
}
 8007358:	bf00      	nop
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	200047b8 	.word	0x200047b8
 8007368:	20004874 	.word	0x20004874

0800736c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f103 0208 	add.w	r2, r3, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007384:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f103 0208 	add.w	r2, r3, #8
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f103 0208 	add.w	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073c6:	b480      	push	{r7}
 80073c8:	b085      	sub	sp, #20
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	683a      	ldr	r2, [r7, #0]
 80073f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	601a      	str	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007424:	d103      	bne.n	800742e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e00c      	b.n	8007448 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	3308      	adds	r3, #8
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	e002      	b.n	800743c <vListInsert+0x2e>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	60fb      	str	r3, [r7, #12]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	429a      	cmp	r2, r3
 8007446:	d2f6      	bcs.n	8007436 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6892      	ldr	r2, [r2, #8]
 8007496:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	6852      	ldr	r2, [r2, #4]
 80074a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d103      	bne.n	80074b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	1e5a      	subs	r2, r3, #1
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3714      	adds	r7, #20
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074fa:	bf00      	nop
 80074fc:	e7fe      	b.n	80074fc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074fe:	f002 f969 	bl	80097d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800750e:	fb01 f303 	mul.w	r3, r1, r3
 8007512:	441a      	add	r2, r3
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2200      	movs	r2, #0
 800751c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800752e:	3b01      	subs	r3, #1
 8007530:	68f9      	ldr	r1, [r7, #12]
 8007532:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	441a      	add	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	22ff      	movs	r2, #255	; 0xff
 8007542:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	22ff      	movs	r2, #255	; 0xff
 800754a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d114      	bne.n	800757e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d01a      	beq.n	8007592 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3310      	adds	r3, #16
 8007560:	4618      	mov	r0, r3
 8007562:	f001 fa1b 	bl	800899c <xTaskRemoveFromEventList>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d012      	beq.n	8007592 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800756c:	4b0c      	ldr	r3, [pc, #48]	; (80075a0 <xQueueGenericReset+0xcc>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	e009      	b.n	8007592 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3310      	adds	r3, #16
 8007582:	4618      	mov	r0, r3
 8007584:	f7ff fef2 	bl	800736c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	3324      	adds	r3, #36	; 0x24
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff feed 	bl	800736c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f002 f94f 	bl	8009834 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007596:	2301      	movs	r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
 80075b0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80075b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075ca:	bf00      	nop
 80075cc:	e7fe      	b.n	80075cc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <xQueueGenericCreateStatic+0x52>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <xQueueGenericCreateStatic+0x56>
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <xQueueGenericCreateStatic+0x58>
 80075fa:	2300      	movs	r3, #0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10a      	bne.n	8007616 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	623b      	str	r3, [r7, #32]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d102      	bne.n	8007622 <xQueueGenericCreateStatic+0x7e>
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d101      	bne.n	8007626 <xQueueGenericCreateStatic+0x82>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <xQueueGenericCreateStatic+0x84>
 8007626:	2300      	movs	r3, #0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10a      	bne.n	8007642 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800762c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007630:	f383 8811 	msr	BASEPRI, r3
 8007634:	f3bf 8f6f 	isb	sy
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	61fb      	str	r3, [r7, #28]
}
 800763e:	bf00      	nop
 8007640:	e7fe      	b.n	8007640 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007642:	2350      	movs	r3, #80	; 0x50
 8007644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	2b50      	cmp	r3, #80	; 0x50
 800764a:	d00a      	beq.n	8007662 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	61bb      	str	r3, [r7, #24]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007662:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00d      	beq.n	800768a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800766e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007670:	2201      	movs	r2, #1
 8007672:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007676:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	4613      	mov	r3, r2
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68b9      	ldr	r1, [r7, #8]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 f83f 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800768c:	4618      	mov	r0, r3
 800768e:	3730      	adds	r7, #48	; 0x30
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	; 0x28
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	4613      	mov	r3, r2
 80076a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueGenericCreate+0x2a>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	613b      	str	r3, [r7, #16]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	3350      	adds	r3, #80	; 0x50
 80076cc:	4618      	mov	r0, r3
 80076ce:	f002 f9a3 	bl	8009a18 <pvPortMalloc>
 80076d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3350      	adds	r3, #80	; 0x50
 80076e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	4613      	mov	r3, r2
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	68b9      	ldr	r1, [r7, #8]
 80076f8:	68f8      	ldr	r0, [r7, #12]
 80076fa:	f000 f805 	bl	8007708 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d103      	bne.n	8007724 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	e002      	b.n	800772a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007736:	2101      	movs	r1, #1
 8007738:	69b8      	ldr	r0, [r7, #24]
 800773a:	f7ff fecb 	bl	80074d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	78fa      	ldrb	r2, [r7, #3]
 8007742:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800774e:	b580      	push	{r7, lr}
 8007750:	b08a      	sub	sp, #40	; 0x28
 8007752:	af02      	add	r7, sp, #8
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10a      	bne.n	8007776 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	61bb      	str	r3, [r7, #24]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	429a      	cmp	r2, r3
 800777c:	d90a      	bls.n	8007794 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
}
 8007790:	bf00      	nop
 8007792:	e7fe      	b.n	8007792 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007794:	2302      	movs	r3, #2
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	2100      	movs	r1, #0
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff ff00 	bl	80075a4 <xQueueGenericCreateStatic>
 80077a4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d002      	beq.n	80077b2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80077ac:	69fb      	ldr	r3, [r7, #28]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80077b2:	69fb      	ldr	r3, [r7, #28]
	}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3720      	adds	r7, #32
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	613b      	str	r3, [r7, #16]
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d90a      	bls.n	8007800 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80077ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ee:	f383 8811 	msr	BASEPRI, r3
 80077f2:	f3bf 8f6f 	isb	sy
 80077f6:	f3bf 8f4f 	dsb	sy
 80077fa:	60fb      	str	r3, [r7, #12]
}
 80077fc:	bf00      	nop
 80077fe:	e7fe      	b.n	80077fe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007800:	2202      	movs	r2, #2
 8007802:	2100      	movs	r1, #0
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f7ff ff45 	bl	8007694 <xQueueGenericCreate>
 800780a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007818:	697b      	ldr	r3, [r7, #20]
	}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08e      	sub	sp, #56	; 0x38
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
 8007830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007832:	2300      	movs	r3, #0
 8007834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10a      	bne.n	8007856 <xQueueGenericSend+0x32>
	__asm volatile
 8007840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007844:	f383 8811 	msr	BASEPRI, r3
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	f3bf 8f4f 	dsb	sy
 8007850:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007852:	bf00      	nop
 8007854:	e7fe      	b.n	8007854 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d103      	bne.n	8007864 <xQueueGenericSend+0x40>
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007860:	2b00      	cmp	r3, #0
 8007862:	d101      	bne.n	8007868 <xQueueGenericSend+0x44>
 8007864:	2301      	movs	r3, #1
 8007866:	e000      	b.n	800786a <xQueueGenericSend+0x46>
 8007868:	2300      	movs	r3, #0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <xQueueGenericSend+0x60>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d103      	bne.n	8007892 <xQueueGenericSend+0x6e>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788e:	2b01      	cmp	r3, #1
 8007890:	d101      	bne.n	8007896 <xQueueGenericSend+0x72>
 8007892:	2301      	movs	r3, #1
 8007894:	e000      	b.n	8007898 <xQueueGenericSend+0x74>
 8007896:	2300      	movs	r3, #0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10a      	bne.n	80078b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	623b      	str	r3, [r7, #32]
}
 80078ae:	bf00      	nop
 80078b0:	e7fe      	b.n	80078b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078b2:	f001 fa35 	bl	8008d20 <xTaskGetSchedulerState>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d102      	bne.n	80078c2 <xQueueGenericSend+0x9e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d101      	bne.n	80078c6 <xQueueGenericSend+0xa2>
 80078c2:	2301      	movs	r3, #1
 80078c4:	e000      	b.n	80078c8 <xQueueGenericSend+0xa4>
 80078c6:	2300      	movs	r3, #0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	61fb      	str	r3, [r7, #28]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078e2:	f001 ff77 	bl	80097d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d302      	bcc.n	80078f8 <xQueueGenericSend+0xd4>
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d129      	bne.n	800794c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	68b9      	ldr	r1, [r7, #8]
 80078fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078fe:	f000 fa2e 	bl	8007d5e <prvCopyDataToQueue>
 8007902:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d010      	beq.n	800792e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	3324      	adds	r3, #36	; 0x24
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f843 	bl	800899c <xTaskRemoveFromEventList>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d013      	beq.n	8007944 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800791c:	4b3f      	ldr	r3, [pc, #252]	; (8007a1c <xQueueGenericSend+0x1f8>)
 800791e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007922:	601a      	str	r2, [r3, #0]
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	e00a      	b.n	8007944 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800792e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007930:	2b00      	cmp	r3, #0
 8007932:	d007      	beq.n	8007944 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007934:	4b39      	ldr	r3, [pc, #228]	; (8007a1c <xQueueGenericSend+0x1f8>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007944:	f001 ff76 	bl	8009834 <vPortExitCritical>
				return pdPASS;
 8007948:	2301      	movs	r3, #1
 800794a:	e063      	b.n	8007a14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007952:	f001 ff6f 	bl	8009834 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007956:	2300      	movs	r3, #0
 8007958:	e05c      	b.n	8007a14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	2b00      	cmp	r3, #0
 800795e:	d106      	bne.n	800796e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007960:	f107 0314 	add.w	r3, r7, #20
 8007964:	4618      	mov	r0, r3
 8007966:	f001 f87d 	bl	8008a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800796a:	2301      	movs	r3, #1
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800796e:	f001 ff61 	bl	8009834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007972:	f000 fde9 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007976:	f001 ff2d 	bl	80097d4 <vPortEnterCritical>
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007980:	b25b      	sxtb	r3, r3
 8007982:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007986:	d103      	bne.n	8007990 <xQueueGenericSend+0x16c>
 8007988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007992:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007996:	b25b      	sxtb	r3, r3
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800799c:	d103      	bne.n	80079a6 <xQueueGenericSend+0x182>
 800799e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a6:	f001 ff45 	bl	8009834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079aa:	1d3a      	adds	r2, r7, #4
 80079ac:	f107 0314 	add.w	r3, r7, #20
 80079b0:	4611      	mov	r1, r2
 80079b2:	4618      	mov	r0, r3
 80079b4:	f001 f86c 	bl	8008a90 <xTaskCheckForTimeOut>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d124      	bne.n	8007a08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079c0:	f000 fac5 	bl	8007f4e <prvIsQueueFull>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d018      	beq.n	80079fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	3310      	adds	r3, #16
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4611      	mov	r1, r2
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 ff92 	bl	80088fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079da:	f000 fa50 	bl	8007e7e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079de:	f000 fdc1 	bl	8008564 <xTaskResumeAll>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f47f af7c 	bne.w	80078e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079ea:	4b0c      	ldr	r3, [pc, #48]	; (8007a1c <xQueueGenericSend+0x1f8>)
 80079ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079f0:	601a      	str	r2, [r3, #0]
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	e772      	b.n	80078e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079fe:	f000 fa3e 	bl	8007e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a02:	f000 fdaf 	bl	8008564 <xTaskResumeAll>
 8007a06:	e76c      	b.n	80078e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0a:	f000 fa38 	bl	8007e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a0e:	f000 fda9 	bl	8008564 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3738      	adds	r7, #56	; 0x38
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b090      	sub	sp, #64	; 0x40
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10a      	bne.n	8007a4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a4a:	bf00      	nop
 8007a4c:	e7fe      	b.n	8007a4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d103      	bne.n	8007a5c <xQueueGenericSendFromISR+0x3c>
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <xQueueGenericSendFromISR+0x40>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e000      	b.n	8007a62 <xQueueGenericSendFromISR+0x42>
 8007a60:	2300      	movs	r3, #0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	d103      	bne.n	8007a8a <xQueueGenericSendFromISR+0x6a>
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d101      	bne.n	8007a8e <xQueueGenericSendFromISR+0x6e>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <xQueueGenericSendFromISR+0x70>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d10a      	bne.n	8007aaa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a98:	f383 8811 	msr	BASEPRI, r3
 8007a9c:	f3bf 8f6f 	isb	sy
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	623b      	str	r3, [r7, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	e7fe      	b.n	8007aa8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aaa:	f001 ff75 	bl	8009998 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aae:	f3ef 8211 	mrs	r2, BASEPRI
 8007ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab6:	f383 8811 	msr	BASEPRI, r3
 8007aba:	f3bf 8f6f 	isb	sy
 8007abe:	f3bf 8f4f 	dsb	sy
 8007ac2:	61fa      	str	r2, [r7, #28]
 8007ac4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d302      	bcc.n	8007adc <xQueueGenericSendFromISR+0xbc>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d12f      	bne.n	8007b3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007af2:	f000 f934 	bl	8007d5e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007af6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007afe:	d112      	bne.n	8007b26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d016      	beq.n	8007b36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0a:	3324      	adds	r3, #36	; 0x24
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 ff45 	bl	800899c <xTaskRemoveFromEventList>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d00e      	beq.n	8007b36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e007      	b.n	8007b36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	b25a      	sxtb	r2, r3
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b36:	2301      	movs	r3, #1
 8007b38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b3a:	e001      	b.n	8007b40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3740      	adds	r7, #64	; 0x40
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b08c      	sub	sp, #48	; 0x30
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b64:	2300      	movs	r3, #0
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <xQueueReceive+0x30>
	__asm volatile
 8007b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b76:	f383 8811 	msr	BASEPRI, r3
 8007b7a:	f3bf 8f6f 	isb	sy
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	623b      	str	r3, [r7, #32]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d103      	bne.n	8007b96 <xQueueReceive+0x3e>
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueReceive+0x42>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueReceive+0x44>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueReceive+0x5e>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61fb      	str	r3, [r7, #28]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bb6:	f001 f8b3 	bl	8008d20 <xTaskGetSchedulerState>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <xQueueReceive+0x6e>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <xQueueReceive+0x72>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <xQueueReceive+0x74>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10a      	bne.n	8007be6 <xQueueReceive+0x8e>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	61bb      	str	r3, [r7, #24]
}
 8007be2:	bf00      	nop
 8007be4:	e7fe      	b.n	8007be4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007be6:	f001 fdf5 	bl	80097d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01f      	beq.n	8007c36 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bfa:	f000 f91a 	bl	8007e32 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c00:	1e5a      	subs	r2, r3, #1
 8007c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c04:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00f      	beq.n	8007c2e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c10:	3310      	adds	r3, #16
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fec2 	bl	800899c <xTaskRemoveFromEventList>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c1e:	4b3d      	ldr	r3, [pc, #244]	; (8007d14 <xQueueReceive+0x1bc>)
 8007c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c24:	601a      	str	r2, [r3, #0]
 8007c26:	f3bf 8f4f 	dsb	sy
 8007c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c2e:	f001 fe01 	bl	8009834 <vPortExitCritical>
				return pdPASS;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e069      	b.n	8007d0a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d103      	bne.n	8007c44 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c3c:	f001 fdfa 	bl	8009834 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c40:	2300      	movs	r3, #0
 8007c42:	e062      	b.n	8007d0a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d106      	bne.n	8007c58 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c4a:	f107 0310 	add.w	r3, r7, #16
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 ff08 	bl	8008a64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c58:	f001 fdec 	bl	8009834 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c5c:	f000 fc74 	bl	8008548 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c60:	f001 fdb8 	bl	80097d4 <vPortEnterCritical>
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c6a:	b25b      	sxtb	r3, r3
 8007c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c70:	d103      	bne.n	8007c7a <xQueueReceive+0x122>
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c80:	b25b      	sxtb	r3, r3
 8007c82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c86:	d103      	bne.n	8007c90 <xQueueReceive+0x138>
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c90:	f001 fdd0 	bl	8009834 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c94:	1d3a      	adds	r2, r7, #4
 8007c96:	f107 0310 	add.w	r3, r7, #16
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fef7 	bl	8008a90 <xTaskCheckForTimeOut>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d123      	bne.n	8007cf0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007caa:	f000 f93a 	bl	8007f22 <prvIsQueueEmpty>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d017      	beq.n	8007ce4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	3324      	adds	r3, #36	; 0x24
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	4611      	mov	r1, r2
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fe1d 	bl	80088fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cc4:	f000 f8db 	bl	8007e7e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cc8:	f000 fc4c 	bl	8008564 <xTaskResumeAll>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d189      	bne.n	8007be6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007cd2:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <xQueueReceive+0x1bc>)
 8007cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	f3bf 8f6f 	isb	sy
 8007ce2:	e780      	b.n	8007be6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ce4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce6:	f000 f8ca 	bl	8007e7e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cea:	f000 fc3b 	bl	8008564 <xTaskResumeAll>
 8007cee:	e77a      	b.n	8007be6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f000 f8c4 	bl	8007e7e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cf6:	f000 fc35 	bl	8008564 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfc:	f000 f911 	bl	8007f22 <prvIsQueueEmpty>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f43f af6f 	beq.w	8007be6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3730      	adds	r7, #48	; 0x30
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10a      	bne.n	8007d40 <vQueueDelete+0x28>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60bb      	str	r3, [r7, #8]
}
 8007d3c:	bf00      	nop
 8007d3e:	e7fe      	b.n	8007d3e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f947 	bl	8007fd4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d102      	bne.n	8007d56 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 ff05 	bl	8009b60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007d56:	bf00      	nop
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b086      	sub	sp, #24
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	60f8      	str	r0, [r7, #12]
 8007d66:	60b9      	str	r1, [r7, #8]
 8007d68:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d72:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10d      	bne.n	8007d98 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d14d      	bne.n	8007e20 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f000 ffe7 	bl	8008d5c <xTaskPriorityDisinherit>
 8007d8e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	609a      	str	r2, [r3, #8]
 8007d96:	e043      	b.n	8007e20 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d119      	bne.n	8007dd2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6858      	ldr	r0, [r3, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	461a      	mov	r2, r3
 8007da8:	68b9      	ldr	r1, [r7, #8]
 8007daa:	f002 f95b 	bl	800a064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	441a      	add	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	685a      	ldr	r2, [r3, #4]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d32b      	bcc.n	8007e20 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	605a      	str	r2, [r3, #4]
 8007dd0:	e026      	b.n	8007e20 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68d8      	ldr	r0, [r3, #12]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	461a      	mov	r2, r3
 8007ddc:	68b9      	ldr	r1, [r7, #8]
 8007dde:	f002 f941 	bl	800a064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	425b      	negs	r3, r3
 8007dec:	441a      	add	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d207      	bcs.n	8007e0e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689a      	ldr	r2, [r3, #8]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	425b      	negs	r3, r3
 8007e08:	441a      	add	r2, r3
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d105      	bne.n	8007e20 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	1c5a      	adds	r2, r3, #1
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007e28:	697b      	ldr	r3, [r7, #20]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
 8007e3a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d018      	beq.n	8007e76 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68da      	ldr	r2, [r3, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	441a      	add	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68da      	ldr	r2, [r3, #12]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d303      	bcc.n	8007e66 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	68d9      	ldr	r1, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	461a      	mov	r2, r3
 8007e70:	6838      	ldr	r0, [r7, #0]
 8007e72:	f002 f8f7 	bl	800a064 <memcpy>
	}
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e86:	f001 fca5 	bl	80097d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e90:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e92:	e011      	b.n	8007eb8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d012      	beq.n	8007ec2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fd7b 	bl	800899c <xTaskRemoveFromEventList>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d001      	beq.n	8007eb0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007eac:	f000 fe52 	bl	8008b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007eb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	dce9      	bgt.n	8007e94 <prvUnlockQueue+0x16>
 8007ec0:	e000      	b.n	8007ec4 <prvUnlockQueue+0x46>
					break;
 8007ec2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	22ff      	movs	r2, #255	; 0xff
 8007ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ecc:	f001 fcb2 	bl	8009834 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ed0:	f001 fc80 	bl	80097d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eda:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007edc:	e011      	b.n	8007f02 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d012      	beq.n	8007f0c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3310      	adds	r3, #16
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fd56 	bl	800899c <xTaskRemoveFromEventList>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007ef6:	f000 fe2d 	bl	8008b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007efa:	7bbb      	ldrb	r3, [r7, #14]
 8007efc:	3b01      	subs	r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	dce9      	bgt.n	8007ede <prvUnlockQueue+0x60>
 8007f0a:	e000      	b.n	8007f0e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007f0c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	22ff      	movs	r2, #255	; 0xff
 8007f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007f16:	f001 fc8d 	bl	8009834 <vPortExitCritical>
}
 8007f1a:	bf00      	nop
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f2a:	f001 fc53 	bl	80097d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007f36:	2301      	movs	r3, #1
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	e001      	b.n	8007f40 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f40:	f001 fc78 	bl	8009834 <vPortExitCritical>

	return xReturn;
 8007f44:	68fb      	ldr	r3, [r7, #12]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007f56:	f001 fc3d 	bl	80097d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d102      	bne.n	8007f6c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f66:	2301      	movs	r3, #1
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e001      	b.n	8007f70 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f70:	f001 fc60 	bl	8009834 <vPortExitCritical>

	return xReturn;
 8007f74:	68fb      	ldr	r3, [r7, #12]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e014      	b.n	8007fba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f90:	4a0f      	ldr	r2, [pc, #60]	; (8007fd0 <vQueueAddToRegistry+0x50>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10b      	bne.n	8007fb4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f9c:	490c      	ldr	r1, [pc, #48]	; (8007fd0 <vQueueAddToRegistry+0x50>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007fa6:	4a0a      	ldr	r2, [pc, #40]	; (8007fd0 <vQueueAddToRegistry+0x50>)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007fb2:	e006      	b.n	8007fc2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b07      	cmp	r3, #7
 8007fbe:	d9e7      	bls.n	8007f90 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	3714      	adds	r7, #20
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop
 8007fd0:	20005530 	.word	0x20005530

08007fd4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b085      	sub	sp, #20
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007fdc:	2300      	movs	r3, #0
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e016      	b.n	8008010 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007fe2:	4a10      	ldr	r2, [pc, #64]	; (8008024 <vQueueUnregisterQueue+0x50>)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	00db      	lsls	r3, r3, #3
 8007fe8:	4413      	add	r3, r2
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d10b      	bne.n	800800a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007ff2:	4a0c      	ldr	r2, [pc, #48]	; (8008024 <vQueueUnregisterQueue+0x50>)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007ffc:	4a09      	ldr	r2, [pc, #36]	; (8008024 <vQueueUnregisterQueue+0x50>)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	4413      	add	r3, r2
 8008004:	2200      	movs	r2, #0
 8008006:	605a      	str	r2, [r3, #4]
				break;
 8008008:	e006      	b.n	8008018 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3301      	adds	r3, #1
 800800e:	60fb      	str	r3, [r7, #12]
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2b07      	cmp	r3, #7
 8008014:	d9e5      	bls.n	8007fe2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	3714      	adds	r7, #20
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr
 8008024:	20005530 	.word	0x20005530

08008028 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008038:	f001 fbcc 	bl	80097d4 <vPortEnterCritical>
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008042:	b25b      	sxtb	r3, r3
 8008044:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008048:	d103      	bne.n	8008052 <vQueueWaitForMessageRestricted+0x2a>
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2200      	movs	r2, #0
 800804e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008058:	b25b      	sxtb	r3, r3
 800805a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805e:	d103      	bne.n	8008068 <vQueueWaitForMessageRestricted+0x40>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008068:	f001 fbe4 	bl	8009834 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	2b00      	cmp	r3, #0
 8008072:	d106      	bne.n	8008082 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	68b9      	ldr	r1, [r7, #8]
 800807c:	4618      	mov	r0, r3
 800807e:	f000 fc61 	bl	8008944 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008082:	6978      	ldr	r0, [r7, #20]
 8008084:	f7ff fefb 	bl	8007e7e <prvUnlockQueue>
	}
 8008088:	bf00      	nop
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08e      	sub	sp, #56	; 0x38
 8008094:	af04      	add	r7, sp, #16
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800809e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xTaskCreateStatic+0x2a>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	623b      	str	r3, [r7, #32]
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10a      	bne.n	80080d6 <xTaskCreateStatic+0x46>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	61fb      	str	r3, [r7, #28]
}
 80080d2:	bf00      	nop
 80080d4:	e7fe      	b.n	80080d4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80080d6:	23bc      	movs	r3, #188	; 0xbc
 80080d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	2bbc      	cmp	r3, #188	; 0xbc
 80080de:	d00a      	beq.n	80080f6 <xTaskCreateStatic+0x66>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	61bb      	str	r3, [r7, #24]
}
 80080f2:	bf00      	nop
 80080f4:	e7fe      	b.n	80080f4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01e      	beq.n	800813c <xTaskCreateStatic+0xac>
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01b      	beq.n	800813c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008106:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800810c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	2202      	movs	r2, #2
 8008112:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008116:	2300      	movs	r3, #0
 8008118:	9303      	str	r3, [sp, #12]
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	9302      	str	r3, [sp, #8]
 800811e:	f107 0314 	add.w	r3, r7, #20
 8008122:	9301      	str	r3, [sp, #4]
 8008124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	68b9      	ldr	r1, [r7, #8]
 800812e:	68f8      	ldr	r0, [r7, #12]
 8008130:	f000 f850 	bl	80081d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008134:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008136:	f000 f8f3 	bl	8008320 <prvAddNewTaskToReadyList>
 800813a:	e001      	b.n	8008140 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008140:	697b      	ldr	r3, [r7, #20]
	}
 8008142:	4618      	mov	r0, r3
 8008144:	3728      	adds	r7, #40	; 0x28
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800814a:	b580      	push	{r7, lr}
 800814c:	b08c      	sub	sp, #48	; 0x30
 800814e:	af04      	add	r7, sp, #16
 8008150:	60f8      	str	r0, [r7, #12]
 8008152:	60b9      	str	r1, [r7, #8]
 8008154:	603b      	str	r3, [r7, #0]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800815a:	88fb      	ldrh	r3, [r7, #6]
 800815c:	009b      	lsls	r3, r3, #2
 800815e:	4618      	mov	r0, r3
 8008160:	f001 fc5a 	bl	8009a18 <pvPortMalloc>
 8008164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d00e      	beq.n	800818a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800816c:	20bc      	movs	r0, #188	; 0xbc
 800816e:	f001 fc53 	bl	8009a18 <pvPortMalloc>
 8008172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d003      	beq.n	8008182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	631a      	str	r2, [r3, #48]	; 0x30
 8008180:	e005      	b.n	800818e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008182:	6978      	ldr	r0, [r7, #20]
 8008184:	f001 fcec 	bl	8009b60 <vPortFree>
 8008188:	e001      	b.n	800818e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800818a:	2300      	movs	r3, #0
 800818c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d017      	beq.n	80081c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800819c:	88fa      	ldrh	r2, [r7, #6]
 800819e:	2300      	movs	r3, #0
 80081a0:	9303      	str	r3, [sp, #12]
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	9302      	str	r3, [sp, #8]
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 f80e 	bl	80081d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081b8:	69f8      	ldr	r0, [r7, #28]
 80081ba:	f000 f8b1 	bl	8008320 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80081be:	2301      	movs	r3, #1
 80081c0:	61bb      	str	r3, [r7, #24]
 80081c2:	e002      	b.n	80081ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80081c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80081ca:	69bb      	ldr	r3, [r7, #24]
	}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3720      	adds	r7, #32
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b088      	sub	sp, #32
 80081d8:	af00      	add	r7, sp, #0
 80081da:	60f8      	str	r0, [r7, #12]
 80081dc:	60b9      	str	r1, [r7, #8]
 80081de:	607a      	str	r2, [r7, #4]
 80081e0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80081e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	461a      	mov	r2, r3
 80081ec:	21a5      	movs	r1, #165	; 0xa5
 80081ee:	f001 ff47 	bl	800a080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80081fc:	3b01      	subs	r3, #1
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4413      	add	r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b00      	cmp	r3, #0
 8008214:	d00a      	beq.n	800822c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	617b      	str	r3, [r7, #20]
}
 8008228:	bf00      	nop
 800822a:	e7fe      	b.n	800822a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d01f      	beq.n	8008272 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e012      	b.n	800825e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008238:	68ba      	ldr	r2, [r7, #8]
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	4413      	add	r3, r2
 800823e:	7819      	ldrb	r1, [r3, #0]
 8008240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	4413      	add	r3, r2
 8008246:	3334      	adds	r3, #52	; 0x34
 8008248:	460a      	mov	r2, r1
 800824a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4413      	add	r3, r2
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	3301      	adds	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	69fb      	ldr	r3, [r7, #28]
 8008260:	2b0f      	cmp	r3, #15
 8008262:	d9e9      	bls.n	8008238 <prvInitialiseNewTask+0x64>
 8008264:	e000      	b.n	8008268 <prvInitialiseNewTask+0x94>
			{
				break;
 8008266:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008270:	e003      	b.n	800827a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800827a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827c:	2b37      	cmp	r3, #55	; 0x37
 800827e:	d901      	bls.n	8008284 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008280:	2337      	movs	r3, #55	; 0x37
 8008282:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008288:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800828e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008292:	2200      	movs	r2, #0
 8008294:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	3304      	adds	r3, #4
 800829a:	4618      	mov	r0, r3
 800829c:	f7ff f886 	bl	80073ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	3318      	adds	r3, #24
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff f881 	bl	80073ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80082ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80082c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c2:	2200      	movs	r2, #0
 80082c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80082c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80082d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d2:	3354      	adds	r3, #84	; 0x54
 80082d4:	2260      	movs	r2, #96	; 0x60
 80082d6:	2100      	movs	r1, #0
 80082d8:	4618      	mov	r0, r3
 80082da:	f001 fed1 	bl	800a080 <memset>
 80082de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e0:	4a0c      	ldr	r2, [pc, #48]	; (8008314 <prvInitialiseNewTask+0x140>)
 80082e2:	659a      	str	r2, [r3, #88]	; 0x58
 80082e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e6:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <prvInitialiseNewTask+0x144>)
 80082e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	4a0b      	ldr	r2, [pc, #44]	; (800831c <prvInitialiseNewTask+0x148>)
 80082ee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	68f9      	ldr	r1, [r7, #12]
 80082f4:	69b8      	ldr	r0, [r7, #24]
 80082f6:	f001 f941 	bl	800957c <pxPortInitialiseStack>
 80082fa:	4602      	mov	r2, r0
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d002      	beq.n	800830c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800830a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800830c:	bf00      	nop
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	0800ce2c 	.word	0x0800ce2c
 8008318:	0800ce4c 	.word	0x0800ce4c
 800831c:	0800ce0c 	.word	0x0800ce0c

08008320 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008328:	f001 fa54 	bl	80097d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800832c:	4b2d      	ldr	r3, [pc, #180]	; (80083e4 <prvAddNewTaskToReadyList+0xc4>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	4a2c      	ldr	r2, [pc, #176]	; (80083e4 <prvAddNewTaskToReadyList+0xc4>)
 8008334:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008336:	4b2c      	ldr	r3, [pc, #176]	; (80083e8 <prvAddNewTaskToReadyList+0xc8>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d109      	bne.n	8008352 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800833e:	4a2a      	ldr	r2, [pc, #168]	; (80083e8 <prvAddNewTaskToReadyList+0xc8>)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008344:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <prvAddNewTaskToReadyList+0xc4>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b01      	cmp	r3, #1
 800834a:	d110      	bne.n	800836e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800834c:	f000 fc26 	bl	8008b9c <prvInitialiseTaskLists>
 8008350:	e00d      	b.n	800836e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008352:	4b26      	ldr	r3, [pc, #152]	; (80083ec <prvAddNewTaskToReadyList+0xcc>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d109      	bne.n	800836e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800835a:	4b23      	ldr	r3, [pc, #140]	; (80083e8 <prvAddNewTaskToReadyList+0xc8>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	429a      	cmp	r2, r3
 8008366:	d802      	bhi.n	800836e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008368:	4a1f      	ldr	r2, [pc, #124]	; (80083e8 <prvAddNewTaskToReadyList+0xc8>)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800836e:	4b20      	ldr	r3, [pc, #128]	; (80083f0 <prvAddNewTaskToReadyList+0xd0>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a1e      	ldr	r2, [pc, #120]	; (80083f0 <prvAddNewTaskToReadyList+0xd0>)
 8008376:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <prvAddNewTaskToReadyList+0xd0>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008384:	4b1b      	ldr	r3, [pc, #108]	; (80083f4 <prvAddNewTaskToReadyList+0xd4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	429a      	cmp	r2, r3
 800838a:	d903      	bls.n	8008394 <prvAddNewTaskToReadyList+0x74>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a18      	ldr	r2, [pc, #96]	; (80083f4 <prvAddNewTaskToReadyList+0xd4>)
 8008392:	6013      	str	r3, [r2, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008398:	4613      	mov	r3, r2
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	4a15      	ldr	r2, [pc, #84]	; (80083f8 <prvAddNewTaskToReadyList+0xd8>)
 80083a2:	441a      	add	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f7ff f80b 	bl	80073c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083b0:	f001 fa40 	bl	8009834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083b4:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <prvAddNewTaskToReadyList+0xcc>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00e      	beq.n	80083da <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <prvAddNewTaskToReadyList+0xc8>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d207      	bcs.n	80083da <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80083ca:	4b0c      	ldr	r3, [pc, #48]	; (80083fc <prvAddNewTaskToReadyList+0xdc>)
 80083cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083da:	bf00      	nop
 80083dc:	3708      	adds	r7, #8
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	20005148 	.word	0x20005148
 80083e8:	20004c74 	.word	0x20004c74
 80083ec:	20005154 	.word	0x20005154
 80083f0:	20005164 	.word	0x20005164
 80083f4:	20005150 	.word	0x20005150
 80083f8:	20004c78 	.word	0x20004c78
 80083fc:	e000ed04 	.word	0xe000ed04

08008400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d017      	beq.n	8008442 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008412:	4b13      	ldr	r3, [pc, #76]	; (8008460 <vTaskDelay+0x60>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <vTaskDelay+0x30>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	60bb      	str	r3, [r7, #8]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008430:	f000 f88a 	bl	8008548 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008434:	2100      	movs	r1, #0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fcfe 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800843c:	f000 f892 	bl	8008564 <xTaskResumeAll>
 8008440:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008448:	4b06      	ldr	r3, [pc, #24]	; (8008464 <vTaskDelay+0x64>)
 800844a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008458:	bf00      	nop
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	20005170 	.word	0x20005170
 8008464:	e000ed04 	.word	0xe000ed04

08008468 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008476:	463a      	mov	r2, r7
 8008478:	1d39      	adds	r1, r7, #4
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ff40 	bl	8007304 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	9202      	str	r2, [sp, #8]
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	2300      	movs	r3, #0
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	460a      	mov	r2, r1
 8008496:	4924      	ldr	r1, [pc, #144]	; (8008528 <vTaskStartScheduler+0xc0>)
 8008498:	4824      	ldr	r0, [pc, #144]	; (800852c <vTaskStartScheduler+0xc4>)
 800849a:	f7ff fdf9 	bl	8008090 <xTaskCreateStatic>
 800849e:	4603      	mov	r3, r0
 80084a0:	4a23      	ldr	r2, [pc, #140]	; (8008530 <vTaskStartScheduler+0xc8>)
 80084a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084a4:	4b22      	ldr	r3, [pc, #136]	; (8008530 <vTaskStartScheduler+0xc8>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084ac:	2301      	movs	r3, #1
 80084ae:	617b      	str	r3, [r7, #20]
 80084b0:	e001      	b.n	80084b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d102      	bne.n	80084c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80084bc:	f000 fd10 	bl	8008ee0 <xTimerCreateTimerTask>
 80084c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	d11b      	bne.n	8008500 <vTaskStartScheduler+0x98>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	613b      	str	r3, [r7, #16]
}
 80084da:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80084dc:	4b15      	ldr	r3, [pc, #84]	; (8008534 <vTaskStartScheduler+0xcc>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3354      	adds	r3, #84	; 0x54
 80084e2:	4a15      	ldr	r2, [pc, #84]	; (8008538 <vTaskStartScheduler+0xd0>)
 80084e4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80084e6:	4b15      	ldr	r3, [pc, #84]	; (800853c <vTaskStartScheduler+0xd4>)
 80084e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084ee:	4b14      	ldr	r3, [pc, #80]	; (8008540 <vTaskStartScheduler+0xd8>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084f4:	4b13      	ldr	r3, [pc, #76]	; (8008544 <vTaskStartScheduler+0xdc>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084fa:	f001 f8c9 	bl	8009690 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084fe:	e00e      	b.n	800851e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008506:	d10a      	bne.n	800851e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	60fb      	str	r3, [r7, #12]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <vTaskStartScheduler+0xb4>
}
 800851e:	bf00      	nop
 8008520:	3718      	adds	r7, #24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	0800acdc 	.word	0x0800acdc
 800852c:	08008b6d 	.word	0x08008b6d
 8008530:	2000516c 	.word	0x2000516c
 8008534:	20004c74 	.word	0x20004c74
 8008538:	20000050 	.word	0x20000050
 800853c:	20005168 	.word	0x20005168
 8008540:	20005154 	.word	0x20005154
 8008544:	2000514c 	.word	0x2000514c

08008548 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008548:	b480      	push	{r7}
 800854a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <vTaskSuspendAll+0x18>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a03      	ldr	r2, [pc, #12]	; (8008560 <vTaskSuspendAll+0x18>)
 8008554:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008556:	bf00      	nop
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr
 8008560:	20005170 	.word	0x20005170

08008564 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008572:	4b42      	ldr	r3, [pc, #264]	; (800867c <xTaskResumeAll+0x118>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10a      	bne.n	8008590 <xTaskResumeAll+0x2c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008590:	f001 f920 	bl	80097d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008594:	4b39      	ldr	r3, [pc, #228]	; (800867c <xTaskResumeAll+0x118>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3b01      	subs	r3, #1
 800859a:	4a38      	ldr	r2, [pc, #224]	; (800867c <xTaskResumeAll+0x118>)
 800859c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <xTaskResumeAll+0x118>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d162      	bne.n	800866c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085a6:	4b36      	ldr	r3, [pc, #216]	; (8008680 <xTaskResumeAll+0x11c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d05e      	beq.n	800866c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085ae:	e02f      	b.n	8008610 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b0:	4b34      	ldr	r3, [pc, #208]	; (8008684 <xTaskResumeAll+0x120>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	3318      	adds	r3, #24
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fe ff5f 	bl	8007480 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe ff5a 	bl	8007480 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d0:	4b2d      	ldr	r3, [pc, #180]	; (8008688 <xTaskResumeAll+0x124>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d903      	bls.n	80085e0 <xTaskResumeAll+0x7c>
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085dc:	4a2a      	ldr	r2, [pc, #168]	; (8008688 <xTaskResumeAll+0x124>)
 80085de:	6013      	str	r3, [r2, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e4:	4613      	mov	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	4a27      	ldr	r2, [pc, #156]	; (800868c <xTaskResumeAll+0x128>)
 80085ee:	441a      	add	r2, r3
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3304      	adds	r3, #4
 80085f4:	4619      	mov	r1, r3
 80085f6:	4610      	mov	r0, r2
 80085f8:	f7fe fee5 	bl	80073c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008600:	4b23      	ldr	r3, [pc, #140]	; (8008690 <xTaskResumeAll+0x12c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	429a      	cmp	r2, r3
 8008608:	d302      	bcc.n	8008610 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800860a:	4b22      	ldr	r3, [pc, #136]	; (8008694 <xTaskResumeAll+0x130>)
 800860c:	2201      	movs	r2, #1
 800860e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008610:	4b1c      	ldr	r3, [pc, #112]	; (8008684 <xTaskResumeAll+0x120>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d1cb      	bne.n	80085b0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800861e:	f000 fb5f 	bl	8008ce0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <xTaskResumeAll+0x134>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d010      	beq.n	8008650 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800862e:	f000 f847 	bl	80086c0 <xTaskIncrementTick>
 8008632:	4603      	mov	r3, r0
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008638:	4b16      	ldr	r3, [pc, #88]	; (8008694 <xTaskResumeAll+0x130>)
 800863a:	2201      	movs	r2, #1
 800863c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	3b01      	subs	r3, #1
 8008642:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d1f1      	bne.n	800862e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <xTaskResumeAll+0x134>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008650:	4b10      	ldr	r3, [pc, #64]	; (8008694 <xTaskResumeAll+0x130>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d009      	beq.n	800866c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008658:	2301      	movs	r3, #1
 800865a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <xTaskResumeAll+0x138>)
 800865e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800866c:	f001 f8e2 	bl	8009834 <vPortExitCritical>

	return xAlreadyYielded;
 8008670:	68bb      	ldr	r3, [r7, #8]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20005170 	.word	0x20005170
 8008680:	20005148 	.word	0x20005148
 8008684:	20005108 	.word	0x20005108
 8008688:	20005150 	.word	0x20005150
 800868c:	20004c78 	.word	0x20004c78
 8008690:	20004c74 	.word	0x20004c74
 8008694:	2000515c 	.word	0x2000515c
 8008698:	20005158 	.word	0x20005158
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <xTaskGetTickCount+0x1c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086ac:	687b      	ldr	r3, [r7, #4]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	370c      	adds	r7, #12
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	2000514c 	.word	0x2000514c

080086c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086c6:	2300      	movs	r3, #0
 80086c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ca:	4b4f      	ldr	r3, [pc, #316]	; (8008808 <xTaskIncrementTick+0x148>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 808f 	bne.w	80087f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086d4:	4b4d      	ldr	r3, [pc, #308]	; (800880c <xTaskIncrementTick+0x14c>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086dc:	4a4b      	ldr	r2, [pc, #300]	; (800880c <xTaskIncrementTick+0x14c>)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d120      	bne.n	800872a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80086e8:	4b49      	ldr	r3, [pc, #292]	; (8008810 <xTaskIncrementTick+0x150>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <xTaskIncrementTick+0x48>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	603b      	str	r3, [r7, #0]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xTaskIncrementTick+0x46>
 8008708:	4b41      	ldr	r3, [pc, #260]	; (8008810 <xTaskIncrementTick+0x150>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]
 800870e:	4b41      	ldr	r3, [pc, #260]	; (8008814 <xTaskIncrementTick+0x154>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a3f      	ldr	r2, [pc, #252]	; (8008810 <xTaskIncrementTick+0x150>)
 8008714:	6013      	str	r3, [r2, #0]
 8008716:	4a3f      	ldr	r2, [pc, #252]	; (8008814 <xTaskIncrementTick+0x154>)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6013      	str	r3, [r2, #0]
 800871c:	4b3e      	ldr	r3, [pc, #248]	; (8008818 <xTaskIncrementTick+0x158>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3301      	adds	r3, #1
 8008722:	4a3d      	ldr	r2, [pc, #244]	; (8008818 <xTaskIncrementTick+0x158>)
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	f000 fadb 	bl	8008ce0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800872a:	4b3c      	ldr	r3, [pc, #240]	; (800881c <xTaskIncrementTick+0x15c>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	693a      	ldr	r2, [r7, #16]
 8008730:	429a      	cmp	r2, r3
 8008732:	d349      	bcc.n	80087c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008734:	4b36      	ldr	r3, [pc, #216]	; (8008810 <xTaskIncrementTick+0x150>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d104      	bne.n	8008748 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800873e:	4b37      	ldr	r3, [pc, #220]	; (800881c <xTaskIncrementTick+0x15c>)
 8008740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008744:	601a      	str	r2, [r3, #0]
					break;
 8008746:	e03f      	b.n	80087c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b31      	ldr	r3, [pc, #196]	; (8008810 <xTaskIncrementTick+0x150>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d203      	bcs.n	8008768 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008760:	4a2e      	ldr	r2, [pc, #184]	; (800881c <xTaskIncrementTick+0x15c>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008766:	e02f      	b.n	80087c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	3304      	adds	r3, #4
 800876c:	4618      	mov	r0, r3
 800876e:	f7fe fe87 	bl	8007480 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d004      	beq.n	8008784 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	3318      	adds	r3, #24
 800877e:	4618      	mov	r0, r3
 8008780:	f7fe fe7e 	bl	8007480 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <xTaskIncrementTick+0x160>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d903      	bls.n	8008798 <xTaskIncrementTick+0xd8>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	4a22      	ldr	r2, [pc, #136]	; (8008820 <xTaskIncrementTick+0x160>)
 8008796:	6013      	str	r3, [r2, #0]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800879c:	4613      	mov	r3, r2
 800879e:	009b      	lsls	r3, r3, #2
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4a1f      	ldr	r2, [pc, #124]	; (8008824 <xTaskIncrementTick+0x164>)
 80087a6:	441a      	add	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	3304      	adds	r3, #4
 80087ac:	4619      	mov	r1, r3
 80087ae:	4610      	mov	r0, r2
 80087b0:	f7fe fe09 	bl	80073c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b8:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3b8      	bcc.n	8008734 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80087c2:	2301      	movs	r3, #1
 80087c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087c6:	e7b5      	b.n	8008734 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <xTaskIncrementTick+0x168>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ce:	4915      	ldr	r1, [pc, #84]	; (8008824 <xTaskIncrementTick+0x164>)
 80087d0:	4613      	mov	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d901      	bls.n	80087e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <xTaskIncrementTick+0x16c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80087ec:	2301      	movs	r3, #1
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e004      	b.n	80087fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80087f2:	4b0f      	ldr	r3, [pc, #60]	; (8008830 <xTaskIncrementTick+0x170>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a0d      	ldr	r2, [pc, #52]	; (8008830 <xTaskIncrementTick+0x170>)
 80087fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80087fc:	697b      	ldr	r3, [r7, #20]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20005170 	.word	0x20005170
 800880c:	2000514c 	.word	0x2000514c
 8008810:	20005100 	.word	0x20005100
 8008814:	20005104 	.word	0x20005104
 8008818:	20005160 	.word	0x20005160
 800881c:	20005168 	.word	0x20005168
 8008820:	20005150 	.word	0x20005150
 8008824:	20004c78 	.word	0x20004c78
 8008828:	20004c74 	.word	0x20004c74
 800882c:	2000515c 	.word	0x2000515c
 8008830:	20005158 	.word	0x20005158

08008834 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800883a:	4b2a      	ldr	r3, [pc, #168]	; (80088e4 <vTaskSwitchContext+0xb0>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008842:	4b29      	ldr	r3, [pc, #164]	; (80088e8 <vTaskSwitchContext+0xb4>)
 8008844:	2201      	movs	r2, #1
 8008846:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008848:	e046      	b.n	80088d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800884a:	4b27      	ldr	r3, [pc, #156]	; (80088e8 <vTaskSwitchContext+0xb4>)
 800884c:	2200      	movs	r2, #0
 800884e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008850:	4b26      	ldr	r3, [pc, #152]	; (80088ec <vTaskSwitchContext+0xb8>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]
 8008856:	e010      	b.n	800887a <vTaskSwitchContext+0x46>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10a      	bne.n	8008874 <vTaskSwitchContext+0x40>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	607b      	str	r3, [r7, #4]
}
 8008870:	bf00      	nop
 8008872:	e7fe      	b.n	8008872 <vTaskSwitchContext+0x3e>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3b01      	subs	r3, #1
 8008878:	60fb      	str	r3, [r7, #12]
 800887a:	491d      	ldr	r1, [pc, #116]	; (80088f0 <vTaskSwitchContext+0xbc>)
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	440b      	add	r3, r1
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d0e4      	beq.n	8008858 <vTaskSwitchContext+0x24>
 800888e:	68fa      	ldr	r2, [r7, #12]
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4a15      	ldr	r2, [pc, #84]	; (80088f0 <vTaskSwitchContext+0xbc>)
 800889a:	4413      	add	r3, r2
 800889c:	60bb      	str	r3, [r7, #8]
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	3308      	adds	r3, #8
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d104      	bne.n	80088be <vTaskSwitchContext+0x8a>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	605a      	str	r2, [r3, #4]
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	4a0b      	ldr	r2, [pc, #44]	; (80088f4 <vTaskSwitchContext+0xc0>)
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	4a08      	ldr	r2, [pc, #32]	; (80088ec <vTaskSwitchContext+0xb8>)
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088ce:	4b09      	ldr	r3, [pc, #36]	; (80088f4 <vTaskSwitchContext+0xc0>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3354      	adds	r3, #84	; 0x54
 80088d4:	4a08      	ldr	r2, [pc, #32]	; (80088f8 <vTaskSwitchContext+0xc4>)
 80088d6:	6013      	str	r3, [r2, #0]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	20005170 	.word	0x20005170
 80088e8:	2000515c 	.word	0x2000515c
 80088ec:	20005150 	.word	0x20005150
 80088f0:	20004c78 	.word	0x20004c78
 80088f4:	20004c74 	.word	0x20004c74
 80088f8:	20000050 	.word	0x20000050

080088fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b084      	sub	sp, #16
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60fb      	str	r3, [r7, #12]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008922:	4b07      	ldr	r3, [pc, #28]	; (8008940 <vTaskPlaceOnEventList+0x44>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3318      	adds	r3, #24
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7fe fd6f 	bl	800740e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008930:	2101      	movs	r1, #1
 8008932:	6838      	ldr	r0, [r7, #0]
 8008934:	f000 fa80 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
}
 8008938:	bf00      	nop
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}
 8008940:	20004c74 	.word	0x20004c74

08008944 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008944:	b580      	push	{r7, lr}
 8008946:	b086      	sub	sp, #24
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10a      	bne.n	800896c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	617b      	str	r3, [r7, #20]
}
 8008968:	bf00      	nop
 800896a:	e7fe      	b.n	800896a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800896c:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <vTaskPlaceOnEventListRestricted+0x54>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3318      	adds	r3, #24
 8008972:	4619      	mov	r1, r3
 8008974:	68f8      	ldr	r0, [r7, #12]
 8008976:	f7fe fd26 	bl	80073c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d002      	beq.n	8008986 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008980:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008984:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	68b8      	ldr	r0, [r7, #8]
 800898a:	f000 fa55 	bl	8008e38 <prvAddCurrentTaskToDelayedList>
	}
 800898e:	bf00      	nop
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	20004c74 	.word	0x20004c74

0800899c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80089b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b6:	f383 8811 	msr	BASEPRI, r3
 80089ba:	f3bf 8f6f 	isb	sy
 80089be:	f3bf 8f4f 	dsb	sy
 80089c2:	60fb      	str	r3, [r7, #12]
}
 80089c4:	bf00      	nop
 80089c6:	e7fe      	b.n	80089c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	3318      	adds	r3, #24
 80089cc:	4618      	mov	r0, r3
 80089ce:	f7fe fd57 	bl	8007480 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089d2:	4b1e      	ldr	r3, [pc, #120]	; (8008a4c <xTaskRemoveFromEventList+0xb0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d11d      	bne.n	8008a16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	3304      	adds	r3, #4
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fe fd4e 	bl	8007480 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4b19      	ldr	r3, [pc, #100]	; (8008a50 <xTaskRemoveFromEventList+0xb4>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d903      	bls.n	80089f8 <xTaskRemoveFromEventList+0x5c>
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	4a16      	ldr	r2, [pc, #88]	; (8008a50 <xTaskRemoveFromEventList+0xb4>)
 80089f6:	6013      	str	r3, [r2, #0]
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4a13      	ldr	r2, [pc, #76]	; (8008a54 <xTaskRemoveFromEventList+0xb8>)
 8008a06:	441a      	add	r2, r3
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7fe fcd9 	bl	80073c6 <vListInsertEnd>
 8008a14:	e005      	b.n	8008a22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3318      	adds	r3, #24
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	480e      	ldr	r0, [pc, #56]	; (8008a58 <xTaskRemoveFromEventList+0xbc>)
 8008a1e:	f7fe fcd2 	bl	80073c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a26:	4b0d      	ldr	r3, [pc, #52]	; (8008a5c <xTaskRemoveFromEventList+0xc0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d905      	bls.n	8008a3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a34:	4b0a      	ldr	r3, [pc, #40]	; (8008a60 <xTaskRemoveFromEventList+0xc4>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e001      	b.n	8008a40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a40:	697b      	ldr	r3, [r7, #20]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20005170 	.word	0x20005170
 8008a50:	20005150 	.word	0x20005150
 8008a54:	20004c78 	.word	0x20004c78
 8008a58:	20005108 	.word	0x20005108
 8008a5c:	20004c74 	.word	0x20004c74
 8008a60:	2000515c 	.word	0x2000515c

08008a64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a6c:	4b06      	ldr	r3, [pc, #24]	; (8008a88 <vTaskInternalSetTimeOutState+0x24>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a74:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <vTaskInternalSetTimeOutState+0x28>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	605a      	str	r2, [r3, #4]
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	20005160 	.word	0x20005160
 8008a8c:	2000514c 	.word	0x2000514c

08008a90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b088      	sub	sp, #32
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10a      	bne.n	8008ab6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	f383 8811 	msr	BASEPRI, r3
 8008aa8:	f3bf 8f6f 	isb	sy
 8008aac:	f3bf 8f4f 	dsb	sy
 8008ab0:	613b      	str	r3, [r7, #16]
}
 8008ab2:	bf00      	nop
 8008ab4:	e7fe      	b.n	8008ab4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d10a      	bne.n	8008ad2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac0:	f383 8811 	msr	BASEPRI, r3
 8008ac4:	f3bf 8f6f 	isb	sy
 8008ac8:	f3bf 8f4f 	dsb	sy
 8008acc:	60fb      	str	r3, [r7, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ad2:	f000 fe7f 	bl	80097d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <xTaskCheckForTimeOut+0xbc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008aee:	d102      	bne.n	8008af6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e023      	b.n	8008b3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <xTaskCheckForTimeOut+0xc0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d007      	beq.n	8008b12 <xTaskCheckForTimeOut+0x82>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	61fb      	str	r3, [r7, #28]
 8008b10:	e015      	b.n	8008b3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d20b      	bcs.n	8008b34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff ff9b 	bl	8008a64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	e004      	b.n	8008b3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b3e:	f000 fe79 	bl	8009834 <vPortExitCritical>

	return xReturn;
 8008b42:	69fb      	ldr	r3, [r7, #28]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	2000514c 	.word	0x2000514c
 8008b50:	20005160 	.word	0x20005160

08008b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b58:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <vTaskMissedYield+0x14>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	2000515c 	.word	0x2000515c

08008b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b74:	f000 f852 	bl	8008c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <prvIdleTask+0x28>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d9f9      	bls.n	8008b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <prvIdleTask+0x2c>)
 8008b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b90:	e7f0      	b.n	8008b74 <prvIdleTask+0x8>
 8008b92:	bf00      	nop
 8008b94:	20004c78 	.word	0x20004c78
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	e00c      	b.n	8008bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4a12      	ldr	r2, [pc, #72]	; (8008bfc <prvInitialiseTaskLists+0x60>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe fbd8 	bl	800736c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b37      	cmp	r3, #55	; 0x37
 8008bc6:	d9ef      	bls.n	8008ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bc8:	480d      	ldr	r0, [pc, #52]	; (8008c00 <prvInitialiseTaskLists+0x64>)
 8008bca:	f7fe fbcf 	bl	800736c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bce:	480d      	ldr	r0, [pc, #52]	; (8008c04 <prvInitialiseTaskLists+0x68>)
 8008bd0:	f7fe fbcc 	bl	800736c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bd4:	480c      	ldr	r0, [pc, #48]	; (8008c08 <prvInitialiseTaskLists+0x6c>)
 8008bd6:	f7fe fbc9 	bl	800736c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bda:	480c      	ldr	r0, [pc, #48]	; (8008c0c <prvInitialiseTaskLists+0x70>)
 8008bdc:	f7fe fbc6 	bl	800736c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008be0:	480b      	ldr	r0, [pc, #44]	; (8008c10 <prvInitialiseTaskLists+0x74>)
 8008be2:	f7fe fbc3 	bl	800736c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <prvInitialiseTaskLists+0x78>)
 8008be8:	4a05      	ldr	r2, [pc, #20]	; (8008c00 <prvInitialiseTaskLists+0x64>)
 8008bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <prvInitialiseTaskLists+0x7c>)
 8008bee:	4a05      	ldr	r2, [pc, #20]	; (8008c04 <prvInitialiseTaskLists+0x68>)
 8008bf0:	601a      	str	r2, [r3, #0]
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20004c78 	.word	0x20004c78
 8008c00:	200050d8 	.word	0x200050d8
 8008c04:	200050ec 	.word	0x200050ec
 8008c08:	20005108 	.word	0x20005108
 8008c0c:	2000511c 	.word	0x2000511c
 8008c10:	20005134 	.word	0x20005134
 8008c14:	20005100 	.word	0x20005100
 8008c18:	20005104 	.word	0x20005104

08008c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c22:	e019      	b.n	8008c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c24:	f000 fdd6 	bl	80097d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c28:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <prvCheckTasksWaitingTermination+0x50>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fc23 	bl	8007480 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c3a:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <prvCheckTasksWaitingTermination+0x54>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <prvCheckTasksWaitingTermination+0x54>)
 8008c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c44:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c4e:	f000 fdf1 	bl	8009834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f810 	bl	8008c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e1      	bne.n	8008c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	2000511c 	.word	0x2000511c
 8008c70:	20005148 	.word	0x20005148
 8008c74:	20005130 	.word	0x20005130

08008c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3354      	adds	r3, #84	; 0x54
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 facb 	bl	800a220 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d108      	bne.n	8008ca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 ff61 	bl	8009b60 <vPortFree>
				vPortFree( pxTCB );
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 ff5e 	bl	8009b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ca4:	e018      	b.n	8008cd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d103      	bne.n	8008cb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 ff55 	bl	8009b60 <vPortFree>
	}
 8008cb6:	e00f      	b.n	8008cd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d00a      	beq.n	8008cd8 <prvDeleteTCB+0x60>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	f383 8811 	msr	BASEPRI, r3
 8008cca:	f3bf 8f6f 	isb	sy
 8008cce:	f3bf 8f4f 	dsb	sy
 8008cd2:	60fb      	str	r3, [r7, #12]
}
 8008cd4:	bf00      	nop
 8008cd6:	e7fe      	b.n	8008cd6 <prvDeleteTCB+0x5e>
	}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <prvResetNextTaskUnblockTime+0x38>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d104      	bne.n	8008cfa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <prvResetNextTaskUnblockTime+0x3c>)
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008cf6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cf8:	e008      	b.n	8008d0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfa:	4b07      	ldr	r3, [pc, #28]	; (8008d18 <prvResetNextTaskUnblockTime+0x38>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <prvResetNextTaskUnblockTime+0x3c>)
 8008d0a:	6013      	str	r3, [r2, #0]
}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	20005100 	.word	0x20005100
 8008d1c:	20005168 	.word	0x20005168

08008d20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d26:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <xTaskGetSchedulerState+0x34>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d102      	bne.n	8008d34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	607b      	str	r3, [r7, #4]
 8008d32:	e008      	b.n	8008d46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <xTaskGetSchedulerState+0x38>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d3c:	2302      	movs	r3, #2
 8008d3e:	607b      	str	r3, [r7, #4]
 8008d40:	e001      	b.n	8008d46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d42:	2300      	movs	r3, #0
 8008d44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d46:	687b      	ldr	r3, [r7, #4]
	}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	20005154 	.word	0x20005154
 8008d58:	20005170 	.word	0x20005170

08008d5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d056      	beq.n	8008e20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d72:	4b2e      	ldr	r3, [pc, #184]	; (8008e2c <xTaskPriorityDisinherit+0xd0>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d00a      	beq.n	8008d92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	60fb      	str	r3, [r7, #12]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	60bb      	str	r3, [r7, #8]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db4:	1e5a      	subs	r2, r3, #1
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dba:	693b      	ldr	r3, [r7, #16]
 8008dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d02c      	beq.n	8008e20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d128      	bne.n	8008e20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fb54 	bl	8007480 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	4b0f      	ldr	r3, [pc, #60]	; (8008e30 <xTaskPriorityDisinherit+0xd4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d903      	bls.n	8008e00 <xTaskPriorityDisinherit+0xa4>
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <xTaskPriorityDisinherit+0xd4>)
 8008dfe:	6013      	str	r3, [r2, #0]
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4a09      	ldr	r2, [pc, #36]	; (8008e34 <xTaskPriorityDisinherit+0xd8>)
 8008e0e:	441a      	add	r2, r3
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	3304      	adds	r3, #4
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7fe fad5 	bl	80073c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e20:	697b      	ldr	r3, [r7, #20]
	}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3718      	adds	r7, #24
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	20004c74 	.word	0x20004c74
 8008e30:	20005150 	.word	0x20005150
 8008e34:	20004c78 	.word	0x20004c78

08008e38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e42:	4b21      	ldr	r3, [pc, #132]	; (8008ec8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e48:	4b20      	ldr	r3, [pc, #128]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fb16 	bl	8007480 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5a:	d10a      	bne.n	8008e72 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e62:	4b1a      	ldr	r3, [pc, #104]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3304      	adds	r3, #4
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4819      	ldr	r0, [pc, #100]	; (8008ed0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e6c:	f7fe faab 	bl	80073c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e70:	e026      	b.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4413      	add	r3, r2
 8008e78:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008e7a:	4b14      	ldr	r3, [pc, #80]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d209      	bcs.n	8008e9e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	3304      	adds	r3, #4
 8008e94:	4619      	mov	r1, r3
 8008e96:	4610      	mov	r0, r2
 8008e98:	f7fe fab9 	bl	800740e <vListInsert>
}
 8008e9c:	e010      	b.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e9e:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	4610      	mov	r0, r2
 8008eac:	f7fe faaf 	bl	800740e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008eb0:	4b0a      	ldr	r3, [pc, #40]	; (8008edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68ba      	ldr	r2, [r7, #8]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d202      	bcs.n	8008ec0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eba:	4a08      	ldr	r2, [pc, #32]	; (8008edc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6013      	str	r3, [r2, #0]
}
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	2000514c 	.word	0x2000514c
 8008ecc:	20004c74 	.word	0x20004c74
 8008ed0:	20005134 	.word	0x20005134
 8008ed4:	20005104 	.word	0x20005104
 8008ed8:	20005100 	.word	0x20005100
 8008edc:	20005168 	.word	0x20005168

08008ee0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08a      	sub	sp, #40	; 0x28
 8008ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008eea:	f000 fb07 	bl	80094fc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008eee:	4b1c      	ldr	r3, [pc, #112]	; (8008f60 <xTimerCreateTimerTask+0x80>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d021      	beq.n	8008f3a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008efe:	1d3a      	adds	r2, r7, #4
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	f107 030c 	add.w	r3, r7, #12
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7fe fa15 	bl	8007338 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f0e:	6879      	ldr	r1, [r7, #4]
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	9202      	str	r2, [sp, #8]
 8008f16:	9301      	str	r3, [sp, #4]
 8008f18:	2302      	movs	r3, #2
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	460a      	mov	r2, r1
 8008f20:	4910      	ldr	r1, [pc, #64]	; (8008f64 <xTimerCreateTimerTask+0x84>)
 8008f22:	4811      	ldr	r0, [pc, #68]	; (8008f68 <xTimerCreateTimerTask+0x88>)
 8008f24:	f7ff f8b4 	bl	8008090 <xTaskCreateStatic>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <xTimerCreateTimerTask+0x8c>)
 8008f2c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f2e:	4b0f      	ldr	r3, [pc, #60]	; (8008f6c <xTimerCreateTimerTask+0x8c>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d001      	beq.n	8008f3a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f36:	2301      	movs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10a      	bne.n	8008f56 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	613b      	str	r3, [r7, #16]
}
 8008f52:	bf00      	nop
 8008f54:	e7fe      	b.n	8008f54 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f56:	697b      	ldr	r3, [r7, #20]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200051a4 	.word	0x200051a4
 8008f64:	0800ace4 	.word	0x0800ace4
 8008f68:	080090a5 	.word	0x080090a5
 8008f6c:	200051a8 	.word	0x200051a8

08008f70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b08a      	sub	sp, #40	; 0x28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f9e:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <xTimerGenericCommand+0x98>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d02a      	beq.n	8008ffc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b05      	cmp	r3, #5
 8008fb6:	dc18      	bgt.n	8008fea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fb8:	f7ff feb2 	bl	8008d20 <xTaskGetSchedulerState>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b02      	cmp	r3, #2
 8008fc0:	d109      	bne.n	8008fd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fc2:	4b11      	ldr	r3, [pc, #68]	; (8009008 <xTimerGenericCommand+0x98>)
 8008fc4:	6818      	ldr	r0, [r3, #0]
 8008fc6:	f107 0110 	add.w	r1, r7, #16
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fce:	f7fe fc29 	bl	8007824 <xQueueGenericSend>
 8008fd2:	6278      	str	r0, [r7, #36]	; 0x24
 8008fd4:	e012      	b.n	8008ffc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fd6:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <xTimerGenericCommand+0x98>)
 8008fd8:	6818      	ldr	r0, [r3, #0]
 8008fda:	f107 0110 	add.w	r1, r7, #16
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f7fe fc1f 	bl	8007824 <xQueueGenericSend>
 8008fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8008fe8:	e008      	b.n	8008ffc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fea:	4b07      	ldr	r3, [pc, #28]	; (8009008 <xTimerGenericCommand+0x98>)
 8008fec:	6818      	ldr	r0, [r3, #0]
 8008fee:	f107 0110 	add.w	r1, r7, #16
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	683a      	ldr	r2, [r7, #0]
 8008ff6:	f7fe fd13 	bl	8007a20 <xQueueGenericSendFromISR>
 8008ffa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3728      	adds	r7, #40	; 0x28
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200051a4 	.word	0x200051a4

0800900c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af02      	add	r7, sp, #8
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009016:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <prvProcessExpiredTimer+0x94>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3304      	adds	r3, #4
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fa2b 	bl	8007480 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d022      	beq.n	800907e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	699a      	ldr	r2, [r3, #24]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	18d1      	adds	r1, r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	683a      	ldr	r2, [r7, #0]
 8009044:	6978      	ldr	r0, [r7, #20]
 8009046:	f000 f8d1 	bl	80091ec <prvInsertTimerInActiveList>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d01f      	beq.n	8009090 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	2100      	movs	r1, #0
 800905a:	6978      	ldr	r0, [r7, #20]
 800905c:	f7ff ff88 	bl	8008f70 <xTimerGenericCommand>
 8009060:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d113      	bne.n	8009090 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906c:	f383 8811 	msr	BASEPRI, r3
 8009070:	f3bf 8f6f 	isb	sy
 8009074:	f3bf 8f4f 	dsb	sy
 8009078:	60fb      	str	r3, [r7, #12]
}
 800907a:	bf00      	nop
 800907c:	e7fe      	b.n	800907c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009084:	f023 0301 	bic.w	r3, r3, #1
 8009088:	b2da      	uxtb	r2, r3
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	6978      	ldr	r0, [r7, #20]
 8009096:	4798      	blx	r3
}
 8009098:	bf00      	nop
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	2000519c 	.word	0x2000519c

080090a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090ac:	f107 0308 	add.w	r3, r7, #8
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 f857 	bl	8009164 <prvGetNextExpireTime>
 80090b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4619      	mov	r1, r3
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f803 	bl	80090c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090c2:	f000 f8d5 	bl	8009270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c6:	e7f1      	b.n	80090ac <prvTimerTask+0x8>

080090c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090d2:	f7ff fa39 	bl	8008548 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f866 	bl	80091ac <prvSampleTimeNow>
 80090e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d130      	bne.n	800914a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <prvProcessTimerOrBlockTask+0x3c>
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d806      	bhi.n	8009104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090f6:	f7ff fa35 	bl	8008564 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff85 	bl	800900c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009102:	e024      	b.n	800914e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d008      	beq.n	800911c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800910a:	4b13      	ldr	r3, [pc, #76]	; (8009158 <prvProcessTimerOrBlockTask+0x90>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <prvProcessTimerOrBlockTask+0x50>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <prvProcessTimerOrBlockTask+0x52>
 8009118:	2300      	movs	r3, #0
 800911a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <prvProcessTimerOrBlockTask+0x94>)
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4619      	mov	r1, r3
 800912a:	f7fe ff7d 	bl	8008028 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800912e:	f7ff fa19 	bl	8008564 <xTaskResumeAll>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009138:	4b09      	ldr	r3, [pc, #36]	; (8009160 <prvProcessTimerOrBlockTask+0x98>)
 800913a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	f3bf 8f6f 	isb	sy
}
 8009148:	e001      	b.n	800914e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800914a:	f7ff fa0b 	bl	8008564 <xTaskResumeAll>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	200051a0 	.word	0x200051a0
 800915c:	200051a4 	.word	0x200051a4
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800916c:	4b0e      	ldr	r3, [pc, #56]	; (80091a8 <prvGetNextExpireTime+0x44>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <prvGetNextExpireTime+0x16>
 8009176:	2201      	movs	r2, #1
 8009178:	e000      	b.n	800917c <prvGetNextExpireTime+0x18>
 800917a:	2200      	movs	r2, #0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d105      	bne.n	8009194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <prvGetNextExpireTime+0x44>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	e001      	b.n	8009198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009198:	68fb      	ldr	r3, [r7, #12]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	2000519c 	.word	0x2000519c

080091ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091b4:	f7ff fa74 	bl	80086a0 <xTaskGetTickCount>
 80091b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091ba:	4b0b      	ldr	r3, [pc, #44]	; (80091e8 <prvSampleTimeNow+0x3c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d205      	bcs.n	80091d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091c4:	f000 f936 	bl	8009434 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e002      	b.n	80091d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091d6:	4a04      	ldr	r2, [pc, #16]	; (80091e8 <prvSampleTimeNow+0x3c>)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	200051ac 	.word	0x200051ac

080091ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d812      	bhi.n	8009238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	d302      	bcc.n	8009226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	e01b      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009226:	4b10      	ldr	r3, [pc, #64]	; (8009268 <prvInsertTimerInActiveList+0x7c>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3304      	adds	r3, #4
 800922e:	4619      	mov	r1, r3
 8009230:	4610      	mov	r0, r2
 8009232:	f7fe f8ec 	bl	800740e <vListInsert>
 8009236:	e012      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d206      	bcs.n	800924e <prvInsertTimerInActiveList+0x62>
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d302      	bcc.n	800924e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	e007      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800924e:	4b07      	ldr	r3, [pc, #28]	; (800926c <prvInsertTimerInActiveList+0x80>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3304      	adds	r3, #4
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7fe f8d8 	bl	800740e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800925e:	697b      	ldr	r3, [r7, #20]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	200051a0 	.word	0x200051a0
 800926c:	2000519c 	.word	0x2000519c

08009270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	; 0x38
 8009274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009276:	e0ca      	b.n	800940e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da18      	bge.n	80092b0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	3304      	adds	r3, #4
 8009282:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10a      	bne.n	80092a0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	61fb      	str	r3, [r7, #28]
}
 800929c:	bf00      	nop
 800929e:	e7fe      	b.n	800929e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092a6:	6850      	ldr	r0, [r2, #4]
 80092a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092aa:	6892      	ldr	r2, [r2, #8]
 80092ac:	4611      	mov	r1, r2
 80092ae:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f2c0 80aa 	blt.w	800940c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	3304      	adds	r3, #4
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fe f8d9 	bl	8007480 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092ce:	463b      	mov	r3, r7
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff ff6b 	bl	80091ac <prvSampleTimeNow>
 80092d6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2b09      	cmp	r3, #9
 80092dc:	f200 8097 	bhi.w	800940e <prvProcessReceivedCommands+0x19e>
 80092e0:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <prvProcessReceivedCommands+0x78>)
 80092e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e6:	bf00      	nop
 80092e8:	08009311 	.word	0x08009311
 80092ec:	08009311 	.word	0x08009311
 80092f0:	08009311 	.word	0x08009311
 80092f4:	08009385 	.word	0x08009385
 80092f8:	08009399 	.word	0x08009399
 80092fc:	080093e3 	.word	0x080093e3
 8009300:	08009311 	.word	0x08009311
 8009304:	08009311 	.word	0x08009311
 8009308:	08009385 	.word	0x08009385
 800930c:	08009399 	.word	0x08009399
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009312:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	18d1      	adds	r1, r2, r3
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800932e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009330:	f7ff ff5c 	bl	80091ec <prvInsertTimerInActiveList>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d069      	beq.n	800940e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d05e      	beq.n	800940e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	441a      	add	r2, r3
 8009358:	2300      	movs	r3, #0
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	2300      	movs	r3, #0
 800935e:	2100      	movs	r1, #0
 8009360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009362:	f7ff fe05 	bl	8008f70 <xTimerGenericCommand>
 8009366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d14f      	bne.n	800940e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	61bb      	str	r3, [r7, #24]
}
 8009380:	bf00      	nop
 8009382:	e7fe      	b.n	8009382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009386:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	b2da      	uxtb	r2, r3
 8009390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009392:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009396:	e03a      	b.n	800940e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800939a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800939e:	f043 0301 	orr.w	r3, r3, #1
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ae:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10a      	bne.n	80093ce <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	617b      	str	r3, [r7, #20]
}
 80093ca:	bf00      	nop
 80093cc:	e7fe      	b.n	80093cc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	699a      	ldr	r2, [r3, #24]
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	18d1      	adds	r1, r2, r3
 80093d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093dc:	f7ff ff06 	bl	80091ec <prvInsertTimerInActiveList>
					break;
 80093e0:	e015      	b.n	800940e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093e8:	f003 0302 	and.w	r3, r3, #2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80093f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093f2:	f000 fbb5 	bl	8009b60 <vPortFree>
 80093f6:	e00a      	b.n	800940e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	b2da      	uxtb	r2, r3
 8009404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800940a:	e000      	b.n	800940e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800940c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800940e:	4b08      	ldr	r3, [pc, #32]	; (8009430 <prvProcessReceivedCommands+0x1c0>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	1d39      	adds	r1, r7, #4
 8009414:	2200      	movs	r2, #0
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fb9e 	bl	8007b58 <xQueueReceive>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	f47f af2a 	bne.w	8009278 <prvProcessReceivedCommands+0x8>
	}
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	3730      	adds	r7, #48	; 0x30
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	200051a4 	.word	0x200051a4

08009434 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b088      	sub	sp, #32
 8009438:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800943a:	e048      	b.n	80094ce <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800943c:	4b2d      	ldr	r3, [pc, #180]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009446:	4b2b      	ldr	r3, [pc, #172]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	3304      	adds	r3, #4
 8009454:	4618      	mov	r0, r3
 8009456:	f7fe f813 	bl	8007480 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d02e      	beq.n	80094ce <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	4413      	add	r3, r2
 8009478:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	429a      	cmp	r2, r3
 8009480:	d90e      	bls.n	80094a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800948e:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	3304      	adds	r3, #4
 8009496:	4619      	mov	r1, r3
 8009498:	4610      	mov	r0, r2
 800949a:	f7fd ffb8 	bl	800740e <vListInsert>
 800949e:	e016      	b.n	80094ce <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a0:	2300      	movs	r3, #0
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	2300      	movs	r3, #0
 80094a6:	693a      	ldr	r2, [r7, #16]
 80094a8:	2100      	movs	r1, #0
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f7ff fd60 	bl	8008f70 <xTimerGenericCommand>
 80094b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d10a      	bne.n	80094ce <prvSwitchTimerLists+0x9a>
	__asm volatile
 80094b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094bc:	f383 8811 	msr	BASEPRI, r3
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	603b      	str	r3, [r7, #0]
}
 80094ca:	bf00      	nop
 80094cc:	e7fe      	b.n	80094cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1b1      	bne.n	800943c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094d8:	4b06      	ldr	r3, [pc, #24]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094de:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <prvSwitchTimerLists+0xc4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a04      	ldr	r2, [pc, #16]	; (80094f4 <prvSwitchTimerLists+0xc0>)
 80094e4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094e6:	4a04      	ldr	r2, [pc, #16]	; (80094f8 <prvSwitchTimerLists+0xc4>)
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6013      	str	r3, [r2, #0]
}
 80094ec:	bf00      	nop
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	2000519c 	.word	0x2000519c
 80094f8:	200051a0 	.word	0x200051a0

080094fc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009502:	f000 f967 	bl	80097d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009506:	4b15      	ldr	r3, [pc, #84]	; (800955c <prvCheckForValidListAndQueue+0x60>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d120      	bne.n	8009550 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800950e:	4814      	ldr	r0, [pc, #80]	; (8009560 <prvCheckForValidListAndQueue+0x64>)
 8009510:	f7fd ff2c 	bl	800736c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009514:	4813      	ldr	r0, [pc, #76]	; (8009564 <prvCheckForValidListAndQueue+0x68>)
 8009516:	f7fd ff29 	bl	800736c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800951a:	4b13      	ldr	r3, [pc, #76]	; (8009568 <prvCheckForValidListAndQueue+0x6c>)
 800951c:	4a10      	ldr	r2, [pc, #64]	; (8009560 <prvCheckForValidListAndQueue+0x64>)
 800951e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009520:	4b12      	ldr	r3, [pc, #72]	; (800956c <prvCheckForValidListAndQueue+0x70>)
 8009522:	4a10      	ldr	r2, [pc, #64]	; (8009564 <prvCheckForValidListAndQueue+0x68>)
 8009524:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009526:	2300      	movs	r3, #0
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4b11      	ldr	r3, [pc, #68]	; (8009570 <prvCheckForValidListAndQueue+0x74>)
 800952c:	4a11      	ldr	r2, [pc, #68]	; (8009574 <prvCheckForValidListAndQueue+0x78>)
 800952e:	2110      	movs	r1, #16
 8009530:	200a      	movs	r0, #10
 8009532:	f7fe f837 	bl	80075a4 <xQueueGenericCreateStatic>
 8009536:	4603      	mov	r3, r0
 8009538:	4a08      	ldr	r2, [pc, #32]	; (800955c <prvCheckForValidListAndQueue+0x60>)
 800953a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800953c:	4b07      	ldr	r3, [pc, #28]	; (800955c <prvCheckForValidListAndQueue+0x60>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009544:	4b05      	ldr	r3, [pc, #20]	; (800955c <prvCheckForValidListAndQueue+0x60>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	490b      	ldr	r1, [pc, #44]	; (8009578 <prvCheckForValidListAndQueue+0x7c>)
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fd18 	bl	8007f80 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009550:	f000 f970 	bl	8009834 <vPortExitCritical>
}
 8009554:	bf00      	nop
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	200051a4 	.word	0x200051a4
 8009560:	20005174 	.word	0x20005174
 8009564:	20005188 	.word	0x20005188
 8009568:	2000519c 	.word	0x2000519c
 800956c:	200051a0 	.word	0x200051a0
 8009570:	20005250 	.word	0x20005250
 8009574:	200051b0 	.word	0x200051b0
 8009578:	0800acec 	.word	0x0800acec

0800957c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800957c:	b480      	push	{r7}
 800957e:	b085      	sub	sp, #20
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	3b04      	subs	r3, #4
 800958c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3b04      	subs	r3, #4
 800959a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	f023 0201 	bic.w	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3b04      	subs	r3, #4
 80095aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095ac:	4a0c      	ldr	r2, [pc, #48]	; (80095e0 <pxPortInitialiseStack+0x64>)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3b14      	subs	r3, #20
 80095b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3b04      	subs	r3, #4
 80095c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f06f 0202 	mvn.w	r2, #2
 80095ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3b20      	subs	r3, #32
 80095d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80095d2:	68fb      	ldr	r3, [r7, #12]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3714      	adds	r7, #20
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr
 80095e0:	080095e5 	.word	0x080095e5

080095e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80095ee:	4b12      	ldr	r3, [pc, #72]	; (8009638 <prvTaskExitError+0x54>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f6:	d00a      	beq.n	800960e <prvTaskExitError+0x2a>
	__asm volatile
 80095f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fc:	f383 8811 	msr	BASEPRI, r3
 8009600:	f3bf 8f6f 	isb	sy
 8009604:	f3bf 8f4f 	dsb	sy
 8009608:	60fb      	str	r3, [r7, #12]
}
 800960a:	bf00      	nop
 800960c:	e7fe      	b.n	800960c <prvTaskExitError+0x28>
	__asm volatile
 800960e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009612:	f383 8811 	msr	BASEPRI, r3
 8009616:	f3bf 8f6f 	isb	sy
 800961a:	f3bf 8f4f 	dsb	sy
 800961e:	60bb      	str	r3, [r7, #8]
}
 8009620:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009622:	bf00      	nop
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0fc      	beq.n	8009624 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800962a:	bf00      	nop
 800962c:	bf00      	nop
 800962e:	3714      	adds	r7, #20
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr
 8009638:	2000004c 	.word	0x2000004c
 800963c:	00000000 	.word	0x00000000

08009640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009640:	4b07      	ldr	r3, [pc, #28]	; (8009660 <pxCurrentTCBConst2>)
 8009642:	6819      	ldr	r1, [r3, #0]
 8009644:	6808      	ldr	r0, [r1, #0]
 8009646:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800964a:	f380 8809 	msr	PSP, r0
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f04f 0000 	mov.w	r0, #0
 8009656:	f380 8811 	msr	BASEPRI, r0
 800965a:	4770      	bx	lr
 800965c:	f3af 8000 	nop.w

08009660 <pxCurrentTCBConst2>:
 8009660:	20004c74 	.word	0x20004c74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009664:	bf00      	nop
 8009666:	bf00      	nop

08009668 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009668:	4808      	ldr	r0, [pc, #32]	; (800968c <prvPortStartFirstTask+0x24>)
 800966a:	6800      	ldr	r0, [r0, #0]
 800966c:	6800      	ldr	r0, [r0, #0]
 800966e:	f380 8808 	msr	MSP, r0
 8009672:	f04f 0000 	mov.w	r0, #0
 8009676:	f380 8814 	msr	CONTROL, r0
 800967a:	b662      	cpsie	i
 800967c:	b661      	cpsie	f
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	df00      	svc	0
 8009688:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800968a:	bf00      	nop
 800968c:	e000ed08 	.word	0xe000ed08

08009690 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b086      	sub	sp, #24
 8009694:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009696:	4b46      	ldr	r3, [pc, #280]	; (80097b0 <xPortStartScheduler+0x120>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a46      	ldr	r2, [pc, #280]	; (80097b4 <xPortStartScheduler+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d10a      	bne.n	80096b6 <xPortStartScheduler+0x26>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	613b      	str	r3, [r7, #16]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80096b6:	4b3e      	ldr	r3, [pc, #248]	; (80097b0 <xPortStartScheduler+0x120>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a3f      	ldr	r2, [pc, #252]	; (80097b8 <xPortStartScheduler+0x128>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d10a      	bne.n	80096d6 <xPortStartScheduler+0x46>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	60fb      	str	r3, [r7, #12]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80096d6:	4b39      	ldr	r3, [pc, #228]	; (80097bc <xPortStartScheduler+0x12c>)
 80096d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	22ff      	movs	r2, #255	; 0xff
 80096e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	4b31      	ldr	r3, [pc, #196]	; (80097c0 <xPortStartScheduler+0x130>)
 80096fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80096fe:	4b31      	ldr	r3, [pc, #196]	; (80097c4 <xPortStartScheduler+0x134>)
 8009700:	2207      	movs	r2, #7
 8009702:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009704:	e009      	b.n	800971a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009706:	4b2f      	ldr	r3, [pc, #188]	; (80097c4 <xPortStartScheduler+0x134>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3b01      	subs	r3, #1
 800970c:	4a2d      	ldr	r2, [pc, #180]	; (80097c4 <xPortStartScheduler+0x134>)
 800970e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	b2db      	uxtb	r3, r3
 8009714:	005b      	lsls	r3, r3, #1
 8009716:	b2db      	uxtb	r3, r3
 8009718:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800971a:	78fb      	ldrb	r3, [r7, #3]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009722:	2b80      	cmp	r3, #128	; 0x80
 8009724:	d0ef      	beq.n	8009706 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009726:	4b27      	ldr	r3, [pc, #156]	; (80097c4 <xPortStartScheduler+0x134>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f1c3 0307 	rsb	r3, r3, #7
 800972e:	2b04      	cmp	r3, #4
 8009730:	d00a      	beq.n	8009748 <xPortStartScheduler+0xb8>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	60bb      	str	r3, [r7, #8]
}
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009748:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <xPortStartScheduler+0x134>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	021b      	lsls	r3, r3, #8
 800974e:	4a1d      	ldr	r2, [pc, #116]	; (80097c4 <xPortStartScheduler+0x134>)
 8009750:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009752:	4b1c      	ldr	r3, [pc, #112]	; (80097c4 <xPortStartScheduler+0x134>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800975a:	4a1a      	ldr	r2, [pc, #104]	; (80097c4 <xPortStartScheduler+0x134>)
 800975c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	b2da      	uxtb	r2, r3
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009766:	4b18      	ldr	r3, [pc, #96]	; (80097c8 <xPortStartScheduler+0x138>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a17      	ldr	r2, [pc, #92]	; (80097c8 <xPortStartScheduler+0x138>)
 800976c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <xPortStartScheduler+0x138>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a14      	ldr	r2, [pc, #80]	; (80097c8 <xPortStartScheduler+0x138>)
 8009778:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800977c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800977e:	f000 f8dd 	bl	800993c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009782:	4b12      	ldr	r3, [pc, #72]	; (80097cc <xPortStartScheduler+0x13c>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009788:	f000 f8fc 	bl	8009984 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800978c:	4b10      	ldr	r3, [pc, #64]	; (80097d0 <xPortStartScheduler+0x140>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a0f      	ldr	r2, [pc, #60]	; (80097d0 <xPortStartScheduler+0x140>)
 8009792:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009796:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009798:	f7ff ff66 	bl	8009668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800979c:	f7ff f84a 	bl	8008834 <vTaskSwitchContext>
	prvTaskExitError();
 80097a0:	f7ff ff20 	bl	80095e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	e000ed00 	.word	0xe000ed00
 80097b4:	410fc271 	.word	0x410fc271
 80097b8:	410fc270 	.word	0x410fc270
 80097bc:	e000e400 	.word	0xe000e400
 80097c0:	200052a0 	.word	0x200052a0
 80097c4:	200052a4 	.word	0x200052a4
 80097c8:	e000ed20 	.word	0xe000ed20
 80097cc:	2000004c 	.word	0x2000004c
 80097d0:	e000ef34 	.word	0xe000ef34

080097d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80097d4:	b480      	push	{r7}
 80097d6:	b083      	sub	sp, #12
 80097d8:	af00      	add	r7, sp, #0
	__asm volatile
 80097da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097de:	f383 8811 	msr	BASEPRI, r3
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	607b      	str	r3, [r7, #4]
}
 80097ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80097ee:	4b0f      	ldr	r3, [pc, #60]	; (800982c <vPortEnterCritical+0x58>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	4a0d      	ldr	r2, [pc, #52]	; (800982c <vPortEnterCritical+0x58>)
 80097f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80097f8:	4b0c      	ldr	r3, [pc, #48]	; (800982c <vPortEnterCritical+0x58>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d10f      	bne.n	8009820 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009800:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <vPortEnterCritical+0x5c>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	b2db      	uxtb	r3, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	d00a      	beq.n	8009820 <vPortEnterCritical+0x4c>
	__asm volatile
 800980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980e:	f383 8811 	msr	BASEPRI, r3
 8009812:	f3bf 8f6f 	isb	sy
 8009816:	f3bf 8f4f 	dsb	sy
 800981a:	603b      	str	r3, [r7, #0]
}
 800981c:	bf00      	nop
 800981e:	e7fe      	b.n	800981e <vPortEnterCritical+0x4a>
	}
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	2000004c 	.word	0x2000004c
 8009830:	e000ed04 	.word	0xe000ed04

08009834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800983a:	4b12      	ldr	r3, [pc, #72]	; (8009884 <vPortExitCritical+0x50>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10a      	bne.n	8009858 <vPortExitCritical+0x24>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	607b      	str	r3, [r7, #4]
}
 8009854:	bf00      	nop
 8009856:	e7fe      	b.n	8009856 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009858:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <vPortExitCritical+0x50>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3b01      	subs	r3, #1
 800985e:	4a09      	ldr	r2, [pc, #36]	; (8009884 <vPortExitCritical+0x50>)
 8009860:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <vPortExitCritical+0x50>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d105      	bne.n	8009876 <vPortExitCritical+0x42>
 800986a:	2300      	movs	r3, #0
 800986c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	f383 8811 	msr	BASEPRI, r3
}
 8009874:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	2000004c 	.word	0x2000004c
	...

08009890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009890:	f3ef 8009 	mrs	r0, PSP
 8009894:	f3bf 8f6f 	isb	sy
 8009898:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <pxCurrentTCBConst>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	f01e 0f10 	tst.w	lr, #16
 80098a0:	bf08      	it	eq
 80098a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098aa:	6010      	str	r0, [r2, #0]
 80098ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80098b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80098b4:	f380 8811 	msr	BASEPRI, r0
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f7fe ffb8 	bl	8008834 <vTaskSwitchContext>
 80098c4:	f04f 0000 	mov.w	r0, #0
 80098c8:	f380 8811 	msr	BASEPRI, r0
 80098cc:	bc09      	pop	{r0, r3}
 80098ce:	6819      	ldr	r1, [r3, #0]
 80098d0:	6808      	ldr	r0, [r1, #0]
 80098d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d6:	f01e 0f10 	tst.w	lr, #16
 80098da:	bf08      	it	eq
 80098dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80098e0:	f380 8809 	msr	PSP, r0
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4770      	bx	lr
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w

080098f0 <pxCurrentTCBConst>:
 80098f0:	20004c74 	.word	0x20004c74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80098f4:	bf00      	nop
 80098f6:	bf00      	nop

080098f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	607b      	str	r3, [r7, #4]
}
 8009910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009912:	f7fe fed5 	bl	80086c0 <xTaskIncrementTick>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800991c:	4b06      	ldr	r3, [pc, #24]	; (8009938 <xPortSysTickHandler+0x40>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	2300      	movs	r3, #0
 8009926:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f383 8811 	msr	BASEPRI, r3
}
 800992e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	e000ed04 	.word	0xe000ed04

0800993c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800993c:	b480      	push	{r7}
 800993e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009940:	4b0b      	ldr	r3, [pc, #44]	; (8009970 <vPortSetupTimerInterrupt+0x34>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009946:	4b0b      	ldr	r3, [pc, #44]	; (8009974 <vPortSetupTimerInterrupt+0x38>)
 8009948:	2200      	movs	r2, #0
 800994a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800994c:	4b0a      	ldr	r3, [pc, #40]	; (8009978 <vPortSetupTimerInterrupt+0x3c>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a0a      	ldr	r2, [pc, #40]	; (800997c <vPortSetupTimerInterrupt+0x40>)
 8009952:	fba2 2303 	umull	r2, r3, r2, r3
 8009956:	099b      	lsrs	r3, r3, #6
 8009958:	4a09      	ldr	r2, [pc, #36]	; (8009980 <vPortSetupTimerInterrupt+0x44>)
 800995a:	3b01      	subs	r3, #1
 800995c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800995e:	4b04      	ldr	r3, [pc, #16]	; (8009970 <vPortSetupTimerInterrupt+0x34>)
 8009960:	2207      	movs	r2, #7
 8009962:	601a      	str	r2, [r3, #0]
}
 8009964:	bf00      	nop
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	e000e010 	.word	0xe000e010
 8009974:	e000e018 	.word	0xe000e018
 8009978:	20000030 	.word	0x20000030
 800997c:	10624dd3 	.word	0x10624dd3
 8009980:	e000e014 	.word	0xe000e014

08009984 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009984:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009994 <vPortEnableVFP+0x10>
 8009988:	6801      	ldr	r1, [r0, #0]
 800998a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800998e:	6001      	str	r1, [r0, #0]
 8009990:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009992:	bf00      	nop
 8009994:	e000ed88 	.word	0xe000ed88

08009998 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b0f      	cmp	r3, #15
 80099a8:	d914      	bls.n	80099d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099aa:	4a17      	ldr	r2, [pc, #92]	; (8009a08 <vPortValidateInterruptPriority+0x70>)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	4413      	add	r3, r2
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80099b4:	4b15      	ldr	r3, [pc, #84]	; (8009a0c <vPortValidateInterruptPriority+0x74>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	7afa      	ldrb	r2, [r7, #11]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d20a      	bcs.n	80099d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80099be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c2:	f383 8811 	msr	BASEPRI, r3
 80099c6:	f3bf 8f6f 	isb	sy
 80099ca:	f3bf 8f4f 	dsb	sy
 80099ce:	607b      	str	r3, [r7, #4]
}
 80099d0:	bf00      	nop
 80099d2:	e7fe      	b.n	80099d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80099d4:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <vPortValidateInterruptPriority+0x78>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80099dc:	4b0d      	ldr	r3, [pc, #52]	; (8009a14 <vPortValidateInterruptPriority+0x7c>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d90a      	bls.n	80099fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80099e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	603b      	str	r3, [r7, #0]
}
 80099f6:	bf00      	nop
 80099f8:	e7fe      	b.n	80099f8 <vPortValidateInterruptPriority+0x60>
	}
 80099fa:	bf00      	nop
 80099fc:	3714      	adds	r7, #20
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	e000e3f0 	.word	0xe000e3f0
 8009a0c:	200052a0 	.word	0x200052a0
 8009a10:	e000ed0c 	.word	0xe000ed0c
 8009a14:	200052a4 	.word	0x200052a4

08009a18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8009a24:	4b48      	ldr	r3, [pc, #288]	; (8009b48 <pvPortMalloc+0x130>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d10a      	bne.n	8009a42 <pvPortMalloc+0x2a>
	__asm volatile
 8009a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a30:	f383 8811 	msr	BASEPRI, r3
 8009a34:	f3bf 8f6f 	isb	sy
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	60fb      	str	r3, [r7, #12]
}
 8009a3e:	bf00      	nop
 8009a40:	e7fe      	b.n	8009a40 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8009a42:	f7fe fd81 	bl	8008548 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a46:	4b41      	ldr	r3, [pc, #260]	; (8009b4c <pvPortMalloc+0x134>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d172      	bne.n	8009b38 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00d      	beq.n	8009a74 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8009a58:	2208      	movs	r2, #8
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d004      	beq.n	8009a74 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f023 0307 	bic.w	r3, r3, #7
 8009a70:	3308      	adds	r3, #8
 8009a72:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d05e      	beq.n	8009b38 <pvPortMalloc+0x120>
 8009a7a:	4b35      	ldr	r3, [pc, #212]	; (8009b50 <pvPortMalloc+0x138>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d859      	bhi.n	8009b38 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a84:	4b33      	ldr	r3, [pc, #204]	; (8009b54 <pvPortMalloc+0x13c>)
 8009a86:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8009a88:	4b32      	ldr	r3, [pc, #200]	; (8009b54 <pvPortMalloc+0x13c>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a8e:	e004      	b.n	8009a9a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8009a90:	69fb      	ldr	r3, [r7, #28]
 8009a92:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a9a:	69fb      	ldr	r3, [r7, #28]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	687a      	ldr	r2, [r7, #4]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d903      	bls.n	8009aac <pvPortMalloc+0x94>
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f1      	bne.n	8009a90 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009aac:	4b26      	ldr	r3, [pc, #152]	; (8009b48 <pvPortMalloc+0x130>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	69fa      	ldr	r2, [r7, #28]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d040      	beq.n	8009b38 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2208      	movs	r2, #8
 8009abc:	4413      	add	r3, r2
 8009abe:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	2308      	movs	r3, #8
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d90f      	bls.n	8009af8 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ad8:	69fa      	ldr	r2, [r7, #28]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4413      	add	r3, r2
 8009ade:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8009af2:	6938      	ldr	r0, [r7, #16]
 8009af4:	f000 f8a2 	bl	8009c3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009af8:	4b15      	ldr	r3, [pc, #84]	; (8009b50 <pvPortMalloc+0x138>)
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <pvPortMalloc+0x138>)
 8009b04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b06:	4b12      	ldr	r3, [pc, #72]	; (8009b50 <pvPortMalloc+0x138>)
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <pvPortMalloc+0x140>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d203      	bcs.n	8009b1a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b12:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <pvPortMalloc+0x138>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a10      	ldr	r2, [pc, #64]	; (8009b58 <pvPortMalloc+0x140>)
 8009b18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	4b0b      	ldr	r3, [pc, #44]	; (8009b4c <pvPortMalloc+0x134>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	431a      	orrs	r2, r3
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <pvPortMalloc+0x144>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	4a09      	ldr	r2, [pc, #36]	; (8009b5c <pvPortMalloc+0x144>)
 8009b36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b38:	f7fe fd14 	bl	8008564 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8009b3c:	697b      	ldr	r3, [r7, #20]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3720      	adds	r7, #32
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200052b0 	.word	0x200052b0
 8009b4c:	200052c4 	.word	0x200052c4
 8009b50:	200052b4 	.word	0x200052b4
 8009b54:	200052a8 	.word	0x200052a8
 8009b58:	200052b8 	.word	0x200052b8
 8009b5c:	200052bc 	.word	0x200052bc

08009b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d04d      	beq.n	8009c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b72:	2308      	movs	r3, #8
 8009b74:	425b      	negs	r3, r3
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4413      	add	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	4b24      	ldr	r3, [pc, #144]	; (8009c18 <vPortFree+0xb8>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <vPortFree+0x44>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	60fb      	str	r3, [r7, #12]
}
 8009ba0:	bf00      	nop
 8009ba2:	e7fe      	b.n	8009ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ba4:	693b      	ldr	r3, [r7, #16]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00a      	beq.n	8009bc2 <vPortFree+0x62>
	__asm volatile
 8009bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb0:	f383 8811 	msr	BASEPRI, r3
 8009bb4:	f3bf 8f6f 	isb	sy
 8009bb8:	f3bf 8f4f 	dsb	sy
 8009bbc:	60bb      	str	r3, [r7, #8]
}
 8009bbe:	bf00      	nop
 8009bc0:	e7fe      	b.n	8009bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <vPortFree+0xb8>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4013      	ands	r3, r2
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d01e      	beq.n	8009c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d11a      	bne.n	8009c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	; (8009c18 <vPortFree+0xb8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	43db      	mvns	r3, r3
 8009be2:	401a      	ands	r2, r3
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009be8:	f7fe fcae 	bl	8008548 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <vPortFree+0xbc>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	4a09      	ldr	r2, [pc, #36]	; (8009c1c <vPortFree+0xbc>)
 8009bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009bfa:	6938      	ldr	r0, [r7, #16]
 8009bfc:	f000 f81e 	bl	8009c3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c00:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <vPortFree+0xc0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	4a06      	ldr	r2, [pc, #24]	; (8009c20 <vPortFree+0xc0>)
 8009c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009c0a:	f7fe fcab 	bl	8008564 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c0e:	bf00      	nop
 8009c10:	3718      	adds	r7, #24
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	200052c4 	.word	0x200052c4
 8009c1c:	200052b4 	.word	0x200052b4
 8009c20:	200052c0 	.word	0x200052c0

08009c24 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8009c28:	4b03      	ldr	r3, [pc, #12]	; (8009c38 <xPortGetFreeHeapSize+0x14>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	200052b4 	.word	0x200052b4

08009c3c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b085      	sub	sp, #20
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c44:	4b28      	ldr	r3, [pc, #160]	; (8009ce8 <prvInsertBlockIntoFreeList+0xac>)
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e002      	b.n	8009c50 <prvInsertBlockIntoFreeList+0x14>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	687a      	ldr	r2, [r7, #4]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d8f7      	bhi.n	8009c4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d108      	bne.n	8009c7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	441a      	add	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	441a      	add	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d118      	bne.n	8009cc4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4b15      	ldr	r3, [pc, #84]	; (8009cec <prvInsertBlockIntoFreeList+0xb0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d00d      	beq.n	8009cba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	441a      	add	r2, r3
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	e008      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cba:	4b0c      	ldr	r3, [pc, #48]	; (8009cec <prvInsertBlockIntoFreeList+0xb0>)
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	e003      	b.n	8009ccc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d002      	beq.n	8009cda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cda:	bf00      	nop
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	200052a8 	.word	0x200052a8
 8009cec:	200052b0 	.word	0x200052b0

08009cf0 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b08f      	sub	sp, #60	; 0x3c
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8009d04:	4b5a      	ldr	r3, [pc, #360]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <vPortDefineHeapRegions+0x32>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	617b      	str	r3, [r7, #20]
}
 8009d1e:	bf00      	nop
 8009d20:	e7fe      	b.n	8009d20 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8009d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d24:	00db      	lsls	r3, r3, #3
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 8009d2c:	e07d      	b.n	8009e2a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d00e      	beq.n	8009d62 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d46:	3307      	adds	r3, #7
 8009d48:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d4c:	f023 0307 	bic.w	r3, r3, #7
 8009d50:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8009d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d5e:	4413      	add	r3, r2
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8009d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d64:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8009d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d106      	bne.n	8009d7a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	4a41      	ldr	r2, [pc, #260]	; (8009e74 <vPortDefineHeapRegions+0x184>)
 8009d70:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 8009d72:	4b40      	ldr	r3, [pc, #256]	; (8009e74 <vPortDefineHeapRegions+0x184>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	605a      	str	r2, [r3, #4]
 8009d78:	e01f      	b.n	8009dba <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 8009d7a:	4b3d      	ldr	r3, [pc, #244]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	613b      	str	r3, [r7, #16]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8009d98:	4b35      	ldr	r3, [pc, #212]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d80a      	bhi.n	8009dba <vPortDefineHeapRegions+0xca>
	__asm volatile
 8009da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	60fb      	str	r3, [r7, #12]
}
 8009db6:	bf00      	nop
 8009db8:	e7fe      	b.n	8009db8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8009dba:	4b2d      	ldr	r3, [pc, #180]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8009dc0:	69fa      	ldr	r2, [r7, #28]
 8009dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dc4:	4413      	add	r3, r2
 8009dc6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8009dc8:	2208      	movs	r2, #8
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	1a9b      	subs	r3, r3, r2
 8009dce:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	4a25      	ldr	r2, [pc, #148]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009ddc:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8009dde:	4b24      	ldr	r3, [pc, #144]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2200      	movs	r2, #0
 8009de4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8009de6:	4b22      	ldr	r3, [pc, #136]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009df6:	1ad2      	subs	r2, r2, r3
 8009df8:	6a3b      	ldr	r3, [r7, #32]
 8009dfa:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8009dfc:	4b1c      	ldr	r3, [pc, #112]	; (8009e70 <vPortDefineHeapRegions+0x180>)
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8009e0a:	69bb      	ldr	r3, [r7, #24]
 8009e0c:	6a3a      	ldr	r2, [r7, #32]
 8009e0e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8009e10:	6a3b      	ldr	r3, [r7, #32]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	4413      	add	r3, r2
 8009e18:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	00db      	lsls	r3, r3, #3
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	4413      	add	r3, r2
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f47f af7d 	bne.w	8009d2e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8009e34:	4a10      	ldr	r2, [pc, #64]	; (8009e78 <vPortDefineHeapRegions+0x188>)
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 8009e3a:	4a10      	ldr	r2, [pc, #64]	; (8009e7c <vPortDefineHeapRegions+0x18c>)
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8009e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	f383 8811 	msr	BASEPRI, r3
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f3bf 8f4f 	dsb	sy
 8009e56:	60bb      	str	r3, [r7, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	e7fe      	b.n	8009e5a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e5c:	4b08      	ldr	r3, [pc, #32]	; (8009e80 <vPortDefineHeapRegions+0x190>)
 8009e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009e62:	601a      	str	r2, [r3, #0]
}
 8009e64:	bf00      	nop
 8009e66:	373c      	adds	r7, #60	; 0x3c
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	200052b0 	.word	0x200052b0
 8009e74:	200052a8 	.word	0x200052a8
 8009e78:	200052b8 	.word	0x200052b8
 8009e7c:	200052b4 	.word	0x200052b4
 8009e80:	200052c4 	.word	0x200052c4

08009e84 <atol>:
 8009e84:	220a      	movs	r2, #10
 8009e86:	2100      	movs	r1, #0
 8009e88:	f000 bafa 	b.w	800a480 <strtol>

08009e8c <calloc>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <calloc+0xc>)
 8009e8e:	460a      	mov	r2, r1
 8009e90:	4601      	mov	r1, r0
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	f000 b8fc 	b.w	800a090 <_calloc_r>
 8009e98:	20000050 	.word	0x20000050

08009e9c <__errno>:
 8009e9c:	4b01      	ldr	r3, [pc, #4]	; (8009ea4 <__errno+0x8>)
 8009e9e:	6818      	ldr	r0, [r3, #0]
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000050 	.word	0x20000050

08009ea8 <gmtime_r>:
 8009ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eac:	e9d0 6700 	ldrd	r6, r7, [r0]
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	4a51      	ldr	r2, [pc, #324]	; (8009ff8 <gmtime_r+0x150>)
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	4639      	mov	r1, r7
 8009eba:	f7f6 fce7 	bl	800088c <__aeabi_ldivmod>
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	4a4d      	ldr	r2, [pc, #308]	; (8009ff8 <gmtime_r+0x150>)
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	f7f6 fce0 	bl	800088c <__aeabi_ldivmod>
 8009ecc:	2a00      	cmp	r2, #0
 8009ece:	bfbc      	itt	lt
 8009ed0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8009ed4:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8009ed8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009edc:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8009ee0:	fbb2 f3f1 	udiv	r3, r2, r1
 8009ee4:	fb01 2213 	mls	r2, r1, r3, r2
 8009ee8:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8009eec:	bfac      	ite	ge
 8009eee:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8009ef2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	fbb2 f3f1 	udiv	r3, r2, r1
 8009efc:	fb01 2213 	mls	r2, r1, r3, r2
 8009f00:	6063      	str	r3, [r4, #4]
 8009f02:	6022      	str	r2, [r4, #0]
 8009f04:	1cc3      	adds	r3, r0, #3
 8009f06:	2207      	movs	r2, #7
 8009f08:	fb93 f2f2 	sdiv	r2, r3, r2
 8009f0c:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	bf48      	it	mi
 8009f14:	3307      	addmi	r3, #7
 8009f16:	2800      	cmp	r0, #0
 8009f18:	61a3      	str	r3, [r4, #24]
 8009f1a:	bfb8      	it	lt
 8009f1c:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8009f20:	4936      	ldr	r1, [pc, #216]	; (8009ffc <gmtime_r+0x154>)
 8009f22:	bfae      	itee	ge
 8009f24:	fb90 f1f1 	sdivge	r1, r0, r1
 8009f28:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8009f2c:	fb93 f1f1 	sdivlt	r1, r3, r1
 8009f30:	4b33      	ldr	r3, [pc, #204]	; (800a000 <gmtime_r+0x158>)
 8009f32:	fb03 0001 	mla	r0, r3, r1, r0
 8009f36:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8009f3a:	fbb0 f2f2 	udiv	r2, r0, r2
 8009f3e:	4402      	add	r2, r0
 8009f40:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8009f44:	fbb0 f3fc 	udiv	r3, r0, ip
 8009f48:	1ad2      	subs	r2, r2, r3
 8009f4a:	f240 176d 	movw	r7, #365	; 0x16d
 8009f4e:	4b2d      	ldr	r3, [pc, #180]	; (800a004 <gmtime_r+0x15c>)
 8009f50:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f54:	2664      	movs	r6, #100	; 0x64
 8009f56:	1ad3      	subs	r3, r2, r3
 8009f58:	fbb3 f5f7 	udiv	r5, r3, r7
 8009f5c:	fbb3 f3fc 	udiv	r3, r3, ip
 8009f60:	fbb5 f2f6 	udiv	r2, r5, r6
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	4403      	add	r3, r0
 8009f68:	fb07 3315 	mls	r3, r7, r5, r3
 8009f6c:	2099      	movs	r0, #153	; 0x99
 8009f6e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8009f72:	f10c 0c02 	add.w	ip, ip, #2
 8009f76:	f103 0e01 	add.w	lr, r3, #1
 8009f7a:	fbbc f7f0 	udiv	r7, ip, r0
 8009f7e:	4378      	muls	r0, r7
 8009f80:	3002      	adds	r0, #2
 8009f82:	f04f 0805 	mov.w	r8, #5
 8009f86:	fbb0 f0f8 	udiv	r0, r0, r8
 8009f8a:	ebae 0000 	sub.w	r0, lr, r0
 8009f8e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8009f92:	45f4      	cmp	ip, lr
 8009f94:	bf94      	ite	ls
 8009f96:	f04f 0c02 	movls.w	ip, #2
 8009f9a:	f06f 0c09 	mvnhi.w	ip, #9
 8009f9e:	4467      	add	r7, ip
 8009fa0:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8009fa4:	fb0c 5101 	mla	r1, ip, r1, r5
 8009fa8:	2f01      	cmp	r7, #1
 8009faa:	bf98      	it	ls
 8009fac:	3101      	addls	r1, #1
 8009fae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8009fb2:	d30c      	bcc.n	8009fce <gmtime_r+0x126>
 8009fb4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009fb8:	61e3      	str	r3, [r4, #28]
 8009fba:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60e0      	str	r0, [r4, #12]
 8009fc2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8009fc6:	6223      	str	r3, [r4, #32]
 8009fc8:	4620      	mov	r0, r4
 8009fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fce:	f015 0f03 	tst.w	r5, #3
 8009fd2:	d102      	bne.n	8009fda <gmtime_r+0x132>
 8009fd4:	fb06 5212 	mls	r2, r6, r2, r5
 8009fd8:	b95a      	cbnz	r2, 8009ff2 <gmtime_r+0x14a>
 8009fda:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8009fde:	fbb5 f2f6 	udiv	r2, r5, r6
 8009fe2:	fb06 5212 	mls	r2, r6, r2, r5
 8009fe6:	fab2 f282 	clz	r2, r2
 8009fea:	0952      	lsrs	r2, r2, #5
 8009fec:	333b      	adds	r3, #59	; 0x3b
 8009fee:	4413      	add	r3, r2
 8009ff0:	e7e2      	b.n	8009fb8 <gmtime_r+0x110>
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	e7fa      	b.n	8009fec <gmtime_r+0x144>
 8009ff6:	bf00      	nop
 8009ff8:	00015180 	.word	0x00015180
 8009ffc:	00023ab1 	.word	0x00023ab1
 800a000:	fffdc54f 	.word	0xfffdc54f
 800a004:	00023ab0 	.word	0x00023ab0

0800a008 <__libc_init_array>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	4d0d      	ldr	r5, [pc, #52]	; (800a040 <__libc_init_array+0x38>)
 800a00c:	4c0d      	ldr	r4, [pc, #52]	; (800a044 <__libc_init_array+0x3c>)
 800a00e:	1b64      	subs	r4, r4, r5
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	2600      	movs	r6, #0
 800a014:	42a6      	cmp	r6, r4
 800a016:	d109      	bne.n	800a02c <__libc_init_array+0x24>
 800a018:	4d0b      	ldr	r5, [pc, #44]	; (800a048 <__libc_init_array+0x40>)
 800a01a:	4c0c      	ldr	r4, [pc, #48]	; (800a04c <__libc_init_array+0x44>)
 800a01c:	f000 fdb8 	bl	800ab90 <_init>
 800a020:	1b64      	subs	r4, r4, r5
 800a022:	10a4      	asrs	r4, r4, #2
 800a024:	2600      	movs	r6, #0
 800a026:	42a6      	cmp	r6, r4
 800a028:	d105      	bne.n	800a036 <__libc_init_array+0x2e>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a030:	4798      	blx	r3
 800a032:	3601      	adds	r6, #1
 800a034:	e7ee      	b.n	800a014 <__libc_init_array+0xc>
 800a036:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03a:	4798      	blx	r3
 800a03c:	3601      	adds	r6, #1
 800a03e:	e7f2      	b.n	800a026 <__libc_init_array+0x1e>
 800a040:	0800cfa8 	.word	0x0800cfa8
 800a044:	0800cfa8 	.word	0x0800cfa8
 800a048:	0800cfa8 	.word	0x0800cfa8
 800a04c:	0800cfac 	.word	0x0800cfac

0800a050 <__retarget_lock_acquire_recursive>:
 800a050:	4770      	bx	lr

0800a052 <__retarget_lock_release_recursive>:
 800a052:	4770      	bx	lr

0800a054 <free>:
 800a054:	4b02      	ldr	r3, [pc, #8]	; (800a060 <free+0xc>)
 800a056:	4601      	mov	r1, r0
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	f000 b829 	b.w	800a0b0 <_free_r>
 800a05e:	bf00      	nop
 800a060:	20000050 	.word	0x20000050

0800a064 <memcpy>:
 800a064:	440a      	add	r2, r1
 800a066:	4291      	cmp	r1, r2
 800a068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a06c:	d100      	bne.n	800a070 <memcpy+0xc>
 800a06e:	4770      	bx	lr
 800a070:	b510      	push	{r4, lr}
 800a072:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a076:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a07a:	4291      	cmp	r1, r2
 800a07c:	d1f9      	bne.n	800a072 <memcpy+0xe>
 800a07e:	bd10      	pop	{r4, pc}

0800a080 <memset>:
 800a080:	4402      	add	r2, r0
 800a082:	4603      	mov	r3, r0
 800a084:	4293      	cmp	r3, r2
 800a086:	d100      	bne.n	800a08a <memset+0xa>
 800a088:	4770      	bx	lr
 800a08a:	f803 1b01 	strb.w	r1, [r3], #1
 800a08e:	e7f9      	b.n	800a084 <memset+0x4>

0800a090 <_calloc_r>:
 800a090:	b513      	push	{r0, r1, r4, lr}
 800a092:	434a      	muls	r2, r1
 800a094:	4611      	mov	r1, r2
 800a096:	9201      	str	r2, [sp, #4]
 800a098:	f000 f85a 	bl	800a150 <_malloc_r>
 800a09c:	4604      	mov	r4, r0
 800a09e:	b118      	cbz	r0, 800a0a8 <_calloc_r+0x18>
 800a0a0:	9a01      	ldr	r2, [sp, #4]
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	f7ff ffec 	bl	800a080 <memset>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	b002      	add	sp, #8
 800a0ac:	bd10      	pop	{r4, pc}
	...

0800a0b0 <_free_r>:
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	d048      	beq.n	800a148 <_free_r+0x98>
 800a0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c2:	bfb8      	it	lt
 800a0c4:	18e4      	addlt	r4, r4, r3
 800a0c6:	f000 fa1f 	bl	800a508 <__malloc_lock>
 800a0ca:	4a20      	ldr	r2, [pc, #128]	; (800a14c <_free_r+0x9c>)
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	4615      	mov	r5, r2
 800a0d2:	b933      	cbnz	r3, 800a0e2 <_free_r+0x32>
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	6014      	str	r4, [r2, #0]
 800a0d8:	b003      	add	sp, #12
 800a0da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0de:	f000 ba19 	b.w	800a514 <__malloc_unlock>
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	d90b      	bls.n	800a0fe <_free_r+0x4e>
 800a0e6:	6821      	ldr	r1, [r4, #0]
 800a0e8:	1862      	adds	r2, r4, r1
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	bf04      	itt	eq
 800a0ee:	681a      	ldreq	r2, [r3, #0]
 800a0f0:	685b      	ldreq	r3, [r3, #4]
 800a0f2:	6063      	str	r3, [r4, #4]
 800a0f4:	bf04      	itt	eq
 800a0f6:	1852      	addeq	r2, r2, r1
 800a0f8:	6022      	streq	r2, [r4, #0]
 800a0fa:	602c      	str	r4, [r5, #0]
 800a0fc:	e7ec      	b.n	800a0d8 <_free_r+0x28>
 800a0fe:	461a      	mov	r2, r3
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	b10b      	cbz	r3, 800a108 <_free_r+0x58>
 800a104:	42a3      	cmp	r3, r4
 800a106:	d9fa      	bls.n	800a0fe <_free_r+0x4e>
 800a108:	6811      	ldr	r1, [r2, #0]
 800a10a:	1855      	adds	r5, r2, r1
 800a10c:	42a5      	cmp	r5, r4
 800a10e:	d10b      	bne.n	800a128 <_free_r+0x78>
 800a110:	6824      	ldr	r4, [r4, #0]
 800a112:	4421      	add	r1, r4
 800a114:	1854      	adds	r4, r2, r1
 800a116:	42a3      	cmp	r3, r4
 800a118:	6011      	str	r1, [r2, #0]
 800a11a:	d1dd      	bne.n	800a0d8 <_free_r+0x28>
 800a11c:	681c      	ldr	r4, [r3, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	6053      	str	r3, [r2, #4]
 800a122:	4421      	add	r1, r4
 800a124:	6011      	str	r1, [r2, #0]
 800a126:	e7d7      	b.n	800a0d8 <_free_r+0x28>
 800a128:	d902      	bls.n	800a130 <_free_r+0x80>
 800a12a:	230c      	movs	r3, #12
 800a12c:	6003      	str	r3, [r0, #0]
 800a12e:	e7d3      	b.n	800a0d8 <_free_r+0x28>
 800a130:	6825      	ldr	r5, [r4, #0]
 800a132:	1961      	adds	r1, r4, r5
 800a134:	428b      	cmp	r3, r1
 800a136:	bf04      	itt	eq
 800a138:	6819      	ldreq	r1, [r3, #0]
 800a13a:	685b      	ldreq	r3, [r3, #4]
 800a13c:	6063      	str	r3, [r4, #4]
 800a13e:	bf04      	itt	eq
 800a140:	1949      	addeq	r1, r1, r5
 800a142:	6021      	streq	r1, [r4, #0]
 800a144:	6054      	str	r4, [r2, #4]
 800a146:	e7c7      	b.n	800a0d8 <_free_r+0x28>
 800a148:	b003      	add	sp, #12
 800a14a:	bd30      	pop	{r4, r5, pc}
 800a14c:	200052c8 	.word	0x200052c8

0800a150 <_malloc_r>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	1ccd      	adds	r5, r1, #3
 800a154:	f025 0503 	bic.w	r5, r5, #3
 800a158:	3508      	adds	r5, #8
 800a15a:	2d0c      	cmp	r5, #12
 800a15c:	bf38      	it	cc
 800a15e:	250c      	movcc	r5, #12
 800a160:	2d00      	cmp	r5, #0
 800a162:	4606      	mov	r6, r0
 800a164:	db01      	blt.n	800a16a <_malloc_r+0x1a>
 800a166:	42a9      	cmp	r1, r5
 800a168:	d903      	bls.n	800a172 <_malloc_r+0x22>
 800a16a:	230c      	movs	r3, #12
 800a16c:	6033      	str	r3, [r6, #0]
 800a16e:	2000      	movs	r0, #0
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a172:	f000 f9c9 	bl	800a508 <__malloc_lock>
 800a176:	4921      	ldr	r1, [pc, #132]	; (800a1fc <_malloc_r+0xac>)
 800a178:	680a      	ldr	r2, [r1, #0]
 800a17a:	4614      	mov	r4, r2
 800a17c:	b99c      	cbnz	r4, 800a1a6 <_malloc_r+0x56>
 800a17e:	4f20      	ldr	r7, [pc, #128]	; (800a200 <_malloc_r+0xb0>)
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	b923      	cbnz	r3, 800a18e <_malloc_r+0x3e>
 800a184:	4621      	mov	r1, r4
 800a186:	4630      	mov	r0, r6
 800a188:	f000 f8a6 	bl	800a2d8 <_sbrk_r>
 800a18c:	6038      	str	r0, [r7, #0]
 800a18e:	4629      	mov	r1, r5
 800a190:	4630      	mov	r0, r6
 800a192:	f000 f8a1 	bl	800a2d8 <_sbrk_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d123      	bne.n	800a1e2 <_malloc_r+0x92>
 800a19a:	230c      	movs	r3, #12
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f000 f9b8 	bl	800a514 <__malloc_unlock>
 800a1a4:	e7e3      	b.n	800a16e <_malloc_r+0x1e>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	1b5b      	subs	r3, r3, r5
 800a1aa:	d417      	bmi.n	800a1dc <_malloc_r+0x8c>
 800a1ac:	2b0b      	cmp	r3, #11
 800a1ae:	d903      	bls.n	800a1b8 <_malloc_r+0x68>
 800a1b0:	6023      	str	r3, [r4, #0]
 800a1b2:	441c      	add	r4, r3
 800a1b4:	6025      	str	r5, [r4, #0]
 800a1b6:	e004      	b.n	800a1c2 <_malloc_r+0x72>
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	42a2      	cmp	r2, r4
 800a1bc:	bf0c      	ite	eq
 800a1be:	600b      	streq	r3, [r1, #0]
 800a1c0:	6053      	strne	r3, [r2, #4]
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f000 f9a6 	bl	800a514 <__malloc_unlock>
 800a1c8:	f104 000b 	add.w	r0, r4, #11
 800a1cc:	1d23      	adds	r3, r4, #4
 800a1ce:	f020 0007 	bic.w	r0, r0, #7
 800a1d2:	1ac2      	subs	r2, r0, r3
 800a1d4:	d0cc      	beq.n	800a170 <_malloc_r+0x20>
 800a1d6:	1a1b      	subs	r3, r3, r0
 800a1d8:	50a3      	str	r3, [r4, r2]
 800a1da:	e7c9      	b.n	800a170 <_malloc_r+0x20>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	6864      	ldr	r4, [r4, #4]
 800a1e0:	e7cc      	b.n	800a17c <_malloc_r+0x2c>
 800a1e2:	1cc4      	adds	r4, r0, #3
 800a1e4:	f024 0403 	bic.w	r4, r4, #3
 800a1e8:	42a0      	cmp	r0, r4
 800a1ea:	d0e3      	beq.n	800a1b4 <_malloc_r+0x64>
 800a1ec:	1a21      	subs	r1, r4, r0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	f000 f872 	bl	800a2d8 <_sbrk_r>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d1dd      	bne.n	800a1b4 <_malloc_r+0x64>
 800a1f8:	e7cf      	b.n	800a19a <_malloc_r+0x4a>
 800a1fa:	bf00      	nop
 800a1fc:	200052c8 	.word	0x200052c8
 800a200:	200052cc 	.word	0x200052cc

0800a204 <cleanup_glue>:
 800a204:	b538      	push	{r3, r4, r5, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	6809      	ldr	r1, [r1, #0]
 800a20a:	4605      	mov	r5, r0
 800a20c:	b109      	cbz	r1, 800a212 <cleanup_glue+0xe>
 800a20e:	f7ff fff9 	bl	800a204 <cleanup_glue>
 800a212:	4621      	mov	r1, r4
 800a214:	4628      	mov	r0, r5
 800a216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a21a:	f7ff bf49 	b.w	800a0b0 <_free_r>
	...

0800a220 <_reclaim_reent>:
 800a220:	4b2c      	ldr	r3, [pc, #176]	; (800a2d4 <_reclaim_reent+0xb4>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4283      	cmp	r3, r0
 800a226:	b570      	push	{r4, r5, r6, lr}
 800a228:	4604      	mov	r4, r0
 800a22a:	d051      	beq.n	800a2d0 <_reclaim_reent+0xb0>
 800a22c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a22e:	b143      	cbz	r3, 800a242 <_reclaim_reent+0x22>
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d14a      	bne.n	800a2cc <_reclaim_reent+0xac>
 800a236:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a238:	6819      	ldr	r1, [r3, #0]
 800a23a:	b111      	cbz	r1, 800a242 <_reclaim_reent+0x22>
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7ff ff37 	bl	800a0b0 <_free_r>
 800a242:	6961      	ldr	r1, [r4, #20]
 800a244:	b111      	cbz	r1, 800a24c <_reclaim_reent+0x2c>
 800a246:	4620      	mov	r0, r4
 800a248:	f7ff ff32 	bl	800a0b0 <_free_r>
 800a24c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a24e:	b111      	cbz	r1, 800a256 <_reclaim_reent+0x36>
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff ff2d 	bl	800a0b0 <_free_r>
 800a256:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a258:	b111      	cbz	r1, 800a260 <_reclaim_reent+0x40>
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff ff28 	bl	800a0b0 <_free_r>
 800a260:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a262:	b111      	cbz	r1, 800a26a <_reclaim_reent+0x4a>
 800a264:	4620      	mov	r0, r4
 800a266:	f7ff ff23 	bl	800a0b0 <_free_r>
 800a26a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a26c:	b111      	cbz	r1, 800a274 <_reclaim_reent+0x54>
 800a26e:	4620      	mov	r0, r4
 800a270:	f7ff ff1e 	bl	800a0b0 <_free_r>
 800a274:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a276:	b111      	cbz	r1, 800a27e <_reclaim_reent+0x5e>
 800a278:	4620      	mov	r0, r4
 800a27a:	f7ff ff19 	bl	800a0b0 <_free_r>
 800a27e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a280:	b111      	cbz	r1, 800a288 <_reclaim_reent+0x68>
 800a282:	4620      	mov	r0, r4
 800a284:	f7ff ff14 	bl	800a0b0 <_free_r>
 800a288:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a28a:	b111      	cbz	r1, 800a292 <_reclaim_reent+0x72>
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7ff ff0f 	bl	800a0b0 <_free_r>
 800a292:	69a3      	ldr	r3, [r4, #24]
 800a294:	b1e3      	cbz	r3, 800a2d0 <_reclaim_reent+0xb0>
 800a296:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a298:	4620      	mov	r0, r4
 800a29a:	4798      	blx	r3
 800a29c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a29e:	b1b9      	cbz	r1, 800a2d0 <_reclaim_reent+0xb0>
 800a2a0:	4620      	mov	r0, r4
 800a2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a2a6:	f7ff bfad 	b.w	800a204 <cleanup_glue>
 800a2aa:	5949      	ldr	r1, [r1, r5]
 800a2ac:	b941      	cbnz	r1, 800a2c0 <_reclaim_reent+0xa0>
 800a2ae:	3504      	adds	r5, #4
 800a2b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b2:	2d80      	cmp	r5, #128	; 0x80
 800a2b4:	68d9      	ldr	r1, [r3, #12]
 800a2b6:	d1f8      	bne.n	800a2aa <_reclaim_reent+0x8a>
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f7ff fef9 	bl	800a0b0 <_free_r>
 800a2be:	e7ba      	b.n	800a236 <_reclaim_reent+0x16>
 800a2c0:	680e      	ldr	r6, [r1, #0]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	f7ff fef4 	bl	800a0b0 <_free_r>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	e7ef      	b.n	800a2ac <_reclaim_reent+0x8c>
 800a2cc:	2500      	movs	r5, #0
 800a2ce:	e7ef      	b.n	800a2b0 <_reclaim_reent+0x90>
 800a2d0:	bd70      	pop	{r4, r5, r6, pc}
 800a2d2:	bf00      	nop
 800a2d4:	20000050 	.word	0x20000050

0800a2d8 <_sbrk_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	4d06      	ldr	r5, [pc, #24]	; (800a2f4 <_sbrk_r+0x1c>)
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4604      	mov	r4, r0
 800a2e0:	4608      	mov	r0, r1
 800a2e2:	602b      	str	r3, [r5, #0]
 800a2e4:	f7f8 fa9e 	bl	8002824 <_sbrk>
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	d102      	bne.n	800a2f2 <_sbrk_r+0x1a>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	b103      	cbz	r3, 800a2f2 <_sbrk_r+0x1a>
 800a2f0:	6023      	str	r3, [r4, #0]
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	2000557c 	.word	0x2000557c

0800a2f8 <siprintf>:
 800a2f8:	b40e      	push	{r1, r2, r3}
 800a2fa:	b500      	push	{lr}
 800a2fc:	b09c      	sub	sp, #112	; 0x70
 800a2fe:	ab1d      	add	r3, sp, #116	; 0x74
 800a300:	9002      	str	r0, [sp, #8]
 800a302:	9006      	str	r0, [sp, #24]
 800a304:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a308:	4809      	ldr	r0, [pc, #36]	; (800a330 <siprintf+0x38>)
 800a30a:	9107      	str	r1, [sp, #28]
 800a30c:	9104      	str	r1, [sp, #16]
 800a30e:	4909      	ldr	r1, [pc, #36]	; (800a334 <siprintf+0x3c>)
 800a310:	f853 2b04 	ldr.w	r2, [r3], #4
 800a314:	9105      	str	r1, [sp, #20]
 800a316:	6800      	ldr	r0, [r0, #0]
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	a902      	add	r1, sp, #8
 800a31c:	f000 f95c 	bl	800a5d8 <_svfiprintf_r>
 800a320:	9b02      	ldr	r3, [sp, #8]
 800a322:	2200      	movs	r2, #0
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	b01c      	add	sp, #112	; 0x70
 800a328:	f85d eb04 	ldr.w	lr, [sp], #4
 800a32c:	b003      	add	sp, #12
 800a32e:	4770      	bx	lr
 800a330:	20000050 	.word	0x20000050
 800a334:	ffff0208 	.word	0xffff0208

0800a338 <strcpy>:
 800a338:	4603      	mov	r3, r0
 800a33a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a33e:	f803 2b01 	strb.w	r2, [r3], #1
 800a342:	2a00      	cmp	r2, #0
 800a344:	d1f9      	bne.n	800a33a <strcpy+0x2>
 800a346:	4770      	bx	lr

0800a348 <strstr>:
 800a348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a34a:	780c      	ldrb	r4, [r1, #0]
 800a34c:	b164      	cbz	r4, 800a368 <strstr+0x20>
 800a34e:	4603      	mov	r3, r0
 800a350:	781a      	ldrb	r2, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	1c5e      	adds	r6, r3, #1
 800a356:	b90a      	cbnz	r2, 800a35c <strstr+0x14>
 800a358:	4610      	mov	r0, r2
 800a35a:	e005      	b.n	800a368 <strstr+0x20>
 800a35c:	4294      	cmp	r4, r2
 800a35e:	d108      	bne.n	800a372 <strstr+0x2a>
 800a360:	460d      	mov	r5, r1
 800a362:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800a366:	b902      	cbnz	r2, 800a36a <strstr+0x22>
 800a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800a36e:	4297      	cmp	r7, r2
 800a370:	d0f7      	beq.n	800a362 <strstr+0x1a>
 800a372:	4633      	mov	r3, r6
 800a374:	e7ec      	b.n	800a350 <strstr+0x8>
	...

0800a378 <_strtol_l.isra.0>:
 800a378:	2b01      	cmp	r3, #1
 800a37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a37e:	d001      	beq.n	800a384 <_strtol_l.isra.0+0xc>
 800a380:	2b24      	cmp	r3, #36	; 0x24
 800a382:	d906      	bls.n	800a392 <_strtol_l.isra.0+0x1a>
 800a384:	f7ff fd8a 	bl	8009e9c <__errno>
 800a388:	2316      	movs	r3, #22
 800a38a:	6003      	str	r3, [r0, #0]
 800a38c:	2000      	movs	r0, #0
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	4f3a      	ldr	r7, [pc, #232]	; (800a47c <_strtol_l.isra.0+0x104>)
 800a394:	468e      	mov	lr, r1
 800a396:	4676      	mov	r6, lr
 800a398:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a39c:	5de5      	ldrb	r5, [r4, r7]
 800a39e:	f015 0508 	ands.w	r5, r5, #8
 800a3a2:	d1f8      	bne.n	800a396 <_strtol_l.isra.0+0x1e>
 800a3a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a3a6:	d134      	bne.n	800a412 <_strtol_l.isra.0+0x9a>
 800a3a8:	f89e 4000 	ldrb.w	r4, [lr]
 800a3ac:	f04f 0801 	mov.w	r8, #1
 800a3b0:	f106 0e02 	add.w	lr, r6, #2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d05c      	beq.n	800a472 <_strtol_l.isra.0+0xfa>
 800a3b8:	2b10      	cmp	r3, #16
 800a3ba:	d10c      	bne.n	800a3d6 <_strtol_l.isra.0+0x5e>
 800a3bc:	2c30      	cmp	r4, #48	; 0x30
 800a3be:	d10a      	bne.n	800a3d6 <_strtol_l.isra.0+0x5e>
 800a3c0:	f89e 4000 	ldrb.w	r4, [lr]
 800a3c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3c8:	2c58      	cmp	r4, #88	; 0x58
 800a3ca:	d14d      	bne.n	800a468 <_strtol_l.isra.0+0xf0>
 800a3cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f10e 0e02 	add.w	lr, lr, #2
 800a3d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a3da:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800a3de:	2600      	movs	r6, #0
 800a3e0:	fbbc f9f3 	udiv	r9, ip, r3
 800a3e4:	4635      	mov	r5, r6
 800a3e6:	fb03 ca19 	mls	sl, r3, r9, ip
 800a3ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a3ee:	2f09      	cmp	r7, #9
 800a3f0:	d818      	bhi.n	800a424 <_strtol_l.isra.0+0xac>
 800a3f2:	463c      	mov	r4, r7
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	dd24      	ble.n	800a442 <_strtol_l.isra.0+0xca>
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	db1f      	blt.n	800a43c <_strtol_l.isra.0+0xc4>
 800a3fc:	45a9      	cmp	r9, r5
 800a3fe:	d31d      	bcc.n	800a43c <_strtol_l.isra.0+0xc4>
 800a400:	d101      	bne.n	800a406 <_strtol_l.isra.0+0x8e>
 800a402:	45a2      	cmp	sl, r4
 800a404:	db1a      	blt.n	800a43c <_strtol_l.isra.0+0xc4>
 800a406:	fb05 4503 	mla	r5, r5, r3, r4
 800a40a:	2601      	movs	r6, #1
 800a40c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a410:	e7eb      	b.n	800a3ea <_strtol_l.isra.0+0x72>
 800a412:	2c2b      	cmp	r4, #43	; 0x2b
 800a414:	bf08      	it	eq
 800a416:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a41a:	46a8      	mov	r8, r5
 800a41c:	bf08      	it	eq
 800a41e:	f106 0e02 	addeq.w	lr, r6, #2
 800a422:	e7c7      	b.n	800a3b4 <_strtol_l.isra.0+0x3c>
 800a424:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a428:	2f19      	cmp	r7, #25
 800a42a:	d801      	bhi.n	800a430 <_strtol_l.isra.0+0xb8>
 800a42c:	3c37      	subs	r4, #55	; 0x37
 800a42e:	e7e1      	b.n	800a3f4 <_strtol_l.isra.0+0x7c>
 800a430:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a434:	2f19      	cmp	r7, #25
 800a436:	d804      	bhi.n	800a442 <_strtol_l.isra.0+0xca>
 800a438:	3c57      	subs	r4, #87	; 0x57
 800a43a:	e7db      	b.n	800a3f4 <_strtol_l.isra.0+0x7c>
 800a43c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a440:	e7e4      	b.n	800a40c <_strtol_l.isra.0+0x94>
 800a442:	2e00      	cmp	r6, #0
 800a444:	da05      	bge.n	800a452 <_strtol_l.isra.0+0xda>
 800a446:	2322      	movs	r3, #34	; 0x22
 800a448:	6003      	str	r3, [r0, #0]
 800a44a:	4665      	mov	r5, ip
 800a44c:	b942      	cbnz	r2, 800a460 <_strtol_l.isra.0+0xe8>
 800a44e:	4628      	mov	r0, r5
 800a450:	e79d      	b.n	800a38e <_strtol_l.isra.0+0x16>
 800a452:	f1b8 0f00 	cmp.w	r8, #0
 800a456:	d000      	beq.n	800a45a <_strtol_l.isra.0+0xe2>
 800a458:	426d      	negs	r5, r5
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d0f7      	beq.n	800a44e <_strtol_l.isra.0+0xd6>
 800a45e:	b10e      	cbz	r6, 800a464 <_strtol_l.isra.0+0xec>
 800a460:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800a464:	6011      	str	r1, [r2, #0]
 800a466:	e7f2      	b.n	800a44e <_strtol_l.isra.0+0xd6>
 800a468:	2430      	movs	r4, #48	; 0x30
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1b3      	bne.n	800a3d6 <_strtol_l.isra.0+0x5e>
 800a46e:	2308      	movs	r3, #8
 800a470:	e7b1      	b.n	800a3d6 <_strtol_l.isra.0+0x5e>
 800a472:	2c30      	cmp	r4, #48	; 0x30
 800a474:	d0a4      	beq.n	800a3c0 <_strtol_l.isra.0+0x48>
 800a476:	230a      	movs	r3, #10
 800a478:	e7ad      	b.n	800a3d6 <_strtol_l.isra.0+0x5e>
 800a47a:	bf00      	nop
 800a47c:	0800ce6d 	.word	0x0800ce6d

0800a480 <strtol>:
 800a480:	4613      	mov	r3, r2
 800a482:	460a      	mov	r2, r1
 800a484:	4601      	mov	r1, r0
 800a486:	4802      	ldr	r0, [pc, #8]	; (800a490 <strtol+0x10>)
 800a488:	6800      	ldr	r0, [r0, #0]
 800a48a:	f7ff bf75 	b.w	800a378 <_strtol_l.isra.0>
 800a48e:	bf00      	nop
 800a490:	20000050 	.word	0x20000050

0800a494 <_vsniprintf_r>:
 800a494:	b530      	push	{r4, r5, lr}
 800a496:	1e14      	subs	r4, r2, #0
 800a498:	4605      	mov	r5, r0
 800a49a:	b09b      	sub	sp, #108	; 0x6c
 800a49c:	4618      	mov	r0, r3
 800a49e:	da05      	bge.n	800a4ac <_vsniprintf_r+0x18>
 800a4a0:	238b      	movs	r3, #139	; 0x8b
 800a4a2:	602b      	str	r3, [r5, #0]
 800a4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4a8:	b01b      	add	sp, #108	; 0x6c
 800a4aa:	bd30      	pop	{r4, r5, pc}
 800a4ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4b0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a4b4:	bf14      	ite	ne
 800a4b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800a4ba:	4623      	moveq	r3, r4
 800a4bc:	9302      	str	r3, [sp, #8]
 800a4be:	9305      	str	r3, [sp, #20]
 800a4c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a4c4:	9100      	str	r1, [sp, #0]
 800a4c6:	9104      	str	r1, [sp, #16]
 800a4c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a4d0:	4669      	mov	r1, sp
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f000 f880 	bl	800a5d8 <_svfiprintf_r>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	bfbc      	itt	lt
 800a4dc:	238b      	movlt	r3, #139	; 0x8b
 800a4de:	602b      	strlt	r3, [r5, #0]
 800a4e0:	2c00      	cmp	r4, #0
 800a4e2:	d0e1      	beq.n	800a4a8 <_vsniprintf_r+0x14>
 800a4e4:	9b00      	ldr	r3, [sp, #0]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	701a      	strb	r2, [r3, #0]
 800a4ea:	e7dd      	b.n	800a4a8 <_vsniprintf_r+0x14>

0800a4ec <vsniprintf>:
 800a4ec:	b507      	push	{r0, r1, r2, lr}
 800a4ee:	9300      	str	r3, [sp, #0]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	460a      	mov	r2, r1
 800a4f4:	4601      	mov	r1, r0
 800a4f6:	4803      	ldr	r0, [pc, #12]	; (800a504 <vsniprintf+0x18>)
 800a4f8:	6800      	ldr	r0, [r0, #0]
 800a4fa:	f7ff ffcb 	bl	800a494 <_vsniprintf_r>
 800a4fe:	b003      	add	sp, #12
 800a500:	f85d fb04 	ldr.w	pc, [sp], #4
 800a504:	20000050 	.word	0x20000050

0800a508 <__malloc_lock>:
 800a508:	4801      	ldr	r0, [pc, #4]	; (800a510 <__malloc_lock+0x8>)
 800a50a:	f7ff bda1 	b.w	800a050 <__retarget_lock_acquire_recursive>
 800a50e:	bf00      	nop
 800a510:	20005574 	.word	0x20005574

0800a514 <__malloc_unlock>:
 800a514:	4801      	ldr	r0, [pc, #4]	; (800a51c <__malloc_unlock+0x8>)
 800a516:	f7ff bd9c 	b.w	800a052 <__retarget_lock_release_recursive>
 800a51a:	bf00      	nop
 800a51c:	20005574 	.word	0x20005574

0800a520 <__ssputs_r>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	688e      	ldr	r6, [r1, #8]
 800a526:	429e      	cmp	r6, r3
 800a528:	4682      	mov	sl, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	4690      	mov	r8, r2
 800a52e:	461f      	mov	r7, r3
 800a530:	d838      	bhi.n	800a5a4 <__ssputs_r+0x84>
 800a532:	898a      	ldrh	r2, [r1, #12]
 800a534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a538:	d032      	beq.n	800a5a0 <__ssputs_r+0x80>
 800a53a:	6825      	ldr	r5, [r4, #0]
 800a53c:	6909      	ldr	r1, [r1, #16]
 800a53e:	eba5 0901 	sub.w	r9, r5, r1
 800a542:	6965      	ldr	r5, [r4, #20]
 800a544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a54c:	3301      	adds	r3, #1
 800a54e:	444b      	add	r3, r9
 800a550:	106d      	asrs	r5, r5, #1
 800a552:	429d      	cmp	r5, r3
 800a554:	bf38      	it	cc
 800a556:	461d      	movcc	r5, r3
 800a558:	0553      	lsls	r3, r2, #21
 800a55a:	d531      	bpl.n	800a5c0 <__ssputs_r+0xa0>
 800a55c:	4629      	mov	r1, r5
 800a55e:	f7ff fdf7 	bl	800a150 <_malloc_r>
 800a562:	4606      	mov	r6, r0
 800a564:	b950      	cbnz	r0, 800a57c <__ssputs_r+0x5c>
 800a566:	230c      	movs	r3, #12
 800a568:	f8ca 3000 	str.w	r3, [sl]
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57c:	6921      	ldr	r1, [r4, #16]
 800a57e:	464a      	mov	r2, r9
 800a580:	f7ff fd70 	bl	800a064 <memcpy>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a58a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	6126      	str	r6, [r4, #16]
 800a592:	6165      	str	r5, [r4, #20]
 800a594:	444e      	add	r6, r9
 800a596:	eba5 0509 	sub.w	r5, r5, r9
 800a59a:	6026      	str	r6, [r4, #0]
 800a59c:	60a5      	str	r5, [r4, #8]
 800a59e:	463e      	mov	r6, r7
 800a5a0:	42be      	cmp	r6, r7
 800a5a2:	d900      	bls.n	800a5a6 <__ssputs_r+0x86>
 800a5a4:	463e      	mov	r6, r7
 800a5a6:	4632      	mov	r2, r6
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	f000 faa8 	bl	800ab00 <memmove>
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	1b9b      	subs	r3, r3, r6
 800a5b6:	4432      	add	r2, r6
 800a5b8:	60a3      	str	r3, [r4, #8]
 800a5ba:	6022      	str	r2, [r4, #0]
 800a5bc:	2000      	movs	r0, #0
 800a5be:	e7db      	b.n	800a578 <__ssputs_r+0x58>
 800a5c0:	462a      	mov	r2, r5
 800a5c2:	f000 fab7 	bl	800ab34 <_realloc_r>
 800a5c6:	4606      	mov	r6, r0
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	d1e1      	bne.n	800a590 <__ssputs_r+0x70>
 800a5cc:	6921      	ldr	r1, [r4, #16]
 800a5ce:	4650      	mov	r0, sl
 800a5d0:	f7ff fd6e 	bl	800a0b0 <_free_r>
 800a5d4:	e7c7      	b.n	800a566 <__ssputs_r+0x46>
	...

0800a5d8 <_svfiprintf_r>:
 800a5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5dc:	4698      	mov	r8, r3
 800a5de:	898b      	ldrh	r3, [r1, #12]
 800a5e0:	061b      	lsls	r3, r3, #24
 800a5e2:	b09d      	sub	sp, #116	; 0x74
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	460d      	mov	r5, r1
 800a5e8:	4614      	mov	r4, r2
 800a5ea:	d50e      	bpl.n	800a60a <_svfiprintf_r+0x32>
 800a5ec:	690b      	ldr	r3, [r1, #16]
 800a5ee:	b963      	cbnz	r3, 800a60a <_svfiprintf_r+0x32>
 800a5f0:	2140      	movs	r1, #64	; 0x40
 800a5f2:	f7ff fdad 	bl	800a150 <_malloc_r>
 800a5f6:	6028      	str	r0, [r5, #0]
 800a5f8:	6128      	str	r0, [r5, #16]
 800a5fa:	b920      	cbnz	r0, 800a606 <_svfiprintf_r+0x2e>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a604:	e0d1      	b.n	800a7aa <_svfiprintf_r+0x1d2>
 800a606:	2340      	movs	r3, #64	; 0x40
 800a608:	616b      	str	r3, [r5, #20]
 800a60a:	2300      	movs	r3, #0
 800a60c:	9309      	str	r3, [sp, #36]	; 0x24
 800a60e:	2320      	movs	r3, #32
 800a610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a614:	f8cd 800c 	str.w	r8, [sp, #12]
 800a618:	2330      	movs	r3, #48	; 0x30
 800a61a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a7c4 <_svfiprintf_r+0x1ec>
 800a61e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a622:	f04f 0901 	mov.w	r9, #1
 800a626:	4623      	mov	r3, r4
 800a628:	469a      	mov	sl, r3
 800a62a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a62e:	b10a      	cbz	r2, 800a634 <_svfiprintf_r+0x5c>
 800a630:	2a25      	cmp	r2, #37	; 0x25
 800a632:	d1f9      	bne.n	800a628 <_svfiprintf_r+0x50>
 800a634:	ebba 0b04 	subs.w	fp, sl, r4
 800a638:	d00b      	beq.n	800a652 <_svfiprintf_r+0x7a>
 800a63a:	465b      	mov	r3, fp
 800a63c:	4622      	mov	r2, r4
 800a63e:	4629      	mov	r1, r5
 800a640:	4638      	mov	r0, r7
 800a642:	f7ff ff6d 	bl	800a520 <__ssputs_r>
 800a646:	3001      	adds	r0, #1
 800a648:	f000 80aa 	beq.w	800a7a0 <_svfiprintf_r+0x1c8>
 800a64c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a64e:	445a      	add	r2, fp
 800a650:	9209      	str	r2, [sp, #36]	; 0x24
 800a652:	f89a 3000 	ldrb.w	r3, [sl]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f000 80a2 	beq.w	800a7a0 <_svfiprintf_r+0x1c8>
 800a65c:	2300      	movs	r3, #0
 800a65e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a666:	f10a 0a01 	add.w	sl, sl, #1
 800a66a:	9304      	str	r3, [sp, #16]
 800a66c:	9307      	str	r3, [sp, #28]
 800a66e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a672:	931a      	str	r3, [sp, #104]	; 0x68
 800a674:	4654      	mov	r4, sl
 800a676:	2205      	movs	r2, #5
 800a678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67c:	4851      	ldr	r0, [pc, #324]	; (800a7c4 <_svfiprintf_r+0x1ec>)
 800a67e:	f7f5 fdaf 	bl	80001e0 <memchr>
 800a682:	9a04      	ldr	r2, [sp, #16]
 800a684:	b9d8      	cbnz	r0, 800a6be <_svfiprintf_r+0xe6>
 800a686:	06d0      	lsls	r0, r2, #27
 800a688:	bf44      	itt	mi
 800a68a:	2320      	movmi	r3, #32
 800a68c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a690:	0711      	lsls	r1, r2, #28
 800a692:	bf44      	itt	mi
 800a694:	232b      	movmi	r3, #43	; 0x2b
 800a696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a69a:	f89a 3000 	ldrb.w	r3, [sl]
 800a69e:	2b2a      	cmp	r3, #42	; 0x2a
 800a6a0:	d015      	beq.n	800a6ce <_svfiprintf_r+0xf6>
 800a6a2:	9a07      	ldr	r2, [sp, #28]
 800a6a4:	4654      	mov	r4, sl
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	f04f 0c0a 	mov.w	ip, #10
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b2:	3b30      	subs	r3, #48	; 0x30
 800a6b4:	2b09      	cmp	r3, #9
 800a6b6:	d94e      	bls.n	800a756 <_svfiprintf_r+0x17e>
 800a6b8:	b1b0      	cbz	r0, 800a6e8 <_svfiprintf_r+0x110>
 800a6ba:	9207      	str	r2, [sp, #28]
 800a6bc:	e014      	b.n	800a6e8 <_svfiprintf_r+0x110>
 800a6be:	eba0 0308 	sub.w	r3, r0, r8
 800a6c2:	fa09 f303 	lsl.w	r3, r9, r3
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	9304      	str	r3, [sp, #16]
 800a6ca:	46a2      	mov	sl, r4
 800a6cc:	e7d2      	b.n	800a674 <_svfiprintf_r+0x9c>
 800a6ce:	9b03      	ldr	r3, [sp, #12]
 800a6d0:	1d19      	adds	r1, r3, #4
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	9103      	str	r1, [sp, #12]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	bfbb      	ittet	lt
 800a6da:	425b      	neglt	r3, r3
 800a6dc:	f042 0202 	orrlt.w	r2, r2, #2
 800a6e0:	9307      	strge	r3, [sp, #28]
 800a6e2:	9307      	strlt	r3, [sp, #28]
 800a6e4:	bfb8      	it	lt
 800a6e6:	9204      	strlt	r2, [sp, #16]
 800a6e8:	7823      	ldrb	r3, [r4, #0]
 800a6ea:	2b2e      	cmp	r3, #46	; 0x2e
 800a6ec:	d10c      	bne.n	800a708 <_svfiprintf_r+0x130>
 800a6ee:	7863      	ldrb	r3, [r4, #1]
 800a6f0:	2b2a      	cmp	r3, #42	; 0x2a
 800a6f2:	d135      	bne.n	800a760 <_svfiprintf_r+0x188>
 800a6f4:	9b03      	ldr	r3, [sp, #12]
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	9203      	str	r2, [sp, #12]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	bfb8      	it	lt
 800a700:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a704:	3402      	adds	r4, #2
 800a706:	9305      	str	r3, [sp, #20]
 800a708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a7d4 <_svfiprintf_r+0x1fc>
 800a70c:	7821      	ldrb	r1, [r4, #0]
 800a70e:	2203      	movs	r2, #3
 800a710:	4650      	mov	r0, sl
 800a712:	f7f5 fd65 	bl	80001e0 <memchr>
 800a716:	b140      	cbz	r0, 800a72a <_svfiprintf_r+0x152>
 800a718:	2340      	movs	r3, #64	; 0x40
 800a71a:	eba0 000a 	sub.w	r0, r0, sl
 800a71e:	fa03 f000 	lsl.w	r0, r3, r0
 800a722:	9b04      	ldr	r3, [sp, #16]
 800a724:	4303      	orrs	r3, r0
 800a726:	3401      	adds	r4, #1
 800a728:	9304      	str	r3, [sp, #16]
 800a72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a72e:	4826      	ldr	r0, [pc, #152]	; (800a7c8 <_svfiprintf_r+0x1f0>)
 800a730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a734:	2206      	movs	r2, #6
 800a736:	f7f5 fd53 	bl	80001e0 <memchr>
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d038      	beq.n	800a7b0 <_svfiprintf_r+0x1d8>
 800a73e:	4b23      	ldr	r3, [pc, #140]	; (800a7cc <_svfiprintf_r+0x1f4>)
 800a740:	bb1b      	cbnz	r3, 800a78a <_svfiprintf_r+0x1b2>
 800a742:	9b03      	ldr	r3, [sp, #12]
 800a744:	3307      	adds	r3, #7
 800a746:	f023 0307 	bic.w	r3, r3, #7
 800a74a:	3308      	adds	r3, #8
 800a74c:	9303      	str	r3, [sp, #12]
 800a74e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a750:	4433      	add	r3, r6
 800a752:	9309      	str	r3, [sp, #36]	; 0x24
 800a754:	e767      	b.n	800a626 <_svfiprintf_r+0x4e>
 800a756:	fb0c 3202 	mla	r2, ip, r2, r3
 800a75a:	460c      	mov	r4, r1
 800a75c:	2001      	movs	r0, #1
 800a75e:	e7a5      	b.n	800a6ac <_svfiprintf_r+0xd4>
 800a760:	2300      	movs	r3, #0
 800a762:	3401      	adds	r4, #1
 800a764:	9305      	str	r3, [sp, #20]
 800a766:	4619      	mov	r1, r3
 800a768:	f04f 0c0a 	mov.w	ip, #10
 800a76c:	4620      	mov	r0, r4
 800a76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a772:	3a30      	subs	r2, #48	; 0x30
 800a774:	2a09      	cmp	r2, #9
 800a776:	d903      	bls.n	800a780 <_svfiprintf_r+0x1a8>
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0c5      	beq.n	800a708 <_svfiprintf_r+0x130>
 800a77c:	9105      	str	r1, [sp, #20]
 800a77e:	e7c3      	b.n	800a708 <_svfiprintf_r+0x130>
 800a780:	fb0c 2101 	mla	r1, ip, r1, r2
 800a784:	4604      	mov	r4, r0
 800a786:	2301      	movs	r3, #1
 800a788:	e7f0      	b.n	800a76c <_svfiprintf_r+0x194>
 800a78a:	ab03      	add	r3, sp, #12
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	462a      	mov	r2, r5
 800a790:	4b0f      	ldr	r3, [pc, #60]	; (800a7d0 <_svfiprintf_r+0x1f8>)
 800a792:	a904      	add	r1, sp, #16
 800a794:	4638      	mov	r0, r7
 800a796:	f3af 8000 	nop.w
 800a79a:	1c42      	adds	r2, r0, #1
 800a79c:	4606      	mov	r6, r0
 800a79e:	d1d6      	bne.n	800a74e <_svfiprintf_r+0x176>
 800a7a0:	89ab      	ldrh	r3, [r5, #12]
 800a7a2:	065b      	lsls	r3, r3, #25
 800a7a4:	f53f af2c 	bmi.w	800a600 <_svfiprintf_r+0x28>
 800a7a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7aa:	b01d      	add	sp, #116	; 0x74
 800a7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7b0:	ab03      	add	r3, sp, #12
 800a7b2:	9300      	str	r3, [sp, #0]
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	4b06      	ldr	r3, [pc, #24]	; (800a7d0 <_svfiprintf_r+0x1f8>)
 800a7b8:	a904      	add	r1, sp, #16
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	f000 f87a 	bl	800a8b4 <_printf_i>
 800a7c0:	e7eb      	b.n	800a79a <_svfiprintf_r+0x1c2>
 800a7c2:	bf00      	nop
 800a7c4:	0800cf6d 	.word	0x0800cf6d
 800a7c8:	0800cf77 	.word	0x0800cf77
 800a7cc:	00000000 	.word	0x00000000
 800a7d0:	0800a521 	.word	0x0800a521
 800a7d4:	0800cf73 	.word	0x0800cf73

0800a7d8 <_printf_common>:
 800a7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7dc:	4616      	mov	r6, r2
 800a7de:	4699      	mov	r9, r3
 800a7e0:	688a      	ldr	r2, [r1, #8]
 800a7e2:	690b      	ldr	r3, [r1, #16]
 800a7e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	bfb8      	it	lt
 800a7ec:	4613      	movlt	r3, r2
 800a7ee:	6033      	str	r3, [r6, #0]
 800a7f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	460c      	mov	r4, r1
 800a7f8:	b10a      	cbz	r2, 800a7fe <_printf_common+0x26>
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	6033      	str	r3, [r6, #0]
 800a7fe:	6823      	ldr	r3, [r4, #0]
 800a800:	0699      	lsls	r1, r3, #26
 800a802:	bf42      	ittt	mi
 800a804:	6833      	ldrmi	r3, [r6, #0]
 800a806:	3302      	addmi	r3, #2
 800a808:	6033      	strmi	r3, [r6, #0]
 800a80a:	6825      	ldr	r5, [r4, #0]
 800a80c:	f015 0506 	ands.w	r5, r5, #6
 800a810:	d106      	bne.n	800a820 <_printf_common+0x48>
 800a812:	f104 0a19 	add.w	sl, r4, #25
 800a816:	68e3      	ldr	r3, [r4, #12]
 800a818:	6832      	ldr	r2, [r6, #0]
 800a81a:	1a9b      	subs	r3, r3, r2
 800a81c:	42ab      	cmp	r3, r5
 800a81e:	dc26      	bgt.n	800a86e <_printf_common+0x96>
 800a820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a824:	1e13      	subs	r3, r2, #0
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	bf18      	it	ne
 800a82a:	2301      	movne	r3, #1
 800a82c:	0692      	lsls	r2, r2, #26
 800a82e:	d42b      	bmi.n	800a888 <_printf_common+0xb0>
 800a830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a834:	4649      	mov	r1, r9
 800a836:	4638      	mov	r0, r7
 800a838:	47c0      	blx	r8
 800a83a:	3001      	adds	r0, #1
 800a83c:	d01e      	beq.n	800a87c <_printf_common+0xa4>
 800a83e:	6823      	ldr	r3, [r4, #0]
 800a840:	68e5      	ldr	r5, [r4, #12]
 800a842:	6832      	ldr	r2, [r6, #0]
 800a844:	f003 0306 	and.w	r3, r3, #6
 800a848:	2b04      	cmp	r3, #4
 800a84a:	bf08      	it	eq
 800a84c:	1aad      	subeq	r5, r5, r2
 800a84e:	68a3      	ldr	r3, [r4, #8]
 800a850:	6922      	ldr	r2, [r4, #16]
 800a852:	bf0c      	ite	eq
 800a854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a858:	2500      	movne	r5, #0
 800a85a:	4293      	cmp	r3, r2
 800a85c:	bfc4      	itt	gt
 800a85e:	1a9b      	subgt	r3, r3, r2
 800a860:	18ed      	addgt	r5, r5, r3
 800a862:	2600      	movs	r6, #0
 800a864:	341a      	adds	r4, #26
 800a866:	42b5      	cmp	r5, r6
 800a868:	d11a      	bne.n	800a8a0 <_printf_common+0xc8>
 800a86a:	2000      	movs	r0, #0
 800a86c:	e008      	b.n	800a880 <_printf_common+0xa8>
 800a86e:	2301      	movs	r3, #1
 800a870:	4652      	mov	r2, sl
 800a872:	4649      	mov	r1, r9
 800a874:	4638      	mov	r0, r7
 800a876:	47c0      	blx	r8
 800a878:	3001      	adds	r0, #1
 800a87a:	d103      	bne.n	800a884 <_printf_common+0xac>
 800a87c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a884:	3501      	adds	r5, #1
 800a886:	e7c6      	b.n	800a816 <_printf_common+0x3e>
 800a888:	18e1      	adds	r1, r4, r3
 800a88a:	1c5a      	adds	r2, r3, #1
 800a88c:	2030      	movs	r0, #48	; 0x30
 800a88e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a892:	4422      	add	r2, r4
 800a894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a89c:	3302      	adds	r3, #2
 800a89e:	e7c7      	b.n	800a830 <_printf_common+0x58>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4622      	mov	r2, r4
 800a8a4:	4649      	mov	r1, r9
 800a8a6:	4638      	mov	r0, r7
 800a8a8:	47c0      	blx	r8
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	d0e6      	beq.n	800a87c <_printf_common+0xa4>
 800a8ae:	3601      	adds	r6, #1
 800a8b0:	e7d9      	b.n	800a866 <_printf_common+0x8e>
	...

0800a8b4 <_printf_i>:
 800a8b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	7e27      	ldrb	r7, [r4, #24]
 800a8be:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a8c0:	2f78      	cmp	r7, #120	; 0x78
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	469a      	mov	sl, r3
 800a8c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8ca:	d807      	bhi.n	800a8dc <_printf_i+0x28>
 800a8cc:	2f62      	cmp	r7, #98	; 0x62
 800a8ce:	d80a      	bhi.n	800a8e6 <_printf_i+0x32>
 800a8d0:	2f00      	cmp	r7, #0
 800a8d2:	f000 80d8 	beq.w	800aa86 <_printf_i+0x1d2>
 800a8d6:	2f58      	cmp	r7, #88	; 0x58
 800a8d8:	f000 80a3 	beq.w	800aa22 <_printf_i+0x16e>
 800a8dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8e4:	e03a      	b.n	800a95c <_printf_i+0xa8>
 800a8e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8ea:	2b15      	cmp	r3, #21
 800a8ec:	d8f6      	bhi.n	800a8dc <_printf_i+0x28>
 800a8ee:	a001      	add	r0, pc, #4	; (adr r0, 800a8f4 <_printf_i+0x40>)
 800a8f0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8f4:	0800a94d 	.word	0x0800a94d
 800a8f8:	0800a961 	.word	0x0800a961
 800a8fc:	0800a8dd 	.word	0x0800a8dd
 800a900:	0800a8dd 	.word	0x0800a8dd
 800a904:	0800a8dd 	.word	0x0800a8dd
 800a908:	0800a8dd 	.word	0x0800a8dd
 800a90c:	0800a961 	.word	0x0800a961
 800a910:	0800a8dd 	.word	0x0800a8dd
 800a914:	0800a8dd 	.word	0x0800a8dd
 800a918:	0800a8dd 	.word	0x0800a8dd
 800a91c:	0800a8dd 	.word	0x0800a8dd
 800a920:	0800aa6d 	.word	0x0800aa6d
 800a924:	0800a991 	.word	0x0800a991
 800a928:	0800aa4f 	.word	0x0800aa4f
 800a92c:	0800a8dd 	.word	0x0800a8dd
 800a930:	0800a8dd 	.word	0x0800a8dd
 800a934:	0800aa8f 	.word	0x0800aa8f
 800a938:	0800a8dd 	.word	0x0800a8dd
 800a93c:	0800a991 	.word	0x0800a991
 800a940:	0800a8dd 	.word	0x0800a8dd
 800a944:	0800a8dd 	.word	0x0800a8dd
 800a948:	0800aa57 	.word	0x0800aa57
 800a94c:	680b      	ldr	r3, [r1, #0]
 800a94e:	1d1a      	adds	r2, r3, #4
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	600a      	str	r2, [r1, #0]
 800a954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a95c:	2301      	movs	r3, #1
 800a95e:	e0a3      	b.n	800aaa8 <_printf_i+0x1f4>
 800a960:	6825      	ldr	r5, [r4, #0]
 800a962:	6808      	ldr	r0, [r1, #0]
 800a964:	062e      	lsls	r6, r5, #24
 800a966:	f100 0304 	add.w	r3, r0, #4
 800a96a:	d50a      	bpl.n	800a982 <_printf_i+0xce>
 800a96c:	6805      	ldr	r5, [r0, #0]
 800a96e:	600b      	str	r3, [r1, #0]
 800a970:	2d00      	cmp	r5, #0
 800a972:	da03      	bge.n	800a97c <_printf_i+0xc8>
 800a974:	232d      	movs	r3, #45	; 0x2d
 800a976:	426d      	negs	r5, r5
 800a978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a97c:	485e      	ldr	r0, [pc, #376]	; (800aaf8 <_printf_i+0x244>)
 800a97e:	230a      	movs	r3, #10
 800a980:	e019      	b.n	800a9b6 <_printf_i+0x102>
 800a982:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a986:	6805      	ldr	r5, [r0, #0]
 800a988:	600b      	str	r3, [r1, #0]
 800a98a:	bf18      	it	ne
 800a98c:	b22d      	sxthne	r5, r5
 800a98e:	e7ef      	b.n	800a970 <_printf_i+0xbc>
 800a990:	680b      	ldr	r3, [r1, #0]
 800a992:	6825      	ldr	r5, [r4, #0]
 800a994:	1d18      	adds	r0, r3, #4
 800a996:	6008      	str	r0, [r1, #0]
 800a998:	0628      	lsls	r0, r5, #24
 800a99a:	d501      	bpl.n	800a9a0 <_printf_i+0xec>
 800a99c:	681d      	ldr	r5, [r3, #0]
 800a99e:	e002      	b.n	800a9a6 <_printf_i+0xf2>
 800a9a0:	0669      	lsls	r1, r5, #25
 800a9a2:	d5fb      	bpl.n	800a99c <_printf_i+0xe8>
 800a9a4:	881d      	ldrh	r5, [r3, #0]
 800a9a6:	4854      	ldr	r0, [pc, #336]	; (800aaf8 <_printf_i+0x244>)
 800a9a8:	2f6f      	cmp	r7, #111	; 0x6f
 800a9aa:	bf0c      	ite	eq
 800a9ac:	2308      	moveq	r3, #8
 800a9ae:	230a      	movne	r3, #10
 800a9b0:	2100      	movs	r1, #0
 800a9b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9b6:	6866      	ldr	r6, [r4, #4]
 800a9b8:	60a6      	str	r6, [r4, #8]
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	bfa2      	ittt	ge
 800a9be:	6821      	ldrge	r1, [r4, #0]
 800a9c0:	f021 0104 	bicge.w	r1, r1, #4
 800a9c4:	6021      	strge	r1, [r4, #0]
 800a9c6:	b90d      	cbnz	r5, 800a9cc <_printf_i+0x118>
 800a9c8:	2e00      	cmp	r6, #0
 800a9ca:	d04d      	beq.n	800aa68 <_printf_i+0x1b4>
 800a9cc:	4616      	mov	r6, r2
 800a9ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9d2:	fb03 5711 	mls	r7, r3, r1, r5
 800a9d6:	5dc7      	ldrb	r7, [r0, r7]
 800a9d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9dc:	462f      	mov	r7, r5
 800a9de:	42bb      	cmp	r3, r7
 800a9e0:	460d      	mov	r5, r1
 800a9e2:	d9f4      	bls.n	800a9ce <_printf_i+0x11a>
 800a9e4:	2b08      	cmp	r3, #8
 800a9e6:	d10b      	bne.n	800aa00 <_printf_i+0x14c>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	07df      	lsls	r7, r3, #31
 800a9ec:	d508      	bpl.n	800aa00 <_printf_i+0x14c>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6861      	ldr	r1, [r4, #4]
 800a9f2:	4299      	cmp	r1, r3
 800a9f4:	bfde      	ittt	le
 800a9f6:	2330      	movle	r3, #48	; 0x30
 800a9f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9fc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800aa00:	1b92      	subs	r2, r2, r6
 800aa02:	6122      	str	r2, [r4, #16]
 800aa04:	f8cd a000 	str.w	sl, [sp]
 800aa08:	464b      	mov	r3, r9
 800aa0a:	aa03      	add	r2, sp, #12
 800aa0c:	4621      	mov	r1, r4
 800aa0e:	4640      	mov	r0, r8
 800aa10:	f7ff fee2 	bl	800a7d8 <_printf_common>
 800aa14:	3001      	adds	r0, #1
 800aa16:	d14c      	bne.n	800aab2 <_printf_i+0x1fe>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa1c:	b004      	add	sp, #16
 800aa1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa22:	4835      	ldr	r0, [pc, #212]	; (800aaf8 <_printf_i+0x244>)
 800aa24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	680e      	ldr	r6, [r1, #0]
 800aa2c:	061f      	lsls	r7, r3, #24
 800aa2e:	f856 5b04 	ldr.w	r5, [r6], #4
 800aa32:	600e      	str	r6, [r1, #0]
 800aa34:	d514      	bpl.n	800aa60 <_printf_i+0x1ac>
 800aa36:	07d9      	lsls	r1, r3, #31
 800aa38:	bf44      	itt	mi
 800aa3a:	f043 0320 	orrmi.w	r3, r3, #32
 800aa3e:	6023      	strmi	r3, [r4, #0]
 800aa40:	b91d      	cbnz	r5, 800aa4a <_printf_i+0x196>
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	f023 0320 	bic.w	r3, r3, #32
 800aa48:	6023      	str	r3, [r4, #0]
 800aa4a:	2310      	movs	r3, #16
 800aa4c:	e7b0      	b.n	800a9b0 <_printf_i+0xfc>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f043 0320 	orr.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	2378      	movs	r3, #120	; 0x78
 800aa58:	4828      	ldr	r0, [pc, #160]	; (800aafc <_printf_i+0x248>)
 800aa5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa5e:	e7e3      	b.n	800aa28 <_printf_i+0x174>
 800aa60:	065e      	lsls	r6, r3, #25
 800aa62:	bf48      	it	mi
 800aa64:	b2ad      	uxthmi	r5, r5
 800aa66:	e7e6      	b.n	800aa36 <_printf_i+0x182>
 800aa68:	4616      	mov	r6, r2
 800aa6a:	e7bb      	b.n	800a9e4 <_printf_i+0x130>
 800aa6c:	680b      	ldr	r3, [r1, #0]
 800aa6e:	6826      	ldr	r6, [r4, #0]
 800aa70:	6960      	ldr	r0, [r4, #20]
 800aa72:	1d1d      	adds	r5, r3, #4
 800aa74:	600d      	str	r5, [r1, #0]
 800aa76:	0635      	lsls	r5, r6, #24
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	d501      	bpl.n	800aa80 <_printf_i+0x1cc>
 800aa7c:	6018      	str	r0, [r3, #0]
 800aa7e:	e002      	b.n	800aa86 <_printf_i+0x1d2>
 800aa80:	0671      	lsls	r1, r6, #25
 800aa82:	d5fb      	bpl.n	800aa7c <_printf_i+0x1c8>
 800aa84:	8018      	strh	r0, [r3, #0]
 800aa86:	2300      	movs	r3, #0
 800aa88:	6123      	str	r3, [r4, #16]
 800aa8a:	4616      	mov	r6, r2
 800aa8c:	e7ba      	b.n	800aa04 <_printf_i+0x150>
 800aa8e:	680b      	ldr	r3, [r1, #0]
 800aa90:	1d1a      	adds	r2, r3, #4
 800aa92:	600a      	str	r2, [r1, #0]
 800aa94:	681e      	ldr	r6, [r3, #0]
 800aa96:	6862      	ldr	r2, [r4, #4]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7f5 fba0 	bl	80001e0 <memchr>
 800aaa0:	b108      	cbz	r0, 800aaa6 <_printf_i+0x1f2>
 800aaa2:	1b80      	subs	r0, r0, r6
 800aaa4:	6060      	str	r0, [r4, #4]
 800aaa6:	6863      	ldr	r3, [r4, #4]
 800aaa8:	6123      	str	r3, [r4, #16]
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aab0:	e7a8      	b.n	800aa04 <_printf_i+0x150>
 800aab2:	6923      	ldr	r3, [r4, #16]
 800aab4:	4632      	mov	r2, r6
 800aab6:	4649      	mov	r1, r9
 800aab8:	4640      	mov	r0, r8
 800aaba:	47d0      	blx	sl
 800aabc:	3001      	adds	r0, #1
 800aabe:	d0ab      	beq.n	800aa18 <_printf_i+0x164>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	079b      	lsls	r3, r3, #30
 800aac4:	d413      	bmi.n	800aaee <_printf_i+0x23a>
 800aac6:	68e0      	ldr	r0, [r4, #12]
 800aac8:	9b03      	ldr	r3, [sp, #12]
 800aaca:	4298      	cmp	r0, r3
 800aacc:	bfb8      	it	lt
 800aace:	4618      	movlt	r0, r3
 800aad0:	e7a4      	b.n	800aa1c <_printf_i+0x168>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4632      	mov	r2, r6
 800aad6:	4649      	mov	r1, r9
 800aad8:	4640      	mov	r0, r8
 800aada:	47d0      	blx	sl
 800aadc:	3001      	adds	r0, #1
 800aade:	d09b      	beq.n	800aa18 <_printf_i+0x164>
 800aae0:	3501      	adds	r5, #1
 800aae2:	68e3      	ldr	r3, [r4, #12]
 800aae4:	9903      	ldr	r1, [sp, #12]
 800aae6:	1a5b      	subs	r3, r3, r1
 800aae8:	42ab      	cmp	r3, r5
 800aaea:	dcf2      	bgt.n	800aad2 <_printf_i+0x21e>
 800aaec:	e7eb      	b.n	800aac6 <_printf_i+0x212>
 800aaee:	2500      	movs	r5, #0
 800aaf0:	f104 0619 	add.w	r6, r4, #25
 800aaf4:	e7f5      	b.n	800aae2 <_printf_i+0x22e>
 800aaf6:	bf00      	nop
 800aaf8:	0800cf7e 	.word	0x0800cf7e
 800aafc:	0800cf8f 	.word	0x0800cf8f

0800ab00 <memmove>:
 800ab00:	4288      	cmp	r0, r1
 800ab02:	b510      	push	{r4, lr}
 800ab04:	eb01 0402 	add.w	r4, r1, r2
 800ab08:	d902      	bls.n	800ab10 <memmove+0x10>
 800ab0a:	4284      	cmp	r4, r0
 800ab0c:	4623      	mov	r3, r4
 800ab0e:	d807      	bhi.n	800ab20 <memmove+0x20>
 800ab10:	1e43      	subs	r3, r0, #1
 800ab12:	42a1      	cmp	r1, r4
 800ab14:	d008      	beq.n	800ab28 <memmove+0x28>
 800ab16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab1e:	e7f8      	b.n	800ab12 <memmove+0x12>
 800ab20:	4402      	add	r2, r0
 800ab22:	4601      	mov	r1, r0
 800ab24:	428a      	cmp	r2, r1
 800ab26:	d100      	bne.n	800ab2a <memmove+0x2a>
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab32:	e7f7      	b.n	800ab24 <memmove+0x24>

0800ab34 <_realloc_r>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	4607      	mov	r7, r0
 800ab38:	4614      	mov	r4, r2
 800ab3a:	460e      	mov	r6, r1
 800ab3c:	b921      	cbnz	r1, 800ab48 <_realloc_r+0x14>
 800ab3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ab42:	4611      	mov	r1, r2
 800ab44:	f7ff bb04 	b.w	800a150 <_malloc_r>
 800ab48:	b922      	cbnz	r2, 800ab54 <_realloc_r+0x20>
 800ab4a:	f7ff fab1 	bl	800a0b0 <_free_r>
 800ab4e:	4625      	mov	r5, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab54:	f000 f814 	bl	800ab80 <_malloc_usable_size_r>
 800ab58:	42a0      	cmp	r0, r4
 800ab5a:	d20f      	bcs.n	800ab7c <_realloc_r+0x48>
 800ab5c:	4621      	mov	r1, r4
 800ab5e:	4638      	mov	r0, r7
 800ab60:	f7ff faf6 	bl	800a150 <_malloc_r>
 800ab64:	4605      	mov	r5, r0
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0f2      	beq.n	800ab50 <_realloc_r+0x1c>
 800ab6a:	4631      	mov	r1, r6
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	f7ff fa79 	bl	800a064 <memcpy>
 800ab72:	4631      	mov	r1, r6
 800ab74:	4638      	mov	r0, r7
 800ab76:	f7ff fa9b 	bl	800a0b0 <_free_r>
 800ab7a:	e7e9      	b.n	800ab50 <_realloc_r+0x1c>
 800ab7c:	4635      	mov	r5, r6
 800ab7e:	e7e7      	b.n	800ab50 <_realloc_r+0x1c>

0800ab80 <_malloc_usable_size_r>:
 800ab80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab84:	1f18      	subs	r0, r3, #4
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	bfbc      	itt	lt
 800ab8a:	580b      	ldrlt	r3, [r1, r0]
 800ab8c:	18c0      	addlt	r0, r0, r3
 800ab8e:	4770      	bx	lr

0800ab90 <_init>:
 800ab90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab92:	bf00      	nop
 800ab94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab96:	bc08      	pop	{r3}
 800ab98:	469e      	mov	lr, r3
 800ab9a:	4770      	bx	lr

0800ab9c <_fini>:
 800ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab9e:	bf00      	nop
 800aba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aba2:	bc08      	pop	{r3}
 800aba4:	469e      	mov	lr, r3
 800aba6:	4770      	bx	lr
