
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009404  08009404  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08009404  08009404  00019404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800940c  0800940c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800940c  0800940c  0001940c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08009414  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          0000d5fc  20000034  20000034  00020034  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  2000d630  2000d630  00020034  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023e6d  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042d3  00000000  00000000  00043ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  000481a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001978  00000000  00000000  00049ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025593  00000000  00000000  0004b618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020b82  00000000  00000000  00070bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0db0  00000000  00000000  0009172d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001724dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007234  00000000  00000000  00172530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000034 	.word	0x20000034
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009370 	.word	0x08009370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000038 	.word	0x20000038
 80001cc:	08009370 	.word	0x08009370

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 fda4 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f832 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f9ce 	bl	8000884 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e8:	f000 f996 	bl	8000818 <MX_DMA_Init>
  MX_TIM2_Init();
 80004ec:	f000 f91e 	bl	800072c <MX_TIM2_Init>
  MX_RTC_Init();
 80004f0:	f000 f8c2 	bl	8000678 <MX_RTC_Init>
  MX_FSMC_Init();
 80004f4:	f000 fa18 	bl	8000928 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f964 	bl	80007c4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004fc:	f000 f88e 	bl	800061c <MX_I2C1_Init>
  MX_FATFS_Init();
 8000500:	f005 fec8 	bl	8006294 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f005 ffd0 	bl	80064a8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <main+0x5c>)
 800050a:	2101      	movs	r1, #1
 800050c:	2001      	movs	r0, #1
 800050e:	f006 f8c5 	bl	800669c <osSemaphoreNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x60>)
 8000516:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(StartDefTask, NULL, &defTask_attributes);
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <main+0x64>)
 800051a:	2100      	movs	r1, #0
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0x68>)
 800051e:	f006 f80f 	bl	8006540 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <main+0x6c>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f005 ffe4 	bl	80064f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LOOP_FOREVER();
 800052c:	2001      	movs	r0, #1
 800052e:	f000 fdbd 	bl	80010ac <HAL_Delay>
 8000532:	e7fb      	b.n	800052c <main+0x54>
 8000534:	080093d4 	.word	0x080093d4
 8000538:	2000d064 	.word	0x2000d064
 800053c:	080093b0 	.word	0x080093b0
 8000540:	080009ed 	.word	0x080009ed
 8000544:	2000d154 	.word	0x2000d154

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	; 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	2230      	movs	r2, #48	; 0x30
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f008 ff02 	bl	8009360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <SystemClock_Config+0xcc>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <SystemClock_Config+0xcc>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	; 0x40
 800057c:	4b25      	ldr	r3, [pc, #148]	; (8000614 <SystemClock_Config+0xcc>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xd0>)
 8000592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xd0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a4:	2301      	movs	r3, #1
 80005a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ae:	2302      	movs	r3, #2
 80005b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b8:	2308      	movs	r3, #8
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fada 	bl	8003b88 <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005da:	f000 fa21 	bl	8000a20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80005ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80005ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f6:	f107 030c 	add.w	r3, r7, #12
 80005fa:	2105      	movs	r1, #5
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fd3b 	bl	8004078 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000608:	f000 fa0a 	bl	8000a20 <Error_Handler>
  }
}
 800060c:	bf00      	nop
 800060e:	3750      	adds	r7, #80	; 0x50
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40023800 	.word	0x40023800
 8000618:	40007000 	.word	0x40007000

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f001 fb53 	bl	8001d04 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f9dc 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	2000cfb0 	.word	0x2000cfb0
 8000670:	40005400 	.word	0x40005400
 8000674:	00061a80 	.word	0x00061a80

08000678 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b086      	sub	sp, #24
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <MX_RTC_Init+0xac>)
 8000692:	4a25      	ldr	r2, [pc, #148]	; (8000728 <MX_RTC_Init+0xb0>)
 8000694:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000696:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_RTC_Init+0xac>)
 8000698:	2200      	movs	r2, #0
 800069a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <MX_RTC_Init+0xac>)
 800069e:	227f      	movs	r2, #127	; 0x7f
 80006a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <MX_RTC_Init+0xac>)
 80006a4:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80006a8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006aa:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <MX_RTC_Init+0xac>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <MX_RTC_Init+0xac>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <MX_RTC_Init+0xac>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006bc:	4819      	ldr	r0, [pc, #100]	; (8000724 <MX_RTC_Init+0xac>)
 80006be:	f003 ffeb 	bl	8004698 <HAL_RTC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_RTC_Init+0x54>
  {
    Error_Handler();
 80006c8:	f000 f9aa 	bl	8000a20 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2200      	movs	r2, #0
 80006e4:	4619      	mov	r1, r3
 80006e6:	480f      	ldr	r0, [pc, #60]	; (8000724 <MX_RTC_Init+0xac>)
 80006e8:	f004 f867 	bl	80047ba <HAL_RTC_SetTime>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 80006f2:	f000 f995 	bl	8000a20 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80006f6:	2301      	movs	r3, #1
 80006f8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80006fa:	2301      	movs	r3, #1
 80006fc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2200      	movs	r2, #0
 800070a:	4619      	mov	r1, r3
 800070c:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_RTC_Init+0xac>)
 800070e:	f004 f911 	bl	8004934 <HAL_RTC_SetDate>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000718:	f000 f982 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000d0ec 	.word	0x2000d0ec
 8000728:	40002800 	.word	0x40002800

0800072c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000748:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_TIM2_Init+0x94>)
 800074a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800074e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_TIM2_Init+0x94>)
 8000752:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000756:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_TIM2_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 124;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_TIM2_Init+0x94>)
 8000760:	227c      	movs	r2, #124	; 0x7c
 8000762:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_TIM2_Init+0x94>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_TIM2_Init+0x94>)
 800076c:	2280      	movs	r2, #128	; 0x80
 800076e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <MX_TIM2_Init+0x94>)
 8000772:	f004 f9f8 	bl	8004b66 <HAL_TIM_Base_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800077c:	f000 f950 	bl	8000a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	4619      	mov	r1, r3
 800078c:	480c      	ldr	r0, [pc, #48]	; (80007c0 <MX_TIM2_Init+0x94>)
 800078e:	f004 fbb1 	bl	8004ef4 <HAL_TIM_ConfigClockSource>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000798:	f000 f942 	bl	8000a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800079c:	2320      	movs	r3, #32
 800079e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_TIM2_Init+0x94>)
 80007aa:	f004 fdcd 	bl	8005348 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007b4:	f000 f934 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000d10c 	.word	0x2000d10c

080007c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c8:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ca:	4a12      	ldr	r2, [pc, #72]	; (8000814 <MX_USART1_UART_Init+0x50>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fa:	4805      	ldr	r0, [pc, #20]	; (8000810 <MX_USART1_UART_Init+0x4c>)
 80007fc:	f004 fe34 	bl	8005468 <HAL_UART_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000806:	f000 f90b 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000d0a8 	.word	0x2000d0a8
 8000814:	40011000 	.word	0x40011000

08000818 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b17      	ldr	r3, [pc, #92]	; (8000880 <MX_DMA_Init+0x68>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_DMA_Init+0x68>)
 8000828:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_DMA_Init+0x68>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_DMA_Init+0x68>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_DMA_Init+0x68>)
 8000844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <MX_DMA_Init+0x68>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2103      	movs	r1, #3
 800085a:	2011      	movs	r0, #17
 800085c:	f000 fd02 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000860:	2011      	movs	r0, #17
 8000862:	f000 fd1b 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2046      	movs	r0, #70	; 0x46
 800086c:	f000 fcfa 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000870:	2046      	movs	r0, #70	; 0x46
 8000872:	f000 fd13 	bl	800129c <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	617b      	str	r3, [r7, #20]
 800088e:	4b25      	ldr	r3, [pc, #148]	; (8000924 <MX_GPIO_Init+0xa0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a24      	ldr	r2, [pc, #144]	; (8000924 <MX_GPIO_Init+0xa0>)
 8000894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_GPIO_Init+0xa0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008a2:	617b      	str	r3, [r7, #20]
 80008a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008cc:	f043 0308 	orr.w	r3, r3, #8
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0308 	and.w	r3, r3, #8
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a0f      	ldr	r2, [pc, #60]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <MX_GPIO_Init+0xa0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_GPIO_Init+0xa0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a08      	ldr	r2, [pc, #32]	; (8000924 <MX_GPIO_Init+0xa0>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_GPIO_Init+0xa0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]

}
 8000916:	bf00      	nop
 8000918:	371c      	adds	r7, #28
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800

08000928 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800093c:	463b      	mov	r3, r7
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800094a:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <MX_FSMC_Init+0xc0>)
 800094c:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000950:	2210      	movs	r2, #16
 8000952:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000956:	2202      	movs	r2, #2
 8000958:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000968:	2200      	movs	r2, #0
 800096a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800096c:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800096e:	2200      	movs	r2, #0
 8000970:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8000972:	4b1c      	ldr	r3, [pc, #112]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000974:	2200      	movs	r2, #0
 8000976:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 0;
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 0;
 800097e:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000980:	2200      	movs	r2, #0
 8000982:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 0;
 8000984:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000986:	2200      	movs	r2, #0
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 0;
 800098a:	4b16      	ldr	r3, [pc, #88]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800098c:	2200      	movs	r2, #0
 800098e:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 0;
 8000990:	4b14      	ldr	r3, [pc, #80]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 0;
 8000996:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_FSMC_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 800099c:	4b11      	ldr	r3, [pc, #68]	; (80009e4 <MX_FSMC_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 80009a4:	23fc      	movs	r3, #252	; 0xfc
 80009a6:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 80009a8:	23fc      	movs	r3, #252	; 0xfc
 80009aa:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80009ac:	23fc      	movs	r3, #252	; 0xfc
 80009ae:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80009b0:	23fc      	movs	r3, #252	; 0xfc
 80009b2:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80009b4:	23fc      	movs	r3, #252	; 0xfc
 80009b6:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80009b8:	23fc      	movs	r3, #252	; 0xfc
 80009ba:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80009bc:	23fc      	movs	r3, #252	; 0xfc
 80009be:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80009c0:	23fc      	movs	r3, #252	; 0xfc
 80009c2:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80009c4:	463a      	mov	r2, r7
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	; (80009e4 <MX_FSMC_Init+0xbc>)
 80009ce:	f002 ffae 	bl	800392e <HAL_NAND_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80009d8:	f000 f822 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	2000d068 	.word	0x2000d068
 80009e8:	a0000060 	.word	0xa0000060

080009ec <StartDefTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefTask */
void StartDefTask(void *argument)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f005 fe36 	bl	8006666 <osDelay>
 80009fa:	e7fb      	b.n	80009f4 <StartDefTask+0x8>

080009fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d101      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0e:	f000 fb2d 	bl	800106c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40010000 	.word	0x40010000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <HAL_MspInit+0x64>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <HAL_MspInit+0x64>)
 8000a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a44:	6453      	str	r3, [r2, #68]	; 0x44
 8000a46:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_MspInit+0x64>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	603b      	str	r3, [r7, #0]
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x64>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x64>)
 8000a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x64>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210f      	movs	r1, #15
 8000a72:	f06f 0001 	mvn.w	r0, #1
 8000a76:	f000 fbf5 	bl	8001264 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2105      	movs	r1, #5
 8000a7e:	2005      	movs	r0, #5
 8000a80:	f000 fbf0 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a84:	2005      	movs	r0, #5
 8000a86:	f000 fc09 	bl	800129c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a38      	ldr	r2, [pc, #224]	; (8000b98 <HAL_I2C_MspInit+0x100>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d169      	bne.n	8000b8e <HAL_I2C_MspInit+0xf6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b37      	ldr	r3, [pc, #220]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a36      	ldr	r2, [pc, #216]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	4619      	mov	r1, r3
 8000af0:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <HAL_I2C_MspInit+0x108>)
 8000af2:	f000 ff6b 	bl	80019cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	4a27      	ldr	r2, [pc, #156]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b04:	6413      	str	r3, [r2, #64]	; 0x40
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <HAL_I2C_MspInit+0x104>)
 8000b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b14:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <HAL_I2C_MspInit+0x110>)
 8000b16:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000b18:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b1e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b22:	2240      	movs	r2, #64	; 0x40
 8000b24:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b32:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b52:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b54:	f000 fbb0 	bl	80012b8 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 8000b5e:	f7ff ff5f 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a0f      	ldr	r2, [pc, #60]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <HAL_I2C_MspInit+0x10c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 3, 0);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2103      	movs	r1, #3
 8000b72:	201f      	movs	r0, #31
 8000b74:	f000 fb76 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b78:	201f      	movs	r0, #31
 8000b7a:	f000 fb8f 	bl	800129c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 3, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2103      	movs	r1, #3
 8000b82:	2020      	movs	r0, #32
 8000b84:	f000 fb6e 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b88:	2020      	movs	r0, #32
 8000b8a:	f000 fb87 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020400 	.word	0x40020400
 8000ba4:	2000cf50 	.word	0x2000cf50
 8000ba8:	400260a0 	.word	0x400260a0

08000bac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <HAL_RTC_MspInit+0x4c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d110      	bne.n	8000bee <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_RTC_MspInit+0x50>)
 8000bd2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 fc7b 	bl	80044d4 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8000be4:	f7ff ff1c 	bl	8000a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_RTC_MspInit+0x54>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3718      	adds	r7, #24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40002800 	.word	0x40002800
 8000bfc:	00190300 	.word	0x00190300
 8000c00:	42470e3c 	.word	0x42470e3c

08000c04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c14:	d115      	bne.n	8000c42 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b09      	ldr	r3, [pc, #36]	; (8000c4c <HAL_TIM_Base_MspInit+0x48>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000c32:	2200      	movs	r2, #0
 8000c34:	2105      	movs	r1, #5
 8000c36:	201c      	movs	r0, #28
 8000c38:	f000 fb14 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c3c:	201c      	movs	r0, #28
 8000c3e:	f000 fb2d 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	3710      	adds	r7, #16
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_UART_MspInit+0xf0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d162      	bne.n	8000d38 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c7c:	f043 0310 	orr.w	r3, r3, #16
 8000c80:	6453      	str	r3, [r2, #68]	; 0x44
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	f003 0310 	and.w	r3, r3, #16
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000caa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4820      	ldr	r0, [pc, #128]	; (8000d48 <HAL_UART_MspInit+0xf8>)
 8000cc8:	f000 fe80 	bl	80019cc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cce:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_UART_MspInit+0x100>)
 8000cd0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cec:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d0c:	480f      	ldr	r0, [pc, #60]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d0e:	f000 fad3 	bl	80012b8 <HAL_DMA_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000d18:	f7ff fe82 	bl	8000a20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d20:	635a      	str	r2, [r3, #52]	; 0x34
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2025      	movs	r0, #37	; 0x25
 8000d2e:	f000 fa99 	bl	8001264 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d32:	2025      	movs	r0, #37	; 0x25
 8000d34:	f000 fab2 	bl	800129c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	2000d004 	.word	0x2000d004
 8000d50:	400264b8 	.word	0x400264b8

08000d54 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000d68:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_FSMC_MspInit+0x98>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d139      	bne.n	8000de4 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <HAL_FSMC_MspInit+0x98>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_FSMC_MspInit+0x9c>)
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	; (8000df0 <HAL_FSMC_MspInit+0x9c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6393      	str	r3, [r2, #56]	; 0x38
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_FSMC_MspInit+0x9c>)
 8000d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d92:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8000d96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000da4:	230c      	movs	r3, #12
 8000da6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4619      	mov	r1, r3
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <HAL_FSMC_MspInit+0xa0>)
 8000dae:	f000 fe0d 	bl	80019cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 8000db2:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8000db6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480a      	ldr	r0, [pc, #40]	; (8000df8 <HAL_FSMC_MspInit+0xa4>)
 8000dce:	f000 fdfd 	bl	80019cc <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 4, 0);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2104      	movs	r1, #4
 8000dd6:	2030      	movs	r0, #48	; 0x30
 8000dd8:	f000 fa44 	bl	8001264 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8000ddc:	2030      	movs	r0, #48	; 0x30
 8000dde:	f000 fa5d 	bl	800129c <HAL_NVIC_EnableIRQ>
 8000de2:	e000      	b.n	8000de6 <HAL_FSMC_MspInit+0x92>
    return;
 8000de4:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000050 	.word	0x20000050
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40021000 	.word	0x40021000
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8000e04:	f7ff ffa6 	bl	8000d54 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08c      	sub	sp, #48	; 0x30
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	2019      	movs	r0, #25
 8000e26:	f000 fa1d 	bl	8001264 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e2a:	2019      	movs	r0, #25
 8000e2c:	f000 fa36 	bl	800129c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <HAL_InitTick+0xa4>)
 8000e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e38:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <HAL_InitTick+0xa4>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <HAL_InitTick+0xa4>)
 8000e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	60fb      	str	r3, [r7, #12]
 8000e4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e4c:	f107 0210 	add.w	r2, r7, #16
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4611      	mov	r1, r2
 8000e56:	4618      	mov	r0, r3
 8000e58:	f003 fb0a 	bl	8004470 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e5c:	f003 faf4 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8000e60:	4603      	mov	r3, r0
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <HAL_InitTick+0xa8>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	3b01      	subs	r3, #1
 8000e72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e74:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <HAL_InitTick+0xac>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	; (8000ec0 <HAL_InitTick+0xb0>)
 8000e78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e7a:	4b10      	ldr	r3, [pc, #64]	; (8000ebc <HAL_InitTick+0xac>)
 8000e7c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_InitTick+0xac>)
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_InitTick+0xac>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <HAL_InitTick+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <HAL_InitTick+0xac>)
 8000e96:	f003 fe66 	bl	8004b66 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d104      	bne.n	8000eaa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_InitTick+0xac>)
 8000ea2:	f003 feaf 	bl	8004c04 <HAL_TIM_Base_Start_IT>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3730      	adds	r7, #48	; 0x30
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	431bde83 	.word	0x431bde83
 8000ebc:	2000d158 	.word	0x2000d158
 8000ec0:	40010000 	.word	0x40010000

08000ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f0c:	4802      	ldr	r0, [pc, #8]	; (8000f18 <DMA1_Stream6_IRQHandler+0x10>)
 8000f0e:	f000 fb13 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2000cf50 	.word	0x2000cf50

08000f1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f22:	f003 fedf 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000d158 	.word	0x2000d158

08000f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM2_IRQHandler+0x10>)
 8000f36:	f003 fed5 	bl	8004ce4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000d10c 	.word	0x2000d10c

08000f44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <I2C1_EV_IRQHandler+0x10>)
 8000f4a:	f001 f81f 	bl	8001f8c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	2000cfb0 	.word	0x2000cfb0

08000f58 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f5c:	4802      	ldr	r0, [pc, #8]	; (8000f68 <I2C1_ER_IRQHandler+0x10>)
 8000f5e:	f001 f986 	bl	800226e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000cfb0 	.word	0x2000cfb0

08000f6c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <USART1_IRQHandler+0x10>)
 8000f72:	f004 fac7 	bl	8005504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000d0a8 	.word	0x2000d0a8

08000f80 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <FSMC_IRQHandler+0x10>)
 8000f86:	f002 fd20 	bl	80039ca <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000d068 	.word	0x2000d068

08000f94 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f98:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <DMA2_Stream7_IRQHandler+0x10>)
 8000f9a:	f000 facd 	bl	8001538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2000d004 	.word	0x2000d004

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <SystemInit+0x28>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a07      	ldr	r2, [pc, #28]	; (8000fd0 <SystemInit+0x28>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <SystemInit+0x28>)
 8000fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fc2:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800100c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fda:	e003      	b.n	8000fe4 <LoopCopyDataInit>

08000fdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fe0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fe2:	3104      	adds	r1, #4

08000fe4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fec:	d3f6      	bcc.n	8000fdc <CopyDataInit>
  ldr  r2, =_sbss
 8000fee:	4a0b      	ldr	r2, [pc, #44]	; (800101c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ff0:	e002      	b.n	8000ff8 <LoopFillZerobss>

08000ff2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ff2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff4:	f842 3b04 	str.w	r3, [r2], #4

08000ff8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ffa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ffc:	d3f9      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffe:	f7ff ffd3 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001002:	f008 f97b 	bl	80092fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001006:	f7ff fa67 	bl	80004d8 <main>
  bx  lr    
 800100a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800100c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001010:	08009414 	.word	0x08009414
  ldr  r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001018:	20000034 	.word	0x20000034
  ldr  r2, =_sbss
 800101c:	20000034 	.word	0x20000034
  ldr  r3, = _ebss
 8001020:	2000d630 	.word	0x2000d630

08001024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <HAL_Init+0x40>)
 8001032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_Init+0x40>)
 800103e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a07      	ldr	r2, [pc, #28]	; (8001068 <HAL_Init+0x40>)
 800104a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001050:	2003      	movs	r0, #3
 8001052:	f000 f8fc 	bl	800124e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001056:	2000      	movs	r0, #0
 8001058:	f7ff feda 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800105c:	f7ff fce8 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023c00 	.word	0x40023c00

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008
 8001090:	2000d1a0 	.word	0x2000d1a0

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000d1a0 	.word	0x2000d1a0

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008

080010f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001110:	4013      	ands	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800111c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	; (8001138 <__NVIC_SetPriorityGrouping+0x44>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <__NVIC_GetPriorityGrouping+0x18>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	0a1b      	lsrs	r3, r3, #8
 8001146:	f003 0307 	and.w	r3, r3, #7
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	db0b      	blt.n	8001182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	f003 021f 	and.w	r2, r3, #31
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <__NVIC_EnableIRQ+0x38>)
 8001172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	2001      	movs	r0, #1
 800117a:	fa00 f202 	lsl.w	r2, r0, r2
 800117e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	e000e100 	.word	0xe000e100

08001194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	6039      	str	r1, [r7, #0]
 800119e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	db0a      	blt.n	80011be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	490c      	ldr	r1, [pc, #48]	; (80011e0 <__NVIC_SetPriority+0x4c>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	0112      	lsls	r2, r2, #4
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	440b      	add	r3, r1
 80011b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011bc:	e00a      	b.n	80011d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4908      	ldr	r1, [pc, #32]	; (80011e4 <__NVIC_SetPriority+0x50>)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f003 030f 	and.w	r3, r3, #15
 80011ca:	3b04      	subs	r3, #4
 80011cc:	0112      	lsls	r2, r2, #4
 80011ce:	b2d2      	uxtb	r2, r2
 80011d0:	440b      	add	r3, r1
 80011d2:	761a      	strb	r2, [r3, #24]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000e100 	.word	0xe000e100
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	; 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f1c3 0307 	rsb	r3, r3, #7
 8001202:	2b04      	cmp	r3, #4
 8001204:	bf28      	it	cs
 8001206:	2304      	movcs	r3, #4
 8001208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3304      	adds	r3, #4
 800120e:	2b06      	cmp	r3, #6
 8001210:	d902      	bls.n	8001218 <NVIC_EncodePriority+0x30>
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3b03      	subs	r3, #3
 8001216:	e000      	b.n	800121a <NVIC_EncodePriority+0x32>
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800121c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	401a      	ands	r2, r3
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001230:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43d9      	mvns	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	4313      	orrs	r3, r2
         );
}
 8001242:	4618      	mov	r0, r3
 8001244:	3724      	adds	r7, #36	; 0x24
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff ff4c 	bl	80010f4 <__NVIC_SetPriorityGrouping>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001276:	f7ff ff61 	bl	800113c <__NVIC_GetPriorityGrouping>
 800127a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	6978      	ldr	r0, [r7, #20]
 8001282:	f7ff ffb1 	bl	80011e8 <NVIC_EncodePriority>
 8001286:	4602      	mov	r2, r0
 8001288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128c:	4611      	mov	r1, r2
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff80 	bl	8001194 <__NVIC_SetPriority>
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff54 	bl	8001158 <__NVIC_EnableIRQ>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fee6 	bl	8001094 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e099      	b.n	8001408 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0201 	bic.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	e00f      	b.n	8001316 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f6:	f7ff fecd 	bl	8001094 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b05      	cmp	r3, #5
 8001302:	d908      	bls.n	8001316 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2220      	movs	r2, #32
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2203      	movs	r2, #3
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e078      	b.n	8001408 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e8      	bne.n	80012f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_DMA_Init+0x158>)
 8001330:	4013      	ands	r3, r2
 8001332:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	4313      	orrs	r3, r2
 8001366:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	2b04      	cmp	r3, #4
 800136e:	d107      	bne.n	8001380 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001378:	4313      	orrs	r3, r2
 800137a:	697a      	ldr	r2, [r7, #20]
 800137c:	4313      	orrs	r3, r2
 800137e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695b      	ldr	r3, [r3, #20]
 800138e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f023 0307 	bic.w	r3, r3, #7
 8001396:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	4313      	orrs	r3, r2
 80013a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d117      	bne.n	80013da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00e      	beq.n	80013da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 fa89 	bl	80018d4 <DMA_CheckFifoParam>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d008      	beq.n	80013da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013d6:	2301      	movs	r3, #1
 80013d8:	e016      	b.n	8001408 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f000 fa40 	bl	8001868 <DMA_CalcBaseAndBitshift>
 80013e8:	4603      	mov	r3, r0
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f0:	223f      	movs	r2, #63	; 0x3f
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001406:	2300      	movs	r3, #0
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	f010803f 	.word	0xf010803f

08001414 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001420:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001422:	f7ff fe37 	bl	8001094 <HAL_GetTick>
 8001426:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d008      	beq.n	8001446 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2280      	movs	r2, #128	; 0x80
 8001438:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e052      	b.n	80014ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0216 	bic.w	r2, r2, #22
 8001454:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	695a      	ldr	r2, [r3, #20]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001464:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	2b00      	cmp	r3, #0
 800146c:	d103      	bne.n	8001476 <HAL_DMA_Abort+0x62>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0208 	bic.w	r2, r2, #8
 8001484:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0201 	bic.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001496:	e013      	b.n	80014c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001498:	f7ff fdfc 	bl	8001094 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b05      	cmp	r3, #5
 80014a4:	d90c      	bls.n	80014c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2203      	movs	r2, #3
 80014b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80014bc:	2303      	movs	r3, #3
 80014be:	e015      	b.n	80014ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1e4      	bne.n	8001498 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	223f      	movs	r2, #63	; 0x3f
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d004      	beq.n	8001512 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2280      	movs	r2, #128	; 0x80
 800150c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e00c      	b.n	800152c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2205      	movs	r2, #5
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001544:	4b92      	ldr	r3, [pc, #584]	; (8001790 <HAL_DMA_IRQHandler+0x258>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a92      	ldr	r2, [pc, #584]	; (8001794 <HAL_DMA_IRQHandler+0x25c>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0a9b      	lsrs	r3, r3, #10
 8001550:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	2208      	movs	r2, #8
 8001564:	409a      	lsls	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0204 	bic.w	r2, r2, #4
 800158a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2208      	movs	r2, #8
 8001592:	409a      	lsls	r2, r3
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f043 0201 	orr.w	r2, r3, #1
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a8:	2201      	movs	r2, #1
 80015aa:	409a      	lsls	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d012      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00b      	beq.n	80015da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c6:	2201      	movs	r2, #1
 80015c8:	409a      	lsls	r2, r3
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	f043 0202 	orr.w	r2, r3, #2
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2204      	movs	r2, #4
 80015e0:	409a      	lsls	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4013      	ands	r3, r2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d012      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	2204      	movs	r2, #4
 80015fe:	409a      	lsls	r2, r3
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001608:	f043 0204 	orr.w	r2, r3, #4
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001614:	2210      	movs	r2, #16
 8001616:	409a      	lsls	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4013      	ands	r3, r2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d043      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 0308 	and.w	r3, r3, #8
 800162a:	2b00      	cmp	r3, #0
 800162c:	d03c      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001632:	2210      	movs	r2, #16
 8001634:	409a      	lsls	r2, r3
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d018      	beq.n	800167a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d108      	bne.n	8001668 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d024      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	4798      	blx	r3
 8001666:	e01f      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01b      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
 8001678:	e016      	b.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d107      	bne.n	8001698 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 0208 	bic.w	r2, r2, #8
 8001696:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ac:	2220      	movs	r2, #32
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 808e 	beq.w	80017d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0310 	and.w	r3, r3, #16
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f000 8086 	beq.w	80017d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	2220      	movs	r2, #32
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b05      	cmp	r3, #5
 80016e0:	d136      	bne.n	8001750 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0216 	bic.w	r2, r2, #22
 80016f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b00      	cmp	r3, #0
 8001708:	d103      	bne.n	8001712 <HAL_DMA_IRQHandler+0x1da>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0208 	bic.w	r2, r2, #8
 8001720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001726:	223f      	movs	r2, #63	; 0x3f
 8001728:	409a      	lsls	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001742:	2b00      	cmp	r3, #0
 8001744:	d07d      	beq.n	8001842 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
        }
        return;
 800174e:	e078      	b.n	8001842 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01c      	beq.n	8001798 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d108      	bne.n	800177e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001770:	2b00      	cmp	r3, #0
 8001772:	d030      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	4798      	blx	r3
 800177c:	e02b      	b.n	80017d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d027      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	4798      	blx	r3
 800178e:	e022      	b.n	80017d6 <HAL_DMA_IRQHandler+0x29e>
 8001790:	20000000 	.word	0x20000000
 8001794:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10f      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f022 0210 	bic.w	r2, r2, #16
 80017b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2201      	movs	r2, #1
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d032      	beq.n	8001844 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d022      	beq.n	8001830 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2205      	movs	r2, #5
 80017ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	3301      	adds	r3, #1
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	429a      	cmp	r2, r3
 800180c:	d307      	bcc.n	800181e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1f2      	bne.n	8001802 <HAL_DMA_IRQHandler+0x2ca>
 800181c:	e000      	b.n	8001820 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800181e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
 8001840:	e000      	b.n	8001844 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001842:	bf00      	nop
    }
  }
}
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop

0800184c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185a:	b2db      	uxtb	r3, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3b10      	subs	r3, #16
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <DMA_CalcBaseAndBitshift+0x64>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001882:	4a13      	ldr	r2, [pc, #76]	; (80018d0 <DMA_CalcBaseAndBitshift+0x68>)
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4413      	add	r3, r2
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2b03      	cmp	r3, #3
 8001894:	d909      	bls.n	80018aa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189e:	f023 0303 	bic.w	r3, r3, #3
 80018a2:	1d1a      	adds	r2, r3, #4
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	659a      	str	r2, [r3, #88]	; 0x58
 80018a8:	e007      	b.n	80018ba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	aaaaaaab 	.word	0xaaaaaaab
 80018d0:	080093fc 	.word	0x080093fc

080018d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d11f      	bne.n	800192e <DMA_CheckFifoParam+0x5a>
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d856      	bhi.n	80019a2 <DMA_CheckFifoParam+0xce>
 80018f4:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <DMA_CheckFifoParam+0x28>)
 80018f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fa:	bf00      	nop
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	0800191f 	.word	0x0800191f
 8001904:	0800190d 	.word	0x0800190d
 8001908:	080019a3 	.word	0x080019a3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d046      	beq.n	80019a6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191c:	e043      	b.n	80019a6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001926:	d140      	bne.n	80019aa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800192c:	e03d      	b.n	80019aa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001936:	d121      	bne.n	800197c <DMA_CheckFifoParam+0xa8>
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2b03      	cmp	r3, #3
 800193c:	d837      	bhi.n	80019ae <DMA_CheckFifoParam+0xda>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <DMA_CheckFifoParam+0x70>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001955 	.word	0x08001955
 8001948:	0800195b 	.word	0x0800195b
 800194c:	08001955 	.word	0x08001955
 8001950:	0800196d 	.word	0x0800196d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
      break;
 8001958:	e030      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d025      	beq.n	80019b2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196a:	e022      	b.n	80019b2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001974:	d11f      	bne.n	80019b6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800197a:	e01c      	b.n	80019b6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d903      	bls.n	800198a <DMA_CheckFifoParam+0xb6>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d003      	beq.n	8001990 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001988:	e018      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	73fb      	strb	r3, [r7, #15]
      break;
 800198e:	e015      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00e      	beq.n	80019ba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	73fb      	strb	r3, [r7, #15]
      break;
 80019a0:	e00b      	b.n	80019ba <DMA_CheckFifoParam+0xe6>
      break;
 80019a2:	bf00      	nop
 80019a4:	e00a      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019a6:	bf00      	nop
 80019a8:	e008      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e006      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e004      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e002      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;   
 80019b6:	bf00      	nop
 80019b8:	e000      	b.n	80019bc <DMA_CheckFifoParam+0xe8>
      break;
 80019ba:	bf00      	nop
    }
  } 
  
  return status; 
 80019bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019de:	2300      	movs	r3, #0
 80019e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	61fb      	str	r3, [r7, #28]
 80019e6:	e16b      	b.n	8001cc0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019e8:	2201      	movs	r2, #1
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	697a      	ldr	r2, [r7, #20]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	f040 815a 	bne.w	8001cba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d005      	beq.n	8001a1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d130      	bne.n	8001a80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	f003 0201 	and.w	r2, r3, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d017      	beq.n	8001abc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	2203      	movs	r2, #3
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d123      	bne.n	8001b10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	08da      	lsrs	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3208      	adds	r2, #8
 8001ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	691a      	ldr	r2, [r3, #16]
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	08da      	lsrs	r2, r3, #3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3208      	adds	r2, #8
 8001b0a:	69b9      	ldr	r1, [r7, #24]
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 80b4 	beq.w	8001cba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5a:	4a5f      	ldr	r2, [pc, #380]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b60:	6453      	str	r3, [r2, #68]	; 0x44
 8001b62:	4b5d      	ldr	r3, [pc, #372]	; (8001cd8 <HAL_GPIO_Init+0x30c>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b6e:	4a5b      	ldr	r2, [pc, #364]	; (8001cdc <HAL_GPIO_Init+0x310>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x314>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d02b      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <HAL_GPIO_Init+0x318>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d025      	beq.n	8001bee <HAL_GPIO_Init+0x222>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x31c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d01f      	beq.n	8001bea <HAL_GPIO_Init+0x21e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x320>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d019      	beq.n	8001be6 <HAL_GPIO_Init+0x21a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_GPIO_Init+0x324>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d013      	beq.n	8001be2 <HAL_GPIO_Init+0x216>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <HAL_GPIO_Init+0x328>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d00d      	beq.n	8001bde <HAL_GPIO_Init+0x212>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_GPIO_Init+0x32c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d007      	beq.n	8001bda <HAL_GPIO_Init+0x20e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a4b      	ldr	r2, [pc, #300]	; (8001cfc <HAL_GPIO_Init+0x330>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_GPIO_Init+0x20a>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00e      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bda:	2306      	movs	r3, #6
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x228>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	; (8001cdc <HAL_GPIO_Init+0x310>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c12:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c36:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c66:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c8a:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb4:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <HAL_GPIO_Init+0x334>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae90 	bls.w	80019e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40021c00 	.word	0x40021c00
 8001d00:	40013c00 	.word	0x40013c00

08001d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e12b      	b.n	8001f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d106      	bne.n	8001d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe feb4 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2224      	movs	r2, #36	; 0x24
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d68:	f002 fb5a 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a81      	ldr	r2, [pc, #516]	; (8001f78 <HAL_I2C_Init+0x274>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d807      	bhi.n	8001d88 <HAL_I2C_Init+0x84>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a80      	ldr	r2, [pc, #512]	; (8001f7c <HAL_I2C_Init+0x278>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	e006      	b.n	8001d96 <HAL_I2C_Init+0x92>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4a7d      	ldr	r2, [pc, #500]	; (8001f80 <HAL_I2C_Init+0x27c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	bf94      	ite	ls
 8001d90:	2301      	movls	r3, #1
 8001d92:	2300      	movhi	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e0e7      	b.n	8001f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	4a78      	ldr	r2, [pc, #480]	; (8001f84 <HAL_I2C_Init+0x280>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	0c9b      	lsrs	r3, r3, #18
 8001da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68ba      	ldr	r2, [r7, #8]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	4a6a      	ldr	r2, [pc, #424]	; (8001f78 <HAL_I2C_Init+0x274>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d802      	bhi.n	8001dd8 <HAL_I2C_Init+0xd4>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	e009      	b.n	8001dec <HAL_I2C_Init+0xe8>
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	4a69      	ldr	r2, [pc, #420]	; (8001f88 <HAL_I2C_Init+0x284>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	099b      	lsrs	r3, r3, #6
 8001dea:	3301      	adds	r3, #1
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6812      	ldr	r2, [r2, #0]
 8001df0:	430b      	orrs	r3, r1
 8001df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	495c      	ldr	r1, [pc, #368]	; (8001f78 <HAL_I2C_Init+0x274>)
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d819      	bhi.n	8001e40 <HAL_I2C_Init+0x13c>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	1e59      	subs	r1, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1a:	1c59      	adds	r1, r3, #1
 8001e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e20:	400b      	ands	r3, r1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_I2C_Init+0x138>
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1e59      	subs	r1, r3, #1
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e34:	3301      	adds	r3, #1
 8001e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e3a:	e051      	b.n	8001ee0 <HAL_I2C_Init+0x1dc>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e04f      	b.n	8001ee0 <HAL_I2C_Init+0x1dc>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d111      	bne.n	8001e6c <HAL_I2C_Init+0x168>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	1e58      	subs	r0, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6859      	ldr	r1, [r3, #4]
 8001e50:	460b      	mov	r3, r1
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	440b      	add	r3, r1
 8001e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf0c      	ite	eq
 8001e64:	2301      	moveq	r3, #1
 8001e66:	2300      	movne	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	e012      	b.n	8001e92 <HAL_I2C_Init+0x18e>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	1e58      	subs	r0, r3, #1
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6859      	ldr	r1, [r3, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	440b      	add	r3, r1
 8001e7a:	0099      	lsls	r1, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HAL_I2C_Init+0x196>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e022      	b.n	8001ee0 <HAL_I2C_Init+0x1dc>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_I2C_Init+0x1bc>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1e58      	subs	r0, r3, #1
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6859      	ldr	r1, [r3, #4]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	440b      	add	r3, r1
 8001eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ebe:	e00f      	b.n	8001ee0 <HAL_I2C_Init+0x1dc>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1e58      	subs	r0, r3, #1
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6859      	ldr	r1, [r3, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	0099      	lsls	r1, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001edc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	6809      	ldr	r1, [r1, #0]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69da      	ldr	r2, [r3, #28]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	6911      	ldr	r1, [r2, #16]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	68d2      	ldr	r2, [r2, #12]
 8001f1a:	4311      	orrs	r1, r2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	430b      	orrs	r3, r1
 8001f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695a      	ldr	r2, [r3, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	000186a0 	.word	0x000186a0
 8001f7c:	001e847f 	.word	0x001e847f
 8001f80:	003d08ff 	.word	0x003d08ff
 8001f84:	431bde83 	.word	0x431bde83
 8001f88:	10624dd3 	.word	0x10624dd3

08001f8c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001fac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b10      	cmp	r3, #16
 8001fba:	d003      	beq.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x38>
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	f040 80c1 	bne.w	8002146 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_I2C_EV_IRQHandler+0x6e>
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001fe4:	d003      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x62>
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_EV_IRQHandler+0x66>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_I2C_EV_IRQHandler+0x68>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	f000 8132 	beq.w	800225e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00c      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x92>
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	0a5b      	lsrs	r3, r3, #9
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f001 fc71 	bl	80038f8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 fd79 	bl	8002b0e <I2C_Master_SB>
 800201c:	e092      	b.n	8002144 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_I2C_EV_IRQHandler+0xb2>
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	0a5b      	lsrs	r3, r3, #9
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fdef 	bl	8002c1a <I2C_Master_ADD10>
 800203c:	e082      	b.n	8002144 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0xd2>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	0a5b      	lsrs	r3, r3, #9
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fe09 	bl	8002c6e <I2C_Master_ADDR>
 800205c:	e072      	b.n	8002144 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03b      	beq.n	80020e2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002078:	f000 80f3 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	09db      	lsrs	r3, r3, #7
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00f      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	0a9b      	lsrs	r3, r3, #10
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b00      	cmp	r3, #0
 8002092:	d009      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	089b      	lsrs	r3, r3, #2
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d103      	bne.n	80020a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f9f3 	bl	800248c <I2C_MasterTransmit_TXE>
 80020a6:	e04d      	b.n	8002144 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80d6 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	0a5b      	lsrs	r3, r3, #9
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 80cf 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80020c4:	7bbb      	ldrb	r3, [r7, #14]
 80020c6:	2b21      	cmp	r3, #33	; 0x21
 80020c8:	d103      	bne.n	80020d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa7a 	bl	80025c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d0:	e0c7      	b.n	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	2b40      	cmp	r3, #64	; 0x40
 80020d6:	f040 80c4 	bne.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fae8 	bl	80026b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e0:	e0bf      	b.n	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020f0:	f000 80b7 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d00f      	beq.n	8002120 <HAL_I2C_EV_IRQHandler+0x194>
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	0a9b      	lsrs	r3, r3, #10
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d009      	beq.n	8002120 <HAL_I2C_EV_IRQHandler+0x194>
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d103      	bne.n	8002120 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fb5d 	bl	80027d8 <I2C_MasterReceive_RXNE>
 800211e:	e011      	b.n	8002144 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	089b      	lsrs	r3, r3, #2
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 809a 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	0a5b      	lsrs	r3, r3, #9
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 8093 	beq.w	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fbfc 	bl	800293a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002142:	e08e      	b.n	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002144:	e08d      	b.n	8002262 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e007      	b.n	8002168 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d012      	beq.n	800219a <HAL_I2C_EV_IRQHandler+0x20e>
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	0a5b      	lsrs	r3, r3, #9
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002190:	69b9      	ldr	r1, [r7, #24]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 ffba 	bl	800310c <I2C_Slave_ADDR>
 8002198:	e066      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_I2C_EV_IRQHandler+0x22e>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	0a5b      	lsrs	r3, r3, #9
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 fff4 	bl	80031a0 <I2C_Slave_STOPF>
 80021b8:	e056      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80021ba:	7bbb      	ldrb	r3, [r7, #14]
 80021bc:	2b21      	cmp	r3, #33	; 0x21
 80021be:	d002      	beq.n	80021c6 <HAL_I2C_EV_IRQHandler+0x23a>
 80021c0:	7bbb      	ldrb	r3, [r7, #14]
 80021c2:	2b29      	cmp	r3, #41	; 0x29
 80021c4:	d125      	bne.n	8002212 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	09db      	lsrs	r3, r3, #7
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00f      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x266>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	0a9b      	lsrs	r3, r3, #10
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_I2C_EV_IRQHandler+0x266>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fed0 	bl	8002f90 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021f0:	e039      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d033      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x2da>
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	0a5b      	lsrs	r3, r3, #9
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02d      	beq.n	8002266 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fefd 	bl	800300a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002210:	e029      	b.n	8002266 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00f      	beq.n	800223e <HAL_I2C_EV_IRQHandler+0x2b2>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	0a9b      	lsrs	r3, r3, #10
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_I2C_EV_IRQHandler+0x2b2>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d103      	bne.n	800223e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 ff08 	bl	800304c <I2C_SlaveReceive_RXNE>
 800223c:	e014      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00e      	beq.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	0a5b      	lsrs	r3, r3, #9
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d008      	beq.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 ff36 	bl	80030c8 <I2C_SlaveReceive_BTF>
 800225c:	e004      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800225e:	bf00      	nop
 8002260:	e002      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002262:	bf00      	nop
 8002264:	e000      	b.n	8002268 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002266:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b08a      	sub	sp, #40	; 0x28
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002286:	2300      	movs	r3, #0
 8002288:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002290:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002292:	6a3b      	ldr	r3, [r7, #32]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00e      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x4e>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	0a1b      	lsrs	r3, r3, #8
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80022aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80022ba:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	0a5b      	lsrs	r3, r3, #9
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00e      	beq.n	80022e6 <HAL_I2C_ER_IRQHandler+0x78>
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	f043 0302 	orr.w	r3, r3, #2
 80022da:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80022e4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	0a9b      	lsrs	r3, r3, #10
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03f      	beq.n	8002372 <HAL_I2C_ER_IRQHandler+0x104>
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	0a1b      	lsrs	r3, r3, #8
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d039      	beq.n	8002372 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80022fe:	7efb      	ldrb	r3, [r7, #27]
 8002300:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002310:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002318:	7ebb      	ldrb	r3, [r7, #26]
 800231a:	2b20      	cmp	r3, #32
 800231c:	d112      	bne.n	8002344 <HAL_I2C_ER_IRQHandler+0xd6>
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10f      	bne.n	8002344 <HAL_I2C_ER_IRQHandler+0xd6>
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b21      	cmp	r3, #33	; 0x21
 8002328:	d008      	beq.n	800233c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b29      	cmp	r3, #41	; 0x29
 800232e:	d005      	beq.n	800233c <HAL_I2C_ER_IRQHandler+0xce>
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b28      	cmp	r3, #40	; 0x28
 8002334:	d106      	bne.n	8002344 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b21      	cmp	r3, #33	; 0x21
 800233a:	d103      	bne.n	8002344 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f001 f85f 	bl	8003400 <I2C_Slave_AF>
 8002342:	e016      	b.n	8002372 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800234c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	f043 0304 	orr.w	r3, r3, #4
 8002354:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002356:	7efb      	ldrb	r3, [r7, #27]
 8002358:	2b10      	cmp	r3, #16
 800235a:	d002      	beq.n	8002362 <HAL_I2C_ER_IRQHandler+0xf4>
 800235c:	7efb      	ldrb	r3, [r7, #27]
 800235e:	2b40      	cmp	r3, #64	; 0x40
 8002360:	d107      	bne.n	8002372 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002370:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	0adb      	lsrs	r3, r3, #11
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <HAL_I2C_ER_IRQHandler+0x12e>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	f043 0308 	orr.w	r3, r3, #8
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800239a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d008      	beq.n	80023b4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f001 f896 	bl	80034e0 <I2C_ITError>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3728      	adds	r7, #40	; 0x28
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d150      	bne.n	8002554 <I2C_MasterTransmit_TXE+0xc8>
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b21      	cmp	r3, #33	; 0x21
 80024b6:	d14d      	bne.n	8002554 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d01d      	beq.n	80024fa <I2C_MasterTransmit_TXE+0x6e>
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b20      	cmp	r3, #32
 80024c2:	d01a      	beq.n	80024fa <I2C_MasterTransmit_TXE+0x6e>
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ca:	d016      	beq.n	80024fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2211      	movs	r2, #17
 80024e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f7ff ff62 	bl	80023bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80024f8:	e060      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002508:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002518:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b40      	cmp	r3, #64	; 0x40
 8002532:	d107      	bne.n	8002544 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ff7d 	bl	800243c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002542:	e03b      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7ff ff35 	bl	80023bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002552:	e033      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b21      	cmp	r3, #33	; 0x21
 8002558:	d005      	beq.n	8002566 <I2C_MasterTransmit_TXE+0xda>
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	2b40      	cmp	r3, #64	; 0x40
 800255e:	d12d      	bne.n	80025bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b22      	cmp	r3, #34	; 0x22
 8002564:	d12a      	bne.n	80025bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800256a:	b29b      	uxth	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d108      	bne.n	8002582 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800257e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002580:	e01c      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d103      	bne.n	8002596 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f88e 	bl	80026b0 <I2C_MemoryTransmit_TXE_BTF>
}
 8002594:	e012      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	781a      	ldrb	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025ba:	e7ff      	b.n	80025bc <I2C_MasterTransmit_TXE+0x130>
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b21      	cmp	r3, #33	; 0x21
 80025dc:	d164      	bne.n	80026a8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d012      	beq.n	800260e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002602:	b29b      	uxth	r3, r3
 8002604:	3b01      	subs	r3, #1
 8002606:	b29a      	uxth	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800260c:	e04c      	b.n	80026a8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d01d      	beq.n	8002650 <I2C_MasterTransmit_BTF+0x8c>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b20      	cmp	r3, #32
 8002618:	d01a      	beq.n	8002650 <I2C_MasterTransmit_BTF+0x8c>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002620:	d016      	beq.n	8002650 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002630:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2211      	movs	r2, #17
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7ff feb7 	bl	80023bc <HAL_I2C_MasterTxCpltCallback>
}
 800264e:	e02b      	b.n	80026a8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800265e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b40      	cmp	r3, #64	; 0x40
 8002688:	d107      	bne.n	800269a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7ff fed2 	bl	800243c <HAL_I2C_MemTxCpltCallback>
}
 8002698:	e006      	b.n	80026a8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff fe8a 	bl	80023bc <HAL_I2C_MasterTxCpltCallback>
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d11d      	bne.n	8002704 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d10b      	bne.n	80026e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026e0:	1c9a      	adds	r2, r3, #2
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80026e6:	e073      	b.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	121b      	asrs	r3, r3, #8
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002702:	e065      	b.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10b      	bne.n	8002724 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002710:	b2da      	uxtb	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002722:	e055      	b.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002728:	2b02      	cmp	r3, #2
 800272a:	d151      	bne.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b22      	cmp	r3, #34	; 0x22
 8002730:	d10d      	bne.n	800274e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002740:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800274c:	e040      	b.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d015      	beq.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	2b21      	cmp	r3, #33	; 0x21
 800275c:	d112      	bne.n	8002784 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	781a      	ldrb	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	3b01      	subs	r3, #1
 800277c:	b29a      	uxth	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002782:	e025      	b.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002788:	b29b      	uxth	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d120      	bne.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800278e:	7bfb      	ldrb	r3, [r7, #15]
 8002790:	2b21      	cmp	r3, #33	; 0x21
 8002792:	d11d      	bne.n	80027d0 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027a2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2220      	movs	r2, #32
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff fe36 	bl	800243c <HAL_I2C_MemTxCpltCallback>
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b22      	cmp	r3, #34	; 0x22
 80027ea:	f040 80a2 	bne.w	8002932 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d921      	bls.n	8002840 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b03      	cmp	r3, #3
 800282a:	f040 8082 	bne.w	8002932 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800283c:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800283e:	e078      	b.n	8002932 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	2b02      	cmp	r3, #2
 8002846:	d074      	beq.n	8002932 <I2C_MasterReceive_RXNE+0x15a>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d002      	beq.n	8002854 <I2C_MasterReceive_RXNE+0x7c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d16e      	bne.n	8002932 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f001 f81d 	bl	8003894 <I2C_WaitOnSTOPRequestThroughIT>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d142      	bne.n	80028e6 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800287e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d10a      	bne.n	80028d0 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f7ff fdc1 	bl	8002450 <HAL_I2C_MemRxCpltCallback>
}
 80028ce:	e030      	b.n	8002932 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2212      	movs	r2, #18
 80028dc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fd76 	bl	80023d0 <HAL_I2C_MasterRxCpltCallback>
}
 80028e4:	e025      	b.n	8002932 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80028f4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fd99 	bl	8002464 <HAL_I2C_ErrorCallback>
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294c:	b29b      	uxth	r3, r3
 800294e:	2b04      	cmp	r3, #4
 8002950:	d11b      	bne.n	800298a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002960:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002974:	1c5a      	adds	r2, r3, #1
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800297e:	b29b      	uxth	r3, r3
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002988:	e0bd      	b.n	8002b06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800298e:	b29b      	uxth	r3, r3
 8002990:	2b03      	cmp	r3, #3
 8002992:	d129      	bne.n	80029e8 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d00a      	beq.n	80029c0 <I2C_MasterReceive_BTF+0x86>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d007      	beq.n	80029c0 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691a      	ldr	r2, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80029e6:	e08e      	b.n	8002b06 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d176      	bne.n	8002ae0 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d002      	beq.n	80029fe <I2C_MasterReceive_BTF+0xc4>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2b10      	cmp	r3, #16
 80029fc:	d108      	bne.n	8002a10 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e019      	b.n	8002a44 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d002      	beq.n	8002a1c <I2C_MasterReceive_BTF+0xe2>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d108      	bne.n	8002a2e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	e00a      	b.n	8002a44 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2b10      	cmp	r3, #16
 8002a32:	d007      	beq.n	8002a44 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a9e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	d10a      	bne.n	8002aca <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fcc4 	bl	8002450 <HAL_I2C_MemRxCpltCallback>
}
 8002ac8:	e01d      	b.n	8002b06 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2212      	movs	r2, #18
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff fc79 	bl	80023d0 <HAL_I2C_MasterRxCpltCallback>
}
 8002ade:	e012      	b.n	8002b06 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	b2d2      	uxtb	r2, r2
 8002aec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b40      	cmp	r3, #64	; 0x40
 8002b20:	d117      	bne.n	8002b52 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b3a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002b3c:	e067      	b.n	8002c0e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	611a      	str	r2, [r3, #16]
}
 8002b50:	e05d      	b.n	8002c0e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b5a:	d133      	bne.n	8002bc4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b21      	cmp	r3, #33	; 0x21
 8002b66:	d109      	bne.n	8002b7c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e008      	b.n	8002b8e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d004      	beq.n	8002ba0 <I2C_Master_SB+0x92>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d108      	bne.n	8002bb2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d032      	beq.n	8002c0e <I2C_Master_SB+0x100>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02d      	beq.n	8002c0e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bc0:	605a      	str	r2, [r3, #4]
}
 8002bc2:	e024      	b.n	8002c0e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10e      	bne.n	8002bea <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	11db      	asrs	r3, r3, #7
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	f003 0306 	and.w	r3, r3, #6
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	f063 030f 	orn	r3, r3, #15
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	611a      	str	r2, [r3, #16]
}
 8002be8:	e011      	b.n	8002c0e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10d      	bne.n	8002c0e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	11db      	asrs	r3, r3, #7
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	f003 0306 	and.w	r3, r3, #6
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	f063 030e 	orn	r3, r3, #14
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	611a      	str	r2, [r3, #16]
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d004      	beq.n	8002c40 <I2C_Master_ADD10+0x26>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00c      	beq.n	8002c62 <I2C_Master_ADD10+0x48>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c60:	605a      	str	r2, [r3, #4]
  }
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b091      	sub	sp, #68	; 0x44
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	2b22      	cmp	r3, #34	; 0x22
 8002c96:	f040 8169 	bne.w	8002f6c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10f      	bne.n	8002cc2 <I2C_Master_ADDR+0x54>
 8002ca2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d10b      	bne.n	8002cc2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002caa:	2300      	movs	r3, #0
 8002cac:	633b      	str	r3, [r7, #48]	; 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	e160      	b.n	8002f84 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d11d      	bne.n	8002d06 <I2C_Master_ADDR+0x98>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002cd2:	d118      	bne.n	8002d06 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	651a      	str	r2, [r3, #80]	; 0x50
 8002d04:	e13e      	b.n	8002f84 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d113      	bne.n	8002d38 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e115      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	f040 808a 	bne.w	8002e58 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d4a:	d137      	bne.n	8002dbc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d5a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d6a:	d113      	bne.n	8002d94 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d7a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	e0e7      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	623b      	str	r3, [r7, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	e0d3      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d02e      	beq.n	8002e20 <I2C_Master_ADDR+0x1b2>
 8002dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d02b      	beq.n	8002e20 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dca:	2b12      	cmp	r3, #18
 8002dcc:	d102      	bne.n	8002dd4 <I2C_Master_ADDR+0x166>
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d125      	bne.n	8002e20 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d00e      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d00b      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
 8002de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de2:	2b10      	cmp	r3, #16
 8002de4:	d008      	beq.n	8002df8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	e007      	b.n	8002e08 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	61fb      	str	r3, [r7, #28]
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	e0a1      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e2e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e30:	2300      	movs	r3, #0
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	61bb      	str	r3, [r7, #24]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e085      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d14d      	bne.n	8002efe <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d016      	beq.n	8002e96 <I2C_Master_ADDR+0x228>
 8002e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d013      	beq.n	8002e96 <I2C_Master_ADDR+0x228>
 8002e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e70:	2b10      	cmp	r3, #16
 8002e72:	d010      	beq.n	8002e96 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e82:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	e007      	b.n	8002ea6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb4:	d117      	bne.n	8002ee6 <I2C_Master_ADDR+0x278>
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ebc:	d00b      	beq.n	8002ed6 <I2C_Master_ADDR+0x268>
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d008      	beq.n	8002ed6 <I2C_Master_ADDR+0x268>
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d005      	beq.n	8002ed6 <I2C_Master_ADDR+0x268>
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d002      	beq.n	8002ed6 <I2C_Master_ADDR+0x268>
 8002ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d107      	bne.n	8002ee6 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ee4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e032      	b.n	8002f64 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f0c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f1c:	d117      	bne.n	8002f4e <I2C_Master_ADDR+0x2e0>
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f24:	d00b      	beq.n	8002f3e <I2C_Master_ADDR+0x2d0>
 8002f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d008      	beq.n	8002f3e <I2C_Master_ADDR+0x2d0>
 8002f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d005      	beq.n	8002f3e <I2C_Master_ADDR+0x2d0>
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	2b10      	cmp	r3, #16
 8002f36:	d002      	beq.n	8002f3e <I2C_Master_ADDR+0x2d0>
 8002f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d107      	bne.n	8002f4e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f4c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002f6a:	e00b      	b.n	8002f84 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	60fb      	str	r3, [r7, #12]
 8002f80:	68fb      	ldr	r3, [r7, #12]
}
 8002f82:	e7ff      	b.n	8002f84 <I2C_Master_ADDR+0x316>
 8002f84:	bf00      	nop
 8002f86:	3744      	adds	r7, #68	; 0x44
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d02b      	beq.n	8003002 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d114      	bne.n	8003002 <I2C_SlaveTransmit_TXE+0x72>
 8002fd8:	7bfb      	ldrb	r3, [r7, #15]
 8002fda:	2b29      	cmp	r3, #41	; 0x29
 8002fdc:	d111      	bne.n	8003002 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fec:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2221      	movs	r2, #33	; 0x21
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2228      	movs	r2, #40	; 0x28
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f7ff f9f1 	bl	80023e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003002:	bf00      	nop
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d011      	beq.n	8003040 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d02c      	beq.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29b      	uxth	r3, r3
 8003084:	3b01      	subs	r3, #1
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003090:	b29b      	uxth	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d114      	bne.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b2a      	cmp	r3, #42	; 0x2a
 800309a:	d111      	bne.n	80030c0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030aa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2222      	movs	r2, #34	; 0x22
 80030b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2228      	movs	r2, #40	; 0x28
 80030b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7ff f99c 	bl	80023f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d012      	beq.n	8003100 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	1c5a      	adds	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003120:	b2db      	uxtb	r3, r3
 8003122:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003126:	2b28      	cmp	r3, #40	; 0x28
 8003128:	d127      	bne.n	800317a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	089b      	lsrs	r3, r3, #2
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	09db      	lsrs	r3, r3, #7
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	81bb      	strh	r3, [r7, #12]
 800315c:	e002      	b.n	8003164 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800316c:	89ba      	ldrh	r2, [r7, #12]
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff f94a 	bl	800240c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003178:	e00e      	b.n	8003198 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80031c0:	2300      	movs	r3, #0
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fc:	d172      	bne.n	80032e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	2b22      	cmp	r3, #34	; 0x22
 8003202:	d002      	beq.n	800320a <I2C_Slave_STOPF+0x6a>
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b2a      	cmp	r3, #42	; 0x2a
 8003208:	d135      	bne.n	8003276 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	b29a      	uxth	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800323c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fb02 	bl	800184c <HAL_DMA_GetState>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d049      	beq.n	80032e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	4a69      	ldr	r2, [pc, #420]	; (80033f8 <I2C_Slave_STOPF+0x258>)
 8003254:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe f94a 	bl	80014f4 <HAL_DMA_Abort_IT>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d03d      	beq.n	80032e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003270:	4610      	mov	r0, r2
 8003272:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003274:	e035      	b.n	80032e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d005      	beq.n	800329a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f043 0204 	orr.w	r2, r3, #4
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe facc 	bl	800184c <HAL_DMA_GetState>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d014      	beq.n	80032e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4a4e      	ldr	r2, [pc, #312]	; (80033f8 <I2C_Slave_STOPF+0x258>)
 80032c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fe f914 	bl	80014f4 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d008      	beq.n	80032e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
 80032e0:	e000      	b.n	80032e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80032e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d03e      	beq.n	800336c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d112      	bne.n	8003322 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003318:	b29b      	uxth	r3, r3
 800331a:	3b01      	subs	r3, #1
 800331c:	b29a      	uxth	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	2b40      	cmp	r3, #64	; 0x40
 800332e:	d112      	bne.n	8003356 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 f8b3 	bl	80034e0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800337a:	e039      	b.n	80033f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b2a      	cmp	r3, #42	; 0x2a
 8003380:	d109      	bne.n	8003396 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2228      	movs	r2, #40	; 0x28
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff f831 	bl	80023f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b28      	cmp	r3, #40	; 0x28
 80033a0:	d111      	bne.n	80033c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a15      	ldr	r2, [pc, #84]	; (80033fc <I2C_Slave_STOPF+0x25c>)
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2220      	movs	r2, #32
 80033b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff f832 	bl	8002428 <HAL_I2C_ListenCpltCallback>
}
 80033c4:	e014      	b.n	80033f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2b22      	cmp	r3, #34	; 0x22
 80033cc:	d002      	beq.n	80033d4 <I2C_Slave_STOPF+0x234>
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b22      	cmp	r3, #34	; 0x22
 80033d2:	d10d      	bne.n	80033f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff f804 	bl	80023f8 <HAL_I2C_SlaveRxCpltCallback>
}
 80033f0:	bf00      	nop
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	08003745 	.word	0x08003745
 80033fc:	ffff0000 	.word	0xffff0000

08003400 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b08      	cmp	r3, #8
 800341a:	d002      	beq.n	8003422 <I2C_Slave_AF+0x22>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b20      	cmp	r3, #32
 8003420:	d129      	bne.n	8003476 <I2C_Slave_AF+0x76>
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b28      	cmp	r3, #40	; 0x28
 8003426:	d126      	bne.n	8003476 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2c      	ldr	r2, [pc, #176]	; (80034dc <I2C_Slave_AF+0xdc>)
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800343c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003446:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003456:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe ffda 	bl	8002428 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003474:	e02e      	b.n	80034d4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b21      	cmp	r3, #33	; 0x21
 800347a:	d126      	bne.n	80034ca <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a17      	ldr	r2, [pc, #92]	; (80034dc <I2C_Slave_AF+0xdc>)
 8003480:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2221      	movs	r2, #33	; 0x21
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80034a6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034b0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe ff8e 	bl	80023e4 <HAL_I2C_SlaveTxCpltCallback>
}
 80034c8:	e004      	b.n	80034d4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034d2:	615a      	str	r2, [r3, #20]
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80034f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	2b10      	cmp	r3, #16
 80034fc:	d002      	beq.n	8003504 <I2C_ITError+0x24>
 80034fe:	7bbb      	ldrb	r3, [r7, #14]
 8003500:	2b40      	cmp	r3, #64	; 0x40
 8003502:	d10a      	bne.n	800351a <I2C_ITError+0x3a>
 8003504:	7bfb      	ldrb	r3, [r7, #15]
 8003506:	2b22      	cmp	r3, #34	; 0x22
 8003508:	d107      	bne.n	800351a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003518:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003520:	2b28      	cmp	r3, #40	; 0x28
 8003522:	d107      	bne.n	8003534 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2228      	movs	r2, #40	; 0x28
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003532:	e015      	b.n	8003560 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003542:	d00a      	beq.n	800355a <I2C_ITError+0x7a>
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	2b60      	cmp	r3, #96	; 0x60
 8003548:	d007      	beq.n	800355a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d162      	bne.n	8003636 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685a      	ldr	r2, [r3, #4]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b01      	cmp	r3, #1
 800358c:	d020      	beq.n	80035d0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003592:	4a6a      	ldr	r2, [pc, #424]	; (800373c <I2C_ITError+0x25c>)
 8003594:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359a:	4618      	mov	r0, r3
 800359c:	f7fd ffaa 	bl	80014f4 <HAL_DMA_Abort_IT>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8089 	beq.w	80036ba <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0201 	bic.w	r2, r2, #1
 80035b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ca:	4610      	mov	r0, r2
 80035cc:	4798      	blx	r3
 80035ce:	e074      	b.n	80036ba <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	4a59      	ldr	r2, [pc, #356]	; (800373c <I2C_ITError+0x25c>)
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd ff89 	bl	80014f4 <HAL_DMA_Abort_IT>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d068      	beq.n	80036ba <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d10b      	bne.n	800360e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	691a      	ldr	r2, [r3, #16]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003630:	4610      	mov	r0, r2
 8003632:	4798      	blx	r3
 8003634:	e041      	b.n	80036ba <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b60      	cmp	r3, #96	; 0x60
 8003640:	d125      	bne.n	800368e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365a:	2b40      	cmp	r3, #64	; 0x40
 800365c:	d10b      	bne.n	8003676 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0201 	bic.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe fef6 	bl	8002478 <HAL_I2C_AbortCpltCallback>
 800368c:	e015      	b.n	80036ba <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003698:	2b40      	cmp	r3, #64	; 0x40
 800369a:	d10b      	bne.n	80036b4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	1c5a      	adds	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fe fed5 	bl	8002464 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10e      	bne.n	80036e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d007      	beq.n	80036f8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b04      	cmp	r3, #4
 800370a:	d113      	bne.n	8003734 <I2C_ITError+0x254>
 800370c:	7bfb      	ldrb	r3, [r7, #15]
 800370e:	2b28      	cmp	r3, #40	; 0x28
 8003710:	d110      	bne.n	8003734 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <I2C_ITError+0x260>)
 8003716:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fe fe7a 	bl	8002428 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003734:	bf00      	nop
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	08003745 	.word	0x08003745
 8003740:	ffff0000 	.word	0xffff0000

08003744 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800375e:	4b4b      	ldr	r3, [pc, #300]	; (800388c <I2C_DMAAbort+0x148>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	4a4a      	ldr	r2, [pc, #296]	; (8003890 <I2C_DMAAbort+0x14c>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	0a1a      	lsrs	r2, r3, #8
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	00da      	lsls	r2, r3, #3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f043 0220 	orr.w	r2, r3, #32
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800378a:	e00a      	b.n	80037a2 <I2C_DMAAbort+0x5e>
    }
    count--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037a0:	d0ea      	beq.n	8003778 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ae:	2200      	movs	r2, #0
 80037b0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037be:	2200      	movs	r2, #0
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	2200      	movs	r2, #0
 80037d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e4:	2200      	movs	r2, #0
 80037e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0201 	bic.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d10e      	bne.n	8003832 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800382a:	6978      	ldr	r0, [r7, #20]
 800382c:	f7fe fe24 	bl	8002478 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003830:	e027      	b.n	8003882 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003832:	7cfb      	ldrb	r3, [r7, #19]
 8003834:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003838:	2b28      	cmp	r3, #40	; 0x28
 800383a:	d117      	bne.n	800386c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0201 	orr.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800385a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2228      	movs	r2, #40	; 0x28
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800386a:	e007      	b.n	800387c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	f7fe fdf1 	bl	8002464 <HAL_I2C_ErrorCallback>
}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20000000 	.word	0x20000000
 8003890:	14f8b589 	.word	0x14f8b589

08003894 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0a1a      	lsrs	r2, r3, #8
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e008      	b.n	80038e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e0:	d0e9      	beq.n	80038b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	20000000 	.word	0x20000000
 80038f4:	14f8b589 	.word	0x14f8b589

080038f8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003908:	d103      	bne.n	8003912 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003910:	e007      	b.n	8003922 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800391a:	d102      	bne.n	8003922 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2208      	movs	r2, #8
 8003920:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b084      	sub	sp, #16
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d101      	bne.n	8003944 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e03e      	b.n	80039c2 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f7fd fa4f 	bl	8000dfc <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3304      	adds	r3, #4
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f002 fbe5 	bl	8006138 <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	f002 fc1f 	bl	80061bc <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	f002 fc4d 	bl	8006228 <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b10      	cmp	r3, #16
 8003994:	d108      	bne.n	80039a8 <HAL_NAND_Init+0x7a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0204 	orr.w	r2, r2, #4
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e007      	b.n	80039b8 <HAL_NAND_Init+0x8a>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1a      	ldr	r2, [r3, #32]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0204 	orr.w	r2, r2, #4
 80039b6:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d10a      	bne.n	80039f0 <HAL_NAND_IRQHandler+0x26>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf0c      	ite	eq
 80039e8:	2301      	moveq	r3, #1
 80039ea:	2300      	movne	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e009      	b.n	8003a04 <HAL_NAND_IRQHandler+0x3a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d017      	beq.n	8003a38 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8b2 	bl	8003b72 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b10      	cmp	r3, #16
 8003a14:	d108      	bne.n	8003a28 <HAL_NAND_IRQHandler+0x5e>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	e007      	b.n	8003a38 <HAL_NAND_IRQHandler+0x6e>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10a      	bne.n	8003a56 <HAL_NAND_IRQHandler+0x8c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	bf0c      	ite	eq
 8003a4e:	2301      	moveq	r3, #1
 8003a50:	2300      	movne	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	e009      	b.n	8003a6a <HAL_NAND_IRQHandler+0xa0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	bf0c      	ite	eq
 8003a64:	2301      	moveq	r3, #1
 8003a66:	2300      	movne	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d017      	beq.n	8003a9e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f87f 	bl	8003b72 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d108      	bne.n	8003a8e <HAL_NAND_IRQHandler+0xc4>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0202 	bic.w	r2, r2, #2
 8003a8a:	605a      	str	r2, [r3, #4]
 8003a8c:	e007      	b.n	8003a9e <HAL_NAND_IRQHandler+0xd4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0202 	bic.w	r2, r2, #2
 8003a9c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b10      	cmp	r3, #16
 8003aa4:	d10a      	bne.n	8003abc <HAL_NAND_IRQHandler+0xf2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 0304 	and.w	r3, r3, #4
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2301      	moveq	r3, #1
 8003ab6:	2300      	movne	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	e009      	b.n	8003ad0 <HAL_NAND_IRQHandler+0x106>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b04      	cmp	r3, #4
 8003ac8:	bf0c      	ite	eq
 8003aca:	2301      	moveq	r3, #1
 8003acc:	2300      	movne	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f84c 	bl	8003b72 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b10      	cmp	r3, #16
 8003ae0:	d108      	bne.n	8003af4 <HAL_NAND_IRQHandler+0x12a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0204 	bic.w	r2, r2, #4
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e007      	b.n	8003b04 <HAL_NAND_IRQHandler+0x13a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f022 0204 	bic.w	r2, r2, #4
 8003b02:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b10      	cmp	r3, #16
 8003b0a:	d10a      	bne.n	8003b22 <HAL_NAND_IRQHandler+0x158>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	e009      	b.n	8003b36 <HAL_NAND_IRQHandler+0x16c>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	2b40      	cmp	r3, #64	; 0x40
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d017      	beq.n	8003b6a <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f819 	bl	8003b72 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d108      	bne.n	8003b5a <HAL_NAND_IRQHandler+0x190>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b56:	605a      	str	r2, [r3, #4]
  }
}
 8003b58:	e007      	b.n	8003b6a <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b6a:	bf00      	nop
 8003b6c:	3708      	adds	r7, #8
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <HAL_NAND_ITCallback>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval None
  */
__weak void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hnand);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_NAND_ITCallback could be implemented in the user file
   */
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e264      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d075      	beq.n	8003c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ba6:	4ba3      	ldr	r3, [pc, #652]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d00c      	beq.n	8003bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb2:	4ba0      	ldr	r3, [pc, #640]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d112      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bbe:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bca:	d10b      	bne.n	8003be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bcc:	4b99      	ldr	r3, [pc, #612]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d05b      	beq.n	8003c90 <HAL_RCC_OscConfig+0x108>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d157      	bne.n	8003c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e23f      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bec:	d106      	bne.n	8003bfc <HAL_RCC_OscConfig+0x74>
 8003bee:	4b91      	ldr	r3, [pc, #580]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a90      	ldr	r2, [pc, #576]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x98>
 8003c06:	4b8b      	ldr	r3, [pc, #556]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a8a      	ldr	r2, [pc, #552]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b88      	ldr	r3, [pc, #544]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a87      	ldr	r2, [pc, #540]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xb0>
 8003c20:	4b84      	ldr	r3, [pc, #528]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a83      	ldr	r2, [pc, #524]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a80      	ldr	r2, [pc, #512]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd fa28 	bl	8001094 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd fa24 	bl	8001094 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e204      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xc0>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd fa14 	bl	8001094 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd fa10 	bl	8001094 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1f0      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0xe8>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c9e:	4b65      	ldr	r3, [pc, #404]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003caa:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb6:	4b5f      	ldr	r3, [pc, #380]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b5c      	ldr	r3, [pc, #368]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x152>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1c4      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b56      	ldr	r3, [pc, #344]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4952      	ldr	r1, [pc, #328]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b4f      	ldr	r3, [pc, #316]	; (8003e38 <HAL_RCC_OscConfig+0x2b0>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cfe:	f7fd f9c9 	bl	8001094 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fd f9c5 	bl	8001094 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1a5      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b46      	ldr	r3, [pc, #280]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4940      	ldr	r1, [pc, #256]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b3f      	ldr	r3, [pc, #252]	; (8003e38 <HAL_RCC_OscConfig+0x2b0>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d40:	f7fd f9a8 	bl	8001094 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd f9a4 	bl	8001094 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e184      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b36      	ldr	r3, [pc, #216]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d030      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d016      	beq.n	8003da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCC_OscConfig+0x2b4>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d80:	f7fd f988 	bl	8001094 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd f984 	bl	8001094 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e164      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x200>
 8003da6:	e015      	b.n	8003dd4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da8:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_OscConfig+0x2b4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dae:	f7fd f971 	bl	8001094 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db6:	f7fd f96d 	bl	8001094 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e14d      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80a0 	beq.w	8003f22 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b13      	ldr	r3, [pc, #76]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10f      	bne.n	8003e12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <HAL_RCC_OscConfig+0x2ac>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	60bb      	str	r3, [r7, #8]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <HAL_RCC_OscConfig+0x2b8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d121      	bne.n	8003e62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_RCC_OscConfig+0x2b8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <HAL_RCC_OscConfig+0x2b8>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e2a:	f7fd f933 	bl	8001094 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e30:	e011      	b.n	8003e56 <HAL_RCC_OscConfig+0x2ce>
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	42470000 	.word	0x42470000
 8003e3c:	42470e80 	.word	0x42470e80
 8003e40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e44:	f7fd f926 	bl	8001094 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e106      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e56:	4b85      	ldr	r3, [pc, #532]	; (800406c <HAL_RCC_OscConfig+0x4e4>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d106      	bne.n	8003e78 <HAL_RCC_OscConfig+0x2f0>
 8003e6a:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a80      	ldr	r2, [pc, #512]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e01c      	b.n	8003eb2 <HAL_RCC_OscConfig+0x32a>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d10c      	bne.n	8003e9a <HAL_RCC_OscConfig+0x312>
 8003e80:	4b7b      	ldr	r3, [pc, #492]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e84:	4a7a      	ldr	r2, [pc, #488]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8c:	4b78      	ldr	r3, [pc, #480]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	4a77      	ldr	r2, [pc, #476]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	6713      	str	r3, [r2, #112]	; 0x70
 8003e98:	e00b      	b.n	8003eb2 <HAL_RCC_OscConfig+0x32a>
 8003e9a:	4b75      	ldr	r3, [pc, #468]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a74      	ldr	r2, [pc, #464]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003ea0:	f023 0301 	bic.w	r3, r3, #1
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea6:	4b72      	ldr	r3, [pc, #456]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eaa:	4a71      	ldr	r2, [pc, #452]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003eac:	f023 0304 	bic.w	r3, r3, #4
 8003eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d015      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eba:	f7fd f8eb 	bl	8001094 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec0:	e00a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec2:	f7fd f8e7 	bl	8001094 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e0c5      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed8:	4b65      	ldr	r3, [pc, #404]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ee      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x33a>
 8003ee4:	e014      	b.n	8003f10 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fd f8d5 	bl	8001094 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eec:	e00a      	b.n	8003f04 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd f8d1 	bl	8001094 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0af      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f04:	4b5a      	ldr	r3, [pc, #360]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ee      	bne.n	8003eee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f10:	7dfb      	ldrb	r3, [r7, #23]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f16:	4b56      	ldr	r3, [pc, #344]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	4a55      	ldr	r2, [pc, #340]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 809b 	beq.w	8004062 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2c:	4b50      	ldr	r3, [pc, #320]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d05c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d141      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_RCC_OscConfig+0x4ec>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd f8a5 	bl	8001094 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd f8a1 	bl	8001094 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e081      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f60:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	019b      	lsls	r3, r3, #6
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f82:	085b      	lsrs	r3, r3, #1
 8003f84:	3b01      	subs	r3, #1
 8003f86:	041b      	lsls	r3, r3, #16
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8e:	061b      	lsls	r3, r3, #24
 8003f90:	4937      	ldr	r1, [pc, #220]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f96:	4b37      	ldr	r3, [pc, #220]	; (8004074 <HAL_RCC_OscConfig+0x4ec>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f87a 	bl	8001094 <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa4:	f7fd f876 	bl	8001094 <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e056      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb6:	4b2e      	ldr	r3, [pc, #184]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x41c>
 8003fc2:	e04e      	b.n	8004062 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc4:	4b2b      	ldr	r3, [pc, #172]	; (8004074 <HAL_RCC_OscConfig+0x4ec>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fca:	f7fd f863 	bl	8001094 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fd f85f 	bl	8001094 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e03f      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x44a>
 8003ff0:	e037      	b.n	8004062 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e032      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ffe:	4b1c      	ldr	r3, [pc, #112]	; (8004070 <HAL_RCC_OscConfig+0x4e8>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d028      	beq.n	800405e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d121      	bne.n	800405e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d11a      	bne.n	800405e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800402e:	4013      	ands	r3, r2
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004034:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004036:	4293      	cmp	r3, r2
 8004038:	d111      	bne.n	800405e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800404a:	429a      	cmp	r2, r3
 800404c:	d107      	bne.n	800405e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800405a:	429a      	cmp	r2, r3
 800405c:	d001      	beq.n	8004062 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	40007000 	.word	0x40007000
 8004070:	40023800 	.word	0x40023800
 8004074:	42470060 	.word	0x42470060

08004078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d101      	bne.n	800408c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0cc      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800408c:	4b68      	ldr	r3, [pc, #416]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0307 	and.w	r3, r3, #7
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d90c      	bls.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	4b65      	ldr	r3, [pc, #404]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	b2d2      	uxtb	r2, r2
 80040a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e0b8      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d020      	beq.n	8004102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040cc:	4b59      	ldr	r3, [pc, #356]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	4a58      	ldr	r2, [pc, #352]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e4:	4b53      	ldr	r3, [pc, #332]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	4a52      	ldr	r2, [pc, #328]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f0:	4b50      	ldr	r3, [pc, #320]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	494d      	ldr	r1, [pc, #308]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d044      	beq.n	8004198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d107      	bne.n	8004126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d119      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e07f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d003      	beq.n	8004136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004132:	2b03      	cmp	r3, #3
 8004134:	d107      	bne.n	8004146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004136:	4b3f      	ldr	r3, [pc, #252]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d109      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004146:	4b3b      	ldr	r3, [pc, #236]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e067      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 0203 	bic.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4934      	ldr	r1, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004168:	f7fc ff94 	bl	8001094 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fc ff90 	bl	8001094 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04f      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004186:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 020c 	and.w	r2, r3, #12
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	429a      	cmp	r2, r3
 8004196:	d1eb      	bne.n	8004170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d20c      	bcs.n	80041c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041a6:	4b22      	ldr	r3, [pc, #136]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e032      	b.n	8004226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d008      	beq.n	80041de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041cc:	4b19      	ldr	r3, [pc, #100]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	4916      	ldr	r1, [pc, #88]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ea:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	490e      	ldr	r1, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fe:	f000 f821 	bl	8004244 <HAL_RCC_GetSysClockFreq>
 8004202:	4602      	mov	r2, r0
 8004204:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	490a      	ldr	r1, [pc, #40]	; (8004238 <HAL_RCC_ClockConfig+0x1c0>)
 8004210:	5ccb      	ldrb	r3, [r1, r3]
 8004212:	fa22 f303 	lsr.w	r3, r2, r3
 8004216:	4a09      	ldr	r2, [pc, #36]	; (800423c <HAL_RCC_ClockConfig+0x1c4>)
 8004218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800421a:	4b09      	ldr	r3, [pc, #36]	; (8004240 <HAL_RCC_ClockConfig+0x1c8>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4618      	mov	r0, r3
 8004220:	f7fc fdf6 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40023c00 	.word	0x40023c00
 8004234:	40023800 	.word	0x40023800
 8004238:	080093e4 	.word	0x080093e4
 800423c:	20000000 	.word	0x20000000
 8004240:	20000004 	.word	0x20000004

08004244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004244:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	607b      	str	r3, [r7, #4]
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	2300      	movs	r3, #0
 8004256:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800425c:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d00d      	beq.n	8004284 <HAL_RCC_GetSysClockFreq+0x40>
 8004268:	2b08      	cmp	r3, #8
 800426a:	f200 80bd 	bhi.w	80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x34>
 8004272:	2b04      	cmp	r3, #4
 8004274:	d003      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x3a>
 8004276:	e0b7      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004278:	4b61      	ldr	r3, [pc, #388]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800427a:	60bb      	str	r3, [r7, #8]
       break;
 800427c:	e0b7      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800427e:	4b61      	ldr	r3, [pc, #388]	; (8004404 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004280:	60bb      	str	r3, [r7, #8]
      break;
 8004282:	e0b4      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004284:	4b5d      	ldr	r3, [pc, #372]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800428c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800428e:	4b5b      	ldr	r3, [pc, #364]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d04d      	beq.n	8004336 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429a:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	099b      	lsrs	r3, r3, #6
 80042a0:	461a      	mov	r2, r3
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042aa:	f04f 0100 	mov.w	r1, #0
 80042ae:	ea02 0800 	and.w	r8, r2, r0
 80042b2:	ea03 0901 	and.w	r9, r3, r1
 80042b6:	4640      	mov	r0, r8
 80042b8:	4649      	mov	r1, r9
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	014b      	lsls	r3, r1, #5
 80042c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042c8:	0142      	lsls	r2, r0, #5
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	ebb0 0008 	subs.w	r0, r0, r8
 80042d2:	eb61 0109 	sbc.w	r1, r1, r9
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	018b      	lsls	r3, r1, #6
 80042e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80042e4:	0182      	lsls	r2, r0, #6
 80042e6:	1a12      	subs	r2, r2, r0
 80042e8:	eb63 0301 	sbc.w	r3, r3, r1
 80042ec:	f04f 0000 	mov.w	r0, #0
 80042f0:	f04f 0100 	mov.w	r1, #0
 80042f4:	00d9      	lsls	r1, r3, #3
 80042f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042fa:	00d0      	lsls	r0, r2, #3
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	eb12 0208 	adds.w	r2, r2, r8
 8004304:	eb43 0309 	adc.w	r3, r3, r9
 8004308:	f04f 0000 	mov.w	r0, #0
 800430c:	f04f 0100 	mov.w	r1, #0
 8004310:	0259      	lsls	r1, r3, #9
 8004312:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004316:	0250      	lsls	r0, r2, #9
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	461a      	mov	r2, r3
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	f7fb ff52 	bl	80001d0 <__aeabi_uldivmod>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4613      	mov	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e04a      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004336:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	099b      	lsrs	r3, r3, #6
 800433c:	461a      	mov	r2, r3
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	ea02 0400 	and.w	r4, r2, r0
 800434e:	ea03 0501 	and.w	r5, r3, r1
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	014b      	lsls	r3, r1, #5
 8004360:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004364:	0142      	lsls	r2, r0, #5
 8004366:	4610      	mov	r0, r2
 8004368:	4619      	mov	r1, r3
 800436a:	1b00      	subs	r0, r0, r4
 800436c:	eb61 0105 	sbc.w	r1, r1, r5
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	018b      	lsls	r3, r1, #6
 800437a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800437e:	0182      	lsls	r2, r0, #6
 8004380:	1a12      	subs	r2, r2, r0
 8004382:	eb63 0301 	sbc.w	r3, r3, r1
 8004386:	f04f 0000 	mov.w	r0, #0
 800438a:	f04f 0100 	mov.w	r1, #0
 800438e:	00d9      	lsls	r1, r3, #3
 8004390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004394:	00d0      	lsls	r0, r2, #3
 8004396:	4602      	mov	r2, r0
 8004398:	460b      	mov	r3, r1
 800439a:	1912      	adds	r2, r2, r4
 800439c:	eb45 0303 	adc.w	r3, r5, r3
 80043a0:	f04f 0000 	mov.w	r0, #0
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	0299      	lsls	r1, r3, #10
 80043aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043ae:	0290      	lsls	r0, r2, #10
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4610      	mov	r0, r2
 80043b6:	4619      	mov	r1, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	461a      	mov	r2, r3
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f7fb ff06 	bl	80001d0 <__aeabi_uldivmod>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4613      	mov	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	0c1b      	lsrs	r3, r3, #16
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	3301      	adds	r3, #1
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	60bb      	str	r3, [r7, #8]
      break;
 80043e6:	e002      	b.n	80043ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80043ea:	60bb      	str	r3, [r7, #8]
      break;
 80043ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ee:	68bb      	ldr	r3, [r7, #8]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	00f42400 	.word	0x00f42400
 8004404:	007a1200 	.word	0x007a1200

08004408 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <HAL_RCC_GetHCLKFreq+0x14>)
 800440e:	681b      	ldr	r3, [r3, #0]
}
 8004410:	4618      	mov	r0, r3
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	20000000 	.word	0x20000000

08004420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004424:	f7ff fff0 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetPCLK1Freq+0x20>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	0a9b      	lsrs	r3, r3, #10
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800443c:	4618      	mov	r0, r3
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40023800 	.word	0x40023800
 8004444:	080093f4 	.word	0x080093f4

08004448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800444c:	f7ff ffdc 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004450:	4602      	mov	r2, r0
 8004452:	4b05      	ldr	r3, [pc, #20]	; (8004468 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <HAL_RCC_GetPCLK2Freq+0x24>)
 800445e:	5ccb      	ldrb	r3, [r1, r3]
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004464:	4618      	mov	r0, r3
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40023800 	.word	0x40023800
 800446c:	080093f4 	.word	0x080093f4

08004470 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	220f      	movs	r2, #15
 800447e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004480:	4b12      	ldr	r3, [pc, #72]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0203 	and.w	r2, r3, #3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80044a4:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_GetClockConfig+0x5c>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	08db      	lsrs	r3, r3, #3
 80044aa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <HAL_RCC_GetClockConfig+0x60>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0207 	and.w	r2, r3, #7
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40023c00 	.word	0x40023c00

080044d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d105      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d035      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044fc:	4b62      	ldr	r3, [pc, #392]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004502:	f7fc fdc7 	bl	8001094 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004508:	e008      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800450a:	f7fc fdc3 	bl	8001094 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0b0      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800451c:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f0      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	019a      	lsls	r2, r3, #6
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	071b      	lsls	r3, r3, #28
 8004534:	4955      	ldr	r1, [pc, #340]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800453c:	4b52      	ldr	r3, [pc, #328]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800453e:	2201      	movs	r2, #1
 8004540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004542:	f7fc fda7 	bl	8001094 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004548:	e008      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800454a:	f7fc fda3 	bl	8001094 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e090      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800455c:	4b4b      	ldr	r3, [pc, #300]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8083 	beq.w	800467c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	4b44      	ldr	r3, [pc, #272]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a43      	ldr	r2, [pc, #268]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004592:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a3e      	ldr	r2, [pc, #248]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800459e:	f7fc fd79 	bl	8001094 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80045a6:	f7fc fd75 	bl	8001094 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e062      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045b8:	4b35      	ldr	r3, [pc, #212]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0f0      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02f      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d028      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045e2:	4b2a      	ldr	r3, [pc, #168]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045ec:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045f2:	4b28      	ldr	r3, [pc, #160]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045f8:	4a24      	ldr	r2, [pc, #144]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045fe:	4b23      	ldr	r3, [pc, #140]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b01      	cmp	r3, #1
 8004608:	d114      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800460a:	f7fc fd43 	bl	8001094 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004610:	e00a      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004612:	f7fc fd3f 	bl	8001094 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004620:	4293      	cmp	r3, r2
 8004622:	d901      	bls.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e02a      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004628:	4b18      	ldr	r3, [pc, #96]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0ee      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004640:	d10d      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004656:	490d      	ldr	r1, [pc, #52]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]
 800465c:	e005      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004664:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004668:	6093      	str	r3, [r2, #8]
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004676:	4905      	ldr	r1, [pc, #20]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004678:	4313      	orrs	r3, r2
 800467a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	42470068 	.word	0x42470068
 800468c:	40023800 	.word	0x40023800
 8004690:	40007000 	.word	0x40007000
 8004694:	42470e40 	.word	0x42470e40

08004698 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e083      	b.n	80047b2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	7f5b      	ldrb	r3, [r3, #29]
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fa76 	bl	8000bac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	22ca      	movs	r2, #202	; 0xca
 80046cc:	625a      	str	r2, [r3, #36]	; 0x24
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2253      	movs	r2, #83	; 0x53
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f9fb 	bl	8004ad2 <RTC_EnterInitMode>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2204      	movs	r2, #4
 80046ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e05e      	b.n	80047b2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004706:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6899      	ldr	r1, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68d2      	ldr	r2, [r2, #12]
 800472e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6919      	ldr	r1, [r3, #16]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	041a      	lsls	r2, r3, #16
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004752:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10e      	bne.n	8004780 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f98d 	bl	8004a82 <HAL_RTC_WaitForSynchro>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d008      	beq.n	8004780 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	22ff      	movs	r2, #255	; 0xff
 8004774:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2204      	movs	r2, #4
 800477a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e018      	b.n	80047b2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	430a      	orrs	r2, r1
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	22ff      	movs	r2, #255	; 0xff
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80047b0:	2300      	movs	r3, #0
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047ba:	b590      	push	{r4, r7, lr}
 80047bc:	b087      	sub	sp, #28
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	7f1b      	ldrb	r3, [r3, #28]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_RTC_SetTime+0x1c>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e0aa      	b.n	800492c <HAL_RTC_SetTime+0x172>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2201      	movs	r2, #1
 80047da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2202      	movs	r2, #2
 80047e0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d126      	bne.n	8004836 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f992 	bl	8004b2a <RTC_ByteToBcd2>
 8004806:	4603      	mov	r3, r0
 8004808:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	785b      	ldrb	r3, [r3, #1]
 800480e:	4618      	mov	r0, r3
 8004810:	f000 f98b 	bl	8004b2a <RTC_ByteToBcd2>
 8004814:	4603      	mov	r3, r0
 8004816:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004818:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	789b      	ldrb	r3, [r3, #2]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 f983 	bl	8004b2a <RTC_ByteToBcd2>
 8004824:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004826:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	78db      	ldrb	r3, [r3, #3]
 800482e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
 8004834:	e018      	b.n	8004868 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004840:	2b00      	cmp	r3, #0
 8004842:	d102      	bne.n	800484a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2200      	movs	r2, #0
 8004848:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004856:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800485c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	78db      	ldrb	r3, [r3, #3]
 8004862:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	22ca      	movs	r2, #202	; 0xca
 800486e:	625a      	str	r2, [r3, #36]	; 0x24
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2253      	movs	r2, #83	; 0x53
 8004876:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f92a 	bl	8004ad2 <RTC_EnterInitMode>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	22ff      	movs	r2, #255	; 0xff
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2204      	movs	r2, #4
 8004890:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e047      	b.n	800492c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80048a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80048aa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80048ba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6899      	ldr	r1, [r3, #8]
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0320 	and.w	r3, r3, #32
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d111      	bne.n	8004916 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f000 f8c5 	bl	8004a82 <HAL_RTC_WaitForSynchro>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ff      	movs	r2, #255	; 0xff
 8004904:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2204      	movs	r2, #4
 800490a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e00a      	b.n	800492c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	22ff      	movs	r2, #255	; 0xff
 800491c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800492a:	2300      	movs	r3, #0
  }
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	bd90      	pop	{r4, r7, pc}

08004934 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004934:	b590      	push	{r4, r7, lr}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	7f1b      	ldrb	r3, [r3, #28]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_RTC_SetDate+0x1c>
 800494c:	2302      	movs	r3, #2
 800494e:	e094      	b.n	8004a7a <HAL_RTC_SetDate+0x146>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2202      	movs	r2, #2
 800495a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10e      	bne.n	8004980 <HAL_RTC_SetDate+0x4c>
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	785b      	ldrb	r3, [r3, #1]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	f023 0310 	bic.w	r3, r3, #16
 8004976:	b2db      	uxtb	r3, r3
 8004978:	330a      	adds	r3, #10
 800497a:	b2da      	uxtb	r2, r3
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d11c      	bne.n	80049c0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	78db      	ldrb	r3, [r3, #3]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f8cd 	bl	8004b2a <RTC_ByteToBcd2>
 8004990:	4603      	mov	r3, r0
 8004992:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 f8c6 	bl	8004b2a <RTC_ByteToBcd2>
 800499e:	4603      	mov	r3, r0
 80049a0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049a2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	789b      	ldrb	r3, [r3, #2]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f000 f8be 	bl	8004b2a <RTC_ByteToBcd2>
 80049ae:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80049b0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80049ba:	4313      	orrs	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	e00e      	b.n	80049de <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	785b      	ldrb	r3, [r3, #1]
 80049ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049cc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80049d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	22ca      	movs	r2, #202	; 0xca
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2253      	movs	r2, #83	; 0x53
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f86f 	bl	8004ad2 <RTC_EnterInitMode>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	22ff      	movs	r2, #255	; 0xff
 8004a00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2204      	movs	r2, #4
 8004a06:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e033      	b.n	8004a7a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004a1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004a20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a30:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d111      	bne.n	8004a64 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f81e 	bl	8004a82 <HAL_RTC_WaitForSynchro>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00b      	beq.n	8004a64 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	22ff      	movs	r2, #255	; 0xff
 8004a52:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2204      	movs	r2, #4
 8004a58:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e00a      	b.n	8004a7a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004a78:	2300      	movs	r3, #0
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd90      	pop	{r4, r7, pc}

08004a82 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a9c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9e:	f7fc faf9 	bl	8001094 <HAL_GetTick>
 8004aa2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004aa4:	e009      	b.n	8004aba <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004aa6:	f7fc faf5 	bl	8001094 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab4:	d901      	bls.n	8004aba <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e007      	b.n	8004aca <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0320 	and.w	r3, r3, #32
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0ee      	beq.n	8004aa6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b084      	sub	sp, #16
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d119      	bne.n	8004b20 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004af4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004af6:	f7fc facd 	bl	8001094 <HAL_GetTick>
 8004afa:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004afc:	e009      	b.n	8004b12 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004afe:	f7fc fac9 	bl	8001094 <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0c:	d901      	bls.n	8004b12 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e007      	b.n	8004b22 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ee      	beq.n	8004afe <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b085      	sub	sp, #20
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8004b38:	e005      	b.n	8004b46 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	3b0a      	subs	r3, #10
 8004b44:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	2b09      	cmp	r3, #9
 8004b4a:	d8f6      	bhi.n	8004b3a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	b2db      	uxtb	r3, r3
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e041      	b.n	8004bfc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7fc f839 	bl	8000c04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f000 fa95 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2201      	movs	r2, #1
 8004bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2201      	movs	r2, #1
 8004be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d001      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e04e      	b.n	8004cba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a23      	ldr	r2, [pc, #140]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d022      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d01d      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a1f      	ldr	r2, [pc, #124]	; (8004ccc <HAL_TIM_Base_Start_IT+0xc8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d018      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d013      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00e      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a19      	ldr	r2, [pc, #100]	; (8004cdc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_TIM_Base_Start_IT+0x80>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a18      	ldr	r2, [pc, #96]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d111      	bne.n	8004ca8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2b06      	cmp	r3, #6
 8004c94:	d010      	beq.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0201 	orr.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca6:	e007      	b.n	8004cb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0201 	orr.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40000400 	.word	0x40000400
 8004cd0:	40000800 	.word	0x40000800
 8004cd4:	40000c00 	.word	0x40000c00
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40014000 	.word	0x40014000
 8004ce0:	40001800 	.word	0x40001800

08004ce4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0302 	and.w	r3, r3, #2
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d122      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d11b      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0202 	mvn.w	r2, #2
 8004d10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f9b5 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004d2c:	e005      	b.n	8004d3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f9a7 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9b8 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d122      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b04      	cmp	r3, #4
 8004d5a:	d11b      	bne.n	8004d94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0204 	mvn.w	r2, #4
 8004d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699b      	ldr	r3, [r3, #24]
 8004d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d003      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 f98b 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004d80:	e005      	b.n	8004d8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f97d 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 f98e 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0208 	mvn.w	r2, #8
 8004db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f961 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f953 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f964 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b10      	cmp	r3, #16
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b10      	cmp	r3, #16
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0210 	mvn.w	r2, #16
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2208      	movs	r2, #8
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f937 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f929 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f93a 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10e      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d107      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0201 	mvn.w	r2, #1
 8004e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7fb fdca 	bl	80009fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d10e      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d107      	bne.n	8004e94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fae0 	bl	8005454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d10e      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eac:	2b40      	cmp	r3, #64	; 0x40
 8004eae:	d107      	bne.n	8004ec0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8ff 	bl	80050be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d10e      	bne.n	8004eec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b20      	cmp	r3, #32
 8004eda:	d107      	bne.n	8004eec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0220 	mvn.w	r2, #32
 8004ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 faaa 	bl	8005440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_TIM_ConfigClockSource+0x1c>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0b4      	b.n	800507a <HAL_TIM_ConfigClockSource+0x186>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d03e      	beq.n	8004fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	f200 8087 	bhi.w	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f56:	f000 8086 	beq.w	8005066 <HAL_TIM_ConfigClockSource+0x172>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d87f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b70      	cmp	r3, #112	; 0x70
 8004f62:	d01a      	beq.n	8004f9a <HAL_TIM_ConfigClockSource+0xa6>
 8004f64:	2b70      	cmp	r3, #112	; 0x70
 8004f66:	d87b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b60      	cmp	r3, #96	; 0x60
 8004f6a:	d050      	beq.n	800500e <HAL_TIM_ConfigClockSource+0x11a>
 8004f6c:	2b60      	cmp	r3, #96	; 0x60
 8004f6e:	d877      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f70:	2b50      	cmp	r3, #80	; 0x50
 8004f72:	d03c      	beq.n	8004fee <HAL_TIM_ConfigClockSource+0xfa>
 8004f74:	2b50      	cmp	r3, #80	; 0x50
 8004f76:	d873      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d058      	beq.n	800502e <HAL_TIM_ConfigClockSource+0x13a>
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d86f      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f80:	2b30      	cmp	r3, #48	; 0x30
 8004f82:	d064      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f84:	2b30      	cmp	r3, #48	; 0x30
 8004f86:	d86b      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f88:	2b20      	cmp	r3, #32
 8004f8a:	d060      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d867      	bhi.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d05c      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f94:	2b10      	cmp	r3, #16
 8004f96:	d05a      	beq.n	800504e <HAL_TIM_ConfigClockSource+0x15a>
 8004f98:	e062      	b.n	8005060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6818      	ldr	r0, [r3, #0]
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	6899      	ldr	r1, [r3, #8]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f000 f9ad 	bl	8005308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	609a      	str	r2, [r3, #8]
      break;
 8004fc6:	e04f      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6818      	ldr	r0, [r3, #0]
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685a      	ldr	r2, [r3, #4]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f000 f996 	bl	8005308 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	609a      	str	r2, [r3, #8]
      break;
 8004fec:	e03c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	6859      	ldr	r1, [r3, #4]
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	f000 f90a 	bl	8005214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2150      	movs	r1, #80	; 0x50
 8005006:	4618      	mov	r0, r3
 8005008:	f000 f963 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800500c:	e02c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6859      	ldr	r1, [r3, #4]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	f000 f929 	bl	8005272 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2160      	movs	r1, #96	; 0x60
 8005026:	4618      	mov	r0, r3
 8005028:	f000 f953 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800502c:	e01c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	6859      	ldr	r1, [r3, #4]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	461a      	mov	r2, r3
 800503c:	f000 f8ea 	bl	8005214 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2140      	movs	r1, #64	; 0x40
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f943 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800504c:	e00c      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f000 f93a 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800505e:	e003      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	73fb      	strb	r3, [r7, #15]
      break;
 8005064:	e000      	b.n	8005068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3d      	ldr	r2, [pc, #244]	; (80051ec <TIM_Base_SetConfig+0x118>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3b      	ldr	r2, [pc, #236]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d027      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <TIM_Base_SetConfig+0x118>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d023      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a29      	ldr	r2, [pc, #164]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <TIM_Base_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a27      	ldr	r2, [pc, #156]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a24      	ldr	r2, [pc, #144]	; (800520c <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40010400 	.word	0x40010400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800
 8005208:	40001800 	.word	0x40001800
 800520c:	40001c00 	.word	0x40001c00
 8005210:	40002000 	.word	0x40002000

08005214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	4313      	orrs	r3, r2
 8005248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f023 030a 	bic.w	r3, r3, #10
 8005250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005272:	b480      	push	{r7}
 8005274:	b087      	sub	sp, #28
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800529c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	031b      	lsls	r3, r3, #12
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	011b      	lsls	r3, r3, #4
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	371c      	adds	r7, #28
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e05a      	b.n	8005416 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a21      	ldr	r2, [pc, #132]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d022      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ac:	d01d      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1d      	ldr	r2, [pc, #116]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d018      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a1b      	ldr	r2, [pc, #108]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1a      	ldr	r2, [pc, #104]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00e      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d009      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a17      	ldr	r2, [pc, #92]	; (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d004      	beq.n	80053ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a15      	ldr	r2, [pc, #84]	; (800543c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d10c      	bne.n	8005404 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40010400 	.word	0x40010400
 8005438:	40014000 	.word	0x40014000
 800543c:	40001800 	.word	0x40001800

08005440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e03f      	b.n	80054fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fb fbde 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	; 0x24
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 fc7b 	bl	8005da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691a      	ldr	r2, [r3, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0ba      	sub	sp, #232	; 0xe8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_UART_IRQHandler+0x66>
 8005556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fb65 	bl	8005c32 <UART_Receive_IT>
      return;
 8005568:	e256      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800556a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80de 	beq.w	8005730 <HAL_UART_IRQHandler+0x22c>
 8005574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80d1 	beq.w	8005730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_UART_IRQHandler+0xae>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800559e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xd2>
 80055be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f043 0202 	orr.w	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xf6>
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d011      	beq.n	800562a <HAL_UART_IRQHandler+0x126>
 8005606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	f043 0208 	orr.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 81ed 	beq.w	8005a0e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_UART_IRQHandler+0x14e>
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 faf0 	bl	8005c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_UART_IRQHandler+0x17a>
 8005676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04f      	beq.n	800571e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9f8 	bl	8005a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d141      	bne.n	8005716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d9      	bne.n	8005692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d013      	beq.n	800570e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	4a7d      	ldr	r2, [pc, #500]	; (80058e0 <HAL_UART_IRQHandler+0x3dc>)
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fb fefe 	bl	80014f4 <HAL_DMA_Abort_IT>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005702:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	e00e      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f99a 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e00a      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f996 	bl	8005a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	e006      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f992 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800572a:	e170      	b.n	8005a0e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	bf00      	nop
    return;
 800572e:	e16e      	b.n	8005a0e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	f040 814a 	bne.w	80059ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8143 	beq.w	80059ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 813c 	beq.w	80059ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005756:	2300      	movs	r3, #0
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	f040 80b4 	bne.w	80058e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8140 	beq.w	8005a12 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800579a:	429a      	cmp	r2, r3
 800579c:	f080 8139 	bcs.w	8005a12 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b2:	f000 8088 	beq.w	80058c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80057e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80057ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80057fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005826:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800582a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800582e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005838:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e1      	bne.n	8005802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800584e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005862:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005864:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005868:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e3      	bne.n	800583e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80058aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e3      	bne.n	8005884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fb fda7 	bl	8001414 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	4619      	mov	r1, r3
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f8c0 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058dc:	e099      	b.n	8005a12 <HAL_UART_IRQHandler+0x50e>
 80058de:	bf00      	nop
 80058e0:	08005b3b 	.word	0x08005b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 808b 	beq.w	8005a16 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8086 	beq.w	8005a16 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	330c      	adds	r3, #12
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	e853 3f00 	ldrex	r3, [r3]
 8005918:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800591a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800591c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005920:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	330c      	adds	r3, #12
 800592a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800592e:	647a      	str	r2, [r7, #68]	; 0x44
 8005930:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005932:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005934:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005936:	e841 2300 	strex	r3, r2, [r1]
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1e3      	bne.n	800590a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	3314      	adds	r3, #20
 8005948:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	623b      	str	r3, [r7, #32]
   return(result);
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f023 0301 	bic.w	r3, r3, #1
 8005958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	3314      	adds	r3, #20
 8005962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005966:	633a      	str	r2, [r7, #48]	; 0x30
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800596c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e3      	bne.n	8005942 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	330c      	adds	r3, #12
 800598e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	60fb      	str	r3, [r7, #12]
   return(result);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0310 	bic.w	r3, r3, #16
 800599e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	330c      	adds	r3, #12
 80059a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059ac:	61fa      	str	r2, [r7, #28]
 80059ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69b9      	ldr	r1, [r7, #24]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e3      	bne.n	8005988 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f848 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059cc:	e023      	b.n	8005a16 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d009      	beq.n	80059ee <HAL_UART_IRQHandler+0x4ea>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8bb 	bl	8005b62 <UART_Transmit_IT>
    return;
 80059ec:	e014      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00e      	beq.n	8005a18 <HAL_UART_IRQHandler+0x514>
 80059fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f8fb 	bl	8005c02 <UART_EndTransmit_IT>
    return;
 8005a0c:	e004      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
    return;
 8005a0e:	bf00      	nop
 8005a10:	e002      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
      return;
 8005a12:	bf00      	nop
 8005a14:	e000      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
      return;
 8005a16:	bf00      	nop
  }
}
 8005a18:	37e8      	adds	r7, #232	; 0xe8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop

08005a20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b095      	sub	sp, #84	; 0x54
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b0c:	61ba      	str	r2, [r7, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff ff77 	bl	8005a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b21      	cmp	r3, #33	; 0x21
 8005b74:	d13e      	bne.n	8005bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7e:	d114      	bne.n	8005baa <UART_Transmit_IT+0x48>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]
 8005ba8:	e008      	b.n	8005bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6211      	str	r1, [r2, #32]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fefc 	bl	8005a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08c      	sub	sp, #48	; 0x30
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b22      	cmp	r3, #34	; 0x22
 8005c44:	f040 80ab 	bne.w	8005d9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d117      	bne.n	8005c82 <UART_Receive_IT+0x50>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d113      	bne.n	8005c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c80:	e026      	b.n	8005cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c94:	d007      	beq.n	8005ca6 <UART_Receive_IT+0x74>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <UART_Receive_IT+0x82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e008      	b.n	8005cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d15a      	bne.n	8005d9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0220 	bic.w	r2, r2, #32
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d135      	bne.n	8005d90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f023 0310 	bic.w	r3, r3, #16
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	623a      	str	r2, [r7, #32]
 8005d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	69f9      	ldr	r1, [r7, #28]
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d10a      	bne.n	8005d82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fe67 	bl	8005a5c <HAL_UARTEx_RxEventCallback>
 8005d8e:	e002      	b.n	8005d96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fe4f 	bl	8005a34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e002      	b.n	8005da0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3730      	adds	r7, #48	; 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	b09f      	sub	sp, #124	; 0x7c
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	ea40 0301 	orr.w	r3, r0, r1
 8005dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dec:	f021 010c 	bic.w	r1, r1, #12
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4bc5      	ldr	r3, [pc, #788]	; (800612c <UART_SetConfig+0x384>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d004      	beq.n	8005e26 <UART_SetConfig+0x7e>
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4bc3      	ldr	r3, [pc, #780]	; (8006130 <UART_SetConfig+0x388>)
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d103      	bne.n	8005e2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e26:	f7fe fb0f 	bl	8004448 <HAL_RCC_GetPCLK2Freq>
 8005e2a:	6778      	str	r0, [r7, #116]	; 0x74
 8005e2c:	e002      	b.n	8005e34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2e:	f7fe faf7 	bl	8004420 <HAL_RCC_GetPCLK1Freq>
 8005e32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	f040 80b6 	bne.w	8005fac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e42:	461c      	mov	r4, r3
 8005e44:	f04f 0500 	mov.w	r5, #0
 8005e48:	4622      	mov	r2, r4
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	6439      	str	r1, [r7, #64]	; 0x40
 8005e50:	415b      	adcs	r3, r3
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e58:	1912      	adds	r2, r2, r4
 8005e5a:	eb45 0303 	adc.w	r3, r5, r3
 8005e5e:	f04f 0000 	mov.w	r0, #0
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	00d9      	lsls	r1, r3, #3
 8005e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e6c:	00d0      	lsls	r0, r2, #3
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	1911      	adds	r1, r2, r4
 8005e74:	6639      	str	r1, [r7, #96]	; 0x60
 8005e76:	416b      	adcs	r3, r5
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e94:	f7fa f99c 	bl	80001d0 <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4ba5      	ldr	r3, [pc, #660]	; (8006134 <UART_SetConfig+0x38c>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	011e      	lsls	r6, r3, #4
 8005ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea8:	461c      	mov	r4, r3
 8005eaa:	f04f 0500 	mov.w	r5, #0
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ebe:	1912      	adds	r2, r2, r4
 8005ec0:	eb45 0303 	adc.w	r3, r5, r3
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	00d9      	lsls	r1, r3, #3
 8005ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed2:	00d0      	lsls	r0, r2, #3
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	1911      	adds	r1, r2, r4
 8005eda:	65b9      	str	r1, [r7, #88]	; 0x58
 8005edc:	416b      	adcs	r3, r5
 8005ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	1891      	adds	r1, r2, r2
 8005eec:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ef6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005efa:	f7fa f969 	bl	80001d0 <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4b8c      	ldr	r3, [pc, #560]	; (8006134 <UART_SetConfig+0x38c>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	; 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	3332      	adds	r3, #50	; 0x32
 8005f16:	4a87      	ldr	r2, [pc, #540]	; (8006134 <UART_SetConfig+0x38c>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f24:	441e      	add	r6, r3
 8005f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	1894      	adds	r4, r2, r2
 8005f34:	623c      	str	r4, [r7, #32]
 8005f36:	415b      	adcs	r3, r3
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3e:	1812      	adds	r2, r2, r0
 8005f40:	eb41 0303 	adc.w	r3, r1, r3
 8005f44:	f04f 0400 	mov.w	r4, #0
 8005f48:	f04f 0500 	mov.w	r5, #0
 8005f4c:	00dd      	lsls	r5, r3, #3
 8005f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f52:	00d4      	lsls	r4, r2, #3
 8005f54:	4622      	mov	r2, r4
 8005f56:	462b      	mov	r3, r5
 8005f58:	1814      	adds	r4, r2, r0
 8005f5a:	653c      	str	r4, [r7, #80]	; 0x50
 8005f5c:	414b      	adcs	r3, r1
 8005f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	61b9      	str	r1, [r7, #24]
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f7a:	f7fa f929 	bl	80001d0 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4b6c      	ldr	r3, [pc, #432]	; (8006134 <UART_SetConfig+0x38c>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2164      	movs	r1, #100	; 0x64
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a67      	ldr	r2, [pc, #412]	; (8006134 <UART_SetConfig+0x38c>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 0207 	and.w	r2, r3, #7
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4432      	add	r2, r6
 8005fa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005faa:	e0b9      	b.n	8006120 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fae:	461c      	mov	r4, r3
 8005fb0:	f04f 0500 	mov.w	r5, #0
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	1891      	adds	r1, r2, r2
 8005fba:	6139      	str	r1, [r7, #16]
 8005fbc:	415b      	adcs	r3, r3
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fc4:	1912      	adds	r2, r2, r4
 8005fc6:	eb45 0303 	adc.w	r3, r5, r3
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	00d9      	lsls	r1, r3, #3
 8005fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fd8:	00d0      	lsls	r0, r2, #3
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	eb12 0804 	adds.w	r8, r2, r4
 8005fe2:	eb43 0905 	adc.w	r9, r3, r5
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f04f 0100 	mov.w	r1, #0
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	008b      	lsls	r3, r1, #2
 8005ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ffe:	0082      	lsls	r2, r0, #2
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa f8e4 	bl	80001d0 <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4b49      	ldr	r3, [pc, #292]	; (8006134 <UART_SetConfig+0x38c>)
 800600e:	fba3 2302 	umull	r2, r3, r3, r2
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	011e      	lsls	r6, r3, #4
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	4618      	mov	r0, r3
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	1894      	adds	r4, r2, r2
 8006024:	60bc      	str	r4, [r7, #8]
 8006026:	415b      	adcs	r3, r3
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602e:	1812      	adds	r2, r2, r0
 8006030:	eb41 0303 	adc.w	r3, r1, r3
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	f04f 0500 	mov.w	r5, #0
 800603c:	00dd      	lsls	r5, r3, #3
 800603e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006042:	00d4      	lsls	r4, r2, #3
 8006044:	4622      	mov	r2, r4
 8006046:	462b      	mov	r3, r5
 8006048:	1814      	adds	r4, r2, r0
 800604a:	64bc      	str	r4, [r7, #72]	; 0x48
 800604c:	414b      	adcs	r3, r1
 800604e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	008b      	lsls	r3, r1, #2
 8006064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006068:	0082      	lsls	r2, r0, #2
 800606a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800606e:	f7fa f8af 	bl	80001d0 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <UART_SetConfig+0x38c>)
 8006078:	fba3 1302 	umull	r1, r3, r3, r2
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	2164      	movs	r1, #100	; 0x64
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	3332      	adds	r3, #50	; 0x32
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <UART_SetConfig+0x38c>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006096:	441e      	add	r6, r3
 8006098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609a:	4618      	mov	r0, r3
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	1894      	adds	r4, r2, r2
 80060a6:	603c      	str	r4, [r7, #0]
 80060a8:	415b      	adcs	r3, r3
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b0:	1812      	adds	r2, r2, r0
 80060b2:	eb41 0303 	adc.w	r3, r1, r3
 80060b6:	f04f 0400 	mov.w	r4, #0
 80060ba:	f04f 0500 	mov.w	r5, #0
 80060be:	00dd      	lsls	r5, r3, #3
 80060c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c4:	00d4      	lsls	r4, r2, #3
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	eb12 0a00 	adds.w	sl, r2, r0
 80060ce:	eb43 0b01 	adc.w	fp, r3, r1
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ea:	0082      	lsls	r2, r0, #2
 80060ec:	4650      	mov	r0, sl
 80060ee:	4659      	mov	r1, fp
 80060f0:	f7fa f86e 	bl	80001d0 <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <UART_SetConfig+0x38c>)
 80060fa:	fba3 1302 	umull	r1, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2164      	movs	r1, #100	; 0x64
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	; 0x32
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <UART_SetConfig+0x38c>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4432      	add	r2, r6
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	377c      	adds	r7, #124	; 0x7c
 8006124:	46bd      	mov	sp, r7
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	bf00      	nop
 800612c:	40011000 	.word	0x40011000
 8006130:	40011400 	.word	0x40011400
 8006134:	51eb851f 	.word	0x51eb851f

08006138 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b10      	cmp	r3, #16
 800614c:	d103      	bne.n	8006156 <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e002      	b.n	800615c <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4b16      	ldr	r3, [pc, #88]	; (80061b8 <FSMC_NAND_Init+0x80>)
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 800616c:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8006172:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8006178:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8006180:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8006188:	431a      	orrs	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	f043 0308 	orr.w	r3, r3, #8
 8006192:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b10      	cmp	r3, #16
 800619a:	d103      	bne.n	80061a4 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	e002      	b.n	80061aa <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3714      	adds	r7, #20
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	fff00181 	.word	0xfff00181

080061bc <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 80061c8:	2300      	movs	r3, #0
 80061ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d103      	bne.n	80061da <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	e002      	b.n	80061e0 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 80061ee:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 80061f6:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 80061fe:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	4313      	orrs	r3, r2
 8006204:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2b10      	cmp	r3, #16
 800620a:	d103      	bne.n	8006214 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	609a      	str	r2, [r3, #8]
 8006212:	e002      	b.n	800621a <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8006228:	b480      	push	{r7}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b10      	cmp	r3, #16
 800623c:	d103      	bne.n	8006246 <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e002      	b.n	800624c <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624a:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800625a:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8006262:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 800626a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b10      	cmp	r3, #16
 8006276:	d103      	bne.n	8006280 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	60da      	str	r2, [r3, #12]
 800627e:	e002      	b.n	8006286 <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	371c      	adds	r7, #28
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006298:	4904      	ldr	r1, [pc, #16]	; (80062ac <MX_FATFS_Init+0x18>)
 800629a:	4805      	ldr	r0, [pc, #20]	; (80062b0 <MX_FATFS_Init+0x1c>)
 800629c:	f000 f8b0 	bl	8006400 <FATFS_LinkDriver>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <MX_FATFS_Init+0x20>)
 80062a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80062a8:	bf00      	nop
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	2000d1a4 	.word	0x2000d1a4
 80062b0:	2000000c 	.word	0x2000000c
 80062b4:	2000d1a8 	.word	0x2000d1a8

080062b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	4603      	mov	r3, r0
 80062c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <USER_initialize+0x24>)
 80062c4:	2201      	movs	r2, #1
 80062c6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <USER_initialize+0x24>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	20000009 	.word	0x20000009

080062e0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <USER_status+0x24>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80062f0:	4b04      	ldr	r3, [pc, #16]	; (8006304 <USER_status+0x24>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000009 	.word	0x20000009

08006308 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
 8006312:	603b      	str	r3, [r7, #0]
 8006314:	4603      	mov	r3, r0
 8006316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006318:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006326:	b480      	push	{r7}
 8006328:	b085      	sub	sp, #20
 800632a:	af00      	add	r7, sp, #0
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006336:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	603a      	str	r2, [r7, #0]
 800634e:	71fb      	strb	r3, [r7, #7]
 8006350:	460b      	mov	r3, r1
 8006352:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
    return res;
 8006358:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006376:	2301      	movs	r3, #1
 8006378:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800637e:	4b1f      	ldr	r3, [pc, #124]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 8006380:	7a5b      	ldrb	r3, [r3, #9]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d131      	bne.n	80063ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006388:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 800638a:	7a5b      	ldrb	r3, [r3, #9]
 800638c:	b2db      	uxtb	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	4b1a      	ldr	r3, [pc, #104]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 8006392:	2100      	movs	r1, #0
 8006394:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006396:	4b19      	ldr	r3, [pc, #100]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 8006398:	7a5b      	ldrb	r3, [r3, #9]
 800639a:	b2db      	uxtb	r3, r3
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4413      	add	r3, r2
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80063a6:	4b15      	ldr	r3, [pc, #84]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 80063a8:	7a5b      	ldrb	r3, [r3, #9]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	461a      	mov	r2, r3
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 80063b0:	4413      	add	r3, r2
 80063b2:	79fa      	ldrb	r2, [r7, #7]
 80063b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80063b6:	4b11      	ldr	r3, [pc, #68]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 80063b8:	7a5b      	ldrb	r3, [r3, #9]
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	b2d1      	uxtb	r1, r2
 80063c0:	4a0e      	ldr	r2, [pc, #56]	; (80063fc <FATFS_LinkDriverEx+0x94>)
 80063c2:	7251      	strb	r1, [r2, #9]
 80063c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80063c6:	7dbb      	ldrb	r3, [r7, #22]
 80063c8:	3330      	adds	r3, #48	; 0x30
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	3301      	adds	r3, #1
 80063d4:	223a      	movs	r2, #58	; 0x3a
 80063d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	3302      	adds	r3, #2
 80063dc:	222f      	movs	r2, #47	; 0x2f
 80063de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	3303      	adds	r3, #3
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80063e8:	2300      	movs	r3, #0
 80063ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	20000054 	.word	0x20000054

08006400 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800640a:	2200      	movs	r2, #0
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ffaa 	bl	8006368 <FATFS_LinkDriverEx>
 8006414:	4603      	mov	r3, r0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <__NVIC_SetPriority>:
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	4603      	mov	r3, r0
 8006428:	6039      	str	r1, [r7, #0]
 800642a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800642c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006430:	2b00      	cmp	r3, #0
 8006432:	db0a      	blt.n	800644a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	490c      	ldr	r1, [pc, #48]	; (800646c <__NVIC_SetPriority+0x4c>)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	0112      	lsls	r2, r2, #4
 8006440:	b2d2      	uxtb	r2, r2
 8006442:	440b      	add	r3, r1
 8006444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006448:	e00a      	b.n	8006460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	b2da      	uxtb	r2, r3
 800644e:	4908      	ldr	r1, [pc, #32]	; (8006470 <__NVIC_SetPriority+0x50>)
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	f003 030f 	and.w	r3, r3, #15
 8006456:	3b04      	subs	r3, #4
 8006458:	0112      	lsls	r2, r2, #4
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	440b      	add	r3, r1
 800645e:	761a      	strb	r2, [r3, #24]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	e000e100 	.word	0xe000e100
 8006470:	e000ed00 	.word	0xe000ed00

08006474 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <SysTick_Handler+0x1c>)
 800647a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800647c:	f001 fe92 	bl	80081a4 <xTaskGetSchedulerState>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d001      	beq.n	800648a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006486:	f002 fc7f 	bl	8008d88 <xPortSysTickHandler>
  }
}
 800648a:	bf00      	nop
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	e000e010 	.word	0xe000e010

08006494 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006494:	b580      	push	{r7, lr}
 8006496:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006498:	2100      	movs	r1, #0
 800649a:	f06f 0004 	mvn.w	r0, #4
 800649e:	f7ff ffbf 	bl	8006420 <__NVIC_SetPriority>
#endif
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ae:	f3ef 8305 	mrs	r3, IPSR
 80064b2:	603b      	str	r3, [r7, #0]
  return(result);
 80064b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80064ba:	f06f 0305 	mvn.w	r3, #5
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	e00f      	b.n	80064e2 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 80064c2:	4b0a      	ldr	r3, [pc, #40]	; (80064ec <osKernelInitialize+0x44>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d108      	bne.n	80064dc <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 80064ca:	4809      	ldr	r0, [pc, #36]	; (80064f0 <osKernelInitialize+0x48>)
 80064cc:	f002 fe4c 	bl	8009168 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 80064d0:	4b06      	ldr	r3, [pc, #24]	; (80064ec <osKernelInitialize+0x44>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
 80064da:	e002      	b.n	80064e2 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 80064dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80064e0:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80064e2:	687b      	ldr	r3, [r7, #4]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	20000060 	.word	0x20000060
 80064f0:	20000020 	.word	0x20000020

080064f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064fa:	f3ef 8305 	mrs	r3, IPSR
 80064fe:	603b      	str	r3, [r7, #0]
  return(result);
 8006500:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006506:	f06f 0305 	mvn.w	r3, #5
 800650a:	607b      	str	r3, [r7, #4]
 800650c:	e010      	b.n	8006530 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <osKernelStart+0x48>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d109      	bne.n	800652a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006516:	f7ff ffbd 	bl	8006494 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <osKernelStart+0x48>)
 800651c:	2202      	movs	r2, #2
 800651e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006520:	f001 f9e6 	bl	80078f0 <vTaskStartScheduler>
      stat = osOK;
 8006524:	2300      	movs	r3, #0
 8006526:	607b      	str	r3, [r7, #4]
 8006528:	e002      	b.n	8006530 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800652a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800652e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006530:	687b      	ldr	r3, [r7, #4]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20000060 	.word	0x20000060

08006540 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006540:	b580      	push	{r7, lr}
 8006542:	b08e      	sub	sp, #56	; 0x38
 8006544:	af04      	add	r7, sp, #16
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006550:	f3ef 8305 	mrs	r3, IPSR
 8006554:	617b      	str	r3, [r7, #20]
  return(result);
 8006556:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006558:	2b00      	cmp	r3, #0
 800655a:	d17f      	bne.n	800665c <osThreadNew+0x11c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d07c      	beq.n	800665c <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8006562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006566:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006568:	2318      	movs	r3, #24
 800656a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800656c:	2300      	movs	r3, #0
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006574:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d045      	beq.n	8006608 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <osThreadNew+0x4a>
        name = attr->name;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d008      	beq.n	80065b0 <osThreadNew+0x70>
 800659e:	69fb      	ldr	r3, [r7, #28]
 80065a0:	2b38      	cmp	r3, #56	; 0x38
 80065a2:	d805      	bhi.n	80065b0 <osThreadNew+0x70>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <osThreadNew+0x74>
        return (NULL);
 80065b0:	2300      	movs	r3, #0
 80065b2:	e054      	b.n	800665e <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	089b      	lsrs	r3, r3, #2
 80065c2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00e      	beq.n	80065ea <osThreadNew+0xaa>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	2b5b      	cmp	r3, #91	; 0x5b
 80065d2:	d90a      	bls.n	80065ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d006      	beq.n	80065ea <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <osThreadNew+0xaa>
        mem = 1;
 80065e4:	2301      	movs	r3, #1
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e010      	b.n	800660c <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10c      	bne.n	800660c <osThreadNew+0xcc>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d108      	bne.n	800660c <osThreadNew+0xcc>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	691b      	ldr	r3, [r3, #16]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d104      	bne.n	800660c <osThreadNew+0xcc>
          mem = 0;
 8006602:	2300      	movs	r3, #0
 8006604:	61bb      	str	r3, [r7, #24]
 8006606:	e001      	b.n	800660c <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d110      	bne.n	8006634 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800661a:	9202      	str	r2, [sp, #8]
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6a3a      	ldr	r2, [r7, #32]
 8006626:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 ff87 	bl	800753c <xTaskCreateStatic>
 800662e:	4603      	mov	r3, r0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e013      	b.n	800665c <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d110      	bne.n	800665c <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	b29a      	uxth	r2, r3
 800663e:	f107 0310 	add.w	r3, r7, #16
 8006642:	9301      	str	r3, [sp, #4]
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 ffd2 	bl	80075f6 <xTaskCreate>
 8006652:	4603      	mov	r3, r0
 8006654:	2b01      	cmp	r3, #1
 8006656:	d001      	beq.n	800665c <osThreadNew+0x11c>
            hTask = NULL;
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800665c:	693b      	ldr	r3, [r7, #16]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3728      	adds	r7, #40	; 0x28
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006666:	b580      	push	{r7, lr}
 8006668:	b084      	sub	sp, #16
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800666e:	f3ef 8305 	mrs	r3, IPSR
 8006672:	60bb      	str	r3, [r7, #8]
  return(result);
 8006674:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <osDelay+0x1c>
    stat = osErrorISR;
 800667a:	f06f 0305 	mvn.w	r3, #5
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	e007      	b.n	8006692 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <osDelay+0x2c>
      vTaskDelay(ticks);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 f8fb 	bl	8007888 <vTaskDelay>
    }
  }

  return (stat);
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	; 0x28
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066ac:	f3ef 8305 	mrs	r3, IPSR
 80066b0:	613b      	str	r3, [r7, #16]
  return(result);
 80066b2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d175      	bne.n	80067a4 <osSemaphoreNew+0x108>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d072      	beq.n	80067a4 <osSemaphoreNew+0x108>
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d86e      	bhi.n	80067a4 <osSemaphoreNew+0x108>
    mem = -1;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d015      	beq.n	80066fe <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <osSemaphoreNew+0x4c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b4f      	cmp	r3, #79	; 0x4f
 80066e0:	d902      	bls.n	80066e8 <osSemaphoreNew+0x4c>
        mem = 1;
 80066e2:	2301      	movs	r3, #1
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e00c      	b.n	8006702 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d108      	bne.n	8006702 <osSemaphoreNew+0x66>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <osSemaphoreNew+0x66>
          mem = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e001      	b.n	8006702 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006708:	d04c      	beq.n	80067a4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d128      	bne.n	8006762 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d10a      	bne.n	800672c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	2203      	movs	r2, #3
 800671c:	9200      	str	r2, [sp, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	2100      	movs	r1, #0
 8006722:	2001      	movs	r0, #1
 8006724:	f000 f994 	bl	8006a50 <xQueueGenericCreateStatic>
 8006728:	61f8      	str	r0, [r7, #28]
 800672a:	e005      	b.n	8006738 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800672c:	2203      	movs	r2, #3
 800672e:	2100      	movs	r1, #0
 8006730:	2001      	movs	r0, #1
 8006732:	f000 fa05 	bl	8006b40 <xQueueGenericCreate>
 8006736:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d022      	beq.n	8006784 <osSemaphoreNew+0xe8>
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d01f      	beq.n	8006784 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006744:	2300      	movs	r3, #0
 8006746:	2200      	movs	r2, #0
 8006748:	2100      	movs	r1, #0
 800674a:	69f8      	ldr	r0, [r7, #28]
 800674c:	f000 fac0 	bl	8006cd0 <xQueueGenericSend>
 8006750:	4603      	mov	r3, r0
 8006752:	2b01      	cmp	r3, #1
 8006754:	d016      	beq.n	8006784 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006756:	69f8      	ldr	r0, [r7, #28]
 8006758:	f000 fd34 	bl	80071c4 <vQueueDelete>
            hSemaphore = NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e010      	b.n	8006784 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d108      	bne.n	800677a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	461a      	mov	r2, r3
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fa42 	bl	8006bfa <xQueueCreateCountingSemaphoreStatic>
 8006776:	61f8      	str	r0, [r7, #28]
 8006778:	e004      	b.n	8006784 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f000 fa73 	bl	8006c68 <xQueueCreateCountingSemaphore>
 8006782:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <osSemaphoreNew+0xfc>
          name = attr->name;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e001      	b.n	800679c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	69f8      	ldr	r0, [r7, #28]
 80067a0:	f000 fe44 	bl	800742c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067a4:	69fb      	ldr	r3, [r7, #28]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
	...

080067b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a07      	ldr	r2, [pc, #28]	; (80067dc <vApplicationGetIdleTaskMemory+0x2c>)
 80067c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a06      	ldr	r2, [pc, #24]	; (80067e0 <vApplicationGetIdleTaskMemory+0x30>)
 80067c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ce:	601a      	str	r2, [r3, #0]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	2000c064 	.word	0x2000c064
 80067e0:	2000c0c0 	.word	0x2000c0c0

080067e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a07      	ldr	r2, [pc, #28]	; (8006810 <vApplicationGetTimerTaskMemory+0x2c>)
 80067f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4a06      	ldr	r2, [pc, #24]	; (8006814 <vApplicationGetTimerTaskMemory+0x30>)
 80067fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	2000c4c0 	.word	0x2000c4c0
 8006814:	2000c51c 	.word	0x2000c51c

08006818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 0208 	add.w	r2, r3, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f103 0208 	add.w	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 0208 	add.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d0:	d103      	bne.n	80068da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e00c      	b.n	80068f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3308      	adds	r3, #8
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e002      	b.n	80068e8 <vListInsert+0x2e>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d2f6      	bcs.n	80068e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6892      	ldr	r2, [r2, #8]
 8006942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6852      	ldr	r2, [r2, #4]
 800694c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d103      	bne.n	8006960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069aa:	f002 f95b 	bl	8008c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	441a      	add	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	3b01      	subs	r3, #1
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d114      	bne.n	8006a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01a      	beq.n	8006a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3310      	adds	r3, #16
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 f9f9 	bl	8007e04 <xTaskRemoveFromEventList>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <xQueueGenericReset+0xcc>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	e009      	b.n	8006a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fef2 	bl	8006818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3324      	adds	r3, #36	; 0x24
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff feed 	bl	8006818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f002 f941 	bl	8008cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a42:	2301      	movs	r3, #1
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <xQueueGenericCreateStatic+0x52>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <xQueueGenericCreateStatic+0x56>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericCreateStatic+0x58>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	623b      	str	r3, [r7, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <xQueueGenericCreateStatic+0x7e>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <xQueueGenericCreateStatic+0x82>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <xQueueGenericCreateStatic+0x84>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	61fb      	str	r3, [r7, #28]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aee:	2350      	movs	r3, #80	; 0x50
 8006af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b50      	cmp	r3, #80	; 0x50
 8006af6:	d00a      	beq.n	8006b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f83f 	bl	8006bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3350      	adds	r3, #80	; 0x50
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 f995 	bl	8008ea8 <pvPortMalloc>
 8006b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d011      	beq.n	8006baa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3350      	adds	r3, #80	; 0x50
 8006b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b98:	79fa      	ldrb	r2, [r7, #7]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f805 	bl	8006bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006baa:	69bb      	ldr	r3, [r7, #24]
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006be2:	2101      	movs	r1, #1
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	f7ff fecb 	bl	8006980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b08a      	sub	sp, #40	; 0x28
 8006bfe:	af02      	add	r7, sp, #8
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10a      	bne.n	8006c22 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	61bb      	str	r3, [r7, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	e7fe      	b.n	8006c20 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d90a      	bls.n	8006c40 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	617b      	str	r3, [r7, #20]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006c40:	2302      	movs	r3, #2
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f7ff ff00 	bl	8006a50 <xQueueGenericCreateStatic>
 8006c50:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	68ba      	ldr	r2, [r7, #8]
 8006c5c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
	}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3720      	adds	r7, #32
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	613b      	str	r3, [r7, #16]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d90a      	bls.n	8006cac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	60fb      	str	r3, [r7, #12]
}
 8006ca8:	bf00      	nop
 8006caa:	e7fe      	b.n	8006caa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006cac:	2202      	movs	r2, #2
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff45 	bl	8006b40 <xQueueGenericCreate>
 8006cb6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006cc4:	697b      	ldr	r3, [r7, #20]
	}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3718      	adds	r7, #24
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
	...

08006cd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08e      	sub	sp, #56	; 0x38
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
 8006cdc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericSend+0x32>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <xQueueGenericSend+0x40>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <xQueueGenericSend+0x44>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <xQueueGenericSend+0x46>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <xQueueGenericSend+0x60>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSend+0x6e>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <xQueueGenericSend+0x72>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueGenericSend+0x74>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericSend+0x8e>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	623b      	str	r3, [r7, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d5e:	f001 fa21 	bl	80081a4 <xTaskGetSchedulerState>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <xQueueGenericSend+0x9e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <xQueueGenericSend+0xa2>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueGenericSend+0xa4>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61fb      	str	r3, [r7, #28]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d8e:	f001 ff69 	bl	8008c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d302      	bcc.n	8006da4 <xQueueGenericSend+0xd4>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b02      	cmp	r3, #2
 8006da2:	d129      	bne.n	8006df8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006daa:	f000 fa2e 	bl	800720a <prvCopyDataToQueue>
 8006dae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d010      	beq.n	8006dda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	3324      	adds	r3, #36	; 0x24
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 f821 	bl	8007e04 <xTaskRemoveFromEventList>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dc8:	4b3f      	ldr	r3, [pc, #252]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dce:	601a      	str	r2, [r3, #0]
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	e00a      	b.n	8006df0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006df0:	f001 ff68 	bl	8008cc4 <vPortExitCritical>
				return pdPASS;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e063      	b.n	8006ec0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d103      	bne.n	8006e06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfe:	f001 ff61 	bl	8008cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e05c      	b.n	8006ec0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d106      	bne.n	8006e1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e0c:	f107 0314 	add.w	r3, r7, #20
 8006e10:	4618      	mov	r0, r3
 8006e12:	f001 f85b 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e16:	2301      	movs	r3, #1
 8006e18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1a:	f001 ff53 	bl	8008cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1e:	f000 fdcd 	bl	80079bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e22:	f001 ff1f 	bl	8008c64 <vPortEnterCritical>
 8006e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e32:	d103      	bne.n	8006e3c <xQueueGenericSend+0x16c>
 8006e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e48:	d103      	bne.n	8006e52 <xQueueGenericSend+0x182>
 8006e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e52:	f001 ff37 	bl	8008cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e56:	1d3a      	adds	r2, r7, #4
 8006e58:	f107 0314 	add.w	r3, r7, #20
 8006e5c:	4611      	mov	r1, r2
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f001 f84a 	bl	8007ef8 <xTaskCheckForTimeOut>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d124      	bne.n	8006eb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e6c:	f000 fac5 	bl	80073fa <prvIsQueueFull>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	3310      	adds	r3, #16
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4611      	mov	r1, r2
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 ff70 	bl	8007d64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e86:	f000 fa50 	bl	800732a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e8a:	f000 fda5 	bl	80079d8 <xTaskResumeAll>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f47f af7c 	bne.w	8006d8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <xQueueGenericSend+0x1f8>)
 8006e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	e772      	b.n	8006d8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eaa:	f000 fa3e 	bl	800732a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eae:	f000 fd93 	bl	80079d8 <xTaskResumeAll>
 8006eb2:	e76c      	b.n	8006d8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eb6:	f000 fa38 	bl	800732a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eba:	f000 fd8d 	bl	80079d8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ebe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3738      	adds	r7, #56	; 0x38
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed04 	.word	0xe000ed04

08006ecc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b090      	sub	sp, #64	; 0x40
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d10a      	bne.n	8006efa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee8:	f383 8811 	msr	BASEPRI, r3
 8006eec:	f3bf 8f6f 	isb	sy
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ef6:	bf00      	nop
 8006ef8:	e7fe      	b.n	8006ef8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <xQueueGenericSendFromISR+0x3c>
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d101      	bne.n	8006f0c <xQueueGenericSendFromISR+0x40>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e000      	b.n	8006f0e <xQueueGenericSendFromISR+0x42>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f24:	bf00      	nop
 8006f26:	e7fe      	b.n	8006f26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d103      	bne.n	8006f36 <xQueueGenericSendFromISR+0x6a>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <xQueueGenericSendFromISR+0x6e>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <xQueueGenericSendFromISR+0x70>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10a      	bne.n	8006f56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	623b      	str	r3, [r7, #32]
}
 8006f52:	bf00      	nop
 8006f54:	e7fe      	b.n	8006f54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f56:	f001 ff67 	bl	8008e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f5a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f62:	f383 8811 	msr	BASEPRI, r3
 8006f66:	f3bf 8f6f 	isb	sy
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	61fa      	str	r2, [r7, #28]
 8006f70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d302      	bcc.n	8006f88 <xQueueGenericSendFromISR+0xbc>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d12f      	bne.n	8006fe8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f9e:	f000 f934 	bl	800720a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006fa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006faa:	d112      	bne.n	8006fd2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d016      	beq.n	8006fe2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb6:	3324      	adds	r3, #36	; 0x24
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f000 ff23 	bl	8007e04 <xTaskRemoveFromEventList>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00e      	beq.n	8006fe2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00b      	beq.n	8006fe2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e007      	b.n	8006fe2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	b25a      	sxtb	r2, r3
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006fe6:	e001      	b.n	8006fec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3740      	adds	r7, #64	; 0x40
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
	...

08007004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	; 0x30
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10a      	bne.n	8007034 <xQueueReceive+0x30>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	623b      	str	r3, [r7, #32]
}
 8007030:	bf00      	nop
 8007032:	e7fe      	b.n	8007032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <xQueueReceive+0x3e>
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <xQueueReceive+0x42>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <xQueueReceive+0x44>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xQueueReceive+0x5e>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	61fb      	str	r3, [r7, #28]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007062:	f001 f89f 	bl	80081a4 <xTaskGetSchedulerState>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d102      	bne.n	8007072 <xQueueReceive+0x6e>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <xQueueReceive+0x72>
 8007072:	2301      	movs	r3, #1
 8007074:	e000      	b.n	8007078 <xQueueReceive+0x74>
 8007076:	2300      	movs	r3, #0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10a      	bne.n	8007092 <xQueueReceive+0x8e>
	__asm volatile
 800707c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007080:	f383 8811 	msr	BASEPRI, r3
 8007084:	f3bf 8f6f 	isb	sy
 8007088:	f3bf 8f4f 	dsb	sy
 800708c:	61bb      	str	r3, [r7, #24]
}
 800708e:	bf00      	nop
 8007090:	e7fe      	b.n	8007090 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007092:	f001 fde7 	bl	8008c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d01f      	beq.n	80070e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070a6:	f000 f91a 	bl	80072de <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00f      	beq.n	80070da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	3310      	adds	r3, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f000 fea0 	bl	8007e04 <xTaskRemoveFromEventList>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d007      	beq.n	80070da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <xQueueReceive+0x1bc>)
 80070cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070da:	f001 fdf3 	bl	8008cc4 <vPortExitCritical>
				return pdPASS;
 80070de:	2301      	movs	r3, #1
 80070e0:	e069      	b.n	80071b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d103      	bne.n	80070f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070e8:	f001 fdec 	bl	8008cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e062      	b.n	80071b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d106      	bne.n	8007104 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fee6 	bl	8007ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007104:	f001 fdde 	bl	8008cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007108:	f000 fc58 	bl	80079bc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800710c:	f001 fdaa 	bl	8008c64 <vPortEnterCritical>
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007116:	b25b      	sxtb	r3, r3
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800711c:	d103      	bne.n	8007126 <xQueueReceive+0x122>
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800712c:	b25b      	sxtb	r3, r3
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007132:	d103      	bne.n	800713c <xQueueReceive+0x138>
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800713c:	f001 fdc2 	bl	8008cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007140:	1d3a      	adds	r2, r7, #4
 8007142:	f107 0310 	add.w	r3, r7, #16
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fed5 	bl	8007ef8 <xTaskCheckForTimeOut>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d123      	bne.n	800719c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007156:	f000 f93a 	bl	80073ce <prvIsQueueEmpty>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d017      	beq.n	8007190 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fdfb 	bl	8007d64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007170:	f000 f8db 	bl	800732a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007174:	f000 fc30 	bl	80079d8 <xTaskResumeAll>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d189      	bne.n	8007092 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <xQueueReceive+0x1bc>)
 8007180:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	e780      	b.n	8007092 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007192:	f000 f8ca 	bl	800732a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007196:	f000 fc1f 	bl	80079d8 <xTaskResumeAll>
 800719a:	e77a      	b.n	8007092 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800719c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719e:	f000 f8c4 	bl	800732a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071a2:	f000 fc19 	bl	80079d8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071a8:	f000 f911 	bl	80073ce <prvIsQueueEmpty>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f43f af6f 	beq.w	8007092 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3730      	adds	r7, #48	; 0x30
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10a      	bne.n	80071ec <vQueueDelete+0x28>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	60bb      	str	r3, [r7, #8]
}
 80071e8:	bf00      	nop
 80071ea:	e7fe      	b.n	80071ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 f947 	bl	8007480 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d102      	bne.n	8007202 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f001 fef7 	bl	8008ff0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007216:	2300      	movs	r3, #0
 8007218:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d10d      	bne.n	8007244 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d14d      	bne.n	80072cc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	4618      	mov	r0, r3
 8007236:	f000 ffd3 	bl	80081e0 <xTaskPriorityDisinherit>
 800723a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	609a      	str	r2, [r3, #8]
 8007242:	e043      	b.n	80072cc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d119      	bne.n	800727e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6858      	ldr	r0, [r3, #4]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	461a      	mov	r2, r3
 8007254:	68b9      	ldr	r1, [r7, #8]
 8007256:	f002 f875 	bl	8009344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	685a      	ldr	r2, [r3, #4]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	441a      	add	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d32b      	bcc.n	80072cc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]
 800727c:	e026      	b.n	80072cc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	68d8      	ldr	r0, [r3, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007286:	461a      	mov	r2, r3
 8007288:	68b9      	ldr	r1, [r7, #8]
 800728a:	f002 f85b 	bl	8009344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007296:	425b      	negs	r3, r3
 8007298:	441a      	add	r2, r3
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d207      	bcs.n	80072ba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	425b      	negs	r3, r3
 80072b4:	441a      	add	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d105      	bne.n	80072cc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80072d4:	697b      	ldr	r3, [r7, #20]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d018      	beq.n	8007322 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f8:	441a      	add	r2, r3
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	429a      	cmp	r2, r3
 8007308:	d303      	bcc.n	8007312 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68d9      	ldr	r1, [r3, #12]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	461a      	mov	r2, r3
 800731c:	6838      	ldr	r0, [r7, #0]
 800731e:	f002 f811 	bl	8009344 <memcpy>
	}
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007332:	f001 fc97 	bl	8008c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800733c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733e:	e011      	b.n	8007364 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	2b00      	cmp	r3, #0
 8007346:	d012      	beq.n	800736e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3324      	adds	r3, #36	; 0x24
 800734c:	4618      	mov	r0, r3
 800734e:	f000 fd59 	bl	8007e04 <xTaskRemoveFromEventList>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007358:	f000 fe40 	bl	8007fdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	3b01      	subs	r3, #1
 8007360:	b2db      	uxtb	r3, r3
 8007362:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007368:	2b00      	cmp	r3, #0
 800736a:	dce9      	bgt.n	8007340 <prvUnlockQueue+0x16>
 800736c:	e000      	b.n	8007370 <prvUnlockQueue+0x46>
					break;
 800736e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	22ff      	movs	r2, #255	; 0xff
 8007374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007378:	f001 fca4 	bl	8008cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800737c:	f001 fc72 	bl	8008c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007386:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007388:	e011      	b.n	80073ae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d012      	beq.n	80073b8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3310      	adds	r3, #16
 8007396:	4618      	mov	r0, r3
 8007398:	f000 fd34 	bl	8007e04 <xTaskRemoveFromEventList>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d001      	beq.n	80073a6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80073a2:	f000 fe1b 	bl	8007fdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	3b01      	subs	r3, #1
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80073ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dce9      	bgt.n	800738a <prvUnlockQueue+0x60>
 80073b6:	e000      	b.n	80073ba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80073b8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80073c2:	f001 fc7f 	bl	8008cc4 <vPortExitCritical>
}
 80073c6:	bf00      	nop
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073d6:	f001 fc45 	bl	8008c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]
 80073e6:	e001      	b.n	80073ec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ec:	f001 fc6a 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 80073f0:	68fb      	ldr	r3, [r7, #12]
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007402:	f001 fc2f 	bl	8008c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	429a      	cmp	r2, r3
 8007410:	d102      	bne.n	8007418 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007412:	2301      	movs	r3, #1
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e001      	b.n	800741c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800741c:	f001 fc52 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 8007420:	68fb      	ldr	r3, [r7, #12]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007436:	2300      	movs	r3, #0
 8007438:	60fb      	str	r3, [r7, #12]
 800743a:	e014      	b.n	8007466 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800743c:	4a0f      	ldr	r2, [pc, #60]	; (800747c <vQueueAddToRegistry+0x50>)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007448:	490c      	ldr	r1, [pc, #48]	; (800747c <vQueueAddToRegistry+0x50>)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007452:	4a0a      	ldr	r2, [pc, #40]	; (800747c <vQueueAddToRegistry+0x50>)
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	4413      	add	r3, r2
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800745e:	e006      	b.n	800746e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	3301      	adds	r3, #1
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b03      	cmp	r3, #3
 800746a:	d9e7      	bls.n	800743c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	2000d610 	.word	0x2000d610

08007480 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]
 800748c:	e016      	b.n	80074bc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800748e:	4a10      	ldr	r2, [pc, #64]	; (80074d0 <vQueueUnregisterQueue+0x50>)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	00db      	lsls	r3, r3, #3
 8007494:	4413      	add	r3, r2
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d10b      	bne.n	80074b6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <vQueueUnregisterQueue+0x50>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2100      	movs	r1, #0
 80074a4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <vQueueUnregisterQueue+0x50>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	00db      	lsls	r3, r3, #3
 80074ae:	4413      	add	r3, r2
 80074b0:	2200      	movs	r2, #0
 80074b2:	605a      	str	r2, [r3, #4]
				break;
 80074b4:	e006      	b.n	80074c4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3301      	adds	r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d9e5      	bls.n	800748e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	2000d610 	.word	0x2000d610

080074d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80074e4:	f001 fbbe 	bl	8008c64 <vPortEnterCritical>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074ee:	b25b      	sxtb	r3, r3
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074f4:	d103      	bne.n	80074fe <vQueueWaitForMessageRestricted+0x2a>
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007504:	b25b      	sxtb	r3, r3
 8007506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800750a:	d103      	bne.n	8007514 <vQueueWaitForMessageRestricted+0x40>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007514:	f001 fbd6 	bl	8008cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	68b9      	ldr	r1, [r7, #8]
 8007528:	4618      	mov	r0, r3
 800752a:	f000 fc3f 	bl	8007dac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800752e:	6978      	ldr	r0, [r7, #20]
 8007530:	f7ff fefb 	bl	800732a <prvUnlockQueue>
	}
 8007534:	bf00      	nop
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08e      	sub	sp, #56	; 0x38
 8007540:	af04      	add	r7, sp, #16
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
 8007548:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10a      	bne.n	8007566 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	e7fe      	b.n	8007564 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10a      	bne.n	8007582 <xTaskCreateStatic+0x46>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	61fb      	str	r3, [r7, #28]
}
 800757e:	bf00      	nop
 8007580:	e7fe      	b.n	8007580 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007582:	235c      	movs	r3, #92	; 0x5c
 8007584:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b5c      	cmp	r3, #92	; 0x5c
 800758a:	d00a      	beq.n	80075a2 <xTaskCreateStatic+0x66>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	61bb      	str	r3, [r7, #24]
}
 800759e:	bf00      	nop
 80075a0:	e7fe      	b.n	80075a0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01e      	beq.n	80075e8 <xTaskCreateStatic+0xac>
 80075aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d01b      	beq.n	80075e8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075c2:	2300      	movs	r3, #0
 80075c4:	9303      	str	r3, [sp, #12]
 80075c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	f107 0314 	add.w	r3, r7, #20
 80075ce:	9301      	str	r3, [sp, #4]
 80075d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	68b9      	ldr	r1, [r7, #8]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f000 f850 	bl	8007680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075e2:	f000 f8e1 	bl	80077a8 <prvAddNewTaskToReadyList>
 80075e6:	e001      	b.n	80075ec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075ec:	697b      	ldr	r3, [r7, #20]
	}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b08c      	sub	sp, #48	; 0x30
 80075fa:	af04      	add	r7, sp, #16
 80075fc:	60f8      	str	r0, [r7, #12]
 80075fe:	60b9      	str	r1, [r7, #8]
 8007600:	603b      	str	r3, [r7, #0]
 8007602:	4613      	mov	r3, r2
 8007604:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007606:	88fb      	ldrh	r3, [r7, #6]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4618      	mov	r0, r3
 800760c:	f001 fc4c 	bl	8008ea8 <pvPortMalloc>
 8007610:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d00e      	beq.n	8007636 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007618:	205c      	movs	r0, #92	; 0x5c
 800761a:	f001 fc45 	bl	8008ea8 <pvPortMalloc>
 800761e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
 800762c:	e005      	b.n	800763a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800762e:	6978      	ldr	r0, [r7, #20]
 8007630:	f001 fcde 	bl	8008ff0 <vPortFree>
 8007634:	e001      	b.n	800763a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d017      	beq.n	8007670 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007648:	88fa      	ldrh	r2, [r7, #6]
 800764a:	2300      	movs	r3, #0
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68b9      	ldr	r1, [r7, #8]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f80e 	bl	8007680 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007664:	69f8      	ldr	r0, [r7, #28]
 8007666:	f000 f89f 	bl	80077a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800766a:	2301      	movs	r3, #1
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e002      	b.n	8007676 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007674:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007676:	69bb      	ldr	r3, [r7, #24]
	}
 8007678:	4618      	mov	r0, r3
 800767a:	3720      	adds	r7, #32
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b088      	sub	sp, #32
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800768e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007690:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	461a      	mov	r2, r3
 8007698:	21a5      	movs	r1, #165	; 0xa5
 800769a:	f001 fe61 	bl	8009360 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80076a8:	3b01      	subs	r3, #1
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f023 0307 	bic.w	r3, r3, #7
 80076b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f003 0307 	and.w	r3, r3, #7
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00a      	beq.n	80076d8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d01f      	beq.n	800771e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	e012      	b.n	800770a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	69fb      	ldr	r3, [r7, #28]
 80076e8:	4413      	add	r3, r2
 80076ea:	7819      	ldrb	r1, [r3, #0]
 80076ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	3334      	adds	r3, #52	; 0x34
 80076f4:	460a      	mov	r2, r1
 80076f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4413      	add	r3, r2
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d006      	beq.n	8007712 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	3301      	adds	r3, #1
 8007708:	61fb      	str	r3, [r7, #28]
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	2b0f      	cmp	r3, #15
 800770e:	d9e9      	bls.n	80076e4 <prvInitialiseNewTask+0x64>
 8007710:	e000      	b.n	8007714 <prvInitialiseNewTask+0x94>
			{
				break;
 8007712:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007716:	2200      	movs	r2, #0
 8007718:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800771c:	e003      	b.n	8007726 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007728:	2b37      	cmp	r3, #55	; 0x37
 800772a:	d901      	bls.n	8007730 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800772c:	2337      	movs	r3, #55	; 0x37
 800772e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007732:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007734:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800773a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800773c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773e:	2200      	movs	r2, #0
 8007740:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	3304      	adds	r3, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff f886 	bl	8006858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800774c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774e:	3318      	adds	r3, #24
 8007750:	4618      	mov	r0, r3
 8007752:	f7ff f881 	bl	8006858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800776a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800776c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800776e:	2200      	movs	r2, #0
 8007770:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2200      	movs	r2, #0
 8007776:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	2200      	movs	r2, #0
 800777e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007782:	683a      	ldr	r2, [r7, #0]
 8007784:	68f9      	ldr	r1, [r7, #12]
 8007786:	69b8      	ldr	r0, [r7, #24]
 8007788:	f001 f940 	bl	8008a0c <pxPortInitialiseStack>
 800778c:	4602      	mov	r2, r0
 800778e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007790:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800779c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800779e:	bf00      	nop
 80077a0:	3720      	adds	r7, #32
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
	...

080077a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077b0:	f001 fa58 	bl	8008c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077b4:	4b2d      	ldr	r3, [pc, #180]	; (800786c <prvAddNewTaskToReadyList+0xc4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3301      	adds	r3, #1
 80077ba:	4a2c      	ldr	r2, [pc, #176]	; (800786c <prvAddNewTaskToReadyList+0xc4>)
 80077bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077be:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <prvAddNewTaskToReadyList+0xc8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077c6:	4a2a      	ldr	r2, [pc, #168]	; (8007870 <prvAddNewTaskToReadyList+0xc8>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077cc:	4b27      	ldr	r3, [pc, #156]	; (800786c <prvAddNewTaskToReadyList+0xc4>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d110      	bne.n	80077f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077d4:	f000 fc28 	bl	8008028 <prvInitialiseTaskLists>
 80077d8:	e00d      	b.n	80077f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077da:	4b26      	ldr	r3, [pc, #152]	; (8007874 <prvAddNewTaskToReadyList+0xcc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d109      	bne.n	80077f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077e2:	4b23      	ldr	r3, [pc, #140]	; (8007870 <prvAddNewTaskToReadyList+0xc8>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d802      	bhi.n	80077f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077f0:	4a1f      	ldr	r2, [pc, #124]	; (8007870 <prvAddNewTaskToReadyList+0xc8>)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077f6:	4b20      	ldr	r3, [pc, #128]	; (8007878 <prvAddNewTaskToReadyList+0xd0>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	4a1e      	ldr	r2, [pc, #120]	; (8007878 <prvAddNewTaskToReadyList+0xd0>)
 80077fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007800:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <prvAddNewTaskToReadyList+0xd0>)
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800780c:	4b1b      	ldr	r3, [pc, #108]	; (800787c <prvAddNewTaskToReadyList+0xd4>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d903      	bls.n	800781c <prvAddNewTaskToReadyList+0x74>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007818:	4a18      	ldr	r2, [pc, #96]	; (800787c <prvAddNewTaskToReadyList+0xd4>)
 800781a:	6013      	str	r3, [r2, #0]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4613      	mov	r3, r2
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	4413      	add	r3, r2
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	4a15      	ldr	r2, [pc, #84]	; (8007880 <prvAddNewTaskToReadyList+0xd8>)
 800782a:	441a      	add	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	4619      	mov	r1, r3
 8007832:	4610      	mov	r0, r2
 8007834:	f7ff f81d 	bl	8006872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007838:	f001 fa44 	bl	8008cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800783c:	4b0d      	ldr	r3, [pc, #52]	; (8007874 <prvAddNewTaskToReadyList+0xcc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00e      	beq.n	8007862 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <prvAddNewTaskToReadyList+0xc8>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784e:	429a      	cmp	r2, r3
 8007850:	d207      	bcs.n	8007862 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <prvAddNewTaskToReadyList+0xdc>)
 8007854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007862:	bf00      	nop
 8007864:	3708      	adds	r7, #8
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000cdf0 	.word	0x2000cdf0
 8007870:	2000c91c 	.word	0x2000c91c
 8007874:	2000cdfc 	.word	0x2000cdfc
 8007878:	2000ce0c 	.word	0x2000ce0c
 800787c:	2000cdf8 	.word	0x2000cdf8
 8007880:	2000c920 	.word	0x2000c920
 8007884:	e000ed04 	.word	0xe000ed04

08007888 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007890:	2300      	movs	r3, #0
 8007892:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d017      	beq.n	80078ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800789a:	4b13      	ldr	r3, [pc, #76]	; (80078e8 <vTaskDelay+0x60>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00a      	beq.n	80078b8 <vTaskDelay+0x30>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60bb      	str	r3, [r7, #8]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80078b8:	f000 f880 	bl	80079bc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fcfc 	bl	80082bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80078c4:	f000 f888 	bl	80079d8 <xTaskResumeAll>
 80078c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d107      	bne.n	80078e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80078d0:	4b06      	ldr	r3, [pc, #24]	; (80078ec <vTaskDelay+0x64>)
 80078d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078e0:	bf00      	nop
 80078e2:	3710      	adds	r7, #16
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	2000ce18 	.word	0x2000ce18
 80078ec:	e000ed04 	.word	0xe000ed04

080078f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078fe:	463a      	mov	r2, r7
 8007900:	1d39      	adds	r1, r7, #4
 8007902:	f107 0308 	add.w	r3, r7, #8
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe ff52 	bl	80067b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800790c:	6839      	ldr	r1, [r7, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	9202      	str	r2, [sp, #8]
 8007914:	9301      	str	r3, [sp, #4]
 8007916:	2300      	movs	r3, #0
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	2300      	movs	r3, #0
 800791c:	460a      	mov	r2, r1
 800791e:	4921      	ldr	r1, [pc, #132]	; (80079a4 <vTaskStartScheduler+0xb4>)
 8007920:	4821      	ldr	r0, [pc, #132]	; (80079a8 <vTaskStartScheduler+0xb8>)
 8007922:	f7ff fe0b 	bl	800753c <xTaskCreateStatic>
 8007926:	4603      	mov	r3, r0
 8007928:	4a20      	ldr	r2, [pc, #128]	; (80079ac <vTaskStartScheduler+0xbc>)
 800792a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800792c:	4b1f      	ldr	r3, [pc, #124]	; (80079ac <vTaskStartScheduler+0xbc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007934:	2301      	movs	r3, #1
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e001      	b.n	800793e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d102      	bne.n	800794a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007944:	f000 fd14 	bl	8008370 <xTimerCreateTimerTask>
 8007948:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d116      	bne.n	800797e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
}
 8007962:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007964:	4b12      	ldr	r3, [pc, #72]	; (80079b0 <vTaskStartScheduler+0xc0>)
 8007966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800796a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <vTaskStartScheduler+0xc4>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007972:	4b11      	ldr	r3, [pc, #68]	; (80079b8 <vTaskStartScheduler+0xc8>)
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007978:	f001 f8d2 	bl	8008b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800797c:	e00e      	b.n	800799c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007984:	d10a      	bne.n	800799c <vTaskStartScheduler+0xac>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60fb      	str	r3, [r7, #12]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <vTaskStartScheduler+0xaa>
}
 800799c:	bf00      	nop
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	08009398 	.word	0x08009398
 80079a8:	08007ff5 	.word	0x08007ff5
 80079ac:	2000ce14 	.word	0x2000ce14
 80079b0:	2000ce10 	.word	0x2000ce10
 80079b4:	2000cdfc 	.word	0x2000cdfc
 80079b8:	2000cdf4 	.word	0x2000cdf4

080079bc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80079c0:	4b04      	ldr	r3, [pc, #16]	; (80079d4 <vTaskSuspendAll+0x18>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	4a03      	ldr	r2, [pc, #12]	; (80079d4 <vTaskSuspendAll+0x18>)
 80079c8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80079ca:	bf00      	nop
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	2000ce18 	.word	0x2000ce18

080079d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079e6:	4b42      	ldr	r3, [pc, #264]	; (8007af0 <xTaskResumeAll+0x118>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10a      	bne.n	8007a04 <xTaskResumeAll+0x2c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	603b      	str	r3, [r7, #0]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a04:	f001 f92e 	bl	8008c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a08:	4b39      	ldr	r3, [pc, #228]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	4a38      	ldr	r2, [pc, #224]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a12:	4b37      	ldr	r3, [pc, #220]	; (8007af0 <xTaskResumeAll+0x118>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d162      	bne.n	8007ae0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a1a:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <xTaskResumeAll+0x11c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d05e      	beq.n	8007ae0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a22:	e02f      	b.n	8007a84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a24:	4b34      	ldr	r3, [pc, #208]	; (8007af8 <xTaskResumeAll+0x120>)
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3318      	adds	r3, #24
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe ff7b 	bl	800692c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fe ff76 	bl	800692c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a44:	4b2d      	ldr	r3, [pc, #180]	; (8007afc <xTaskResumeAll+0x124>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d903      	bls.n	8007a54 <xTaskResumeAll+0x7c>
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	4a2a      	ldr	r2, [pc, #168]	; (8007afc <xTaskResumeAll+0x124>)
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	4a27      	ldr	r2, [pc, #156]	; (8007b00 <xTaskResumeAll+0x128>)
 8007a62:	441a      	add	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	3304      	adds	r3, #4
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f7fe ff01 	bl	8006872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a74:	4b23      	ldr	r3, [pc, #140]	; (8007b04 <xTaskResumeAll+0x12c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a7e:	4b22      	ldr	r3, [pc, #136]	; (8007b08 <xTaskResumeAll+0x130>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a84:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <xTaskResumeAll+0x120>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1cb      	bne.n	8007a24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a92:	f000 fb67 	bl	8008164 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a96:	4b1d      	ldr	r3, [pc, #116]	; (8007b0c <xTaskResumeAll+0x134>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d010      	beq.n	8007ac4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007aa2:	f000 f847 	bl	8007b34 <xTaskIncrementTick>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007aac:	4b16      	ldr	r3, [pc, #88]	; (8007b08 <xTaskResumeAll+0x130>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1f1      	bne.n	8007aa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007abe:	4b13      	ldr	r3, [pc, #76]	; (8007b0c <xTaskResumeAll+0x134>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <xTaskResumeAll+0x130>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d009      	beq.n	8007ae0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007ad0:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <xTaskResumeAll+0x138>)
 8007ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ae0:	f001 f8f0 	bl	8008cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000ce18 	.word	0x2000ce18
 8007af4:	2000cdf0 	.word	0x2000cdf0
 8007af8:	2000cdb0 	.word	0x2000cdb0
 8007afc:	2000cdf8 	.word	0x2000cdf8
 8007b00:	2000c920 	.word	0x2000c920
 8007b04:	2000c91c 	.word	0x2000c91c
 8007b08:	2000ce04 	.word	0x2000ce04
 8007b0c:	2000ce00 	.word	0x2000ce00
 8007b10:	e000ed04 	.word	0xe000ed04

08007b14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <xTaskGetTickCount+0x1c>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007b20:	687b      	ldr	r3, [r7, #4]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
 8007b2e:	bf00      	nop
 8007b30:	2000cdf4 	.word	0x2000cdf4

08007b34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3e:	4b4f      	ldr	r3, [pc, #316]	; (8007c7c <xTaskIncrementTick+0x148>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 808f 	bne.w	8007c66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b48:	4b4d      	ldr	r3, [pc, #308]	; (8007c80 <xTaskIncrementTick+0x14c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b50:	4a4b      	ldr	r2, [pc, #300]	; (8007c80 <xTaskIncrementTick+0x14c>)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d120      	bne.n	8007b9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b5c:	4b49      	ldr	r3, [pc, #292]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <xTaskIncrementTick+0x48>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	f383 8811 	msr	BASEPRI, r3
 8007b6e:	f3bf 8f6f 	isb	sy
 8007b72:	f3bf 8f4f 	dsb	sy
 8007b76:	603b      	str	r3, [r7, #0]
}
 8007b78:	bf00      	nop
 8007b7a:	e7fe      	b.n	8007b7a <xTaskIncrementTick+0x46>
 8007b7c:	4b41      	ldr	r3, [pc, #260]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	4b41      	ldr	r3, [pc, #260]	; (8007c88 <xTaskIncrementTick+0x154>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a3f      	ldr	r2, [pc, #252]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4a3f      	ldr	r2, [pc, #252]	; (8007c88 <xTaskIncrementTick+0x154>)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6013      	str	r3, [r2, #0]
 8007b90:	4b3e      	ldr	r3, [pc, #248]	; (8007c8c <xTaskIncrementTick+0x158>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3301      	adds	r3, #1
 8007b96:	4a3d      	ldr	r2, [pc, #244]	; (8007c8c <xTaskIncrementTick+0x158>)
 8007b98:	6013      	str	r3, [r2, #0]
 8007b9a:	f000 fae3 	bl	8008164 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b9e:	4b3c      	ldr	r3, [pc, #240]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d349      	bcc.n	8007c3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba8:	4b36      	ldr	r3, [pc, #216]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bb8:	601a      	str	r2, [r3, #0]
					break;
 8007bba:	e03f      	b.n	8007c3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bbc:	4b31      	ldr	r3, [pc, #196]	; (8007c84 <xTaskIncrementTick+0x150>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d203      	bcs.n	8007bdc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bd4:	4a2e      	ldr	r2, [pc, #184]	; (8007c90 <xTaskIncrementTick+0x15c>)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bda:	e02f      	b.n	8007c3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fea3 	bl	800692c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fe9a 	bl	800692c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <xTaskIncrementTick+0x160>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d903      	bls.n	8007c0c <xTaskIncrementTick+0xd8>
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c08:	4a22      	ldr	r2, [pc, #136]	; (8007c94 <xTaskIncrementTick+0x160>)
 8007c0a:	6013      	str	r3, [r2, #0]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4a1f      	ldr	r2, [pc, #124]	; (8007c98 <xTaskIncrementTick+0x164>)
 8007c1a:	441a      	add	r2, r3
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	3304      	adds	r3, #4
 8007c20:	4619      	mov	r1, r3
 8007c22:	4610      	mov	r0, r2
 8007c24:	f7fe fe25 	bl	8006872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c2c:	4b1b      	ldr	r3, [pc, #108]	; (8007c9c <xTaskIncrementTick+0x168>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d3b8      	bcc.n	8007ba8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c36:	2301      	movs	r3, #1
 8007c38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c3a:	e7b5      	b.n	8007ba8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c3c:	4b17      	ldr	r3, [pc, #92]	; (8007c9c <xTaskIncrementTick+0x168>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c42:	4915      	ldr	r1, [pc, #84]	; (8007c98 <xTaskIncrementTick+0x164>)
 8007c44:	4613      	mov	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	4413      	add	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d901      	bls.n	8007c58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c54:	2301      	movs	r3, #1
 8007c56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c58:	4b11      	ldr	r3, [pc, #68]	; (8007ca0 <xTaskIncrementTick+0x16c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e004      	b.n	8007c70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTaskIncrementTick+0x170>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ca4 <xTaskIncrementTick+0x170>)
 8007c6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c70:	697b      	ldr	r3, [r7, #20]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	2000ce18 	.word	0x2000ce18
 8007c80:	2000cdf4 	.word	0x2000cdf4
 8007c84:	2000cda8 	.word	0x2000cda8
 8007c88:	2000cdac 	.word	0x2000cdac
 8007c8c:	2000ce08 	.word	0x2000ce08
 8007c90:	2000ce10 	.word	0x2000ce10
 8007c94:	2000cdf8 	.word	0x2000cdf8
 8007c98:	2000c920 	.word	0x2000c920
 8007c9c:	2000c91c 	.word	0x2000c91c
 8007ca0:	2000ce04 	.word	0x2000ce04
 8007ca4:	2000ce00 	.word	0x2000ce00

08007ca8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007cae:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <vTaskSwitchContext+0xa8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d003      	beq.n	8007cbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <vTaskSwitchContext+0xac>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cbc:	e041      	b.n	8007d42 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007cbe:	4b25      	ldr	r3, [pc, #148]	; (8007d54 <vTaskSwitchContext+0xac>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cc4:	4b24      	ldr	r3, [pc, #144]	; (8007d58 <vTaskSwitchContext+0xb0>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	e010      	b.n	8007cee <vTaskSwitchContext+0x46>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <vTaskSwitchContext+0x40>
	__asm volatile
 8007cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd6:	f383 8811 	msr	BASEPRI, r3
 8007cda:	f3bf 8f6f 	isb	sy
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	607b      	str	r3, [r7, #4]
}
 8007ce4:	bf00      	nop
 8007ce6:	e7fe      	b.n	8007ce6 <vTaskSwitchContext+0x3e>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	491b      	ldr	r1, [pc, #108]	; (8007d5c <vTaskSwitchContext+0xb4>)
 8007cf0:	68fa      	ldr	r2, [r7, #12]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	440b      	add	r3, r1
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0e4      	beq.n	8007ccc <vTaskSwitchContext+0x24>
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4613      	mov	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4a13      	ldr	r2, [pc, #76]	; (8007d5c <vTaskSwitchContext+0xb4>)
 8007d0e:	4413      	add	r3, r2
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	605a      	str	r2, [r3, #4]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	685a      	ldr	r2, [r3, #4]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	3308      	adds	r3, #8
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d104      	bne.n	8007d32 <vTaskSwitchContext+0x8a>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	4a09      	ldr	r2, [pc, #36]	; (8007d60 <vTaskSwitchContext+0xb8>)
 8007d3a:	6013      	str	r3, [r2, #0]
 8007d3c:	4a06      	ldr	r2, [pc, #24]	; (8007d58 <vTaskSwitchContext+0xb0>)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6013      	str	r3, [r2, #0]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	2000ce18 	.word	0x2000ce18
 8007d54:	2000ce04 	.word	0x2000ce04
 8007d58:	2000cdf8 	.word	0x2000cdf8
 8007d5c:	2000c920 	.word	0x2000c920
 8007d60:	2000c91c 	.word	0x2000c91c

08007d64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d78:	f383 8811 	msr	BASEPRI, r3
 8007d7c:	f3bf 8f6f 	isb	sy
 8007d80:	f3bf 8f4f 	dsb	sy
 8007d84:	60fb      	str	r3, [r7, #12]
}
 8007d86:	bf00      	nop
 8007d88:	e7fe      	b.n	8007d88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d8a:	4b07      	ldr	r3, [pc, #28]	; (8007da8 <vTaskPlaceOnEventList+0x44>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3318      	adds	r3, #24
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fe fd91 	bl	80068ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d98:	2101      	movs	r1, #1
 8007d9a:	6838      	ldr	r0, [r7, #0]
 8007d9c:	f000 fa8e 	bl	80082bc <prvAddCurrentTaskToDelayedList>
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	2000c91c 	.word	0x2000c91c

08007dac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d10a      	bne.n	8007dd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	617b      	str	r3, [r7, #20]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dd4:	4b0a      	ldr	r3, [pc, #40]	; (8007e00 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3318      	adds	r3, #24
 8007dda:	4619      	mov	r1, r3
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f7fe fd48 	bl	8006872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007dee:	6879      	ldr	r1, [r7, #4]
 8007df0:	68b8      	ldr	r0, [r7, #8]
 8007df2:	f000 fa63 	bl	80082bc <prvAddCurrentTaskToDelayedList>
	}
 8007df6:	bf00      	nop
 8007df8:	3718      	adds	r7, #24
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	2000c91c 	.word	0x2000c91c

08007e04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	68db      	ldr	r3, [r3, #12]
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	60fb      	str	r3, [r7, #12]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3318      	adds	r3, #24
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7fe fd79 	bl	800692c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e3a:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <xTaskRemoveFromEventList+0xb0>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11d      	bne.n	8007e7e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3304      	adds	r3, #4
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fd70 	bl	800692c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d903      	bls.n	8007e60 <xTaskRemoveFromEventList+0x5c>
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5c:	4a16      	ldr	r2, [pc, #88]	; (8007eb8 <xTaskRemoveFromEventList+0xb4>)
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4613      	mov	r3, r2
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4a13      	ldr	r2, [pc, #76]	; (8007ebc <xTaskRemoveFromEventList+0xb8>)
 8007e6e:	441a      	add	r2, r3
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	3304      	adds	r3, #4
 8007e74:	4619      	mov	r1, r3
 8007e76:	4610      	mov	r0, r2
 8007e78:	f7fe fcfb 	bl	8006872 <vListInsertEnd>
 8007e7c:	e005      	b.n	8007e8a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	3318      	adds	r3, #24
 8007e82:	4619      	mov	r1, r3
 8007e84:	480e      	ldr	r0, [pc, #56]	; (8007ec0 <xTaskRemoveFromEventList+0xbc>)
 8007e86:	f7fe fcf4 	bl	8006872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <xTaskRemoveFromEventList+0xc0>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d905      	bls.n	8007ea4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	; (8007ec8 <xTaskRemoveFromEventList+0xc4>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	e001      	b.n	8007ea8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ea8:	697b      	ldr	r3, [r7, #20]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	2000ce18 	.word	0x2000ce18
 8007eb8:	2000cdf8 	.word	0x2000cdf8
 8007ebc:	2000c920 	.word	0x2000c920
 8007ec0:	2000cdb0 	.word	0x2000cdb0
 8007ec4:	2000c91c 	.word	0x2000c91c
 8007ec8:	2000ce04 	.word	0x2000ce04

08007ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ed4:	4b06      	ldr	r3, [pc, #24]	; (8007ef0 <vTaskInternalSetTimeOutState+0x24>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <vTaskInternalSetTimeOutState+0x28>)
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	605a      	str	r2, [r3, #4]
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	2000ce08 	.word	0x2000ce08
 8007ef4:	2000cdf4 	.word	0x2000cdf4

08007ef8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	613b      	str	r3, [r7, #16]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10a      	bne.n	8007f3a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60fb      	str	r3, [r7, #12]
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f3a:	f000 fe93 	bl	8008c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f3e:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <xTaskCheckForTimeOut+0xd8>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8007f4e:	4b21      	ldr	r3, [pc, #132]	; (8007fd4 <xTaskCheckForTimeOut+0xdc>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d007      	beq.n	8007f6a <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007f5a:	4b1e      	ldr	r3, [pc, #120]	; (8007fd4 <xTaskCheckForTimeOut+0xdc>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e02b      	b.n	8007fc2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f72:	d102      	bne.n	8007f7a <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f74:	2300      	movs	r3, #0
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	e023      	b.n	8007fc2 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b16      	ldr	r3, [pc, #88]	; (8007fd8 <xTaskCheckForTimeOut+0xe0>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d007      	beq.n	8007f96 <xTaskCheckForTimeOut+0x9e>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d302      	bcc.n	8007f96 <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f90:	2301      	movs	r3, #1
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	e015      	b.n	8007fc2 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	697a      	ldr	r2, [r7, #20]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d20b      	bcs.n	8007fb8 <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7ff ff8d 	bl	8007ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	61fb      	str	r3, [r7, #28]
 8007fb6:	e004      	b.n	8007fc2 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007fc2:	f000 fe7f 	bl	8008cc4 <vPortExitCritical>

	return xReturn;
 8007fc6:	69fb      	ldr	r3, [r7, #28]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3720      	adds	r7, #32
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	2000cdf4 	.word	0x2000cdf4
 8007fd4:	2000c91c 	.word	0x2000c91c
 8007fd8:	2000ce08 	.word	0x2000ce08

08007fdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fdc:	b480      	push	{r7}
 8007fde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fe0:	4b03      	ldr	r3, [pc, #12]	; (8007ff0 <vTaskMissedYield+0x14>)
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	2000ce04 	.word	0x2000ce04

08007ff4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ffc:	f000 f854 	bl	80080a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008000:	4b07      	ldr	r3, [pc, #28]	; (8008020 <prvIdleTask+0x2c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d907      	bls.n	8008018 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008008:	4b06      	ldr	r3, [pc, #24]	; (8008024 <prvIdleTask+0x30>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008018:	f7f8 fa56 	bl	80004c8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800801c:	e7ee      	b.n	8007ffc <prvIdleTask+0x8>
 800801e:	bf00      	nop
 8008020:	2000c920 	.word	0x2000c920
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800802e:	2300      	movs	r3, #0
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	e00c      	b.n	800804e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	4613      	mov	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4a12      	ldr	r2, [pc, #72]	; (8008088 <prvInitialiseTaskLists+0x60>)
 8008040:	4413      	add	r3, r2
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fbe8 	bl	8006818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3301      	adds	r3, #1
 800804c:	607b      	str	r3, [r7, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b37      	cmp	r3, #55	; 0x37
 8008052:	d9ef      	bls.n	8008034 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008054:	480d      	ldr	r0, [pc, #52]	; (800808c <prvInitialiseTaskLists+0x64>)
 8008056:	f7fe fbdf 	bl	8006818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800805a:	480d      	ldr	r0, [pc, #52]	; (8008090 <prvInitialiseTaskLists+0x68>)
 800805c:	f7fe fbdc 	bl	8006818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008060:	480c      	ldr	r0, [pc, #48]	; (8008094 <prvInitialiseTaskLists+0x6c>)
 8008062:	f7fe fbd9 	bl	8006818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008066:	480c      	ldr	r0, [pc, #48]	; (8008098 <prvInitialiseTaskLists+0x70>)
 8008068:	f7fe fbd6 	bl	8006818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800806c:	480b      	ldr	r0, [pc, #44]	; (800809c <prvInitialiseTaskLists+0x74>)
 800806e:	f7fe fbd3 	bl	8006818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008072:	4b0b      	ldr	r3, [pc, #44]	; (80080a0 <prvInitialiseTaskLists+0x78>)
 8008074:	4a05      	ldr	r2, [pc, #20]	; (800808c <prvInitialiseTaskLists+0x64>)
 8008076:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008078:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <prvInitialiseTaskLists+0x7c>)
 800807a:	4a05      	ldr	r2, [pc, #20]	; (8008090 <prvInitialiseTaskLists+0x68>)
 800807c:	601a      	str	r2, [r3, #0]
}
 800807e:	bf00      	nop
 8008080:	3708      	adds	r7, #8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	2000c920 	.word	0x2000c920
 800808c:	2000cd80 	.word	0x2000cd80
 8008090:	2000cd94 	.word	0x2000cd94
 8008094:	2000cdb0 	.word	0x2000cdb0
 8008098:	2000cdc4 	.word	0x2000cdc4
 800809c:	2000cddc 	.word	0x2000cddc
 80080a0:	2000cda8 	.word	0x2000cda8
 80080a4:	2000cdac 	.word	0x2000cdac

080080a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080ae:	e019      	b.n	80080e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080b0:	f000 fdd8 	bl	8008c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b4:	4b10      	ldr	r3, [pc, #64]	; (80080f8 <prvCheckTasksWaitingTermination+0x50>)
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7fe fc33 	bl	800692c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080c6:	4b0d      	ldr	r3, [pc, #52]	; (80080fc <prvCheckTasksWaitingTermination+0x54>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3b01      	subs	r3, #1
 80080cc:	4a0b      	ldr	r2, [pc, #44]	; (80080fc <prvCheckTasksWaitingTermination+0x54>)
 80080ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080da:	f000 fdf3 	bl	8008cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 f810 	bl	8008104 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e4:	4b06      	ldr	r3, [pc, #24]	; (8008100 <prvCheckTasksWaitingTermination+0x58>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e1      	bne.n	80080b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	3708      	adds	r7, #8
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	2000cdc4 	.word	0x2000cdc4
 80080fc:	2000cdf0 	.word	0x2000cdf0
 8008100:	2000cdd8 	.word	0x2000cdd8

08008104 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008112:	2b00      	cmp	r3, #0
 8008114:	d108      	bne.n	8008128 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811a:	4618      	mov	r0, r3
 800811c:	f000 ff68 	bl	8008ff0 <vPortFree>
				vPortFree( pxTCB );
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 ff65 	bl	8008ff0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008126:	e018      	b.n	800815a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800812e:	2b01      	cmp	r3, #1
 8008130:	d103      	bne.n	800813a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 ff5c 	bl	8008ff0 <vPortFree>
	}
 8008138:	e00f      	b.n	800815a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008140:	2b02      	cmp	r3, #2
 8008142:	d00a      	beq.n	800815a <prvDeleteTCB+0x56>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	e7fe      	b.n	8008158 <prvDeleteTCB+0x54>
	}
 800815a:	bf00      	nop
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
	...

08008164 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <prvResetNextTaskUnblockTime+0x38>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d104      	bne.n	800817e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <prvResetNextTaskUnblockTime+0x3c>)
 8008176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800817a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800817c:	e008      	b.n	8008190 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <prvResetNextTaskUnblockTime+0x38>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	4a04      	ldr	r2, [pc, #16]	; (80081a0 <prvResetNextTaskUnblockTime+0x3c>)
 800818e:	6013      	str	r3, [r2, #0]
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	2000cda8 	.word	0x2000cda8
 80081a0:	2000ce10 	.word	0x2000ce10

080081a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <xTaskGetSchedulerState+0x34>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d102      	bne.n	80081b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081b2:	2301      	movs	r3, #1
 80081b4:	607b      	str	r3, [r7, #4]
 80081b6:	e008      	b.n	80081ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081b8:	4b08      	ldr	r3, [pc, #32]	; (80081dc <xTaskGetSchedulerState+0x38>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d102      	bne.n	80081c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081c0:	2302      	movs	r3, #2
 80081c2:	607b      	str	r3, [r7, #4]
 80081c4:	e001      	b.n	80081ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081c6:	2300      	movs	r3, #0
 80081c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081ca:	687b      	ldr	r3, [r7, #4]
	}
 80081cc:	4618      	mov	r0, r3
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr
 80081d8:	2000cdfc 	.word	0x2000cdfc
 80081dc:	2000ce18 	.word	0x2000ce18

080081e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b086      	sub	sp, #24
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d056      	beq.n	80082a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80081f6:	4b2e      	ldr	r3, [pc, #184]	; (80082b0 <xTaskPriorityDisinherit+0xd0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	693a      	ldr	r2, [r7, #16]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d00a      	beq.n	8008216 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	60bb      	str	r3, [r7, #8]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008246:	429a      	cmp	r2, r3
 8008248:	d02c      	beq.n	80082a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824e:	2b00      	cmp	r3, #0
 8008250:	d128      	bne.n	80082a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	3304      	adds	r3, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f7fe fb68 	bl	800692c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008274:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <xTaskPriorityDisinherit+0xd4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	429a      	cmp	r2, r3
 800827a:	d903      	bls.n	8008284 <xTaskPriorityDisinherit+0xa4>
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	4a0c      	ldr	r2, [pc, #48]	; (80082b4 <xTaskPriorityDisinherit+0xd4>)
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	4613      	mov	r3, r2
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4413      	add	r3, r2
 800828e:	009b      	lsls	r3, r3, #2
 8008290:	4a09      	ldr	r2, [pc, #36]	; (80082b8 <xTaskPriorityDisinherit+0xd8>)
 8008292:	441a      	add	r2, r3
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f7fe fae9 	bl	8006872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082a0:	2301      	movs	r3, #1
 80082a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082a4:	697b      	ldr	r3, [r7, #20]
	}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3718      	adds	r7, #24
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	2000c91c 	.word	0x2000c91c
 80082b4:	2000cdf8 	.word	0x2000cdf8
 80082b8:	2000c920 	.word	0x2000c920

080082bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082c6:	4b24      	ldr	r3, [pc, #144]	; (8008358 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80082cc:	4b23      	ldr	r3, [pc, #140]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082d6:	4b21      	ldr	r3, [pc, #132]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	3304      	adds	r3, #4
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fb25 	bl	800692c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e8:	d10a      	bne.n	8008300 <prvAddCurrentTaskToDelayedList+0x44>
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d007      	beq.n	8008300 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f0:	4b1a      	ldr	r3, [pc, #104]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4619      	mov	r1, r3
 80082f8:	4819      	ldr	r0, [pc, #100]	; (8008360 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082fa:	f7fe faba 	bl	8006872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082fe:	e026      	b.n	800834e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008300:	68fa      	ldr	r2, [r7, #12]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4413      	add	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008308:	4b14      	ldr	r3, [pc, #80]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	429a      	cmp	r2, r3
 8008316:	d209      	bcs.n	800832c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008318:	4b12      	ldr	r3, [pc, #72]	; (8008364 <prvAddCurrentTaskToDelayedList+0xa8>)
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	4b0f      	ldr	r3, [pc, #60]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7fe fac8 	bl	80068ba <vListInsert>
}
 800832a:	e010      	b.n	800834e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800832c:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <prvAddCurrentTaskToDelayedList+0xac>)
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3304      	adds	r3, #4
 8008336:	4619      	mov	r1, r3
 8008338:	4610      	mov	r0, r2
 800833a:	f7fe fabe 	bl	80068ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	429a      	cmp	r2, r3
 8008346:	d202      	bcs.n	800834e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8008348:	4a08      	ldr	r2, [pc, #32]	; (800836c <prvAddCurrentTaskToDelayedList+0xb0>)
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6013      	str	r3, [r2, #0]
}
 800834e:	bf00      	nop
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	2000cdf4 	.word	0x2000cdf4
 800835c:	2000c91c 	.word	0x2000c91c
 8008360:	2000cddc 	.word	0x2000cddc
 8008364:	2000cdac 	.word	0x2000cdac
 8008368:	2000cda8 	.word	0x2000cda8
 800836c:	2000ce10 	.word	0x2000ce10

08008370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b08a      	sub	sp, #40	; 0x28
 8008374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800837a:	f000 fb07 	bl	800898c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800837e:	4b1c      	ldr	r3, [pc, #112]	; (80083f0 <xTimerCreateTimerTask+0x80>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d021      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800838e:	1d3a      	adds	r2, r7, #4
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	f107 030c 	add.w	r3, r7, #12
 8008398:	4618      	mov	r0, r3
 800839a:	f7fe fa23 	bl	80067e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	9202      	str	r2, [sp, #8]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2302      	movs	r3, #2
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	2300      	movs	r3, #0
 80083ae:	460a      	mov	r2, r1
 80083b0:	4910      	ldr	r1, [pc, #64]	; (80083f4 <xTimerCreateTimerTask+0x84>)
 80083b2:	4811      	ldr	r0, [pc, #68]	; (80083f8 <xTimerCreateTimerTask+0x88>)
 80083b4:	f7ff f8c2 	bl	800753c <xTaskCreateStatic>
 80083b8:	4603      	mov	r3, r0
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80083be:	4b0f      	ldr	r3, [pc, #60]	; (80083fc <xTimerCreateTimerTask+0x8c>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083c6:	2301      	movs	r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083e6:	697b      	ldr	r3, [r7, #20]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	2000ce4c 	.word	0x2000ce4c
 80083f4:	080093a0 	.word	0x080093a0
 80083f8:	08008535 	.word	0x08008535
 80083fc:	2000ce50 	.word	0x2000ce50

08008400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	607a      	str	r2, [r7, #4]
 800840c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800840e:	2300      	movs	r3, #0
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	623b      	str	r3, [r7, #32]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800842e:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <xTimerGenericCommand+0x98>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d02a      	beq.n	800848c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b05      	cmp	r3, #5
 8008446:	dc18      	bgt.n	800847a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008448:	f7ff feac 	bl	80081a4 <xTaskGetSchedulerState>
 800844c:	4603      	mov	r3, r0
 800844e:	2b02      	cmp	r3, #2
 8008450:	d109      	bne.n	8008466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008452:	4b11      	ldr	r3, [pc, #68]	; (8008498 <xTimerGenericCommand+0x98>)
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f107 0110 	add.w	r1, r7, #16
 800845a:	2300      	movs	r3, #0
 800845c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800845e:	f7fe fc37 	bl	8006cd0 <xQueueGenericSend>
 8008462:	6278      	str	r0, [r7, #36]	; 0x24
 8008464:	e012      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008466:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <xTimerGenericCommand+0x98>)
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	f107 0110 	add.w	r1, r7, #16
 800846e:	2300      	movs	r3, #0
 8008470:	2200      	movs	r2, #0
 8008472:	f7fe fc2d 	bl	8006cd0 <xQueueGenericSend>
 8008476:	6278      	str	r0, [r7, #36]	; 0x24
 8008478:	e008      	b.n	800848c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800847a:	4b07      	ldr	r3, [pc, #28]	; (8008498 <xTimerGenericCommand+0x98>)
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f107 0110 	add.w	r1, r7, #16
 8008482:	2300      	movs	r3, #0
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	f7fe fd21 	bl	8006ecc <xQueueGenericSendFromISR>
 800848a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800848e:	4618      	mov	r0, r3
 8008490:	3728      	adds	r7, #40	; 0x28
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	2000ce4c 	.word	0x2000ce4c

0800849c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b088      	sub	sp, #32
 80084a0:	af02      	add	r7, sp, #8
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a6:	4b22      	ldr	r3, [pc, #136]	; (8008530 <prvProcessExpiredTimer+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3304      	adds	r3, #4
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7fe fa39 	bl	800692c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d022      	beq.n	800850e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	18d1      	adds	r1, r2, r3
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	683a      	ldr	r2, [r7, #0]
 80084d4:	6978      	ldr	r0, [r7, #20]
 80084d6:	f000 f8d1 	bl	800867c <prvInsertTimerInActiveList>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01f      	beq.n	8008520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084e0:	2300      	movs	r3, #0
 80084e2:	9300      	str	r3, [sp, #0]
 80084e4:	2300      	movs	r3, #0
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	2100      	movs	r1, #0
 80084ea:	6978      	ldr	r0, [r7, #20]
 80084ec:	f7ff ff88 	bl	8008400 <xTimerGenericCommand>
 80084f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d113      	bne.n	8008520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60fb      	str	r3, [r7, #12]
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008514:	f023 0301 	bic.w	r3, r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	4798      	blx	r3
}
 8008528:	bf00      	nop
 800852a:	3718      	adds	r7, #24
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	2000ce44 	.word	0x2000ce44

08008534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853c:	f107 0308 	add.w	r3, r7, #8
 8008540:	4618      	mov	r0, r3
 8008542:	f000 f857 	bl	80085f4 <prvGetNextExpireTime>
 8008546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4619      	mov	r1, r3
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f000 f803 	bl	8008558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008552:	f000 f8d5 	bl	8008700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008556:	e7f1      	b.n	800853c <prvTimerTask+0x8>

08008558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008562:	f7ff fa2b 	bl	80079bc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008566:	f107 0308 	add.w	r3, r7, #8
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f866 	bl	800863c <prvSampleTimeNow>
 8008570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d130      	bne.n	80085da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10a      	bne.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	429a      	cmp	r2, r3
 8008584:	d806      	bhi.n	8008594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008586:	f7ff fa27 	bl	80079d8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff85 	bl	800849c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008592:	e024      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d008      	beq.n	80085ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800859a:	4b13      	ldr	r3, [pc, #76]	; (80085e8 <prvProcessTimerOrBlockTask+0x90>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <prvProcessTimerOrBlockTask+0x50>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <prvProcessTimerOrBlockTask+0x52>
 80085a8:	2300      	movs	r3, #0
 80085aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <prvProcessTimerOrBlockTask+0x94>)
 80085ae:	6818      	ldr	r0, [r3, #0]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	4619      	mov	r1, r3
 80085ba:	f7fe ff8b 	bl	80074d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085be:	f7ff fa0b 	bl	80079d8 <xTaskResumeAll>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <prvProcessTimerOrBlockTask+0x98>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
}
 80085d8:	e001      	b.n	80085de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085da:	f7ff f9fd 	bl	80079d8 <xTaskResumeAll>
}
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	2000ce48 	.word	0x2000ce48
 80085ec:	2000ce4c 	.word	0x2000ce4c
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085fc:	4b0e      	ldr	r3, [pc, #56]	; (8008638 <prvGetNextExpireTime+0x44>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <prvGetNextExpireTime+0x16>
 8008606:	2201      	movs	r2, #1
 8008608:	e000      	b.n	800860c <prvGetNextExpireTime+0x18>
 800860a:	2200      	movs	r2, #0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d105      	bne.n	8008624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008618:	4b07      	ldr	r3, [pc, #28]	; (8008638 <prvGetNextExpireTime+0x44>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	60fb      	str	r3, [r7, #12]
 8008622:	e001      	b.n	8008628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008624:	2300      	movs	r3, #0
 8008626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008628:	68fb      	ldr	r3, [r7, #12]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	2000ce44 	.word	0x2000ce44

0800863c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008644:	f7ff fa66 	bl	8007b14 <xTaskGetTickCount>
 8008648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800864a:	4b0b      	ldr	r3, [pc, #44]	; (8008678 <prvSampleTimeNow+0x3c>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68fa      	ldr	r2, [r7, #12]
 8008650:	429a      	cmp	r2, r3
 8008652:	d205      	bcs.n	8008660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008654:	f000 f936 	bl	80088c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	e002      	b.n	8008666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008666:	4a04      	ldr	r2, [pc, #16]	; (8008678 <prvSampleTimeNow+0x3c>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800866c:	68fb      	ldr	r3, [r7, #12]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000ce54 	.word	0x2000ce54

0800867c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b086      	sub	sp, #24
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d812      	bhi.n	80086c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	1ad2      	subs	r2, r2, r3
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d302      	bcc.n	80086b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80086b0:	2301      	movs	r3, #1
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e01b      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80086b6:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <prvInsertTimerInActiveList+0x7c>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3304      	adds	r3, #4
 80086be:	4619      	mov	r1, r3
 80086c0:	4610      	mov	r0, r2
 80086c2:	f7fe f8fa 	bl	80068ba <vListInsert>
 80086c6:	e012      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086c8:	687a      	ldr	r2, [r7, #4]
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d206      	bcs.n	80086de <prvInsertTimerInActiveList+0x62>
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d302      	bcc.n	80086de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086d8:	2301      	movs	r3, #1
 80086da:	617b      	str	r3, [r7, #20]
 80086dc:	e007      	b.n	80086ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086de:	4b07      	ldr	r3, [pc, #28]	; (80086fc <prvInsertTimerInActiveList+0x80>)
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3304      	adds	r3, #4
 80086e6:	4619      	mov	r1, r3
 80086e8:	4610      	mov	r0, r2
 80086ea:	f7fe f8e6 	bl	80068ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086ee:	697b      	ldr	r3, [r7, #20]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	2000ce48 	.word	0x2000ce48
 80086fc:	2000ce44 	.word	0x2000ce44

08008700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b08e      	sub	sp, #56	; 0x38
 8008704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008706:	e0ca      	b.n	800889e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	da18      	bge.n	8008740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800870e:	1d3b      	adds	r3, r7, #4
 8008710:	3304      	adds	r3, #4
 8008712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10a      	bne.n	8008730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	61fb      	str	r3, [r7, #28]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008736:	6850      	ldr	r0, [r2, #4]
 8008738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800873a:	6892      	ldr	r2, [r2, #8]
 800873c:	4611      	mov	r1, r2
 800873e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	f2c0 80aa 	blt.w	800889c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	695b      	ldr	r3, [r3, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	3304      	adds	r3, #4
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe f8e7 	bl	800692c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800875e:	463b      	mov	r3, r7
 8008760:	4618      	mov	r0, r3
 8008762:	f7ff ff6b 	bl	800863c <prvSampleTimeNow>
 8008766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2b09      	cmp	r3, #9
 800876c:	f200 8097 	bhi.w	800889e <prvProcessReceivedCommands+0x19e>
 8008770:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <prvProcessReceivedCommands+0x78>)
 8008772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008776:	bf00      	nop
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a1 	.word	0x080087a1
 8008784:	08008815 	.word	0x08008815
 8008788:	08008829 	.word	0x08008829
 800878c:	08008873 	.word	0x08008873
 8008790:	080087a1 	.word	0x080087a1
 8008794:	080087a1 	.word	0x080087a1
 8008798:	08008815 	.word	0x08008815
 800879c:	08008829 	.word	0x08008829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087a6:	f043 0301 	orr.w	r3, r3, #1
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	18d1      	adds	r1, r2, r3
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c0:	f7ff ff5c 	bl	800867c <prvInsertTimerInActiveList>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d069      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	6a1b      	ldr	r3, [r3, #32]
 80087ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d8:	f003 0304 	and.w	r3, r3, #4
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d05e      	beq.n	800889e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	441a      	add	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	2100      	movs	r1, #0
 80087f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087f2:	f7ff fe05 	bl	8008400 <xTimerGenericCommand>
 80087f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087f8:	6a3b      	ldr	r3, [r7, #32]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d14f      	bne.n	800889e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	61bb      	str	r3, [r7, #24]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800881a:	f023 0301 	bic.w	r3, r3, #1
 800881e:	b2da      	uxtb	r2, r3
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008826:	e03a      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800882e:	f043 0301 	orr.w	r3, r3, #1
 8008832:	b2da      	uxtb	r2, r3
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	617b      	str	r3, [r7, #20]
}
 800885a:	bf00      	nop
 800885c:	e7fe      	b.n	800885c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008864:	18d1      	adds	r1, r2, r3
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800886c:	f7ff ff06 	bl	800867c <prvInsertTimerInActiveList>
					break;
 8008870:	e015      	b.n	800889e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008878:	f003 0302 	and.w	r3, r3, #2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d103      	bne.n	8008888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008882:	f000 fbb5 	bl	8008ff0 <vPortFree>
 8008886:	e00a      	b.n	800889e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800888e:	f023 0301 	bic.w	r3, r3, #1
 8008892:	b2da      	uxtb	r2, r3
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800889a:	e000      	b.n	800889e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800889c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800889e:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <prvProcessReceivedCommands+0x1c0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	1d39      	adds	r1, r7, #4
 80088a4:	2200      	movs	r2, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fe fbac 	bl	8007004 <xQueueReceive>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f47f af2a 	bne.w	8008708 <prvProcessReceivedCommands+0x8>
	}
}
 80088b4:	bf00      	nop
 80088b6:	bf00      	nop
 80088b8:	3730      	adds	r7, #48	; 0x30
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000ce4c 	.word	0x2000ce4c

080088c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ca:	e048      	b.n	800895e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088cc:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d6:	4b2b      	ldr	r3, [pc, #172]	; (8008984 <prvSwitchTimerLists+0xc0>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe f821 	bl	800692c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a1b      	ldr	r3, [r3, #32]
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088f8:	f003 0304 	and.w	r3, r3, #4
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d02e      	beq.n	800895e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	693a      	ldr	r2, [r7, #16]
 8008906:	4413      	add	r3, r2
 8008908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	429a      	cmp	r2, r3
 8008910:	d90e      	bls.n	8008930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	68ba      	ldr	r2, [r7, #8]
 8008916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800891e:	4b19      	ldr	r3, [pc, #100]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	4610      	mov	r0, r2
 800892a:	f7fd ffc6 	bl	80068ba <vListInsert>
 800892e:	e016      	b.n	800895e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	2300      	movs	r3, #0
 8008936:	693a      	ldr	r2, [r7, #16]
 8008938:	2100      	movs	r1, #0
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fd60 	bl	8008400 <xTimerGenericCommand>
 8008940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	603b      	str	r3, [r7, #0]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800895e:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1b1      	bne.n	80088cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008968:	4b06      	ldr	r3, [pc, #24]	; (8008984 <prvSwitchTimerLists+0xc0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a04      	ldr	r2, [pc, #16]	; (8008984 <prvSwitchTimerLists+0xc0>)
 8008974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008976:	4a04      	ldr	r2, [pc, #16]	; (8008988 <prvSwitchTimerLists+0xc4>)
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	2000ce44 	.word	0x2000ce44
 8008988:	2000ce48 	.word	0x2000ce48

0800898c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008992:	f000 f967 	bl	8008c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008996:	4b15      	ldr	r3, [pc, #84]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d120      	bne.n	80089e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800899e:	4814      	ldr	r0, [pc, #80]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089a0:	f7fd ff3a 	bl	8006818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089a4:	4813      	ldr	r0, [pc, #76]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089a6:	f7fd ff37 	bl	8006818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089aa:	4b13      	ldr	r3, [pc, #76]	; (80089f8 <prvCheckForValidListAndQueue+0x6c>)
 80089ac:	4a10      	ldr	r2, [pc, #64]	; (80089f0 <prvCheckForValidListAndQueue+0x64>)
 80089ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089b0:	4b12      	ldr	r3, [pc, #72]	; (80089fc <prvCheckForValidListAndQueue+0x70>)
 80089b2:	4a10      	ldr	r2, [pc, #64]	; (80089f4 <prvCheckForValidListAndQueue+0x68>)
 80089b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089b6:	2300      	movs	r3, #0
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4b11      	ldr	r3, [pc, #68]	; (8008a00 <prvCheckForValidListAndQueue+0x74>)
 80089bc:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <prvCheckForValidListAndQueue+0x78>)
 80089be:	2110      	movs	r1, #16
 80089c0:	2008      	movs	r0, #8
 80089c2:	f7fe f845 	bl	8006a50 <xQueueGenericCreateStatic>
 80089c6:	4603      	mov	r3, r0
 80089c8:	4a08      	ldr	r2, [pc, #32]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089cc:	4b07      	ldr	r3, [pc, #28]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d005      	beq.n	80089e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <prvCheckForValidListAndQueue+0x60>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	490b      	ldr	r1, [pc, #44]	; (8008a08 <prvCheckForValidListAndQueue+0x7c>)
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd26 	bl	800742c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089e0:	f000 f970 	bl	8008cc4 <vPortExitCritical>
}
 80089e4:	bf00      	nop
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	2000ce4c 	.word	0x2000ce4c
 80089f0:	2000ce1c 	.word	0x2000ce1c
 80089f4:	2000ce30 	.word	0x2000ce30
 80089f8:	2000ce44 	.word	0x2000ce44
 80089fc:	2000ce48 	.word	0x2000ce48
 8008a00:	2000ced8 	.word	0x2000ced8
 8008a04:	2000ce58 	.word	0x2000ce58
 8008a08:	080093a8 	.word	0x080093a8

08008a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	3b04      	subs	r3, #4
 8008a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b04      	subs	r3, #4
 8008a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f023 0201 	bic.w	r2, r3, #1
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b04      	subs	r3, #4
 8008a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a3c:	4a0c      	ldr	r2, [pc, #48]	; (8008a70 <pxPortInitialiseStack+0x64>)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3b14      	subs	r3, #20
 8008a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a48:	687a      	ldr	r2, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3b04      	subs	r3, #4
 8008a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f06f 0202 	mvn.w	r2, #2
 8008a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3b20      	subs	r3, #32
 8008a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	08008a75 	.word	0x08008a75

08008a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a7e:	4b12      	ldr	r3, [pc, #72]	; (8008ac8 <prvTaskExitError+0x54>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a86:	d00a      	beq.n	8008a9e <prvTaskExitError+0x2a>
	__asm volatile
 8008a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a8c:	f383 8811 	msr	BASEPRI, r3
 8008a90:	f3bf 8f6f 	isb	sy
 8008a94:	f3bf 8f4f 	dsb	sy
 8008a98:	60fb      	str	r3, [r7, #12]
}
 8008a9a:	bf00      	nop
 8008a9c:	e7fe      	b.n	8008a9c <prvTaskExitError+0x28>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	60bb      	str	r3, [r7, #8]
}
 8008ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ab2:	bf00      	nop
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0fc      	beq.n	8008ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008aba:	bf00      	nop
 8008abc:	bf00      	nop
 8008abe:	3714      	adds	r7, #20
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	20000030 	.word	0x20000030
 8008acc:	00000000 	.word	0x00000000

08008ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <pxCurrentTCBConst2>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f380 8809 	msr	PSP, r0
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8811 	msr	BASEPRI, r0
 8008aea:	4770      	bx	lr
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst2>:
 8008af0:	2000c91c 	.word	0x2000c91c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008af8:	4808      	ldr	r0, [pc, #32]	; (8008b1c <prvPortStartFirstTask+0x24>)
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f380 8808 	msr	MSP, r0
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8814 	msr	CONTROL, r0
 8008b0a:	b662      	cpsie	i
 8008b0c:	b661      	cpsie	f
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	df00      	svc	0
 8008b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed08 	.word	0xe000ed08

08008b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b26:	4b46      	ldr	r3, [pc, #280]	; (8008c40 <xPortStartScheduler+0x120>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a46      	ldr	r2, [pc, #280]	; (8008c44 <xPortStartScheduler+0x124>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10a      	bne.n	8008b46 <xPortStartScheduler+0x26>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	e7fe      	b.n	8008b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b46:	4b3e      	ldr	r3, [pc, #248]	; (8008c40 <xPortStartScheduler+0x120>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a3f      	ldr	r2, [pc, #252]	; (8008c48 <xPortStartScheduler+0x128>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d10a      	bne.n	8008b66 <xPortStartScheduler+0x46>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b66:	4b39      	ldr	r3, [pc, #228]	; (8008c4c <xPortStartScheduler+0x12c>)
 8008b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	22ff      	movs	r2, #255	; 0xff
 8008b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b80:	78fb      	ldrb	r3, [r7, #3]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008b88:	b2da      	uxtb	r2, r3
 8008b8a:	4b31      	ldr	r3, [pc, #196]	; (8008c50 <xPortStartScheduler+0x130>)
 8008b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b8e:	4b31      	ldr	r3, [pc, #196]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b94:	e009      	b.n	8008baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008b96:	4b2f      	ldr	r3, [pc, #188]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	4a2d      	ldr	r2, [pc, #180]	; (8008c54 <xPortStartScheduler+0x134>)
 8008b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ba0:	78fb      	ldrb	r3, [r7, #3]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008baa:	78fb      	ldrb	r3, [r7, #3]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb2:	2b80      	cmp	r3, #128	; 0x80
 8008bb4:	d0ef      	beq.n	8008b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bb6:	4b27      	ldr	r3, [pc, #156]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f1c3 0307 	rsb	r3, r3, #7
 8008bbe:	2b04      	cmp	r3, #4
 8008bc0:	d00a      	beq.n	8008bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	60bb      	str	r3, [r7, #8]
}
 8008bd4:	bf00      	nop
 8008bd6:	e7fe      	b.n	8008bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bd8:	4b1e      	ldr	r3, [pc, #120]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	021b      	lsls	r3, r3, #8
 8008bde:	4a1d      	ldr	r2, [pc, #116]	; (8008c54 <xPortStartScheduler+0x134>)
 8008be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008be2:	4b1c      	ldr	r3, [pc, #112]	; (8008c54 <xPortStartScheduler+0x134>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008bea:	4a1a      	ldr	r2, [pc, #104]	; (8008c54 <xPortStartScheduler+0x134>)
 8008bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bf6:	4b18      	ldr	r3, [pc, #96]	; (8008c58 <xPortStartScheduler+0x138>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	4a17      	ldr	r2, [pc, #92]	; (8008c58 <xPortStartScheduler+0x138>)
 8008bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a14      	ldr	r2, [pc, #80]	; (8008c58 <xPortStartScheduler+0x138>)
 8008c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c0e:	f000 f8dd 	bl	8008dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c12:	4b12      	ldr	r3, [pc, #72]	; (8008c5c <xPortStartScheduler+0x13c>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c18:	f000 f8fc 	bl	8008e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c1c:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <xPortStartScheduler+0x140>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a0f      	ldr	r2, [pc, #60]	; (8008c60 <xPortStartScheduler+0x140>)
 8008c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c28:	f7ff ff66 	bl	8008af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c2c:	f7ff f83c 	bl	8007ca8 <vTaskSwitchContext>
	prvTaskExitError();
 8008c30:	f7ff ff20 	bl	8008a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	e000ed00 	.word	0xe000ed00
 8008c44:	410fc271 	.word	0x410fc271
 8008c48:	410fc270 	.word	0x410fc270
 8008c4c:	e000e400 	.word	0xe000e400
 8008c50:	2000cf28 	.word	0x2000cf28
 8008c54:	2000cf2c 	.word	0x2000cf2c
 8008c58:	e000ed20 	.word	0xe000ed20
 8008c5c:	20000030 	.word	0x20000030
 8008c60:	e000ef34 	.word	0xe000ef34

08008c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6e:	f383 8811 	msr	BASEPRI, r3
 8008c72:	f3bf 8f6f 	isb	sy
 8008c76:	f3bf 8f4f 	dsb	sy
 8008c7a:	607b      	str	r3, [r7, #4]
}
 8008c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c7e:	4b0f      	ldr	r3, [pc, #60]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	3301      	adds	r3, #1
 8008c84:	4a0d      	ldr	r2, [pc, #52]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <vPortEnterCritical+0x58>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d10f      	bne.n	8008cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c90:	4b0b      	ldr	r3, [pc, #44]	; (8008cc0 <vPortEnterCritical+0x5c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	603b      	str	r3, [r7, #0]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <vPortEnterCritical+0x4a>
	}
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	20000030 	.word	0x20000030
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <vPortExitCritical+0x50>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <vPortExitCritical+0x24>
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	607b      	str	r3, [r7, #4]
}
 8008ce4:	bf00      	nop
 8008ce6:	e7fe      	b.n	8008ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <vPortExitCritical+0x50>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	3b01      	subs	r3, #1
 8008cee:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <vPortExitCritical+0x50>)
 8008cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cf2:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <vPortExitCritical+0x50>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d105      	bne.n	8008d06 <vPortExitCritical+0x42>
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	f383 8811 	msr	BASEPRI, r3
}
 8008d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	20000030 	.word	0x20000030
	...

08008d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d20:	f3ef 8009 	mrs	r0, PSP
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <pxCurrentTCBConst>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f01e 0f10 	tst.w	lr, #16
 8008d30:	bf08      	it	eq
 8008d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	6010      	str	r0, [r2, #0]
 8008d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d44:	f380 8811 	msr	BASEPRI, r0
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f7fe ffaa 	bl	8007ca8 <vTaskSwitchContext>
 8008d54:	f04f 0000 	mov.w	r0, #0
 8008d58:	f380 8811 	msr	BASEPRI, r0
 8008d5c:	bc09      	pop	{r0, r3}
 8008d5e:	6819      	ldr	r1, [r3, #0]
 8008d60:	6808      	ldr	r0, [r1, #0]
 8008d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d66:	f01e 0f10 	tst.w	lr, #16
 8008d6a:	bf08      	it	eq
 8008d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d70:	f380 8809 	msr	PSP, r0
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst>:
 8008d80:	2000c91c 	.word	0x2000c91c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008da2:	f7fe fec7 	bl	8007b34 <xTaskIncrementTick>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dac:	4b06      	ldr	r3, [pc, #24]	; (8008dc8 <xPortSysTickHandler+0x40>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	2300      	movs	r3, #0
 8008db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f383 8811 	msr	BASEPRI, r3
}
 8008dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <vPortSetupTimerInterrupt+0x38>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	; (8008e08 <vPortSetupTimerInterrupt+0x3c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	; (8008e0c <vPortSetupTimerInterrupt+0x40>)
 8008de2:	fba2 2303 	umull	r2, r3, r2, r3
 8008de6:	099b      	lsrs	r3, r3, #6
 8008de8:	4a09      	ldr	r2, [pc, #36]	; (8008e10 <vPortSetupTimerInterrupt+0x44>)
 8008dea:	3b01      	subs	r3, #1
 8008dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008df0:	2207      	movs	r2, #7
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	e000e010 	.word	0xe000e010
 8008e04:	e000e018 	.word	0xe000e018
 8008e08:	20000000 	.word	0x20000000
 8008e0c:	10624dd3 	.word	0x10624dd3
 8008e10:	e000e014 	.word	0xe000e014

08008e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e24 <vPortEnableVFP+0x10>
 8008e18:	6801      	ldr	r1, [r0, #0]
 8008e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e1e:	6001      	str	r1, [r0, #0]
 8008e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e22:	bf00      	nop
 8008e24:	e000ed88 	.word	0xe000ed88

08008e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e2e:	f3ef 8305 	mrs	r3, IPSR
 8008e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d914      	bls.n	8008e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e3a:	4a17      	ldr	r2, [pc, #92]	; (8008e98 <vPortValidateInterruptPriority+0x70>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e44:	4b15      	ldr	r3, [pc, #84]	; (8008e9c <vPortValidateInterruptPriority+0x74>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	7afa      	ldrb	r2, [r7, #11]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d20a      	bcs.n	8008e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
 8008e62:	e7fe      	b.n	8008e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <vPortValidateInterruptPriority+0x78>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ea4 <vPortValidateInterruptPriority+0x7c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d90a      	bls.n	8008e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e78:	f383 8811 	msr	BASEPRI, r3
 8008e7c:	f3bf 8f6f 	isb	sy
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	603b      	str	r3, [r7, #0]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <vPortValidateInterruptPriority+0x60>
	}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	e000e3f0 	.word	0xe000e3f0
 8008e9c:	2000cf28 	.word	0x2000cf28
 8008ea0:	e000ed0c 	.word	0xe000ed0c
 8008ea4:	2000cf2c 	.word	0x2000cf2c

08008ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b088      	sub	sp, #32
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8008eb4:	4b48      	ldr	r3, [pc, #288]	; (8008fd8 <pvPortMalloc+0x130>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <pvPortMalloc+0x2a>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60fb      	str	r3, [r7, #12]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8008ed2:	f7fe fd73 	bl	80079bc <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ed6:	4b41      	ldr	r3, [pc, #260]	; (8008fdc <pvPortMalloc+0x134>)
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d172      	bne.n	8008fc8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00d      	beq.n	8008f04 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8008ee8:	2208      	movs	r2, #8
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d05e      	beq.n	8008fc8 <pvPortMalloc+0x120>
 8008f0a:	4b35      	ldr	r3, [pc, #212]	; (8008fe0 <pvPortMalloc+0x138>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d859      	bhi.n	8008fc8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f14:	4b33      	ldr	r3, [pc, #204]	; (8008fe4 <pvPortMalloc+0x13c>)
 8008f16:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 8008f18:	4b32      	ldr	r3, [pc, #200]	; (8008fe4 <pvPortMalloc+0x13c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f1e:	e004      	b.n	8008f2a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d903      	bls.n	8008f3c <pvPortMalloc+0x94>
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1f1      	bne.n	8008f20 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f3c:	4b26      	ldr	r3, [pc, #152]	; (8008fd8 <pvPortMalloc+0x130>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d040      	beq.n	8008fc8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2208      	movs	r2, #8
 8008f4c:	4413      	add	r3, r2
 8008f4e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	1ad2      	subs	r2, r2, r3
 8008f60:	2308      	movs	r3, #8
 8008f62:	005b      	lsls	r3, r3, #1
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d90f      	bls.n	8008f88 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f68:	69fa      	ldr	r2, [r7, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4413      	add	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	1ad2      	subs	r2, r2, r3
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008f82:	6938      	ldr	r0, [r7, #16]
 8008f84:	f000 f896 	bl	80090b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f88:	4b15      	ldr	r3, [pc, #84]	; (8008fe0 <pvPortMalloc+0x138>)
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	69fb      	ldr	r3, [r7, #28]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	4a13      	ldr	r2, [pc, #76]	; (8008fe0 <pvPortMalloc+0x138>)
 8008f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f96:	4b12      	ldr	r3, [pc, #72]	; (8008fe0 <pvPortMalloc+0x138>)
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	4b13      	ldr	r3, [pc, #76]	; (8008fe8 <pvPortMalloc+0x140>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d203      	bcs.n	8008faa <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fa2:	4b0f      	ldr	r3, [pc, #60]	; (8008fe0 <pvPortMalloc+0x138>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a10      	ldr	r2, [pc, #64]	; (8008fe8 <pvPortMalloc+0x140>)
 8008fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	4b0b      	ldr	r3, [pc, #44]	; (8008fdc <pvPortMalloc+0x134>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <pvPortMalloc+0x144>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	4a09      	ldr	r2, [pc, #36]	; (8008fec <pvPortMalloc+0x144>)
 8008fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008fc8:	f7fe fd06 	bl	80079d8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 8008fcc:	697b      	ldr	r3, [r7, #20]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	2000cf38 	.word	0x2000cf38
 8008fdc:	2000cf4c 	.word	0x2000cf4c
 8008fe0:	2000cf3c 	.word	0x2000cf3c
 8008fe4:	2000cf30 	.word	0x2000cf30
 8008fe8:	2000cf40 	.word	0x2000cf40
 8008fec:	2000cf44 	.word	0x2000cf44

08008ff0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b086      	sub	sp, #24
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d04d      	beq.n	800909e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009002:	2308      	movs	r3, #8
 8009004:	425b      	negs	r3, r3
 8009006:	697a      	ldr	r2, [r7, #20]
 8009008:	4413      	add	r3, r2
 800900a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	685a      	ldr	r2, [r3, #4]
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <vPortFree+0xb8>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4013      	ands	r3, r2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10a      	bne.n	8009034 <vPortFree+0x44>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	60fb      	str	r3, [r7, #12]
}
 8009030:	bf00      	nop
 8009032:	e7fe      	b.n	8009032 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00a      	beq.n	8009052 <vPortFree+0x62>
	__asm volatile
 800903c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009040:	f383 8811 	msr	BASEPRI, r3
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	f3bf 8f4f 	dsb	sy
 800904c:	60bb      	str	r3, [r7, #8]
}
 800904e:	bf00      	nop
 8009050:	e7fe      	b.n	8009050 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4b14      	ldr	r3, [pc, #80]	; (80090a8 <vPortFree+0xb8>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4013      	ands	r3, r2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01e      	beq.n	800909e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d11a      	bne.n	800909e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b0e      	ldr	r3, [pc, #56]	; (80090a8 <vPortFree+0xb8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	43db      	mvns	r3, r3
 8009072:	401a      	ands	r2, r3
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009078:	f7fe fca0 	bl	80079bc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	685a      	ldr	r2, [r3, #4]
 8009080:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <vPortFree+0xbc>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4413      	add	r3, r2
 8009086:	4a09      	ldr	r2, [pc, #36]	; (80090ac <vPortFree+0xbc>)
 8009088:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800908a:	6938      	ldr	r0, [r7, #16]
 800908c:	f000 f812 	bl	80090b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009090:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <vPortFree+0xc0>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	3301      	adds	r3, #1
 8009096:	4a06      	ldr	r2, [pc, #24]	; (80090b0 <vPortFree+0xc0>)
 8009098:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800909a:	f7fe fc9d 	bl	80079d8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800909e:	bf00      	nop
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	2000cf4c 	.word	0x2000cf4c
 80090ac:	2000cf3c 	.word	0x2000cf3c
 80090b0:	2000cf48 	.word	0x2000cf48

080090b4 <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090bc:	4b28      	ldr	r3, [pc, #160]	; (8009160 <prvInsertBlockIntoFreeList+0xac>)
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e002      	b.n	80090c8 <prvInsertBlockIntoFreeList+0x14>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d8f7      	bhi.n	80090c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	68ba      	ldr	r2, [r7, #8]
 80090dc:	4413      	add	r3, r2
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d108      	bne.n	80090f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	685a      	ldr	r2, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	441a      	add	r2, r3
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d118      	bne.n	800913c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b15      	ldr	r3, [pc, #84]	; (8009164 <prvInsertBlockIntoFreeList+0xb0>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d00d      	beq.n	8009132 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	685a      	ldr	r2, [r3, #4]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	441a      	add	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	e008      	b.n	8009144 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009132:	4b0c      	ldr	r3, [pc, #48]	; (8009164 <prvInsertBlockIntoFreeList+0xb0>)
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	e003      	b.n	8009144 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d002      	beq.n	8009152 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009152:	bf00      	nop
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	2000cf30 	.word	0x2000cf30
 8009164:	2000cf38 	.word	0x2000cf38

08009168 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8009168:	b480      	push	{r7}
 800916a:	b08f      	sub	sp, #60	; 0x3c
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8009170:	2300      	movs	r3, #0
 8009172:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 8009174:	2300      	movs	r3, #0
 8009176:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800917c:	4b5a      	ldr	r3, [pc, #360]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00a      	beq.n	800919a <vPortDefineHeapRegions+0x32>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	617b      	str	r3, [r7, #20]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800919a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	4413      	add	r3, r2
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 80091a4:	e07d      	b.n	80092a2 <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	f003 0307 	and.w	r3, r3, #7
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00e      	beq.n	80091da <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	3307      	adds	r3, #7
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	f023 0307 	bic.w	r3, r3, #7
 80091c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 80091ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80091d6:	4413      	add	r3, r2
 80091d8:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 80091da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091dc:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d106      	bne.n	80091f2 <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	4a41      	ldr	r2, [pc, #260]	; (80092ec <vPortDefineHeapRegions+0x184>)
 80091e8:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 80091ea:	4b40      	ldr	r3, [pc, #256]	; (80092ec <vPortDefineHeapRegions+0x184>)
 80091ec:	2200      	movs	r2, #0
 80091ee:	605a      	str	r2, [r3, #4]
 80091f0:	e01f      	b.n	8009232 <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 80091f2:	4b3d      	ldr	r3, [pc, #244]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10a      	bne.n	8009210 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	613b      	str	r3, [r7, #16]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 8009210:	4b35      	ldr	r3, [pc, #212]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	461a      	mov	r2, r3
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	4293      	cmp	r3, r2
 800921a:	d80a      	bhi.n	8009232 <vPortDefineHeapRegions+0xca>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	60fb      	str	r3, [r7, #12]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 8009232:	4b2d      	ldr	r3, [pc, #180]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 8009238:	69fa      	ldr	r2, [r7, #28]
 800923a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800923c:	4413      	add	r3, r2
 800923e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 8009240:	2208      	movs	r2, #8
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	1a9b      	subs	r3, r3, r2
 8009246:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8009248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8009250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009252:	4a25      	ldr	r2, [pc, #148]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009254:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 8009256:	4b24      	ldr	r3, [pc, #144]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	2200      	movs	r2, #0
 800925c:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800925e:	4b22      	ldr	r3, [pc, #136]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8009266:	69fb      	ldr	r3, [r7, #28]
 8009268:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800926e:	1ad2      	subs	r2, r2, r3
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 8009274:	4b1c      	ldr	r3, [pc, #112]	; (80092e8 <vPortDefineHeapRegions+0x180>)
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d002      	beq.n	8009288 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6a3a      	ldr	r2, [r7, #32]
 8009286:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8009288:	6a3b      	ldr	r3, [r7, #32]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800928e:	4413      	add	r3, r2
 8009290:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 8009292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009294:	3301      	adds	r3, #1
 8009296:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8009298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929a:	00db      	lsls	r3, r3, #3
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	4413      	add	r3, r2
 80092a0:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f47f af7d 	bne.w	80091a6 <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 80092ac:	4a10      	ldr	r2, [pc, #64]	; (80092f0 <vPortDefineHeapRegions+0x188>)
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 80092b2:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <vPortDefineHeapRegions+0x18c>)
 80092b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b6:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 80092b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d10a      	bne.n	80092d4 <vPortDefineHeapRegions+0x16c>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	60bb      	str	r3, [r7, #8]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80092d4:	4b08      	ldr	r3, [pc, #32]	; (80092f8 <vPortDefineHeapRegions+0x190>)
 80092d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80092da:	601a      	str	r2, [r3, #0]
}
 80092dc:	bf00      	nop
 80092de:	373c      	adds	r7, #60	; 0x3c
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	2000cf38 	.word	0x2000cf38
 80092ec:	2000cf30 	.word	0x2000cf30
 80092f0:	2000cf40 	.word	0x2000cf40
 80092f4:	2000cf3c 	.word	0x2000cf3c
 80092f8:	2000cf4c 	.word	0x2000cf4c

080092fc <__libc_init_array>:
 80092fc:	b570      	push	{r4, r5, r6, lr}
 80092fe:	4d0d      	ldr	r5, [pc, #52]	; (8009334 <__libc_init_array+0x38>)
 8009300:	4c0d      	ldr	r4, [pc, #52]	; (8009338 <__libc_init_array+0x3c>)
 8009302:	1b64      	subs	r4, r4, r5
 8009304:	10a4      	asrs	r4, r4, #2
 8009306:	2600      	movs	r6, #0
 8009308:	42a6      	cmp	r6, r4
 800930a:	d109      	bne.n	8009320 <__libc_init_array+0x24>
 800930c:	4d0b      	ldr	r5, [pc, #44]	; (800933c <__libc_init_array+0x40>)
 800930e:	4c0c      	ldr	r4, [pc, #48]	; (8009340 <__libc_init_array+0x44>)
 8009310:	f000 f82e 	bl	8009370 <_init>
 8009314:	1b64      	subs	r4, r4, r5
 8009316:	10a4      	asrs	r4, r4, #2
 8009318:	2600      	movs	r6, #0
 800931a:	42a6      	cmp	r6, r4
 800931c:	d105      	bne.n	800932a <__libc_init_array+0x2e>
 800931e:	bd70      	pop	{r4, r5, r6, pc}
 8009320:	f855 3b04 	ldr.w	r3, [r5], #4
 8009324:	4798      	blx	r3
 8009326:	3601      	adds	r6, #1
 8009328:	e7ee      	b.n	8009308 <__libc_init_array+0xc>
 800932a:	f855 3b04 	ldr.w	r3, [r5], #4
 800932e:	4798      	blx	r3
 8009330:	3601      	adds	r6, #1
 8009332:	e7f2      	b.n	800931a <__libc_init_array+0x1e>
 8009334:	0800940c 	.word	0x0800940c
 8009338:	0800940c 	.word	0x0800940c
 800933c:	0800940c 	.word	0x0800940c
 8009340:	08009410 	.word	0x08009410

08009344 <memcpy>:
 8009344:	440a      	add	r2, r1
 8009346:	4291      	cmp	r1, r2
 8009348:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800934c:	d100      	bne.n	8009350 <memcpy+0xc>
 800934e:	4770      	bx	lr
 8009350:	b510      	push	{r4, lr}
 8009352:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009356:	f803 4f01 	strb.w	r4, [r3, #1]!
 800935a:	4291      	cmp	r1, r2
 800935c:	d1f9      	bne.n	8009352 <memcpy+0xe>
 800935e:	bd10      	pop	{r4, pc}

08009360 <memset>:
 8009360:	4402      	add	r2, r0
 8009362:	4603      	mov	r3, r0
 8009364:	4293      	cmp	r3, r2
 8009366:	d100      	bne.n	800936a <memset+0xa>
 8009368:	4770      	bx	lr
 800936a:	f803 1b01 	strb.w	r1, [r3], #1
 800936e:	e7f9      	b.n	8009364 <memset+0x4>

08009370 <_init>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	bf00      	nop
 8009374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009376:	bc08      	pop	{r3}
 8009378:	469e      	mov	lr, r3
 800937a:	4770      	bx	lr

0800937c <_fini>:
 800937c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937e:	bf00      	nop
 8009380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009382:	bc08      	pop	{r3}
 8009384:	469e      	mov	lr, r3
 8009386:	4770      	bx	lr
