
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002624  0800bc94  0800bc94  0001bc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2b8  0800e2b8  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2b8  0800e2b8  0001e2b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2c0  0800e2c0  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2c0  0800e2c0  0001e2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2c4  0800e2c4  0001e2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800e2c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          000058f4  200000e0  200000e0  000200e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  200059d4  200059d4  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022809  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004249  00000000  00000000  00042915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  00046b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d7c  00000000  00000000  00048668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ef60  00000000  00000000  0004e3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2ecd  00000000  00000000  0006d344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150211  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00001980  00000000  00000000  00150268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007b84  00000000  00000000  00151be8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bc7c 	.word	0x0800bc7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	0800bc7c 	.word	0x0800bc7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f002 fb8b 	bl	800337c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f87b 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa1f 	bl	80010ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9e7 	bl	8001040 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f96f 	bl	8000f54 <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8dd 	bl	8000e34 <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fabd 	bl	80011f8 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9b5 	bl	8000fec <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f931 	bl	8000ee8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(200);
 8000c8c:	20c8      	movs	r0, #200	; 0xc8
 8000c8e:	f002 fbb7 	bl	8003400 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <main+0xd4>)
 8000c98:	f003 fa56 	bl	8004148 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4824      	ldr	r0, [pc, #144]	; (8000d34 <main+0xd8>)
 8000ca4:	f003 fa50 	bl	8004148 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000ca8:	20c8      	movs	r0, #200	; 0xc8
 8000caa:	f002 fba9 	bl	8003400 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	481f      	ldr	r0, [pc, #124]	; (8000d30 <main+0xd4>)
 8000cb4:	f003 fa48 	bl	8004148 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	481d      	ldr	r0, [pc, #116]	; (8000d34 <main+0xd8>)
 8000cc0:	f003 fa42 	bl	8004148 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <main+0xdc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f005 fbb7 	bl	8006448 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <main+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	4917      	ldr	r1, [pc, #92]	; (8000d40 <main+0xe4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 f82f 	bl	8006d46 <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <main+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fce7 	bl	80016c0 <set_Date>

  ST7789_Reset();
 8000cf2:	f001 fdcf 	bl	8002894 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <main+0xec>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f001 fde4 	bl	80028c8 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f007 f986 	bl	8008010 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a11      	ldr	r2, [pc, #68]	; (8000d4c <main+0xf0>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f007 fa7a 	bl	8008202 <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <main+0xf4>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d14:	4a0f      	ldr	r2, [pc, #60]	; (8000d54 <main+0xf8>)
 8000d16:	2100      	movs	r1, #0
 8000d18:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0xfc>)
 8000d1a:	f007 f9c5 	bl	80080a8 <osThreadNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <main+0x100>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d24:	f007 f99a 	bl	800805c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f002 fb69 	bl	8003400 <HAL_Delay>
 8000d2e:	e7fb      	b.n	8000d28 <main+0xcc>
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020c00 	.word	0x40020c00
 8000d38:	2000002c 	.word	0x2000002c
 8000d3c:	20000030 	.word	0x20000030
 8000d40:	20000b20 	.word	0x20000b20
 8000d44:	20000024 	.word	0x20000024
 8000d48:	20000b26 	.word	0x20000b26
 8000d4c:	0800e0e8 	.word	0x0800e0e8
 8000d50:	20000304 	.word	0x20000304
 8000d54:	0800e0c4 	.word	0x0800e0c4
 8000d58:	08001d99 	.word	0x08001d99
 8000d5c:	20000300 	.word	0x20000300

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00a f98a 	bl	800b088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a27      	ldr	r2, [pc, #156]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SystemClock_Config+0xcc>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd0>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a21      	ldr	r2, [pc, #132]	; (8000e30 <SystemClock_Config+0xd0>)
 8000daa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1f      	ldr	r3, [pc, #124]	; (8000e30 <SystemClock_Config+0xd0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dde:	2307      	movs	r3, #7
 8000de0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f003 fd10 	bl	800480c <HAL_RCC_OscConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000df2:	f001 fbbd 	bl	8002570 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2105      	movs	r1, #5
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 ff71 	bl	8004cfc <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e20:	f001 fba6 	bl	8002570 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e4c:	4b24      	ldr	r3, [pc, #144]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e4e:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <MX_RTC_Init+0xb0>)
 8000e50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e58:	4b21      	ldr	r3, [pc, #132]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e5a:	227f      	movs	r2, #127	; 0x7f
 8000e5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e60:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e64:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e66:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000e7a:	f004 fa73 	bl	8005364 <HAL_RTC_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e84:	f001 fb74 	bl	8002570 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480f      	ldr	r0, [pc, #60]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000ea4:	f004 faef 	bl	8005486 <HAL_RTC_SetTime>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000eae:	f001 fb5f 	bl	8002570 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000ec2:	463b      	mov	r3, r7
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_RTC_Init+0xac>)
 8000eca:	f004 fbf7 	bl	80056bc <HAL_RTC_SetDate>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000ed4:	f001 fb4c 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200000fc 	.word	0x200000fc
 8000ee4:	40002800 	.word	0x40002800

08000ee8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000eec:	4b17      	ldr	r3, [pc, #92]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <MX_SPI1_Init+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f18:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f34:	220a      	movs	r2, #10
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_SPI1_Init+0x64>)
 8000f3a:	f004 fd45 	bl	80059c8 <HAL_SPI_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f44:	f001 fb14 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	2000011c 	.word	0x2000011c
 8000f50:	40013000 	.word	0x40013000

08000f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5a:	f107 0308 	add.w	r3, r7, #8
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f70:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f7a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f88:	22f9      	movs	r2, #249	; 0xf9
 8000f8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f98:	4813      	ldr	r0, [pc, #76]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000f9a:	f005 fa05 	bl	80063a8 <HAL_TIM_Base_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fa4:	f001 fae4 	bl	8002570 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fb6:	f005 fbbf 	bl	8006738 <HAL_TIM_ConfigClockSource>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f001 fad6 	bl	8002570 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fcc:	463b      	mov	r3, r7
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM2_Init+0x94>)
 8000fd2:	f005 fddb 	bl	8006b8c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000fdc:	f001 fac8 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	200001d4 	.word	0x200001d4

08000fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	; (800103c <MX_USART3_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_USART3_UART_Init+0x4c>)
 8001024:	f005 fe42 	bl	8006cac <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f001 fa9f 	bl	8002570 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000021c 	.word	0x2000021c
 800103c:	40004800 	.word	0x40004800

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_DMA_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	; (80010a8 <MX_DMA_Init+0x68>)
 8001050:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_DMA_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_DMA_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	; (80010a8 <MX_DMA_Init+0x68>)
 800106c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_DMA_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 2, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2102      	movs	r1, #2
 8001082:	200e      	movs	r0, #14
 8001084:	f002 fa98 	bl	80035b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001088:	200e      	movs	r0, #14
 800108a:	f002 fab1 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 2, 0);
 800108e:	2200      	movs	r2, #0
 8001090:	2102      	movs	r1, #2
 8001092:	203b      	movs	r0, #59	; 0x3b
 8001094:	f002 fa90 	bl	80035b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001098:	203b      	movs	r0, #59	; 0x3b
 800109a:	f002 faa9 	bl	80035f0 <HAL_NVIC_EnableIRQ>

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x13c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001104:	f043 0310 	orr.w	r3, r3, #16
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0310 	and.w	r3, r3, #16
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b33      	ldr	r3, [pc, #204]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a32      	ldr	r2, [pc, #200]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b30      	ldr	r3, [pc, #192]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b2c      	ldr	r3, [pc, #176]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2b      	ldr	r2, [pc, #172]	; (80011e8 <MX_GPIO_Init+0x13c>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b29      	ldr	r3, [pc, #164]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001158:	f043 0304 	orr.w	r3, r3, #4
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_GPIO_Init+0x13c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0304 	and.w	r3, r3, #4
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 800116a:	2201      	movs	r2, #1
 800116c:	210e      	movs	r1, #14
 800116e:	481f      	ldr	r0, [pc, #124]	; (80011ec <MX_GPIO_Init+0x140>)
 8001170:	f002 ffea 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001174:	2201      	movs	r2, #1
 8001176:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800117a:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_GPIO_Init+0x144>)
 800117c:	f002 ffe4 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	481b      	ldr	r0, [pc, #108]	; (80011f4 <MX_GPIO_Init+0x148>)
 8001186:	f002 ffdf 	bl	8004148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 800118a:	230e      	movs	r3, #14
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118e:	2301      	movs	r3, #1
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001192:	2301      	movs	r3, #1
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001196:	2301      	movs	r3, #1
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	4619      	mov	r1, r3
 80011a0:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_GPIO_Init+0x140>)
 80011a2:	f002 fe35 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_GPIO_Init+0x144>)
 80011c0:	f002 fe26 	bl	8003e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011cc:	2302      	movs	r3, #2
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011d0:	2301      	movs	r3, #1
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 031c 	add.w	r3, r7, #28
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_GPIO_Init+0x148>)
 80011dc:	f002 fe18 	bl	8003e10 <HAL_GPIO_Init>

}
 80011e0:	bf00      	nop
 80011e2:	3730      	adds	r7, #48	; 0x30
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	40020800 	.word	0x40020800

080011f8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 80011fe:	4b50      	ldr	r3, [pc, #320]	; (8001340 <MX_FSMC_Init+0x148>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 800121e:	4b49      	ldr	r3, [pc, #292]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001220:	4a49      	ldr	r2, [pc, #292]	; (8001348 <MX_FSMC_Init+0x150>)
 8001222:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001224:	4b47      	ldr	r3, [pc, #284]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001226:	2210      	movs	r2, #16
 8001228:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 800122a:	4b46      	ldr	r3, [pc, #280]	; (8001344 <MX_FSMC_Init+0x14c>)
 800122c:	2202      	movs	r2, #2
 800122e:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001230:	4b44      	ldr	r3, [pc, #272]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001238:	2200      	movs	r2, #0
 800123a:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 800123c:	4b41      	ldr	r3, [pc, #260]	; (8001344 <MX_FSMC_Init+0x14c>)
 800123e:	2200      	movs	r2, #0
 8001240:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001244:	2200      	movs	r2, #0
 8001246:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001248:	4b3e      	ldr	r3, [pc, #248]	; (8001344 <MX_FSMC_Init+0x14c>)
 800124a:	2200      	movs	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 800124e:	4b3d      	ldr	r3, [pc, #244]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001258:	2210      	movs	r2, #16
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 800125c:	4b39      	ldr	r3, [pc, #228]	; (8001344 <MX_FSMC_Init+0x14c>)
 800125e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001262:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001264:	4b37      	ldr	r3, [pc, #220]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001266:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126a:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 800126c:	4b35      	ldr	r3, [pc, #212]	; (8001344 <MX_FSMC_Init+0x14c>)
 800126e:	2201      	movs	r2, #1
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <MX_FSMC_Init+0x14c>)
 8001274:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = ENABLE;
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <MX_FSMC_Init+0x14c>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8001282:	23fc      	movs	r3, #252	; 0xfc
 8001284:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8001286:	23fc      	movs	r3, #252	; 0xfc
 8001288:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 800128a:	23fc      	movs	r3, #252	; 0xfc
 800128c:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 800128e:	23fc      	movs	r3, #252	; 0xfc
 8001290:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 8001292:	23fc      	movs	r3, #252	; 0xfc
 8001294:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 8001296:	23fc      	movs	r3, #252	; 0xfc
 8001298:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012a2:	463a      	mov	r2, r7
 80012a4:	f107 0310 	add.w	r3, r7, #16
 80012a8:	4619      	mov	r1, r3
 80012aa:	4826      	ldr	r0, [pc, #152]	; (8001344 <MX_FSMC_Init+0x14c>)
 80012ac:	f002 ff7f 	bl	80041ae <HAL_NAND_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012b6:	f001 f95b 	bl	8002570 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (HAL_NAND_Read_IDs(&hnand1, &nandID) == HAL_OK) {
 80012ba:	4924      	ldr	r1, [pc, #144]	; (800134c <MX_FSMC_Init+0x154>)
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_FSMC_Init+0x14c>)
 80012be:	f000 f84f 	bl	8001360 <HAL_NAND_Read_IDs>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d136      	bne.n	8001336 <MX_FSMC_Init+0x13e>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012c8:	481e      	ldr	r0, [pc, #120]	; (8001344 <MX_FSMC_Init+0x14c>)
 80012ca:	f003 fa91 	bl	80047f0 <HAL_NAND_GetState>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_FSMC_Init+0x158>)
 80012d4:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012d6:	4a1f      	ldr	r2, [pc, #124]	; (8001354 <MX_FSMC_Init+0x15c>)
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_FSMC_Init+0x14c>)
 80012da:	4615      	mov	r5, r2
 80012dc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012e8:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 80012ec:	4b19      	ldr	r3, [pc, #100]	; (8001354 <MX_FSMC_Init+0x15c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d019      	beq.n	8001328 <MX_FSMC_Init+0x130>
 80012f4:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_FSMC_Init+0x15c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012fc:	d814      	bhi.n	8001328 <MX_FSMC_Init+0x130>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_FSMC_Init+0x15c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	2001      	movs	r0, #1
 8001306:	f009 fdc9 	bl	800ae9c <calloc>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_FSMC_Init+0x160>)
 8001310:	601a      	str	r2, [r3, #0]
		  if (!rdBuf) devError |= devMEM;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_FSMC_Init+0x160>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10d      	bne.n	8001336 <MX_FSMC_Init+0x13e>
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <MX_FSMC_Init+0x164>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f043 0302 	orr.w	r3, r3, #2
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <MX_FSMC_Init+0x164>)
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e006      	b.n	8001336 <MX_FSMC_Init+0x13e>
	  } else {
		  devError |= devNAND;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_FSMC_Init+0x164>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f043 0306 	orr.w	r3, r3, #6
 8001330:	4a0a      	ldr	r2, [pc, #40]	; (800135c <MX_FSMC_Init+0x164>)
 8001332:	6013      	str	r3, [r2, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 8001334:	e7ff      	b.n	8001336 <MX_FSMC_Init+0x13e>
 8001336:	bf00      	nop
 8001338:	3720      	adds	r7, #32
 800133a:	46bd      	mov	sp, r7
 800133c:	bdb0      	pop	{r4, r5, r7, pc}
 800133e:	bf00      	nop
 8001340:	20000b38 	.word	0x20000b38
 8001344:	200002c0 	.word	0x200002c0
 8001348:	a0000060 	.word	0xa0000060
 800134c:	20000b3c 	.word	0x20000b3c
 8001350:	20000040 	.word	0x20000040
 8001354:	20000b44 	.word	0x20000b44
 8001358:	20000b5c 	.word	0x20000b5c
 800135c:	2000030c 	.word	0x2000030c

08001360 <HAL_NAND_Read_IDs>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef HAL_NAND_Read_IDs(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
__IO uint32_t data = 0U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
__IO uint32_t data1 = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
uint32_t deviceaddress = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]

	__HAL_LOCK(hnand);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3020 	ldrb.w	r3, [r3, #32]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_NAND_Read_IDs+0x24>
 8001380:	2302      	movs	r3, #2
 8001382:	e052      	b.n	800142a <HAL_NAND_Read_IDs+0xca>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2020 	strb.w	r2, [r3, #32]

	if(hnand->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d101      	bne.n	800139c <HAL_NAND_Read_IDs+0x3c>
 8001398:	2302      	movs	r3, #2
 800139a:	e046      	b.n	800142a <HAL_NAND_Read_IDs+0xca>

	if(hnand->Init.NandBank == FMC_NAND_BANK2) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	2b10      	cmp	r3, #16
 80013a2:	d103      	bne.n	80013ac <HAL_NAND_Read_IDs+0x4c>
		deviceaddress = NAND_DEVICE1;
 80013a4:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e002      	b.n	80013b2 <HAL_NAND_Read_IDs+0x52>
	} else {
		deviceaddress = NAND_DEVICE2;
 80013ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013b0:	617b      	str	r3, [r7, #20]
	}
	devAdr = deviceaddress;
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_NAND_Read_IDs+0xd8>)
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	6013      	str	r3, [r2, #0]

	hnand->State = HAL_NAND_STATE_BUSY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2202      	movs	r2, #2
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Send Read ID command sequence */
	*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_READID;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c6:	2290      	movs	r2, #144	; 0x90
 80013c8:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]

	/* Read the electronic signature from NAND flash */
	if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d121      	bne.n	8001420 <HAL_NAND_Read_IDs+0xc0>
		data = *(__IO uint32_t *)deviceaddress;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	613b      	str	r3, [r7, #16]
		data1 = *((__IO uint32_t *)deviceaddress + 4U);
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	3310      	adds	r3, #16
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	60fb      	str	r3, [r7, #12]

		/* Return the data read */
		pNAND_ID->Maker_Id  = ADDR_1ST_CYCLE(data);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	b2da      	uxtb	r2, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	701a      	strb	r2, [r3, #0]
		pNAND_ID->Device_Id = ADDR_2ND_CYCLE(data);
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	705a      	strb	r2, [r3, #1]
		pNAND_ID->Third_Id  = ADDR_3RD_CYCLE(data);
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	0c1b      	lsrs	r3, r3, #16
 8001400:	b2da      	uxtb	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	709a      	strb	r2, [r3, #2]
		pNAND_ID->Fourth_Id = ADDR_4TH_CYCLE(data);
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	0e1b      	lsrs	r3, r3, #24
 800140a:	b2da      	uxtb	r2, r3
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	70da      	strb	r2, [r3, #3]
		pNAND_ID->Plane_Id  = ADDR_1ST_CYCLE(data1);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	b2da      	uxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	711a      	strb	r2, [r3, #4]

		hnand->State = HAL_NAND_STATE_READY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	__HAL_UNLOCK(hnand);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2020 	strb.w	r2, [r3, #32]

	return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	371c      	adds	r7, #28
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000b28 	.word	0x20000b28

0800143c <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001448:	2330      	movs	r3, #48	; 0x30
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	2300      	movs	r3, #0
 8001452:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d002      	beq.n	8001464 <hex2bin+0x28>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <hex2bin+0x2c>
 8001464:	6a3b      	ldr	r3, [r7, #32]
 8001466:	e0b2      	b.n	80015ce <hex2bin+0x192>
    if (len > 8) len = 8;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	2b08      	cmp	r3, #8
 800146c:	d901      	bls.n	8001472 <hex2bin+0x36>
 800146e:	2308      	movs	r3, #8
 8001470:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	f1c3 0308 	rsb	r3, r3, #8
 8001478:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 800147c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001480:	f107 0210 	add.w	r2, r7, #16
 8001484:	4413      	add	r3, r2
 8001486:	78fa      	ldrb	r2, [r7, #3]
 8001488:	6879      	ldr	r1, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f009 fdee 	bl	800b06c <memcpy>

    k = j = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001496:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800149a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 800149e:	e090      	b.n	80015c2 <hex2bin+0x186>
        jk = j + 2;
 80014a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014a4:	3302      	adds	r3, #2
 80014a6:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 80014a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80014b0:	e066      	b.n	8001580 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 80014b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014b6:	3328      	adds	r3, #40	; 0x28
 80014b8:	443b      	add	r3, r7
 80014ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014be:	2b2f      	cmp	r3, #47	; 0x2f
 80014c0:	d918      	bls.n	80014f4 <hex2bin+0xb8>
 80014c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c6:	3328      	adds	r3, #40	; 0x28
 80014c8:	443b      	add	r3, r7
 80014ca:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80014ce:	2b39      	cmp	r3, #57	; 0x39
 80014d0:	d810      	bhi.n	80014f4 <hex2bin+0xb8>
 80014d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014d6:	3328      	adds	r3, #40	; 0x28
 80014d8:	443b      	add	r3, r7
 80014da:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80014de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	3a30      	subs	r2, #48	; 0x30
 80014e8:	b2d2      	uxtb	r2, r2
 80014ea:	3328      	adds	r3, #40	; 0x28
 80014ec:	443b      	add	r3, r7
 80014ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80014f2:	e040      	b.n	8001576 <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 80014f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f8:	3328      	adds	r3, #40	; 0x28
 80014fa:	443b      	add	r3, r7
 80014fc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001500:	2b60      	cmp	r3, #96	; 0x60
 8001502:	d918      	bls.n	8001536 <hex2bin+0xfa>
 8001504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001508:	3328      	adds	r3, #40	; 0x28
 800150a:	443b      	add	r3, r7
 800150c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001510:	2b66      	cmp	r3, #102	; 0x66
 8001512:	d810      	bhi.n	8001536 <hex2bin+0xfa>
 8001514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001518:	3328      	adds	r3, #40	; 0x28
 800151a:	443b      	add	r3, r7
 800151c:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	3a57      	subs	r2, #87	; 0x57
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	3328      	adds	r3, #40	; 0x28
 800152e:	443b      	add	r3, r7
 8001530:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001534:	e01f      	b.n	8001576 <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800153a:	3328      	adds	r3, #40	; 0x28
 800153c:	443b      	add	r3, r7
 800153e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001542:	2b40      	cmp	r3, #64	; 0x40
 8001544:	d917      	bls.n	8001576 <hex2bin+0x13a>
 8001546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800154a:	3328      	adds	r3, #40	; 0x28
 800154c:	443b      	add	r3, r7
 800154e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001552:	2b46      	cmp	r3, #70	; 0x46
 8001554:	d80f      	bhi.n	8001576 <hex2bin+0x13a>
 8001556:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800155a:	3328      	adds	r3, #40	; 0x28
 800155c:	443b      	add	r3, r7
 800155e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001562:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	3a37      	subs	r2, #55	; 0x37
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	3328      	adds	r3, #40	; 0x28
 8001570:	443b      	add	r3, r7
 8001572:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800157a:	3301      	adds	r3, #1
 800157c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001580:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	429a      	cmp	r2, r3
 8001588:	d393      	bcc.n	80014b2 <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 800158a:	7b3b      	ldrb	r3, [r7, #12]
 800158c:	011a      	lsls	r2, r3, #4
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001598:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800159c:	f1c3 0303 	rsb	r3, r3, #3
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	6a3a      	ldr	r2, [r7, #32]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	623b      	str	r3, [r7, #32]
        k++;
 80015ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015b2:	3301      	adds	r3, #1
 80015b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 80015b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80015bc:	3302      	adds	r3, #2
 80015be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 80015c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	f67f af6a 	bls.w	80014a0 <hex2bin+0x64>
    }

    return ret;
 80015cc:	6a3b      	ldr	r3, [r7, #32]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
	...

080015d8 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	71fb      	strb	r3, [r7, #7]
	if (on)
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d006      	beq.n	80015f6 <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 80015e8:	2201      	movs	r2, #1
 80015ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <errLedOn+0x34>)
 80015f0:	f002 fdaa 	bl	8004148 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 80015f4:	e005      	b.n	8001602 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 80015f6:	2200      	movs	r2, #0
 80015f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <errLedOn+0x34>)
 80015fe:	f002 fda3 	bl	8004148 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40020c00 	.word	0x40020c00

08001610 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
	return secCounter;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <get_secCounter+0x14>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000310 	.word	0x20000310

08001628 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	secCounter++;
 800162c:	4b04      	ldr	r3, [pc, #16]	; (8001640 <inc_secCounter+0x18>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	3301      	adds	r3, #1
 8001632:	4a03      	ldr	r2, [pc, #12]	; (8001640 <inc_secCounter+0x18>)
 8001634:	6013      	str	r3, [r2, #0]
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	20000310 	.word	0x20000310

08001644 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	return msCounter;
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <get_msCounter+0x18>)
 800164a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000318 	.word	0x20000318

08001660 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	msCounter++;
 8001664:	4b06      	ldr	r3, [pc, #24]	; (8001680 <inc_msCounter+0x20>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	1c50      	adds	r0, r2, #1
 800166c:	f143 0100 	adc.w	r1, r3, #0
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <inc_msCounter+0x20>)
 8001672:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	20000318 	.word	0x20000318

08001684 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 800168c:	f7ff ffc0 	bl	8001610 <get_secCounter>
 8001690:	4602      	mov	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80016a6:	f7ff ffb3 	bl	8001610 <get_secCounter>
 80016aa:	4602      	mov	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4293      	cmp	r3, r2
 80016b0:	bf94      	ite	ls
 80016b2:	2301      	movls	r3, #1
 80016b4:	2300      	movhi	r3, #0
 80016b6:	b2db      	uxtb	r3, r3
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b094      	sub	sp, #80	; 0x50
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	struct tm ts;
	time_t ep = (time_t)usec;
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	2000      	movs	r0, #0
 80016cc:	460a      	mov	r2, r1
 80016ce:	4603      	mov	r3, r0
 80016d0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	gmtime_r(&ep, &ts);
 80016d4:	f107 0214 	add.w	r2, r7, #20
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f009 fbea 	bl	800aeb8 <gmtime_r>

	sDate.WeekDay = ts.tm_wday;
 80016e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	sDate.Month   = ts.tm_mon + 1;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	sDate.Date    = ts.tm_mday;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	sDate.Year    = ts.tm_year;
 8001700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001708:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800170c:	2200      	movs	r2, #0
 800170e:	4619      	mov	r1, r3
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <set_Date+0xbc>)
 8001712:	f003 ffd3 	bl	80056bc <HAL_RTC_SetDate>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <set_Date+0x6a>
 800171c:	4b18      	ldr	r3, [pc, #96]	; (8001780 <set_Date+0xc0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	4a16      	ldr	r2, [pc, #88]	; (8001780 <set_Date+0xc0>)
 8001726:	6013      	str	r3, [r2, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001728:	e023      	b.n	8001772 <set_Date+0xb2>
		sTime.Hours   = ts.tm_hour + tZone;
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <set_Date+0xc4>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		sTime.Minutes = ts.tm_min;
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		sTime.Seconds = ts.tm_sec;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800174a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800174e:	2200      	movs	r2, #0
 8001750:	4619      	mov	r1, r3
 8001752:	480a      	ldr	r0, [pc, #40]	; (800177c <set_Date+0xbc>)
 8001754:	f003 fe97 	bl	8005486 <HAL_RTC_SetTime>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <set_Date+0xac>
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <set_Date+0xc0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f043 0304 	orr.w	r3, r3, #4
 8001766:	4a06      	ldr	r2, [pc, #24]	; (8001780 <set_Date+0xc0>)
 8001768:	6013      	str	r3, [r2, #0]
}
 800176a:	e002      	b.n	8001772 <set_Date+0xb2>
			setDate = true;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <set_Date+0xc8>)
 800176e:	2201      	movs	r2, #1
 8001770:	701a      	strb	r2, [r3, #0]
}
 8001772:	bf00      	nop
 8001774:	3750      	adds	r7, #80	; 0x50
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000fc 	.word	0x200000fc
 8001780:	2000030c 	.word	0x2000030c
 8001784:	20000b25 	.word	0x20000b25
 8001788:	20000b24 	.word	0x20000b24

0800178c <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 800178c:	b590      	push	{r4, r7, lr}
 800178e:	b093      	sub	sp, #76	; 0x4c
 8001790:	af04      	add	r7, sp, #16
 8001792:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <sec2str+0x10c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	f083 0301 	eor.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d040      	beq.n	8001828 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80017a6:	f7ff ff33 	bl	8001610 <get_secCounter>
 80017aa:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80017ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ae:	4a3b      	ldr	r2, [pc, #236]	; (800189c <sec2str+0x110>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	0c1b      	lsrs	r3, r3, #16
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80017b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ba:	4a38      	ldr	r2, [pc, #224]	; (800189c <sec2str+0x110>)
 80017bc:	fba2 1203 	umull	r1, r2, r2, r3
 80017c0:	0c12      	lsrs	r2, r2, #16
 80017c2:	4937      	ldr	r1, [pc, #220]	; (80018a0 <sec2str+0x114>)
 80017c4:	fb01 f202 	mul.w	r2, r1, r2
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80017cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017ce:	4a35      	ldr	r2, [pc, #212]	; (80018a4 <sec2str+0x118>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	0adb      	lsrs	r3, r3, #11
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80017d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017da:	4a32      	ldr	r2, [pc, #200]	; (80018a4 <sec2str+0x118>)
 80017dc:	fba2 1203 	umull	r1, r2, r2, r3
 80017e0:	0ad2      	lsrs	r2, r2, #11
 80017e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80017e6:	fb01 f202 	mul.w	r2, r1, r2
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80017ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f0:	4a2d      	ldr	r2, [pc, #180]	; (80018a8 <sec2str+0x11c>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80017fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80017fc:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <sec2str+0x11c>)
 80017fe:	fba3 1302 	umull	r1, r3, r3, r2
 8001802:	0959      	lsrs	r1, r3, #5
 8001804:	460b      	mov	r3, r1
 8001806:	011b      	lsls	r3, r3, #4
 8001808:	1a5b      	subs	r3, r3, r1
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu ", day, hour, min, sec);
 8001810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001812:	9301      	str	r3, [sp, #4]
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800181a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181c:	4923      	ldr	r1, [pc, #140]	; (80018ac <sec2str+0x120>)
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f009 fdaa 	bl	800b378 <siprintf>
 8001824:	6378      	str	r0, [r7, #52]	; 0x34
 8001826:	e032      	b.n	800188e <sec2str+0x102>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	481f      	ldr	r0, [pc, #124]	; (80018b0 <sec2str+0x124>)
 8001832:	f003 ffea 	bl	800580a <HAL_RTC_GetDate>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d006      	beq.n	800184a <sec2str+0xbe>
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <sec2str+0x128>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f043 0304 	orr.w	r3, r3, #4
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <sec2str+0x128>)
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e021      	b.n	800188e <sec2str+0x102>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	2200      	movs	r2, #0
 8001850:	4619      	mov	r1, r3
 8001852:	4817      	ldr	r0, [pc, #92]	; (80018b0 <sec2str+0x124>)
 8001854:	f003 fed4 	bl	8005600 <HAL_RTC_GetTime>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d006      	beq.n	800186c <sec2str+0xe0>
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <sec2str+0x128>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	4a13      	ldr	r2, [pc, #76]	; (80018b4 <sec2str+0x128>)
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e010      	b.n	800188e <sec2str+0x102>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
								sDate.Date, sDate.Month,
 800186c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800186e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001870:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 8001872:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001874:	7c3b      	ldrb	r3, [r7, #16]
 8001876:	7c7a      	ldrb	r2, [r7, #17]
 8001878:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u ",
 800187a:	9102      	str	r1, [sp, #8]
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	4623      	mov	r3, r4
 8001882:	4602      	mov	r2, r0
 8001884:	490c      	ldr	r1, [pc, #48]	; (80018b8 <sec2str+0x12c>)
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f009 fd76 	bl	800b378 <siprintf>
 800188c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800188e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001890:	4618      	mov	r0, r3
 8001892:	373c      	adds	r7, #60	; 0x3c
 8001894:	46bd      	mov	sp, r7
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	20000b24 	.word	0x20000b24
 800189c:	c22e4507 	.word	0xc22e4507
 80018a0:	00015180 	.word	0x00015180
 80018a4:	91a2b3c5 	.word	0x91a2b3c5
 80018a8:	88888889 	.word	0x88888889
 80018ac:	0800bd58 	.word	0x0800bd58
 80018b0:	200000fc 	.word	0x200000fc
 80018b4:	2000030c 	.word	0x2000030c
 80018b8:	0800bd70 	.word	0x0800bd70

080018bc <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 80018bc:	b40e      	push	{r1, r2, r3}
 80018be:	b590      	push	{r4, r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80018c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018cc:	613b      	str	r3, [r7, #16]
int dl = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <Report+0xbc>)
 80018d4:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d012      	beq.n	8001908 <Report+0x4c>
		dl = sec2str(buf);
 80018e2:	68f8      	ldr	r0, [r7, #12]
 80018e4:	f7ff ff52 	bl	800178c <sec2str>
 80018e8:	6178      	str	r0, [r7, #20]
		strcat(buf, "| ");
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7fe fc70 	bl	80001d0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a20      	ldr	r2, [pc, #128]	; (800197c <Report+0xc0>)
 80018fa:	8811      	ldrh	r1, [r2, #0]
 80018fc:	7892      	ldrb	r2, [r2, #2]
 80018fe:	8019      	strh	r1, [r3, #0]
 8001900:	709a      	strb	r2, [r3, #2]
		dl += 2;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3302      	adds	r3, #2
 8001906:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8001908:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190c:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	18d0      	adds	r0, r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	1ad1      	subs	r1, r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191e:	f009 fe51 	bl	800b5c4 <vsniprintf>

	uartRdy = false;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <Report+0xc4>)
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <Report+0xc8>)
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	68f8      	ldr	r0, [r7, #12]
 800192e:	f7fe fc4f 	bl	80001d0 <strlen>
 8001932:	4603      	mov	r3, r0
 8001934:	b29b      	uxth	r3, r3
 8001936:	461a      	mov	r2, r3
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	4620      	mov	r0, r4
 800193c:	f005 fa34 	bl	8006da8 <HAL_UART_Transmit_DMA>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d009      	beq.n	800195a <Report+0x9e>
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <Report+0xcc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <Report+0xcc>)
 8001950:	6013      	str	r3, [r2, #0]
	while (!uartRdy) HAL_Delay(1);
 8001952:	e002      	b.n	800195a <Report+0x9e>
 8001954:	2001      	movs	r0, #1
 8001956:	f001 fd53 	bl	8003400 <HAL_Delay>
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <Report+0xc4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f083 0301 	eor.w	r3, r3, #1
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f5      	bne.n	8001954 <Report+0x98>

	va_end(args);

	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001974:	b003      	add	sp, #12
 8001976:	4770      	bx	lr
 8001978:	20000320 	.word	0x20000320
 800197c:	0800bd8c 	.word	0x0800bd8c
 8001980:	20000020 	.word	0x20000020
 8001984:	20000030 	.word	0x20000030
 8001988:	2000030c 	.word	0x2000030c

0800198c <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a8a      	ldr	r2, [pc, #552]	; (8001bc4 <HAL_UART_RxCpltCallback+0x238>)
 800199a:	4293      	cmp	r3, r2
 800199c:	f040 8175 	bne.w	8001c8a <HAL_UART_RxCpltCallback+0x2fe>
		rxBuf[ruk++] = (char)rxByte;
 80019a0:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <HAL_UART_RxCpltCallback+0x23c>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	b291      	uxth	r1, r2
 80019a8:	4a87      	ldr	r2, [pc, #540]	; (8001bc8 <HAL_UART_RxCpltCallback+0x23c>)
 80019aa:	8011      	strh	r1, [r2, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b87      	ldr	r3, [pc, #540]	; (8001bcc <HAL_UART_RxCpltCallback+0x240>)
 80019b0:	7819      	ldrb	r1, [r3, #0]
 80019b2:	4b87      	ldr	r3, [pc, #540]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 80019b4:	5499      	strb	r1, [r3, r2]
		if (rxByte == 0x0a) {//end of line
 80019b6:	4b85      	ldr	r3, [pc, #532]	; (8001bcc <HAL_UART_RxCpltCallback+0x240>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	f040 8160 	bne.w	8001c80 <HAL_UART_RxCpltCallback+0x2f4>
			ruk--;
 80019c0:	4b81      	ldr	r3, [pc, #516]	; (8001bc8 <HAL_UART_RxCpltCallback+0x23c>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_UART_RxCpltCallback+0x23c>)
 80019ca:	801a      	strh	r2, [r3, #0]
			rxBuf[ruk] = '\0';
 80019cc:	4b7e      	ldr	r3, [pc, #504]	; (8001bc8 <HAL_UART_RxCpltCallback+0x23c>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b7f      	ldr	r3, [pc, #508]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
			bool check = false;
 80019dc:	2300      	movs	r3, #0
 80019de:	76fb      	strb	r3, [r7, #27]
			if (strstr(rxBuf, s_restart)) {
 80019e0:	4b7c      	ldr	r3, [pc, #496]	; (8001bd4 <HAL_UART_RxCpltCallback+0x248>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	487a      	ldr	r0, [pc, #488]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 80019e8:	f009 fd1d 	bl	800b426 <strstr>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d005      	beq.n	80019fe <HAL_UART_RxCpltCallback+0x72>
				flags.restart = 1;
 80019f2:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_UART_RxCpltCallback+0x24c>)
 80019f4:	7813      	ldrb	r3, [r2, #0]
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	7013      	strb	r3, [r2, #0]
 80019fc:	e137      	b.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
			} else if ((uk = strstr(rxBuf, s_epoch))) {
 80019fe:	4b77      	ldr	r3, [pc, #476]	; (8001bdc <HAL_UART_RxCpltCallback+0x250>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4619      	mov	r1, r3
 8001a04:	4872      	ldr	r0, [pc, #456]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 8001a06:	f009 fd0e 	bl	800b426 <strstr>
 8001a0a:	61f8      	str	r0, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d033      	beq.n	8001a7a <HAL_UART_RxCpltCallback+0xee>
				uk += strlen(s_epoch);
 8001a12:	4b72      	ldr	r3, [pc, #456]	; (8001bdc <HAL_UART_RxCpltCallback+0x250>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fbda 	bl	80001d0 <strlen>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4413      	add	r3, r2
 8001a22:	61fb      	str	r3, [r7, #28]
				if (*uk != '?') {
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b3f      	cmp	r3, #63	; 0x3f
 8001a2a:	d01d      	beq.n	8001a68 <HAL_UART_RxCpltCallback+0xdc>
					if (strlen(uk) < 10) setDate = false;
 8001a2c:	69f8      	ldr	r0, [r7, #28]
 8001a2e:	f7fe fbcf 	bl	80001d0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b09      	cmp	r3, #9
 8001a36:	d803      	bhi.n	8001a40 <HAL_UART_RxCpltCallback+0xb4>
 8001a38:	4b69      	ldr	r3, [pc, #420]	; (8001be0 <HAL_UART_RxCpltCallback+0x254>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e116      	b.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
					else {
						uint32_t ep = (uint32_t)atol(uk);
 8001a40:	69f8      	ldr	r0, [r7, #28]
 8001a42:	f009 fa27 	bl	800ae94 <atol>
 8001a46:	4603      	mov	r3, r0
 8001a48:	60fb      	str	r3, [r7, #12]
						if (ep > epoch) {
 8001a4a:	4b66      	ldr	r3, [pc, #408]	; (8001be4 <HAL_UART_RxCpltCallback+0x258>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	f240 810c 	bls.w	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
							epoch = ep;
 8001a56:	4a63      	ldr	r2, [pc, #396]	; (8001be4 <HAL_UART_RxCpltCallback+0x258>)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6013      	str	r3, [r2, #0]
							flags.time_set = 1;
 8001a5c:	4a5e      	ldr	r2, [pc, #376]	; (8001bd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001a5e:	7813      	ldrb	r3, [r2, #0]
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	7013      	strb	r3, [r2, #0]
 8001a66:	e102      	b.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
						}
					}
				} else {
					setDate = true;
 8001a68:	4b5d      	ldr	r3, [pc, #372]	; (8001be0 <HAL_UART_RxCpltCallback+0x254>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
					flags.time_show = 1;
 8001a6e:	4a5a      	ldr	r2, [pc, #360]	; (8001bd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001a70:	7813      	ldrb	r3, [r2, #0]
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	7013      	strb	r3, [r2, #0]
 8001a78:	e0f9      	b.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
				}
			} else {
				int8_t idx = -1;
 8001a7a:	23ff      	movs	r3, #255	; 0xff
 8001a7c:	76bb      	strb	r3, [r7, #26]
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	767b      	strb	r3, [r7, #25]
 8001a82:	e015      	b.n	8001ab0 <HAL_UART_RxCpltCallback+0x124>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds = "read:0x4549ABBB:256";
 8001a84:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001a88:	4a57      	ldr	r2, [pc, #348]	; (8001be8 <HAL_UART_RxCpltCallback+0x25c>)
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	484f      	ldr	r0, [pc, #316]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 8001a92:	f009 fcc8 	bl	800b426 <strstr>
 8001a96:	61f8      	str	r0, [r7, #28]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_UART_RxCpltCallback+0x118>
						                                  //"next";
														  //"write:0x0:256:0xf0"
														  //"erase:"
						idx = i;
 8001a9e:	7e7b      	ldrb	r3, [r7, #25]
 8001aa0:	76bb      	strb	r3, [r7, #26]
						break;
 8001aa2:	e009      	b.n	8001ab8 <HAL_UART_RxCpltCallback+0x12c>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001aa4:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	767b      	strb	r3, [r7, #25]
 8001ab0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	dde5      	ble.n	8001a84 <HAL_UART_RxCpltCallback+0xf8>
					}
				}
				if (uk == rxBuf) {
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_UART_RxCpltCallback+0x244>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	f040 80d6 	bne.w	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
					nandLen = 256;
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <HAL_UART_RxCpltCallback+0x260>)
 8001ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac8:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8001aca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001ace:	4a46      	ldr	r2, [pc, #280]	; (8001be8 <HAL_UART_RxCpltCallback+0x25c>)
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fb7b 	bl	80001d0 <strlen>
 8001ada:	4602      	mov	r2, r0
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	4413      	add	r3, r2
 8001ae0:	61fb      	str	r3, [r7, #28]
					char *uki = NULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
					switch (idx) {
 8001ae6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8001aea:	2b03      	cmp	r3, #3
 8001aec:	f200 809e 	bhi.w	8001c2c <HAL_UART_RxCpltCallback+0x2a0>
 8001af0:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_UART_RxCpltCallback+0x16c>)
 8001af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af6:	bf00      	nop
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b8d 	.word	0x08001b8d
 8001b00:	08001c2d 	.word	0x08001c2d
 8001b04:	08001bfd 	.word	0x08001bfd
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8001b08:	213a      	movs	r1, #58	; 0x3a
 8001b0a:	69f8      	ldr	r0, [r7, #28]
 8001b0c:	f009 fc63 	bl	800b3d6 <strchr>
 8001b10:	6178      	str	r0, [r7, #20]
							if (uki) {
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00b      	beq.n	8001b30 <HAL_UART_RxCpltCallback+0x1a4>
								nandLen = atol(uki + 1);
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f009 f9b9 	bl	800ae94 <atol>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b31      	ldr	r3, [pc, #196]	; (8001bec <HAL_UART_RxCpltCallback+0x260>)
 8001b28:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8001b30:	492f      	ldr	r1, [pc, #188]	; (8001bf0 <HAL_UART_RxCpltCallback+0x264>)
 8001b32:	69f8      	ldr	r0, [r7, #28]
 8001b34:	f009 fc77 	bl	800b426 <strstr>
 8001b38:	6178      	str	r0, [r7, #20]
							if (uki) {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00f      	beq.n	8001b60 <HAL_UART_RxCpltCallback+0x1d4>
								uki += 2;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3302      	adds	r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
								nandAdr = hex2bin(uki, strlen(uki));
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7fe fb42 	bl	80001d0 <strlen>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	6978      	ldr	r0, [r7, #20]
 8001b54:	f7ff fc72 	bl	800143c <hex2bin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e006      	b.n	8001b6e <HAL_UART_RxCpltCallback+0x1e2>
							} else {
								nandAdr = atol(uk);
 8001b60:	69f8      	ldr	r0, [r7, #28]
 8001b62:	f009 f997 	bl	800ae94 <atol>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b22      	ldr	r3, [pc, #136]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b6c:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <HAL_UART_RxCpltCallback+0x26c>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a1e      	ldr	r2, [pc, #120]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b7a:	6013      	str	r3, [r2, #0]
							check = true;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	76fb      	strb	r3, [r7, #27]
							flags.cmd = cmdRead;
 8001b80:	4a15      	ldr	r2, [pc, #84]	; (8001bd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001b82:	7813      	ldrb	r3, [r2, #0]
 8001b84:	f36f 1305 	bfc	r3, #4, #2
 8001b88:	7013      	strb	r3, [r2, #0]
						break;
 8001b8a:	e04f      	b.n	8001c2c <HAL_UART_RxCpltCallback+0x2a0>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <HAL_UART_RxCpltCallback+0x26c>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d203      	bcs.n	8001ba0 <HAL_UART_RxCpltCallback+0x214>
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <HAL_UART_RxCpltCallback+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001b9e:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_UART_RxCpltCallback+0x260>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_UART_RxCpltCallback+0x268>)
 8001bae:	6013      	str	r3, [r2, #0]
							check = true;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	76fb      	strb	r3, [r7, #27]
							flags.cmd = cmdNext;
 8001bb4:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_UART_RxCpltCallback+0x24c>)
 8001bb6:	7813      	ldrb	r3, [r2, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	f361 1305 	bfi	r3, r1, #4, #2
 8001bbe:	7013      	strb	r3, [r2, #0]
						break;
 8001bc0:	e034      	b.n	8001c2c <HAL_UART_RxCpltCallback+0x2a0>
 8001bc2:	bf00      	nop
 8001bc4:	40004800 	.word	0x40004800
 8001bc8:	20000b22 	.word	0x20000b22
 8001bcc:	20000b20 	.word	0x20000b20
 8001bd0:	20000720 	.word	0x20000720
 8001bd4:	20000008 	.word	0x20000008
 8001bd8:	20000308 	.word	0x20000308
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000b24 	.word	0x20000b24
 8001be4:	20000024 	.word	0x20000024
 8001be8:	20000010 	.word	0x20000010
 8001bec:	20000b30 	.word	0x20000b30
 8001bf0:	0800bd90 	.word	0x0800bd90
 8001bf4:	20000b2c 	.word	0x20000b2c
 8001bf8:	20000b28 	.word	0x20000b28
						case cmdWrite://"write:0x0:256:0xf0"
						break;
						case cmdErase://"erase:0" //erase:block_number from 0..1023
						{
							uint32_t blk = atol(uk);
 8001bfc:	69f8      	ldr	r0, [r7, #28]
 8001bfe:	f009 f949 	bl	800ae94 <atol>
 8001c02:	4603      	mov	r3, r0
 8001c04:	613b      	str	r3, [r7, #16]
							if (blk < chipConf.BlockNbr) {
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_UART_RxCpltCallback+0x308>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d20c      	bcs.n	8001c2a <HAL_UART_RxCpltCallback+0x29e>
								nandBlk = blk;
 8001c10:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_UART_RxCpltCallback+0x30c>)
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	6013      	str	r3, [r2, #0]
								flags.cmd = cmdErase;
 8001c16:	4a21      	ldr	r2, [pc, #132]	; (8001c9c <HAL_UART_RxCpltCallback+0x310>)
 8001c18:	7813      	ldrb	r3, [r2, #0]
 8001c1a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001c1e:	7013      	strb	r3, [r2, #0]
								flags.cmd_flag = 1;
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <HAL_UART_RxCpltCallback+0x310>)
 8001c22:	7813      	ldrb	r3, [r2, #0]
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	7013      	strb	r3, [r2, #0]
							}
						}
						break;
 8001c2a:	bf00      	nop
					}
					if (check) {
 8001c2c:	7efb      	ldrb	r3, [r7, #27]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01d      	beq.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
						flags.cmd_flag = 1;
 8001c32:	4a1a      	ldr	r2, [pc, #104]	; (8001c9c <HAL_UART_RxCpltCallback+0x310>)
 8001c34:	7813      	ldrb	r3, [r2, #0]
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	7013      	strb	r3, [r2, #0]
						if ((nandAdr + nandLen) >= (chipConf.PlaneSize + devAdr)) {
 8001c3c:	4b18      	ldr	r3, [pc, #96]	; (8001ca0 <HAL_UART_RxCpltCallback+0x314>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b18      	ldr	r3, [pc, #96]	; (8001ca4 <HAL_UART_RxCpltCallback+0x318>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_UART_RxCpltCallback+0x308>)
 8001c4a:	6959      	ldr	r1, [r3, #20]
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <HAL_UART_RxCpltCallback+0x31c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	440b      	add	r3, r1
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d30b      	bcc.n	8001c6e <HAL_UART_RxCpltCallback+0x2e2>
							nandLen = chipConf.PlaneSize - nandAdr - 1;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_UART_RxCpltCallback+0x308>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_UART_RxCpltCallback+0x318>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <HAL_UART_RxCpltCallback+0x314>)
 8001c6c:	801a      	strh	r2, [r3, #0]
						}
					}
				}
			}
			ruk = 0;
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_UART_RxCpltCallback+0x320>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 8001c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c78:	2100      	movs	r1, #0
 8001c7a:	480d      	ldr	r0, [pc, #52]	; (8001cb0 <HAL_UART_RxCpltCallback+0x324>)
 8001c7c:	f009 fa04 	bl	800b088 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8001c80:	2201      	movs	r2, #1
 8001c82:	490c      	ldr	r1, [pc, #48]	; (8001cb4 <HAL_UART_RxCpltCallback+0x328>)
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f005 f85e 	bl	8006d46 <HAL_UART_Receive_IT>
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	3720      	adds	r7, #32
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000b44 	.word	0x20000b44
 8001c98:	20000b34 	.word	0x20000b34
 8001c9c:	20000308 	.word	0x20000308
 8001ca0:	20000b30 	.word	0x20000b30
 8001ca4:	20000b2c 	.word	0x20000b2c
 8001ca8:	20000b28 	.word	0x20000b28
 8001cac:	20000b22 	.word	0x20000b22
 8001cb0:	20000720 	.word	0x20000720
 8001cb4:	20000b20 	.word	0x20000b20

08001cb8 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <HAL_UART_TxCpltCallback+0x24>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d102      	bne.n	8001cd0 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8001cca:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <HAL_UART_TxCpltCallback+0x28>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40004800 	.word	0x40004800
 8001ce0:	20000020 	.word	0x20000020

08001ce4 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <HAL_SPI_TxCpltCallback+0x24>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d102      	bne.n	8001cfc <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_SPI_TxCpltCallback+0x28>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40013000 	.word	0x40013000
 8001d0c:	20000021 	.word	0x20000021

08001d10 <HAL_NAND_ITCallback>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	if (hnand->Instance == FSMC_NAND_DEVICE) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_NAND_ITCallback+0x28>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d104      	bne.n	8001d2c <HAL_NAND_ITCallback+0x1c>
		cb_nandCounter++;
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_NAND_ITCallback+0x2c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <HAL_NAND_ITCallback+0x2c>)
 8001d2a:	6013      	str	r3, [r2, #0]
	}
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	a0000060 	.word	0xa0000060
 8001d3c:	20000b38 	.word	0x20000b38

08001d40 <nand_PageToBlock>:
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(uint32_t page)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <nand_PageToBlock+0x28>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	fb03 f202 	mul.w	r2, r3, r2
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <nand_PageToBlock+0x28>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000b44 	.word	0x20000b44

08001d6c <nand_BlockToPage>:
uint32_t nand_BlockToPage(uint32_t blk)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <nand_BlockToPage+0x28>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <nand_BlockToPage+0x28>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20000b44 	.word	0x20000b44

08001d98 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8001d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d9a:	b0a1      	sub	sp, #132	; 0x84
 8001d9c:	af04      	add	r7, sp, #16
 8001d9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	*(uint8_t *)&flags = 0;
 8001da0:	4b45      	ldr	r3, [pc, #276]	; (8001eb8 <defThread+0x120>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]

	char *stx = (char *)calloc(1, MAX_UART_BUF);
 8001da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001daa:	2001      	movs	r0, #1
 8001dac:	f009 f876 	bl	800ae9c <calloc>
 8001db0:	4603      	mov	r3, r0
 8001db2:	64bb      	str	r3, [r7, #72]	; 0x48
#ifdef SET_SWV
	char stz[MAX_TMP_SIZE];
#endif


	HAL_Delay(1000);
 8001db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db8:	f001 fb22 	bl	8003400 <HAL_Delay>
	Report(0, "%s", eol);
 8001dbc:	4b3f      	ldr	r3, [pc, #252]	; (8001ebc <defThread+0x124>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	493f      	ldr	r1, [pc, #252]	; (8001ec0 <defThread+0x128>)
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fd79 	bl	80018bc <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <defThread+0x12c>)
 8001dcc:	681c      	ldr	r4, [r3, #0]
 8001dce:	f008 ff31 	bl	800ac34 <xPortGetFreeHeapSize>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <defThread+0x124>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	9302      	str	r3, [sp, #8]
 8001dda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	9200      	str	r2, [sp, #0]
 8001de2:	4b39      	ldr	r3, [pc, #228]	; (8001ec8 <defThread+0x130>)
 8001de4:	4622      	mov	r2, r4
 8001de6:	4939      	ldr	r1, [pc, #228]	; (8001ecc <defThread+0x134>)
 8001de8:	2001      	movs	r0, #1
 8001dea:	f7ff fd67 	bl	80018bc <Report>


	uint8_t nand_show = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	bool readed = false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <defThread+0x138>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d174      	bne.n	8001eec <defThread+0x154>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <defThread+0x13c>)
 8001e04:	785b      	ldrb	r3, [r3, #1]
 8001e06:	22f1      	movs	r2, #241	; 0xf1
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d108      	bne.n	8001e1e <defThread+0x86>
 8001e0c:	4b32      	ldr	r3, [pc, #200]	; (8001ed8 <defThread+0x140>)
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	2220      	movs	r2, #32
 8001e16:	4618      	mov	r0, r3
 8001e18:	f009 faf2 	bl	800b400 <strncpy>
 8001e1c:	e006      	b.n	8001e2c <defThread+0x94>
		                               else strcpy(cid, "UNKNOWN");
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <defThread+0x144>)
 8001e24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e28:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8001e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e2e:	4a2c      	ldr	r2, [pc, #176]	; (8001ee0 <defThread+0x148>)
 8001e30:	6810      	ldr	r0, [r2, #0]
 8001e32:	6018      	str	r0, [r3, #0]
 8001e34:	8892      	ldrh	r2, [r2, #4]
 8001e36:	809a      	strh	r2, [r3, #4]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8001e38:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <defThread+0x13c>)
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001e42:	e015      	b.n	8001e70 <defThread+0xd8>
 8001e44:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e46:	f7fe f9c3 	bl	80001d0 <strlen>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e4e:	1898      	adds	r0, r3, r2
 8001e50:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 8001e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e56:	4413      	add	r3, r2
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4921      	ldr	r1, [pc, #132]	; (8001ee4 <defThread+0x14c>)
 8001e5e:	f009 fa8b 	bl	800b378 <siprintf>
 8001e62:	f997 306d 	ldrsb.w	r3, [r7, #109]	; 0x6d
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001e70:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d9e5      	bls.n	8001e44 <defThread+0xac>
		sprintf(stx+strlen(stx),
 8001e78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001e7a:	f7fe f9a9 	bl	80001d0 <strlen>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e82:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <defThread+0x13c>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8001e88:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8001e8a:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <defThread+0x13c>)
 8001e8c:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 8001e8e:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <defThread+0x13c>)
 8001e92:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8001e94:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8001e96:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <defThread+0x13c>)
 8001e98:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8001e9a:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <defThread+0x13c>)
 8001e9e:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 8001ea0:	9303      	str	r3, [sp, #12]
 8001ea2:	9102      	str	r1, [sp, #8]
 8001ea4:	9201      	str	r2, [sp, #4]
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	462b      	mov	r3, r5
 8001eae:	4622      	mov	r2, r4
 8001eb0:	490d      	ldr	r1, [pc, #52]	; (8001ee8 <defThread+0x150>)
 8001eb2:	f009 fa61 	bl	800b378 <siprintf>
 8001eb6:	e026      	b.n	8001f06 <defThread+0x16e>
 8001eb8:	20000308 	.word	0x20000308
 8001ebc:	20000004 	.word	0x20000004
 8001ec0:	0800bd94 	.word	0x0800bd94
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	0800e0f8 	.word	0x0800e0f8
 8001ecc:	0800bd98 	.word	0x0800bd98
 8001ed0:	20000040 	.word	0x20000040
 8001ed4:	20000b3c 	.word	0x20000b3c
 8001ed8:	20000044 	.word	0x20000044
 8001edc:	0800bdc4 	.word	0x0800bdc4
 8001ee0:	0800bdcc 	.word	0x0800bdcc
 8001ee4:	0800bdd4 	.word	0x0800bdd4
 8001ee8:	0800bddc 	.word	0x0800bddc
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8001eec:	4ba6      	ldr	r3, [pc, #664]	; (8002188 <defThread+0x3f0>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 8001ef4:	4aa5      	ldr	r2, [pc, #660]	; (800218c <defThread+0x3f4>)
 8001ef6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001efa:	4ba3      	ldr	r3, [pc, #652]	; (8002188 <defThread+0x3f0>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	49a4      	ldr	r1, [pc, #656]	; (8002190 <defThread+0x3f8>)
 8001f00:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f02:	f009 fa39 	bl	800b378 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 8001f06:	4ba3      	ldr	r3, [pc, #652]	; (8002194 <defThread+0x3fc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f0c:	49a2      	ldr	r1, [pc, #648]	; (8002198 <defThread+0x400>)
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fcd4 	bl	80018bc <Report>


	//fntKey = &Font_16x26;
	//tFont = &Font_11x18;
	//ipsOn(0);
	uint16_t err_color = BLACK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8001f1a:	4ba0      	ldr	r3, [pc, #640]	; (800219c <defThread+0x404>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	785b      	ldrb	r3, [r3, #1]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	22ef      	movs	r2, #239	; 0xef
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	f000 fdb0 	bl	8002a92 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8001f32:	4b9a      	ldr	r3, [pc, #616]	; (800219c <defThread+0x404>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	23ef      	movs	r3, #239	; 0xef
 8001f48:	22ef      	movs	r2, #239	; 0xef
 8001f4a:	2000      	movs	r0, #0
 8001f4c:	f000 fda1 	bl	8002a92 <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	461a      	mov	r2, r3
 8001f56:	4992      	ldr	r1, [pc, #584]	; (80021a0 <defThread+0x408>)
 8001f58:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f5a:	f009 fa0d 	bl	800b378 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 8001f5e:	4b91      	ldr	r3, [pc, #580]	; (80021a4 <defThread+0x40c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	23f0      	movs	r3, #240	; 0xf0
 8001f68:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f72:	f000 fe9b 	bl	8002cac <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 8001f76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001f78:	f7fe f92a 	bl	80001d0 <strlen>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f80:	189c      	adds	r4, r3, r2
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <defThread+0x410>)
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	4b88      	ldr	r3, [pc, #544]	; (80021a8 <defThread+0x410>)
 8001f88:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8001f8a:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <defThread+0x410>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 8001f8e:	0a9b      	lsrs	r3, r3, #10
 8001f90:	4a85      	ldr	r2, [pc, #532]	; (80021a8 <defThread+0x410>)
 8001f92:	68d2      	ldr	r2, [r2, #12]
 8001f94:	4984      	ldr	r1, [pc, #528]	; (80021a8 <defThread+0x410>)
 8001f96:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8001f98:	4883      	ldr	r0, [pc, #524]	; (80021a8 <defThread+0x410>)
 8001f9a:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 8001f9c:	0d00      	lsrs	r0, r0, #20
 8001f9e:	9003      	str	r0, [sp, #12]
 8001fa0:	9102      	str	r1, [sp, #8]
 8001fa2:	9201      	str	r2, [sp, #4]
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	4633      	mov	r3, r6
 8001fa8:	462a      	mov	r2, r5
 8001faa:	4980      	ldr	r1, [pc, #512]	; (80021ac <defThread+0x414>)
 8001fac:	4620      	mov	r0, r4
 8001fae:	f009 f9e3 	bl	800b378 <siprintf>
	if (cb_nandCounter) sprintf(stx+strlen(stx), "\nCallBack:%lu", cb_nandCounter);
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <defThread+0x418>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <defThread+0x23a>
 8001fba:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001fbc:	f7fe f908 	bl	80001d0 <strlen>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc4:	4413      	add	r3, r2
 8001fc6:	4a7a      	ldr	r2, [pc, #488]	; (80021b0 <defThread+0x418>)
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	497a      	ldr	r1, [pc, #488]	; (80021b4 <defThread+0x41c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f009 f9d3 	bl	800b378 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8001fd2:	4b74      	ldr	r3, [pc, #464]	; (80021a4 <defThread+0x40c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	785b      	ldrb	r3, [r3, #1]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fbcd 	bl	8000778 <__aeabi_i2d>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	460d      	mov	r5, r1
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <defThread+0x40c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	785b      	ldrb	r3, [r3, #1]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fbc5 	bl	8000778 <__aeabi_i2d>
 8001fee:	a364      	add	r3, pc, #400	; (adr r3, 8002180 <defThread+0x3e8>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe f944 	bl	8000280 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4620      	mov	r0, r4
 8001ffe:	4629      	mov	r1, r5
 8002000:	f7fe fa6e 	bl	80004e0 <__adddf3>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002008:	4610      	mov	r0, r2
 800200a:	4619      	mov	r1, r3
 800200c:	f7fe fc1e 	bl	800084c <__aeabi_d2uiz>
 8002010:	4603      	mov	r3, r0
 8002012:	b298      	uxth	r0, r3
 8002014:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <defThread+0x40c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a67      	ldr	r2, [pc, #412]	; (80021b8 <defThread+0x420>)
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	43d2      	mvns	r2, r2
 800201e:	b292      	uxth	r2, r2
 8002020:	4965      	ldr	r1, [pc, #404]	; (80021b8 <defThread+0x420>)
 8002022:	8809      	ldrh	r1, [r1, #0]
 8002024:	9102      	str	r1, [sp, #8]
 8002026:	9201      	str	r2, [sp, #4]
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002030:	4601      	mov	r1, r0
 8002032:	2000      	movs	r0, #0
 8002034:	f000 fde4 	bl	8002c00 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002038:	2001      	movs	r0, #1
 800203a:	f000 fb9b 	bl	8002774 <ipsOn>

	bool led = false;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	uint32_t tmr = get_tmr(1);
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff fb1d 	bl	8001684 <get_tmr>
 800204a:	6678      	str	r0, [r7, #100]	; 0x64

  /* Infinite loop */

  while (1) {

	  if (check_tmr(tmr)) {
 800204c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800204e:	f7ff fb26 	bl	800169e <check_tmr>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d059      	beq.n	800210c <defThread+0x374>
		  tmr = get_tmr(1);
 8002058:	2001      	movs	r0, #1
 800205a:	f7ff fb13 	bl	8001684 <get_tmr>
 800205e:	6678      	str	r0, [r7, #100]	; 0x64
		  //
		  sec2str(stx);
 8002060:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002062:	f7ff fb93 	bl	800178c <sec2str>
#ifdef SET_SWV
		  strcpy(stz, stx);
#endif
		  ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002066:	4b4d      	ldr	r3, [pc, #308]	; (800219c <defThread+0x404>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	23f0      	movs	r3, #240	; 0xf0
 8002070:	fb93 f3f2 	sdiv	r3, r3, r2
 8002074:	b29b      	uxth	r3, r3
 8002076:	4619      	mov	r1, r3
 8002078:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800207a:	f000 fe17 	bl	8002cac <mkLineCenter>
 800207e:	4601      	mov	r1, r0
 8002080:	4b46      	ldr	r3, [pc, #280]	; (800219c <defThread+0x404>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002088:	9202      	str	r2, [sp, #8]
 800208a:	221f      	movs	r2, #31
 800208c:	9201      	str	r2, [sp, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	9200      	str	r2, [sp, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	460a      	mov	r2, r1
 8002096:	2100      	movs	r1, #0
 8002098:	2008      	movs	r0, #8
 800209a:	f000 fdb1 	bl	8002c00 <ST7789_WriteString>

		  sprintf(stx, "Error: 0x%04X", (unsigned int)devError);
 800209e:	4b47      	ldr	r3, [pc, #284]	; (80021bc <defThread+0x424>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	4946      	ldr	r1, [pc, #280]	; (80021c0 <defThread+0x428>)
 80020a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020a8:	f009 f966 	bl	800b378 <siprintf>
		  if (devError) err_color = RED; else err_color = BLACK;
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <defThread+0x424>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d004      	beq.n	80020be <defThread+0x326>
 80020b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 80020bc:	e002      	b.n	80020c4 <defThread+0x32c>
 80020be:	2300      	movs	r3, #0
 80020c0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		  ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <defThread+0x404>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	785b      	ldrb	r3, [r3, #1]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80020d0:	b29c      	uxth	r4, r3
 80020d2:	4b32      	ldr	r3, [pc, #200]	; (800219c <defThread+0x404>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	461a      	mov	r2, r3
 80020da:	23f0      	movs	r3, #240	; 0xf0
 80020dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4619      	mov	r1, r3
 80020e4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80020e6:	f000 fde1 	bl	8002cac <mkLineCenter>
 80020ea:	4601      	mov	r1, r0
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <defThread+0x404>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f4:	9202      	str	r2, [sp, #8]
 80020f6:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 80020fa:	9201      	str	r2, [sp, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	9200      	str	r2, [sp, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	460a      	mov	r2, r1
 8002104:	4621      	mov	r1, r4
 8002106:	2000      	movs	r0, #0
 8002108:	f000 fd7a 	bl	8002c00 <ST7789_WriteString>
		  //puts("Second...");
		  printf("[%s] %s%s", __func__, stz, eol);
#endif
	  }

	  if (devError) led = true; else led = false;
 800210c:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <defThread+0x424>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <defThread+0x384>
 8002114:	2301      	movs	r3, #1
 8002116:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 800211a:	e002      	b.n	8002122 <defThread+0x38a>
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	  errLedOn(led);
 8002122:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fa56 	bl	80015d8 <errLedOn>

	  nand_show = 0;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	  if (flags.restart) {
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <defThread+0x42c>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00b      	beq.n	8002158 <defThread+0x3c0>
		  flags.restart = 0;
 8002140:	4a20      	ldr	r2, [pc, #128]	; (80021c4 <defThread+0x42c>)
 8002142:	7813      	ldrb	r3, [r2, #0]
 8002144:	f36f 0300 	bfc	r3, #0, #1
 8002148:	7013      	strb	r3, [r2, #0]
		  break;
 800214a:	bf00      	nop
		  }
	  }
	  osDelay(250);
  }

  if (rdBuf) free(rdBuf);
 800214c:	4b1e      	ldr	r3, [pc, #120]	; (80021c8 <defThread+0x430>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 81b6 	beq.w	80024c2 <defThread+0x72a>
 8002156:	e1af      	b.n	80024b8 <defThread+0x720>
	  } else if (flags.time_set) {
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <defThread+0x42c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d034      	beq.n	80021d0 <defThread+0x438>
		  flags.time_set = 0;
 8002166:	4a17      	ldr	r2, [pc, #92]	; (80021c4 <defThread+0x42c>)
 8002168:	7813      	ldrb	r3, [r2, #0]
 800216a:	f36f 0341 	bfc	r3, #1, #1
 800216e:	7013      	strb	r3, [r2, #0]
		  set_Date(epoch);
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <defThread+0x434>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff faa3 	bl	80016c0 <set_Date>
 800217a:	e199      	b.n	80024b0 <defThread+0x718>
 800217c:	f3af 8000 	nop.w
 8002180:	33333333 	.word	0x33333333
 8002184:	3feb3333 	.word	0x3feb3333
 8002188:	20000040 	.word	0x20000040
 800218c:	20000048 	.word	0x20000048
 8002190:	0800be30 	.word	0x0800be30
 8002194:	20000004 	.word	0x20000004
 8002198:	0800be50 	.word	0x0800be50
 800219c:	20000038 	.word	0x20000038
 80021a0:	0800be58 	.word	0x0800be58
 80021a4:	2000003c 	.word	0x2000003c
 80021a8:	20000b44 	.word	0x20000b44
 80021ac:	0800be64 	.word	0x0800be64
 80021b0:	20000b38 	.word	0x20000b38
 80021b4:	0800bec0 	.word	0x0800bec0
 80021b8:	20000b26 	.word	0x20000b26
 80021bc:	2000030c 	.word	0x2000030c
 80021c0:	0800bed0 	.word	0x0800bed0
 80021c4:	20000308 	.word	0x20000308
 80021c8:	20000b5c 	.word	0x20000b5c
 80021cc:	20000024 	.word	0x20000024
	  } else if (flags.time_show) {
 80021d0:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <defThread+0x6bc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00f      	beq.n	80021fe <defThread+0x466>
		  flags.time_show = 0;
 80021de:	4a9d      	ldr	r2, [pc, #628]	; (8002454 <defThread+0x6bc>)
 80021e0:	7813      	ldrb	r3, [r2, #0]
 80021e2:	f36f 0382 	bfc	r3, #2, #1
 80021e6:	7013      	strb	r3, [r2, #0]
		  sec2str(stx);
 80021e8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80021ea:	f7ff facf 	bl	800178c <sec2str>
		  Report(0, "Current date&time -> %s%s", stx, eol);
 80021ee:	4b9a      	ldr	r3, [pc, #616]	; (8002458 <defThread+0x6c0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80021f4:	4999      	ldr	r1, [pc, #612]	; (800245c <defThread+0x6c4>)
 80021f6:	2000      	movs	r0, #0
 80021f8:	f7ff fb60 	bl	80018bc <Report>
 80021fc:	e158      	b.n	80024b0 <defThread+0x718>
	  } else if (flags.cmd_flag) {
 80021fe:	4b95      	ldr	r3, [pc, #596]	; (8002454 <defThread+0x6bc>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	f003 0308 	and.w	r3, r3, #8
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8151 	beq.w	80024b0 <defThread+0x718>
		  flags.cmd_flag = 0;
 800220e:	4a91      	ldr	r2, [pc, #580]	; (8002454 <defThread+0x6bc>)
 8002210:	7813      	ldrb	r3, [r2, #0]
 8002212:	f36f 03c3 	bfc	r3, #3, #1
 8002216:	7013      	strb	r3, [r2, #0]
		  switch (flags.cmd) {
 8002218:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <defThread+0x6bc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b03      	cmp	r3, #3
 8002224:	d062      	beq.n	80022ec <defThread+0x554>
 8002226:	2b03      	cmp	r3, #3
 8002228:	f300 8095 	bgt.w	8002356 <defThread+0x5be>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d002      	beq.n	8002236 <defThread+0x49e>
 8002230:	2b01      	cmp	r3, #1
 8002232:	d046      	beq.n	80022c2 <defThread+0x52a>
 8002234:	e08f      	b.n	8002356 <defThread+0x5be>
		  		  uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002236:	4b8a      	ldr	r3, [pc, #552]	; (8002460 <defThread+0x6c8>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b8a      	ldr	r3, [pc, #552]	; (8002464 <defThread+0x6cc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	1ad2      	subs	r2, r2, r3
 8002240:	4b89      	ldr	r3, [pc, #548]	; (8002468 <defThread+0x6d0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	643b      	str	r3, [r7, #64]	; 0x40
		  		  NAND_AddressTypeDef addr = {
 800224a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800224c:	b29b      	uxth	r3, r3
 800224e:	82bb      	strh	r3, [r7, #20]
 8002250:	2301      	movs	r3, #1
 8002252:	82fb      	strh	r3, [r7, #22]
					  .Block = nand_PageToBlock(p)
 8002254:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002256:	f7ff fd73 	bl	8001d40 <nand_PageToBlock>
 800225a:	4603      	mov	r3, r0
		  		  NAND_AddressTypeDef addr = {
 800225c:	b29b      	uxth	r3, r3
 800225e:	833b      	strh	r3, [r7, #24]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002260:	4b7f      	ldr	r3, [pc, #508]	; (8002460 <defThread+0x6c8>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	4b81      	ldr	r3, [pc, #516]	; (800246c <defThread+0x6d4>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	461c      	mov	r4, r3
		  				    nandAdr, nandLen, addr.Page, addr.Block, eol);
 800226a:	8abb      	ldrh	r3, [r7, #20]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 800226c:	4619      	mov	r1, r3
		  				    nandAdr, nandLen, addr.Page, addr.Block, eol);
 800226e:	8b3b      	ldrh	r3, [r7, #24]
		  		  Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002270:	4618      	mov	r0, r3
 8002272:	4b79      	ldr	r3, [pc, #484]	; (8002458 <defThread+0x6c0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	9302      	str	r3, [sp, #8]
 8002278:	9001      	str	r0, [sp, #4]
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	4623      	mov	r3, r4
 800227e:	497c      	ldr	r1, [pc, #496]	; (8002470 <defThread+0x6d8>)
 8002280:	2001      	movs	r0, #1
 8002282:	f7ff fb1b 	bl	80018bc <Report>
		  		  if (rdBuf) {
 8002286:	4b7b      	ldr	r3, [pc, #492]	; (8002474 <defThread+0x6dc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d060      	beq.n	8002350 <defThread+0x5b8>
		  			  if (HAL_NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <defThread+0x6e0>)
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	4b78      	ldr	r3, [pc, #480]	; (8002474 <defThread+0x6dc>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f107 0114 	add.w	r1, r7, #20
 800229a:	2301      	movs	r3, #1
 800229c:	f002 f8a9 	bl	80043f2 <HAL_NAND_Read_Page_8b>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d106      	bne.n	80022b4 <defThread+0x51c>
		  				  nand_show = 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  				  readed = true;
 80022ac:	2301      	movs	r3, #1
 80022ae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
		  	  break;
 80022b2:	e04d      	b.n	8002350 <defThread+0x5b8>
		  			  } else devError |= devNAND;
 80022b4:	4b71      	ldr	r3, [pc, #452]	; (800247c <defThread+0x6e4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f043 0306 	orr.w	r3, r3, #6
 80022bc:	4a6f      	ldr	r2, [pc, #444]	; (800247c <defThread+0x6e4>)
 80022be:	6013      	str	r3, [r2, #0]
		  	  break;
 80022c0:	e046      	b.n	8002350 <defThread+0x5b8>
		  		  Report(1, "Read next nand adr:0x%X len:%lu%s",
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <defThread+0x6c8>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b69      	ldr	r3, [pc, #420]	; (800246c <defThread+0x6d4>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	4619      	mov	r1, r3
 80022cc:	4b62      	ldr	r3, [pc, #392]	; (8002458 <defThread+0x6c0>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	460b      	mov	r3, r1
 80022d4:	496a      	ldr	r1, [pc, #424]	; (8002480 <defThread+0x6e8>)
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7ff faf0 	bl	80018bc <Report>
		  		  if (rdBuf) nand_show = 2;
 80022dc:	4b65      	ldr	r3, [pc, #404]	; (8002474 <defThread+0x6dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d037      	beq.n	8002354 <defThread+0x5bc>
 80022e4:	2302      	movs	r3, #2
 80022e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		  	  break;
 80022ea:	e033      	b.n	8002354 <defThread+0x5bc>
		  			  .Page = nand_BlockToPage(nandBlk),
 80022ec:	4b65      	ldr	r3, [pc, #404]	; (8002484 <defThread+0x6ec>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fd3b 	bl	8001d6c <nand_BlockToPage>
 80022f6:	4603      	mov	r3, r0
		  		  NAND_AddressTypeDef addr = {
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	81bb      	strh	r3, [r7, #12]
 80022fc:	2301      	movs	r3, #1
 80022fe:	81fb      	strh	r3, [r7, #14]
 8002300:	4b60      	ldr	r3, [pc, #384]	; (8002484 <defThread+0x6ec>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	b29b      	uxth	r3, r3
 8002306:	823b      	strh	r3, [r7, #16]
		  				    addr.Page, addr.Block);
 8002308:	89bb      	ldrh	r3, [r7, #12]
		  		  Report(1, "Erase nand page:%lu blk:%lu...",
 800230a:	461a      	mov	r2, r3
		  				    addr.Page, addr.Block);
 800230c:	8a3b      	ldrh	r3, [r7, #16]
		  		  Report(1, "Erase nand page:%lu blk:%lu...",
 800230e:	495e      	ldr	r1, [pc, #376]	; (8002488 <defThread+0x6f0>)
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff fad3 	bl	80018bc <Report>
		  		  if (rdBuf) {
 8002316:	4b57      	ldr	r3, [pc, #348]	; (8002474 <defThread+0x6dc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d010      	beq.n	8002340 <defThread+0x5a8>
		  			  if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 800231e:	4b56      	ldr	r3, [pc, #344]	; (8002478 <defThread+0x6e0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f107 020c 	add.w	r2, r7, #12
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f002 f989 	bl	8004640 <HAL_NAND_Erase_Block>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <defThread+0x5a8>
 8002334:	4b51      	ldr	r3, [pc, #324]	; (800247c <defThread+0x6e4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f043 0306 	orr.w	r3, r3, #6
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <defThread+0x6e4>)
 800233e:	6013      	str	r3, [r2, #0]
		  		  Report(0, "%s", eol);
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <defThread+0x6c0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4951      	ldr	r1, [pc, #324]	; (800248c <defThread+0x6f4>)
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff fab7 	bl	80018bc <Report>
		  	  break;
 800234e:	e002      	b.n	8002356 <defThread+0x5be>
		  	  break;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <defThread+0x5be>
		  	  break;
 8002354:	bf00      	nop
		  if (nand_show) {
 8002356:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80a8 	beq.w	80024b0 <defThread+0x718>
			  uint32_t adr = nandAdr;
 8002360:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <defThread+0x6c8>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	663b      	str	r3, [r7, #96]	; 0x60
			  int step = 32;
 8002366:	2320      	movs	r3, #32
 8002368:	63fb      	str	r3, [r7, #60]	; 0x3c
			  uint32_t ind = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	65fb      	str	r3, [r7, #92]	; 0x5c
			  uint32_t max_ind = nandLen;
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <defThread+0x6d4>)
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	65bb      	str	r3, [r7, #88]	; 0x58
			  if (nand_show == 2) {
 8002374:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002378:	2b02      	cmp	r3, #2
 800237a:	d10f      	bne.n	800239c <defThread+0x604>
				  if (readed) {
 800237c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002380:	2b00      	cmp	r3, #0
 8002382:	d009      	beq.n	8002398 <defThread+0x600>
					  ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002384:	4b38      	ldr	r3, [pc, #224]	; (8002468 <defThread+0x6d0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3b01      	subs	r3, #1
 800238a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800238c:	4013      	ands	r3, r2
 800238e:	65fb      	str	r3, [r7, #92]	; 0x5c
					  max_ind = chipConf.PageSize;
 8002390:	4b35      	ldr	r3, [pc, #212]	; (8002468 <defThread+0x6d0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	65bb      	str	r3, [r7, #88]	; 0x58
 8002396:	e001      	b.n	800239c <defThread+0x604>
				  } else ind = max_ind;
 8002398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800239a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (ind < max_ind) {
 800239c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800239e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d279      	bcs.n	8002498 <defThread+0x700>
				  bool done = false;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				  uint32_t sch = nandLen / step;
 80023aa:	4b30      	ldr	r3, [pc, #192]	; (800246c <defThread+0x6d4>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80023b6:	653b      	str	r3, [r7, #80]	; 0x50
				  stx[0] = '\0';
 80023b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ba:	2200      	movs	r2, #0
 80023bc:	701a      	strb	r2, [r3, #0]
				  while (!done) {
 80023be:	e03c      	b.n	800243a <defThread+0x6a2>
					  sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80023c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80023c2:	f7fd ff05 	bl	80001d0 <strlen>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023ca:	4413      	add	r3, r2
 80023cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80023ce:	4930      	ldr	r1, [pc, #192]	; (8002490 <defThread+0x6f8>)
 80023d0:	4618      	mov	r0, r3
 80023d2:	f008 ffd1 	bl	800b378 <siprintf>
					  for (int i = 0; i < step; i++) sprintf(stx+strlen(stx), " %02X", rdBuf[i + ind]);
 80023d6:	2300      	movs	r3, #0
 80023d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023da:	e013      	b.n	8002404 <defThread+0x66c>
 80023dc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80023de:	f7fd fef7 	bl	80001d0 <strlen>
 80023e2:	4602      	mov	r2, r0
 80023e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023e6:	1898      	adds	r0, r3, r2
 80023e8:	4b22      	ldr	r3, [pc, #136]	; (8002474 <defThread+0x6dc>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80023f0:	440b      	add	r3, r1
 80023f2:	4413      	add	r3, r2
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	461a      	mov	r2, r3
 80023f8:	4926      	ldr	r1, [pc, #152]	; (8002494 <defThread+0x6fc>)
 80023fa:	f008 ffbd 	bl	800b378 <siprintf>
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	3301      	adds	r3, #1
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002408:	429a      	cmp	r2, r3
 800240a:	dbe7      	blt.n	80023dc <defThread+0x644>
					  strcat(stx, eol);
 800240c:	4b12      	ldr	r3, [pc, #72]	; (8002458 <defThread+0x6c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4619      	mov	r1, r3
 8002412:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002414:	f008 ffd0 	bl	800b3b8 <strcat>
					  adr += step;
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800241c:	4413      	add	r3, r2
 800241e:	663b      	str	r3, [r7, #96]	; 0x60
					  ind += step;
 8002420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002422:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002424:	4413      	add	r3, r2
 8002426:	65fb      	str	r3, [r7, #92]	; 0x5c
					  sch--;
 8002428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242a:	3b01      	subs	r3, #1
 800242c:	653b      	str	r3, [r7, #80]	; 0x50
					  if (!sch) done = true;
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002430:	2b00      	cmp	r3, #0
 8002432:	d102      	bne.n	800243a <defThread+0x6a2>
 8002434:	2301      	movs	r3, #1
 8002436:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				  while (!done) {
 800243a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800243e:	f083 0301 	eor.w	r3, r3, #1
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1bb      	bne.n	80023c0 <defThread+0x628>
				  Report(0, "%s", stx);
 8002448:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800244a:	4910      	ldr	r1, [pc, #64]	; (800248c <defThread+0x6f4>)
 800244c:	2000      	movs	r0, #0
 800244e:	f7ff fa35 	bl	80018bc <Report>
 8002452:	e02d      	b.n	80024b0 <defThread+0x718>
 8002454:	20000308 	.word	0x20000308
 8002458:	20000004 	.word	0x20000004
 800245c:	0800bee0 	.word	0x0800bee0
 8002460:	20000b2c 	.word	0x20000b2c
 8002464:	20000b28 	.word	0x20000b28
 8002468:	20000b44 	.word	0x20000b44
 800246c:	20000b30 	.word	0x20000b30
 8002470:	0800befc 	.word	0x0800befc
 8002474:	20000b5c 	.word	0x20000b5c
 8002478:	20000034 	.word	0x20000034
 800247c:	2000030c 	.word	0x2000030c
 8002480:	0800bf2c 	.word	0x0800bf2c
 8002484:	20000b34 	.word	0x20000b34
 8002488:	0800bf50 	.word	0x0800bf50
 800248c:	0800bd94 	.word	0x0800bd94
 8002490:	0800bf70 	.word	0x0800bf70
 8002494:	0800bdd4 	.word	0x0800bdd4
				  Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, readed, eol);
 8002498:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800249c:	4a18      	ldr	r2, [pc, #96]	; (8002500 <defThread+0x768>)
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	9201      	str	r2, [sp, #4]
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80024a8:	4916      	ldr	r1, [pc, #88]	; (8002504 <defThread+0x76c>)
 80024aa:	2000      	movs	r0, #0
 80024ac:	f7ff fa06 	bl	80018bc <Report>
	  osDelay(250);
 80024b0:	20fa      	movs	r0, #250	; 0xfa
 80024b2:	f005 fe8b 	bl	80081cc <osDelay>
	  if (check_tmr(tmr)) {
 80024b6:	e5c9      	b.n	800204c <defThread+0x2b4>
  if (rdBuf) free(rdBuf);
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <defThread+0x770>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f008 fdcd 	bl	800b05c <free>
  if (stx) free(stx);
 80024c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <defThread+0x736>
 80024c8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80024ca:	f008 fdc7 	bl	800b05c <free>


  Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80024ce:	4b0f      	ldr	r3, [pc, #60]	; (800250c <defThread+0x774>)
 80024d0:	681c      	ldr	r4, [r3, #0]
 80024d2:	f008 fbaf 	bl	800ac34 <xPortGetFreeHeapSize>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b09      	ldr	r3, [pc, #36]	; (8002500 <defThread+0x768>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	9302      	str	r3, [sp, #8]
 80024de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	9200      	str	r2, [sp, #0]
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <defThread+0x778>)
 80024e8:	4622      	mov	r2, r4
 80024ea:	490a      	ldr	r1, [pc, #40]	; (8002514 <defThread+0x77c>)
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff f9e5 	bl	80018bc <Report>
  osDelay(1000);
 80024f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024f6:	f005 fe69 	bl	80081cc <osDelay>

  NVIC_SystemReset();
 80024fa:	f7fe fb99 	bl	8000c30 <__NVIC_SystemReset>
 80024fe:	bf00      	nop
 8002500:	20000004 	.word	0x20000004
 8002504:	0800bf78 	.word	0x0800bf78
 8002508:	20000b5c 	.word	0x20000b5c
 800250c:	20000000 	.word	0x20000000
 8002510:	0800e0f8 	.word	0x0800e0f8
 8002514:	0800bfa0 	.word	0x0800bfa0

08002518 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a10      	ldr	r2, [pc, #64]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d102      	bne.n	8002530 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800252a:	f000 ff49 	bl	80033c0 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 800252e:	e016      	b.n	800255e <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002538:	d111      	bne.n	800255e <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 800253a:	f7ff f883 	bl	8001644 <get_msCounter>
 800253e:	4602      	mov	r2, r0
 8002540:	460b      	mov	r3, r1
 8002542:	f002 0403 	and.w	r4, r2, #3
 8002546:	2500      	movs	r5, #0
 8002548:	1ee3      	subs	r3, r4, #3
 800254a:	432b      	orrs	r3, r5
 800254c:	d105      	bne.n	800255a <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 800254e:	f7ff f86b 	bl	8001628 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8002552:	2180      	movs	r1, #128	; 0x80
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002556:	f001 fe10 	bl	800417a <HAL_GPIO_TogglePin>
	  inc_msCounter();
 800255a:	f7ff f881 	bl	8001660 <inc_msCounter>
}
 800255e:	bf00      	nop
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40020800 	.word	0x40020800

08002570 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 800258a:	2200      	movs	r2, #0
 800258c:	2104      	movs	r1, #4
 800258e:	480b      	ldr	r0, [pc, #44]	; (80025bc <ST7789_WriteCommand+0x3c>)
 8002590:	f001 fdda 	bl	8004148 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <ST7789_WriteCommand+0x40>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	2396      	movs	r3, #150	; 0x96
 800259a:	1df9      	adds	r1, r7, #7
 800259c:	2201      	movs	r2, #1
 800259e:	f003 fa9c 	bl	8005ada <HAL_SPI_Transmit>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <ST7789_WriteCommand+0x34>
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <ST7789_WriteCommand+0x44>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f043 0305 	orr.w	r3, r3, #5
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <ST7789_WriteCommand+0x44>)
 80025b2:	6013      	str	r3, [r2, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40020000 	.word	0x40020000
 80025c0:	20000028 	.word	0x20000028
 80025c4:	2000030c 	.word	0x2000030c

080025c8 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 80025d2:	2200      	movs	r2, #0
 80025d4:	2104      	movs	r1, #4
 80025d6:	480e      	ldr	r0, [pc, #56]	; (8002610 <ST7789_WriteCommands+0x48>)
 80025d8:	f001 fdb6 	bl	8004148 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <ST7789_WriteCommands+0x4c>)
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	2196      	movs	r1, #150	; 0x96
 80025e6:	460b      	mov	r3, r1
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	6879      	ldr	r1, [r7, #4]
 80025f0:	f003 fa73 	bl	8005ada <HAL_SPI_Transmit>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <ST7789_WriteCommands+0x3e>
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <ST7789_WriteCommands+0x50>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f043 0305 	orr.w	r3, r3, #5
 8002602:	4a05      	ldr	r2, [pc, #20]	; (8002618 <ST7789_WriteCommands+0x50>)
 8002604:	6013      	str	r3, [r2, #0]
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40020000 	.word	0x40020000
 8002614:	20000028 	.word	0x20000028
 8002618:	2000030c 	.word	0x2000030c

0800261c <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 800262a:	2201      	movs	r2, #1
 800262c:	2104      	movs	r1, #4
 800262e:	481e      	ldr	r0, [pc, #120]	; (80026a8 <ST7789_WriteData+0x8c>)
 8002630:	f001 fd8a 	bl	8004148 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8002634:	e028      	b.n	8002688 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800263c:	4293      	cmp	r3, r2
 800263e:	bf28      	it	cs
 8002640:	4613      	movcs	r3, r2
 8002642:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <ST7789_WriteData+0x90>)
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <ST7789_WriteData+0x94>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	89ba      	ldrh	r2, [r7, #12]
 8002650:	6879      	ldr	r1, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f003 fb7e 	bl	8005d54 <HAL_SPI_Transmit_DMA>
 8002658:	4603      	mov	r3, r0
 800265a:	461a      	mov	r2, r3
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	4313      	orrs	r3, r2
 8002660:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002662:	e002      	b.n	800266a <ST7789_WriteData+0x4e>
 8002664:	2001      	movs	r0, #1
 8002666:	f000 fecb 	bl	8003400 <HAL_Delay>
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <ST7789_WriteData+0x90>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	f083 0301 	eor.w	r3, r3, #1
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f5      	bne.n	8002664 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8002678:	89bb      	ldrh	r3, [r7, #12]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002680:	89bb      	ldrh	r3, [r7, #12]
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1d3      	bne.n	8002636 <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <ST7789_WriteData+0x84>
 8002694:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <ST7789_WriteData+0x98>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f043 0305 	orr.w	r3, r3, #5
 800269c:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <ST7789_WriteData+0x98>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	3710      	adds	r7, #16
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40020000 	.word	0x40020000
 80026ac:	20000021 	.word	0x20000021
 80026b0:	20000028 	.word	0x20000028
 80026b4:	2000030c 	.word	0x2000030c

080026b8 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80026c6:	2201      	movs	r2, #1
 80026c8:	2104      	movs	r1, #4
 80026ca:	4814      	ldr	r0, [pc, #80]	; (800271c <ST7789_WriteDataLine+0x64>)
 80026cc:	f001 fd3c 	bl	8004148 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 80026d0:	4b13      	ldr	r3, [pc, #76]	; (8002720 <ST7789_WriteDataLine+0x68>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 80026d6:	4b13      	ldr	r3, [pc, #76]	; (8002724 <ST7789_WriteDataLine+0x6c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	b292      	uxth	r2, r2
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f003 fb37 	bl	8005d54 <HAL_SPI_Transmit_DMA>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80026ea:	e002      	b.n	80026f2 <ST7789_WriteDataLine+0x3a>
 80026ec:	2001      	movs	r0, #1
 80026ee:	f000 fe87 	bl	8003400 <HAL_Delay>
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <ST7789_WriteDataLine+0x68>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1f5      	bne.n	80026ec <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <ST7789_WriteDataLine+0x5a>
 8002706:	4b08      	ldr	r3, [pc, #32]	; (8002728 <ST7789_WriteDataLine+0x70>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f043 0305 	orr.w	r3, r3, #5
 800270e:	4a06      	ldr	r2, [pc, #24]	; (8002728 <ST7789_WriteDataLine+0x70>)
 8002710:	6013      	str	r3, [r2, #0]
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40020000 	.word	0x40020000
 8002720:	20000021 	.word	0x20000021
 8002724:	20000028 	.word	0x20000028
 8002728:	2000030c 	.word	0x2000030c

0800272c <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8002736:	2201      	movs	r2, #1
 8002738:	2104      	movs	r1, #4
 800273a:	480b      	ldr	r0, [pc, #44]	; (8002768 <ST7789_WriteSmallData+0x3c>)
 800273c:	f001 fd04 	bl	8004148 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <ST7789_WriteSmallData+0x40>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	2396      	movs	r3, #150	; 0x96
 8002746:	1df9      	adds	r1, r7, #7
 8002748:	2201      	movs	r2, #1
 800274a:	f003 f9c6 	bl	8005ada <HAL_SPI_Transmit>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <ST7789_WriteSmallData+0x34>
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <ST7789_WriteSmallData+0x44>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f043 0305 	orr.w	r3, r3, #5
 800275c:	4a04      	ldr	r2, [pc, #16]	; (8002770 <ST7789_WriteSmallData+0x44>)
 800275e:	6013      	str	r3, [r2, #0]
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40020000 	.word	0x40020000
 800276c:	20000028 	.word	0x20000028
 8002770:	2000030c 	.word	0x2000030c

08002774 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d003      	beq.n	800278c <ipsOn+0x18>
 8002784:	2029      	movs	r0, #41	; 0x29
 8002786:	f7ff fefb 	bl	8002580 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 800278a:	e002      	b.n	8002792 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 800278c:	2028      	movs	r0, #40	; 0x28
 800278e:	f7ff fef7 	bl	8002580 <ST7789_WriteCommand>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80027a6:	2036      	movs	r0, #54	; 0x36
 80027a8:	f7ff feea 	bl	8002580 <ST7789_WriteCommand>
	switch (m) {
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	2b03      	cmp	r3, #3
 80027b0:	d81a      	bhi.n	80027e8 <ST7789_SetRotation+0x4c>
 80027b2:	a201      	add	r2, pc, #4	; (adr r2, 80027b8 <ST7789_SetRotation+0x1c>)
 80027b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b8:	080027c9 	.word	0x080027c9
 80027bc:	080027d1 	.word	0x080027d1
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027e1 	.word	0x080027e1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80027c8:	20c0      	movs	r0, #192	; 0xc0
 80027ca:	f7ff ffaf 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027ce:	e00c      	b.n	80027ea <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80027d0:	20a0      	movs	r0, #160	; 0xa0
 80027d2:	f7ff ffab 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027d6:	e008      	b.n	80027ea <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80027d8:	2000      	movs	r0, #0
 80027da:	f7ff ffa7 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027de:	e004      	b.n	80027ea <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80027e0:	2060      	movs	r0, #96	; 0x60
 80027e2:	f7ff ffa3 	bl	800272c <ST7789_WriteSmallData>
		break;
 80027e6:	e000      	b.n	80027ea <ST7789_SetRotation+0x4e>
	default:
		break;
 80027e8:	bf00      	nop
	}
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop

080027f4 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4604      	mov	r4, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4623      	mov	r3, r4
 8002804:	80fb      	strh	r3, [r7, #6]
 8002806:	4603      	mov	r3, r0
 8002808:	80bb      	strh	r3, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8002812:	88fb      	ldrh	r3, [r7, #6]
 8002814:	82fb      	strh	r3, [r7, #22]
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800281a:	88bb      	ldrh	r3, [r7, #4]
 800281c:	827b      	strh	r3, [r7, #18]
 800281e:	883b      	ldrh	r3, [r7, #0]
 8002820:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8002822:	202a      	movs	r0, #42	; 0x2a
 8002824:	f7ff feac 	bl	8002580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8002828:	8afb      	ldrh	r3, [r7, #22]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b29b      	uxth	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	733b      	strb	r3, [r7, #12]
 8002832:	8afb      	ldrh	r3, [r7, #22]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	737b      	strb	r3, [r7, #13]
 8002838:	8abb      	ldrh	r3, [r7, #20]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73bb      	strb	r3, [r7, #14]
 8002842:	8abb      	ldrh	r3, [r7, #20]
 8002844:	b2db      	uxtb	r3, r3
 8002846:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	2104      	movs	r1, #4
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fee4 	bl	800261c <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8002854:	202b      	movs	r0, #43	; 0x2b
 8002856:	f7ff fe93 	bl	8002580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800285a:	8a7b      	ldrh	r3, [r7, #18]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	b29b      	uxth	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	723b      	strb	r3, [r7, #8]
 8002864:	8a7b      	ldrh	r3, [r7, #18]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	727b      	strb	r3, [r7, #9]
 800286a:	8a3b      	ldrh	r3, [r7, #16]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29b      	uxth	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	72bb      	strb	r3, [r7, #10]
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800287a:	f107 0308 	add.w	r3, r7, #8
 800287e:	2104      	movs	r1, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fecb 	bl	800261c <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8002886:	202c      	movs	r0, #44	; 0x2c
 8002888:	f7ff fe7a 	bl	8002580 <ST7789_WriteCommand>
}
 800288c:	bf00      	nop
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bd90      	pop	{r4, r7, pc}

08002894 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8002898:	2014      	movs	r0, #20
 800289a:	f000 fdb1 	bl	8003400 <HAL_Delay>
    ST7789_RST_Clr();
 800289e:	2200      	movs	r2, #0
 80028a0:	2102      	movs	r1, #2
 80028a2:	4808      	ldr	r0, [pc, #32]	; (80028c4 <ST7789_Reset+0x30>)
 80028a4:	f001 fc50 	bl	8004148 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 80028a8:	200a      	movs	r0, #10
 80028aa:	f000 fda9 	bl	8003400 <HAL_Delay>
    ST7789_RST_Set();
 80028ae:	2201      	movs	r2, #1
 80028b0:	2102      	movs	r1, #2
 80028b2:	4804      	ldr	r0, [pc, #16]	; (80028c4 <ST7789_Reset+0x30>)
 80028b4:	f001 fc48 	bl	8004148 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80028b8:	2014      	movs	r0, #20
 80028ba:	f000 fda1 	bl	8003400 <HAL_Delay>
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40020000 	.word	0x40020000

080028c8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b08f      	sub	sp, #60	; 0x3c
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80028d2:	203a      	movs	r0, #58	; 0x3a
 80028d4:	f7ff fe54 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80028d8:	2055      	movs	r0, #85	; 0x55
 80028da:	f7ff ff27 	bl	800272c <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80028de:	20b2      	movs	r0, #178	; 0xb2
 80028e0:	f7ff fe4e 	bl	8002580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80028e4:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <ST7789_Init+0x108>)
 80028e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028ee:	6018      	str	r0, [r3, #0]
 80028f0:	3304      	adds	r3, #4
 80028f2:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80028f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028f8:	2105      	movs	r1, #5
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fe8e 	bl	800261c <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8002900:	2002      	movs	r0, #2
 8002902:	f7ff ff4b 	bl	800279c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8002906:	20b7      	movs	r0, #183	; 0xb7
 8002908:	f7ff fe3a 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800290c:	2035      	movs	r0, #53	; 0x35
 800290e:	f7ff ff0d 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8002912:	20bb      	movs	r0, #187	; 0xbb
 8002914:	f7ff fe34 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8002918:	2019      	movs	r0, #25
 800291a:	f7ff ff07 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800291e:	20c0      	movs	r0, #192	; 0xc0
 8002920:	f7ff fe2e 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8002924:	202c      	movs	r0, #44	; 0x2c
 8002926:	f7ff ff01 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 800292a:	20c2      	movs	r0, #194	; 0xc2
 800292c:	f7ff fe28 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8002930:	2001      	movs	r0, #1
 8002932:	f7ff fefb 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8002936:	20ff      	movs	r0, #255	; 0xff
 8002938:	f7ff fef8 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 800293c:	20c3      	movs	r0, #195	; 0xc3
 800293e:	f7ff fe1f 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8002942:	2012      	movs	r0, #18
 8002944:	f7ff fef2 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8002948:	20c4      	movs	r0, #196	; 0xc4
 800294a:	f7ff fe19 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800294e:	2020      	movs	r0, #32
 8002950:	f7ff feec 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8002954:	20c6      	movs	r0, #198	; 0xc6
 8002956:	f7ff fe13 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800295a:	200f      	movs	r0, #15
 800295c:	f7ff fee6 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8002960:	20d0      	movs	r0, #208	; 0xd0
 8002962:	f7ff fe0d 	bl	8002580 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8002966:	20a4      	movs	r0, #164	; 0xa4
 8002968:	f7ff fee0 	bl	800272c <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 800296c:	20a1      	movs	r0, #161	; 0xa1
 800296e:	f7ff fedd 	bl	800272c <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8002972:	20e0      	movs	r0, #224	; 0xe0
 8002974:	f7ff fe04 	bl	8002580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8002978:	4b16      	ldr	r3, [pc, #88]	; (80029d4 <ST7789_Init+0x10c>)
 800297a:	f107 041c 	add.w	r4, r7, #28
 800297e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002980:	c407      	stmia	r4!, {r0, r1, r2}
 8002982:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8002984:	f107 031c 	add.w	r3, r7, #28
 8002988:	210e      	movs	r1, #14
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fe46 	bl	800261c <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8002990:	20e1      	movs	r0, #225	; 0xe1
 8002992:	f7ff fdf5 	bl	8002580 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <ST7789_Init+0x110>)
 8002998:	f107 040c 	add.w	r4, r7, #12
 800299c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800299e:	c407      	stmia	r4!, {r0, r1, r2}
 80029a0:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80029a2:	f107 030c 	add.w	r3, r7, #12
 80029a6:	210e      	movs	r1, #14
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fe37 	bl	800261c <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <ST7789_Init+0x114>)
 80029b0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80029b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029b6:	2104      	movs	r1, #4
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fe05 	bl	80025c8 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f000 f80d 	bl	80029e0 <ST7789_Fill_Color>
}
 80029c6:	bf00      	nop
 80029c8:	373c      	adds	r7, #60	; 0x3c
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd90      	pop	{r4, r7, pc}
 80029ce:	bf00      	nop
 80029d0:	0800bfcc 	.word	0x0800bfcc
 80029d4:	0800bfd4 	.word	0x0800bfd4
 80029d8:	0800bfe4 	.word	0x0800bfe4
 80029dc:	28131121 	.word	0x28131121

080029e0 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b0fc      	sub	sp, #496	; 0x1f0
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4602      	mov	r2, r0
 80029e8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80029ec:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80029f0:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80029f2:	23ef      	movs	r3, #239	; 0xef
 80029f4:	22ef      	movs	r2, #239	; 0xef
 80029f6:	2100      	movs	r1, #0
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7ff fefb 	bl	80027f4 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002a0a:	e024      	b.n	8002a56 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8002a0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002a10:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002a14:	881b      	ldrh	r3, [r3, #0]
 8002a16:	0a1b      	lsrs	r3, r3, #8
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8002a20:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8002a24:	881b      	ldrh	r3, [r3, #0]
 8002a26:	021b      	lsls	r3, r3, #8
 8002a28:	b21b      	sxth	r3, r3
 8002a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	4313      	orrs	r3, r2
 8002a32:	b219      	sxth	r1, r3
 8002a34:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002a38:	f107 020c 	add.w	r2, r7, #12
 8002a3c:	4413      	add	r3, r2
 8002a3e:	b28a      	uxth	r2, r1
 8002a40:	801a      	strh	r2, [r3, #0]
		i += 2;
 8002a42:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8002a46:	3302      	adds	r3, #2
 8002a48:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8002a4c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002a50:	3301      	adds	r3, #1
 8002a52:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002a56:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002a5a:	2bef      	cmp	r3, #239	; 0xef
 8002a5c:	d9d6      	bls.n	8002a0c <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002a64:	e00b      	b.n	8002a7e <ST7789_Fill_Color+0x9e>
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fe22 	bl	80026b8 <ST7789_WriteDataLine>
 8002a74:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002a78:	3301      	adds	r3, #1
 8002a7a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8002a7e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8002a82:	2bef      	cmp	r3, #239	; 0xef
 8002a84:	d9ef      	bls.n	8002a66 <ST7789_Fill_Color+0x86>

//#endif
}
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8002a92:	b590      	push	{r4, r7, lr}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4604      	mov	r4, r0
 8002a9a:	4608      	mov	r0, r1
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	4623      	mov	r3, r4
 8002aa2:	80fb      	strh	r3, [r7, #6]
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	80bb      	strh	r3, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
 8002aac:	4613      	mov	r3, r2
 8002aae:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	2bef      	cmp	r3, #239	; 0xef
 8002ab4:	d82b      	bhi.n	8002b0e <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002ab6:	883b      	ldrh	r3, [r7, #0]
 8002ab8:	2bef      	cmp	r3, #239	; 0xef
 8002aba:	d828      	bhi.n	8002b0e <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8002abc:	8c3b      	ldrh	r3, [r7, #32]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	723b      	strb	r3, [r7, #8]
 8002ac6:	8c3b      	ldrh	r3, [r7, #32]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8002acc:	883b      	ldrh	r3, [r7, #0]
 8002ace:	887a      	ldrh	r2, [r7, #2]
 8002ad0:	88b9      	ldrh	r1, [r7, #4]
 8002ad2:	88f8      	ldrh	r0, [r7, #6]
 8002ad4:	f7ff fe8e 	bl	80027f4 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8002ad8:	88bb      	ldrh	r3, [r7, #4]
 8002ada:	81fb      	strh	r3, [r7, #14]
 8002adc:	e012      	b.n	8002b04 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	81bb      	strh	r3, [r7, #12]
 8002ae2:	e008      	b.n	8002af6 <ST7789_Fill+0x64>
 8002ae4:	f107 0308 	add.w	r3, r7, #8
 8002ae8:	2102      	movs	r1, #2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fd96 	bl	800261c <ST7789_WriteData>
 8002af0:	89bb      	ldrh	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	81bb      	strh	r3, [r7, #12]
 8002af6:	89ba      	ldrh	r2, [r7, #12]
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d9f2      	bls.n	8002ae4 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	3301      	adds	r3, #1
 8002b02:	81fb      	strh	r3, [r7, #14]
 8002b04:	89fa      	ldrh	r2, [r7, #14]
 8002b06:	883b      	ldrh	r3, [r7, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d9e8      	bls.n	8002ade <ST7789_Fill+0x4c>
 8002b0c:	e000      	b.n	8002b10 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8002b0e:	bf00      	nop
	}
}
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd90      	pop	{r4, r7, pc}

08002b16 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002b16:	b082      	sub	sp, #8
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b20:	4603      	mov	r3, r0
 8002b22:	80fb      	strh	r3, [r7, #6]
 8002b24:	460b      	mov	r3, r1
 8002b26:	80bb      	strh	r3, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8002b2c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	4413      	add	r3, r2
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29c      	uxth	r4, r3
 8002b3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	88bb      	ldrh	r3, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	88b9      	ldrh	r1, [r7, #4]
 8002b4e:	88f8      	ldrh	r0, [r7, #6]
 8002b50:	4622      	mov	r2, r4
 8002b52:	f7ff fe4f 	bl	80027f4 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8002b56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	733b      	strb	r3, [r7, #12]
 8002b60:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8002b66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	b29b      	uxth	r3, r3
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	723b      	strb	r3, [r7, #8]
 8002b72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	e02f      	b.n	8002be4 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8002b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	3b20      	subs	r3, #32
 8002b8a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002b8e:	fb01 f303 	mul.w	r3, r1, r3
 8002b92:	4619      	mov	r1, r3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	440b      	add	r3, r1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	4413      	add	r3, r2
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
 8002ba4:	e015      	b.n	8002bd2 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <ST7789_WriteChar+0xa8>
				uk = cdata;
 8002bb6:	f107 030c 	add.w	r3, r7, #12
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	e002      	b.n	8002bc4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8002bbe:	f107 0308 	add.w	r3, r7, #8
 8002bc2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8002bc4:	2102      	movs	r1, #2
 8002bc6:	6978      	ldr	r0, [r7, #20]
 8002bc8:	f7ff fd28 	bl	800261c <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d3e3      	bcc.n	8002ba6 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002be8:	461a      	mov	r2, r3
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d3c9      	bcc.n	8002b84 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	3724      	adds	r7, #36	; 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002bfc:	b002      	add	sp, #8
 8002bfe:	4770      	bx	lr

08002c00 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8002c00:	b082      	sub	sp, #8
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b086      	sub	sp, #24
 8002c06:	af04      	add	r7, sp, #16
 8002c08:	603a      	str	r2, [r7, #0]
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	80fb      	strh	r3, [r7, #6]
 8002c10:	460b      	mov	r3, r1
 8002c12:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d03f      	beq.n	8002c9a <ST7789_WriteString+0x9a>

	while (*str) {
 8002c1a:	e039      	b.n	8002c90 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	7d3a      	ldrb	r2, [r7, #20]
 8002c20:	4413      	add	r3, r2
 8002c22:	2bef      	cmp	r3, #239	; 0xef
 8002c24:	dd13      	ble.n	8002c4e <ST7789_WriteString+0x4e>
			x = 0;
 8002c26:	2300      	movs	r3, #0
 8002c28:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002c2a:	7d7b      	ldrb	r3, [r7, #21]
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	88bb      	ldrh	r3, [r7, #4]
 8002c30:	4413      	add	r3, r2
 8002c32:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8002c34:	88bb      	ldrh	r3, [r7, #4]
 8002c36:	7d7a      	ldrb	r2, [r7, #21]
 8002c38:	4413      	add	r3, r2
 8002c3a:	2bef      	cmp	r3, #239	; 0xef
 8002c3c:	dc2f      	bgt.n	8002c9e <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d103      	bne.n	8002c4e <ST7789_WriteString+0x4e>
				str++;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	603b      	str	r3, [r7, #0]
				continue;
 8002c4c:	e020      	b.n	8002c90 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b0a      	cmp	r3, #10
 8002c54:	d012      	beq.n	8002c7c <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	781a      	ldrb	r2, [r3, #0]
 8002c5a:	88b9      	ldrh	r1, [r7, #4]
 8002c5c:	88f8      	ldrh	r0, [r7, #6]
 8002c5e:	8c3b      	ldrh	r3, [r7, #32]
 8002c60:	9302      	str	r3, [sp, #8]
 8002c62:	8bbb      	ldrh	r3, [r7, #28]
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f7ff ff53 	bl	8002b16 <ST7789_WriteChar>
			x += font.width;
 8002c70:	7d3b      	ldrb	r3, [r7, #20]
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	88fb      	ldrh	r3, [r7, #6]
 8002c76:	4413      	add	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
 8002c7a:	e006      	b.n	8002c8a <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8002c80:	7d7b      	ldrb	r3, [r7, #21]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1c1      	bne.n	8002c1c <ST7789_WriteString+0x1c>
 8002c98:	e002      	b.n	8002ca0 <ST7789_WriteString+0xa0>
	if (!str) return;
 8002c9a:	bf00      	nop
 8002c9c:	e000      	b.n	8002ca0 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 8002c9e:	bf00      	nop
	}
}
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca8:	b002      	add	sp, #8
 8002caa:	4770      	bx	lr

08002cac <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b0a4      	sub	sp, #144	; 0x90
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	227c      	movs	r2, #124	; 0x7c
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f008 f9df 	bl	800b088 <memset>

	memset(st, 0x20, 127);
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	227f      	movs	r2, #127	; 0x7f
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f008 f9d8 	bl	800b088 <memset>
	int8_t k = strlen(str);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fa79 	bl	80001d0 <strlen>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8002ce4:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	da25      	bge.n	8002d3a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	0fda      	lsrs	r2, r3, #31
 8002cf8:	4413      	add	r3, r2
 8002cfa:	105b      	asrs	r3, r3, #1
 8002cfc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8002d00:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8002d04:	f107 020c 	add.w	r2, r7, #12
 8002d08:	4413      	add	r3, r2
 8002d0a:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f008 f9ab 	bl	800b06c <memcpy>
		st[k + n*2 + 1] = '\0';
 8002d16:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8002d1a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	4413      	add	r3, r2
 8002d22:	3301      	adds	r3, #1
 8002d24:	3390      	adds	r3, #144	; 0x90
 8002d26:	443b      	add	r3, r7
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4619      	mov	r1, r3
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f008 fb5b 	bl	800b3f0 <strcpy>
	}

	return str;
 8002d3a:	687b      	ldr	r3, [r7, #4]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3790      	adds	r7, #144	; 0x90
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_MspInit+0x54>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <HAL_MspInit+0x54>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <HAL_MspInit+0x54>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_MspInit+0x54>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a0a      	ldr	r2, [pc, #40]	; (8002d98 <HAL_MspInit+0x54>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b08      	ldr	r3, [pc, #32]	; (8002d98 <HAL_MspInit+0x54>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	210f      	movs	r1, #15
 8002d86:	f06f 0001 	mvn.w	r0, #1
 8002d8a:	f000 fc15 	bl	80035b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40023800 	.word	0x40023800

08002d9c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da4:	f107 0308 	add.w	r3, r7, #8
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	605a      	str	r2, [r3, #4]
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <HAL_RTC_MspInit+0x4c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d110      	bne.n	8002dde <HAL_RTC_MspInit+0x42>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <HAL_RTC_MspInit+0x50>)
 8002dc2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc4:	f107 0308 	add.w	r3, r7, #8
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f9e9 	bl	80051a0 <HAL_RCCEx_PeriphCLKConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8002dd4:	f7ff fbcc 	bl	8002570 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <HAL_RTC_MspInit+0x54>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40002800 	.word	0x40002800
 8002dec:	00190300 	.word	0x00190300
 8002df0:	42470e3c 	.word	0x42470e3c

08002df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a39      	ldr	r2, [pc, #228]	; (8002ef8 <HAL_SPI_MspInit+0x104>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d16b      	bne.n	8002eee <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	4b38      	ldr	r3, [pc, #224]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a37      	ldr	r2, [pc, #220]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	4b31      	ldr	r3, [pc, #196]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a30      	ldr	r2, [pc, #192]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b2e      	ldr	r3, [pc, #184]	; (8002efc <HAL_SPI_MspInit+0x108>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8002e4e:	23a0      	movs	r3, #160	; 0xa0
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e5e:	2305      	movs	r3, #5
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	4825      	ldr	r0, [pc, #148]	; (8002f00 <HAL_SPI_MspInit+0x10c>)
 8002e6a:	f000 ffd1 	bl	8003e10 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <HAL_SPI_MspInit+0x114>)
 8002e72:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002e74:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e76:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e7a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e8e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e90:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e96:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002ea4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ea8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002eaa:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002ec2:	4810      	ldr	r0, [pc, #64]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002ec4:	f000 fba2 	bl	800360c <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8002ece:	f7ff fb4f 	bl	8002570 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002ed6:	649a      	str	r2, [r3, #72]	; 0x48
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_SPI_MspInit+0x110>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2103      	movs	r1, #3
 8002ee2:	2023      	movs	r0, #35	; 0x23
 8002ee4:	f000 fb68 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002ee8:	2023      	movs	r0, #35	; 0x23
 8002eea:	f000 fb81 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002eee:	bf00      	nop
 8002ef0:	3728      	adds	r7, #40	; 0x28
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40013000 	.word	0x40013000
 8002efc:	40023800 	.word	0x40023800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	20000174 	.word	0x20000174
 8002f08:	40026458 	.word	0x40026458

08002f0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1c:	d115      	bne.n	8002f4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	60fb      	str	r3, [r7, #12]
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	4a0b      	ldr	r2, [pc, #44]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2e:	4b09      	ldr	r3, [pc, #36]	; (8002f54 <HAL_TIM_Base_MspInit+0x48>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	201c      	movs	r0, #28
 8002f40:	f000 fb3a 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f44:	201c      	movs	r0, #28
 8002f46:	f000 fb53 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b08a      	sub	sp, #40	; 0x28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 0314 	add.w	r3, r7, #20
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a35      	ldr	r2, [pc, #212]	; (800304c <HAL_UART_MspInit+0xf4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d163      	bne.n	8003042 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a33      	ldr	r2, [pc, #204]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b2d      	ldr	r3, [pc, #180]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a2c      	ldr	r2, [pc, #176]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002fa0:	f043 0302 	orr.w	r3, r3, #2
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <HAL_UART_MspInit+0xf8>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8002fb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4821      	ldr	r0, [pc, #132]	; (8003054 <HAL_UART_MspInit+0xfc>)
 8002fd0:	f000 ff1e 	bl	8003e10 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002fd4:	4b20      	ldr	r3, [pc, #128]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002fd6:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_UART_MspInit+0x104>)
 8002fd8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002fda:	4b1f      	ldr	r3, [pc, #124]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002fdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fe0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002fe4:	2240      	movs	r2, #64	; 0x40
 8002fe6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ffc:	4b16      	ldr	r3, [pc, #88]	; (8003058 <HAL_UART_MspInit+0x100>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_UART_MspInit+0x100>)
 8003004:	2200      	movs	r2, #0
 8003006:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <HAL_UART_MspInit+0x100>)
 800300a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800300e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_UART_MspInit+0x100>)
 8003012:	2200      	movs	r2, #0
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003016:	4810      	ldr	r0, [pc, #64]	; (8003058 <HAL_UART_MspInit+0x100>)
 8003018:	f000 faf8 	bl	800360c <HAL_DMA_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003022:	f7ff faa5 	bl	8002570 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <HAL_UART_MspInit+0x100>)
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
 800302c:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HAL_UART_MspInit+0x100>)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 4, 0);
 8003032:	2200      	movs	r2, #0
 8003034:	2104      	movs	r1, #4
 8003036:	2027      	movs	r0, #39	; 0x27
 8003038:	f000 fabe 	bl	80035b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800303c:	2027      	movs	r0, #39	; 0x27
 800303e:	f000 fad7 	bl	80035f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003042:	bf00      	nop
 8003044:	3728      	adds	r7, #40	; 0x28
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40004800 	.word	0x40004800
 8003050:	40023800 	.word	0x40023800
 8003054:	40020400 	.word	0x40020400
 8003058:	20000260 	.word	0x20000260
 800305c:	40026058 	.word	0x40026058

08003060 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003066:	1d3b      	adds	r3, r7, #4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <HAL_FSMC_MspInit+0x98>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d139      	bne.n	80030f0 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 800307c:	4b1e      	ldr	r3, [pc, #120]	; (80030f8 <HAL_FSMC_MspInit+0x98>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4b1d      	ldr	r3, [pc, #116]	; (80030fc <HAL_FSMC_MspInit+0x9c>)
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	4a1c      	ldr	r2, [pc, #112]	; (80030fc <HAL_FSMC_MspInit+0x9c>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	6393      	str	r3, [r2, #56]	; 0x38
 8003092:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_FSMC_MspInit+0x9c>)
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800309e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80030a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030a4:	2302      	movs	r3, #2
 80030a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ac:	2303      	movs	r3, #3
 80030ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80030b0:	230c      	movs	r3, #12
 80030b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4811      	ldr	r0, [pc, #68]	; (8003100 <HAL_FSMC_MspInit+0xa0>)
 80030ba:	f000 fea9 	bl	8003e10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
 80030be:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80030c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80030d0:	230c      	movs	r3, #12
 80030d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030d4:	1d3b      	adds	r3, r7, #4
 80030d6:	4619      	mov	r1, r3
 80030d8:	480a      	ldr	r0, [pc, #40]	; (8003104 <HAL_FSMC_MspInit+0xa4>)
 80030da:	f000 fe99 	bl	8003e10 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	2105      	movs	r1, #5
 80030e2:	2030      	movs	r0, #48	; 0x30
 80030e4:	f000 fa68 	bl	80035b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80030e8:	2030      	movs	r0, #48	; 0x30
 80030ea:	f000 fa81 	bl	80035f0 <HAL_NVIC_EnableIRQ>
 80030ee:	e000      	b.n	80030f2 <HAL_FSMC_MspInit+0x92>
    return;
 80030f0:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	20000b60 	.word	0x20000b60
 80030fc:	40023800 	.word	0x40023800
 8003100:	40021000 	.word	0x40021000
 8003104:	40020c00 	.word	0x40020c00

08003108 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8003110:	f7ff ffa6 	bl	8003060 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08c      	sub	sp, #48	; 0x30
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003128:	2300      	movs	r3, #0
 800312a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800312c:	2200      	movs	r2, #0
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	2019      	movs	r0, #25
 8003132:	f000 fa41 	bl	80035b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003136:	2019      	movs	r0, #25
 8003138:	f000 fa5a 	bl	80035f0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_InitTick+0xa4>)
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	4a1e      	ldr	r2, [pc, #120]	; (80031c0 <HAL_InitTick+0xa4>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6453      	str	r3, [r2, #68]	; 0x44
 800314c:	4b1c      	ldr	r3, [pc, #112]	; (80031c0 <HAL_InitTick+0xa4>)
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003158:	f107 0210 	add.w	r2, r7, #16
 800315c:	f107 0314 	add.w	r3, r7, #20
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f001 ffea 	bl	800513c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003168:	f001 ffd4 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 800316c:	4603      	mov	r3, r0
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_InitTick+0xa8>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	0c9b      	lsrs	r3, r3, #18
 800317c:	3b01      	subs	r3, #1
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_InitTick+0xac>)
 8003182:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_InitTick+0xb0>)
 8003184:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003186:	4b10      	ldr	r3, [pc, #64]	; (80031c8 <HAL_InitTick+0xac>)
 8003188:	f240 32e7 	movw	r2, #999	; 0x3e7
 800318c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800318e:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_InitTick+0xac>)
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <HAL_InitTick+0xac>)
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_InitTick+0xac>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031a0:	4809      	ldr	r0, [pc, #36]	; (80031c8 <HAL_InitTick+0xac>)
 80031a2:	f003 f901 	bl	80063a8 <HAL_TIM_Base_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031ac:	4806      	ldr	r0, [pc, #24]	; (80031c8 <HAL_InitTick+0xac>)
 80031ae:	f003 f94b 	bl	8006448 <HAL_TIM_Base_Start_IT>
 80031b2:	4603      	mov	r3, r0
 80031b4:	e000      	b.n	80031b8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3730      	adds	r7, #48	; 0x30
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	431bde83 	.word	0x431bde83
 80031c8:	20000b64 	.word	0x20000b64
 80031cc:	40010000 	.word	0x40010000

080031d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031de:	b480      	push	{r7}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031e2:	e7fe      	b.n	80031e2 <HardFault_Handler+0x4>

080031e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e8:	e7fe      	b.n	80031e8 <MemManage_Handler+0x4>

080031ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031ea:	b480      	push	{r7}
 80031ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ee:	e7fe      	b.n	80031ee <BusFault_Handler+0x4>

080031f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031f4:	e7fe      	b.n	80031f4 <UsageFault_Handler+0x4>

080031f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031f6:	b480      	push	{r7}
 80031f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003208:	4802      	ldr	r0, [pc, #8]	; (8003214 <DMA1_Stream3_IRQHandler+0x10>)
 800320a:	f000 fb97 	bl	800393c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000260 	.word	0x20000260

08003218 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800321c:	4802      	ldr	r0, [pc, #8]	; (8003228 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800321e:	f003 f983 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	20000b64 	.word	0x20000b64

0800322c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003230:	4802      	ldr	r0, [pc, #8]	; (800323c <TIM2_IRQHandler+0x10>)
 8003232:	f003 f979 	bl	8006528 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	200001d4 	.word	0x200001d4

08003240 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003244:	4802      	ldr	r0, [pc, #8]	; (8003250 <SPI1_IRQHandler+0x10>)
 8003246:	f002 fe3b 	bl	8005ec0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000011c 	.word	0x2000011c

08003254 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <USART3_IRQHandler+0x10>)
 800325a:	f003 fe23 	bl	8006ea4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000021c 	.word	0x2000021c

08003268 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <FSMC_IRQHandler+0x10>)
 800326e:	f000 ffec 	bl	800424a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200002c0 	.word	0x200002c0

0800327c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <DMA2_Stream3_IRQHandler+0x10>)
 8003282:	f000 fb5b 	bl	800393c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000174 	.word	0x20000174

08003290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <_sbrk+0x5c>)
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <_sbrk+0x60>)
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <_sbrk+0x64>)
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <_sbrk+0x68>)
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c0:	f007 fdf4 	bl	800aeac <__errno>
 80032c4:	4603      	mov	r3, r0
 80032c6:	220c      	movs	r2, #12
 80032c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ce:	e009      	b.n	80032e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <_sbrk+0x64>)
 80032e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20020000 	.word	0x20020000
 80032f0:	00000800 	.word	0x00000800
 80032f4:	20000bac 	.word	0x20000bac
 80032f8:	200059d8 	.word	0x200059d8

080032fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <SystemInit+0x28>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	4a07      	ldr	r2, [pc, #28]	; (8003324 <SystemInit+0x28>)
 8003308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003310:	4b04      	ldr	r3, [pc, #16]	; (8003324 <SystemInit+0x28>)
 8003312:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003316:	609a      	str	r2, [r3, #8]
#endif
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003360 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800332c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800332e:	e003      	b.n	8003338 <LoopCopyDataInit>

08003330 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003332:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003334:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003336:	3104      	adds	r1, #4

08003338 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003338:	480b      	ldr	r0, [pc, #44]	; (8003368 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800333c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800333e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003340:	d3f6      	bcc.n	8003330 <CopyDataInit>
  ldr  r2, =_sbss
 8003342:	4a0b      	ldr	r2, [pc, #44]	; (8003370 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003344:	e002      	b.n	800334c <LoopFillZerobss>

08003346 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003346:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003348:	f842 3b04 	str.w	r3, [r2], #4

0800334c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800334e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003350:	d3f9      	bcc.n	8003346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003352:	f7ff ffd3 	bl	80032fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003356:	f007 fe5b 	bl	800b010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800335a:	f7fd fc7f 	bl	8000c5c <main>
  bx  lr    
 800335e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003360:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003364:	0800e2c8 	.word	0x0800e2c8
  ldr  r0, =_sdata
 8003368:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800336c:	200000dc 	.word	0x200000dc
  ldr  r2, =_sbss
 8003370:	200000e0 	.word	0x200000e0
  ldr  r3, = _ebss
 8003374:	200059d4 	.word	0x200059d4

08003378 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003378:	e7fe      	b.n	8003378 <ADC_IRQHandler>
	...

0800337c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_Init+0x40>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a0d      	ldr	r2, [pc, #52]	; (80033bc <HAL_Init+0x40>)
 8003386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_Init+0x40>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <HAL_Init+0x40>)
 8003392:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003396:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003398:	4b08      	ldr	r3, [pc, #32]	; (80033bc <HAL_Init+0x40>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a07      	ldr	r2, [pc, #28]	; (80033bc <HAL_Init+0x40>)
 800339e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033a4:	2003      	movs	r0, #3
 80033a6:	f000 f8fc 	bl	80035a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033aa:	200f      	movs	r0, #15
 80033ac:	f7ff feb6 	bl	800311c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033b0:	f7ff fcc8 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40023c00 	.word	0x40023c00

080033c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_IncTick+0x20>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_IncTick+0x24>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4413      	add	r3, r2
 80033d0:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <HAL_IncTick+0x24>)
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000060 	.word	0x20000060
 80033e4:	20000bb0 	.word	0x20000bb0

080033e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return uwTick;
 80033ec:	4b03      	ldr	r3, [pc, #12]	; (80033fc <HAL_GetTick+0x14>)
 80033ee:	681b      	ldr	r3, [r3, #0]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
 80033fa:	bf00      	nop
 80033fc:	20000bb0 	.word	0x20000bb0

08003400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003408:	f7ff ffee 	bl	80033e8 <HAL_GetTick>
 800340c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003418:	d005      	beq.n	8003426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800341a:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_Delay+0x44>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4413      	add	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003426:	bf00      	nop
 8003428:	f7ff ffde 	bl	80033e8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	429a      	cmp	r2, r3
 8003436:	d8f7      	bhi.n	8003428 <HAL_Delay+0x28>
  {
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20000060 	.word	0x20000060

08003448 <__NVIC_SetPriorityGrouping>:
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f003 0307 	and.w	r3, r3, #7
 8003456:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003464:	4013      	ands	r3, r2
 8003466:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003470:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003478:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800347a:	4a04      	ldr	r2, [pc, #16]	; (800348c <__NVIC_SetPriorityGrouping+0x44>)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	60d3      	str	r3, [r2, #12]
}
 8003480:	bf00      	nop
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <__NVIC_GetPriorityGrouping>:
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003494:	4b04      	ldr	r3, [pc, #16]	; (80034a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	f003 0307 	and.w	r3, r3, #7
}
 800349e:	4618      	mov	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <__NVIC_EnableIRQ>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	db0b      	blt.n	80034d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	4907      	ldr	r1, [pc, #28]	; (80034e4 <__NVIC_EnableIRQ+0x38>)
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2001      	movs	r0, #1
 80034ce:	fa00 f202 	lsl.w	r2, r0, r2
 80034d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <__NVIC_SetPriority>:
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	6039      	str	r1, [r7, #0]
 80034f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	db0a      	blt.n	8003512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	490c      	ldr	r1, [pc, #48]	; (8003534 <__NVIC_SetPriority+0x4c>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	0112      	lsls	r2, r2, #4
 8003508:	b2d2      	uxtb	r2, r2
 800350a:	440b      	add	r3, r1
 800350c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003510:	e00a      	b.n	8003528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4908      	ldr	r1, [pc, #32]	; (8003538 <__NVIC_SetPriority+0x50>)
 8003518:	79fb      	ldrb	r3, [r7, #7]
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	3b04      	subs	r3, #4
 8003520:	0112      	lsls	r2, r2, #4
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	440b      	add	r3, r1
 8003526:	761a      	strb	r2, [r3, #24]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000e100 	.word	0xe000e100
 8003538:	e000ed00 	.word	0xe000ed00

0800353c <NVIC_EncodePriority>:
{
 800353c:	b480      	push	{r7}
 800353e:	b089      	sub	sp, #36	; 0x24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f1c3 0307 	rsb	r3, r3, #7
 8003556:	2b04      	cmp	r3, #4
 8003558:	bf28      	it	cs
 800355a:	2304      	movcs	r3, #4
 800355c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	3304      	adds	r3, #4
 8003562:	2b06      	cmp	r3, #6
 8003564:	d902      	bls.n	800356c <NVIC_EncodePriority+0x30>
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3b03      	subs	r3, #3
 800356a:	e000      	b.n	800356e <NVIC_EncodePriority+0x32>
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43da      	mvns	r2, r3
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	401a      	ands	r2, r3
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	fa01 f303 	lsl.w	r3, r1, r3
 800358e:	43d9      	mvns	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003594:	4313      	orrs	r3, r2
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	; 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ff4c 	bl	8003448 <__NVIC_SetPriorityGrouping>
}
 80035b0:	bf00      	nop
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035ca:	f7ff ff61 	bl	8003490 <__NVIC_GetPriorityGrouping>
 80035ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	68b9      	ldr	r1, [r7, #8]
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7ff ffb1 	bl	800353c <NVIC_EncodePriority>
 80035da:	4602      	mov	r2, r0
 80035dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff80 	bl	80034e8 <__NVIC_SetPriority>
}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff54 	bl	80034ac <__NVIC_EnableIRQ>
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff fee6 	bl	80033e8 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e099      	b.n	800375c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0201 	bic.w	r2, r2, #1
 8003646:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003648:	e00f      	b.n	800366a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800364a:	f7ff fecd 	bl	80033e8 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b05      	cmp	r3, #5
 8003656:	d908      	bls.n	800366a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2203      	movs	r2, #3
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e078      	b.n	800375c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e8      	bne.n	800364a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4b38      	ldr	r3, [pc, #224]	; (8003764 <HAL_DMA_Init+0x158>)
 8003684:	4013      	ands	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036cc:	4313      	orrs	r3, r2
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0307 	bic.w	r3, r3, #7
 80036ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d117      	bne.n	800372e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4313      	orrs	r3, r2
 8003706:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb01 	bl	8003d18 <DMA_CheckFifoParam>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800372a:	2301      	movs	r3, #1
 800372c:	e016      	b.n	800375c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fab8 	bl	8003cac <DMA_CalcBaseAndBitshift>
 800373c:	4603      	mov	r3, r0
 800373e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	223f      	movs	r2, #63	; 0x3f
 8003746:	409a      	lsls	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	f010803f 	.word	0xf010803f

08003768 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
 8003774:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_DMA_Start_IT+0x26>
 800378a:	2302      	movs	r3, #2
 800378c:	e040      	b.n	8003810 <HAL_DMA_Start_IT+0xa8>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d12f      	bne.n	8003802 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2202      	movs	r2, #2
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	68b9      	ldr	r1, [r7, #8]
 80037b6:	68f8      	ldr	r0, [r7, #12]
 80037b8:	f000 fa4a 	bl	8003c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c0:	223f      	movs	r2, #63	; 0x3f
 80037c2:	409a      	lsls	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0216 	orr.w	r2, r2, #22
 80037d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0208 	orr.w	r2, r2, #8
 80037ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	e005      	b.n	800380e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800380a:	2302      	movs	r3, #2
 800380c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003824:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003826:	f7ff fddf 	bl	80033e8 <HAL_GetTick>
 800382a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d008      	beq.n	800384a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2280      	movs	r2, #128	; 0x80
 800383c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e052      	b.n	80038f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0216 	bic.w	r2, r2, #22
 8003858:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003868:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <HAL_DMA_Abort+0x62>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003876:	2b00      	cmp	r3, #0
 8003878:	d007      	beq.n	800388a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0208 	bic.w	r2, r2, #8
 8003888:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0201 	bic.w	r2, r2, #1
 8003898:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800389a:	e013      	b.n	80038c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800389c:	f7ff fda4 	bl	80033e8 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b05      	cmp	r3, #5
 80038a8:	d90c      	bls.n	80038c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2203      	movs	r2, #3
 80038b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e015      	b.n	80038f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e4      	bne.n	800389c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	223f      	movs	r2, #63	; 0x3f
 80038d8:	409a      	lsls	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e00c      	b.n	8003930 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2205      	movs	r2, #5
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003948:	4b8e      	ldr	r3, [pc, #568]	; (8003b84 <HAL_DMA_IRQHandler+0x248>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a8e      	ldr	r2, [pc, #568]	; (8003b88 <HAL_DMA_IRQHandler+0x24c>)
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	0a9b      	lsrs	r3, r3, #10
 8003954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2208      	movs	r2, #8
 8003968:	409a      	lsls	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01a      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0204 	bic.w	r2, r2, #4
 800398e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003994:	2208      	movs	r2, #8
 8003996:	409a      	lsls	r2, r3
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a0:	f043 0201 	orr.w	r2, r3, #1
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ac:	2201      	movs	r2, #1
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d012      	beq.n	80039de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2201      	movs	r2, #1
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d6:	f043 0202 	orr.w	r2, r3, #2
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e2:	2204      	movs	r2, #4
 80039e4:	409a      	lsls	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a00:	2204      	movs	r2, #4
 8003a02:	409a      	lsls	r2, r3
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0204 	orr.w	r2, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	2210      	movs	r2, #16
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d043      	beq.n	8003aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03c      	beq.n	8003aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	2210      	movs	r2, #16
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d018      	beq.n	8003a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d108      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d024      	beq.n	8003aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4798      	blx	r3
 8003a6a:	e01f      	b.n	8003aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01b      	beq.n	8003aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
 8003a7c:	e016      	b.n	8003aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0208 	bic.w	r2, r2, #8
 8003a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab0:	2220      	movs	r2, #32
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 808f 	beq.w	8003bdc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0310 	and.w	r3, r3, #16
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 8087 	beq.w	8003bdc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b05      	cmp	r3, #5
 8003ae4:	d136      	bne.n	8003b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 0216 	bic.w	r2, r2, #22
 8003af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695a      	ldr	r2, [r3, #20]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <HAL_DMA_IRQHandler+0x1da>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d007      	beq.n	8003b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0208 	bic.w	r2, r2, #8
 8003b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	223f      	movs	r2, #63	; 0x3f
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d07e      	beq.n	8003c48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	4798      	blx	r3
        }
        return;
 8003b52:	e079      	b.n	8003c48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d01d      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10d      	bne.n	8003b8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d031      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
 8003b80:	e02c      	b.n	8003bdc <HAL_DMA_IRQHandler+0x2a0>
 8003b82:	bf00      	nop
 8003b84:	20000058 	.word	0x20000058
 8003b88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d023      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	4798      	blx	r3
 8003b9c:	e01e      	b.n	8003bdc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10f      	bne.n	8003bcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0210 	bic.w	r2, r2, #16
 8003bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d032      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2205      	movs	r2, #5
 8003bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0201 	bic.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d307      	bcc.n	8003c24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0301 	and.w	r3, r3, #1
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f2      	bne.n	8003c08 <HAL_DMA_IRQHandler+0x2cc>
 8003c22:	e000      	b.n	8003c26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d005      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	4798      	blx	r3
 8003c46:	e000      	b.n	8003c4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c48:	bf00      	nop
    }
  }
}
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2b40      	cmp	r3, #64	; 0x40
 8003c7c:	d108      	bne.n	8003c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c8e:	e007      	b.n	8003ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	3b10      	subs	r3, #16
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <DMA_CalcBaseAndBitshift+0x64>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	091b      	lsrs	r3, r3, #4
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cc6:	4a13      	ldr	r2, [pc, #76]	; (8003d14 <DMA_CalcBaseAndBitshift+0x68>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d909      	bls.n	8003cee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ce2:	f023 0303 	bic.w	r3, r3, #3
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	659a      	str	r2, [r3, #88]	; 0x58
 8003cec:	e007      	b.n	8003cfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cf6:	f023 0303 	bic.w	r3, r3, #3
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	aaaaaaab 	.word	0xaaaaaaab
 8003d14:	0800e11c 	.word	0x0800e11c

08003d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d11f      	bne.n	8003d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d856      	bhi.n	8003de6 <DMA_CheckFifoParam+0xce>
 8003d38:	a201      	add	r2, pc, #4	; (adr r2, 8003d40 <DMA_CheckFifoParam+0x28>)
 8003d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3e:	bf00      	nop
 8003d40:	08003d51 	.word	0x08003d51
 8003d44:	08003d63 	.word	0x08003d63
 8003d48:	08003d51 	.word	0x08003d51
 8003d4c:	08003de7 	.word	0x08003de7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d046      	beq.n	8003dea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d60:	e043      	b.n	8003dea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d6a:	d140      	bne.n	8003dee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d70:	e03d      	b.n	8003dee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7a:	d121      	bne.n	8003dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d837      	bhi.n	8003df2 <DMA_CheckFifoParam+0xda>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <DMA_CheckFifoParam+0x70>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003d9f 	.word	0x08003d9f
 8003d90:	08003d99 	.word	0x08003d99
 8003d94:	08003db1 	.word	0x08003db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d9c:	e030      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d025      	beq.n	8003df6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dae:	e022      	b.n	8003df6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db8:	d11f      	bne.n	8003dfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dbe:	e01c      	b.n	8003dfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d903      	bls.n	8003dce <DMA_CheckFifoParam+0xb6>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d003      	beq.n	8003dd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dcc:	e018      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd2:	e015      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00e      	beq.n	8003dfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e00b      	b.n	8003dfe <DMA_CheckFifoParam+0xe6>
      break;
 8003de6:	bf00      	nop
 8003de8:	e00a      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dea:	bf00      	nop
 8003dec:	e008      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dee:	bf00      	nop
 8003df0:	e006      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003df2:	bf00      	nop
 8003df4:	e004      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003df6:	bf00      	nop
 8003df8:	e002      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dfa:	bf00      	nop
 8003dfc:	e000      	b.n	8003e00 <DMA_CheckFifoParam+0xe8>
      break;
 8003dfe:	bf00      	nop
    }
  } 
  
  return status; 
 8003e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop

08003e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b089      	sub	sp, #36	; 0x24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	e16b      	b.n	8004104 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	f040 815a 	bne.w	80040fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d005      	beq.n	8003e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d130      	bne.n	8003ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e98:	2201      	movs	r2, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 0201 	and.w	r2, r3, #1
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d017      	beq.n	8003f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	2203      	movs	r2, #3
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d123      	bne.n	8003f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	08da      	lsrs	r2, r3, #3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3208      	adds	r2, #8
 8003f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	08da      	lsrs	r2, r3, #3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	69b9      	ldr	r1, [r7, #24]
 8003f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	2203      	movs	r2, #3
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	43db      	mvns	r3, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 0203 	and.w	r2, r3, #3
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80b4 	beq.w	80040fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
 8003f9a:	4b60      	ldr	r3, [pc, #384]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	4a5f      	ldr	r2, [pc, #380]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa6:	4b5d      	ldr	r3, [pc, #372]	; (800411c <HAL_GPIO_Init+0x30c>)
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003fb2:	4a5b      	ldr	r2, [pc, #364]	; (8004120 <HAL_GPIO_Init+0x310>)
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	089b      	lsrs	r3, r3, #2
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_GPIO_Init+0x314>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <HAL_GPIO_Init+0x226>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a51      	ldr	r2, [pc, #324]	; (8004128 <HAL_GPIO_Init+0x318>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d025      	beq.n	8004032 <HAL_GPIO_Init+0x222>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a50      	ldr	r2, [pc, #320]	; (800412c <HAL_GPIO_Init+0x31c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <HAL_GPIO_Init+0x21e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a4f      	ldr	r2, [pc, #316]	; (8004130 <HAL_GPIO_Init+0x320>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x21a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a4e      	ldr	r2, [pc, #312]	; (8004134 <HAL_GPIO_Init+0x324>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x216>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4d      	ldr	r2, [pc, #308]	; (8004138 <HAL_GPIO_Init+0x328>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x212>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4c      	ldr	r2, [pc, #304]	; (800413c <HAL_GPIO_Init+0x32c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x20e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4b      	ldr	r2, [pc, #300]	; (8004140 <HAL_GPIO_Init+0x330>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x20a>
 8004016:	2307      	movs	r3, #7
 8004018:	e00e      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800401a:	2308      	movs	r3, #8
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800401e:	2306      	movs	r3, #6
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x228>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x228>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004048:	4935      	ldr	r1, [pc, #212]	; (8004120 <HAL_GPIO_Init+0x310>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004056:	4b3b      	ldr	r3, [pc, #236]	; (8004144 <HAL_GPIO_Init+0x334>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800407a:	4a32      	ldr	r2, [pc, #200]	; (8004144 <HAL_GPIO_Init+0x334>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_GPIO_Init+0x334>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a4:	4a27      	ldr	r2, [pc, #156]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040aa:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ce:	4a1d      	ldr	r2, [pc, #116]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d4:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f8:	4a12      	ldr	r2, [pc, #72]	; (8004144 <HAL_GPIO_Init+0x334>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f ae90 	bls.w	8003e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	bf00      	nop
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800
 8004120:	40013800 	.word	0x40013800
 8004124:	40020000 	.word	0x40020000
 8004128:	40020400 	.word	0x40020400
 800412c:	40020800 	.word	0x40020800
 8004130:	40020c00 	.word	0x40020c00
 8004134:	40021000 	.word	0x40021000
 8004138:	40021400 	.word	0x40021400
 800413c:	40021800 	.word	0x40021800
 8004140:	40021c00 	.word	0x40021c00
 8004144:	40013c00 	.word	0x40013c00

08004148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	807b      	strh	r3, [r7, #2]
 8004154:	4613      	mov	r3, r2
 8004156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004158:	787b      	ldrb	r3, [r7, #1]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004164:	e003      	b.n	800416e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004166:	887b      	ldrh	r3, [r7, #2]
 8004168:	041a      	lsls	r2, r3, #16
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	619a      	str	r2, [r3, #24]
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800417a:	b480      	push	{r7}
 800417c:	b085      	sub	sp, #20
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800418c:	887a      	ldrh	r2, [r7, #2]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4013      	ands	r3, r2
 8004192:	041a      	lsls	r2, r3, #16
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	43d9      	mvns	r1, r3
 8004198:	887b      	ldrh	r3, [r7, #2]
 800419a:	400b      	ands	r3, r1
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_NAND_Init>:
  * @param  ComSpace_Timing pointer to Common space timing structure
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing, FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if(hnand == NULL)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_NAND_Init+0x16>
  {
     return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e03e      	b.n	8004242 <HAL_NAND_Init+0x94>
  }

  if(hnand->State == HAL_NAND_STATE_RESET)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7fe ff95 	bl	8003108 <HAL_NAND_MspInit>
#endif
  }

  /* Initialize NAND control Interface */
  FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f003 fe1f 	bl	8007e2c <FSMC_NAND_Init>
  
  /* Initialize NAND common space timing Interface */  
  FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	461a      	mov	r2, r3
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	f003 fe59 	bl	8007eb0 <FSMC_NAND_CommonSpace_Timing_Init>
  
  /* Initialize NAND attribute space timing Interface */  
  FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	461a      	mov	r2, r3
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	f003 fe87 	bl	8007f1c <FSMC_NAND_AttributeSpace_Timing_Init>
  
  /* Enable the NAND device */
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d108      	bne.n	8004228 <HAL_NAND_Init+0x7a>
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0204 	orr.w	r2, r2, #4
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	e007      	b.n	8004238 <HAL_NAND_Init+0x8a>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6a1a      	ldr	r2, [r3, #32]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0204 	orr.w	r2, r2, #4
 8004236:	621a      	str	r2, [r3, #32]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
*/
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b082      	sub	sp, #8
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b10      	cmp	r3, #16
 8004258:	d10a      	bne.n	8004270 <HAL_NAND_IRQHandler+0x26>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b01      	cmp	r3, #1
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e009      	b.n	8004284 <HAL_NAND_IRQHandler+0x3a>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	bf0c      	ite	eq
 800427e:	2301      	moveq	r3, #1
 8004280:	2300      	movne	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d017      	beq.n	80042b8 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fd fd41 	bl	8001d10 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Rising edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b10      	cmp	r3, #16
 8004294:	d108      	bne.n	80042a8 <HAL_NAND_IRQHandler+0x5e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e007      	b.n	80042b8 <HAL_NAND_IRQHandler+0x6e>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0201 	bic.w	r2, r2, #1
 80042b6:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt Level flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d10a      	bne.n	80042d6 <HAL_NAND_IRQHandler+0x8c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	e009      	b.n	80042ea <HAL_NAND_IRQHandler+0xa0>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d017      	beq.n	800431e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fd0e 	bl	8001d10 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Level pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b10      	cmp	r3, #16
 80042fa:	d108      	bne.n	800430e <HAL_NAND_IRQHandler+0xc4>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0202 	bic.w	r2, r2, #2
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	e007      	b.n	800431e <HAL_NAND_IRQHandler+0xd4>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0202 	bic.w	r2, r2, #2
 800431c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Check NAND interrupt Falling edge flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d10a      	bne.n	800433c <HAL_NAND_IRQHandler+0xf2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b04      	cmp	r3, #4
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	e009      	b.n	8004350 <HAL_NAND_IRQHandler+0x106>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b04      	cmp	r3, #4
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d017      	beq.n	8004384 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fd fcdb 	bl	8001d10 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt Falling edge pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b10      	cmp	r3, #16
 8004360:	d108      	bne.n	8004374 <HAL_NAND_IRQHandler+0x12a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 0204 	bic.w	r2, r2, #4
 8004370:	605a      	str	r2, [r3, #4]
 8004372:	e007      	b.n	8004384 <HAL_NAND_IRQHandler+0x13a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0204 	bic.w	r2, r2, #4
 8004382:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* Check NAND interrupt FIFO empty flag */
  if(__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b10      	cmp	r3, #16
 800438a:	d10a      	bne.n	80043a2 <HAL_NAND_IRQHandler+0x158>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b40      	cmp	r3, #64	; 0x40
 8004398:	bf0c      	ite	eq
 800439a:	2301      	moveq	r3, #1
 800439c:	2300      	movne	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e009      	b.n	80043b6 <HAL_NAND_IRQHandler+0x16c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b40      	cmp	r3, #64	; 0x40
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fd fca8 	bl	8001d10 <HAL_NAND_ITCallback>
#endif

    /* Clear NAND interrupt FIFO empty pending bit */
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b10      	cmp	r3, #16
 80043c6:	d108      	bne.n	80043da <HAL_NAND_IRQHandler+0x190>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d6:	605a      	str	r2, [r3, #4]
  }
}
 80043d8:	e007      	b.n	80043ea <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NAND_Read_Page_8b>:
  * @param  pBuffer  pointer to destination read buffer
  * @param  NumPageToRead  number of pages to read from block 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer, uint32_t NumPageToRead)
{   
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b08a      	sub	sp, #40	; 0x28
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]
  __IO uint32_t index  = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
  uint32_t deviceaddress = 0U, size = 0U, numPagesRead = 0U, nandaddress = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
 800440c:	2300      	movs	r3, #0
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	2300      	movs	r3, #0
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	2300      	movs	r3, #0
 8004416:	61fb      	str	r3, [r7, #28]
  
  /* Process Locked */
  __HAL_LOCK(hnand); 
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <HAL_NAND_Read_Page_8b+0x34>
 8004422:	2302      	movs	r3, #2
 8004424:	e108      	b.n	8004638 <HAL_NAND_Read_Page_8b+0x246>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d101      	bne.n	800443e <HAL_NAND_Read_Page_8b+0x4c>
  {
     return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
 800443c:	e0fc      	b.n	8004638 <HAL_NAND_Read_Page_8b+0x246>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b10      	cmp	r3, #16
 8004444:	d103      	bne.n	800444e <HAL_NAND_Read_Page_8b+0x5c>
  {
    deviceaddress = NAND_DEVICE1;
 8004446:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e002      	b.n	8004454 <HAL_NAND_Read_Page_8b+0x62>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 800444e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004452:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* NAND raw address calculation */
  nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	4619      	mov	r1, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	889b      	ldrh	r3, [r3, #4]
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	885b      	ldrh	r3, [r3, #2]
 800446c:	4618      	mov	r0, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	fb00 f303 	mul.w	r3, r0, r3
 8004476:	4413      	add	r3, r2
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800447c:	fb02 f303 	mul.w	r3, r2, r3
 8004480:	440b      	add	r3, r1
 8004482:	61fb      	str	r3, [r7, #28]

  /* Page(s) read loop */  
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004484:	e0c2      	b.n	800460c <HAL_NAND_Read_Page_8b+0x21a>
  {
    /* update the buffer size */
    size = (hnand->Config.PageSize) + ((hnand->Config.PageSize) * numPagesRead);
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	3301      	adds	r3, #1
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800448e:	fb02 f303 	mul.w	r3, r2, r3
 8004492:	617b      	str	r3, [r7, #20]
    
    /* Send read page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	2200      	movs	r2, #0
 800449c:	701a      	strb	r2, [r3, #0]
   
    /* Cards with page size <= 512 bytes */
    if((hnand->Config.PageSize) <= 512U)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a6:	d835      	bhi.n	8004514 <HAL_NAND_Read_Page_8b+0x122>
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044b0:	fb02 f303 	mul.w	r3, r2, r3
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d212      	bcs.n	80044e0 <HAL_NAND_Read_Page_8b+0xee>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	b2d2      	uxtb	r2, r2
 80044ce:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	0a1a      	lsrs	r2, r3, #8
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e058      	b.n	8004592 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	0a1a      	lsrs	r2, r3, #8
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	0c1a      	lsrs	r2, r3, #16
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800450e:	b2d2      	uxtb	r2, r2
 8004510:	701a      	strb	r2, [r3, #0]
 8004512:	e03e      	b.n	8004592 <HAL_NAND_Read_Page_8b+0x1a0>
      }
    }
    else /* (hnand->Config.PageSize) > 512 */
    {
      if (((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) <= 65535U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004524:	d217      	bcs.n	8004556 <HAL_NAND_Read_Page_8b+0x164>
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	b2d2      	uxtb	r2, r2
 8004544:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	0a1a      	lsrs	r2, r3, #8
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	701a      	strb	r2, [r3, #0]
 8004554:	e01d      	b.n	8004592 <HAL_NAND_Read_Page_8b+0x1a0>
      }
      else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
      {
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00;
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004566:	2200      	movs	r2, #0
 8004568:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	0a1a      	lsrs	r2, r3, #8
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004580:	b2d2      	uxtb	r2, r2
 8004582:	701a      	strb	r2, [r3, #0]
        *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	0c1a      	lsrs	r2, r3, #16
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]
      }
    }
  
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	2230      	movs	r2, #48	; 0x30
 800459a:	701a      	strb	r2, [r3, #0]
      
    /* Check if an extra command is needed for reading pages  */
    if(hnand->Config.ExtraCommandEnable == ENABLE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d125      	bne.n	80045f2 <HAL_NAND_Read_Page_8b+0x200>
    {
      /* Get tick */
      tickstart = HAL_GetTick();
 80045a6:	f7fe ff1f 	bl	80033e8 <HAL_GetTick>
 80045aa:	61b8      	str	r0, [r7, #24]
      
      /* Read status until NAND is ready */
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80045ac:	e009      	b.n	80045c2 <HAL_NAND_Read_Page_8b+0x1d0>
      {
        if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 80045ae:	f7fe ff1b 	bl	80033e8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045bc:	d901      	bls.n	80045c2 <HAL_NAND_Read_Page_8b+0x1d0>
        {
          return HAL_TIMEOUT; 
 80045be:	2303      	movs	r3, #3
 80045c0:	e03a      	b.n	8004638 <HAL_NAND_Read_Page_8b+0x246>
      while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f8e3 	bl	800478e <HAL_NAND_Read_Status>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d1ef      	bne.n	80045ae <HAL_NAND_Read_Page_8b+0x1bc>
        }
      }
      
      /* Go back to read mode */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80045d8:	f3bf 8f4f 	dsb	sy
}
 80045dc:	bf00      	nop
      __DSB();
    }
    
    /* Get Data into Buffer */    
    for(; index < size; index++)
 80045de:	e008      	b.n	80045f2 <HAL_NAND_Read_Page_8b+0x200>
    {
      *(uint8_t *)pBuffer++ = *(uint8_t *)deviceaddress;
 80045e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	6079      	str	r1, [r7, #4]
 80045e8:	7812      	ldrb	r2, [r2, #0]
 80045ea:	701a      	strb	r2, [r3, #0]
    for(; index < size; index++)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	3301      	adds	r3, #1
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d8f2      	bhi.n	80045e0 <HAL_NAND_Read_Page_8b+0x1ee>
    }
    
    /* Increment read pages number */
    numPagesRead++;
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	3301      	adds	r3, #1
 80045fe:	623b      	str	r3, [r7, #32]
    
    /* Decrement pages to read */
    NumPageToRead--;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	3b01      	subs	r3, #1
 8004604:	603b      	str	r3, [r7, #0]
    
    /* Increment the NAND address */
    nandaddress = (uint32_t)(nandaddress + 1U);
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3301      	adds	r3, #1
 800460a:	61fb      	str	r3, [r7, #28]
  while((NumPageToRead != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d009      	beq.n	8004626 <HAL_NAND_Read_Page_8b+0x234>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	69fa      	ldr	r2, [r7, #28]
 8004620:	429a      	cmp	r2, r3
 8004622:	f4ff af30 	bcc.w	8004486 <HAL_NAND_Read_Page_8b+0x94>
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2201      	movs	r2, #1
 800462a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process unlocked */
  __HAL_UNLOCK(hnand);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(hnand);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d101      	bne.n	8004660 <HAL_NAND_Erase_Block+0x20>
 800465c:	2302      	movs	r3, #2
 800465e:	e092      	b.n	8004786 <HAL_NAND_Erase_Block+0x146>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2020 	strb.w	r2, [r3, #32]
  
  /* Check the NAND controller state */
  if(hnand->State == HAL_NAND_STATE_BUSY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d101      	bne.n	8004678 <HAL_NAND_Erase_Block+0x38>
  {
     return HAL_BUSY;
 8004674:	2302      	movs	r3, #2
 8004676:	e086      	b.n	8004786 <HAL_NAND_Erase_Block+0x146>
  }
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b10      	cmp	r3, #16
 800467e:	d103      	bne.n	8004688 <HAL_NAND_Erase_Block+0x48>
  {
    deviceaddress = NAND_DEVICE1;
 8004680:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e002      	b.n	800468e <HAL_NAND_Erase_Block+0x4e>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 8004688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800468c:	60fb      	str	r3, [r7, #12]
  }
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_BUSY;  
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Send Erase block command sequence */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469c:	2260      	movs	r2, #96	; 0x60
 800469e:	701a      	strb	r2, [r3, #0]

  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	889b      	ldrh	r3, [r3, #4]
 80046aa:	4619      	mov	r1, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	885b      	ldrh	r3, [r3, #2]
 80046b0:	4618      	mov	r0, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	fb00 f303 	mul.w	r3, r0, r3
 80046ba:	440b      	add	r3, r1
 80046bc:	b2d9      	uxtb	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	fb11 f303 	smulbb	r3, r1, r3
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80046d0:	4413      	add	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	700b      	strb	r3, [r1, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	889b      	ldrh	r3, [r3, #4]
 80046e0:	461a      	mov	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	885b      	ldrh	r3, [r3, #2]
 80046e6:	4618      	mov	r0, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	fb00 f303 	mul.w	r3, r0, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	440b      	add	r3, r1
 80046fc:	0a1a      	lsrs	r2, r3, #8
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	889b      	ldrh	r3, [r3, #4]
 8004712:	461a      	mov	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	885b      	ldrh	r3, [r3, #2]
 8004718:	4618      	mov	r0, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	fb00 f303 	mul.w	r3, r0, r3
 8004722:	4413      	add	r3, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004728:	fb02 f303 	mul.w	r3, r2, r3
 800472c:	440b      	add	r3, r1
 800472e:	0c1a      	lsrs	r2, r3, #16
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
    
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1; 
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004740:	22d0      	movs	r2, #208	; 0xd0
 8004742:	701a      	strb	r2, [r3, #0]
  
  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800474c:	f7fe fe4c 	bl	80033e8 <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]
  
  /* Read status until NAND is ready */
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004752:	e00d      	b.n	8004770 <HAL_NAND_Erase_Block+0x130>
  {
    if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT)
 8004754:	f7fe fe48 	bl	80033e8 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004762:	d905      	bls.n	8004770 <HAL_NAND_Erase_Block+0x130>
    {
      /* Process unlocked */
      __HAL_UNLOCK(hnand);    
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2020 	strb.w	r2, [r3, #32]
  
      return HAL_TIMEOUT; 
 800476c:	2303      	movs	r3, #3
 800476e:	e00a      	b.n	8004786 <HAL_NAND_Erase_Block+0x146>
  while(HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 f80c 	bl	800478e <HAL_NAND_Read_Status>
 8004776:	4603      	mov	r3, r0
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d1eb      	bne.n	8004754 <HAL_NAND_Erase_Block+0x114>
    } 
  }    
 
  /* Process unlocked */
  __HAL_UNLOCK(hnand);    
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;  
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800478e:	b480      	push	{r7}
 8004790:	b085      	sub	sp, #20
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  uint32_t data = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	60bb      	str	r3, [r7, #8]
  uint32_t deviceaddress = 0U;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
  
  /* Identify the device address */
  if(hnand->Init.NandBank == FMC_NAND_BANK2)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d103      	bne.n	80047ae <HAL_NAND_Read_Status+0x20>
  {
    deviceaddress = NAND_DEVICE1;
 80047a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e002      	b.n	80047b4 <HAL_NAND_Read_Status+0x26>
  }
  else
  {
    deviceaddress = NAND_DEVICE2;
 80047ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047b2:	60fb      	str	r3, [r7, #12]
  } 

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	2270      	movs	r2, #112	; 0x70
 80047bc:	701a      	strb	r2, [r3, #0]
  
  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if((data & NAND_ERROR) == NAND_ERROR)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_NAND_Read_Status+0x46>
  {
    return NAND_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <HAL_NAND_Read_Status+0x56>
  } 
  else if((data & NAND_READY) == NAND_READY)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_NAND_Read_Status+0x54>
  {
    return NAND_READY;
 80047de:	2340      	movs	r3, #64	; 0x40
 80047e0:	e000      	b.n	80047e4 <HAL_NAND_Read_Status+0x56>
  }

  return NAND_BUSY; 
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80047fe:	b2db      	uxtb	r3, r3
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e267      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d075      	beq.n	8004916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482a:	4b88      	ldr	r3, [pc, #544]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b04      	cmp	r3, #4
 8004834:	d00c      	beq.n	8004850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4b85      	ldr	r3, [pc, #532]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d112      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004842:	4b82      	ldr	r3, [pc, #520]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484e:	d10b      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05b      	beq.n	8004914 <HAL_RCC_OscConfig+0x108>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d157      	bne.n	8004914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e242      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d106      	bne.n	8004880 <HAL_RCC_OscConfig+0x74>
 8004872:	4b76      	ldr	r3, [pc, #472]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a75      	ldr	r2, [pc, #468]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x98>
 800488a:	4b70      	ldr	r3, [pc, #448]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6f      	ldr	r2, [pc, #444]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b6d      	ldr	r3, [pc, #436]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6c      	ldr	r2, [pc, #432]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 80048a4:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a68      	ldr	r2, [pc, #416]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fe fd90 	bl	80033e8 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fe fd8c 	bl	80033e8 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e207      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b5b      	ldr	r3, [pc, #364]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xc0>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fe fd7c 	bl	80033e8 <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fe fd78 	bl	80033e8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1f3      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b51      	ldr	r3, [pc, #324]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0xe8>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004922:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493a:	4b44      	ldr	r3, [pc, #272]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1c7      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e03a      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <HAL_RCC_OscConfig+0x244>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fe fd31 	bl	80033e8 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498a:	f7fe fd2d 	bl	80033e8 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1a8      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4925      	ldr	r1, [pc, #148]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x244>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fe fd10 	bl	80033e8 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fe fd0c 	bl	80033e8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e187      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d036      	beq.n	8004a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCC_OscConfig+0x248>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fe fcf0 	bl	80033e8 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fe fcec 	bl	80033e8 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e167      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x200>
 8004a2a:	e01b      	b.n	8004a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x248>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fe fcd9 	bl	80033e8 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a38:	e00e      	b.n	8004a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3a:	f7fe fcd5 	bl	80033e8 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d907      	bls.n	8004a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e150      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470000 	.word	0x42470000
 8004a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b88      	ldr	r3, [pc, #544]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ea      	bne.n	8004a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8097 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
 8004a92:	4b7a      	ldr	r3, [pc, #488]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa2:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d118      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aae:	4b74      	ldr	r3, [pc, #464]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a73      	ldr	r2, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aba:	f7fe fc95 	bl	80033e8 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac2:	f7fe fc91 	bl	80033e8 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e10c      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2ea>
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a63      	ldr	r2, [pc, #396]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	e01c      	b.n	8004b30 <HAL_RCC_OscConfig+0x324>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x30c>
 8004afe:	4b5f      	ldr	r3, [pc, #380]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	4b5c      	ldr	r3, [pc, #368]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	4a5b      	ldr	r2, [pc, #364]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6713      	str	r3, [r2, #112]	; 0x70
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0x324>
 8004b18:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a57      	ldr	r2, [pc, #348]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	4a54      	ldr	r2, [pc, #336]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 0304 	bic.w	r3, r3, #4
 8004b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fe fc56 	bl	80033e8 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b40:	f7fe fc52 	bl	80033e8 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0cb      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0ee      	beq.n	8004b40 <HAL_RCC_OscConfig+0x334>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b64:	f7fe fc40 	bl	80033e8 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fe fc3c 	bl	80033e8 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0b5      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b82:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ee      	bne.n	8004b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a1 	beq.w	8004cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004baa:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d05c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d141      	bne.n	8004c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fe fc10 	bl	80033e8 <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fe fc0c 	bl	80033e8 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e087      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	3b01      	subs	r3, #1
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	491b      	ldr	r1, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fe fbe5 	bl	80033e8 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c22:	f7fe fbe1 	bl	80033e8 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e05c      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x416>
 8004c40:	e054      	b.n	8004cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fe fbce 	bl	80033e8 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fe fbca 	bl	80033e8 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e045      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x444>
 8004c6e:	e03d      	b.n	8004cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e038      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x4ec>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d121      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cc      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b68      	ldr	r3, [pc, #416]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a58      	ldr	r2, [pc, #352]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e067      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4934      	ldr	r1, [pc, #208]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fe fafc 	bl	80033e8 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fe faf8 	bl	80033e8 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20c      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f821 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	490a      	ldr	r1, [pc, #40]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	5ccb      	ldrb	r3, [r1, r3]
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe f93a 	bl	800311c <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	0800e104 	.word	0x0800e104
 8004ec0:	20000058 	.word	0x20000058
 8004ec4:	2000005c 	.word	0x2000005c

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b094      	sub	sp, #80	; 0x50
 8004ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	647b      	str	r3, [r7, #68]	; 0x44
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ed8:	2300      	movs	r3, #0
 8004eda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ee0:	4b79      	ldr	r3, [pc, #484]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d00d      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x40>
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	f200 80e1 	bhi.w	80050b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x34>
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004efa:	e0db      	b.n	80050b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_GetSysClockFreq+0x204>)
 8004efe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f00:	e0db      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f02:	4b73      	ldr	r3, [pc, #460]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f04:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f06:	e0d8      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f08:	4b6f      	ldr	r3, [pc, #444]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f12:	4b6d      	ldr	r3, [pc, #436]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d063      	beq.n	8004fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1e:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	2200      	movs	r2, #0
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f30:	633b      	str	r3, [r7, #48]	; 0x30
 8004f32:	2300      	movs	r3, #0
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
 8004f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	462b      	mov	r3, r5
 8004f3e:	f04f 0000 	mov.w	r0, #0
 8004f42:	f04f 0100 	mov.w	r1, #0
 8004f46:	0159      	lsls	r1, r3, #5
 8004f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f4c:	0150      	lsls	r0, r2, #5
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4621      	mov	r1, r4
 8004f54:	1a51      	subs	r1, r2, r1
 8004f56:	6139      	str	r1, [r7, #16]
 8004f58:	4629      	mov	r1, r5
 8004f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f6c:	4659      	mov	r1, fp
 8004f6e:	018b      	lsls	r3, r1, #6
 8004f70:	4651      	mov	r1, sl
 8004f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f76:	4651      	mov	r1, sl
 8004f78:	018a      	lsls	r2, r1, #6
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8004f80:	4659      	mov	r1, fp
 8004f82:	eb63 0901 	sbc.w	r9, r3, r1
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f9a:	4690      	mov	r8, r2
 8004f9c:	4699      	mov	r9, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	eb18 0303 	adds.w	r3, r8, r3
 8004fa4:	60bb      	str	r3, [r7, #8]
 8004fa6:	462b      	mov	r3, r5
 8004fa8:	eb49 0303 	adc.w	r3, r9, r3
 8004fac:	60fb      	str	r3, [r7, #12]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fba:	4629      	mov	r1, r5
 8004fbc:	024b      	lsls	r3, r1, #9
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	024a      	lsls	r2, r1, #9
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fce:	2200      	movs	r2, #0
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fd2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004fd8:	f7fb fca8 	bl	800092c <__aeabi_uldivmod>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	460b      	mov	r3, r1
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fe4:	e058      	b.n	8005098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fe6:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	099b      	lsrs	r3, r3, #6
 8004fec:	2200      	movs	r2, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005000:	4642      	mov	r2, r8
 8005002:	464b      	mov	r3, r9
 8005004:	f04f 0000 	mov.w	r0, #0
 8005008:	f04f 0100 	mov.w	r1, #0
 800500c:	0159      	lsls	r1, r3, #5
 800500e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005012:	0150      	lsls	r0, r2, #5
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4641      	mov	r1, r8
 800501a:	ebb2 0a01 	subs.w	sl, r2, r1
 800501e:	4649      	mov	r1, r9
 8005020:	eb63 0b01 	sbc.w	fp, r3, r1
 8005024:	f04f 0200 	mov.w	r2, #0
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005038:	ebb2 040a 	subs.w	r4, r2, sl
 800503c:	eb63 050b 	sbc.w	r5, r3, fp
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	f04f 0300 	mov.w	r3, #0
 8005048:	00eb      	lsls	r3, r5, #3
 800504a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800504e:	00e2      	lsls	r2, r4, #3
 8005050:	4614      	mov	r4, r2
 8005052:	461d      	mov	r5, r3
 8005054:	4643      	mov	r3, r8
 8005056:	18e3      	adds	r3, r4, r3
 8005058:	603b      	str	r3, [r7, #0]
 800505a:	464b      	mov	r3, r9
 800505c:	eb45 0303 	adc.w	r3, r5, r3
 8005060:	607b      	str	r3, [r7, #4]
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800506e:	4629      	mov	r1, r5
 8005070:	028b      	lsls	r3, r1, #10
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005078:	4621      	mov	r1, r4
 800507a:	028a      	lsls	r2, r1, #10
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005082:	2200      	movs	r2, #0
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	61fa      	str	r2, [r7, #28]
 8005088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800508c:	f7fb fc4e 	bl	800092c <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005098:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	0c1b      	lsrs	r3, r3, #16
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	3301      	adds	r3, #1
 80050a4:	005b      	lsls	r3, r3, #1
 80050a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b2:	e002      	b.n	80050ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050b4:	4b05      	ldr	r3, [pc, #20]	; (80050cc <HAL_RCC_GetSysClockFreq+0x204>)
 80050b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3750      	adds	r7, #80	; 0x50
 80050c0:	46bd      	mov	sp, r7
 80050c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050c6:	bf00      	nop
 80050c8:	40023800 	.word	0x40023800
 80050cc:	00f42400 	.word	0x00f42400
 80050d0:	007a1200 	.word	0x007a1200

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000058 	.word	0x20000058

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0a9b      	lsrs	r3, r3, #10
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800e114 	.word	0x0800e114

08005114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005118:	f7ff ffdc 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0b5b      	lsrs	r3, r3, #13
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4903      	ldr	r1, [pc, #12]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40023800 	.word	0x40023800
 8005138:	0800e114 	.word	0x0800e114

0800513c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	220f      	movs	r2, #15
 800514a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800514c:	4b12      	ldr	r3, [pc, #72]	; (8005198 <HAL_RCC_GetClockConfig+0x5c>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 0203 	and.w	r2, r3, #3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005158:	4b0f      	ldr	r3, [pc, #60]	; (8005198 <HAL_RCC_GetClockConfig+0x5c>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005164:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <HAL_RCC_GetClockConfig+0x5c>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005170:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_GetClockConfig+0x5c>)
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	08db      	lsrs	r3, r3, #3
 8005176:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800517e:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_RCC_GetClockConfig+0x60>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0207 	and.w	r2, r3, #7
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	601a      	str	r2, [r3, #0]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40023800 	.word	0x40023800
 800519c:	40023c00 	.word	0x40023c00

080051a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d105      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d035      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051c8:	4b62      	ldr	r3, [pc, #392]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ce:	f7fe f90b 	bl	80033e8 <HAL_GetTick>
 80051d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051d6:	f7fe f907 	bl	80033e8 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e0b0      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051e8:	4b5b      	ldr	r3, [pc, #364]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	019a      	lsls	r2, r3, #6
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	071b      	lsls	r3, r3, #28
 8005200:	4955      	ldr	r1, [pc, #340]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005208:	4b52      	ldr	r3, [pc, #328]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800520a:	2201      	movs	r2, #1
 800520c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800520e:	f7fe f8eb 	bl	80033e8 <HAL_GetTick>
 8005212:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005214:	e008      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005216:	f7fe f8e7 	bl	80033e8 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	2b02      	cmp	r3, #2
 8005222:	d901      	bls.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e090      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005228:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0f0      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 8083 	beq.w	8005348 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
 8005246:	4b44      	ldr	r3, [pc, #272]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	4a43      	ldr	r2, [pc, #268]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800524c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005250:	6413      	str	r3, [r2, #64]	; 0x40
 8005252:	4b41      	ldr	r3, [pc, #260]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800525e:	4b3f      	ldr	r3, [pc, #252]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a3e      	ldr	r2, [pc, #248]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005268:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800526a:	f7fe f8bd 	bl	80033e8 <HAL_GetTick>
 800526e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005272:	f7fe f8b9 	bl	80033e8 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e062      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005284:	4b35      	ldr	r3, [pc, #212]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005290:	4b31      	ldr	r3, [pc, #196]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005298:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02f      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d028      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052b8:	4b29      	ldr	r3, [pc, #164]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052c4:	4a24      	ldr	r2, [pc, #144]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052ca:	4b23      	ldr	r3, [pc, #140]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d114      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052d6:	f7fe f887 	bl	80033e8 <HAL_GetTick>
 80052da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	e00a      	b.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052de:	f7fe f883 	bl	80033e8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e02a      	b.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f4:	4b18      	ldr	r3, [pc, #96]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d0ee      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005308:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800530c:	d10d      	bne.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800530e:	4b12      	ldr	r3, [pc, #72]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	490d      	ldr	r1, [pc, #52]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005324:	4313      	orrs	r3, r2
 8005326:	608b      	str	r3, [r1, #8]
 8005328:	e005      	b.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800532a:	4b0b      	ldr	r3, [pc, #44]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005330:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005334:	6093      	str	r3, [r2, #8]
 8005336:	4b08      	ldr	r3, [pc, #32]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005338:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	4905      	ldr	r1, [pc, #20]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005344:	4313      	orrs	r3, r2
 8005346:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	42470068 	.word	0x42470068
 8005358:	40023800 	.word	0x40023800
 800535c:	40007000 	.word	0x40007000
 8005360:	42470e40 	.word	0x42470e40

08005364 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e083      	b.n	800547e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7f5b      	ldrb	r3, [r3, #29]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d105      	bne.n	800538c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fd fd08 	bl	8002d9c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	22ca      	movs	r2, #202	; 0xca
 8005398:	625a      	str	r2, [r3, #36]	; 0x24
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2253      	movs	r2, #83	; 0x53
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 faa8 	bl	80058f8 <RTC_EnterInitMode>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	22ff      	movs	r2, #255	; 0xff
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2204      	movs	r2, #4
 80053ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e05e      	b.n	800547e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6812      	ldr	r2, [r2, #0]
 80053ca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053d2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68d2      	ldr	r2, [r2, #12]
 80053fa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6919      	ldr	r1, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	041a      	lsls	r2, r3, #16
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800541e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10e      	bne.n	800544c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fa3a 	bl	80058a8 <HAL_RTC_WaitForSynchro>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d008      	beq.n	800544c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	22ff      	movs	r2, #255	; 0xff
 8005440:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2204      	movs	r2, #4
 8005446:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e018      	b.n	800547e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	22ff      	movs	r2, #255	; 0xff
 8005474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800547c:	2300      	movs	r3, #0
  }
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005486:	b590      	push	{r4, r7, lr}
 8005488:	b087      	sub	sp, #28
 800548a:	af00      	add	r7, sp, #0
 800548c:	60f8      	str	r0, [r7, #12]
 800548e:	60b9      	str	r1, [r7, #8]
 8005490:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	7f1b      	ldrb	r3, [r3, #28]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_RTC_SetTime+0x1c>
 800549e:	2302      	movs	r3, #2
 80054a0:	e0aa      	b.n	80055f8 <HAL_RTC_SetTime+0x172>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2202      	movs	r2, #2
 80054ac:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d126      	bne.n	8005502 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2200      	movs	r2, #0
 80054c6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa3f 	bl	8005950 <RTC_ByteToBcd2>
 80054d2:	4603      	mov	r3, r0
 80054d4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fa38 	bl	8005950 <RTC_ByteToBcd2>
 80054e0:	4603      	mov	r3, r0
 80054e2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054e4:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	789b      	ldrb	r3, [r3, #2]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f000 fa30 	bl	8005950 <RTC_ByteToBcd2>
 80054f0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80054f2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	78db      	ldrb	r3, [r3, #3]
 80054fa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80054fc:	4313      	orrs	r3, r2
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e018      	b.n	8005534 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005522:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8005528:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	78db      	ldrb	r3, [r3, #3]
 800552e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	22ca      	movs	r2, #202	; 0xca
 800553a:	625a      	str	r2, [r3, #36]	; 0x24
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2253      	movs	r2, #83	; 0x53
 8005542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f9d7 	bl	80058f8 <RTC_EnterInitMode>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00b      	beq.n	8005568 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	22ff      	movs	r2, #255	; 0xff
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2204      	movs	r2, #4
 800555c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e047      	b.n	80055f8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005572:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005576:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005586:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6899      	ldr	r1, [r3, #8]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ae:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d111      	bne.n	80055e2 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055be:	68f8      	ldr	r0, [r7, #12]
 80055c0:	f000 f972 	bl	80058a8 <HAL_RTC_WaitForSynchro>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00b      	beq.n	80055e2 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	22ff      	movs	r2, #255	; 0xff
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2204      	movs	r2, #4
 80055d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e00a      	b.n	80055f8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	22ff      	movs	r2, #255	; 0xff
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80055f6:	2300      	movs	r3, #0
  }
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	371c      	adds	r7, #28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd90      	pop	{r4, r7, pc}

08005600 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800560c:	2300      	movs	r3, #0
 800560e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005632:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005636:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	0c1b      	lsrs	r3, r3, #16
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005642:	b2da      	uxtb	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	0a1b      	lsrs	r3, r3, #8
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005660:	b2da      	uxtb	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	0c1b      	lsrs	r3, r3, #16
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005670:	b2da      	uxtb	r2, r3
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d11a      	bne.n	80056b2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f983 	bl	800598c <RTC_Bcd2ToByte>
 8005686:	4603      	mov	r3, r0
 8005688:	461a      	mov	r2, r3
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	785b      	ldrb	r3, [r3, #1]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f97a 	bl	800598c <RTC_Bcd2ToByte>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	789b      	ldrb	r3, [r3, #2]
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f971 	bl	800598c <RTC_Bcd2ToByte>
 80056aa:	4603      	mov	r3, r0
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056bc:	b590      	push	{r4, r7, lr}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	7f1b      	ldrb	r3, [r3, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_RTC_SetDate+0x1c>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e094      	b.n	8005802 <HAL_RTC_SetDate+0x146>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2202      	movs	r2, #2
 80056e2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10e      	bne.n	8005708 <HAL_RTC_SetDate+0x4c>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	785b      	ldrb	r3, [r3, #1]
 80056ee:	f003 0310 	and.w	r3, r3, #16
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d008      	beq.n	8005708 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	785b      	ldrb	r3, [r3, #1]
 80056fa:	f023 0310 	bic.w	r3, r3, #16
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	330a      	adds	r3, #10
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11c      	bne.n	8005748 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	78db      	ldrb	r3, [r3, #3]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f91c 	bl	8005950 <RTC_ByteToBcd2>
 8005718:	4603      	mov	r3, r0
 800571a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f915 	bl	8005950 <RTC_ByteToBcd2>
 8005726:	4603      	mov	r3, r0
 8005728:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800572a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f90d 	bl	8005950 <RTC_ByteToBcd2>
 8005736:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005738:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e00e      	b.n	8005766 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	78db      	ldrb	r3, [r3, #3]
 800574c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005754:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8005756:	68ba      	ldr	r2, [r7, #8]
 8005758:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800575a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005762:	4313      	orrs	r3, r2
 8005764:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	22ca      	movs	r2, #202	; 0xca
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2253      	movs	r2, #83	; 0x53
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f8be 	bl	80058f8 <RTC_EnterInitMode>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2204      	movs	r2, #4
 800578e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e033      	b.n	8005802 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057b8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d111      	bne.n	80057ec <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f86d 	bl	80058a8 <HAL_RTC_WaitForSynchro>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	22ff      	movs	r2, #255	; 0xff
 80057da:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2204      	movs	r2, #4
 80057e0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e00a      	b.n	8005802 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2201      	movs	r2, #1
 80057f8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005800:	2300      	movs	r3, #0
  }
}
 8005802:	4618      	mov	r0, r3
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	bd90      	pop	{r4, r7, pc}

0800580a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b086      	sub	sp, #24
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005824:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005828:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	b2db      	uxtb	r3, r3
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	b2da      	uxtb	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	0b5b      	lsrs	r3, r3, #13
 8005856:	b2db      	uxtb	r3, r3
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	b2da      	uxtb	r2, r3
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11a      	bne.n	800589e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	78db      	ldrb	r3, [r3, #3]
 800586c:	4618      	mov	r0, r3
 800586e:	f000 f88d 	bl	800598c <RTC_Bcd2ToByte>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	785b      	ldrb	r3, [r3, #1]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f884 	bl	800598c <RTC_Bcd2ToByte>
 8005884:	4603      	mov	r3, r0
 8005886:	461a      	mov	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	789b      	ldrb	r3, [r3, #2]
 8005890:	4618      	mov	r0, r3
 8005892:	f000 f87b 	bl	800598c <RTC_Bcd2ToByte>
 8005896:	4603      	mov	r3, r0
 8005898:	461a      	mov	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3718      	adds	r7, #24
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68da      	ldr	r2, [r3, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058c4:	f7fd fd90 	bl	80033e8 <HAL_GetTick>
 80058c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058ca:	e009      	b.n	80058e0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80058cc:	f7fd fd8c 	bl	80033e8 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058da:	d901      	bls.n	80058e0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e007      	b.n	80058f0 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0ee      	beq.n	80058cc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800590e:	2b00      	cmp	r3, #0
 8005910:	d119      	bne.n	8005946 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800591a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800591c:	f7fd fd64 	bl	80033e8 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005922:	e009      	b.n	8005938 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005924:	f7fd fd60 	bl	80033e8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005932:	d901      	bls.n	8005938 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e007      	b.n	8005948 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800595e:	e005      	b.n	800596c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	3301      	adds	r3, #1
 8005964:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	3b0a      	subs	r3, #10
 800596a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	2b09      	cmp	r3, #9
 8005970:	d8f6      	bhi.n	8005960 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	011b      	lsls	r3, r3, #4
 8005978:	b2da      	uxtb	r2, r3
 800597a:	79fb      	ldrb	r3, [r7, #7]
 800597c:	4313      	orrs	r3, r2
 800597e:	b2db      	uxtb	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800599a:	79fb      	ldrb	r3, [r7, #7]
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80059ac:	79fb      	ldrb	r3, [r7, #7]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	4413      	add	r3, r2
 80059ba:	b2db      	uxtb	r3, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3714      	adds	r7, #20
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07b      	b.n	8005ad2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ea:	d009      	beq.n	8005a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	61da      	str	r2, [r3, #28]
 80059f2:	e005      	b.n	8005a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fd f9ea 	bl	8002df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 0104 	and.w	r1, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0210 	and.w	r2, r3, #16
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b088      	sub	sp, #32
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_SPI_Transmit+0x22>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e126      	b.n	8005d4a <HAL_SPI_Transmit+0x270>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b04:	f7fd fc70 	bl	80033e8 <HAL_GetTick>
 8005b08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b1e:	e10b      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0x52>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b30:	e102      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b78:	d10f      	bne.n	8005b9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d007      	beq.n	8005bb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc0:	d14b      	bne.n	8005c5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0xf6>
 8005bca:	8afb      	ldrh	r3, [r7, #22]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d13e      	bne.n	8005c4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	1c9a      	adds	r2, r3, #2
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bf4:	e02b      	b.n	8005c4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d112      	bne.n	8005c2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	881a      	ldrh	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c28:	e011      	b.n	8005c4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2a:	f7fd fbdd 	bl	80033e8 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d803      	bhi.n	8005c42 <HAL_SPI_Transmit+0x168>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c40:	d102      	bne.n	8005c48 <HAL_SPI_Transmit+0x16e>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c4c:	e074      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ce      	bne.n	8005bf6 <HAL_SPI_Transmit+0x11c>
 8005c58:	e04c      	b.n	8005cf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_Transmit+0x18e>
 8005c62:	8afb      	ldrh	r3, [r7, #22]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d140      	bne.n	8005cea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c8e:	e02c      	b.n	8005cea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d113      	bne.n	8005cc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cc4:	e011      	b.n	8005cea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc6:	f7fd fb8f 	bl	80033e8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d803      	bhi.n	8005cde <HAL_SPI_Transmit+0x204>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_Transmit+0x20a>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce8:	e026      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cd      	bne.n	8005c90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 fb13 	bl	8006324 <SPI_EndRxTxTransaction>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e000      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d101      	bne.n	8005d74 <HAL_SPI_Transmit_DMA+0x20>
 8005d70:	2302      	movs	r3, #2
 8005d72:	e09b      	b.n	8005eac <HAL_SPI_Transmit_DMA+0x158>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d002      	beq.n	8005d8e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d8c:	e089      	b.n	8005ea2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_SPI_Transmit_DMA+0x46>
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d102      	bne.n	8005da0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d9e:	e080      	b.n	8005ea2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2203      	movs	r2, #3
 8005da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	88fa      	ldrh	r2, [r7, #6]
 8005db8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005de6:	d10f      	bne.n	8005e08 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0c:	4a29      	ldr	r2, [pc, #164]	; (8005eb4 <HAL_SPI_Transmit_DMA+0x160>)
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e14:	4a28      	ldr	r2, [pc, #160]	; (8005eb8 <HAL_SPI_Transmit_DMA+0x164>)
 8005e16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1c:	4a27      	ldr	r2, [pc, #156]	; (8005ebc <HAL_SPI_Transmit_DMA+0x168>)
 8005e1e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	2200      	movs	r2, #0
 8005e26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	4619      	mov	r1, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e3e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005e40:	f7fd fc92 	bl	8003768 <HAL_DMA_Start_IT>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f043 0210 	orr.w	r2, r3, #16
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8005e62:	e01e      	b.n	8005ea2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d007      	beq.n	8005e82 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e80:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0220 	orr.w	r2, r2, #32
 8005e90:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	685a      	ldr	r2, [r3, #4]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f042 0202 	orr.w	r2, r2, #2
 8005ea0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	08006191 	.word	0x08006191
 8005eb8:	080060e9 	.word	0x080060e9
 8005ebc:	080061ad 	.word	0x080061ad

08005ec0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	099b      	lsrs	r3, r3, #6
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10f      	bne.n	8005f04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	099b      	lsrs	r3, r3, #6
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d004      	beq.n	8005f04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	4798      	blx	r3
    return;
 8005f02:	e0d7      	b.n	80060b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	085b      	lsrs	r3, r3, #1
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00a      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x66>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	09db      	lsrs	r3, r3, #7
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d004      	beq.n	8005f26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
    return;
 8005f24:	e0c6      	b.n	80060b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_SPI_IRQHandler+0x8c>
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	0a1b      	lsrs	r3, r3, #8
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f000 80b4 	beq.w	80060b4 <HAL_SPI_IRQHandler+0x1f4>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80ad 	beq.w	80060b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	099b      	lsrs	r3, r3, #6
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d023      	beq.n	8005fae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d011      	beq.n	8005f96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f76:	f043 0204 	orr.w	r2, r3, #4
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	e00b      	b.n	8005fae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	693b      	ldr	r3, [r7, #16]
        return;
 8005fac:	e082      	b.n	80060b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	095b      	lsrs	r3, r3, #5
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	0a1b      	lsrs	r3, r3, #8
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00c      	beq.n	800600a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff4:	f043 0208 	orr.w	r2, r3, #8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	60bb      	str	r3, [r7, #8]
 8006008:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	2b00      	cmp	r3, #0
 8006010:	d04f      	beq.n	80060b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006020:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d104      	bne.n	800603e <HAL_SPI_IRQHandler+0x17e>
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b00      	cmp	r3, #0
 800603c:	d034      	beq.n	80060a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0203 	bic.w	r2, r2, #3
 800604c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	2b00      	cmp	r3, #0
 8006054:	d011      	beq.n	800607a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800605a:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_SPI_IRQHandler+0x1fc>)
 800605c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fc48 	bl	80038f8 <HAL_DMA_Abort_IT>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006072:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006086:	4a0d      	ldr	r2, [pc, #52]	; (80060bc <HAL_SPI_IRQHandler+0x1fc>)
 8006088:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800608e:	4618      	mov	r0, r3
 8006090:	f7fd fc32 	bl	80038f8 <HAL_DMA_Abort_IT>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80060a6:	e003      	b.n	80060b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f813 	bl	80060d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80060ae:	e000      	b.n	80060b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80060b0:	bf00      	nop
    return;
 80060b2:	bf00      	nop
  }
}
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	080061ed 	.word	0x080061ed

080060c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060f6:	f7fd f977 	bl	80033e8 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610a:	d03b      	beq.n	8006184 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0220 	bic.w	r2, r2, #32
 800611a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	685a      	ldr	r2, [r3, #4]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0202 	bic.w	r2, r2, #2
 800612a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	2164      	movs	r1, #100	; 0x64
 8006130:	6978      	ldr	r0, [r7, #20]
 8006132:	f000 f8f7 	bl	8006324 <SPI_EndRxTxTransaction>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006140:	f043 0220 	orr.w	r2, r3, #32
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	60fb      	str	r3, [r7, #12]
 8006164:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2200      	movs	r2, #0
 800616a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800617c:	6978      	ldr	r0, [r7, #20]
 800617e:	f7ff ffa9 	bl	80060d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006182:	e002      	b.n	800618a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006184:	6978      	ldr	r0, [r7, #20]
 8006186:	f7fb fdad 	bl	8001ce4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f7ff ff8e 	bl	80060c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0203 	bic.w	r2, r2, #3
 80061c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	f043 0210 	orr.w	r2, r3, #16
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f7ff ff78 	bl	80060d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff ff64 	bl	80060d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006224:	f7fd f8e0 	bl	80033e8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622c:	1a9b      	subs	r3, r3, r2
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	4413      	add	r3, r2
 8006232:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006234:	f7fd f8d8 	bl	80033e8 <HAL_GetTick>
 8006238:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	015b      	lsls	r3, r3, #5
 8006240:	0d1b      	lsrs	r3, r3, #20
 8006242:	69fa      	ldr	r2, [r7, #28]
 8006244:	fb02 f303 	mul.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624a:	e054      	b.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006252:	d050      	beq.n	80062f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006254:	f7fd f8c8 	bl	80033e8 <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	429a      	cmp	r2, r3
 8006262:	d902      	bls.n	800626a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d13d      	bne.n	80062e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006278:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006282:	d111      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628c:	d004      	beq.n	8006298 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006296:	d107      	bne.n	80062a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062b0:	d10f      	bne.n	80062d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	e017      	b.n	8006316 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	3b01      	subs	r3, #1
 80062f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	4013      	ands	r3, r2
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	429a      	cmp	r2, r3
 8006304:	bf0c      	ite	eq
 8006306:	2301      	moveq	r3, #1
 8006308:	2300      	movne	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	429a      	cmp	r2, r3
 8006312:	d19b      	bne.n	800624c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3720      	adds	r7, #32
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000058 	.word	0x20000058

08006324 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b088      	sub	sp, #32
 8006328:	af02      	add	r7, sp, #8
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <SPI_EndRxTxTransaction+0x7c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a1b      	ldr	r2, [pc, #108]	; (80063a4 <SPI_EndRxTxTransaction+0x80>)
 8006336:	fba2 2303 	umull	r2, r3, r2, r3
 800633a:	0d5b      	lsrs	r3, r3, #21
 800633c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006340:	fb02 f303 	mul.w	r3, r2, r3
 8006344:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634e:	d112      	bne.n	8006376 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	68f8      	ldr	r0, [r7, #12]
 800635c:	f7ff ff5a 	bl	8006214 <SPI_WaitFlagStateUntilTimeout>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d016      	beq.n	8006394 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800636a:	f043 0220 	orr.w	r2, r3, #32
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e00f      	b.n	8006396 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	3b01      	subs	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	d0f2      	beq.n	8006376 <SPI_EndRxTxTransaction+0x52>
 8006390:	e000      	b.n	8006394 <SPI_EndRxTxTransaction+0x70>
        break;
 8006392:	bf00      	nop
  }

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000058 	.word	0x20000058
 80063a4:	165e9f81 	.word	0x165e9f81

080063a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e041      	b.n	800643e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d106      	bne.n	80063d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7fc fd9c 	bl	8002f0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f000 fa96 	bl	8006918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	d001      	beq.n	8006460 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e04e      	b.n	80064fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a23      	ldr	r2, [pc, #140]	; (800650c <HAL_TIM_Base_Start_IT+0xc4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d01d      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1f      	ldr	r2, [pc, #124]	; (8006510 <HAL_TIM_Base_Start_IT+0xc8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1e      	ldr	r2, [pc, #120]	; (8006514 <HAL_TIM_Base_Start_IT+0xcc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1c      	ldr	r2, [pc, #112]	; (8006518 <HAL_TIM_Base_Start_IT+0xd0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a1b      	ldr	r2, [pc, #108]	; (800651c <HAL_TIM_Base_Start_IT+0xd4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a19      	ldr	r2, [pc, #100]	; (8006520 <HAL_TIM_Base_Start_IT+0xd8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIM_Base_Start_IT+0x80>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a18      	ldr	r2, [pc, #96]	; (8006524 <HAL_TIM_Base_Start_IT+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d111      	bne.n	80064ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2b06      	cmp	r3, #6
 80064d8:	d010      	beq.n	80064fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f042 0201 	orr.w	r2, r2, #1
 80064e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	e007      	b.n	80064fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681a      	ldr	r2, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0201 	orr.w	r2, r2, #1
 80064fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40010000 	.word	0x40010000
 8006510:	40000400 	.word	0x40000400
 8006514:	40000800 	.word	0x40000800
 8006518:	40000c00 	.word	0x40000c00
 800651c:	40010400 	.word	0x40010400
 8006520:	40014000 	.word	0x40014000
 8006524:	40001800 	.word	0x40001800

08006528 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	f003 0302 	and.w	r3, r3, #2
 800653a:	2b02      	cmp	r3, #2
 800653c:	d122      	bne.n	8006584 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d11b      	bne.n	8006584 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f06f 0202 	mvn.w	r2, #2
 8006554:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d003      	beq.n	8006572 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f9b5 	bl	80068da <HAL_TIM_IC_CaptureCallback>
 8006570:	e005      	b.n	800657e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f000 f9a7 	bl	80068c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f9b8 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b04      	cmp	r3, #4
 8006590:	d122      	bne.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b04      	cmp	r3, #4
 800659e:	d11b      	bne.n	80065d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f06f 0204 	mvn.w	r2, #4
 80065a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f98b 	bl	80068da <HAL_TIM_IC_CaptureCallback>
 80065c4:	e005      	b.n	80065d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f97d 	bl	80068c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f98e 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d122      	bne.n	800662c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d11b      	bne.n	800662c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0208 	mvn.w	r2, #8
 80065fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2204      	movs	r2, #4
 8006602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f961 	bl	80068da <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f953 	bl	80068c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f964 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0310 	and.w	r3, r3, #16
 8006636:	2b10      	cmp	r3, #16
 8006638:	d122      	bne.n	8006680 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b10      	cmp	r3, #16
 8006646:	d11b      	bne.n	8006680 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0210 	mvn.w	r2, #16
 8006650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2208      	movs	r2, #8
 8006656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f937 	bl	80068da <HAL_TIM_IC_CaptureCallback>
 800666c:	e005      	b.n	800667a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f929 	bl	80068c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f93a 	bl	80068ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2200      	movs	r2, #0
 800667e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	f003 0301 	and.w	r3, r3, #1
 800668a:	2b01      	cmp	r3, #1
 800668c:	d10e      	bne.n	80066ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f06f 0201 	mvn.w	r2, #1
 80066a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7fb ff36 	bl	8002518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b80      	cmp	r3, #128	; 0x80
 80066b8:	d10e      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	68db      	ldr	r3, [r3, #12]
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b80      	cmp	r3, #128	; 0x80
 80066c6:	d107      	bne.n	80066d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fae0 	bl	8006c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b40      	cmp	r3, #64	; 0x40
 80066e4:	d10e      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f0:	2b40      	cmp	r3, #64	; 0x40
 80066f2:	d107      	bne.n	8006704 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f8ff 	bl	8006902 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b20      	cmp	r3, #32
 8006710:	d10e      	bne.n	8006730 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b20      	cmp	r3, #32
 800671e:	d107      	bne.n	8006730 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0220 	mvn.w	r2, #32
 8006728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 faaa 	bl	8006c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006730:	bf00      	nop
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIM_ConfigClockSource+0x1c>
 8006750:	2302      	movs	r3, #2
 8006752:	e0b4      	b.n	80068be <HAL_TIM_ConfigClockSource+0x186>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2202      	movs	r2, #2
 8006760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800677a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68ba      	ldr	r2, [r7, #8]
 8006782:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800678c:	d03e      	beq.n	800680c <HAL_TIM_ConfigClockSource+0xd4>
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006792:	f200 8087 	bhi.w	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679a:	f000 8086 	beq.w	80068aa <HAL_TIM_ConfigClockSource+0x172>
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d87f      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067a4:	2b70      	cmp	r3, #112	; 0x70
 80067a6:	d01a      	beq.n	80067de <HAL_TIM_ConfigClockSource+0xa6>
 80067a8:	2b70      	cmp	r3, #112	; 0x70
 80067aa:	d87b      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067ac:	2b60      	cmp	r3, #96	; 0x60
 80067ae:	d050      	beq.n	8006852 <HAL_TIM_ConfigClockSource+0x11a>
 80067b0:	2b60      	cmp	r3, #96	; 0x60
 80067b2:	d877      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067b4:	2b50      	cmp	r3, #80	; 0x50
 80067b6:	d03c      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0xfa>
 80067b8:	2b50      	cmp	r3, #80	; 0x50
 80067ba:	d873      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067bc:	2b40      	cmp	r3, #64	; 0x40
 80067be:	d058      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x13a>
 80067c0:	2b40      	cmp	r3, #64	; 0x40
 80067c2:	d86f      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067c4:	2b30      	cmp	r3, #48	; 0x30
 80067c6:	d064      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x15a>
 80067c8:	2b30      	cmp	r3, #48	; 0x30
 80067ca:	d86b      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	d060      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x15a>
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d867      	bhi.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d05c      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x15a>
 80067d8:	2b10      	cmp	r3, #16
 80067da:	d05a      	beq.n	8006892 <HAL_TIM_ConfigClockSource+0x15a>
 80067dc:	e062      	b.n	80068a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6899      	ldr	r1, [r3, #8]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f000 f9ad 	bl	8006b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006800:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	609a      	str	r2, [r3, #8]
      break;
 800680a:	e04f      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	6899      	ldr	r1, [r3, #8]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f000 f996 	bl	8006b4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800682e:	609a      	str	r2, [r3, #8]
      break;
 8006830:	e03c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6818      	ldr	r0, [r3, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	6859      	ldr	r1, [r3, #4]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	461a      	mov	r2, r3
 8006840:	f000 f90a 	bl	8006a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2150      	movs	r1, #80	; 0x50
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f963 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006850:	e02c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6818      	ldr	r0, [r3, #0]
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	6859      	ldr	r1, [r3, #4]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	461a      	mov	r2, r3
 8006860:	f000 f929 	bl	8006ab6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2160      	movs	r1, #96	; 0x60
 800686a:	4618      	mov	r0, r3
 800686c:	f000 f953 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006870:	e01c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	6859      	ldr	r1, [r3, #4]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	461a      	mov	r2, r3
 8006880:	f000 f8ea 	bl	8006a58 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2140      	movs	r1, #64	; 0x40
 800688a:	4618      	mov	r0, r3
 800688c:	f000 f943 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 8006890:	e00c      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4619      	mov	r1, r3
 800689c:	4610      	mov	r0, r2
 800689e:	f000 f93a 	bl	8006b16 <TIM_ITRx_SetConfig>
      break;
 80068a2:	e003      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e000      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3710      	adds	r7, #16
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b083      	sub	sp, #12
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068da:	b480      	push	{r7}
 80068dc:	b083      	sub	sp, #12
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068e2:	bf00      	nop
 80068e4:	370c      	adds	r7, #12
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b083      	sub	sp, #12
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006902:	b480      	push	{r7}
 8006904:	b083      	sub	sp, #12
 8006906:	af00      	add	r7, sp, #0
 8006908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
	...

08006918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a40      	ldr	r2, [pc, #256]	; (8006a2c <TIM_Base_SetConfig+0x114>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d013      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d00f      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a3d      	ldr	r2, [pc, #244]	; (8006a30 <TIM_Base_SetConfig+0x118>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a3c      	ldr	r2, [pc, #240]	; (8006a34 <TIM_Base_SetConfig+0x11c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a3b      	ldr	r2, [pc, #236]	; (8006a38 <TIM_Base_SetConfig+0x120>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_Base_SetConfig+0x40>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a3a      	ldr	r2, [pc, #232]	; (8006a3c <TIM_Base_SetConfig+0x124>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d108      	bne.n	800696a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a2f      	ldr	r2, [pc, #188]	; (8006a2c <TIM_Base_SetConfig+0x114>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d02b      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006978:	d027      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a2c      	ldr	r2, [pc, #176]	; (8006a30 <TIM_Base_SetConfig+0x118>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d023      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a2b      	ldr	r2, [pc, #172]	; (8006a34 <TIM_Base_SetConfig+0x11c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d01f      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a2a      	ldr	r2, [pc, #168]	; (8006a38 <TIM_Base_SetConfig+0x120>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01b      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4a29      	ldr	r2, [pc, #164]	; (8006a3c <TIM_Base_SetConfig+0x124>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d017      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4a28      	ldr	r2, [pc, #160]	; (8006a40 <TIM_Base_SetConfig+0x128>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a27      	ldr	r2, [pc, #156]	; (8006a44 <TIM_Base_SetConfig+0x12c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d00f      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a26      	ldr	r2, [pc, #152]	; (8006a48 <TIM_Base_SetConfig+0x130>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00b      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a25      	ldr	r2, [pc, #148]	; (8006a4c <TIM_Base_SetConfig+0x134>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d007      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a24      	ldr	r2, [pc, #144]	; (8006a50 <TIM_Base_SetConfig+0x138>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a23      	ldr	r2, [pc, #140]	; (8006a54 <TIM_Base_SetConfig+0x13c>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d108      	bne.n	80069dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a0a      	ldr	r2, [pc, #40]	; (8006a2c <TIM_Base_SetConfig+0x114>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_Base_SetConfig+0xf8>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a0c      	ldr	r2, [pc, #48]	; (8006a3c <TIM_Base_SetConfig+0x124>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d103      	bne.n	8006a18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	615a      	str	r2, [r3, #20]
}
 8006a1e:	bf00      	nop
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
 8006a2a:	bf00      	nop
 8006a2c:	40010000 	.word	0x40010000
 8006a30:	40000400 	.word	0x40000400
 8006a34:	40000800 	.word	0x40000800
 8006a38:	40000c00 	.word	0x40000c00
 8006a3c:	40010400 	.word	0x40010400
 8006a40:	40014000 	.word	0x40014000
 8006a44:	40014400 	.word	0x40014400
 8006a48:	40014800 	.word	0x40014800
 8006a4c:	40001800 	.word	0x40001800
 8006a50:	40001c00 	.word	0x40001c00
 8006a54:	40002000 	.word	0x40002000

08006a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	f023 0201 	bic.w	r2, r3, #1
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 030a 	bic.w	r3, r3, #10
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	693a      	ldr	r2, [r7, #16]
 8006aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	621a      	str	r2, [r3, #32]
}
 8006aaa:	bf00      	nop
 8006aac:	371c      	adds	r7, #28
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr

08006ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b087      	sub	sp, #28
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0210 	bic.w	r2, r3, #16
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6a1b      	ldr	r3, [r3, #32]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ae0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	031b      	lsls	r3, r3, #12
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006af2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	011b      	lsls	r3, r3, #4
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b16:	b480      	push	{r7}
 8006b18:	b085      	sub	sp, #20
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6078      	str	r0, [r7, #4]
 8006b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b2e:	683a      	ldr	r2, [r7, #0]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f043 0307 	orr.w	r3, r3, #7
 8006b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b087      	sub	sp, #28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	021a      	lsls	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	431a      	orrs	r2, r3
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	609a      	str	r2, [r3, #8]
}
 8006b80:	bf00      	nop
 8006b82:	371c      	adds	r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d101      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ba0:	2302      	movs	r3, #2
 8006ba2:	e05a      	b.n	8006c5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2202      	movs	r2, #2
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a21      	ldr	r2, [pc, #132]	; (8006c68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d01d      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a1d      	ldr	r2, [pc, #116]	; (8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d018      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1a      	ldr	r2, [pc, #104]	; (8006c74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a17      	ldr	r2, [pc, #92]	; (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a15      	ldr	r2, [pc, #84]	; (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d10c      	bne.n	8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40010400 	.word	0x40010400
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40001800 	.word	0x40001800

08006c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e03f      	b.n	8006d3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d106      	bne.n	8006cd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7fc f940 	bl	8002f58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2224      	movs	r2, #36	; 0x24
 8006cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68da      	ldr	r2, [r3, #12]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f000 fe27 	bl	8007944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691a      	ldr	r2, [r3, #16]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695a      	ldr	r2, [r3, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2220      	movs	r2, #32
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	4613      	mov	r3, r2
 8006d52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b20      	cmp	r3, #32
 8006d5e:	d11d      	bne.n	8006d9c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <HAL_UART_Receive_IT+0x26>
 8006d66:	88fb      	ldrh	r3, [r7, #6]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e016      	b.n	8006d9e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_UART_Receive_IT+0x38>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e00f      	b.n	8006d9e <HAL_UART_Receive_IT+0x58>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d8c:	88fb      	ldrh	r3, [r7, #6]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fbd9 	bl	800754a <UART_Start_Receive_IT>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	e000      	b.n	8006d9e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006d9c:	2302      	movs	r3, #2
  }
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08c      	sub	sp, #48	; 0x30
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4613      	mov	r3, r2
 8006db4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d165      	bne.n	8006e8e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <HAL_UART_Transmit_DMA+0x26>
 8006dc8:	88fb      	ldrh	r3, [r7, #6]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d101      	bne.n	8006dd2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e05e      	b.n	8006e90 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d101      	bne.n	8006de0 <HAL_UART_Transmit_DMA+0x38>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	e057      	b.n	8006e90 <HAL_UART_Transmit_DMA+0xe8>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	88fa      	ldrh	r2, [r7, #6]
 8006df2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	88fa      	ldrh	r2, [r7, #6]
 8006df8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2221      	movs	r2, #33	; 0x21
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0c:	4a22      	ldr	r2, [pc, #136]	; (8006e98 <HAL_UART_Transmit_DMA+0xf0>)
 8006e0e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e14:	4a21      	ldr	r2, [pc, #132]	; (8006e9c <HAL_UART_Transmit_DMA+0xf4>)
 8006e16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1c:	4a20      	ldr	r2, [pc, #128]	; (8006ea0 <HAL_UART_Transmit_DMA+0xf8>)
 8006e1e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8006e28:	f107 0308 	add.w	r3, r7, #8
 8006e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	6819      	ldr	r1, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3304      	adds	r3, #4
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	f7fc fc92 	bl	8003768 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e4c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3314      	adds	r3, #20
 8006e5c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	617b      	str	r3, [r7, #20]
   return(result);
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3314      	adds	r3, #20
 8006e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e76:	627a      	str	r2, [r7, #36]	; 0x24
 8006e78:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6a39      	ldr	r1, [r7, #32]
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e000      	b.n	8006e90 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006e8e:	2302      	movs	r3, #2
  }
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3730      	adds	r7, #48	; 0x30
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	08007401 	.word	0x08007401
 8006e9c:	0800749b 	.word	0x0800749b
 8006ea0:	080074b7 	.word	0x080074b7

08006ea4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b0ba      	sub	sp, #232	; 0xe8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006ee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10f      	bne.n	8006f0a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
 8006ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fc62 	bl	80077cc <UART_Receive_IT>
      return;
 8006f08:	e256      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006f0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 80de 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
 8006f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d106      	bne.n	8006f2e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f24:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 80d1 	beq.w	80070d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
 8006f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d005      	beq.n	8006f52 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	f003 0304 	and.w	r3, r3, #4
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
 8006f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f62:	f003 0301 	and.w	r3, r3, #1
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d005      	beq.n	8006f76 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f043 0202 	orr.w	r2, r3, #2
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00b      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
 8006f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d005      	beq.n	8006f9a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	f043 0204 	orr.w	r2, r3, #4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d011      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
 8006fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d105      	bne.n	8006fbe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb6:	f003 0301 	and.w	r3, r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f043 0208 	orr.w	r2, r3, #8
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f000 81ed 	beq.w	80073ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
 8006fe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fe4:	f003 0320 	and.w	r3, r3, #32
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fbed 	bl	80077cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	bf0c      	ite	eq
 8007000:	2301      	moveq	r3, #1
 8007002:	2300      	movne	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f003 0308 	and.w	r3, r3, #8
 8007012:	2b00      	cmp	r3, #0
 8007014:	d103      	bne.n	800701e <HAL_UART_IRQHandler+0x17a>
 8007016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d04f      	beq.n	80070be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 faf5 	bl	800760e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d141      	bne.n	80070b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3314      	adds	r3, #20
 8007038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3314      	adds	r3, #20
 800705a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800705e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800706a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d9      	bne.n	8007032 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	2b00      	cmp	r3, #0
 8007084:	d013      	beq.n	80070ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	4a7d      	ldr	r2, [pc, #500]	; (8007280 <HAL_UART_IRQHandler+0x3dc>)
 800708c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007092:	4618      	mov	r0, r3
 8007094:	f7fc fc30 	bl	80038f8 <HAL_DMA_Abort_IT>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	d016      	beq.n	80070cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070a8:	4610      	mov	r0, r2
 80070aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	e00e      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f990 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b4:	e00a      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f98c 	bl	80073d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070bc:	e006      	b.n	80070cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f988 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80070ca:	e170      	b.n	80073ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070cc:	bf00      	nop
    return;
 80070ce:	e16e      	b.n	80073ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	f040 814a 	bne.w	800736e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80070da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8143 	beq.w	800736e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80070e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 813c 	beq.w	800736e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f6:	2300      	movs	r3, #0
 80070f8:	60bb      	str	r3, [r7, #8]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	60bb      	str	r3, [r7, #8]
 800710a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007116:	2b40      	cmp	r3, #64	; 0x40
 8007118:	f040 80b4 	bne.w	8007284 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007128:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8140 	beq.w	80073b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800713a:	429a      	cmp	r2, r3
 800713c:	f080 8139 	bcs.w	80073b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007146:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	f000 8088 	beq.w	8007266 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	330c      	adds	r3, #12
 800715c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800716c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	330c      	adds	r3, #12
 800717e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007182:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007186:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800718e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007192:	e841 2300 	strex	r3, r2, [r1]
 8007196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800719a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1d9      	bne.n	8007156 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3314      	adds	r3, #20
 80071a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ac:	e853 3f00 	ldrex	r3, [r3]
 80071b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80071b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071b4:	f023 0301 	bic.w	r3, r3, #1
 80071b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3314      	adds	r3, #20
 80071c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80071c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80071ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80071ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80071d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e1      	bne.n	80071a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071e8:	e853 3f00 	ldrex	r3, [r3]
 80071ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80071ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3314      	adds	r3, #20
 80071fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007202:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007204:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007206:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007208:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800720a:	e841 2300 	strex	r3, r2, [r1]
 800720e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007210:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1e3      	bne.n	80071de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	330c      	adds	r3, #12
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800722e:	e853 3f00 	ldrex	r3, [r3]
 8007232:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007236:	f023 0310 	bic.w	r3, r3, #16
 800723a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	330c      	adds	r3, #12
 8007244:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007248:	65ba      	str	r2, [r7, #88]	; 0x58
 800724a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800724e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e3      	bne.n	8007224 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	4618      	mov	r0, r3
 8007262:	f7fc fad9 	bl	8003818 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800726e:	b29b      	uxth	r3, r3
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f8b6 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800727c:	e099      	b.n	80073b2 <HAL_UART_IRQHandler+0x50e>
 800727e:	bf00      	nop
 8007280:	080076d5 	.word	0x080076d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800728c:	b29b      	uxth	r3, r3
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 808b 	beq.w	80073b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80072a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 8086 	beq.w	80073b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	330c      	adds	r3, #12
 80072b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80072ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	330c      	adds	r3, #12
 80072ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80072ce:	647a      	str	r2, [r7, #68]	; 0x44
 80072d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80072d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80072dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e3      	bne.n	80072aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3314      	adds	r3, #20
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ec:	e853 3f00 	ldrex	r3, [r3]
 80072f0:	623b      	str	r3, [r7, #32]
   return(result);
 80072f2:	6a3b      	ldr	r3, [r7, #32]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3314      	adds	r3, #20
 8007302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007306:	633a      	str	r2, [r7, #48]	; 0x30
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800730c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e3      	bne.n	80072e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	330c      	adds	r3, #12
 800732e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	60fb      	str	r3, [r7, #12]
   return(result);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f023 0310 	bic.w	r3, r3, #16
 800733e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	330c      	adds	r3, #12
 8007348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800734c:	61fa      	str	r2, [r7, #28]
 800734e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	69b9      	ldr	r1, [r7, #24]
 8007352:	69fa      	ldr	r2, [r7, #28]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	617b      	str	r3, [r7, #20]
   return(result);
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e3      	bne.n	8007328 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f83e 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800736c:	e023      	b.n	80073b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800736e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007376:	2b00      	cmp	r3, #0
 8007378:	d009      	beq.n	800738e <HAL_UART_IRQHandler+0x4ea>
 800737a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9b8 	bl	80076fc <UART_Transmit_IT>
    return;
 800738c:	e014      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00e      	beq.n	80073b8 <HAL_UART_IRQHandler+0x514>
 800739a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d008      	beq.n	80073b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f9f8 	bl	800779c <UART_EndTransmit_IT>
    return;
 80073ac:	e004      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
    return;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
      return;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_UART_IRQHandler+0x514>
      return;
 80073b6:	bf00      	nop
  }
}
 80073b8:	37e8      	adds	r7, #232	; 0xe8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop

080073c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b083      	sub	sp, #12
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80073dc:	bf00      	nop
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b090      	sub	sp, #64	; 0x40
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007418:	2b00      	cmp	r3, #0
 800741a:	d137      	bne.n	800748c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800741c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800741e:	2200      	movs	r2, #0
 8007420:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3314      	adds	r3, #20
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	623b      	str	r3, [r7, #32]
   return(result);
 8007432:	6a3b      	ldr	r3, [r7, #32]
 8007434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007438:	63bb      	str	r3, [r7, #56]	; 0x38
 800743a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3314      	adds	r3, #20
 8007440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007442:	633a      	str	r2, [r7, #48]	; 0x30
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e5      	bne.n	8007422 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60fb      	str	r3, [r7, #12]
   return(result);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	637b      	str	r3, [r7, #52]	; 0x34
 800746e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	330c      	adds	r3, #12
 8007474:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007476:	61fa      	str	r2, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	69b9      	ldr	r1, [r7, #24]
 800747c:	69fa      	ldr	r2, [r7, #28]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	617b      	str	r3, [r7, #20]
   return(result);
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800748a:	e002      	b.n	8007492 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800748c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800748e:	f7fa fc13 	bl	8001cb8 <HAL_UART_TxCpltCallback>
}
 8007492:	bf00      	nop
 8007494:	3740      	adds	r7, #64	; 0x40
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f7ff ff89 	bl	80073c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ae:	bf00      	nop
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	bf0c      	ite	eq
 80074d6:	2301      	moveq	r3, #1
 80074d8:	2300      	movne	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b21      	cmp	r3, #33	; 0x21
 80074e8:	d108      	bne.n	80074fc <UART_DMAError+0x46>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d005      	beq.n	80074fc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2200      	movs	r2, #0
 80074f4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80074f6:	68b8      	ldr	r0, [r7, #8]
 80074f8:	f000 f861 	bl	80075be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	bf0c      	ite	eq
 800750a:	2301      	moveq	r3, #1
 800750c:	2300      	movne	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b22      	cmp	r3, #34	; 0x22
 800751c:	d108      	bne.n	8007530 <UART_DMAError+0x7a>
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2200      	movs	r2, #0
 8007528:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800752a:	68b8      	ldr	r0, [r7, #8]
 800752c:	f000 f86f 	bl	800760e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007534:	f043 0210 	orr.w	r2, r3, #16
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800753c:	68b8      	ldr	r0, [r7, #8]
 800753e:	f7ff ff49 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007542:	bf00      	nop
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	4613      	mov	r3, r2
 8007556:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	88fa      	ldrh	r2, [r7, #6]
 8007562:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2222      	movs	r2, #34	; 0x22
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	68da      	ldr	r2, [r3, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800758e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695a      	ldr	r2, [r3, #20]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68da      	ldr	r2, [r3, #12]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f042 0220 	orr.w	r2, r2, #32
 80075ae:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr

080075be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075be:	b480      	push	{r7}
 80075c0:	b089      	sub	sp, #36	; 0x24
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	330c      	adds	r3, #12
 80075cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	e853 3f00 	ldrex	r3, [r3]
 80075d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80075dc:	61fb      	str	r3, [r7, #28]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	330c      	adds	r3, #12
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	61ba      	str	r2, [r7, #24]
 80075e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6979      	ldr	r1, [r7, #20]
 80075ec:	69ba      	ldr	r2, [r7, #24]
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	613b      	str	r3, [r7, #16]
   return(result);
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e5      	bne.n	80075c6 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007602:	bf00      	nop
 8007604:	3724      	adds	r7, #36	; 0x24
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800760e:	b480      	push	{r7}
 8007610:	b095      	sub	sp, #84	; 0x54
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800762c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007636:	643a      	str	r2, [r7, #64]	; 0x40
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800763c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	61fb      	str	r3, [r7, #28]
   return(result);
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	64bb      	str	r3, [r7, #72]	; 0x48
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3314      	adds	r3, #20
 8007668:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800766c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	2b01      	cmp	r3, #1
 8007684:	d119      	bne.n	80076ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	330c      	adds	r3, #12
 800768c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	e853 3f00 	ldrex	r3, [r3]
 8007694:	60bb      	str	r3, [r7, #8]
   return(result);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	f023 0310 	bic.w	r3, r3, #16
 800769c:	647b      	str	r3, [r7, #68]	; 0x44
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	330c      	adds	r3, #12
 80076a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076a6:	61ba      	str	r2, [r7, #24]
 80076a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076aa:	6979      	ldr	r1, [r7, #20]
 80076ac:	69ba      	ldr	r2, [r7, #24]
 80076ae:	e841 2300 	strex	r3, r2, [r1]
 80076b2:	613b      	str	r3, [r7, #16]
   return(result);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1e5      	bne.n	8007686 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80076c8:	bf00      	nop
 80076ca:	3754      	adds	r7, #84	; 0x54
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2200      	movs	r2, #0
 80076ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ee:	68f8      	ldr	r0, [r7, #12]
 80076f0:	f7ff fe70 	bl	80073d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f4:	bf00      	nop
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b21      	cmp	r3, #33	; 0x21
 800770e:	d13e      	bne.n	800778e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d114      	bne.n	8007744 <UART_Transmit_IT+0x48>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d110      	bne.n	8007744 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a1b      	ldr	r3, [r3, #32]
 8007726:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	881b      	ldrh	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007736:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	1c9a      	adds	r2, r3, #2
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	621a      	str	r2, [r3, #32]
 8007742:	e008      	b.n	8007756 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	1c59      	adds	r1, r3, #1
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	6211      	str	r1, [r2, #32]
 800774e:	781a      	ldrb	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800775a:	b29b      	uxth	r3, r3
 800775c:	3b01      	subs	r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	4619      	mov	r1, r3
 8007764:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10f      	bne.n	800778a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007778:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68da      	ldr	r2, [r3, #12]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007788:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800778e:	2302      	movs	r3, #2
  }
}
 8007790:	4618      	mov	r0, r3
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7fa fa7b 	bl	8001cb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b22      	cmp	r3, #34	; 0x22
 80077de:	f040 80ab 	bne.w	8007938 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d117      	bne.n	800781c <UART_Receive_IT+0x50>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d113      	bne.n	800781c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	b29a      	uxth	r2, r3
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007814:	1c9a      	adds	r2, r3, #2
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	629a      	str	r2, [r3, #40]	; 0x28
 800781a:	e026      	b.n	800786a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782e:	d007      	beq.n	8007840 <UART_Receive_IT+0x74>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <UART_Receive_IT+0x82>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d106      	bne.n	800784e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	b2da      	uxtb	r2, r3
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	701a      	strb	r2, [r3, #0]
 800784c:	e008      	b.n	8007860 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	b2db      	uxtb	r3, r3
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	b2da      	uxtb	r2, r3
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29b      	uxth	r3, r3
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4619      	mov	r1, r3
 8007878:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800787a:	2b00      	cmp	r3, #0
 800787c:	d15a      	bne.n	8007934 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0220 	bic.w	r2, r2, #32
 800788c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800789c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2220      	movs	r2, #32
 80078b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d135      	bne.n	800792a <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	330c      	adds	r3, #12
 80078ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	e853 3f00 	ldrex	r3, [r3]
 80078d2:	613b      	str	r3, [r7, #16]
   return(result);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f023 0310 	bic.w	r3, r3, #16
 80078da:	627b      	str	r3, [r7, #36]	; 0x24
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e4:	623a      	str	r2, [r7, #32]
 80078e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	69f9      	ldr	r1, [r7, #28]
 80078ea:	6a3a      	ldr	r2, [r7, #32]
 80078ec:	e841 2300 	strex	r3, r2, [r1]
 80078f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1e5      	bne.n	80078c4 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0310 	and.w	r3, r3, #16
 8007902:	2b10      	cmp	r3, #16
 8007904:	d10a      	bne.n	800791c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007920:	4619      	mov	r1, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f7ff fd60 	bl	80073e8 <HAL_UARTEx_RxEventCallback>
 8007928:	e002      	b.n	8007930 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fa f82e 	bl	800198c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007930:	2300      	movs	r3, #0
 8007932:	e002      	b.n	800793a <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3730      	adds	r7, #48	; 0x30
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007948:	b0c0      	sub	sp, #256	; 0x100
 800794a:	af00      	add	r7, sp, #0
 800794c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800795c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007960:	68d9      	ldr	r1, [r3, #12]
 8007962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	ea40 0301 	orr.w	r3, r0, r1
 800796c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800796e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	431a      	orrs	r2, r3
 800797c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007980:	695b      	ldr	r3, [r3, #20]
 8007982:	431a      	orrs	r2, r3
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	4313      	orrs	r3, r2
 800798c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800799c:	f021 010c 	bic.w	r1, r1, #12
 80079a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80079aa:	430b      	orrs	r3, r1
 80079ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079be:	6999      	ldr	r1, [r3, #24]
 80079c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	ea40 0301 	orr.w	r3, r0, r1
 80079ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b8f      	ldr	r3, [pc, #572]	; (8007c10 <UART_SetConfig+0x2cc>)
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d005      	beq.n	80079e4 <UART_SetConfig+0xa0>
 80079d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b8d      	ldr	r3, [pc, #564]	; (8007c14 <UART_SetConfig+0x2d0>)
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d104      	bne.n	80079ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fd fb96 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 80079e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80079ec:	e003      	b.n	80079f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80079ee:	f7fd fb7d 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 80079f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079fa:	69db      	ldr	r3, [r3, #28]
 80079fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a00:	f040 810c 	bne.w	8007c1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007a0e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007a12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	1891      	adds	r1, r2, r2
 8007a1c:	65b9      	str	r1, [r7, #88]	; 0x58
 8007a1e:	415b      	adcs	r3, r3
 8007a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007a26:	4621      	mov	r1, r4
 8007a28:	eb12 0801 	adds.w	r8, r2, r1
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	eb43 0901 	adc.w	r9, r3, r1
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	f04f 0300 	mov.w	r3, #0
 8007a3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a46:	4690      	mov	r8, r2
 8007a48:	4699      	mov	r9, r3
 8007a4a:	4623      	mov	r3, r4
 8007a4c:	eb18 0303 	adds.w	r3, r8, r3
 8007a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007a54:	462b      	mov	r3, r5
 8007a56:	eb49 0303 	adc.w	r3, r9, r3
 8007a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a6a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007a6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007a72:	460b      	mov	r3, r1
 8007a74:	18db      	adds	r3, r3, r3
 8007a76:	653b      	str	r3, [r7, #80]	; 0x50
 8007a78:	4613      	mov	r3, r2
 8007a7a:	eb42 0303 	adc.w	r3, r2, r3
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007a84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007a88:	f7f8 ff50 	bl	800092c <__aeabi_uldivmod>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4b61      	ldr	r3, [pc, #388]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007a92:	fba3 2302 	umull	r2, r3, r3, r2
 8007a96:	095b      	lsrs	r3, r3, #5
 8007a98:	011c      	lsls	r4, r3, #4
 8007a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aa4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007aa8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007aac:	4642      	mov	r2, r8
 8007aae:	464b      	mov	r3, r9
 8007ab0:	1891      	adds	r1, r2, r2
 8007ab2:	64b9      	str	r1, [r7, #72]	; 0x48
 8007ab4:	415b      	adcs	r3, r3
 8007ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ab8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007abc:	4641      	mov	r1, r8
 8007abe:	eb12 0a01 	adds.w	sl, r2, r1
 8007ac2:	4649      	mov	r1, r9
 8007ac4:	eb43 0b01 	adc.w	fp, r3, r1
 8007ac8:	f04f 0200 	mov.w	r2, #0
 8007acc:	f04f 0300 	mov.w	r3, #0
 8007ad0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ad4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007ad8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007adc:	4692      	mov	sl, r2
 8007ade:	469b      	mov	fp, r3
 8007ae0:	4643      	mov	r3, r8
 8007ae2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ae6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007aea:	464b      	mov	r3, r9
 8007aec:	eb4b 0303 	adc.w	r3, fp, r3
 8007af0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b00:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007b04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	18db      	adds	r3, r3, r3
 8007b0c:	643b      	str	r3, [r7, #64]	; 0x40
 8007b0e:	4613      	mov	r3, r2
 8007b10:	eb42 0303 	adc.w	r3, r2, r3
 8007b14:	647b      	str	r3, [r7, #68]	; 0x44
 8007b16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007b1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007b1e:	f7f8 ff05 	bl	800092c <__aeabi_uldivmod>
 8007b22:	4602      	mov	r2, r0
 8007b24:	460b      	mov	r3, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	4b3b      	ldr	r3, [pc, #236]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007b2a:	fba3 2301 	umull	r2, r3, r3, r1
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2264      	movs	r2, #100	; 0x64
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	1acb      	subs	r3, r1, r3
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007b40:	fba3 2302 	umull	r2, r3, r3, r2
 8007b44:	095b      	lsrs	r3, r3, #5
 8007b46:	005b      	lsls	r3, r3, #1
 8007b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b4c:	441c      	add	r4, r3
 8007b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b58:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007b60:	4642      	mov	r2, r8
 8007b62:	464b      	mov	r3, r9
 8007b64:	1891      	adds	r1, r2, r2
 8007b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007b68:	415b      	adcs	r3, r3
 8007b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007b70:	4641      	mov	r1, r8
 8007b72:	1851      	adds	r1, r2, r1
 8007b74:	6339      	str	r1, [r7, #48]	; 0x30
 8007b76:	4649      	mov	r1, r9
 8007b78:	414b      	adcs	r3, r1
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	f04f 0200 	mov.w	r2, #0
 8007b80:	f04f 0300 	mov.w	r3, #0
 8007b84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007b88:	4659      	mov	r1, fp
 8007b8a:	00cb      	lsls	r3, r1, #3
 8007b8c:	4651      	mov	r1, sl
 8007b8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b92:	4651      	mov	r1, sl
 8007b94:	00ca      	lsls	r2, r1, #3
 8007b96:	4610      	mov	r0, r2
 8007b98:	4619      	mov	r1, r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	4642      	mov	r2, r8
 8007b9e:	189b      	adds	r3, r3, r2
 8007ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	eb42 0303 	adc.w	r3, r2, r3
 8007bac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007bbc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007bc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	18db      	adds	r3, r3, r3
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bca:	4613      	mov	r3, r2
 8007bcc:	eb42 0303 	adc.w	r3, r2, r3
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007bd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007bda:	f7f8 fea7 	bl	800092c <__aeabi_uldivmod>
 8007bde:	4602      	mov	r2, r0
 8007be0:	460b      	mov	r3, r1
 8007be2:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007be4:	fba3 1302 	umull	r1, r3, r3, r2
 8007be8:	095b      	lsrs	r3, r3, #5
 8007bea:	2164      	movs	r1, #100	; 0x64
 8007bec:	fb01 f303 	mul.w	r3, r1, r3
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	3332      	adds	r3, #50	; 0x32
 8007bf6:	4a08      	ldr	r2, [pc, #32]	; (8007c18 <UART_SetConfig+0x2d4>)
 8007bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfc:	095b      	lsrs	r3, r3, #5
 8007bfe:	f003 0207 	and.w	r2, r3, #7
 8007c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4422      	add	r2, r4
 8007c0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c0c:	e105      	b.n	8007e1a <UART_SetConfig+0x4d6>
 8007c0e:	bf00      	nop
 8007c10:	40011000 	.word	0x40011000
 8007c14:	40011400 	.word	0x40011400
 8007c18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c20:	2200      	movs	r2, #0
 8007c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007c26:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007c2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007c2e:	4642      	mov	r2, r8
 8007c30:	464b      	mov	r3, r9
 8007c32:	1891      	adds	r1, r2, r2
 8007c34:	6239      	str	r1, [r7, #32]
 8007c36:	415b      	adcs	r3, r3
 8007c38:	627b      	str	r3, [r7, #36]	; 0x24
 8007c3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c3e:	4641      	mov	r1, r8
 8007c40:	1854      	adds	r4, r2, r1
 8007c42:	4649      	mov	r1, r9
 8007c44:	eb43 0501 	adc.w	r5, r3, r1
 8007c48:	f04f 0200 	mov.w	r2, #0
 8007c4c:	f04f 0300 	mov.w	r3, #0
 8007c50:	00eb      	lsls	r3, r5, #3
 8007c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c56:	00e2      	lsls	r2, r4, #3
 8007c58:	4614      	mov	r4, r2
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	4643      	mov	r3, r8
 8007c5e:	18e3      	adds	r3, r4, r3
 8007c60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007c64:	464b      	mov	r3, r9
 8007c66:	eb45 0303 	adc.w	r3, r5, r3
 8007c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007c7a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	008b      	lsls	r3, r1, #2
 8007c8e:	4621      	mov	r1, r4
 8007c90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c94:	4621      	mov	r1, r4
 8007c96:	008a      	lsls	r2, r1, #2
 8007c98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007c9c:	f7f8 fe46 	bl	800092c <__aeabi_uldivmod>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	4b60      	ldr	r3, [pc, #384]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	011c      	lsls	r4, r3, #4
 8007cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007cb8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007cbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007cc0:	4642      	mov	r2, r8
 8007cc2:	464b      	mov	r3, r9
 8007cc4:	1891      	adds	r1, r2, r2
 8007cc6:	61b9      	str	r1, [r7, #24]
 8007cc8:	415b      	adcs	r3, r3
 8007cca:	61fb      	str	r3, [r7, #28]
 8007ccc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007cd0:	4641      	mov	r1, r8
 8007cd2:	1851      	adds	r1, r2, r1
 8007cd4:	6139      	str	r1, [r7, #16]
 8007cd6:	4649      	mov	r1, r9
 8007cd8:	414b      	adcs	r3, r1
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ce8:	4659      	mov	r1, fp
 8007cea:	00cb      	lsls	r3, r1, #3
 8007cec:	4651      	mov	r1, sl
 8007cee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cf2:	4651      	mov	r1, sl
 8007cf4:	00ca      	lsls	r2, r1, #3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d04:	464b      	mov	r3, r9
 8007d06:	460a      	mov	r2, r1
 8007d08:	eb42 0303 	adc.w	r3, r2, r3
 8007d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d1a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007d28:	4649      	mov	r1, r9
 8007d2a:	008b      	lsls	r3, r1, #2
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d32:	4641      	mov	r1, r8
 8007d34:	008a      	lsls	r2, r1, #2
 8007d36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007d3a:	f7f8 fdf7 	bl	800092c <__aeabi_uldivmod>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	460b      	mov	r3, r1
 8007d42:	4b39      	ldr	r3, [pc, #228]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007d44:	fba3 1302 	umull	r1, r3, r3, r2
 8007d48:	095b      	lsrs	r3, r3, #5
 8007d4a:	2164      	movs	r1, #100	; 0x64
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	3332      	adds	r3, #50	; 0x32
 8007d56:	4a34      	ldr	r2, [pc, #208]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007d58:	fba2 2303 	umull	r2, r3, r2, r3
 8007d5c:	095b      	lsrs	r3, r3, #5
 8007d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d62:	441c      	add	r4, r3
 8007d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d68:	2200      	movs	r2, #0
 8007d6a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d6c:	677a      	str	r2, [r7, #116]	; 0x74
 8007d6e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007d72:	4642      	mov	r2, r8
 8007d74:	464b      	mov	r3, r9
 8007d76:	1891      	adds	r1, r2, r2
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	415b      	adcs	r3, r3
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d82:	4641      	mov	r1, r8
 8007d84:	1851      	adds	r1, r2, r1
 8007d86:	6039      	str	r1, [r7, #0]
 8007d88:	4649      	mov	r1, r9
 8007d8a:	414b      	adcs	r3, r1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	f04f 0200 	mov.w	r2, #0
 8007d92:	f04f 0300 	mov.w	r3, #0
 8007d96:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007d9a:	4659      	mov	r1, fp
 8007d9c:	00cb      	lsls	r3, r1, #3
 8007d9e:	4651      	mov	r1, sl
 8007da0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007da4:	4651      	mov	r1, sl
 8007da6:	00ca      	lsls	r2, r1, #3
 8007da8:	4610      	mov	r0, r2
 8007daa:	4619      	mov	r1, r3
 8007dac:	4603      	mov	r3, r0
 8007dae:	4642      	mov	r2, r8
 8007db0:	189b      	adds	r3, r3, r2
 8007db2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007db4:	464b      	mov	r3, r9
 8007db6:	460a      	mov	r2, r1
 8007db8:	eb42 0303 	adc.w	r3, r2, r3
 8007dbc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8007dc8:	667a      	str	r2, [r7, #100]	; 0x64
 8007dca:	f04f 0200 	mov.w	r2, #0
 8007dce:	f04f 0300 	mov.w	r3, #0
 8007dd2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	008b      	lsls	r3, r1, #2
 8007dda:	4641      	mov	r1, r8
 8007ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007de0:	4641      	mov	r1, r8
 8007de2:	008a      	lsls	r2, r1, #2
 8007de4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007de8:	f7f8 fda0 	bl	800092c <__aeabi_uldivmod>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4b0d      	ldr	r3, [pc, #52]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007df2:	fba3 1302 	umull	r1, r3, r3, r2
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	2164      	movs	r1, #100	; 0x64
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	3332      	adds	r3, #50	; 0x32
 8007e04:	4a08      	ldr	r2, [pc, #32]	; (8007e28 <UART_SetConfig+0x4e4>)
 8007e06:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	f003 020f 	and.w	r2, r3, #15
 8007e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4422      	add	r2, r4
 8007e18:	609a      	str	r2, [r3, #8]
}
 8007e1a:	bf00      	nop
 8007e1c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007e20:	46bd      	mov	sp, r7
 8007e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e26:	bf00      	nop
 8007e28:	51eb851f 	.word	0x51eb851f

08007e2c <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpr  = 0U; 
 8007e36:	2300      	movs	r3, #0
 8007e38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_ECC_STATE(Init->EccComputation));
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));   

    if(Init->NandBank == FSMC_NAND_BANK2)
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b10      	cmp	r3, #16
 8007e40:	d103      	bne.n	8007e4a <FSMC_NAND_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PCR2;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	e002      	b.n	8007e50 <FSMC_NAND_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PCR3;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Clear PWAITEN, PBKEN, PTYP, PWID, ECCEN, TCLR, TAR and ECCPS bits */
  tmpr &= ((uint32_t)~(FSMC_PCR2_PWAITEN  | FSMC_PCR2_PBKEN | FSMC_PCR2_PTYP | \
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <FSMC_NAND_Init+0x80>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
                       FSMC_PCR2_PWID | FSMC_PCR2_ECCEN | FSMC_PCR2_TCLR | \
                       FSMC_PCR2_TAR | FSMC_PCR2_ECCPS));  
  
  /* Set NAND device control parameters */
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
                     Init->MemoryDataWidth            |\
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
                     FSMC_PCR_MEMORY_TYPE_NAND        |\
 8007e60:	431a      	orrs	r2, r3
                     Init->EccComputation             |\
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryDataWidth            |\
 8007e66:	431a      	orrs	r2, r3
                     Init->ECCPageSize                |\
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
                     Init->EccComputation             |\
 8007e6c:	431a      	orrs	r2, r3
                     ((Init->TCLRSetupTime) << 9U)    |\
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	695b      	ldr	r3, [r3, #20]
 8007e72:	025b      	lsls	r3, r3, #9
                     Init->ECCPageSize                |\
 8007e74:	431a      	orrs	r2, r3
                     ((Init->TARSetupTime) << 13U));   
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	035b      	lsls	r3, r3, #13
  tmpr |= (uint32_t)(Init->Waitfeature                |\
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f043 0308 	orr.w	r3, r3, #8
 8007e86:	60fb      	str	r3, [r7, #12]
  
  if(Init->NandBank == FSMC_NAND_BANK2)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2b10      	cmp	r3, #16
 8007e8e:	d103      	bne.n	8007e98 <FSMC_NAND_Init+0x6c>
  {
    /* NAND bank 2 registers configuration */
    Device->PCR2  = tmpr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	e002      	b.n	8007e9e <FSMC_NAND_Init+0x72>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PCR3  = tmpr;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	621a      	str	r2, [r3, #32]
  }
  
  return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr
 8007eac:	fff00181 	.word	0xfff00181

08007eb0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d103      	bne.n	8007ece <FSMC_NAND_CommonSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PMEM2;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e002      	b.n	8007ed4 <FSMC_NAND_CommonSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PMEM3;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed2:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear MEMSETx, MEMWAITx, MEMHOLDx and MEMHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PMEM2_MEMSET2  | FSMC_PMEM2_MEMWAIT2 | FSMC_PMEM2_MEMHOLD2 | \
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]
                       FSMC_PMEM2_MEMHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007ee2:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8007eea:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007ef2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	617b      	str	r3, [r7, #20]
                       );
                            
  if(Bank == FSMC_NAND_BANK2)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d103      	bne.n	8007f08 <FSMC_NAND_CommonSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PMEM2 = tmpr;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	609a      	str	r2, [r3, #8]
 8007f06:	e002      	b.n	8007f0e <FSMC_NAND_CommonSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PMEM3 = tmpr;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	697a      	ldr	r2, [r7, #20]
 8007f0c:	629a      	str	r2, [r3, #40]	; 0x28
  }  
  
  return HAL_OK;  
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	371c      	adds	r7, #28
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Timing Pointer to NAND timing structure
  * @param  Bank NAND bank number 
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b087      	sub	sp, #28
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;  
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_SETUP_TIME(Timing->SetupTime));
  assert_param(IS_FSMC_WAIT_TIME(Timing->WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  
  if(Bank == FSMC_NAND_BANK2)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d103      	bne.n	8007f3a <FSMC_NAND_AttributeSpace_Timing_Init+0x1e>
  {
    /* Get the NAND bank 2 register value */
    tmpr = Device->PATT2;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	617b      	str	r3, [r7, #20]
 8007f38:	e002      	b.n	8007f40 <FSMC_NAND_AttributeSpace_Timing_Init+0x24>
  }
  else
  {
    /* Get the NAND bank 3 register value */
    tmpr = Device->PATT3;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	617b      	str	r3, [r7, #20]
  } 
  
  /* Clear ATTSETx, ATTWAITx, ATTHOLDx and ATTHIZx bits */
  tmpr &= ((uint32_t)~(FSMC_PATT2_ATTSET2  | FSMC_PATT2_ATTWAIT2 | FSMC_PATT2_ATTHOLD2 | \
 8007f40:	2300      	movs	r3, #0
 8007f42:	617b      	str	r3, [r7, #20]
                       FSMC_PATT2_ATTHIZ2));
  
  /* Set FSMC_NAND device timing parameters */
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	681a      	ldr	r2, [r3, #0]
                       ((Timing->WaitSetupTime) << 8U)     |\
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	021b      	lsls	r3, r3, #8
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007f4e:	431a      	orrs	r2, r3
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	041b      	lsls	r3, r3, #16
                       ((Timing->WaitSetupTime) << 8U)     |\
 8007f56:	431a      	orrs	r2, r3
                       ((Timing->HiZSetupTime) << 24U)
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	061b      	lsls	r3, r3, #24
                       ((Timing->HoldSetupTime) << 16U)    |\
 8007f5e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Timing->SetupTime                     |\
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]
                       );
                       
  if(Bank == FSMC_NAND_BANK2)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2b10      	cmp	r3, #16
 8007f6a:	d103      	bne.n	8007f74 <FSMC_NAND_AttributeSpace_Timing_Init+0x58>
  {
    /* NAND bank 2 registers configuration */
    Device->PATT2 = tmpr;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	60da      	str	r2, [r3, #12]
 8007f72:	e002      	b.n	8007f7a <FSMC_NAND_AttributeSpace_Timing_Init+0x5e>
  }
  else
  {
    /* NAND bank 3 registers configuration */
    Device->PATT3 = tmpr;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	62da      	str	r2, [r3, #44]	; 0x2c
  }   
  
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <__NVIC_SetPriority>:
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	db0a      	blt.n	8007fb2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	b2da      	uxtb	r2, r3
 8007fa0:	490c      	ldr	r1, [pc, #48]	; (8007fd4 <__NVIC_SetPriority+0x4c>)
 8007fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fa6:	0112      	lsls	r2, r2, #4
 8007fa8:	b2d2      	uxtb	r2, r2
 8007faa:	440b      	add	r3, r1
 8007fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007fb0:	e00a      	b.n	8007fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	b2da      	uxtb	r2, r3
 8007fb6:	4908      	ldr	r1, [pc, #32]	; (8007fd8 <__NVIC_SetPriority+0x50>)
 8007fb8:	79fb      	ldrb	r3, [r7, #7]
 8007fba:	f003 030f 	and.w	r3, r3, #15
 8007fbe:	3b04      	subs	r3, #4
 8007fc0:	0112      	lsls	r2, r2, #4
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	761a      	strb	r2, [r3, #24]
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	e000e100 	.word	0xe000e100
 8007fd8:	e000ed00 	.word	0xe000ed00

08007fdc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <SysTick_Handler+0x1c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fe4:	f001 fea4 	bl	8009d30 <xTaskGetSchedulerState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d001      	beq.n	8007ff2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fee:	f002 fc8b 	bl	800a908 <xPortSysTickHandler>
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	e000e010 	.word	0xe000e010

08007ffc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008000:	2100      	movs	r1, #0
 8008002:	f06f 0004 	mvn.w	r0, #4
 8008006:	f7ff ffbf 	bl	8007f88 <__NVIC_SetPriority>
#endif
}
 800800a:	bf00      	nop
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008016:	f3ef 8305 	mrs	r3, IPSR
 800801a:	603b      	str	r3, [r7, #0]
  return(result);
 800801c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008022:	f06f 0305 	mvn.w	r3, #5
 8008026:	607b      	str	r3, [r7, #4]
 8008028:	e00f      	b.n	800804a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800802a:	4b0a      	ldr	r3, [pc, #40]	; (8008054 <osKernelInitialize+0x44>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d108      	bne.n	8008044 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8008032:	4809      	ldr	r0, [pc, #36]	; (8008058 <osKernelInitialize+0x48>)
 8008034:	f002 fe64 	bl	800ad00 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <osKernelInitialize+0x44>)
 800803a:	2201      	movs	r2, #1
 800803c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800803e:	2300      	movs	r3, #0
 8008040:	607b      	str	r3, [r7, #4]
 8008042:	e002      	b.n	800804a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008048:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800804a:	687b      	ldr	r3, [r7, #4]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}
 8008054:	20000bb4 	.word	0x20000bb4
 8008058:	20000064 	.word	0x20000064

0800805c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008062:	f3ef 8305 	mrs	r3, IPSR
 8008066:	603b      	str	r3, [r7, #0]
  return(result);
 8008068:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <osKernelStart+0x1a>
    stat = osErrorISR;
 800806e:	f06f 0305 	mvn.w	r3, #5
 8008072:	607b      	str	r3, [r7, #4]
 8008074:	e010      	b.n	8008098 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008076:	4b0b      	ldr	r3, [pc, #44]	; (80080a4 <osKernelStart+0x48>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d109      	bne.n	8008092 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800807e:	f7ff ffbd 	bl	8007ffc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008082:	4b08      	ldr	r3, [pc, #32]	; (80080a4 <osKernelStart+0x48>)
 8008084:	2202      	movs	r2, #2
 8008086:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008088:	f001 f9f6 	bl	8009478 <vTaskStartScheduler>
      stat = osOK;
 800808c:	2300      	movs	r3, #0
 800808e:	607b      	str	r3, [r7, #4]
 8008090:	e002      	b.n	8008098 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008096:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008098:	687b      	ldr	r3, [r7, #4]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	20000bb4 	.word	0x20000bb4

080080a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08e      	sub	sp, #56	; 0x38
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080b4:	2300      	movs	r3, #0
 80080b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b8:	f3ef 8305 	mrs	r3, IPSR
 80080bc:	617b      	str	r3, [r7, #20]
  return(result);
 80080be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d17e      	bne.n	80081c2 <osThreadNew+0x11a>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d07b      	beq.n	80081c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80080ca:	2380      	movs	r3, #128	; 0x80
 80080cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80080ce:	2318      	movs	r3, #24
 80080d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80080d2:	2300      	movs	r3, #0
 80080d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80080d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d045      	beq.n	800816e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <osThreadNew+0x48>
        name = attr->name;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d002      	beq.n	80080fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d008      	beq.n	8008116 <osThreadNew+0x6e>
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	2b38      	cmp	r3, #56	; 0x38
 8008108:	d805      	bhi.n	8008116 <osThreadNew+0x6e>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f003 0301 	and.w	r3, r3, #1
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <osThreadNew+0x72>
        return (NULL);
 8008116:	2300      	movs	r3, #0
 8008118:	e054      	b.n	80081c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	089b      	lsrs	r3, r3, #2
 8008128:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00e      	beq.n	8008150 <osThreadNew+0xa8>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	2bbb      	cmp	r3, #187	; 0xbb
 8008138:	d90a      	bls.n	8008150 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800813e:	2b00      	cmp	r3, #0
 8008140:	d006      	beq.n	8008150 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695b      	ldr	r3, [r3, #20]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <osThreadNew+0xa8>
        mem = 1;
 800814a:	2301      	movs	r3, #1
 800814c:	61bb      	str	r3, [r7, #24]
 800814e:	e010      	b.n	8008172 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10c      	bne.n	8008172 <osThreadNew+0xca>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	68db      	ldr	r3, [r3, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d108      	bne.n	8008172 <osThreadNew+0xca>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	691b      	ldr	r3, [r3, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <osThreadNew+0xca>
          mem = 0;
 8008168:	2300      	movs	r3, #0
 800816a:	61bb      	str	r3, [r7, #24]
 800816c:	e001      	b.n	8008172 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800816e:	2300      	movs	r3, #0
 8008170:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d110      	bne.n	800819a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	6a3a      	ldr	r2, [r7, #32]
 800818c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800818e:	68f8      	ldr	r0, [r7, #12]
 8008190:	f000 ff86 	bl	80090a0 <xTaskCreateStatic>
 8008194:	4603      	mov	r3, r0
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	e013      	b.n	80081c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d110      	bne.n	80081c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	b29a      	uxth	r2, r3
 80081a4:	f107 0310 	add.w	r3, r7, #16
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	9300      	str	r3, [sp, #0]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f000 ffd1 	bl	800915a <xTaskCreate>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d001      	beq.n	80081c2 <osThreadNew+0x11a>
            hTask = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80081c2:	693b      	ldr	r3, [r7, #16]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3728      	adds	r7, #40	; 0x28
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d4:	f3ef 8305 	mrs	r3, IPSR
 80081d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80081da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <osDelay+0x1c>
    stat = osErrorISR;
 80081e0:	f06f 0305 	mvn.w	r3, #5
 80081e4:	60fb      	str	r3, [r7, #12]
 80081e6:	e007      	b.n	80081f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80081e8:	2300      	movs	r3, #0
 80081ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f90c 	bl	8009410 <vTaskDelay>
    }
  }

  return (stat);
 80081f8:	68fb      	ldr	r3, [r7, #12]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008202:	b580      	push	{r7, lr}
 8008204:	b08a      	sub	sp, #40	; 0x28
 8008206:	af02      	add	r7, sp, #8
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800820e:	2300      	movs	r3, #0
 8008210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008212:	f3ef 8305 	mrs	r3, IPSR
 8008216:	613b      	str	r3, [r7, #16]
  return(result);
 8008218:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800821a:	2b00      	cmp	r3, #0
 800821c:	d175      	bne.n	800830a <osSemaphoreNew+0x108>
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d072      	beq.n	800830a <osSemaphoreNew+0x108>
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	429a      	cmp	r2, r3
 800822a:	d86e      	bhi.n	800830a <osSemaphoreNew+0x108>
    mem = -1;
 800822c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008230:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d015      	beq.n	8008264 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d006      	beq.n	800824e <osSemaphoreNew+0x4c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	2b4f      	cmp	r3, #79	; 0x4f
 8008246:	d902      	bls.n	800824e <osSemaphoreNew+0x4c>
        mem = 1;
 8008248:	2301      	movs	r3, #1
 800824a:	61bb      	str	r3, [r7, #24]
 800824c:	e00c      	b.n	8008268 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d108      	bne.n	8008268 <osSemaphoreNew+0x66>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d104      	bne.n	8008268 <osSemaphoreNew+0x66>
          mem = 0;
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
 8008262:	e001      	b.n	8008268 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008264:	2300      	movs	r3, #0
 8008266:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008268:	69bb      	ldr	r3, [r7, #24]
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800826e:	d04c      	beq.n	800830a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b01      	cmp	r3, #1
 8008274:	d128      	bne.n	80082c8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d10a      	bne.n	8008292 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2203      	movs	r2, #3
 8008282:	9200      	str	r2, [sp, #0]
 8008284:	2200      	movs	r2, #0
 8008286:	2100      	movs	r1, #0
 8008288:	2001      	movs	r0, #1
 800828a:	f000 f993 	bl	80085b4 <xQueueGenericCreateStatic>
 800828e:	61f8      	str	r0, [r7, #28]
 8008290:	e005      	b.n	800829e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008292:	2203      	movs	r2, #3
 8008294:	2100      	movs	r1, #0
 8008296:	2001      	movs	r0, #1
 8008298:	f000 fa04 	bl	80086a4 <xQueueGenericCreate>
 800829c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d022      	beq.n	80082ea <osSemaphoreNew+0xe8>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d01f      	beq.n	80082ea <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	2200      	movs	r2, #0
 80082ae:	2100      	movs	r1, #0
 80082b0:	69f8      	ldr	r0, [r7, #28]
 80082b2:	f000 fabf 	bl	8008834 <xQueueGenericSend>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d016      	beq.n	80082ea <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80082bc:	69f8      	ldr	r0, [r7, #28]
 80082be:	f000 fd33 	bl	8008d28 <vQueueDelete>
            hSemaphore = NULL;
 80082c2:	2300      	movs	r3, #0
 80082c4:	61fb      	str	r3, [r7, #28]
 80082c6:	e010      	b.n	80082ea <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d108      	bne.n	80082e0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	461a      	mov	r2, r3
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f000 fa41 	bl	800875e <xQueueCreateCountingSemaphoreStatic>
 80082dc:	61f8      	str	r0, [r7, #28]
 80082de:	e004      	b.n	80082ea <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 fa72 	bl	80087cc <xQueueCreateCountingSemaphore>
 80082e8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80082ea:	69fb      	ldr	r3, [r7, #28]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d003      	beq.n	80082fe <osSemaphoreNew+0xfc>
          name = attr->name;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	e001      	b.n	8008302 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80082fe:	2300      	movs	r3, #0
 8008300:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008302:	6979      	ldr	r1, [r7, #20]
 8008304:	69f8      	ldr	r0, [r7, #28]
 8008306:	f000 fe43 	bl	8008f90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800830a:	69fb      	ldr	r3, [r7, #28]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <vApplicationGetIdleTaskMemory+0x2c>)
 8008324:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	4a06      	ldr	r2, [pc, #24]	; (8008344 <vApplicationGetIdleTaskMemory+0x30>)
 800832a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2280      	movs	r2, #128	; 0x80
 8008330:	601a      	str	r2, [r3, #0]
}
 8008332:	bf00      	nop
 8008334:	3714      	adds	r7, #20
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	20004bb8 	.word	0x20004bb8
 8008344:	20004c74 	.word	0x20004c74

08008348 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	4a07      	ldr	r2, [pc, #28]	; (8008374 <vApplicationGetTimerTaskMemory+0x2c>)
 8008358:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	4a06      	ldr	r2, [pc, #24]	; (8008378 <vApplicationGetTimerTaskMemory+0x30>)
 800835e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008366:	601a      	str	r2, [r3, #0]
}
 8008368:	bf00      	nop
 800836a:	3714      	adds	r7, #20
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	20004e74 	.word	0x20004e74
 8008378:	20004f30 	.word	0x20004f30

0800837c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f103 0208 	add.w	r2, r3, #8
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008394:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f103 0208 	add.w	r2, r3, #8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f103 0208 	add.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2200      	movs	r2, #0
 80083c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
 80083de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008434:	d103      	bne.n	800843e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	60fb      	str	r3, [r7, #12]
 800843c:	e00c      	b.n	8008458 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3308      	adds	r3, #8
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	e002      	b.n	800844c <vListInsert+0x2e>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	429a      	cmp	r2, r3
 8008456:	d2f6      	bcs.n	8008446 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	601a      	str	r2, [r3, #0]
}
 8008484:	bf00      	nop
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008490:	b480      	push	{r7}
 8008492:	b085      	sub	sp, #20
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	6892      	ldr	r2, [r2, #8]
 80084a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6852      	ldr	r2, [r2, #4]
 80084b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d103      	bne.n	80084c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	1e5a      	subs	r2, r3, #1
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3714      	adds	r7, #20
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10a      	bne.n	800850e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800850a:	bf00      	nop
 800850c:	e7fe      	b.n	800850c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800850e:	f002 f969 	bl	800a7e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800851a:	68f9      	ldr	r1, [r7, #12]
 800851c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800851e:	fb01 f303 	mul.w	r3, r1, r3
 8008522:	441a      	add	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853e:	3b01      	subs	r3, #1
 8008540:	68f9      	ldr	r1, [r7, #12]
 8008542:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008544:	fb01 f303 	mul.w	r3, r1, r3
 8008548:	441a      	add	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	22ff      	movs	r2, #255	; 0xff
 8008552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	22ff      	movs	r2, #255	; 0xff
 800855a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d114      	bne.n	800858e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d01a      	beq.n	80085a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3310      	adds	r3, #16
 8008570:	4618      	mov	r0, r3
 8008572:	f001 fa1b 	bl	80099ac <xTaskRemoveFromEventList>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d012      	beq.n	80085a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800857c:	4b0c      	ldr	r3, [pc, #48]	; (80085b0 <xQueueGenericReset+0xcc>)
 800857e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008582:	601a      	str	r2, [r3, #0]
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	f3bf 8f6f 	isb	sy
 800858c:	e009      	b.n	80085a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3310      	adds	r3, #16
 8008592:	4618      	mov	r0, r3
 8008594:	f7ff fef2 	bl	800837c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	3324      	adds	r3, #36	; 0x24
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff feed 	bl	800837c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80085a2:	f002 f94f 	bl	800a844 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80085a6:	2301      	movs	r3, #1
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08e      	sub	sp, #56	; 0x38
 80085b8:	af02      	add	r7, sp, #8
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
 80085c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d10a      	bne.n	80085de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80085c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10a      	bne.n	80085fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80085e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e8:	f383 8811 	msr	BASEPRI, r3
 80085ec:	f3bf 8f6f 	isb	sy
 80085f0:	f3bf 8f4f 	dsb	sy
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d002      	beq.n	8008606 <xQueueGenericCreateStatic+0x52>
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <xQueueGenericCreateStatic+0x56>
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <xQueueGenericCreateStatic+0x58>
 800860a:	2300      	movs	r3, #0
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	623b      	str	r3, [r7, #32]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d102      	bne.n	8008632 <xQueueGenericCreateStatic+0x7e>
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <xQueueGenericCreateStatic+0x82>
 8008632:	2301      	movs	r3, #1
 8008634:	e000      	b.n	8008638 <xQueueGenericCreateStatic+0x84>
 8008636:	2300      	movs	r3, #0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d10a      	bne.n	8008652 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	61fb      	str	r3, [r7, #28]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008652:	2350      	movs	r3, #80	; 0x50
 8008654:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b50      	cmp	r3, #80	; 0x50
 800865a:	d00a      	beq.n	8008672 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	61bb      	str	r3, [r7, #24]
}
 800866e:	bf00      	nop
 8008670:	e7fe      	b.n	8008670 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008672:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00d      	beq.n	800869a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800867e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008686:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	9300      	str	r3, [sp, #0]
 800868e:	4613      	mov	r3, r2
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	68b9      	ldr	r1, [r7, #8]
 8008694:	68f8      	ldr	r0, [r7, #12]
 8008696:	f000 f83f 	bl	8008718 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800869a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800869c:	4618      	mov	r0, r3
 800869e:	3730      	adds	r7, #48	; 0x30
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b08a      	sub	sp, #40	; 0x28
 80086a8:	af02      	add	r7, sp, #8
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10a      	bne.n	80086ce <xQueueGenericCreate+0x2a>
	__asm volatile
 80086b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	613b      	str	r3, [r7, #16]
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	3350      	adds	r3, #80	; 0x50
 80086dc:	4618      	mov	r0, r3
 80086de:	f002 f9a3 	bl	800aa28 <pvPortMalloc>
 80086e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d011      	beq.n	800870e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3350      	adds	r3, #80	; 0x50
 80086f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80086fc:	79fa      	ldrb	r2, [r7, #7]
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	4613      	mov	r3, r2
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	68f8      	ldr	r0, [r7, #12]
 800870a:	f000 f805 	bl	8008718 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800870e:	69bb      	ldr	r3, [r7, #24]
	}
 8008710:	4618      	mov	r0, r3
 8008712:	3720      	adds	r7, #32
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d103      	bne.n	8008734 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	69ba      	ldr	r2, [r7, #24]
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e002      	b.n	800873a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008746:	2101      	movs	r1, #1
 8008748:	69b8      	ldr	r0, [r7, #24]
 800874a:	f7ff fecb 	bl	80084e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	78fa      	ldrb	r2, [r7, #3]
 8008752:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008756:	bf00      	nop
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800875e:	b580      	push	{r7, lr}
 8008760:	b08a      	sub	sp, #40	; 0x28
 8008762:	af02      	add	r7, sp, #8
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d10a      	bne.n	8008786 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	61bb      	str	r3, [r7, #24]
}
 8008782:	bf00      	nop
 8008784:	e7fe      	b.n	8008784 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008786:	68ba      	ldr	r2, [r7, #8]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	429a      	cmp	r2, r3
 800878c:	d90a      	bls.n	80087a4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	617b      	str	r3, [r7, #20]
}
 80087a0:	bf00      	nop
 80087a2:	e7fe      	b.n	80087a2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80087a4:	2302      	movs	r3, #2
 80087a6:	9300      	str	r3, [sp, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	2100      	movs	r1, #0
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff00 	bl	80085b4 <xQueueGenericCreateStatic>
 80087b4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d002      	beq.n	80087c2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80087c2:	69fb      	ldr	r3, [r7, #28]
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80087dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	613b      	str	r3, [r7, #16]
}
 80087ee:	bf00      	nop
 80087f0:	e7fe      	b.n	80087f0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80087f2:	683a      	ldr	r2, [r7, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d90a      	bls.n	8008810 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60fb      	str	r3, [r7, #12]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008810:	2202      	movs	r2, #2
 8008812:	2100      	movs	r1, #0
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff ff45 	bl	80086a4 <xQueueGenericCreate>
 800881a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d002      	beq.n	8008828 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008828:	697b      	ldr	r3, [r7, #20]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08e      	sub	sp, #56	; 0x38
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
 8008840:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008842:	2300      	movs	r3, #0
 8008844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10a      	bne.n	8008866 <xQueueGenericSend+0x32>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <xQueueGenericSend+0x40>
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <xQueueGenericSend+0x44>
 8008874:	2301      	movs	r3, #1
 8008876:	e000      	b.n	800887a <xQueueGenericSend+0x46>
 8008878:	2300      	movs	r3, #0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <xQueueGenericSend+0x60>
	__asm volatile
 800887e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008882:	f383 8811 	msr	BASEPRI, r3
 8008886:	f3bf 8f6f 	isb	sy
 800888a:	f3bf 8f4f 	dsb	sy
 800888e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008890:	bf00      	nop
 8008892:	e7fe      	b.n	8008892 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d103      	bne.n	80088a2 <xQueueGenericSend+0x6e>
 800889a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <xQueueGenericSend+0x72>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <xQueueGenericSend+0x74>
 80088a6:	2300      	movs	r3, #0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10a      	bne.n	80088c2 <xQueueGenericSend+0x8e>
	__asm volatile
 80088ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b0:	f383 8811 	msr	BASEPRI, r3
 80088b4:	f3bf 8f6f 	isb	sy
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	623b      	str	r3, [r7, #32]
}
 80088be:	bf00      	nop
 80088c0:	e7fe      	b.n	80088c0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088c2:	f001 fa35 	bl	8009d30 <xTaskGetSchedulerState>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <xQueueGenericSend+0x9e>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <xQueueGenericSend+0xa2>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <xQueueGenericSend+0xa4>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xQueueGenericSend+0xbe>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	61fb      	str	r3, [r7, #28]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088f2:	f001 ff77 	bl	800a7e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <xQueueGenericSend+0xd4>
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d129      	bne.n	800895c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008908:	683a      	ldr	r2, [r7, #0]
 800890a:	68b9      	ldr	r1, [r7, #8]
 800890c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890e:	f000 fa2e 	bl	8008d6e <prvCopyDataToQueue>
 8008912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b00      	cmp	r3, #0
 800891a:	d010      	beq.n	800893e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	3324      	adds	r3, #36	; 0x24
 8008920:	4618      	mov	r0, r3
 8008922:	f001 f843 	bl	80099ac <xTaskRemoveFromEventList>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d013      	beq.n	8008954 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800892c:	4b3f      	ldr	r3, [pc, #252]	; (8008a2c <xQueueGenericSend+0x1f8>)
 800892e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	e00a      	b.n	8008954 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800893e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008944:	4b39      	ldr	r3, [pc, #228]	; (8008a2c <xQueueGenericSend+0x1f8>)
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	f3bf 8f4f 	dsb	sy
 8008950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008954:	f001 ff76 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 8008958:	2301      	movs	r3, #1
 800895a:	e063      	b.n	8008a24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d103      	bne.n	800896a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008962:	f001 ff6f 	bl	800a844 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008966:	2300      	movs	r3, #0
 8008968:	e05c      	b.n	8008a24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800896a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896c:	2b00      	cmp	r3, #0
 800896e:	d106      	bne.n	800897e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008970:	f107 0314 	add.w	r3, r7, #20
 8008974:	4618      	mov	r0, r3
 8008976:	f001 f87d 	bl	8009a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800897a:	2301      	movs	r3, #1
 800897c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800897e:	f001 ff61 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008982:	f000 fde9 	bl	8009558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008986:	f001 ff2d 	bl	800a7e4 <vPortEnterCritical>
 800898a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008990:	b25b      	sxtb	r3, r3
 8008992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008996:	d103      	bne.n	80089a0 <xQueueGenericSend+0x16c>
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2200      	movs	r2, #0
 800899c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089a6:	b25b      	sxtb	r3, r3
 80089a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSend+0x182>
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089b6:	f001 ff45 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089ba:	1d3a      	adds	r2, r7, #4
 80089bc:	f107 0314 	add.w	r3, r7, #20
 80089c0:	4611      	mov	r1, r2
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f86c 	bl	8009aa0 <xTaskCheckForTimeOut>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d124      	bne.n	8008a18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80089ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089d0:	f000 fac5 	bl	8008f5e <prvIsQueueFull>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d018      	beq.n	8008a0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80089da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089dc:	3310      	adds	r3, #16
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 ff92 	bl	800990c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80089e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ea:	f000 fa50 	bl	8008e8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80089ee:	f000 fdc1 	bl	8009574 <xTaskResumeAll>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f47f af7c 	bne.w	80088f2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80089fa:	4b0c      	ldr	r3, [pc, #48]	; (8008a2c <xQueueGenericSend+0x1f8>)
 80089fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	f3bf 8f6f 	isb	sy
 8008a0a:	e772      	b.n	80088f2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a0e:	f000 fa3e 	bl	8008e8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a12:	f000 fdaf 	bl	8009574 <xTaskResumeAll>
 8008a16:	e76c      	b.n	80088f2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a1a:	f000 fa38 	bl	8008e8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a1e:	f000 fda9 	bl	8009574 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3738      	adds	r7, #56	; 0x38
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}
 8008a2c:	e000ed04 	.word	0xe000ed04

08008a30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b090      	sub	sp, #64	; 0x40
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	60b9      	str	r1, [r7, #8]
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a5a:	bf00      	nop
 8008a5c:	e7fe      	b.n	8008a5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <xQueueGenericSendFromISR+0x3c>
 8008a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <xQueueGenericSendFromISR+0x40>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <xQueueGenericSendFromISR+0x42>
 8008a70:	2300      	movs	r3, #0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d10a      	bne.n	8008a8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7a:	f383 8811 	msr	BASEPRI, r3
 8008a7e:	f3bf 8f6f 	isb	sy
 8008a82:	f3bf 8f4f 	dsb	sy
 8008a86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a88:	bf00      	nop
 8008a8a:	e7fe      	b.n	8008a8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d103      	bne.n	8008a9a <xQueueGenericSendFromISR+0x6a>
 8008a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <xQueueGenericSendFromISR+0x6e>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <xQueueGenericSendFromISR+0x70>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d10a      	bne.n	8008aba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	623b      	str	r3, [r7, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aba:	f001 ff75 	bl	800a9a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008abe:	f3ef 8211 	mrs	r2, BASEPRI
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	61fa      	str	r2, [r7, #28]
 8008ad4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008ad6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d302      	bcc.n	8008aec <xQueueGenericSendFromISR+0xbc>
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d12f      	bne.n	8008b4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008afc:	683a      	ldr	r2, [r7, #0]
 8008afe:	68b9      	ldr	r1, [r7, #8]
 8008b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b02:	f000 f934 	bl	8008d6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b0e:	d112      	bne.n	8008b36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d016      	beq.n	8008b46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b1a:	3324      	adds	r3, #36	; 0x24
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 ff45 	bl	80099ac <xTaskRemoveFromEventList>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00b      	beq.n	8008b46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e007      	b.n	8008b46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	b25a      	sxtb	r2, r3
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b46:	2301      	movs	r3, #1
 8008b48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b4a:	e001      	b.n	8008b50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008b5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3740      	adds	r7, #64	; 0x40
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	; 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b74:	2300      	movs	r3, #0
 8008b76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10a      	bne.n	8008b98 <xQueueReceive+0x30>
	__asm volatile
 8008b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b86:	f383 8811 	msr	BASEPRI, r3
 8008b8a:	f3bf 8f6f 	isb	sy
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	623b      	str	r3, [r7, #32]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d103      	bne.n	8008ba6 <xQueueReceive+0x3e>
 8008b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <xQueueReceive+0x42>
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e000      	b.n	8008bac <xQueueReceive+0x44>
 8008baa:	2300      	movs	r3, #0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d10a      	bne.n	8008bc6 <xQueueReceive+0x5e>
	__asm volatile
 8008bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb4:	f383 8811 	msr	BASEPRI, r3
 8008bb8:	f3bf 8f6f 	isb	sy
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	61fb      	str	r3, [r7, #28]
}
 8008bc2:	bf00      	nop
 8008bc4:	e7fe      	b.n	8008bc4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008bc6:	f001 f8b3 	bl	8009d30 <xTaskGetSchedulerState>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d102      	bne.n	8008bd6 <xQueueReceive+0x6e>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d101      	bne.n	8008bda <xQueueReceive+0x72>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	e000      	b.n	8008bdc <xQueueReceive+0x74>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10a      	bne.n	8008bf6 <xQueueReceive+0x8e>
	__asm volatile
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	61bb      	str	r3, [r7, #24]
}
 8008bf2:	bf00      	nop
 8008bf4:	e7fe      	b.n	8008bf4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bf6:	f001 fdf5 	bl	800a7e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01f      	beq.n	8008c46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0a:	f000 f91a 	bl	8008e42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c10:	1e5a      	subs	r2, r3, #1
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00f      	beq.n	8008c3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	3310      	adds	r3, #16
 8008c22:	4618      	mov	r0, r3
 8008c24:	f000 fec2 	bl	80099ac <xTaskRemoveFromEventList>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d007      	beq.n	8008c3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c2e:	4b3d      	ldr	r3, [pc, #244]	; (8008d24 <xQueueReceive+0x1bc>)
 8008c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	f3bf 8f4f 	dsb	sy
 8008c3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c3e:	f001 fe01 	bl	800a844 <vPortExitCritical>
				return pdPASS;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e069      	b.n	8008d1a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d103      	bne.n	8008c54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008c4c:	f001 fdfa 	bl	800a844 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e062      	b.n	8008d1a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d106      	bne.n	8008c68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c5a:	f107 0310 	add.w	r3, r7, #16
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 ff08 	bl	8009a74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c64:	2301      	movs	r3, #1
 8008c66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c68:	f001 fdec 	bl	800a844 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c6c:	f000 fc74 	bl	8009558 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c70:	f001 fdb8 	bl	800a7e4 <vPortEnterCritical>
 8008c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c7a:	b25b      	sxtb	r3, r3
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c80:	d103      	bne.n	8008c8a <xQueueReceive+0x122>
 8008c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c90:	b25b      	sxtb	r3, r3
 8008c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c96:	d103      	bne.n	8008ca0 <xQueueReceive+0x138>
 8008c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ca0:	f001 fdd0 	bl	800a844 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ca4:	1d3a      	adds	r2, r7, #4
 8008ca6:	f107 0310 	add.w	r3, r7, #16
 8008caa:	4611      	mov	r1, r2
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fef7 	bl	8009aa0 <xTaskCheckForTimeOut>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d123      	bne.n	8008d00 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cba:	f000 f93a 	bl	8008f32 <prvIsQueueEmpty>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d017      	beq.n	8008cf4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	3324      	adds	r3, #36	; 0x24
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	4611      	mov	r1, r2
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fe1d 	bl	800990c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cd4:	f000 f8db 	bl	8008e8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008cd8:	f000 fc4c 	bl	8009574 <xTaskResumeAll>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d189      	bne.n	8008bf6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ce2:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <xQueueReceive+0x1bc>)
 8008ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce8:	601a      	str	r2, [r3, #0]
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	f3bf 8f6f 	isb	sy
 8008cf2:	e780      	b.n	8008bf6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008cf6:	f000 f8ca 	bl	8008e8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008cfa:	f000 fc3b 	bl	8009574 <xTaskResumeAll>
 8008cfe:	e77a      	b.n	8008bf6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d02:	f000 f8c4 	bl	8008e8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d06:	f000 fc35 	bl	8009574 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d0c:	f000 f911 	bl	8008f32 <prvIsQueueEmpty>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f43f af6f 	beq.w	8008bf6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3730      	adds	r7, #48	; 0x30
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	e000ed04 	.word	0xe000ed04

08008d28 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <vQueueDelete+0x28>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	60bb      	str	r3, [r7, #8]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f947 	bl	8008fe4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008d60:	68f8      	ldr	r0, [r7, #12]
 8008d62:	f001 ff05 	bl	800ab70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008d66:	bf00      	nop
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b086      	sub	sp, #24
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	60f8      	str	r0, [r7, #12]
 8008d76:	60b9      	str	r1, [r7, #8]
 8008d78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10d      	bne.n	8008da8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d14d      	bne.n	8008e30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 ffe7 	bl	8009d6c <xTaskPriorityDisinherit>
 8008d9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	609a      	str	r2, [r3, #8]
 8008da6:	e043      	b.n	8008e30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d119      	bne.n	8008de2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6858      	ldr	r0, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	461a      	mov	r2, r3
 8008db8:	68b9      	ldr	r1, [r7, #8]
 8008dba:	f002 f957 	bl	800b06c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d32b      	bcc.n	8008e30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	605a      	str	r2, [r3, #4]
 8008de0:	e026      	b.n	8008e30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	68d8      	ldr	r0, [r3, #12]
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	461a      	mov	r2, r3
 8008dec:	68b9      	ldr	r1, [r7, #8]
 8008dee:	f002 f93d 	bl	800b06c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfa:	425b      	negs	r3, r3
 8008dfc:	441a      	add	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	68da      	ldr	r2, [r3, #12]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d207      	bcs.n	8008e1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	689a      	ldr	r2, [r3, #8]
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e16:	425b      	negs	r3, r3
 8008e18:	441a      	add	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b02      	cmp	r3, #2
 8008e22:	d105      	bne.n	8008e30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3b01      	subs	r3, #1
 8008e2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008e38:	697b      	ldr	r3, [r7, #20]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3718      	adds	r7, #24
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d018      	beq.n	8008e86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68da      	ldr	r2, [r3, #12]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e5c:	441a      	add	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	68da      	ldr	r2, [r3, #12]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d303      	bcc.n	8008e76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	68d9      	ldr	r1, [r3, #12]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e7e:	461a      	mov	r2, r3
 8008e80:	6838      	ldr	r0, [r7, #0]
 8008e82:	f002 f8f3 	bl	800b06c <memcpy>
	}
}
 8008e86:	bf00      	nop
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008e96:	f001 fca5 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ea0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ea2:	e011      	b.n	8008ec8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d012      	beq.n	8008ed2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	3324      	adds	r3, #36	; 0x24
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f000 fd7b 	bl	80099ac <xTaskRemoveFromEventList>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008ebc:	f000 fe52 	bl	8009b64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	dce9      	bgt.n	8008ea4 <prvUnlockQueue+0x16>
 8008ed0:	e000      	b.n	8008ed4 <prvUnlockQueue+0x46>
					break;
 8008ed2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	22ff      	movs	r2, #255	; 0xff
 8008ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008edc:	f001 fcb2 	bl	800a844 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008ee0:	f001 fc80 	bl	800a7e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008eea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008eec:	e011      	b.n	8008f12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d012      	beq.n	8008f1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3310      	adds	r3, #16
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 fd56 	bl	80099ac <xTaskRemoveFromEventList>
 8008f00:	4603      	mov	r3, r0
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d001      	beq.n	8008f0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008f06:	f000 fe2d 	bl	8009b64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008f0a:	7bbb      	ldrb	r3, [r7, #14]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008f12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dce9      	bgt.n	8008eee <prvUnlockQueue+0x60>
 8008f1a:	e000      	b.n	8008f1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008f1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	22ff      	movs	r2, #255	; 0xff
 8008f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008f26:	f001 fc8d 	bl	800a844 <vPortExitCritical>
}
 8008f2a:	bf00      	nop
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f3a:	f001 fc53 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008f46:	2301      	movs	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e001      	b.n	8008f50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f50:	f001 fc78 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8008f54:	68fb      	ldr	r3, [r7, #12]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b084      	sub	sp, #16
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008f66:	f001 fc3d 	bl	800a7e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d102      	bne.n	8008f7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008f76:	2301      	movs	r3, #1
 8008f78:	60fb      	str	r3, [r7, #12]
 8008f7a:	e001      	b.n	8008f80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008f80:	f001 fc60 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8008f84:	68fb      	ldr	r3, [r7, #12]
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008f90:	b480      	push	{r7}
 8008f92:	b085      	sub	sp, #20
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
 8008f9e:	e014      	b.n	8008fca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fa0:	4a0f      	ldr	r2, [pc, #60]	; (8008fe0 <vQueueAddToRegistry+0x50>)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10b      	bne.n	8008fc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fac:	490c      	ldr	r1, [pc, #48]	; (8008fe0 <vQueueAddToRegistry+0x50>)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008fb6:	4a0a      	ldr	r2, [pc, #40]	; (8008fe0 <vQueueAddToRegistry+0x50>)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	4413      	add	r3, r2
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008fc2:	e006      	b.n	8008fd2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60fb      	str	r3, [r7, #12]
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b07      	cmp	r3, #7
 8008fce:	d9e7      	bls.n	8008fa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	3714      	adds	r7, #20
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	20005330 	.word	0x20005330

08008fe4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e016      	b.n	8009020 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008ff2:	4a10      	ldr	r2, [pc, #64]	; (8009034 <vQueueUnregisterQueue+0x50>)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	00db      	lsls	r3, r3, #3
 8008ff8:	4413      	add	r3, r2
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d10b      	bne.n	800901a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009002:	4a0c      	ldr	r2, [pc, #48]	; (8009034 <vQueueUnregisterQueue+0x50>)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2100      	movs	r1, #0
 8009008:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800900c:	4a09      	ldr	r2, [pc, #36]	; (8009034 <vQueueUnregisterQueue+0x50>)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	00db      	lsls	r3, r3, #3
 8009012:	4413      	add	r3, r2
 8009014:	2200      	movs	r2, #0
 8009016:	605a      	str	r2, [r3, #4]
				break;
 8009018:	e006      	b.n	8009028 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3301      	adds	r3, #1
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	2b07      	cmp	r3, #7
 8009024:	d9e5      	bls.n	8008ff2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009026:	bf00      	nop
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	20005330 	.word	0x20005330

08009038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009048:	f001 fbcc 	bl	800a7e4 <vPortEnterCritical>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009052:	b25b      	sxtb	r3, r3
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009058:	d103      	bne.n	8009062 <vQueueWaitForMessageRestricted+0x2a>
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009068:	b25b      	sxtb	r3, r3
 800906a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800906e:	d103      	bne.n	8009078 <vQueueWaitForMessageRestricted+0x40>
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009078:	f001 fbe4 	bl	800a844 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	2b00      	cmp	r3, #0
 8009082:	d106      	bne.n	8009092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	68b9      	ldr	r1, [r7, #8]
 800908c:	4618      	mov	r0, r3
 800908e:	f000 fc61 	bl	8009954 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009092:	6978      	ldr	r0, [r7, #20]
 8009094:	f7ff fefb 	bl	8008e8e <prvUnlockQueue>
	}
 8009098:	bf00      	nop
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08e      	sub	sp, #56	; 0x38
 80090a4:	af04      	add	r7, sp, #16
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
 80090ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	623b      	str	r3, [r7, #32]
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d10a      	bne.n	80090e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	61fb      	str	r3, [r7, #28]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80090e6:	23bc      	movs	r3, #188	; 0xbc
 80090e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	2bbc      	cmp	r3, #188	; 0xbc
 80090ee:	d00a      	beq.n	8009106 <xTaskCreateStatic+0x66>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	61bb      	str	r3, [r7, #24]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009106:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01e      	beq.n	800914c <xTaskCreateStatic+0xac>
 800910e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01b      	beq.n	800914c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009116:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800911c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	2202      	movs	r2, #2
 8009122:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009126:	2300      	movs	r3, #0
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	f107 0314 	add.w	r3, r7, #20
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	68b9      	ldr	r1, [r7, #8]
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f000 f850 	bl	80091e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009146:	f000 f8f3 	bl	8009330 <prvAddNewTaskToReadyList>
 800914a:	e001      	b.n	8009150 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009150:	697b      	ldr	r3, [r7, #20]
	}
 8009152:	4618      	mov	r0, r3
 8009154:	3728      	adds	r7, #40	; 0x28
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800915a:	b580      	push	{r7, lr}
 800915c:	b08c      	sub	sp, #48	; 0x30
 800915e:	af04      	add	r7, sp, #16
 8009160:	60f8      	str	r0, [r7, #12]
 8009162:	60b9      	str	r1, [r7, #8]
 8009164:	603b      	str	r3, [r7, #0]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800916a:	88fb      	ldrh	r3, [r7, #6]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4618      	mov	r0, r3
 8009170:	f001 fc5a 	bl	800aa28 <pvPortMalloc>
 8009174:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00e      	beq.n	800919a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800917c:	20bc      	movs	r0, #188	; 0xbc
 800917e:	f001 fc53 	bl	800aa28 <pvPortMalloc>
 8009182:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800918a:	69fb      	ldr	r3, [r7, #28]
 800918c:	697a      	ldr	r2, [r7, #20]
 800918e:	631a      	str	r2, [r3, #48]	; 0x30
 8009190:	e005      	b.n	800919e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009192:	6978      	ldr	r0, [r7, #20]
 8009194:	f001 fcec 	bl	800ab70 <vPortFree>
 8009198:	e001      	b.n	800919e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d017      	beq.n	80091d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	2300      	movs	r3, #0
 80091b0:	9303      	str	r3, [sp, #12]
 80091b2:	69fb      	ldr	r3, [r7, #28]
 80091b4:	9302      	str	r3, [sp, #8]
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68b9      	ldr	r1, [r7, #8]
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f80e 	bl	80091e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091c8:	69f8      	ldr	r0, [r7, #28]
 80091ca:	f000 f8b1 	bl	8009330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80091ce:	2301      	movs	r3, #1
 80091d0:	61bb      	str	r3, [r7, #24]
 80091d2:	e002      	b.n	80091da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80091d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80091da:	69bb      	ldr	r3, [r7, #24]
	}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	461a      	mov	r2, r3
 80091fc:	21a5      	movs	r1, #165	; 0xa5
 80091fe:	f001 ff43 	bl	800b088 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800920c:	3b01      	subs	r3, #1
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	f023 0307 	bic.w	r3, r3, #7
 800921a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922a:	f383 8811 	msr	BASEPRI, r3
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	f3bf 8f4f 	dsb	sy
 8009236:	617b      	str	r3, [r7, #20]
}
 8009238:	bf00      	nop
 800923a:	e7fe      	b.n	800923a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d01f      	beq.n	8009282 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009242:	2300      	movs	r3, #0
 8009244:	61fb      	str	r3, [r7, #28]
 8009246:	e012      	b.n	800926e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	4413      	add	r3, r2
 800924e:	7819      	ldrb	r1, [r3, #0]
 8009250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	4413      	add	r3, r2
 8009256:	3334      	adds	r3, #52	; 0x34
 8009258:	460a      	mov	r2, r1
 800925a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800925c:	68ba      	ldr	r2, [r7, #8]
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d006      	beq.n	8009276 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009268:	69fb      	ldr	r3, [r7, #28]
 800926a:	3301      	adds	r3, #1
 800926c:	61fb      	str	r3, [r7, #28]
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	2b0f      	cmp	r3, #15
 8009272:	d9e9      	bls.n	8009248 <prvInitialiseNewTask+0x64>
 8009274:	e000      	b.n	8009278 <prvInitialiseNewTask+0x94>
			{
				break;
 8009276:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927a:	2200      	movs	r2, #0
 800927c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009280:	e003      	b.n	800928a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	2200      	movs	r2, #0
 8009286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	2b37      	cmp	r3, #55	; 0x37
 800928e:	d901      	bls.n	8009294 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009290:	2337      	movs	r3, #55	; 0x37
 8009292:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009296:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009298:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800929e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	2200      	movs	r2, #0
 80092a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a8:	3304      	adds	r3, #4
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7ff f886 	bl	80083bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b2:	3318      	adds	r3, #24
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7ff f881 	bl	80083bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80092d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	3354      	adds	r3, #84	; 0x54
 80092e4:	2260      	movs	r2, #96	; 0x60
 80092e6:	2100      	movs	r1, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fecd 	bl	800b088 <memset>
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	4a0c      	ldr	r2, [pc, #48]	; (8009324 <prvInitialiseNewTask+0x140>)
 80092f2:	659a      	str	r2, [r3, #88]	; 0x58
 80092f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f6:	4a0c      	ldr	r2, [pc, #48]	; (8009328 <prvInitialiseNewTask+0x144>)
 80092f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	4a0b      	ldr	r2, [pc, #44]	; (800932c <prvInitialiseNewTask+0x148>)
 80092fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	69b8      	ldr	r0, [r7, #24]
 8009306:	f001 f941 	bl	800a58c <pxPortInitialiseStack>
 800930a:	4602      	mov	r2, r0
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800931a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800931c:	bf00      	nop
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	0800e144 	.word	0x0800e144
 8009328:	0800e164 	.word	0x0800e164
 800932c:	0800e124 	.word	0x0800e124

08009330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009338:	f001 fa54 	bl	800a7e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800933c:	4b2d      	ldr	r3, [pc, #180]	; (80093f4 <prvAddNewTaskToReadyList+0xc4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3301      	adds	r3, #1
 8009342:	4a2c      	ldr	r2, [pc, #176]	; (80093f4 <prvAddNewTaskToReadyList+0xc4>)
 8009344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009346:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <prvAddNewTaskToReadyList+0xc8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d109      	bne.n	8009362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800934e:	4a2a      	ldr	r2, [pc, #168]	; (80093f8 <prvAddNewTaskToReadyList+0xc8>)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009354:	4b27      	ldr	r3, [pc, #156]	; (80093f4 <prvAddNewTaskToReadyList+0xc4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d110      	bne.n	800937e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800935c:	f000 fc26 	bl	8009bac <prvInitialiseTaskLists>
 8009360:	e00d      	b.n	800937e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009362:	4b26      	ldr	r3, [pc, #152]	; (80093fc <prvAddNewTaskToReadyList+0xcc>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d109      	bne.n	800937e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800936a:	4b23      	ldr	r3, [pc, #140]	; (80093f8 <prvAddNewTaskToReadyList+0xc8>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009374:	429a      	cmp	r2, r3
 8009376:	d802      	bhi.n	800937e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009378:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <prvAddNewTaskToReadyList+0xc8>)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800937e:	4b20      	ldr	r3, [pc, #128]	; (8009400 <prvAddNewTaskToReadyList+0xd0>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <prvAddNewTaskToReadyList+0xd0>)
 8009386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009388:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <prvAddNewTaskToReadyList+0xd0>)
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009394:	4b1b      	ldr	r3, [pc, #108]	; (8009404 <prvAddNewTaskToReadyList+0xd4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d903      	bls.n	80093a4 <prvAddNewTaskToReadyList+0x74>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	4a18      	ldr	r2, [pc, #96]	; (8009404 <prvAddNewTaskToReadyList+0xd4>)
 80093a2:	6013      	str	r3, [r2, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a8:	4613      	mov	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	4a15      	ldr	r2, [pc, #84]	; (8009408 <prvAddNewTaskToReadyList+0xd8>)
 80093b2:	441a      	add	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	3304      	adds	r3, #4
 80093b8:	4619      	mov	r1, r3
 80093ba:	4610      	mov	r0, r2
 80093bc:	f7ff f80b 	bl	80083d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093c0:	f001 fa40 	bl	800a844 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <prvAddNewTaskToReadyList+0xcc>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00e      	beq.n	80093ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093cc:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <prvAddNewTaskToReadyList+0xc8>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d207      	bcs.n	80093ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <prvAddNewTaskToReadyList+0xdc>)
 80093dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093ea:	bf00      	nop
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
 80093f2:	bf00      	nop
 80093f4:	20005844 	.word	0x20005844
 80093f8:	20005370 	.word	0x20005370
 80093fc:	20005850 	.word	0x20005850
 8009400:	20005860 	.word	0x20005860
 8009404:	2000584c 	.word	0x2000584c
 8009408:	20005374 	.word	0x20005374
 800940c:	e000ed04 	.word	0xe000ed04

08009410 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d017      	beq.n	8009452 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009422:	4b13      	ldr	r3, [pc, #76]	; (8009470 <vTaskDelay+0x60>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <vTaskDelay+0x30>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60bb      	str	r3, [r7, #8]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009440:	f000 f88a 	bl	8009558 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fcfe 	bl	8009e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800944c:	f000 f892 	bl	8009574 <xTaskResumeAll>
 8009450:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d107      	bne.n	8009468 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <vTaskDelay+0x64>)
 800945a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	2000586c 	.word	0x2000586c
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009486:	463a      	mov	r2, r7
 8009488:	1d39      	adds	r1, r7, #4
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe ff40 	bl	8008314 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	9202      	str	r2, [sp, #8]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	2300      	movs	r3, #0
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	2300      	movs	r3, #0
 80094a4:	460a      	mov	r2, r1
 80094a6:	4924      	ldr	r1, [pc, #144]	; (8009538 <vTaskStartScheduler+0xc0>)
 80094a8:	4824      	ldr	r0, [pc, #144]	; (800953c <vTaskStartScheduler+0xc4>)
 80094aa:	f7ff fdf9 	bl	80090a0 <xTaskCreateStatic>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4a23      	ldr	r2, [pc, #140]	; (8009540 <vTaskStartScheduler+0xc8>)
 80094b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094b4:	4b22      	ldr	r3, [pc, #136]	; (8009540 <vTaskStartScheduler+0xc8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e001      	b.n	80094c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d102      	bne.n	80094d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80094cc:	f000 fd10 	bl	8009ef0 <xTimerCreateTimerTask>
 80094d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d11b      	bne.n	8009510 <vTaskStartScheduler+0x98>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	613b      	str	r3, [r7, #16]
}
 80094ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80094ec:	4b15      	ldr	r3, [pc, #84]	; (8009544 <vTaskStartScheduler+0xcc>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3354      	adds	r3, #84	; 0x54
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <vTaskStartScheduler+0xd0>)
 80094f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094f6:	4b15      	ldr	r3, [pc, #84]	; (800954c <vTaskStartScheduler+0xd4>)
 80094f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80094fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094fe:	4b14      	ldr	r3, [pc, #80]	; (8009550 <vTaskStartScheduler+0xd8>)
 8009500:	2201      	movs	r2, #1
 8009502:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009504:	4b13      	ldr	r3, [pc, #76]	; (8009554 <vTaskStartScheduler+0xdc>)
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800950a:	f001 f8c9 	bl	800a6a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800950e:	e00e      	b.n	800952e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009516:	d10a      	bne.n	800952e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	60fb      	str	r3, [r7, #12]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <vTaskStartScheduler+0xb4>
}
 800952e:	bf00      	nop
 8009530:	3718      	adds	r7, #24
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	0800bff4 	.word	0x0800bff4
 800953c:	08009b7d 	.word	0x08009b7d
 8009540:	20005868 	.word	0x20005868
 8009544:	20005370 	.word	0x20005370
 8009548:	20000078 	.word	0x20000078
 800954c:	20005864 	.word	0x20005864
 8009550:	20005850 	.word	0x20005850
 8009554:	20005848 	.word	0x20005848

08009558 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009558:	b480      	push	{r7}
 800955a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800955c:	4b04      	ldr	r3, [pc, #16]	; (8009570 <vTaskSuspendAll+0x18>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3301      	adds	r3, #1
 8009562:	4a03      	ldr	r2, [pc, #12]	; (8009570 <vTaskSuspendAll+0x18>)
 8009564:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009566:	bf00      	nop
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	2000586c 	.word	0x2000586c

08009574 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800957e:	2300      	movs	r3, #0
 8009580:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009582:	4b42      	ldr	r3, [pc, #264]	; (800968c <xTaskResumeAll+0x118>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d10a      	bne.n	80095a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80095a0:	f001 f920 	bl	800a7e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80095a4:	4b39      	ldr	r3, [pc, #228]	; (800968c <xTaskResumeAll+0x118>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	4a38      	ldr	r2, [pc, #224]	; (800968c <xTaskResumeAll+0x118>)
 80095ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095ae:	4b37      	ldr	r3, [pc, #220]	; (800968c <xTaskResumeAll+0x118>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d162      	bne.n	800967c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095b6:	4b36      	ldr	r3, [pc, #216]	; (8009690 <xTaskResumeAll+0x11c>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d05e      	beq.n	800967c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095be:	e02f      	b.n	8009620 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c0:	4b34      	ldr	r3, [pc, #208]	; (8009694 <xTaskResumeAll+0x120>)
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	68db      	ldr	r3, [r3, #12]
 80095c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	3318      	adds	r3, #24
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fe ff5f 	bl	8008490 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3304      	adds	r3, #4
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7fe ff5a 	bl	8008490 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095e0:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <xTaskResumeAll+0x124>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d903      	bls.n	80095f0 <xTaskResumeAll+0x7c>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ec:	4a2a      	ldr	r2, [pc, #168]	; (8009698 <xTaskResumeAll+0x124>)
 80095ee:	6013      	str	r3, [r2, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f4:	4613      	mov	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4a27      	ldr	r2, [pc, #156]	; (800969c <xTaskResumeAll+0x128>)
 80095fe:	441a      	add	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3304      	adds	r3, #4
 8009604:	4619      	mov	r1, r3
 8009606:	4610      	mov	r0, r2
 8009608:	f7fe fee5 	bl	80083d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009610:	4b23      	ldr	r3, [pc, #140]	; (80096a0 <xTaskResumeAll+0x12c>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	429a      	cmp	r2, r3
 8009618:	d302      	bcc.n	8009620 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800961a:	4b22      	ldr	r3, [pc, #136]	; (80096a4 <xTaskResumeAll+0x130>)
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009620:	4b1c      	ldr	r3, [pc, #112]	; (8009694 <xTaskResumeAll+0x120>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1cb      	bne.n	80095c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800962e:	f000 fb5f 	bl	8009cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009632:	4b1d      	ldr	r3, [pc, #116]	; (80096a8 <xTaskResumeAll+0x134>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d010      	beq.n	8009660 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800963e:	f000 f847 	bl	80096d0 <xTaskIncrementTick>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d002      	beq.n	800964e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009648:	4b16      	ldr	r3, [pc, #88]	; (80096a4 <xTaskResumeAll+0x130>)
 800964a:	2201      	movs	r2, #1
 800964c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3b01      	subs	r3, #1
 8009652:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f1      	bne.n	800963e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800965a:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <xTaskResumeAll+0x134>)
 800965c:	2200      	movs	r2, #0
 800965e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009660:	4b10      	ldr	r3, [pc, #64]	; (80096a4 <xTaskResumeAll+0x130>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d009      	beq.n	800967c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800966c:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <xTaskResumeAll+0x138>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800967c:	f001 f8e2 	bl	800a844 <vPortExitCritical>

	return xAlreadyYielded;
 8009680:	68bb      	ldr	r3, [r7, #8]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	2000586c 	.word	0x2000586c
 8009690:	20005844 	.word	0x20005844
 8009694:	20005804 	.word	0x20005804
 8009698:	2000584c 	.word	0x2000584c
 800969c:	20005374 	.word	0x20005374
 80096a0:	20005370 	.word	0x20005370
 80096a4:	20005858 	.word	0x20005858
 80096a8:	20005854 	.word	0x20005854
 80096ac:	e000ed04 	.word	0xe000ed04

080096b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80096b6:	4b05      	ldr	r3, [pc, #20]	; (80096cc <xTaskGetTickCount+0x1c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096bc:	687b      	ldr	r3, [r7, #4]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	20005848 	.word	0x20005848

080096d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096da:	4b4f      	ldr	r3, [pc, #316]	; (8009818 <xTaskIncrementTick+0x148>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f040 808f 	bne.w	8009802 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096e4:	4b4d      	ldr	r3, [pc, #308]	; (800981c <xTaskIncrementTick+0x14c>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096ec:	4a4b      	ldr	r2, [pc, #300]	; (800981c <xTaskIncrementTick+0x14c>)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d120      	bne.n	800973a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80096f8:	4b49      	ldr	r3, [pc, #292]	; (8009820 <xTaskIncrementTick+0x150>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <xTaskIncrementTick+0x48>
	__asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	603b      	str	r3, [r7, #0]
}
 8009714:	bf00      	nop
 8009716:	e7fe      	b.n	8009716 <xTaskIncrementTick+0x46>
 8009718:	4b41      	ldr	r3, [pc, #260]	; (8009820 <xTaskIncrementTick+0x150>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	4b41      	ldr	r3, [pc, #260]	; (8009824 <xTaskIncrementTick+0x154>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a3f      	ldr	r2, [pc, #252]	; (8009820 <xTaskIncrementTick+0x150>)
 8009724:	6013      	str	r3, [r2, #0]
 8009726:	4a3f      	ldr	r2, [pc, #252]	; (8009824 <xTaskIncrementTick+0x154>)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6013      	str	r3, [r2, #0]
 800972c:	4b3e      	ldr	r3, [pc, #248]	; (8009828 <xTaskIncrementTick+0x158>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	4a3d      	ldr	r2, [pc, #244]	; (8009828 <xTaskIncrementTick+0x158>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	f000 fadb 	bl	8009cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800973a:	4b3c      	ldr	r3, [pc, #240]	; (800982c <xTaskIncrementTick+0x15c>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	429a      	cmp	r2, r3
 8009742:	d349      	bcc.n	80097d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009744:	4b36      	ldr	r3, [pc, #216]	; (8009820 <xTaskIncrementTick+0x150>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d104      	bne.n	8009758 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800974e:	4b37      	ldr	r3, [pc, #220]	; (800982c <xTaskIncrementTick+0x15c>)
 8009750:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009754:	601a      	str	r2, [r3, #0]
					break;
 8009756:	e03f      	b.n	80097d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009758:	4b31      	ldr	r3, [pc, #196]	; (8009820 <xTaskIncrementTick+0x150>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	429a      	cmp	r2, r3
 800976e:	d203      	bcs.n	8009778 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009770:	4a2e      	ldr	r2, [pc, #184]	; (800982c <xTaskIncrementTick+0x15c>)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009776:	e02f      	b.n	80097d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fe fe87 	bl	8008490 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	3318      	adds	r3, #24
 800978e:	4618      	mov	r0, r3
 8009790:	f7fe fe7e 	bl	8008490 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	4b25      	ldr	r3, [pc, #148]	; (8009830 <xTaskIncrementTick+0x160>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	429a      	cmp	r2, r3
 800979e:	d903      	bls.n	80097a8 <xTaskIncrementTick+0xd8>
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	4a22      	ldr	r2, [pc, #136]	; (8009830 <xTaskIncrementTick+0x160>)
 80097a6:	6013      	str	r3, [r2, #0]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <xTaskIncrementTick+0x164>)
 80097b6:	441a      	add	r2, r3
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	3304      	adds	r3, #4
 80097bc:	4619      	mov	r1, r3
 80097be:	4610      	mov	r0, r2
 80097c0:	f7fe fe09 	bl	80083d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c8:	4b1b      	ldr	r3, [pc, #108]	; (8009838 <xTaskIncrementTick+0x168>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d3b8      	bcc.n	8009744 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097d6:	e7b5      	b.n	8009744 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097d8:	4b17      	ldr	r3, [pc, #92]	; (8009838 <xTaskIncrementTick+0x168>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097de:	4915      	ldr	r1, [pc, #84]	; (8009834 <xTaskIncrementTick+0x164>)
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	440b      	add	r3, r1
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d901      	bls.n	80097f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80097f4:	4b11      	ldr	r3, [pc, #68]	; (800983c <xTaskIncrementTick+0x16c>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d007      	beq.n	800980c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80097fc:	2301      	movs	r3, #1
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	e004      	b.n	800980c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009802:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <xTaskIncrementTick+0x170>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	3301      	adds	r3, #1
 8009808:	4a0d      	ldr	r2, [pc, #52]	; (8009840 <xTaskIncrementTick+0x170>)
 800980a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800980c:	697b      	ldr	r3, [r7, #20]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	2000586c 	.word	0x2000586c
 800981c:	20005848 	.word	0x20005848
 8009820:	200057fc 	.word	0x200057fc
 8009824:	20005800 	.word	0x20005800
 8009828:	2000585c 	.word	0x2000585c
 800982c:	20005864 	.word	0x20005864
 8009830:	2000584c 	.word	0x2000584c
 8009834:	20005374 	.word	0x20005374
 8009838:	20005370 	.word	0x20005370
 800983c:	20005858 	.word	0x20005858
 8009840:	20005854 	.word	0x20005854

08009844 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800984a:	4b2a      	ldr	r3, [pc, #168]	; (80098f4 <vTaskSwitchContext+0xb0>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009852:	4b29      	ldr	r3, [pc, #164]	; (80098f8 <vTaskSwitchContext+0xb4>)
 8009854:	2201      	movs	r2, #1
 8009856:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009858:	e046      	b.n	80098e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800985a:	4b27      	ldr	r3, [pc, #156]	; (80098f8 <vTaskSwitchContext+0xb4>)
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009860:	4b26      	ldr	r3, [pc, #152]	; (80098fc <vTaskSwitchContext+0xb8>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	60fb      	str	r3, [r7, #12]
 8009866:	e010      	b.n	800988a <vTaskSwitchContext+0x46>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10a      	bne.n	8009884 <vTaskSwitchContext+0x40>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
 8009882:	e7fe      	b.n	8009882 <vTaskSwitchContext+0x3e>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3b01      	subs	r3, #1
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	491d      	ldr	r1, [pc, #116]	; (8009900 <vTaskSwitchContext+0xbc>)
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	440b      	add	r3, r1
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d0e4      	beq.n	8009868 <vTaskSwitchContext+0x24>
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a15      	ldr	r2, [pc, #84]	; (8009900 <vTaskSwitchContext+0xbc>)
 80098aa:	4413      	add	r3, r2
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	605a      	str	r2, [r3, #4]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3308      	adds	r3, #8
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d104      	bne.n	80098ce <vTaskSwitchContext+0x8a>
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	4a0b      	ldr	r2, [pc, #44]	; (8009904 <vTaskSwitchContext+0xc0>)
 80098d6:	6013      	str	r3, [r2, #0]
 80098d8:	4a08      	ldr	r2, [pc, #32]	; (80098fc <vTaskSwitchContext+0xb8>)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <vTaskSwitchContext+0xc0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3354      	adds	r3, #84	; 0x54
 80098e4:	4a08      	ldr	r2, [pc, #32]	; (8009908 <vTaskSwitchContext+0xc4>)
 80098e6:	6013      	str	r3, [r2, #0]
}
 80098e8:	bf00      	nop
 80098ea:	3714      	adds	r7, #20
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	2000586c 	.word	0x2000586c
 80098f8:	20005858 	.word	0x20005858
 80098fc:	2000584c 	.word	0x2000584c
 8009900:	20005374 	.word	0x20005374
 8009904:	20005370 	.word	0x20005370
 8009908:	20000078 	.word	0x20000078

0800990c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	60fb      	str	r3, [r7, #12]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009932:	4b07      	ldr	r3, [pc, #28]	; (8009950 <vTaskPlaceOnEventList+0x44>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3318      	adds	r3, #24
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fe fd6f 	bl	800841e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009940:	2101      	movs	r1, #1
 8009942:	6838      	ldr	r0, [r7, #0]
 8009944:	f000 fa80 	bl	8009e48 <prvAddCurrentTaskToDelayedList>
}
 8009948:	bf00      	nop
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}
 8009950:	20005370 	.word	0x20005370

08009954 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10a      	bne.n	800997c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	617b      	str	r3, [r7, #20]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3318      	adds	r3, #24
 8009982:	4619      	mov	r1, r3
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f7fe fd26 	bl	80083d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d002      	beq.n	8009996 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009994:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009996:	6879      	ldr	r1, [r7, #4]
 8009998:	68b8      	ldr	r0, [r7, #8]
 800999a:	f000 fa55 	bl	8009e48 <prvAddCurrentTaskToDelayedList>
	}
 800999e:	bf00      	nop
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20005370 	.word	0x20005370

080099ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d10a      	bne.n	80099d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80099c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c6:	f383 8811 	msr	BASEPRI, r3
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	60fb      	str	r3, [r7, #12]
}
 80099d4:	bf00      	nop
 80099d6:	e7fe      	b.n	80099d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3318      	adds	r3, #24
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe fd57 	bl	8008490 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099e2:	4b1e      	ldr	r3, [pc, #120]	; (8009a5c <xTaskRemoveFromEventList+0xb0>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d11d      	bne.n	8009a26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	3304      	adds	r3, #4
 80099ee:	4618      	mov	r0, r3
 80099f0:	f7fe fd4e 	bl	8008490 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4b19      	ldr	r3, [pc, #100]	; (8009a60 <xTaskRemoveFromEventList+0xb4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d903      	bls.n	8009a08 <xTaskRemoveFromEventList+0x5c>
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	4a16      	ldr	r2, [pc, #88]	; (8009a60 <xTaskRemoveFromEventList+0xb4>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	4413      	add	r3, r2
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4a13      	ldr	r2, [pc, #76]	; (8009a64 <xTaskRemoveFromEventList+0xb8>)
 8009a16:	441a      	add	r2, r3
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	4610      	mov	r0, r2
 8009a20:	f7fe fcd9 	bl	80083d6 <vListInsertEnd>
 8009a24:	e005      	b.n	8009a32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	3318      	adds	r3, #24
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	480e      	ldr	r0, [pc, #56]	; (8009a68 <xTaskRemoveFromEventList+0xbc>)
 8009a2e:	f7fe fcd2 	bl	80083d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a36:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <xTaskRemoveFromEventList+0xc0>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d905      	bls.n	8009a4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a40:	2301      	movs	r3, #1
 8009a42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a44:	4b0a      	ldr	r3, [pc, #40]	; (8009a70 <xTaskRemoveFromEventList+0xc4>)
 8009a46:	2201      	movs	r2, #1
 8009a48:	601a      	str	r2, [r3, #0]
 8009a4a:	e001      	b.n	8009a50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a50:	697b      	ldr	r3, [r7, #20]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3718      	adds	r7, #24
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	2000586c 	.word	0x2000586c
 8009a60:	2000584c 	.word	0x2000584c
 8009a64:	20005374 	.word	0x20005374
 8009a68:	20005804 	.word	0x20005804
 8009a6c:	20005370 	.word	0x20005370
 8009a70:	20005858 	.word	0x20005858

08009a74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a7c:	4b06      	ldr	r3, [pc, #24]	; (8009a98 <vTaskInternalSetTimeOutState+0x24>)
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <vTaskInternalSetTimeOutState+0x28>)
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	605a      	str	r2, [r3, #4]
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	2000585c 	.word	0x2000585c
 8009a9c:	20005848 	.word	0x20005848

08009aa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab4:	f383 8811 	msr	BASEPRI, r3
 8009ab8:	f3bf 8f6f 	isb	sy
 8009abc:	f3bf 8f4f 	dsb	sy
 8009ac0:	613b      	str	r3, [r7, #16]
}
 8009ac2:	bf00      	nop
 8009ac4:	e7fe      	b.n	8009ac4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	60fb      	str	r3, [r7, #12]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009ae2:	f000 fe7f 	bl	800a7e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009ae6:	4b1d      	ldr	r3, [pc, #116]	; (8009b5c <xTaskCheckForTimeOut+0xbc>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009afe:	d102      	bne.n	8009b06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b00:	2300      	movs	r3, #0
 8009b02:	61fb      	str	r3, [r7, #28]
 8009b04:	e023      	b.n	8009b4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <xTaskCheckForTimeOut+0xc0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d007      	beq.n	8009b22 <xTaskCheckForTimeOut+0x82>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	69ba      	ldr	r2, [r7, #24]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d302      	bcc.n	8009b22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	e015      	b.n	8009b4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	697a      	ldr	r2, [r7, #20]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d20b      	bcs.n	8009b44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	1ad2      	subs	r2, r2, r3
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ff9b 	bl	8009a74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
 8009b42:	e004      	b.n	8009b4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b4e:	f000 fe79 	bl	800a844 <vPortExitCritical>

	return xReturn;
 8009b52:	69fb      	ldr	r3, [r7, #28]
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	20005848 	.word	0x20005848
 8009b60:	2000585c 	.word	0x2000585c

08009b64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b68:	4b03      	ldr	r3, [pc, #12]	; (8009b78 <vTaskMissedYield+0x14>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
}
 8009b6e:	bf00      	nop
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr
 8009b78:	20005858 	.word	0x20005858

08009b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b84:	f000 f852 	bl	8009c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b88:	4b06      	ldr	r3, [pc, #24]	; (8009ba4 <prvIdleTask+0x28>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d9f9      	bls.n	8009b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b90:	4b05      	ldr	r3, [pc, #20]	; (8009ba8 <prvIdleTask+0x2c>)
 8009b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f3bf 8f4f 	dsb	sy
 8009b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ba0:	e7f0      	b.n	8009b84 <prvIdleTask+0x8>
 8009ba2:	bf00      	nop
 8009ba4:	20005374 	.word	0x20005374
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b082      	sub	sp, #8
 8009bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	e00c      	b.n	8009bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4413      	add	r3, r2
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	4a12      	ldr	r2, [pc, #72]	; (8009c0c <prvInitialiseTaskLists+0x60>)
 8009bc4:	4413      	add	r3, r2
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fbd8 	bl	800837c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	607b      	str	r3, [r7, #4]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b37      	cmp	r3, #55	; 0x37
 8009bd6:	d9ef      	bls.n	8009bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009bd8:	480d      	ldr	r0, [pc, #52]	; (8009c10 <prvInitialiseTaskLists+0x64>)
 8009bda:	f7fe fbcf 	bl	800837c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bde:	480d      	ldr	r0, [pc, #52]	; (8009c14 <prvInitialiseTaskLists+0x68>)
 8009be0:	f7fe fbcc 	bl	800837c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009be4:	480c      	ldr	r0, [pc, #48]	; (8009c18 <prvInitialiseTaskLists+0x6c>)
 8009be6:	f7fe fbc9 	bl	800837c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bea:	480c      	ldr	r0, [pc, #48]	; (8009c1c <prvInitialiseTaskLists+0x70>)
 8009bec:	f7fe fbc6 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009bf0:	480b      	ldr	r0, [pc, #44]	; (8009c20 <prvInitialiseTaskLists+0x74>)
 8009bf2:	f7fe fbc3 	bl	800837c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009bf6:	4b0b      	ldr	r3, [pc, #44]	; (8009c24 <prvInitialiseTaskLists+0x78>)
 8009bf8:	4a05      	ldr	r2, [pc, #20]	; (8009c10 <prvInitialiseTaskLists+0x64>)
 8009bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bfc:	4b0a      	ldr	r3, [pc, #40]	; (8009c28 <prvInitialiseTaskLists+0x7c>)
 8009bfe:	4a05      	ldr	r2, [pc, #20]	; (8009c14 <prvInitialiseTaskLists+0x68>)
 8009c00:	601a      	str	r2, [r3, #0]
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20005374 	.word	0x20005374
 8009c10:	200057d4 	.word	0x200057d4
 8009c14:	200057e8 	.word	0x200057e8
 8009c18:	20005804 	.word	0x20005804
 8009c1c:	20005818 	.word	0x20005818
 8009c20:	20005830 	.word	0x20005830
 8009c24:	200057fc 	.word	0x200057fc
 8009c28:	20005800 	.word	0x20005800

08009c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c32:	e019      	b.n	8009c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c34:	f000 fdd6 	bl	800a7e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <prvCheckTasksWaitingTermination+0x50>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fc23 	bl	8008490 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c4a:	4b0d      	ldr	r3, [pc, #52]	; (8009c80 <prvCheckTasksWaitingTermination+0x54>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	4a0b      	ldr	r2, [pc, #44]	; (8009c80 <prvCheckTasksWaitingTermination+0x54>)
 8009c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c54:	4b0b      	ldr	r3, [pc, #44]	; (8009c84 <prvCheckTasksWaitingTermination+0x58>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	4a0a      	ldr	r2, [pc, #40]	; (8009c84 <prvCheckTasksWaitingTermination+0x58>)
 8009c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c5e:	f000 fdf1 	bl	800a844 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 f810 	bl	8009c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <prvCheckTasksWaitingTermination+0x58>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e1      	bne.n	8009c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c70:	bf00      	nop
 8009c72:	bf00      	nop
 8009c74:	3708      	adds	r7, #8
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	20005818 	.word	0x20005818
 8009c80:	20005844 	.word	0x20005844
 8009c84:	2000582c 	.word	0x2000582c

08009c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3354      	adds	r3, #84	; 0x54
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 fb03 	bl	800b2a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d108      	bne.n	8009cb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 ff61 	bl	800ab70 <vPortFree>
				vPortFree( pxTCB );
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 ff5e 	bl	800ab70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cb4:	e018      	b.n	8009ce8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d103      	bne.n	8009cc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 ff55 	bl	800ab70 <vPortFree>
	}
 8009cc6:	e00f      	b.n	8009ce8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d00a      	beq.n	8009ce8 <prvDeleteTCB+0x60>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	f383 8811 	msr	BASEPRI, r3
 8009cda:	f3bf 8f6f 	isb	sy
 8009cde:	f3bf 8f4f 	dsb	sy
 8009ce2:	60fb      	str	r3, [r7, #12]
}
 8009ce4:	bf00      	nop
 8009ce6:	e7fe      	b.n	8009ce6 <prvDeleteTCB+0x5e>
	}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	; (8009d28 <prvResetNextTaskUnblockTime+0x38>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d00:	4b0a      	ldr	r3, [pc, #40]	; (8009d2c <prvResetNextTaskUnblockTime+0x3c>)
 8009d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d08:	e008      	b.n	8009d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d0a:	4b07      	ldr	r3, [pc, #28]	; (8009d28 <prvResetNextTaskUnblockTime+0x38>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	4a04      	ldr	r2, [pc, #16]	; (8009d2c <prvResetNextTaskUnblockTime+0x3c>)
 8009d1a:	6013      	str	r3, [r2, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	200057fc 	.word	0x200057fc
 8009d2c:	20005864 	.word	0x20005864

08009d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <xTaskGetSchedulerState+0x34>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d102      	bne.n	8009d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	607b      	str	r3, [r7, #4]
 8009d42:	e008      	b.n	8009d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d44:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <xTaskGetSchedulerState+0x38>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d102      	bne.n	8009d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	607b      	str	r3, [r7, #4]
 8009d50:	e001      	b.n	8009d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d52:	2300      	movs	r3, #0
 8009d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d56:	687b      	ldr	r3, [r7, #4]
	}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	20005850 	.word	0x20005850
 8009d68:	2000586c 	.word	0x2000586c

08009d6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d056      	beq.n	8009e30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d82:	4b2e      	ldr	r3, [pc, #184]	; (8009e3c <xTaskPriorityDisinherit+0xd0>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	693a      	ldr	r2, [r7, #16]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d00a      	beq.n	8009da2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d90:	f383 8811 	msr	BASEPRI, r3
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	f3bf 8f4f 	dsb	sy
 8009d9c:	60fb      	str	r3, [r7, #12]
}
 8009d9e:	bf00      	nop
 8009da0:	e7fe      	b.n	8009da0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d10a      	bne.n	8009dc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dae:	f383 8811 	msr	BASEPRI, r3
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	f3bf 8f4f 	dsb	sy
 8009dba:	60bb      	str	r3, [r7, #8]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc4:	1e5a      	subs	r2, r3, #1
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d02c      	beq.n	8009e30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d128      	bne.n	8009e30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	3304      	adds	r3, #4
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fb54 	bl	8008490 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e00:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <xTaskPriorityDisinherit+0xd4>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d903      	bls.n	8009e10 <xTaskPriorityDisinherit+0xa4>
 8009e08:	693b      	ldr	r3, [r7, #16]
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a0c      	ldr	r2, [pc, #48]	; (8009e40 <xTaskPriorityDisinherit+0xd4>)
 8009e0e:	6013      	str	r3, [r2, #0]
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <xTaskPriorityDisinherit+0xd8>)
 8009e1e:	441a      	add	r2, r3
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	3304      	adds	r3, #4
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f7fe fad5 	bl	80083d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e30:	697b      	ldr	r3, [r7, #20]
	}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3718      	adds	r7, #24
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20005370 	.word	0x20005370
 8009e40:	2000584c 	.word	0x2000584c
 8009e44:	20005374 	.word	0x20005374

08009e48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e52:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e58:	4b20      	ldr	r3, [pc, #128]	; (8009edc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	3304      	adds	r3, #4
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fe fb16 	bl	8008490 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e6a:	d10a      	bne.n	8009e82 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e72:	4b1a      	ldr	r3, [pc, #104]	; (8009edc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	3304      	adds	r3, #4
 8009e78:	4619      	mov	r1, r3
 8009e7a:	4819      	ldr	r0, [pc, #100]	; (8009ee0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e7c:	f7fe faab 	bl	80083d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e80:	e026      	b.n	8009ed0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4413      	add	r3, r2
 8009e88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e8a:	4b14      	ldr	r3, [pc, #80]	; (8009edc <prvAddCurrentTaskToDelayedList+0x94>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d209      	bcs.n	8009eae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e9a:	4b12      	ldr	r3, [pc, #72]	; (8009ee4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <prvAddCurrentTaskToDelayedList+0x94>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f7fe fab9 	bl	800841e <vListInsert>
}
 8009eac:	e010      	b.n	8009ed0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009eae:	4b0e      	ldr	r3, [pc, #56]	; (8009ee8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <prvAddCurrentTaskToDelayedList+0x94>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	4619      	mov	r1, r3
 8009eba:	4610      	mov	r0, r2
 8009ebc:	f7fe faaf 	bl	800841e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d202      	bcs.n	8009ed0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009eca:	4a08      	ldr	r2, [pc, #32]	; (8009eec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	6013      	str	r3, [r2, #0]
}
 8009ed0:	bf00      	nop
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	20005848 	.word	0x20005848
 8009edc:	20005370 	.word	0x20005370
 8009ee0:	20005830 	.word	0x20005830
 8009ee4:	20005800 	.word	0x20005800
 8009ee8:	200057fc 	.word	0x200057fc
 8009eec:	20005864 	.word	0x20005864

08009ef0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009efa:	f000 fb07 	bl	800a50c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009efe:	4b1c      	ldr	r3, [pc, #112]	; (8009f70 <xTimerCreateTimerTask+0x80>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d021      	beq.n	8009f4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009f06:	2300      	movs	r3, #0
 8009f08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009f0e:	1d3a      	adds	r2, r7, #4
 8009f10:	f107 0108 	add.w	r1, r7, #8
 8009f14:	f107 030c 	add.w	r3, r7, #12
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f7fe fa15 	bl	8008348 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	9202      	str	r2, [sp, #8]
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	2302      	movs	r3, #2
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	460a      	mov	r2, r1
 8009f30:	4910      	ldr	r1, [pc, #64]	; (8009f74 <xTimerCreateTimerTask+0x84>)
 8009f32:	4811      	ldr	r0, [pc, #68]	; (8009f78 <xTimerCreateTimerTask+0x88>)
 8009f34:	f7ff f8b4 	bl	80090a0 <xTaskCreateStatic>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	4a10      	ldr	r2, [pc, #64]	; (8009f7c <xTimerCreateTimerTask+0x8c>)
 8009f3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <xTimerCreateTimerTask+0x8c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009f46:	2301      	movs	r3, #1
 8009f48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	613b      	str	r3, [r7, #16]
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f66:	697b      	ldr	r3, [r7, #20]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	200058a0 	.word	0x200058a0
 8009f74:	0800bffc 	.word	0x0800bffc
 8009f78:	0800a0b5 	.word	0x0800a0b5
 8009f7c:	200058a4 	.word	0x200058a4

08009f80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08a      	sub	sp, #40	; 0x28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d10a      	bne.n	8009fae <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	623b      	str	r3, [r7, #32]
}
 8009faa:	bf00      	nop
 8009fac:	e7fe      	b.n	8009fac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009fae:	4b1a      	ldr	r3, [pc, #104]	; (800a018 <xTimerGenericCommand+0x98>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d02a      	beq.n	800a00c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	dc18      	bgt.n	8009ffa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009fc8:	f7ff feb2 	bl	8009d30 <xTaskGetSchedulerState>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d109      	bne.n	8009fe6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009fd2:	4b11      	ldr	r3, [pc, #68]	; (800a018 <xTimerGenericCommand+0x98>)
 8009fd4:	6818      	ldr	r0, [r3, #0]
 8009fd6:	f107 0110 	add.w	r1, r7, #16
 8009fda:	2300      	movs	r3, #0
 8009fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fde:	f7fe fc29 	bl	8008834 <xQueueGenericSend>
 8009fe2:	6278      	str	r0, [r7, #36]	; 0x24
 8009fe4:	e012      	b.n	800a00c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009fe6:	4b0c      	ldr	r3, [pc, #48]	; (800a018 <xTimerGenericCommand+0x98>)
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f107 0110 	add.w	r1, r7, #16
 8009fee:	2300      	movs	r3, #0
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f7fe fc1f 	bl	8008834 <xQueueGenericSend>
 8009ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8009ff8:	e008      	b.n	800a00c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ffa:	4b07      	ldr	r3, [pc, #28]	; (800a018 <xTimerGenericCommand+0x98>)
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	f107 0110 	add.w	r1, r7, #16
 800a002:	2300      	movs	r3, #0
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	f7fe fd13 	bl	8008a30 <xQueueGenericSendFromISR>
 800a00a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3728      	adds	r7, #40	; 0x28
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	200058a0 	.word	0x200058a0

0800a01c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af02      	add	r7, sp, #8
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a026:	4b22      	ldr	r3, [pc, #136]	; (800a0b0 <prvProcessExpiredTimer+0x94>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fa2b 	bl	8008490 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b00      	cmp	r3, #0
 800a046:	d022      	beq.n	800a08e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	699a      	ldr	r2, [r3, #24]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	18d1      	adds	r1, r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	f000 f8d1 	bl	800a1fc <prvInsertTimerInActiveList>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01f      	beq.n	800a0a0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a060:	2300      	movs	r3, #0
 800a062:	9300      	str	r3, [sp, #0]
 800a064:	2300      	movs	r3, #0
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	2100      	movs	r1, #0
 800a06a:	6978      	ldr	r0, [r7, #20]
 800a06c:	f7ff ff88 	bl	8009f80 <xTimerGenericCommand>
 800a070:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d113      	bne.n	800a0a0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	60fb      	str	r3, [r7, #12]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	b2da      	uxtb	r2, r3
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	6978      	ldr	r0, [r7, #20]
 800a0a6:	4798      	blx	r3
}
 800a0a8:	bf00      	nop
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20005898 	.word	0x20005898

0800a0b4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0bc:	f107 0308 	add.w	r3, r7, #8
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 f857 	bl	800a174 <prvGetNextExpireTime>
 800a0c6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f000 f803 	bl	800a0d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a0d2:	f000 f8d5 	bl	800a280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a0d6:	e7f1      	b.n	800a0bc <prvTimerTask+0x8>

0800a0d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a0e2:	f7ff fa39 	bl	8009558 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 f866 	bl	800a1bc <prvSampleTimeNow>
 800a0f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d130      	bne.n	800a15a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d10a      	bne.n	800a114 <prvProcessTimerOrBlockTask+0x3c>
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	429a      	cmp	r2, r3
 800a104:	d806      	bhi.n	800a114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a106:	f7ff fa35 	bl	8009574 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f7ff ff85 	bl	800a01c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a112:	e024      	b.n	800a15e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d008      	beq.n	800a12c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a11a:	4b13      	ldr	r3, [pc, #76]	; (800a168 <prvProcessTimerOrBlockTask+0x90>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <prvProcessTimerOrBlockTask+0x50>
 800a124:	2301      	movs	r3, #1
 800a126:	e000      	b.n	800a12a <prvProcessTimerOrBlockTask+0x52>
 800a128:	2300      	movs	r3, #0
 800a12a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a12c:	4b0f      	ldr	r3, [pc, #60]	; (800a16c <prvProcessTimerOrBlockTask+0x94>)
 800a12e:	6818      	ldr	r0, [r3, #0]
 800a130:	687a      	ldr	r2, [r7, #4]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	4619      	mov	r1, r3
 800a13a:	f7fe ff7d 	bl	8009038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a13e:	f7ff fa19 	bl	8009574 <xTaskResumeAll>
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a148:	4b09      	ldr	r3, [pc, #36]	; (800a170 <prvProcessTimerOrBlockTask+0x98>)
 800a14a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a14e:	601a      	str	r2, [r3, #0]
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	f3bf 8f6f 	isb	sy
}
 800a158:	e001      	b.n	800a15e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a15a:	f7ff fa0b 	bl	8009574 <xTaskResumeAll>
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	2000589c 	.word	0x2000589c
 800a16c:	200058a0 	.word	0x200058a0
 800a170:	e000ed04 	.word	0xe000ed04

0800a174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a17c:	4b0e      	ldr	r3, [pc, #56]	; (800a1b8 <prvGetNextExpireTime+0x44>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <prvGetNextExpireTime+0x16>
 800a186:	2201      	movs	r2, #1
 800a188:	e000      	b.n	800a18c <prvGetNextExpireTime+0x18>
 800a18a:	2200      	movs	r2, #0
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d105      	bne.n	800a1a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a198:	4b07      	ldr	r3, [pc, #28]	; (800a1b8 <prvGetNextExpireTime+0x44>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	60fb      	str	r3, [r7, #12]
 800a1a2:	e001      	b.n	800a1a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
}
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	3714      	adds	r7, #20
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	20005898 	.word	0x20005898

0800a1bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a1c4:	f7ff fa74 	bl	80096b0 <xTaskGetTickCount>
 800a1c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a1ca:	4b0b      	ldr	r3, [pc, #44]	; (800a1f8 <prvSampleTimeNow+0x3c>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	68fa      	ldr	r2, [r7, #12]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d205      	bcs.n	800a1e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a1d4:	f000 f936 	bl	800a444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2201      	movs	r2, #1
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e002      	b.n	800a1e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a1e6:	4a04      	ldr	r2, [pc, #16]	; (800a1f8 <prvSampleTimeNow+0x3c>)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	200058a8 	.word	0x200058a8

0800a1fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b086      	sub	sp, #24
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
 800a208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a20a:	2300      	movs	r3, #0
 800a20c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d812      	bhi.n	800a248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	1ad2      	subs	r2, r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d302      	bcc.n	800a236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a230:	2301      	movs	r3, #1
 800a232:	617b      	str	r3, [r7, #20]
 800a234:	e01b      	b.n	800a26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a236:	4b10      	ldr	r3, [pc, #64]	; (800a278 <prvInsertTimerInActiveList+0x7c>)
 800a238:	681a      	ldr	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3304      	adds	r3, #4
 800a23e:	4619      	mov	r1, r3
 800a240:	4610      	mov	r0, r2
 800a242:	f7fe f8ec 	bl	800841e <vListInsert>
 800a246:	e012      	b.n	800a26e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a248:	687a      	ldr	r2, [r7, #4]
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d206      	bcs.n	800a25e <prvInsertTimerInActiveList+0x62>
 800a250:	68ba      	ldr	r2, [r7, #8]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	429a      	cmp	r2, r3
 800a256:	d302      	bcc.n	800a25e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a258:	2301      	movs	r3, #1
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	e007      	b.n	800a26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a25e:	4b07      	ldr	r3, [pc, #28]	; (800a27c <prvInsertTimerInActiveList+0x80>)
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3304      	adds	r3, #4
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7fe f8d8 	bl	800841e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a26e:	697b      	ldr	r3, [r7, #20]
}
 800a270:	4618      	mov	r0, r3
 800a272:	3718      	adds	r7, #24
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}
 800a278:	2000589c 	.word	0x2000589c
 800a27c:	20005898 	.word	0x20005898

0800a280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b08e      	sub	sp, #56	; 0x38
 800a284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a286:	e0ca      	b.n	800a41e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	da18      	bge.n	800a2c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a28e:	1d3b      	adds	r3, r7, #4
 800a290:	3304      	adds	r3, #4
 800a292:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10a      	bne.n	800a2b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29e:	f383 8811 	msr	BASEPRI, r3
 800a2a2:	f3bf 8f6f 	isb	sy
 800a2a6:	f3bf 8f4f 	dsb	sy
 800a2aa:	61fb      	str	r3, [r7, #28]
}
 800a2ac:	bf00      	nop
 800a2ae:	e7fe      	b.n	800a2ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2b6:	6850      	ldr	r0, [r2, #4]
 800a2b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2ba:	6892      	ldr	r2, [r2, #8]
 800a2bc:	4611      	mov	r1, r2
 800a2be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f2c0 80aa 	blt.w	800a41c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fe f8d9 	bl	8008490 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a2de:	463b      	mov	r3, r7
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff ff6b 	bl	800a1bc <prvSampleTimeNow>
 800a2e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b09      	cmp	r3, #9
 800a2ec:	f200 8097 	bhi.w	800a41e <prvProcessReceivedCommands+0x19e>
 800a2f0:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <prvProcessReceivedCommands+0x78>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a321 	.word	0x0800a321
 800a2fc:	0800a321 	.word	0x0800a321
 800a300:	0800a321 	.word	0x0800a321
 800a304:	0800a395 	.word	0x0800a395
 800a308:	0800a3a9 	.word	0x0800a3a9
 800a30c:	0800a3f3 	.word	0x0800a3f3
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a321 	.word	0x0800a321
 800a318:	0800a395 	.word	0x0800a395
 800a31c:	0800a3a9 	.word	0x0800a3a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a326:	f043 0301 	orr.w	r3, r3, #1
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	18d1      	adds	r1, r2, r3
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a340:	f7ff ff5c 	bl	800a1fc <prvInsertTimerInActiveList>
 800a344:	4603      	mov	r3, r0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d069      	beq.n	800a41e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a350:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a358:	f003 0304 	and.w	r3, r3, #4
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d05e      	beq.n	800a41e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	441a      	add	r2, r3
 800a368:	2300      	movs	r3, #0
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	2300      	movs	r3, #0
 800a36e:	2100      	movs	r1, #0
 800a370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a372:	f7ff fe05 	bl	8009f80 <xTimerGenericCommand>
 800a376:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d14f      	bne.n	800a41e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a382:	f383 8811 	msr	BASEPRI, r3
 800a386:	f3bf 8f6f 	isb	sy
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	61bb      	str	r3, [r7, #24]
}
 800a390:	bf00      	nop
 800a392:	e7fe      	b.n	800a392 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a39a:	f023 0301 	bic.w	r3, r3, #1
 800a39e:	b2da      	uxtb	r2, r3
 800a3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a3a6:	e03a      	b.n	800a41e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ae:	f043 0301 	orr.w	r3, r3, #1
 800a3b2:	b2da      	uxtb	r2, r3
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a3ba:	68ba      	ldr	r2, [r7, #8]
 800a3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d10a      	bne.n	800a3de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	617b      	str	r3, [r7, #20]
}
 800a3da:	bf00      	nop
 800a3dc:	e7fe      	b.n	800a3dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e0:	699a      	ldr	r2, [r3, #24]
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	18d1      	adds	r1, r2, r3
 800a3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3ec:	f7ff ff06 	bl	800a1fc <prvInsertTimerInActiveList>
					break;
 800a3f0:	e015      	b.n	800a41e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d103      	bne.n	800a408 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a402:	f000 fbb5 	bl	800ab70 <vPortFree>
 800a406:	e00a      	b.n	800a41e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a40e:	f023 0301 	bic.w	r3, r3, #1
 800a412:	b2da      	uxtb	r2, r3
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a41a:	e000      	b.n	800a41e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a41c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a41e:	4b08      	ldr	r3, [pc, #32]	; (800a440 <prvProcessReceivedCommands+0x1c0>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	1d39      	adds	r1, r7, #4
 800a424:	2200      	movs	r2, #0
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fb9e 	bl	8008b68 <xQueueReceive>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f47f af2a 	bne.w	800a288 <prvProcessReceivedCommands+0x8>
	}
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	3730      	adds	r7, #48	; 0x30
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}
 800a43e:	bf00      	nop
 800a440:	200058a0 	.word	0x200058a0

0800a444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a44a:	e048      	b.n	800a4de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a44c:	4b2d      	ldr	r3, [pc, #180]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a456:	4b2b      	ldr	r3, [pc, #172]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68db      	ldr	r3, [r3, #12]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3304      	adds	r3, #4
 800a464:	4618      	mov	r0, r3
 800a466:	f7fe f813 	bl	8008490 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d02e      	beq.n	800a4de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	699b      	ldr	r3, [r3, #24]
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	4413      	add	r3, r2
 800a488:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d90e      	bls.n	800a4b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	68ba      	ldr	r2, [r7, #8]
 800a496:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a49e:	4b19      	ldr	r3, [pc, #100]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	f7fd ffb8 	bl	800841e <vListInsert>
 800a4ae:	e016      	b.n	800a4de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	9300      	str	r3, [sp, #0]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff fd60 	bl	8009f80 <xTimerGenericCommand>
 800a4c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4cc:	f383 8811 	msr	BASEPRI, r3
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	f3bf 8f4f 	dsb	sy
 800a4d8:	603b      	str	r3, [r7, #0]
}
 800a4da:	bf00      	nop
 800a4dc:	e7fe      	b.n	800a4dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a4de:	4b09      	ldr	r3, [pc, #36]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1b1      	bne.n	800a44c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a4e8:	4b06      	ldr	r3, [pc, #24]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a4ee:	4b06      	ldr	r3, [pc, #24]	; (800a508 <prvSwitchTimerLists+0xc4>)
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a04      	ldr	r2, [pc, #16]	; (800a504 <prvSwitchTimerLists+0xc0>)
 800a4f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4f6:	4a04      	ldr	r2, [pc, #16]	; (800a508 <prvSwitchTimerLists+0xc4>)
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6013      	str	r3, [r2, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	3718      	adds	r7, #24
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}
 800a504:	20005898 	.word	0x20005898
 800a508:	2000589c 	.word	0x2000589c

0800a50c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a512:	f000 f967 	bl	800a7e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a516:	4b15      	ldr	r3, [pc, #84]	; (800a56c <prvCheckForValidListAndQueue+0x60>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d120      	bne.n	800a560 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a51e:	4814      	ldr	r0, [pc, #80]	; (800a570 <prvCheckForValidListAndQueue+0x64>)
 800a520:	f7fd ff2c 	bl	800837c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a524:	4813      	ldr	r0, [pc, #76]	; (800a574 <prvCheckForValidListAndQueue+0x68>)
 800a526:	f7fd ff29 	bl	800837c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a52a:	4b13      	ldr	r3, [pc, #76]	; (800a578 <prvCheckForValidListAndQueue+0x6c>)
 800a52c:	4a10      	ldr	r2, [pc, #64]	; (800a570 <prvCheckForValidListAndQueue+0x64>)
 800a52e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a530:	4b12      	ldr	r3, [pc, #72]	; (800a57c <prvCheckForValidListAndQueue+0x70>)
 800a532:	4a10      	ldr	r2, [pc, #64]	; (800a574 <prvCheckForValidListAndQueue+0x68>)
 800a534:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a536:	2300      	movs	r3, #0
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	4b11      	ldr	r3, [pc, #68]	; (800a580 <prvCheckForValidListAndQueue+0x74>)
 800a53c:	4a11      	ldr	r2, [pc, #68]	; (800a584 <prvCheckForValidListAndQueue+0x78>)
 800a53e:	2110      	movs	r1, #16
 800a540:	200a      	movs	r0, #10
 800a542:	f7fe f837 	bl	80085b4 <xQueueGenericCreateStatic>
 800a546:	4603      	mov	r3, r0
 800a548:	4a08      	ldr	r2, [pc, #32]	; (800a56c <prvCheckForValidListAndQueue+0x60>)
 800a54a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a54c:	4b07      	ldr	r3, [pc, #28]	; (800a56c <prvCheckForValidListAndQueue+0x60>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d005      	beq.n	800a560 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <prvCheckForValidListAndQueue+0x60>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	490b      	ldr	r1, [pc, #44]	; (800a588 <prvCheckForValidListAndQueue+0x7c>)
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fd18 	bl	8008f90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a560:	f000 f970 	bl	800a844 <vPortExitCritical>
}
 800a564:	bf00      	nop
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	200058a0 	.word	0x200058a0
 800a570:	20005870 	.word	0x20005870
 800a574:	20005884 	.word	0x20005884
 800a578:	20005898 	.word	0x20005898
 800a57c:	2000589c 	.word	0x2000589c
 800a580:	2000594c 	.word	0x2000594c
 800a584:	200058ac 	.word	0x200058ac
 800a588:	0800c004 	.word	0x0800c004

0800a58c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	3b04      	subs	r3, #4
 800a59c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3b04      	subs	r3, #4
 800a5aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	f023 0201 	bic.w	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	3b04      	subs	r3, #4
 800a5ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5bc:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <pxPortInitialiseStack+0x64>)
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3b14      	subs	r3, #20
 800a5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5c8:	687a      	ldr	r2, [r7, #4]
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	3b04      	subs	r3, #4
 800a5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f06f 0202 	mvn.w	r2, #2
 800a5da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	3b20      	subs	r3, #32
 800a5e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	0800a5f5 	.word	0x0800a5f5

0800a5f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5fe:	4b12      	ldr	r3, [pc, #72]	; (800a648 <prvTaskExitError+0x54>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a606:	d00a      	beq.n	800a61e <prvTaskExitError+0x2a>
	__asm volatile
 800a608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60c:	f383 8811 	msr	BASEPRI, r3
 800a610:	f3bf 8f6f 	isb	sy
 800a614:	f3bf 8f4f 	dsb	sy
 800a618:	60fb      	str	r3, [r7, #12]
}
 800a61a:	bf00      	nop
 800a61c:	e7fe      	b.n	800a61c <prvTaskExitError+0x28>
	__asm volatile
 800a61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a622:	f383 8811 	msr	BASEPRI, r3
 800a626:	f3bf 8f6f 	isb	sy
 800a62a:	f3bf 8f4f 	dsb	sy
 800a62e:	60bb      	str	r3, [r7, #8]
}
 800a630:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a632:	bf00      	nop
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d0fc      	beq.n	800a634 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a63a:	bf00      	nop
 800a63c:	bf00      	nop
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr
 800a648:	20000074 	.word	0x20000074
 800a64c:	00000000 	.word	0x00000000

0800a650 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a650:	4b07      	ldr	r3, [pc, #28]	; (800a670 <pxCurrentTCBConst2>)
 800a652:	6819      	ldr	r1, [r3, #0]
 800a654:	6808      	ldr	r0, [r1, #0]
 800a656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65a:	f380 8809 	msr	PSP, r0
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f04f 0000 	mov.w	r0, #0
 800a666:	f380 8811 	msr	BASEPRI, r0
 800a66a:	4770      	bx	lr
 800a66c:	f3af 8000 	nop.w

0800a670 <pxCurrentTCBConst2>:
 800a670:	20005370 	.word	0x20005370
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a674:	bf00      	nop
 800a676:	bf00      	nop

0800a678 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a678:	4808      	ldr	r0, [pc, #32]	; (800a69c <prvPortStartFirstTask+0x24>)
 800a67a:	6800      	ldr	r0, [r0, #0]
 800a67c:	6800      	ldr	r0, [r0, #0]
 800a67e:	f380 8808 	msr	MSP, r0
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8814 	msr	CONTROL, r0
 800a68a:	b662      	cpsie	i
 800a68c:	b661      	cpsie	f
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	f3bf 8f6f 	isb	sy
 800a696:	df00      	svc	0
 800a698:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a69a:	bf00      	nop
 800a69c:	e000ed08 	.word	0xe000ed08

0800a6a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b086      	sub	sp, #24
 800a6a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6a6:	4b46      	ldr	r3, [pc, #280]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	4a46      	ldr	r2, [pc, #280]	; (800a7c4 <xPortStartScheduler+0x124>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d10a      	bne.n	800a6c6 <xPortStartScheduler+0x26>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	f383 8811 	msr	BASEPRI, r3
 800a6b8:	f3bf 8f6f 	isb	sy
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	613b      	str	r3, [r7, #16]
}
 800a6c2:	bf00      	nop
 800a6c4:	e7fe      	b.n	800a6c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6c6:	4b3e      	ldr	r3, [pc, #248]	; (800a7c0 <xPortStartScheduler+0x120>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a3f      	ldr	r2, [pc, #252]	; (800a7c8 <xPortStartScheduler+0x128>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d10a      	bne.n	800a6e6 <xPortStartScheduler+0x46>
	__asm volatile
 800a6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6d4:	f383 8811 	msr	BASEPRI, r3
 800a6d8:	f3bf 8f6f 	isb	sy
 800a6dc:	f3bf 8f4f 	dsb	sy
 800a6e0:	60fb      	str	r3, [r7, #12]
}
 800a6e2:	bf00      	nop
 800a6e4:	e7fe      	b.n	800a6e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6e6:	4b39      	ldr	r3, [pc, #228]	; (800a7cc <xPortStartScheduler+0x12c>)
 800a6e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b2db      	uxtb	r3, r3
 800a6f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	22ff      	movs	r2, #255	; 0xff
 800a6f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	4b31      	ldr	r3, [pc, #196]	; (800a7d0 <xPortStartScheduler+0x130>)
 800a70c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a70e:	4b31      	ldr	r3, [pc, #196]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a710:	2207      	movs	r2, #7
 800a712:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a714:	e009      	b.n	800a72a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a716:	4b2f      	ldr	r3, [pc, #188]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	4a2d      	ldr	r2, [pc, #180]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a71e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a720:	78fb      	ldrb	r3, [r7, #3]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	b2db      	uxtb	r3, r3
 800a728:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a732:	2b80      	cmp	r3, #128	; 0x80
 800a734:	d0ef      	beq.n	800a716 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a736:	4b27      	ldr	r3, [pc, #156]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f1c3 0307 	rsb	r3, r3, #7
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d00a      	beq.n	800a758 <xPortStartScheduler+0xb8>
	__asm volatile
 800a742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a746:	f383 8811 	msr	BASEPRI, r3
 800a74a:	f3bf 8f6f 	isb	sy
 800a74e:	f3bf 8f4f 	dsb	sy
 800a752:	60bb      	str	r3, [r7, #8]
}
 800a754:	bf00      	nop
 800a756:	e7fe      	b.n	800a756 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a758:	4b1e      	ldr	r3, [pc, #120]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	4a1d      	ldr	r2, [pc, #116]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a760:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a762:	4b1c      	ldr	r3, [pc, #112]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a76a:	4a1a      	ldr	r2, [pc, #104]	; (800a7d4 <xPortStartScheduler+0x134>)
 800a76c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	b2da      	uxtb	r2, r3
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a776:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a17      	ldr	r2, [pc, #92]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a77c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a780:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	4a14      	ldr	r2, [pc, #80]	; (800a7d8 <xPortStartScheduler+0x138>)
 800a788:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a78c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a78e:	f000 f8dd 	bl	800a94c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a792:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <xPortStartScheduler+0x13c>)
 800a794:	2200      	movs	r2, #0
 800a796:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a798:	f000 f8fc 	bl	800a994 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a79c:	4b10      	ldr	r3, [pc, #64]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a0f      	ldr	r2, [pc, #60]	; (800a7e0 <xPortStartScheduler+0x140>)
 800a7a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a7a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7a8:	f7ff ff66 	bl	800a678 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7ac:	f7ff f84a 	bl	8009844 <vTaskSwitchContext>
	prvTaskExitError();
 800a7b0:	f7ff ff20 	bl	800a5f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3718      	adds	r7, #24
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	e000ed00 	.word	0xe000ed00
 800a7c4:	410fc271 	.word	0x410fc271
 800a7c8:	410fc270 	.word	0x410fc270
 800a7cc:	e000e400 	.word	0xe000e400
 800a7d0:	2000599c 	.word	0x2000599c
 800a7d4:	200059a0 	.word	0x200059a0
 800a7d8:	e000ed20 	.word	0xe000ed20
 800a7dc:	20000074 	.word	0x20000074
 800a7e0:	e000ef34 	.word	0xe000ef34

0800a7e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	607b      	str	r3, [r7, #4]
}
 800a7fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	; (800a83c <vPortEnterCritical+0x58>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3301      	adds	r3, #1
 800a804:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <vPortEnterCritical+0x58>)
 800a806:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a808:	4b0c      	ldr	r3, [pc, #48]	; (800a83c <vPortEnterCritical+0x58>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d10f      	bne.n	800a830 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a810:	4b0b      	ldr	r3, [pc, #44]	; (800a840 <vPortEnterCritical+0x5c>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00a      	beq.n	800a830 <vPortEnterCritical+0x4c>
	__asm volatile
 800a81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	603b      	str	r3, [r7, #0]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <vPortEnterCritical+0x4a>
	}
}
 800a830:	bf00      	nop
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr
 800a83c:	20000074 	.word	0x20000074
 800a840:	e000ed04 	.word	0xe000ed04

0800a844 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a84a:	4b12      	ldr	r3, [pc, #72]	; (800a894 <vPortExitCritical+0x50>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d10a      	bne.n	800a868 <vPortExitCritical+0x24>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	607b      	str	r3, [r7, #4]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a868:	4b0a      	ldr	r3, [pc, #40]	; (800a894 <vPortExitCritical+0x50>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	4a09      	ldr	r2, [pc, #36]	; (800a894 <vPortExitCritical+0x50>)
 800a870:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a872:	4b08      	ldr	r3, [pc, #32]	; (800a894 <vPortExitCritical+0x50>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <vPortExitCritical+0x42>
 800a87a:	2300      	movs	r3, #0
 800a87c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	f383 8811 	msr	BASEPRI, r3
}
 800a884:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a886:	bf00      	nop
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	20000074 	.word	0x20000074
	...

0800a8a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8a0:	f3ef 8009 	mrs	r0, PSP
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4b15      	ldr	r3, [pc, #84]	; (800a900 <pxCurrentTCBConst>)
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	f01e 0f10 	tst.w	lr, #16
 800a8b0:	bf08      	it	eq
 800a8b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ba:	6010      	str	r0, [r2, #0]
 800a8bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8c4:	f380 8811 	msr	BASEPRI, r0
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f7fe ffb8 	bl	8009844 <vTaskSwitchContext>
 800a8d4:	f04f 0000 	mov.w	r0, #0
 800a8d8:	f380 8811 	msr	BASEPRI, r0
 800a8dc:	bc09      	pop	{r0, r3}
 800a8de:	6819      	ldr	r1, [r3, #0]
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e6:	f01e 0f10 	tst.w	lr, #16
 800a8ea:	bf08      	it	eq
 800a8ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8f0:	f380 8809 	msr	PSP, r0
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	4770      	bx	lr
 800a8fa:	bf00      	nop
 800a8fc:	f3af 8000 	nop.w

0800a900 <pxCurrentTCBConst>:
 800a900:	20005370 	.word	0x20005370
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a904:	bf00      	nop
 800a906:	bf00      	nop

0800a908 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
	__asm volatile
 800a90e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a912:	f383 8811 	msr	BASEPRI, r3
 800a916:	f3bf 8f6f 	isb	sy
 800a91a:	f3bf 8f4f 	dsb	sy
 800a91e:	607b      	str	r3, [r7, #4]
}
 800a920:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a922:	f7fe fed5 	bl	80096d0 <xTaskIncrementTick>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d003      	beq.n	800a934 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a92c:	4b06      	ldr	r3, [pc, #24]	; (800a948 <xPortSysTickHandler+0x40>)
 800a92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a932:	601a      	str	r2, [r3, #0]
 800a934:	2300      	movs	r3, #0
 800a936:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	f383 8811 	msr	BASEPRI, r3
}
 800a93e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a940:	bf00      	nop
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}
 800a948:	e000ed04 	.word	0xe000ed04

0800a94c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a94c:	b480      	push	{r7}
 800a94e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a950:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a952:	2200      	movs	r2, #0
 800a954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a956:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <vPortSetupTimerInterrupt+0x38>)
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a95c:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <vPortSetupTimerInterrupt+0x3c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a0a      	ldr	r2, [pc, #40]	; (800a98c <vPortSetupTimerInterrupt+0x40>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	099b      	lsrs	r3, r3, #6
 800a968:	4a09      	ldr	r2, [pc, #36]	; (800a990 <vPortSetupTimerInterrupt+0x44>)
 800a96a:	3b01      	subs	r3, #1
 800a96c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a96e:	4b04      	ldr	r3, [pc, #16]	; (800a980 <vPortSetupTimerInterrupt+0x34>)
 800a970:	2207      	movs	r2, #7
 800a972:	601a      	str	r2, [r3, #0]
}
 800a974:	bf00      	nop
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	e000e010 	.word	0xe000e010
 800a984:	e000e018 	.word	0xe000e018
 800a988:	20000058 	.word	0x20000058
 800a98c:	10624dd3 	.word	0x10624dd3
 800a990:	e000e014 	.word	0xe000e014

0800a994 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a994:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a9a4 <vPortEnableVFP+0x10>
 800a998:	6801      	ldr	r1, [r0, #0]
 800a99a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a99e:	6001      	str	r1, [r0, #0]
 800a9a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9a2:	bf00      	nop
 800a9a4:	e000ed88 	.word	0xe000ed88

0800a9a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a9ae:	f3ef 8305 	mrs	r3, IPSR
 800a9b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2b0f      	cmp	r3, #15
 800a9b8:	d914      	bls.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a9ba:	4a17      	ldr	r2, [pc, #92]	; (800aa18 <vPortValidateInterruptPriority+0x70>)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9c4:	4b15      	ldr	r3, [pc, #84]	; (800aa1c <vPortValidateInterruptPriority+0x74>)
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7afa      	ldrb	r2, [r7, #11]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20a      	bcs.n	800a9e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d2:	f383 8811 	msr	BASEPRI, r3
 800a9d6:	f3bf 8f6f 	isb	sy
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	607b      	str	r3, [r7, #4]
}
 800a9e0:	bf00      	nop
 800a9e2:	e7fe      	b.n	800a9e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9e4:	4b0e      	ldr	r3, [pc, #56]	; (800aa20 <vPortValidateInterruptPriority+0x78>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9ec:	4b0d      	ldr	r3, [pc, #52]	; (800aa24 <vPortValidateInterruptPriority+0x7c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d90a      	bls.n	800aa0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	603b      	str	r3, [r7, #0]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <vPortValidateInterruptPriority+0x60>
	}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	e000e3f0 	.word	0xe000e3f0
 800aa1c:	2000599c 	.word	0x2000599c
 800aa20:	e000ed0c 	.word	0xe000ed0c
 800aa24:	200059a0 	.word	0x200059a0

0800aa28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b088      	sub	sp, #32
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800aa34:	4b48      	ldr	r3, [pc, #288]	; (800ab58 <pvPortMalloc+0x130>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <pvPortMalloc+0x2a>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60fb      	str	r3, [r7, #12]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800aa52:	f7fe fd81 	bl	8009558 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa56:	4b41      	ldr	r3, [pc, #260]	; (800ab5c <pvPortMalloc+0x134>)
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d172      	bne.n	800ab48 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d00d      	beq.n	800aa84 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800aa68:	2208      	movs	r2, #8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f003 0307 	and.w	r3, r3, #7
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d004      	beq.n	800aa84 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f023 0307 	bic.w	r3, r3, #7
 800aa80:	3308      	adds	r3, #8
 800aa82:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d05e      	beq.n	800ab48 <pvPortMalloc+0x120>
 800aa8a:	4b35      	ldr	r3, [pc, #212]	; (800ab60 <pvPortMalloc+0x138>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d859      	bhi.n	800ab48 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa94:	4b33      	ldr	r3, [pc, #204]	; (800ab64 <pvPortMalloc+0x13c>)
 800aa96:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800aa98:	4b32      	ldr	r3, [pc, #200]	; (800ab64 <pvPortMalloc+0x13c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa9e:	e004      	b.n	800aaaa <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d903      	bls.n	800aabc <pvPortMalloc+0x94>
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1f1      	bne.n	800aaa0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aabc:	4b26      	ldr	r3, [pc, #152]	; (800ab58 <pvPortMalloc+0x130>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d040      	beq.n	800ab48 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2208      	movs	r2, #8
 800aacc:	4413      	add	r3, r2
 800aace:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	69bb      	ldr	r3, [r7, #24]
 800aad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1ad2      	subs	r2, r2, r3
 800aae0:	2308      	movs	r3, #8
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d90f      	bls.n	800ab08 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aae8:	69fa      	ldr	r2, [r7, #28]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aaf0:	69fb      	ldr	r3, [r7, #28]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	1ad2      	subs	r2, r2, r3
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ab02:	6938      	ldr	r0, [r7, #16]
 800ab04:	f000 f8a2 	bl	800ac4c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab08:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <pvPortMalloc+0x138>)
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	1ad3      	subs	r3, r2, r3
 800ab12:	4a13      	ldr	r2, [pc, #76]	; (800ab60 <pvPortMalloc+0x138>)
 800ab14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab16:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <pvPortMalloc+0x138>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4b13      	ldr	r3, [pc, #76]	; (800ab68 <pvPortMalloc+0x140>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d203      	bcs.n	800ab2a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab22:	4b0f      	ldr	r3, [pc, #60]	; (800ab60 <pvPortMalloc+0x138>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <pvPortMalloc+0x140>)
 800ab28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	685a      	ldr	r2, [r3, #4]
 800ab2e:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <pvPortMalloc+0x134>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	431a      	orrs	r2, r3
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab38:	69fb      	ldr	r3, [r7, #28]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	; (800ab6c <pvPortMalloc+0x144>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3301      	adds	r3, #1
 800ab44:	4a09      	ldr	r2, [pc, #36]	; (800ab6c <pvPortMalloc+0x144>)
 800ab46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab48:	f7fe fd14 	bl	8009574 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800ab4c:	697b      	ldr	r3, [r7, #20]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3720      	adds	r7, #32
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	200059ac 	.word	0x200059ac
 800ab5c:	200059c0 	.word	0x200059c0
 800ab60:	200059b0 	.word	0x200059b0
 800ab64:	200059a4 	.word	0x200059a4
 800ab68:	200059b4 	.word	0x200059b4
 800ab6c:	200059b8 	.word	0x200059b8

0800ab70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d04d      	beq.n	800ac1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab82:	2308      	movs	r3, #8
 800ab84:	425b      	negs	r3, r3
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	4413      	add	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	4b24      	ldr	r3, [pc, #144]	; (800ac28 <vPortFree+0xb8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <vPortFree+0x44>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <vPortFree+0x62>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60bb      	str	r3, [r7, #8]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <vPortFree+0xb8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01e      	beq.n	800ac1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11a      	bne.n	800ac1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <vPortFree+0xb8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	43db      	mvns	r3, r3
 800abf2:	401a      	ands	r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abf8:	f7fe fcae 	bl	8009558 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <vPortFree+0xbc>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4413      	add	r3, r2
 800ac06:	4a09      	ldr	r2, [pc, #36]	; (800ac2c <vPortFree+0xbc>)
 800ac08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac0a:	6938      	ldr	r0, [r7, #16]
 800ac0c:	f000 f81e 	bl	800ac4c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <vPortFree+0xc0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	4a06      	ldr	r2, [pc, #24]	; (800ac30 <vPortFree+0xc0>)
 800ac18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac1a:	f7fe fcab 	bl	8009574 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac1e:	bf00      	nop
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	200059c0 	.word	0x200059c0
 800ac2c:	200059b0 	.word	0x200059b0
 800ac30:	200059bc 	.word	0x200059bc

0800ac34 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800ac38:	4b03      	ldr	r3, [pc, #12]	; (800ac48 <xPortGetFreeHeapSize+0x14>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr
 800ac46:	bf00      	nop
 800ac48:	200059b0 	.word	0x200059b0

0800ac4c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b085      	sub	sp, #20
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac54:	4b28      	ldr	r3, [pc, #160]	; (800acf8 <prvInsertBlockIntoFreeList+0xac>)
 800ac56:	60fb      	str	r3, [r7, #12]
 800ac58:	e002      	b.n	800ac60 <prvInsertBlockIntoFreeList+0x14>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60fb      	str	r3, [r7, #12]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d8f7      	bhi.n	800ac5a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	68ba      	ldr	r2, [r7, #8]
 800ac74:	4413      	add	r3, r2
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d108      	bne.n	800ac8e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685a      	ldr	r2, [r3, #4]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	441a      	add	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	68ba      	ldr	r2, [r7, #8]
 800ac98:	441a      	add	r2, r3
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d118      	bne.n	800acd4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <prvInsertBlockIntoFreeList+0xb0>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d00d      	beq.n	800acca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685a      	ldr	r2, [r3, #4]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	441a      	add	r2, r3
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	e008      	b.n	800acdc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800acca:	4b0c      	ldr	r3, [pc, #48]	; (800acfc <prvInsertBlockIntoFreeList+0xb0>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	e003      	b.n	800acdc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	429a      	cmp	r2, r3
 800ace2:	d002      	beq.n	800acea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acea:	bf00      	nop
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr
 800acf6:	bf00      	nop
 800acf8:	200059a4 	.word	0x200059a4
 800acfc:	200059ac 	.word	0x200059ac

0800ad00 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b08f      	sub	sp, #60	; 0x3c
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800ad10:	2300      	movs	r3, #0
 800ad12:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800ad14:	4b5a      	ldr	r3, [pc, #360]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	617b      	str	r3, [r7, #20]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800ad32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad34:	00db      	lsls	r3, r3, #3
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	4413      	add	r3, r2
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800ad3c:	e07d      	b.n	800ae3a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800ad3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	f003 0307 	and.w	r3, r3, #7
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d00e      	beq.n	800ad72 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800ad54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad56:	3307      	adds	r3, #7
 800ad58:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	f023 0307 	bic.w	r3, r3, #7
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad6e:	4413      	add	r3, r2
 800ad70:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800ad76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d106      	bne.n	800ad8a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	4a41      	ldr	r2, [pc, #260]	; (800ae84 <vPortDefineHeapRegions+0x184>)
 800ad80:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800ad82:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <vPortDefineHeapRegions+0x184>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	605a      	str	r2, [r3, #4]
 800ad88:	e01f      	b.n	800adca <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800ad8a:	4b3d      	ldr	r3, [pc, #244]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d10a      	bne.n	800ada8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	613b      	str	r3, [r7, #16]
}
 800ada4:	bf00      	nop
 800ada6:	e7fe      	b.n	800ada6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800ada8:	4b35      	ldr	r3, [pc, #212]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	461a      	mov	r2, r3
 800adae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d80a      	bhi.n	800adca <vPortDefineHeapRegions+0xca>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	60fb      	str	r3, [r7, #12]
}
 800adc6:	bf00      	nop
 800adc8:	e7fe      	b.n	800adc8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800adca:	4b2d      	ldr	r3, [pc, #180]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800add0:	69fa      	ldr	r2, [r7, #28]
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	4413      	add	r3, r2
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800add8:	2208      	movs	r2, #8
 800adda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800addc:	1a9b      	subs	r3, r3, r2
 800adde:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	f023 0307 	bic.w	r3, r3, #7
 800ade6:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800ade8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adea:	4a25      	ldr	r2, [pc, #148]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800adec:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800adee:	4b24      	ldr	r3, [pc, #144]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	2200      	movs	r2, #0
 800adf4:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800adf6:	4b22      	ldr	r3, [pc, #136]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2200      	movs	r2, #0
 800adfc:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae06:	1ad2      	subs	r2, r2, r3
 800ae08:	6a3b      	ldr	r3, [r7, #32]
 800ae0a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <vPortDefineHeapRegions+0x180>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800ae1a:	69bb      	ldr	r3, [r7, #24]
 800ae1c:	6a3a      	ldr	r2, [r7, #32]
 800ae1e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800ae20:	6a3b      	ldr	r3, [r7, #32]
 800ae22:	685b      	ldr	r3, [r3, #4]
 800ae24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae26:	4413      	add	r3, r2
 800ae28:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae32:	00db      	lsls	r3, r3, #3
 800ae34:	687a      	ldr	r2, [r7, #4]
 800ae36:	4413      	add	r3, r2
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	685b      	ldr	r3, [r3, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f47f af7d 	bne.w	800ad3e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800ae44:	4a10      	ldr	r2, [pc, #64]	; (800ae88 <vPortDefineHeapRegions+0x188>)
 800ae46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae48:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800ae4a:	4a10      	ldr	r2, [pc, #64]	; (800ae8c <vPortDefineHeapRegions+0x18c>)
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800ae50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10a      	bne.n	800ae6c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800ae56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5a:	f383 8811 	msr	BASEPRI, r3
 800ae5e:	f3bf 8f6f 	isb	sy
 800ae62:	f3bf 8f4f 	dsb	sy
 800ae66:	60bb      	str	r3, [r7, #8]
}
 800ae68:	bf00      	nop
 800ae6a:	e7fe      	b.n	800ae6a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae6c:	4b08      	ldr	r3, [pc, #32]	; (800ae90 <vPortDefineHeapRegions+0x190>)
 800ae6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae72:	601a      	str	r2, [r3, #0]
}
 800ae74:	bf00      	nop
 800ae76:	373c      	adds	r7, #60	; 0x3c
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	200059ac 	.word	0x200059ac
 800ae84:	200059a4 	.word	0x200059a4
 800ae88:	200059b4 	.word	0x200059b4
 800ae8c:	200059b0 	.word	0x200059b0
 800ae90:	200059c0 	.word	0x200059c0

0800ae94 <atol>:
 800ae94:	220a      	movs	r2, #10
 800ae96:	2100      	movs	r1, #0
 800ae98:	f000 bb5e 	b.w	800b558 <strtol>

0800ae9c <calloc>:
 800ae9c:	4b02      	ldr	r3, [pc, #8]	; (800aea8 <calloc+0xc>)
 800ae9e:	460a      	mov	r2, r1
 800aea0:	4601      	mov	r1, r0
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	f000 b8f8 	b.w	800b098 <_calloc_r>
 800aea8:	20000078 	.word	0x20000078

0800aeac <__errno>:
 800aeac:	4b01      	ldr	r3, [pc, #4]	; (800aeb4 <__errno+0x8>)
 800aeae:	6818      	ldr	r0, [r3, #0]
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	20000078 	.word	0x20000078

0800aeb8 <gmtime_r>:
 800aeb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aebc:	e9d0 6700 	ldrd	r6, r7, [r0]
 800aec0:	460c      	mov	r4, r1
 800aec2:	4a4f      	ldr	r2, [pc, #316]	; (800b000 <gmtime_r+0x148>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4630      	mov	r0, r6
 800aec8:	4639      	mov	r1, r7
 800aeca:	f7f5 fcdf 	bl	800088c <__aeabi_ldivmod>
 800aece:	4639      	mov	r1, r7
 800aed0:	4605      	mov	r5, r0
 800aed2:	4a4b      	ldr	r2, [pc, #300]	; (800b000 <gmtime_r+0x148>)
 800aed4:	4630      	mov	r0, r6
 800aed6:	2300      	movs	r3, #0
 800aed8:	f7f5 fcd8 	bl	800088c <__aeabi_ldivmod>
 800aedc:	2a00      	cmp	r2, #0
 800aede:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800aee2:	bfb7      	itett	lt
 800aee4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800aee8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800aeec:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800aef0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800aef4:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800aef8:	fbb2 f1f0 	udiv	r1, r2, r0
 800aefc:	fb00 2211 	mls	r2, r0, r1, r2
 800af00:	203c      	movs	r0, #60	; 0x3c
 800af02:	60a1      	str	r1, [r4, #8]
 800af04:	fbb2 f1f0 	udiv	r1, r2, r0
 800af08:	fb00 2211 	mls	r2, r0, r1, r2
 800af0c:	6061      	str	r1, [r4, #4]
 800af0e:	6022      	str	r2, [r4, #0]
 800af10:	2107      	movs	r1, #7
 800af12:	1cda      	adds	r2, r3, #3
 800af14:	fb92 f1f1 	sdiv	r1, r2, r1
 800af18:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800af1c:	1a52      	subs	r2, r2, r1
 800af1e:	bf48      	it	mi
 800af20:	3207      	addmi	r2, #7
 800af22:	4d38      	ldr	r5, [pc, #224]	; (800b004 <gmtime_r+0x14c>)
 800af24:	4838      	ldr	r0, [pc, #224]	; (800b008 <gmtime_r+0x150>)
 800af26:	61a2      	str	r2, [r4, #24]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	bfb7      	itett	lt
 800af2c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800af30:	fb93 f5f5 	sdivge	r5, r3, r5
 800af34:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800af38:	fb92 f5f5 	sdivlt	r5, r2, r5
 800af3c:	fb00 3005 	mla	r0, r0, r5, r3
 800af40:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800af44:	fbb0 f2f2 	udiv	r2, r0, r2
 800af48:	4402      	add	r2, r0
 800af4a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800af4e:	fbb0 f1f3 	udiv	r1, r0, r3
 800af52:	1a52      	subs	r2, r2, r1
 800af54:	f240 1c6d 	movw	ip, #365	; 0x16d
 800af58:	492c      	ldr	r1, [pc, #176]	; (800b00c <gmtime_r+0x154>)
 800af5a:	fbb0 f1f1 	udiv	r1, r0, r1
 800af5e:	2764      	movs	r7, #100	; 0x64
 800af60:	1a52      	subs	r2, r2, r1
 800af62:	fbb2 f1fc 	udiv	r1, r2, ip
 800af66:	fbb2 f3f3 	udiv	r3, r2, r3
 800af6a:	fbb1 f6f7 	udiv	r6, r1, r7
 800af6e:	1af3      	subs	r3, r6, r3
 800af70:	4403      	add	r3, r0
 800af72:	fb0c 3311 	mls	r3, ip, r1, r3
 800af76:	2299      	movs	r2, #153	; 0x99
 800af78:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800af7c:	f10e 0e02 	add.w	lr, lr, #2
 800af80:	f103 0c01 	add.w	ip, r3, #1
 800af84:	fbbe f0f2 	udiv	r0, lr, r2
 800af88:	4342      	muls	r2, r0
 800af8a:	3202      	adds	r2, #2
 800af8c:	f04f 0805 	mov.w	r8, #5
 800af90:	fbb2 f2f8 	udiv	r2, r2, r8
 800af94:	ebac 0c02 	sub.w	ip, ip, r2
 800af98:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800af9c:	4596      	cmp	lr, r2
 800af9e:	bf94      	ite	ls
 800afa0:	2202      	movls	r2, #2
 800afa2:	f06f 0209 	mvnhi.w	r2, #9
 800afa6:	4410      	add	r0, r2
 800afa8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800afac:	fb02 1505 	mla	r5, r2, r5, r1
 800afb0:	2801      	cmp	r0, #1
 800afb2:	bf98      	it	ls
 800afb4:	3501      	addls	r5, #1
 800afb6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800afba:	d30d      	bcc.n	800afd8 <gmtime_r+0x120>
 800afbc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800afc0:	61e3      	str	r3, [r4, #28]
 800afc2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800afc6:	2300      	movs	r3, #0
 800afc8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800afcc:	f8c4 c00c 	str.w	ip, [r4, #12]
 800afd0:	6223      	str	r3, [r4, #32]
 800afd2:	4620      	mov	r0, r4
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd8:	078a      	lsls	r2, r1, #30
 800afda:	d102      	bne.n	800afe2 <gmtime_r+0x12a>
 800afdc:	fb07 1616 	mls	r6, r7, r6, r1
 800afe0:	b95e      	cbnz	r6, 800affa <gmtime_r+0x142>
 800afe2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800afe6:	fbb1 f6f2 	udiv	r6, r1, r2
 800afea:	fb02 1216 	mls	r2, r2, r6, r1
 800afee:	fab2 f282 	clz	r2, r2
 800aff2:	0952      	lsrs	r2, r2, #5
 800aff4:	333b      	adds	r3, #59	; 0x3b
 800aff6:	4413      	add	r3, r2
 800aff8:	e7e2      	b.n	800afc0 <gmtime_r+0x108>
 800affa:	2201      	movs	r2, #1
 800affc:	e7fa      	b.n	800aff4 <gmtime_r+0x13c>
 800affe:	bf00      	nop
 800b000:	00015180 	.word	0x00015180
 800b004:	00023ab1 	.word	0x00023ab1
 800b008:	fffdc54f 	.word	0xfffdc54f
 800b00c:	00023ab0 	.word	0x00023ab0

0800b010 <__libc_init_array>:
 800b010:	b570      	push	{r4, r5, r6, lr}
 800b012:	4d0d      	ldr	r5, [pc, #52]	; (800b048 <__libc_init_array+0x38>)
 800b014:	4c0d      	ldr	r4, [pc, #52]	; (800b04c <__libc_init_array+0x3c>)
 800b016:	1b64      	subs	r4, r4, r5
 800b018:	10a4      	asrs	r4, r4, #2
 800b01a:	2600      	movs	r6, #0
 800b01c:	42a6      	cmp	r6, r4
 800b01e:	d109      	bne.n	800b034 <__libc_init_array+0x24>
 800b020:	4d0b      	ldr	r5, [pc, #44]	; (800b050 <__libc_init_array+0x40>)
 800b022:	4c0c      	ldr	r4, [pc, #48]	; (800b054 <__libc_init_array+0x44>)
 800b024:	f000 fe2a 	bl	800bc7c <_init>
 800b028:	1b64      	subs	r4, r4, r5
 800b02a:	10a4      	asrs	r4, r4, #2
 800b02c:	2600      	movs	r6, #0
 800b02e:	42a6      	cmp	r6, r4
 800b030:	d105      	bne.n	800b03e <__libc_init_array+0x2e>
 800b032:	bd70      	pop	{r4, r5, r6, pc}
 800b034:	f855 3b04 	ldr.w	r3, [r5], #4
 800b038:	4798      	blx	r3
 800b03a:	3601      	adds	r6, #1
 800b03c:	e7ee      	b.n	800b01c <__libc_init_array+0xc>
 800b03e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b042:	4798      	blx	r3
 800b044:	3601      	adds	r6, #1
 800b046:	e7f2      	b.n	800b02e <__libc_init_array+0x1e>
 800b048:	0800e2c0 	.word	0x0800e2c0
 800b04c:	0800e2c0 	.word	0x0800e2c0
 800b050:	0800e2c0 	.word	0x0800e2c0
 800b054:	0800e2c4 	.word	0x0800e2c4

0800b058 <__retarget_lock_acquire_recursive>:
 800b058:	4770      	bx	lr

0800b05a <__retarget_lock_release_recursive>:
 800b05a:	4770      	bx	lr

0800b05c <free>:
 800b05c:	4b02      	ldr	r3, [pc, #8]	; (800b068 <free+0xc>)
 800b05e:	4601      	mov	r1, r0
 800b060:	6818      	ldr	r0, [r3, #0]
 800b062:	f000 b82f 	b.w	800b0c4 <_free_r>
 800b066:	bf00      	nop
 800b068:	20000078 	.word	0x20000078

0800b06c <memcpy>:
 800b06c:	440a      	add	r2, r1
 800b06e:	4291      	cmp	r1, r2
 800b070:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b074:	d100      	bne.n	800b078 <memcpy+0xc>
 800b076:	4770      	bx	lr
 800b078:	b510      	push	{r4, lr}
 800b07a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b07e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b082:	4291      	cmp	r1, r2
 800b084:	d1f9      	bne.n	800b07a <memcpy+0xe>
 800b086:	bd10      	pop	{r4, pc}

0800b088 <memset>:
 800b088:	4402      	add	r2, r0
 800b08a:	4603      	mov	r3, r0
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d100      	bne.n	800b092 <memset+0xa>
 800b090:	4770      	bx	lr
 800b092:	f803 1b01 	strb.w	r1, [r3], #1
 800b096:	e7f9      	b.n	800b08c <memset+0x4>

0800b098 <_calloc_r>:
 800b098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b09a:	fba1 2402 	umull	r2, r4, r1, r2
 800b09e:	b94c      	cbnz	r4, 800b0b4 <_calloc_r+0x1c>
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	9201      	str	r2, [sp, #4]
 800b0a4:	f000 f87a 	bl	800b19c <_malloc_r>
 800b0a8:	9a01      	ldr	r2, [sp, #4]
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	b930      	cbnz	r0, 800b0bc <_calloc_r+0x24>
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	b003      	add	sp, #12
 800b0b2:	bd30      	pop	{r4, r5, pc}
 800b0b4:	220c      	movs	r2, #12
 800b0b6:	6002      	str	r2, [r0, #0]
 800b0b8:	2500      	movs	r5, #0
 800b0ba:	e7f8      	b.n	800b0ae <_calloc_r+0x16>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	f7ff ffe3 	bl	800b088 <memset>
 800b0c2:	e7f4      	b.n	800b0ae <_calloc_r+0x16>

0800b0c4 <_free_r>:
 800b0c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0c6:	2900      	cmp	r1, #0
 800b0c8:	d044      	beq.n	800b154 <_free_r+0x90>
 800b0ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ce:	9001      	str	r0, [sp, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f1a1 0404 	sub.w	r4, r1, #4
 800b0d6:	bfb8      	it	lt
 800b0d8:	18e4      	addlt	r4, r4, r3
 800b0da:	f000 fa81 	bl	800b5e0 <__malloc_lock>
 800b0de:	4a1e      	ldr	r2, [pc, #120]	; (800b158 <_free_r+0x94>)
 800b0e0:	9801      	ldr	r0, [sp, #4]
 800b0e2:	6813      	ldr	r3, [r2, #0]
 800b0e4:	b933      	cbnz	r3, 800b0f4 <_free_r+0x30>
 800b0e6:	6063      	str	r3, [r4, #4]
 800b0e8:	6014      	str	r4, [r2, #0]
 800b0ea:	b003      	add	sp, #12
 800b0ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0f0:	f000 ba7c 	b.w	800b5ec <__malloc_unlock>
 800b0f4:	42a3      	cmp	r3, r4
 800b0f6:	d908      	bls.n	800b10a <_free_r+0x46>
 800b0f8:	6825      	ldr	r5, [r4, #0]
 800b0fa:	1961      	adds	r1, r4, r5
 800b0fc:	428b      	cmp	r3, r1
 800b0fe:	bf01      	itttt	eq
 800b100:	6819      	ldreq	r1, [r3, #0]
 800b102:	685b      	ldreq	r3, [r3, #4]
 800b104:	1949      	addeq	r1, r1, r5
 800b106:	6021      	streq	r1, [r4, #0]
 800b108:	e7ed      	b.n	800b0e6 <_free_r+0x22>
 800b10a:	461a      	mov	r2, r3
 800b10c:	685b      	ldr	r3, [r3, #4]
 800b10e:	b10b      	cbz	r3, 800b114 <_free_r+0x50>
 800b110:	42a3      	cmp	r3, r4
 800b112:	d9fa      	bls.n	800b10a <_free_r+0x46>
 800b114:	6811      	ldr	r1, [r2, #0]
 800b116:	1855      	adds	r5, r2, r1
 800b118:	42a5      	cmp	r5, r4
 800b11a:	d10b      	bne.n	800b134 <_free_r+0x70>
 800b11c:	6824      	ldr	r4, [r4, #0]
 800b11e:	4421      	add	r1, r4
 800b120:	1854      	adds	r4, r2, r1
 800b122:	42a3      	cmp	r3, r4
 800b124:	6011      	str	r1, [r2, #0]
 800b126:	d1e0      	bne.n	800b0ea <_free_r+0x26>
 800b128:	681c      	ldr	r4, [r3, #0]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	6053      	str	r3, [r2, #4]
 800b12e:	4421      	add	r1, r4
 800b130:	6011      	str	r1, [r2, #0]
 800b132:	e7da      	b.n	800b0ea <_free_r+0x26>
 800b134:	d902      	bls.n	800b13c <_free_r+0x78>
 800b136:	230c      	movs	r3, #12
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	e7d6      	b.n	800b0ea <_free_r+0x26>
 800b13c:	6825      	ldr	r5, [r4, #0]
 800b13e:	1961      	adds	r1, r4, r5
 800b140:	428b      	cmp	r3, r1
 800b142:	bf04      	itt	eq
 800b144:	6819      	ldreq	r1, [r3, #0]
 800b146:	685b      	ldreq	r3, [r3, #4]
 800b148:	6063      	str	r3, [r4, #4]
 800b14a:	bf04      	itt	eq
 800b14c:	1949      	addeq	r1, r1, r5
 800b14e:	6021      	streq	r1, [r4, #0]
 800b150:	6054      	str	r4, [r2, #4]
 800b152:	e7ca      	b.n	800b0ea <_free_r+0x26>
 800b154:	b003      	add	sp, #12
 800b156:	bd30      	pop	{r4, r5, pc}
 800b158:	200059c8 	.word	0x200059c8

0800b15c <sbrk_aligned>:
 800b15c:	b570      	push	{r4, r5, r6, lr}
 800b15e:	4e0e      	ldr	r6, [pc, #56]	; (800b198 <sbrk_aligned+0x3c>)
 800b160:	460c      	mov	r4, r1
 800b162:	6831      	ldr	r1, [r6, #0]
 800b164:	4605      	mov	r5, r0
 800b166:	b911      	cbnz	r1, 800b16e <sbrk_aligned+0x12>
 800b168:	f000 f8f6 	bl	800b358 <_sbrk_r>
 800b16c:	6030      	str	r0, [r6, #0]
 800b16e:	4621      	mov	r1, r4
 800b170:	4628      	mov	r0, r5
 800b172:	f000 f8f1 	bl	800b358 <_sbrk_r>
 800b176:	1c43      	adds	r3, r0, #1
 800b178:	d00a      	beq.n	800b190 <sbrk_aligned+0x34>
 800b17a:	1cc4      	adds	r4, r0, #3
 800b17c:	f024 0403 	bic.w	r4, r4, #3
 800b180:	42a0      	cmp	r0, r4
 800b182:	d007      	beq.n	800b194 <sbrk_aligned+0x38>
 800b184:	1a21      	subs	r1, r4, r0
 800b186:	4628      	mov	r0, r5
 800b188:	f000 f8e6 	bl	800b358 <_sbrk_r>
 800b18c:	3001      	adds	r0, #1
 800b18e:	d101      	bne.n	800b194 <sbrk_aligned+0x38>
 800b190:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b194:	4620      	mov	r0, r4
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	200059cc 	.word	0x200059cc

0800b19c <_malloc_r>:
 800b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1a0:	1ccd      	adds	r5, r1, #3
 800b1a2:	f025 0503 	bic.w	r5, r5, #3
 800b1a6:	3508      	adds	r5, #8
 800b1a8:	2d0c      	cmp	r5, #12
 800b1aa:	bf38      	it	cc
 800b1ac:	250c      	movcc	r5, #12
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	4607      	mov	r7, r0
 800b1b2:	db01      	blt.n	800b1b8 <_malloc_r+0x1c>
 800b1b4:	42a9      	cmp	r1, r5
 800b1b6:	d905      	bls.n	800b1c4 <_malloc_r+0x28>
 800b1b8:	230c      	movs	r3, #12
 800b1ba:	603b      	str	r3, [r7, #0]
 800b1bc:	2600      	movs	r6, #0
 800b1be:	4630      	mov	r0, r6
 800b1c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1c4:	4e2e      	ldr	r6, [pc, #184]	; (800b280 <_malloc_r+0xe4>)
 800b1c6:	f000 fa0b 	bl	800b5e0 <__malloc_lock>
 800b1ca:	6833      	ldr	r3, [r6, #0]
 800b1cc:	461c      	mov	r4, r3
 800b1ce:	bb34      	cbnz	r4, 800b21e <_malloc_r+0x82>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4638      	mov	r0, r7
 800b1d4:	f7ff ffc2 	bl	800b15c <sbrk_aligned>
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	4604      	mov	r4, r0
 800b1dc:	d14d      	bne.n	800b27a <_malloc_r+0xde>
 800b1de:	6834      	ldr	r4, [r6, #0]
 800b1e0:	4626      	mov	r6, r4
 800b1e2:	2e00      	cmp	r6, #0
 800b1e4:	d140      	bne.n	800b268 <_malloc_r+0xcc>
 800b1e6:	6823      	ldr	r3, [r4, #0]
 800b1e8:	4631      	mov	r1, r6
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	eb04 0803 	add.w	r8, r4, r3
 800b1f0:	f000 f8b2 	bl	800b358 <_sbrk_r>
 800b1f4:	4580      	cmp	r8, r0
 800b1f6:	d13a      	bne.n	800b26e <_malloc_r+0xd2>
 800b1f8:	6821      	ldr	r1, [r4, #0]
 800b1fa:	3503      	adds	r5, #3
 800b1fc:	1a6d      	subs	r5, r5, r1
 800b1fe:	f025 0503 	bic.w	r5, r5, #3
 800b202:	3508      	adds	r5, #8
 800b204:	2d0c      	cmp	r5, #12
 800b206:	bf38      	it	cc
 800b208:	250c      	movcc	r5, #12
 800b20a:	4629      	mov	r1, r5
 800b20c:	4638      	mov	r0, r7
 800b20e:	f7ff ffa5 	bl	800b15c <sbrk_aligned>
 800b212:	3001      	adds	r0, #1
 800b214:	d02b      	beq.n	800b26e <_malloc_r+0xd2>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	442b      	add	r3, r5
 800b21a:	6023      	str	r3, [r4, #0]
 800b21c:	e00e      	b.n	800b23c <_malloc_r+0xa0>
 800b21e:	6822      	ldr	r2, [r4, #0]
 800b220:	1b52      	subs	r2, r2, r5
 800b222:	d41e      	bmi.n	800b262 <_malloc_r+0xc6>
 800b224:	2a0b      	cmp	r2, #11
 800b226:	d916      	bls.n	800b256 <_malloc_r+0xba>
 800b228:	1961      	adds	r1, r4, r5
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	6025      	str	r5, [r4, #0]
 800b22e:	bf18      	it	ne
 800b230:	6059      	strne	r1, [r3, #4]
 800b232:	6863      	ldr	r3, [r4, #4]
 800b234:	bf08      	it	eq
 800b236:	6031      	streq	r1, [r6, #0]
 800b238:	5162      	str	r2, [r4, r5]
 800b23a:	604b      	str	r3, [r1, #4]
 800b23c:	4638      	mov	r0, r7
 800b23e:	f104 060b 	add.w	r6, r4, #11
 800b242:	f000 f9d3 	bl	800b5ec <__malloc_unlock>
 800b246:	f026 0607 	bic.w	r6, r6, #7
 800b24a:	1d23      	adds	r3, r4, #4
 800b24c:	1af2      	subs	r2, r6, r3
 800b24e:	d0b6      	beq.n	800b1be <_malloc_r+0x22>
 800b250:	1b9b      	subs	r3, r3, r6
 800b252:	50a3      	str	r3, [r4, r2]
 800b254:	e7b3      	b.n	800b1be <_malloc_r+0x22>
 800b256:	6862      	ldr	r2, [r4, #4]
 800b258:	42a3      	cmp	r3, r4
 800b25a:	bf0c      	ite	eq
 800b25c:	6032      	streq	r2, [r6, #0]
 800b25e:	605a      	strne	r2, [r3, #4]
 800b260:	e7ec      	b.n	800b23c <_malloc_r+0xa0>
 800b262:	4623      	mov	r3, r4
 800b264:	6864      	ldr	r4, [r4, #4]
 800b266:	e7b2      	b.n	800b1ce <_malloc_r+0x32>
 800b268:	4634      	mov	r4, r6
 800b26a:	6876      	ldr	r6, [r6, #4]
 800b26c:	e7b9      	b.n	800b1e2 <_malloc_r+0x46>
 800b26e:	230c      	movs	r3, #12
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	4638      	mov	r0, r7
 800b274:	f000 f9ba 	bl	800b5ec <__malloc_unlock>
 800b278:	e7a1      	b.n	800b1be <_malloc_r+0x22>
 800b27a:	6025      	str	r5, [r4, #0]
 800b27c:	e7de      	b.n	800b23c <_malloc_r+0xa0>
 800b27e:	bf00      	nop
 800b280:	200059c8 	.word	0x200059c8

0800b284 <cleanup_glue>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	460c      	mov	r4, r1
 800b288:	6809      	ldr	r1, [r1, #0]
 800b28a:	4605      	mov	r5, r0
 800b28c:	b109      	cbz	r1, 800b292 <cleanup_glue+0xe>
 800b28e:	f7ff fff9 	bl	800b284 <cleanup_glue>
 800b292:	4621      	mov	r1, r4
 800b294:	4628      	mov	r0, r5
 800b296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b29a:	f7ff bf13 	b.w	800b0c4 <_free_r>
	...

0800b2a0 <_reclaim_reent>:
 800b2a0:	4b2c      	ldr	r3, [pc, #176]	; (800b354 <_reclaim_reent+0xb4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4283      	cmp	r3, r0
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	4604      	mov	r4, r0
 800b2aa:	d051      	beq.n	800b350 <_reclaim_reent+0xb0>
 800b2ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b2ae:	b143      	cbz	r3, 800b2c2 <_reclaim_reent+0x22>
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d14a      	bne.n	800b34c <_reclaim_reent+0xac>
 800b2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2b8:	6819      	ldr	r1, [r3, #0]
 800b2ba:	b111      	cbz	r1, 800b2c2 <_reclaim_reent+0x22>
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f7ff ff01 	bl	800b0c4 <_free_r>
 800b2c2:	6961      	ldr	r1, [r4, #20]
 800b2c4:	b111      	cbz	r1, 800b2cc <_reclaim_reent+0x2c>
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	f7ff fefc 	bl	800b0c4 <_free_r>
 800b2cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b2ce:	b111      	cbz	r1, 800b2d6 <_reclaim_reent+0x36>
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7ff fef7 	bl	800b0c4 <_free_r>
 800b2d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b2d8:	b111      	cbz	r1, 800b2e0 <_reclaim_reent+0x40>
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f7ff fef2 	bl	800b0c4 <_free_r>
 800b2e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b2e2:	b111      	cbz	r1, 800b2ea <_reclaim_reent+0x4a>
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f7ff feed 	bl	800b0c4 <_free_r>
 800b2ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b2ec:	b111      	cbz	r1, 800b2f4 <_reclaim_reent+0x54>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	f7ff fee8 	bl	800b0c4 <_free_r>
 800b2f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b2f6:	b111      	cbz	r1, 800b2fe <_reclaim_reent+0x5e>
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7ff fee3 	bl	800b0c4 <_free_r>
 800b2fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b300:	b111      	cbz	r1, 800b308 <_reclaim_reent+0x68>
 800b302:	4620      	mov	r0, r4
 800b304:	f7ff fede 	bl	800b0c4 <_free_r>
 800b308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b30a:	b111      	cbz	r1, 800b312 <_reclaim_reent+0x72>
 800b30c:	4620      	mov	r0, r4
 800b30e:	f7ff fed9 	bl	800b0c4 <_free_r>
 800b312:	69a3      	ldr	r3, [r4, #24]
 800b314:	b1e3      	cbz	r3, 800b350 <_reclaim_reent+0xb0>
 800b316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b318:	4620      	mov	r0, r4
 800b31a:	4798      	blx	r3
 800b31c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b31e:	b1b9      	cbz	r1, 800b350 <_reclaim_reent+0xb0>
 800b320:	4620      	mov	r0, r4
 800b322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b326:	f7ff bfad 	b.w	800b284 <cleanup_glue>
 800b32a:	5949      	ldr	r1, [r1, r5]
 800b32c:	b941      	cbnz	r1, 800b340 <_reclaim_reent+0xa0>
 800b32e:	3504      	adds	r5, #4
 800b330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b332:	2d80      	cmp	r5, #128	; 0x80
 800b334:	68d9      	ldr	r1, [r3, #12]
 800b336:	d1f8      	bne.n	800b32a <_reclaim_reent+0x8a>
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff fec3 	bl	800b0c4 <_free_r>
 800b33e:	e7ba      	b.n	800b2b6 <_reclaim_reent+0x16>
 800b340:	680e      	ldr	r6, [r1, #0]
 800b342:	4620      	mov	r0, r4
 800b344:	f7ff febe 	bl	800b0c4 <_free_r>
 800b348:	4631      	mov	r1, r6
 800b34a:	e7ef      	b.n	800b32c <_reclaim_reent+0x8c>
 800b34c:	2500      	movs	r5, #0
 800b34e:	e7ef      	b.n	800b330 <_reclaim_reent+0x90>
 800b350:	bd70      	pop	{r4, r5, r6, pc}
 800b352:	bf00      	nop
 800b354:	20000078 	.word	0x20000078

0800b358 <_sbrk_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d06      	ldr	r5, [pc, #24]	; (800b374 <_sbrk_r+0x1c>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	f7f7 ff94 	bl	8003290 <_sbrk>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_sbrk_r+0x1a>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_sbrk_r+0x1a>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	200059d0 	.word	0x200059d0

0800b378 <siprintf>:
 800b378:	b40e      	push	{r1, r2, r3}
 800b37a:	b500      	push	{lr}
 800b37c:	b09c      	sub	sp, #112	; 0x70
 800b37e:	ab1d      	add	r3, sp, #116	; 0x74
 800b380:	9002      	str	r0, [sp, #8]
 800b382:	9006      	str	r0, [sp, #24]
 800b384:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b388:	4809      	ldr	r0, [pc, #36]	; (800b3b0 <siprintf+0x38>)
 800b38a:	9107      	str	r1, [sp, #28]
 800b38c:	9104      	str	r1, [sp, #16]
 800b38e:	4909      	ldr	r1, [pc, #36]	; (800b3b4 <siprintf+0x3c>)
 800b390:	f853 2b04 	ldr.w	r2, [r3], #4
 800b394:	9105      	str	r1, [sp, #20]
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	a902      	add	r1, sp, #8
 800b39c:	f000 f988 	bl	800b6b0 <_svfiprintf_r>
 800b3a0:	9b02      	ldr	r3, [sp, #8]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	701a      	strb	r2, [r3, #0]
 800b3a6:	b01c      	add	sp, #112	; 0x70
 800b3a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ac:	b003      	add	sp, #12
 800b3ae:	4770      	bx	lr
 800b3b0:	20000078 	.word	0x20000078
 800b3b4:	ffff0208 	.word	0xffff0208

0800b3b8 <strcat>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	7814      	ldrb	r4, [r2, #0]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	3201      	adds	r2, #1
 800b3c2:	2c00      	cmp	r4, #0
 800b3c4:	d1fa      	bne.n	800b3bc <strcat+0x4>
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3d0:	2a00      	cmp	r2, #0
 800b3d2:	d1f9      	bne.n	800b3c8 <strcat+0x10>
 800b3d4:	bd10      	pop	{r4, pc}

0800b3d6 <strchr>:
 800b3d6:	b2c9      	uxtb	r1, r1
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3de:	b11a      	cbz	r2, 800b3e8 <strchr+0x12>
 800b3e0:	428a      	cmp	r2, r1
 800b3e2:	d1f9      	bne.n	800b3d8 <strchr+0x2>
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	4770      	bx	lr
 800b3e8:	2900      	cmp	r1, #0
 800b3ea:	bf18      	it	ne
 800b3ec:	2300      	movne	r3, #0
 800b3ee:	e7f9      	b.n	800b3e4 <strchr+0xe>

0800b3f0 <strcpy>:
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3f6:	f803 2b01 	strb.w	r2, [r3], #1
 800b3fa:	2a00      	cmp	r2, #0
 800b3fc:	d1f9      	bne.n	800b3f2 <strcpy+0x2>
 800b3fe:	4770      	bx	lr

0800b400 <strncpy>:
 800b400:	b510      	push	{r4, lr}
 800b402:	3901      	subs	r1, #1
 800b404:	4603      	mov	r3, r0
 800b406:	b132      	cbz	r2, 800b416 <strncpy+0x16>
 800b408:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b40c:	f803 4b01 	strb.w	r4, [r3], #1
 800b410:	3a01      	subs	r2, #1
 800b412:	2c00      	cmp	r4, #0
 800b414:	d1f7      	bne.n	800b406 <strncpy+0x6>
 800b416:	441a      	add	r2, r3
 800b418:	2100      	movs	r1, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d100      	bne.n	800b420 <strncpy+0x20>
 800b41e:	bd10      	pop	{r4, pc}
 800b420:	f803 1b01 	strb.w	r1, [r3], #1
 800b424:	e7f9      	b.n	800b41a <strncpy+0x1a>

0800b426 <strstr>:
 800b426:	780a      	ldrb	r2, [r1, #0]
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	b96a      	cbnz	r2, 800b448 <strstr+0x22>
 800b42c:	bd70      	pop	{r4, r5, r6, pc}
 800b42e:	429a      	cmp	r2, r3
 800b430:	d109      	bne.n	800b446 <strstr+0x20>
 800b432:	460c      	mov	r4, r1
 800b434:	4605      	mov	r5, r0
 800b436:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0f6      	beq.n	800b42c <strstr+0x6>
 800b43e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b442:	429e      	cmp	r6, r3
 800b444:	d0f7      	beq.n	800b436 <strstr+0x10>
 800b446:	3001      	adds	r0, #1
 800b448:	7803      	ldrb	r3, [r0, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1ef      	bne.n	800b42e <strstr+0x8>
 800b44e:	4618      	mov	r0, r3
 800b450:	e7ec      	b.n	800b42c <strstr+0x6>
	...

0800b454 <_strtol_l.constprop.0>:
 800b454:	2b01      	cmp	r3, #1
 800b456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b45a:	d001      	beq.n	800b460 <_strtol_l.constprop.0+0xc>
 800b45c:	2b24      	cmp	r3, #36	; 0x24
 800b45e:	d906      	bls.n	800b46e <_strtol_l.constprop.0+0x1a>
 800b460:	f7ff fd24 	bl	800aeac <__errno>
 800b464:	2316      	movs	r3, #22
 800b466:	6003      	str	r3, [r0, #0]
 800b468:	2000      	movs	r0, #0
 800b46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b554 <_strtol_l.constprop.0+0x100>
 800b472:	460d      	mov	r5, r1
 800b474:	462e      	mov	r6, r5
 800b476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b47a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b47e:	f017 0708 	ands.w	r7, r7, #8
 800b482:	d1f7      	bne.n	800b474 <_strtol_l.constprop.0+0x20>
 800b484:	2c2d      	cmp	r4, #45	; 0x2d
 800b486:	d132      	bne.n	800b4ee <_strtol_l.constprop.0+0x9a>
 800b488:	782c      	ldrb	r4, [r5, #0]
 800b48a:	2701      	movs	r7, #1
 800b48c:	1cb5      	adds	r5, r6, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d05b      	beq.n	800b54a <_strtol_l.constprop.0+0xf6>
 800b492:	2b10      	cmp	r3, #16
 800b494:	d109      	bne.n	800b4aa <_strtol_l.constprop.0+0x56>
 800b496:	2c30      	cmp	r4, #48	; 0x30
 800b498:	d107      	bne.n	800b4aa <_strtol_l.constprop.0+0x56>
 800b49a:	782c      	ldrb	r4, [r5, #0]
 800b49c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4a0:	2c58      	cmp	r4, #88	; 0x58
 800b4a2:	d14d      	bne.n	800b540 <_strtol_l.constprop.0+0xec>
 800b4a4:	786c      	ldrb	r4, [r5, #1]
 800b4a6:	2310      	movs	r3, #16
 800b4a8:	3502      	adds	r5, #2
 800b4aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b4b2:	f04f 0c00 	mov.w	ip, #0
 800b4b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4ba:	4666      	mov	r6, ip
 800b4bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b4c4:	f1be 0f09 	cmp.w	lr, #9
 800b4c8:	d816      	bhi.n	800b4f8 <_strtol_l.constprop.0+0xa4>
 800b4ca:	4674      	mov	r4, lr
 800b4cc:	42a3      	cmp	r3, r4
 800b4ce:	dd24      	ble.n	800b51a <_strtol_l.constprop.0+0xc6>
 800b4d0:	f1bc 0f00 	cmp.w	ip, #0
 800b4d4:	db1e      	blt.n	800b514 <_strtol_l.constprop.0+0xc0>
 800b4d6:	45b1      	cmp	r9, r6
 800b4d8:	d31c      	bcc.n	800b514 <_strtol_l.constprop.0+0xc0>
 800b4da:	d101      	bne.n	800b4e0 <_strtol_l.constprop.0+0x8c>
 800b4dc:	45a2      	cmp	sl, r4
 800b4de:	db19      	blt.n	800b514 <_strtol_l.constprop.0+0xc0>
 800b4e0:	fb06 4603 	mla	r6, r6, r3, r4
 800b4e4:	f04f 0c01 	mov.w	ip, #1
 800b4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4ec:	e7e8      	b.n	800b4c0 <_strtol_l.constprop.0+0x6c>
 800b4ee:	2c2b      	cmp	r4, #43	; 0x2b
 800b4f0:	bf04      	itt	eq
 800b4f2:	782c      	ldrbeq	r4, [r5, #0]
 800b4f4:	1cb5      	addeq	r5, r6, #2
 800b4f6:	e7ca      	b.n	800b48e <_strtol_l.constprop.0+0x3a>
 800b4f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b4fc:	f1be 0f19 	cmp.w	lr, #25
 800b500:	d801      	bhi.n	800b506 <_strtol_l.constprop.0+0xb2>
 800b502:	3c37      	subs	r4, #55	; 0x37
 800b504:	e7e2      	b.n	800b4cc <_strtol_l.constprop.0+0x78>
 800b506:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b50a:	f1be 0f19 	cmp.w	lr, #25
 800b50e:	d804      	bhi.n	800b51a <_strtol_l.constprop.0+0xc6>
 800b510:	3c57      	subs	r4, #87	; 0x57
 800b512:	e7db      	b.n	800b4cc <_strtol_l.constprop.0+0x78>
 800b514:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800b518:	e7e6      	b.n	800b4e8 <_strtol_l.constprop.0+0x94>
 800b51a:	f1bc 0f00 	cmp.w	ip, #0
 800b51e:	da05      	bge.n	800b52c <_strtol_l.constprop.0+0xd8>
 800b520:	2322      	movs	r3, #34	; 0x22
 800b522:	6003      	str	r3, [r0, #0]
 800b524:	4646      	mov	r6, r8
 800b526:	b942      	cbnz	r2, 800b53a <_strtol_l.constprop.0+0xe6>
 800b528:	4630      	mov	r0, r6
 800b52a:	e79e      	b.n	800b46a <_strtol_l.constprop.0+0x16>
 800b52c:	b107      	cbz	r7, 800b530 <_strtol_l.constprop.0+0xdc>
 800b52e:	4276      	negs	r6, r6
 800b530:	2a00      	cmp	r2, #0
 800b532:	d0f9      	beq.n	800b528 <_strtol_l.constprop.0+0xd4>
 800b534:	f1bc 0f00 	cmp.w	ip, #0
 800b538:	d000      	beq.n	800b53c <_strtol_l.constprop.0+0xe8>
 800b53a:	1e69      	subs	r1, r5, #1
 800b53c:	6011      	str	r1, [r2, #0]
 800b53e:	e7f3      	b.n	800b528 <_strtol_l.constprop.0+0xd4>
 800b540:	2430      	movs	r4, #48	; 0x30
 800b542:	2b00      	cmp	r3, #0
 800b544:	d1b1      	bne.n	800b4aa <_strtol_l.constprop.0+0x56>
 800b546:	2308      	movs	r3, #8
 800b548:	e7af      	b.n	800b4aa <_strtol_l.constprop.0+0x56>
 800b54a:	2c30      	cmp	r4, #48	; 0x30
 800b54c:	d0a5      	beq.n	800b49a <_strtol_l.constprop.0+0x46>
 800b54e:	230a      	movs	r3, #10
 800b550:	e7ab      	b.n	800b4aa <_strtol_l.constprop.0+0x56>
 800b552:	bf00      	nop
 800b554:	0800e185 	.word	0x0800e185

0800b558 <strtol>:
 800b558:	4613      	mov	r3, r2
 800b55a:	460a      	mov	r2, r1
 800b55c:	4601      	mov	r1, r0
 800b55e:	4802      	ldr	r0, [pc, #8]	; (800b568 <strtol+0x10>)
 800b560:	6800      	ldr	r0, [r0, #0]
 800b562:	f7ff bf77 	b.w	800b454 <_strtol_l.constprop.0>
 800b566:	bf00      	nop
 800b568:	20000078 	.word	0x20000078

0800b56c <_vsniprintf_r>:
 800b56c:	b530      	push	{r4, r5, lr}
 800b56e:	4614      	mov	r4, r2
 800b570:	2c00      	cmp	r4, #0
 800b572:	b09b      	sub	sp, #108	; 0x6c
 800b574:	4605      	mov	r5, r0
 800b576:	461a      	mov	r2, r3
 800b578:	da05      	bge.n	800b586 <_vsniprintf_r+0x1a>
 800b57a:	238b      	movs	r3, #139	; 0x8b
 800b57c:	6003      	str	r3, [r0, #0]
 800b57e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b582:	b01b      	add	sp, #108	; 0x6c
 800b584:	bd30      	pop	{r4, r5, pc}
 800b586:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b58a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b58e:	bf14      	ite	ne
 800b590:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b594:	4623      	moveq	r3, r4
 800b596:	9302      	str	r3, [sp, #8]
 800b598:	9305      	str	r3, [sp, #20]
 800b59a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b59e:	9100      	str	r1, [sp, #0]
 800b5a0:	9104      	str	r1, [sp, #16]
 800b5a2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b5a6:	4669      	mov	r1, sp
 800b5a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b5aa:	f000 f881 	bl	800b6b0 <_svfiprintf_r>
 800b5ae:	1c43      	adds	r3, r0, #1
 800b5b0:	bfbc      	itt	lt
 800b5b2:	238b      	movlt	r3, #139	; 0x8b
 800b5b4:	602b      	strlt	r3, [r5, #0]
 800b5b6:	2c00      	cmp	r4, #0
 800b5b8:	d0e3      	beq.n	800b582 <_vsniprintf_r+0x16>
 800b5ba:	9b00      	ldr	r3, [sp, #0]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	701a      	strb	r2, [r3, #0]
 800b5c0:	e7df      	b.n	800b582 <_vsniprintf_r+0x16>
	...

0800b5c4 <vsniprintf>:
 800b5c4:	b507      	push	{r0, r1, r2, lr}
 800b5c6:	9300      	str	r3, [sp, #0]
 800b5c8:	4613      	mov	r3, r2
 800b5ca:	460a      	mov	r2, r1
 800b5cc:	4601      	mov	r1, r0
 800b5ce:	4803      	ldr	r0, [pc, #12]	; (800b5dc <vsniprintf+0x18>)
 800b5d0:	6800      	ldr	r0, [r0, #0]
 800b5d2:	f7ff ffcb 	bl	800b56c <_vsniprintf_r>
 800b5d6:	b003      	add	sp, #12
 800b5d8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5dc:	20000078 	.word	0x20000078

0800b5e0 <__malloc_lock>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__malloc_lock+0x8>)
 800b5e2:	f7ff bd39 	b.w	800b058 <__retarget_lock_acquire_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	200059c4 	.word	0x200059c4

0800b5ec <__malloc_unlock>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	; (800b5f4 <__malloc_unlock+0x8>)
 800b5ee:	f7ff bd34 	b.w	800b05a <__retarget_lock_release_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	200059c4 	.word	0x200059c4

0800b5f8 <__ssputs_r>:
 800b5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5fc:	688e      	ldr	r6, [r1, #8]
 800b5fe:	429e      	cmp	r6, r3
 800b600:	4682      	mov	sl, r0
 800b602:	460c      	mov	r4, r1
 800b604:	4690      	mov	r8, r2
 800b606:	461f      	mov	r7, r3
 800b608:	d838      	bhi.n	800b67c <__ssputs_r+0x84>
 800b60a:	898a      	ldrh	r2, [r1, #12]
 800b60c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b610:	d032      	beq.n	800b678 <__ssputs_r+0x80>
 800b612:	6825      	ldr	r5, [r4, #0]
 800b614:	6909      	ldr	r1, [r1, #16]
 800b616:	eba5 0901 	sub.w	r9, r5, r1
 800b61a:	6965      	ldr	r5, [r4, #20]
 800b61c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b620:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b624:	3301      	adds	r3, #1
 800b626:	444b      	add	r3, r9
 800b628:	106d      	asrs	r5, r5, #1
 800b62a:	429d      	cmp	r5, r3
 800b62c:	bf38      	it	cc
 800b62e:	461d      	movcc	r5, r3
 800b630:	0553      	lsls	r3, r2, #21
 800b632:	d531      	bpl.n	800b698 <__ssputs_r+0xa0>
 800b634:	4629      	mov	r1, r5
 800b636:	f7ff fdb1 	bl	800b19c <_malloc_r>
 800b63a:	4606      	mov	r6, r0
 800b63c:	b950      	cbnz	r0, 800b654 <__ssputs_r+0x5c>
 800b63e:	230c      	movs	r3, #12
 800b640:	f8ca 3000 	str.w	r3, [sl]
 800b644:	89a3      	ldrh	r3, [r4, #12]
 800b646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b64a:	81a3      	strh	r3, [r4, #12]
 800b64c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b654:	6921      	ldr	r1, [r4, #16]
 800b656:	464a      	mov	r2, r9
 800b658:	f7ff fd08 	bl	800b06c <memcpy>
 800b65c:	89a3      	ldrh	r3, [r4, #12]
 800b65e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b666:	81a3      	strh	r3, [r4, #12]
 800b668:	6126      	str	r6, [r4, #16]
 800b66a:	6165      	str	r5, [r4, #20]
 800b66c:	444e      	add	r6, r9
 800b66e:	eba5 0509 	sub.w	r5, r5, r9
 800b672:	6026      	str	r6, [r4, #0]
 800b674:	60a5      	str	r5, [r4, #8]
 800b676:	463e      	mov	r6, r7
 800b678:	42be      	cmp	r6, r7
 800b67a:	d900      	bls.n	800b67e <__ssputs_r+0x86>
 800b67c:	463e      	mov	r6, r7
 800b67e:	6820      	ldr	r0, [r4, #0]
 800b680:	4632      	mov	r2, r6
 800b682:	4641      	mov	r1, r8
 800b684:	f000 faa8 	bl	800bbd8 <memmove>
 800b688:	68a3      	ldr	r3, [r4, #8]
 800b68a:	1b9b      	subs	r3, r3, r6
 800b68c:	60a3      	str	r3, [r4, #8]
 800b68e:	6823      	ldr	r3, [r4, #0]
 800b690:	4433      	add	r3, r6
 800b692:	6023      	str	r3, [r4, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	e7db      	b.n	800b650 <__ssputs_r+0x58>
 800b698:	462a      	mov	r2, r5
 800b69a:	f000 fab7 	bl	800bc0c <_realloc_r>
 800b69e:	4606      	mov	r6, r0
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d1e1      	bne.n	800b668 <__ssputs_r+0x70>
 800b6a4:	6921      	ldr	r1, [r4, #16]
 800b6a6:	4650      	mov	r0, sl
 800b6a8:	f7ff fd0c 	bl	800b0c4 <_free_r>
 800b6ac:	e7c7      	b.n	800b63e <__ssputs_r+0x46>
	...

0800b6b0 <_svfiprintf_r>:
 800b6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6b4:	4698      	mov	r8, r3
 800b6b6:	898b      	ldrh	r3, [r1, #12]
 800b6b8:	061b      	lsls	r3, r3, #24
 800b6ba:	b09d      	sub	sp, #116	; 0x74
 800b6bc:	4607      	mov	r7, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	4614      	mov	r4, r2
 800b6c2:	d50e      	bpl.n	800b6e2 <_svfiprintf_r+0x32>
 800b6c4:	690b      	ldr	r3, [r1, #16]
 800b6c6:	b963      	cbnz	r3, 800b6e2 <_svfiprintf_r+0x32>
 800b6c8:	2140      	movs	r1, #64	; 0x40
 800b6ca:	f7ff fd67 	bl	800b19c <_malloc_r>
 800b6ce:	6028      	str	r0, [r5, #0]
 800b6d0:	6128      	str	r0, [r5, #16]
 800b6d2:	b920      	cbnz	r0, 800b6de <_svfiprintf_r+0x2e>
 800b6d4:	230c      	movs	r3, #12
 800b6d6:	603b      	str	r3, [r7, #0]
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6dc:	e0d1      	b.n	800b882 <_svfiprintf_r+0x1d2>
 800b6de:	2340      	movs	r3, #64	; 0x40
 800b6e0:	616b      	str	r3, [r5, #20]
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6e6:	2320      	movs	r3, #32
 800b6e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6f0:	2330      	movs	r3, #48	; 0x30
 800b6f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b89c <_svfiprintf_r+0x1ec>
 800b6f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6fa:	f04f 0901 	mov.w	r9, #1
 800b6fe:	4623      	mov	r3, r4
 800b700:	469a      	mov	sl, r3
 800b702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b706:	b10a      	cbz	r2, 800b70c <_svfiprintf_r+0x5c>
 800b708:	2a25      	cmp	r2, #37	; 0x25
 800b70a:	d1f9      	bne.n	800b700 <_svfiprintf_r+0x50>
 800b70c:	ebba 0b04 	subs.w	fp, sl, r4
 800b710:	d00b      	beq.n	800b72a <_svfiprintf_r+0x7a>
 800b712:	465b      	mov	r3, fp
 800b714:	4622      	mov	r2, r4
 800b716:	4629      	mov	r1, r5
 800b718:	4638      	mov	r0, r7
 800b71a:	f7ff ff6d 	bl	800b5f8 <__ssputs_r>
 800b71e:	3001      	adds	r0, #1
 800b720:	f000 80aa 	beq.w	800b878 <_svfiprintf_r+0x1c8>
 800b724:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b726:	445a      	add	r2, fp
 800b728:	9209      	str	r2, [sp, #36]	; 0x24
 800b72a:	f89a 3000 	ldrb.w	r3, [sl]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 80a2 	beq.w	800b878 <_svfiprintf_r+0x1c8>
 800b734:	2300      	movs	r3, #0
 800b736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b73a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b73e:	f10a 0a01 	add.w	sl, sl, #1
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	9307      	str	r3, [sp, #28]
 800b746:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b74a:	931a      	str	r3, [sp, #104]	; 0x68
 800b74c:	4654      	mov	r4, sl
 800b74e:	2205      	movs	r2, #5
 800b750:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b754:	4851      	ldr	r0, [pc, #324]	; (800b89c <_svfiprintf_r+0x1ec>)
 800b756:	f7f4 fd43 	bl	80001e0 <memchr>
 800b75a:	9a04      	ldr	r2, [sp, #16]
 800b75c:	b9d8      	cbnz	r0, 800b796 <_svfiprintf_r+0xe6>
 800b75e:	06d0      	lsls	r0, r2, #27
 800b760:	bf44      	itt	mi
 800b762:	2320      	movmi	r3, #32
 800b764:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b768:	0711      	lsls	r1, r2, #28
 800b76a:	bf44      	itt	mi
 800b76c:	232b      	movmi	r3, #43	; 0x2b
 800b76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b772:	f89a 3000 	ldrb.w	r3, [sl]
 800b776:	2b2a      	cmp	r3, #42	; 0x2a
 800b778:	d015      	beq.n	800b7a6 <_svfiprintf_r+0xf6>
 800b77a:	9a07      	ldr	r2, [sp, #28]
 800b77c:	4654      	mov	r4, sl
 800b77e:	2000      	movs	r0, #0
 800b780:	f04f 0c0a 	mov.w	ip, #10
 800b784:	4621      	mov	r1, r4
 800b786:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b78a:	3b30      	subs	r3, #48	; 0x30
 800b78c:	2b09      	cmp	r3, #9
 800b78e:	d94e      	bls.n	800b82e <_svfiprintf_r+0x17e>
 800b790:	b1b0      	cbz	r0, 800b7c0 <_svfiprintf_r+0x110>
 800b792:	9207      	str	r2, [sp, #28]
 800b794:	e014      	b.n	800b7c0 <_svfiprintf_r+0x110>
 800b796:	eba0 0308 	sub.w	r3, r0, r8
 800b79a:	fa09 f303 	lsl.w	r3, r9, r3
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	46a2      	mov	sl, r4
 800b7a4:	e7d2      	b.n	800b74c <_svfiprintf_r+0x9c>
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	1d19      	adds	r1, r3, #4
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	9103      	str	r1, [sp, #12]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	bfbb      	ittet	lt
 800b7b2:	425b      	neglt	r3, r3
 800b7b4:	f042 0202 	orrlt.w	r2, r2, #2
 800b7b8:	9307      	strge	r3, [sp, #28]
 800b7ba:	9307      	strlt	r3, [sp, #28]
 800b7bc:	bfb8      	it	lt
 800b7be:	9204      	strlt	r2, [sp, #16]
 800b7c0:	7823      	ldrb	r3, [r4, #0]
 800b7c2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7c4:	d10c      	bne.n	800b7e0 <_svfiprintf_r+0x130>
 800b7c6:	7863      	ldrb	r3, [r4, #1]
 800b7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800b7ca:	d135      	bne.n	800b838 <_svfiprintf_r+0x188>
 800b7cc:	9b03      	ldr	r3, [sp, #12]
 800b7ce:	1d1a      	adds	r2, r3, #4
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	9203      	str	r2, [sp, #12]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	bfb8      	it	lt
 800b7d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7dc:	3402      	adds	r4, #2
 800b7de:	9305      	str	r3, [sp, #20]
 800b7e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b8ac <_svfiprintf_r+0x1fc>
 800b7e4:	7821      	ldrb	r1, [r4, #0]
 800b7e6:	2203      	movs	r2, #3
 800b7e8:	4650      	mov	r0, sl
 800b7ea:	f7f4 fcf9 	bl	80001e0 <memchr>
 800b7ee:	b140      	cbz	r0, 800b802 <_svfiprintf_r+0x152>
 800b7f0:	2340      	movs	r3, #64	; 0x40
 800b7f2:	eba0 000a 	sub.w	r0, r0, sl
 800b7f6:	fa03 f000 	lsl.w	r0, r3, r0
 800b7fa:	9b04      	ldr	r3, [sp, #16]
 800b7fc:	4303      	orrs	r3, r0
 800b7fe:	3401      	adds	r4, #1
 800b800:	9304      	str	r3, [sp, #16]
 800b802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b806:	4826      	ldr	r0, [pc, #152]	; (800b8a0 <_svfiprintf_r+0x1f0>)
 800b808:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b80c:	2206      	movs	r2, #6
 800b80e:	f7f4 fce7 	bl	80001e0 <memchr>
 800b812:	2800      	cmp	r0, #0
 800b814:	d038      	beq.n	800b888 <_svfiprintf_r+0x1d8>
 800b816:	4b23      	ldr	r3, [pc, #140]	; (800b8a4 <_svfiprintf_r+0x1f4>)
 800b818:	bb1b      	cbnz	r3, 800b862 <_svfiprintf_r+0x1b2>
 800b81a:	9b03      	ldr	r3, [sp, #12]
 800b81c:	3307      	adds	r3, #7
 800b81e:	f023 0307 	bic.w	r3, r3, #7
 800b822:	3308      	adds	r3, #8
 800b824:	9303      	str	r3, [sp, #12]
 800b826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b828:	4433      	add	r3, r6
 800b82a:	9309      	str	r3, [sp, #36]	; 0x24
 800b82c:	e767      	b.n	800b6fe <_svfiprintf_r+0x4e>
 800b82e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b832:	460c      	mov	r4, r1
 800b834:	2001      	movs	r0, #1
 800b836:	e7a5      	b.n	800b784 <_svfiprintf_r+0xd4>
 800b838:	2300      	movs	r3, #0
 800b83a:	3401      	adds	r4, #1
 800b83c:	9305      	str	r3, [sp, #20]
 800b83e:	4619      	mov	r1, r3
 800b840:	f04f 0c0a 	mov.w	ip, #10
 800b844:	4620      	mov	r0, r4
 800b846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b84a:	3a30      	subs	r2, #48	; 0x30
 800b84c:	2a09      	cmp	r2, #9
 800b84e:	d903      	bls.n	800b858 <_svfiprintf_r+0x1a8>
 800b850:	2b00      	cmp	r3, #0
 800b852:	d0c5      	beq.n	800b7e0 <_svfiprintf_r+0x130>
 800b854:	9105      	str	r1, [sp, #20]
 800b856:	e7c3      	b.n	800b7e0 <_svfiprintf_r+0x130>
 800b858:	fb0c 2101 	mla	r1, ip, r1, r2
 800b85c:	4604      	mov	r4, r0
 800b85e:	2301      	movs	r3, #1
 800b860:	e7f0      	b.n	800b844 <_svfiprintf_r+0x194>
 800b862:	ab03      	add	r3, sp, #12
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	462a      	mov	r2, r5
 800b868:	4b0f      	ldr	r3, [pc, #60]	; (800b8a8 <_svfiprintf_r+0x1f8>)
 800b86a:	a904      	add	r1, sp, #16
 800b86c:	4638      	mov	r0, r7
 800b86e:	f3af 8000 	nop.w
 800b872:	1c42      	adds	r2, r0, #1
 800b874:	4606      	mov	r6, r0
 800b876:	d1d6      	bne.n	800b826 <_svfiprintf_r+0x176>
 800b878:	89ab      	ldrh	r3, [r5, #12]
 800b87a:	065b      	lsls	r3, r3, #25
 800b87c:	f53f af2c 	bmi.w	800b6d8 <_svfiprintf_r+0x28>
 800b880:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b882:	b01d      	add	sp, #116	; 0x74
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	ab03      	add	r3, sp, #12
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	462a      	mov	r2, r5
 800b88e:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <_svfiprintf_r+0x1f8>)
 800b890:	a904      	add	r1, sp, #16
 800b892:	4638      	mov	r0, r7
 800b894:	f000 f87a 	bl	800b98c <_printf_i>
 800b898:	e7eb      	b.n	800b872 <_svfiprintf_r+0x1c2>
 800b89a:	bf00      	nop
 800b89c:	0800e285 	.word	0x0800e285
 800b8a0:	0800e28f 	.word	0x0800e28f
 800b8a4:	00000000 	.word	0x00000000
 800b8a8:	0800b5f9 	.word	0x0800b5f9
 800b8ac:	0800e28b 	.word	0x0800e28b

0800b8b0 <_printf_common>:
 800b8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8b4:	4616      	mov	r6, r2
 800b8b6:	4699      	mov	r9, r3
 800b8b8:	688a      	ldr	r2, [r1, #8]
 800b8ba:	690b      	ldr	r3, [r1, #16]
 800b8bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	bfb8      	it	lt
 800b8c4:	4613      	movlt	r3, r2
 800b8c6:	6033      	str	r3, [r6, #0]
 800b8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8cc:	4607      	mov	r7, r0
 800b8ce:	460c      	mov	r4, r1
 800b8d0:	b10a      	cbz	r2, 800b8d6 <_printf_common+0x26>
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	6033      	str	r3, [r6, #0]
 800b8d6:	6823      	ldr	r3, [r4, #0]
 800b8d8:	0699      	lsls	r1, r3, #26
 800b8da:	bf42      	ittt	mi
 800b8dc:	6833      	ldrmi	r3, [r6, #0]
 800b8de:	3302      	addmi	r3, #2
 800b8e0:	6033      	strmi	r3, [r6, #0]
 800b8e2:	6825      	ldr	r5, [r4, #0]
 800b8e4:	f015 0506 	ands.w	r5, r5, #6
 800b8e8:	d106      	bne.n	800b8f8 <_printf_common+0x48>
 800b8ea:	f104 0a19 	add.w	sl, r4, #25
 800b8ee:	68e3      	ldr	r3, [r4, #12]
 800b8f0:	6832      	ldr	r2, [r6, #0]
 800b8f2:	1a9b      	subs	r3, r3, r2
 800b8f4:	42ab      	cmp	r3, r5
 800b8f6:	dc26      	bgt.n	800b946 <_printf_common+0x96>
 800b8f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b8fc:	1e13      	subs	r3, r2, #0
 800b8fe:	6822      	ldr	r2, [r4, #0]
 800b900:	bf18      	it	ne
 800b902:	2301      	movne	r3, #1
 800b904:	0692      	lsls	r2, r2, #26
 800b906:	d42b      	bmi.n	800b960 <_printf_common+0xb0>
 800b908:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b90c:	4649      	mov	r1, r9
 800b90e:	4638      	mov	r0, r7
 800b910:	47c0      	blx	r8
 800b912:	3001      	adds	r0, #1
 800b914:	d01e      	beq.n	800b954 <_printf_common+0xa4>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	68e5      	ldr	r5, [r4, #12]
 800b91a:	6832      	ldr	r2, [r6, #0]
 800b91c:	f003 0306 	and.w	r3, r3, #6
 800b920:	2b04      	cmp	r3, #4
 800b922:	bf08      	it	eq
 800b924:	1aad      	subeq	r5, r5, r2
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	6922      	ldr	r2, [r4, #16]
 800b92a:	bf0c      	ite	eq
 800b92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b930:	2500      	movne	r5, #0
 800b932:	4293      	cmp	r3, r2
 800b934:	bfc4      	itt	gt
 800b936:	1a9b      	subgt	r3, r3, r2
 800b938:	18ed      	addgt	r5, r5, r3
 800b93a:	2600      	movs	r6, #0
 800b93c:	341a      	adds	r4, #26
 800b93e:	42b5      	cmp	r5, r6
 800b940:	d11a      	bne.n	800b978 <_printf_common+0xc8>
 800b942:	2000      	movs	r0, #0
 800b944:	e008      	b.n	800b958 <_printf_common+0xa8>
 800b946:	2301      	movs	r3, #1
 800b948:	4652      	mov	r2, sl
 800b94a:	4649      	mov	r1, r9
 800b94c:	4638      	mov	r0, r7
 800b94e:	47c0      	blx	r8
 800b950:	3001      	adds	r0, #1
 800b952:	d103      	bne.n	800b95c <_printf_common+0xac>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95c:	3501      	adds	r5, #1
 800b95e:	e7c6      	b.n	800b8ee <_printf_common+0x3e>
 800b960:	18e1      	adds	r1, r4, r3
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	2030      	movs	r0, #48	; 0x30
 800b966:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b96a:	4422      	add	r2, r4
 800b96c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b970:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b974:	3302      	adds	r3, #2
 800b976:	e7c7      	b.n	800b908 <_printf_common+0x58>
 800b978:	2301      	movs	r3, #1
 800b97a:	4622      	mov	r2, r4
 800b97c:	4649      	mov	r1, r9
 800b97e:	4638      	mov	r0, r7
 800b980:	47c0      	blx	r8
 800b982:	3001      	adds	r0, #1
 800b984:	d0e6      	beq.n	800b954 <_printf_common+0xa4>
 800b986:	3601      	adds	r6, #1
 800b988:	e7d9      	b.n	800b93e <_printf_common+0x8e>
	...

0800b98c <_printf_i>:
 800b98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	7e0f      	ldrb	r7, [r1, #24]
 800b992:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b994:	2f78      	cmp	r7, #120	; 0x78
 800b996:	4691      	mov	r9, r2
 800b998:	4680      	mov	r8, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	469a      	mov	sl, r3
 800b99e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9a2:	d807      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9a4:	2f62      	cmp	r7, #98	; 0x62
 800b9a6:	d80a      	bhi.n	800b9be <_printf_i+0x32>
 800b9a8:	2f00      	cmp	r7, #0
 800b9aa:	f000 80d8 	beq.w	800bb5e <_printf_i+0x1d2>
 800b9ae:	2f58      	cmp	r7, #88	; 0x58
 800b9b0:	f000 80a3 	beq.w	800bafa <_printf_i+0x16e>
 800b9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9bc:	e03a      	b.n	800ba34 <_printf_i+0xa8>
 800b9be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9c2:	2b15      	cmp	r3, #21
 800b9c4:	d8f6      	bhi.n	800b9b4 <_printf_i+0x28>
 800b9c6:	a101      	add	r1, pc, #4	; (adr r1, 800b9cc <_printf_i+0x40>)
 800b9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9cc:	0800ba25 	.word	0x0800ba25
 800b9d0:	0800ba39 	.word	0x0800ba39
 800b9d4:	0800b9b5 	.word	0x0800b9b5
 800b9d8:	0800b9b5 	.word	0x0800b9b5
 800b9dc:	0800b9b5 	.word	0x0800b9b5
 800b9e0:	0800b9b5 	.word	0x0800b9b5
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800b9b5 	.word	0x0800b9b5
 800b9ec:	0800b9b5 	.word	0x0800b9b5
 800b9f0:	0800b9b5 	.word	0x0800b9b5
 800b9f4:	0800b9b5 	.word	0x0800b9b5
 800b9f8:	0800bb45 	.word	0x0800bb45
 800b9fc:	0800ba69 	.word	0x0800ba69
 800ba00:	0800bb27 	.word	0x0800bb27
 800ba04:	0800b9b5 	.word	0x0800b9b5
 800ba08:	0800b9b5 	.word	0x0800b9b5
 800ba0c:	0800bb67 	.word	0x0800bb67
 800ba10:	0800b9b5 	.word	0x0800b9b5
 800ba14:	0800ba69 	.word	0x0800ba69
 800ba18:	0800b9b5 	.word	0x0800b9b5
 800ba1c:	0800b9b5 	.word	0x0800b9b5
 800ba20:	0800bb2f 	.word	0x0800bb2f
 800ba24:	682b      	ldr	r3, [r5, #0]
 800ba26:	1d1a      	adds	r2, r3, #4
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	602a      	str	r2, [r5, #0]
 800ba2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba34:	2301      	movs	r3, #1
 800ba36:	e0a3      	b.n	800bb80 <_printf_i+0x1f4>
 800ba38:	6820      	ldr	r0, [r4, #0]
 800ba3a:	6829      	ldr	r1, [r5, #0]
 800ba3c:	0606      	lsls	r6, r0, #24
 800ba3e:	f101 0304 	add.w	r3, r1, #4
 800ba42:	d50a      	bpl.n	800ba5a <_printf_i+0xce>
 800ba44:	680e      	ldr	r6, [r1, #0]
 800ba46:	602b      	str	r3, [r5, #0]
 800ba48:	2e00      	cmp	r6, #0
 800ba4a:	da03      	bge.n	800ba54 <_printf_i+0xc8>
 800ba4c:	232d      	movs	r3, #45	; 0x2d
 800ba4e:	4276      	negs	r6, r6
 800ba50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba54:	485e      	ldr	r0, [pc, #376]	; (800bbd0 <_printf_i+0x244>)
 800ba56:	230a      	movs	r3, #10
 800ba58:	e019      	b.n	800ba8e <_printf_i+0x102>
 800ba5a:	680e      	ldr	r6, [r1, #0]
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba62:	bf18      	it	ne
 800ba64:	b236      	sxthne	r6, r6
 800ba66:	e7ef      	b.n	800ba48 <_printf_i+0xbc>
 800ba68:	682b      	ldr	r3, [r5, #0]
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	1d19      	adds	r1, r3, #4
 800ba6e:	6029      	str	r1, [r5, #0]
 800ba70:	0601      	lsls	r1, r0, #24
 800ba72:	d501      	bpl.n	800ba78 <_printf_i+0xec>
 800ba74:	681e      	ldr	r6, [r3, #0]
 800ba76:	e002      	b.n	800ba7e <_printf_i+0xf2>
 800ba78:	0646      	lsls	r6, r0, #25
 800ba7a:	d5fb      	bpl.n	800ba74 <_printf_i+0xe8>
 800ba7c:	881e      	ldrh	r6, [r3, #0]
 800ba7e:	4854      	ldr	r0, [pc, #336]	; (800bbd0 <_printf_i+0x244>)
 800ba80:	2f6f      	cmp	r7, #111	; 0x6f
 800ba82:	bf0c      	ite	eq
 800ba84:	2308      	moveq	r3, #8
 800ba86:	230a      	movne	r3, #10
 800ba88:	2100      	movs	r1, #0
 800ba8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ba8e:	6865      	ldr	r5, [r4, #4]
 800ba90:	60a5      	str	r5, [r4, #8]
 800ba92:	2d00      	cmp	r5, #0
 800ba94:	bfa2      	ittt	ge
 800ba96:	6821      	ldrge	r1, [r4, #0]
 800ba98:	f021 0104 	bicge.w	r1, r1, #4
 800ba9c:	6021      	strge	r1, [r4, #0]
 800ba9e:	b90e      	cbnz	r6, 800baa4 <_printf_i+0x118>
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	d04d      	beq.n	800bb40 <_printf_i+0x1b4>
 800baa4:	4615      	mov	r5, r2
 800baa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800baaa:	fb03 6711 	mls	r7, r3, r1, r6
 800baae:	5dc7      	ldrb	r7, [r0, r7]
 800bab0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bab4:	4637      	mov	r7, r6
 800bab6:	42bb      	cmp	r3, r7
 800bab8:	460e      	mov	r6, r1
 800baba:	d9f4      	bls.n	800baa6 <_printf_i+0x11a>
 800babc:	2b08      	cmp	r3, #8
 800babe:	d10b      	bne.n	800bad8 <_printf_i+0x14c>
 800bac0:	6823      	ldr	r3, [r4, #0]
 800bac2:	07de      	lsls	r6, r3, #31
 800bac4:	d508      	bpl.n	800bad8 <_printf_i+0x14c>
 800bac6:	6923      	ldr	r3, [r4, #16]
 800bac8:	6861      	ldr	r1, [r4, #4]
 800baca:	4299      	cmp	r1, r3
 800bacc:	bfde      	ittt	le
 800bace:	2330      	movle	r3, #48	; 0x30
 800bad0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bad4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800bad8:	1b52      	subs	r2, r2, r5
 800bada:	6122      	str	r2, [r4, #16]
 800badc:	f8cd a000 	str.w	sl, [sp]
 800bae0:	464b      	mov	r3, r9
 800bae2:	aa03      	add	r2, sp, #12
 800bae4:	4621      	mov	r1, r4
 800bae6:	4640      	mov	r0, r8
 800bae8:	f7ff fee2 	bl	800b8b0 <_printf_common>
 800baec:	3001      	adds	r0, #1
 800baee:	d14c      	bne.n	800bb8a <_printf_i+0x1fe>
 800baf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800baf4:	b004      	add	sp, #16
 800baf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bafa:	4835      	ldr	r0, [pc, #212]	; (800bbd0 <_printf_i+0x244>)
 800bafc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bb00:	6829      	ldr	r1, [r5, #0]
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb08:	6029      	str	r1, [r5, #0]
 800bb0a:	061d      	lsls	r5, r3, #24
 800bb0c:	d514      	bpl.n	800bb38 <_printf_i+0x1ac>
 800bb0e:	07df      	lsls	r7, r3, #31
 800bb10:	bf44      	itt	mi
 800bb12:	f043 0320 	orrmi.w	r3, r3, #32
 800bb16:	6023      	strmi	r3, [r4, #0]
 800bb18:	b91e      	cbnz	r6, 800bb22 <_printf_i+0x196>
 800bb1a:	6823      	ldr	r3, [r4, #0]
 800bb1c:	f023 0320 	bic.w	r3, r3, #32
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	2310      	movs	r3, #16
 800bb24:	e7b0      	b.n	800ba88 <_printf_i+0xfc>
 800bb26:	6823      	ldr	r3, [r4, #0]
 800bb28:	f043 0320 	orr.w	r3, r3, #32
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	2378      	movs	r3, #120	; 0x78
 800bb30:	4828      	ldr	r0, [pc, #160]	; (800bbd4 <_printf_i+0x248>)
 800bb32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bb36:	e7e3      	b.n	800bb00 <_printf_i+0x174>
 800bb38:	0659      	lsls	r1, r3, #25
 800bb3a:	bf48      	it	mi
 800bb3c:	b2b6      	uxthmi	r6, r6
 800bb3e:	e7e6      	b.n	800bb0e <_printf_i+0x182>
 800bb40:	4615      	mov	r5, r2
 800bb42:	e7bb      	b.n	800babc <_printf_i+0x130>
 800bb44:	682b      	ldr	r3, [r5, #0]
 800bb46:	6826      	ldr	r6, [r4, #0]
 800bb48:	6961      	ldr	r1, [r4, #20]
 800bb4a:	1d18      	adds	r0, r3, #4
 800bb4c:	6028      	str	r0, [r5, #0]
 800bb4e:	0635      	lsls	r5, r6, #24
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	d501      	bpl.n	800bb58 <_printf_i+0x1cc>
 800bb54:	6019      	str	r1, [r3, #0]
 800bb56:	e002      	b.n	800bb5e <_printf_i+0x1d2>
 800bb58:	0670      	lsls	r0, r6, #25
 800bb5a:	d5fb      	bpl.n	800bb54 <_printf_i+0x1c8>
 800bb5c:	8019      	strh	r1, [r3, #0]
 800bb5e:	2300      	movs	r3, #0
 800bb60:	6123      	str	r3, [r4, #16]
 800bb62:	4615      	mov	r5, r2
 800bb64:	e7ba      	b.n	800badc <_printf_i+0x150>
 800bb66:	682b      	ldr	r3, [r5, #0]
 800bb68:	1d1a      	adds	r2, r3, #4
 800bb6a:	602a      	str	r2, [r5, #0]
 800bb6c:	681d      	ldr	r5, [r3, #0]
 800bb6e:	6862      	ldr	r2, [r4, #4]
 800bb70:	2100      	movs	r1, #0
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7f4 fb34 	bl	80001e0 <memchr>
 800bb78:	b108      	cbz	r0, 800bb7e <_printf_i+0x1f2>
 800bb7a:	1b40      	subs	r0, r0, r5
 800bb7c:	6060      	str	r0, [r4, #4]
 800bb7e:	6863      	ldr	r3, [r4, #4]
 800bb80:	6123      	str	r3, [r4, #16]
 800bb82:	2300      	movs	r3, #0
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb88:	e7a8      	b.n	800badc <_printf_i+0x150>
 800bb8a:	6923      	ldr	r3, [r4, #16]
 800bb8c:	462a      	mov	r2, r5
 800bb8e:	4649      	mov	r1, r9
 800bb90:	4640      	mov	r0, r8
 800bb92:	47d0      	blx	sl
 800bb94:	3001      	adds	r0, #1
 800bb96:	d0ab      	beq.n	800baf0 <_printf_i+0x164>
 800bb98:	6823      	ldr	r3, [r4, #0]
 800bb9a:	079b      	lsls	r3, r3, #30
 800bb9c:	d413      	bmi.n	800bbc6 <_printf_i+0x23a>
 800bb9e:	68e0      	ldr	r0, [r4, #12]
 800bba0:	9b03      	ldr	r3, [sp, #12]
 800bba2:	4298      	cmp	r0, r3
 800bba4:	bfb8      	it	lt
 800bba6:	4618      	movlt	r0, r3
 800bba8:	e7a4      	b.n	800baf4 <_printf_i+0x168>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4632      	mov	r2, r6
 800bbae:	4649      	mov	r1, r9
 800bbb0:	4640      	mov	r0, r8
 800bbb2:	47d0      	blx	sl
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	d09b      	beq.n	800baf0 <_printf_i+0x164>
 800bbb8:	3501      	adds	r5, #1
 800bbba:	68e3      	ldr	r3, [r4, #12]
 800bbbc:	9903      	ldr	r1, [sp, #12]
 800bbbe:	1a5b      	subs	r3, r3, r1
 800bbc0:	42ab      	cmp	r3, r5
 800bbc2:	dcf2      	bgt.n	800bbaa <_printf_i+0x21e>
 800bbc4:	e7eb      	b.n	800bb9e <_printf_i+0x212>
 800bbc6:	2500      	movs	r5, #0
 800bbc8:	f104 0619 	add.w	r6, r4, #25
 800bbcc:	e7f5      	b.n	800bbba <_printf_i+0x22e>
 800bbce:	bf00      	nop
 800bbd0:	0800e296 	.word	0x0800e296
 800bbd4:	0800e2a7 	.word	0x0800e2a7

0800bbd8 <memmove>:
 800bbd8:	4288      	cmp	r0, r1
 800bbda:	b510      	push	{r4, lr}
 800bbdc:	eb01 0402 	add.w	r4, r1, r2
 800bbe0:	d902      	bls.n	800bbe8 <memmove+0x10>
 800bbe2:	4284      	cmp	r4, r0
 800bbe4:	4623      	mov	r3, r4
 800bbe6:	d807      	bhi.n	800bbf8 <memmove+0x20>
 800bbe8:	1e43      	subs	r3, r0, #1
 800bbea:	42a1      	cmp	r1, r4
 800bbec:	d008      	beq.n	800bc00 <memmove+0x28>
 800bbee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbf6:	e7f8      	b.n	800bbea <memmove+0x12>
 800bbf8:	4402      	add	r2, r0
 800bbfa:	4601      	mov	r1, r0
 800bbfc:	428a      	cmp	r2, r1
 800bbfe:	d100      	bne.n	800bc02 <memmove+0x2a>
 800bc00:	bd10      	pop	{r4, pc}
 800bc02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc0a:	e7f7      	b.n	800bbfc <memmove+0x24>

0800bc0c <_realloc_r>:
 800bc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc10:	4680      	mov	r8, r0
 800bc12:	4614      	mov	r4, r2
 800bc14:	460e      	mov	r6, r1
 800bc16:	b921      	cbnz	r1, 800bc22 <_realloc_r+0x16>
 800bc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1c:	4611      	mov	r1, r2
 800bc1e:	f7ff babd 	b.w	800b19c <_malloc_r>
 800bc22:	b92a      	cbnz	r2, 800bc30 <_realloc_r+0x24>
 800bc24:	f7ff fa4e 	bl	800b0c4 <_free_r>
 800bc28:	4625      	mov	r5, r4
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc30:	f000 f81b 	bl	800bc6a <_malloc_usable_size_r>
 800bc34:	4284      	cmp	r4, r0
 800bc36:	4607      	mov	r7, r0
 800bc38:	d802      	bhi.n	800bc40 <_realloc_r+0x34>
 800bc3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc3e:	d812      	bhi.n	800bc66 <_realloc_r+0x5a>
 800bc40:	4621      	mov	r1, r4
 800bc42:	4640      	mov	r0, r8
 800bc44:	f7ff faaa 	bl	800b19c <_malloc_r>
 800bc48:	4605      	mov	r5, r0
 800bc4a:	2800      	cmp	r0, #0
 800bc4c:	d0ed      	beq.n	800bc2a <_realloc_r+0x1e>
 800bc4e:	42bc      	cmp	r4, r7
 800bc50:	4622      	mov	r2, r4
 800bc52:	4631      	mov	r1, r6
 800bc54:	bf28      	it	cs
 800bc56:	463a      	movcs	r2, r7
 800bc58:	f7ff fa08 	bl	800b06c <memcpy>
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4640      	mov	r0, r8
 800bc60:	f7ff fa30 	bl	800b0c4 <_free_r>
 800bc64:	e7e1      	b.n	800bc2a <_realloc_r+0x1e>
 800bc66:	4635      	mov	r5, r6
 800bc68:	e7df      	b.n	800bc2a <_realloc_r+0x1e>

0800bc6a <_malloc_usable_size_r>:
 800bc6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc6e:	1f18      	subs	r0, r3, #4
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfbc      	itt	lt
 800bc74:	580b      	ldrlt	r3, [r1, r0]
 800bc76:	18c0      	addlt	r0, r0, r3
 800bc78:	4770      	bx	lr
	...

0800bc7c <_init>:
 800bc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc7e:	bf00      	nop
 800bc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc82:	bc08      	pop	{r3}
 800bc84:	469e      	mov	lr, r3
 800bc86:	4770      	bx	lr

0800bc88 <_fini>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr
