
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012fe4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003e00  08013174  08013174  00023174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016f74  08016f74  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08016f74  08016f74  00026f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016f7c  08016f7c  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016f7c  08016f7c  00026f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016f80  08016f80  00026f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08016f84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          000082e4  20000120  20000120  00030120  2**3
                  ALLOC
 11 ._user_heap_stack 00001c04  20008404  20008404  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a7d7  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004de9  00000000  00000000  0005a923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002110  00000000  00000000  0005f710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007ad1  00000000  00000000  00061820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026a26  00000000  00000000  000692f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e755c  00000000  00000000  0008fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177273  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002160  00000000  00000000  001772c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009c10  00000000  00000000  00179428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801315c 	.word	0x0801315c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0801315c 	.word	0x0801315c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9d3 	b.w	8000c54 <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f861 	bl	8000984 <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f854 	bl	8000984 <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f843 	bl	8000984 <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f835 	bl	8000984 <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b988 	b.w	8000c54 <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f81a 	bl	8000984 <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__popcountsi2>:
 800095c:	0843      	lsrs	r3, r0, #1
 800095e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000962:	1ac0      	subs	r0, r0, r3
 8000964:	0883      	lsrs	r3, r0, #2
 8000966:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 800096a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 800096e:	4418      	add	r0, r3
 8000970:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000974:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000978:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 800097c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000980:	0e00      	lsrs	r0, r0, #24
 8000982:	4770      	bx	lr

08000984 <__udivmoddi4>:
 8000984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000988:	9d08      	ldr	r5, [sp, #32]
 800098a:	4604      	mov	r4, r0
 800098c:	468e      	mov	lr, r1
 800098e:	2b00      	cmp	r3, #0
 8000990:	d14d      	bne.n	8000a2e <__udivmoddi4+0xaa>
 8000992:	428a      	cmp	r2, r1
 8000994:	4694      	mov	ip, r2
 8000996:	d969      	bls.n	8000a6c <__udivmoddi4+0xe8>
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	b152      	cbz	r2, 80009b4 <__udivmoddi4+0x30>
 800099e:	fa01 f302 	lsl.w	r3, r1, r2
 80009a2:	f1c2 0120 	rsb	r1, r2, #32
 80009a6:	fa20 f101 	lsr.w	r1, r0, r1
 80009aa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ae:	ea41 0e03 	orr.w	lr, r1, r3
 80009b2:	4094      	lsls	r4, r2
 80009b4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009b8:	0c21      	lsrs	r1, r4, #16
 80009ba:	fbbe f6f8 	udiv	r6, lr, r8
 80009be:	fa1f f78c 	uxth.w	r7, ip
 80009c2:	fb08 e316 	mls	r3, r8, r6, lr
 80009c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009ca:	fb06 f107 	mul.w	r1, r6, r7
 80009ce:	4299      	cmp	r1, r3
 80009d0:	d90a      	bls.n	80009e8 <__udivmoddi4+0x64>
 80009d2:	eb1c 0303 	adds.w	r3, ip, r3
 80009d6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009da:	f080 811f 	bcs.w	8000c1c <__udivmoddi4+0x298>
 80009de:	4299      	cmp	r1, r3
 80009e0:	f240 811c 	bls.w	8000c1c <__udivmoddi4+0x298>
 80009e4:	3e02      	subs	r6, #2
 80009e6:	4463      	add	r3, ip
 80009e8:	1a5b      	subs	r3, r3, r1
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb3 f0f8 	udiv	r0, r3, r8
 80009f0:	fb08 3310 	mls	r3, r8, r0, r3
 80009f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009f8:	fb00 f707 	mul.w	r7, r0, r7
 80009fc:	42a7      	cmp	r7, r4
 80009fe:	d90a      	bls.n	8000a16 <__udivmoddi4+0x92>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a08:	f080 810a 	bcs.w	8000c20 <__udivmoddi4+0x29c>
 8000a0c:	42a7      	cmp	r7, r4
 8000a0e:	f240 8107 	bls.w	8000c20 <__udivmoddi4+0x29c>
 8000a12:	4464      	add	r4, ip
 8000a14:	3802      	subs	r0, #2
 8000a16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a1a:	1be4      	subs	r4, r4, r7
 8000a1c:	2600      	movs	r6, #0
 8000a1e:	b11d      	cbz	r5, 8000a28 <__udivmoddi4+0xa4>
 8000a20:	40d4      	lsrs	r4, r2
 8000a22:	2300      	movs	r3, #0
 8000a24:	e9c5 4300 	strd	r4, r3, [r5]
 8000a28:	4631      	mov	r1, r6
 8000a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2e:	428b      	cmp	r3, r1
 8000a30:	d909      	bls.n	8000a46 <__udivmoddi4+0xc2>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	f000 80ef 	beq.w	8000c16 <__udivmoddi4+0x292>
 8000a38:	2600      	movs	r6, #0
 8000a3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a3e:	4630      	mov	r0, r6
 8000a40:	4631      	mov	r1, r6
 8000a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a46:	fab3 f683 	clz	r6, r3
 8000a4a:	2e00      	cmp	r6, #0
 8000a4c:	d14a      	bne.n	8000ae4 <__udivmoddi4+0x160>
 8000a4e:	428b      	cmp	r3, r1
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xd4>
 8000a52:	4282      	cmp	r2, r0
 8000a54:	f200 80f9 	bhi.w	8000c4a <__udivmoddi4+0x2c6>
 8000a58:	1a84      	subs	r4, r0, r2
 8000a5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	469e      	mov	lr, r3
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	d0e0      	beq.n	8000a28 <__udivmoddi4+0xa4>
 8000a66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a6a:	e7dd      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000a6c:	b902      	cbnz	r2, 8000a70 <__udivmoddi4+0xec>
 8000a6e:	deff      	udf	#255	; 0xff
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	f040 8092 	bne.w	8000b9e <__udivmoddi4+0x21a>
 8000a7a:	eba1 010c 	sub.w	r1, r1, ip
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2601      	movs	r6, #1
 8000a88:	0c20      	lsrs	r0, r4, #16
 8000a8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000a92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a96:	fb0e f003 	mul.w	r0, lr, r3
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x12c>
 8000a9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x12a>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2c0>
 8000aae:	4643      	mov	r3, r8
 8000ab0:	1a09      	subs	r1, r1, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ab8:	fb07 1110 	mls	r1, r7, r0, r1
 8000abc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x156>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x154>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2ca>
 8000ad8:	4608      	mov	r0, r1
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ae2:	e79c      	b.n	8000a1e <__udivmoddi4+0x9a>
 8000ae4:	f1c6 0720 	rsb	r7, r6, #32
 8000ae8:	40b3      	lsls	r3, r6
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa20 f407 	lsr.w	r4, r0, r7
 8000af6:	fa01 f306 	lsl.w	r3, r1, r6
 8000afa:	431c      	orrs	r4, r3
 8000afc:	40f9      	lsrs	r1, r7
 8000afe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b02:	fa00 f306 	lsl.w	r3, r0, r6
 8000b06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b0a:	0c20      	lsrs	r0, r4, #16
 8000b0c:	fa1f fe8c 	uxth.w	lr, ip
 8000b10:	fb09 1118 	mls	r1, r9, r8, r1
 8000b14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b18:	fb08 f00e 	mul.w	r0, r8, lr
 8000b1c:	4288      	cmp	r0, r1
 8000b1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b8>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2bc>
 8000b30:	4288      	cmp	r0, r1
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2bc>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4461      	add	r1, ip
 8000b3c:	1a09      	subs	r1, r1, r0
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b44:	fb09 1110 	mls	r1, r9, r0, r1
 8000b48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	458e      	cmp	lr, r1
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1e2>
 8000b54:	eb1c 0101 	adds.w	r1, ip, r1
 8000b58:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2b4>
 8000b5e:	458e      	cmp	lr, r1
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2b4>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4461      	add	r1, ip
 8000b66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000b6e:	eba1 010e 	sub.w	r1, r1, lr
 8000b72:	42a1      	cmp	r1, r4
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46a6      	mov	lr, r4
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x2a4>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x2a0>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x212>
 8000b7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000b82:	eb61 010e 	sbc.w	r1, r1, lr
 8000b86:	fa01 f707 	lsl.w	r7, r1, r7
 8000b8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000b8e:	40f1      	lsrs	r1, r6
 8000b90:	431f      	orrs	r7, r3
 8000b92:	e9c5 7100 	strd	r7, r1, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	f1c2 0320 	rsb	r3, r2, #32
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4301      	orrs	r1, r0
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000bbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000bc0:	0c0b      	lsrs	r3, r1, #16
 8000bc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000bc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000bca:	429e      	cmp	r6, r3
 8000bcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x260>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b8>
 8000bdc:	429e      	cmp	r6, r3
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b8>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1b9b      	subs	r3, r3, r6
 8000be6:	b289      	uxth	r1, r1
 8000be8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bec:	fb07 3316 	mls	r3, r7, r6, r3
 8000bf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bf4:	fb06 f30e 	mul.w	r3, r6, lr
 8000bf8:	428b      	cmp	r3, r1
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x28a>
 8000bfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000c00:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2b0>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2b0>
 8000c0a:	3e02      	subs	r6, #2
 8000c0c:	4461      	add	r1, ip
 8000c0e:	1ac9      	subs	r1, r1, r3
 8000c10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0x104>
 8000c16:	462e      	mov	r6, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e705      	b.n	8000a28 <__udivmoddi4+0xa4>
 8000c1c:	4606      	mov	r6, r0
 8000c1e:	e6e3      	b.n	80009e8 <__udivmoddi4+0x64>
 8000c20:	4618      	mov	r0, r3
 8000c22:	e6f8      	b.n	8000a16 <__udivmoddi4+0x92>
 8000c24:	454b      	cmp	r3, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f8>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c30:	3801      	subs	r0, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f8>
 8000c34:	4646      	mov	r6, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x28a>
 8000c38:	4620      	mov	r0, r4
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1e2>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x260>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b8>
 8000c44:	3b02      	subs	r3, #2
 8000c46:	4461      	add	r1, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x12c>
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	e709      	b.n	8000a62 <__udivmoddi4+0xde>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x156>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <tmpPrint>:
	uint8_t tmpBuf[32] = {0};
	uint8_t tmpLen = 0;
	char tmpChar[256];

	void tmpPrint(const char *func, uint8_t *buf, uint8_t len)
	{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	4613      	mov	r3, r2
 8000c64:	71fb      	strb	r3, [r7, #7]
		strcpy(tmpChar, "to_nand:");
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <tmpPrint+0x5c>)
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <tmpPrint+0x60>)
 8000c6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c6c:	c303      	stmia	r3!, {r0, r1}
 8000c6e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) sprintf(tmpChar+strlen(tmpChar), " %02X", *(uint8_t *)(buf + i));
 8000c70:	2300      	movs	r3, #0
 8000c72:	75fb      	strb	r3, [r7, #23]
 8000c74:	e010      	b.n	8000c98 <tmpPrint+0x40>
 8000c76:	480f      	ldr	r0, [pc, #60]	; (8000cb4 <tmpPrint+0x5c>)
 8000c78:	f7ff faaa 	bl	80001d0 <strlen>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <tmpPrint+0x5c>)
 8000c80:	1898      	adds	r0, r3, r2
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	68ba      	ldr	r2, [r7, #8]
 8000c86:	4413      	add	r3, r2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	490b      	ldr	r1, [pc, #44]	; (8000cbc <tmpPrint+0x64>)
 8000c8e:	f011 fc9b 	bl	80125c8 <siprintf>
 8000c92:	7dfb      	ldrb	r3, [r7, #23]
 8000c94:	3301      	adds	r3, #1
 8000c96:	75fb      	strb	r3, [r7, #23]
 8000c98:	7dfa      	ldrb	r2, [r7, #23]
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d3ea      	bcc.n	8000c76 <tmpPrint+0x1e>
		Report(0, "\t\t%s\r\n", tmpChar);
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <tmpPrint+0x5c>)
 8000ca2:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <tmpPrint+0x68>)
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f001 fdc7 	bl	8002838 <Report>
	}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000160 	.word	0x20000160
 8000cb8:	08013174 	.word	0x08013174
 8000cbc:	08013180 	.word	0x08013180
 8000cc0:	08013188 	.word	0x08013188

08000cc4 <io_nand_init>:
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
}
*/
//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000cc4:	b5b0      	push	{r4, r5, r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000ccc:	491c      	ldr	r1, [pc, #112]	; (8000d40 <io_nand_init+0x7c>)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 f864 	bl	8000d9c <NAND_Read_ID>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d12e      	bne.n	8000d38 <io_nand_init+0x74>

    	nandState = HAL_NAND_GetState(hnand);
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f00a f8e9 	bl	800aeb2 <HAL_NAND_GetState>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <io_nand_init+0x80>)
 8000ce6:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <io_nand_init+0x84>)
 8000cf0:	6810      	ldr	r0, [r2, #0]
 8000cf2:	6851      	ldr	r1, [r2, #4]
 8000cf4:	6895      	ldr	r5, [r2, #8]
 8000cf6:	68d4      	ldr	r4, [r2, #12]
 8000cf8:	6018      	str	r0, [r3, #0]
 8000cfa:	6059      	str	r1, [r3, #4]
 8000cfc:	609d      	str	r5, [r3, #8]
 8000cfe:	60dc      	str	r4, [r3, #12]
 8000d00:	6910      	ldr	r0, [r2, #16]
 8000d02:	6951      	ldr	r1, [r2, #20]
 8000d04:	6118      	str	r0, [r3, #16]
 8000d06:	6159      	str	r1, [r3, #20]
    	chipConf.PlaneSize *= chipConf.BlockNbr;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <io_nand_init+0x84>)
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <io_nand_init+0x84>)
 8000d0e:	68d2      	ldr	r2, [r2, #12]
 8000d10:	fb02 f303 	mul.w	r3, r2, r3
 8000d14:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <io_nand_init+0x84>)
 8000d16:	6153      	str	r3, [r2, #20]

    	total_pages = chipConf.BlockSize * chipConf.BlockNbr;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <io_nand_init+0x84>)
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <io_nand_init+0x84>)
 8000d1e:	68d2      	ldr	r2, [r2, #12]
 8000d20:	fb02 f303 	mul.w	r3, r2, r3
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <io_nand_init+0x88>)
 8000d26:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <io_nand_init+0x84>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <io_nand_init+0x88>)
 8000d2e:	6812      	ldr	r2, [r2, #0]
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	4a06      	ldr	r2, [pc, #24]	; (8000d50 <io_nand_init+0x8c>)
 8000d36:	6013      	str	r3, [r2, #0]

    }

}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d40:	200014a8 	.word	0x200014a8
 8000d44:	20000081 	.word	0x20000081
 8000d48:	200014b0 	.word	0x200014b0
 8000d4c:	20001488 	.word	0x20001488
 8000d50:	2000148c 	.word	0x2000148c

08000d54 <io_nand_get_page_size>:
//-------------------------------------------------------------------------------------------
uint32_t io_nand_get_page_size(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
    return chipConf.PageSize;
 8000d58:	4b03      	ldr	r3, [pc, #12]	; (8000d68 <io_nand_get_page_size+0x14>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200014b0 	.word	0x200014b0

08000d6c <io_nand_get_block_number>:
uint32_t io_nand_get_block_number(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	return chipConf.BlockNbr;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <io_nand_get_block_number+0x14>)
 8000d72:	68db      	ldr	r3, [r3, #12]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200014b0 	.word	0x200014b0

08000d84 <io_nand_get_block_size>:
uint32_t io_nand_get_block_size(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
	return chipConf.BlockSize;
 8000d88:	4b03      	ldr	r3, [pc, #12]	; (8000d98 <io_nand_get_block_size+0x14>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	200014b0 	.word	0x200014b0

08000d9c <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d101      	bne.n	8000db6 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000db2:	2302      	movs	r3, #2
 8000db4:	e059      	b.n	8000e6a <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d152      	bne.n	8000e68 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <NAND_Read_ID+0x34>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e04c      	b.n	8000e6a <NAND_Read_ID+0xce>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2202      	movs	r2, #2
 8000ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000de0:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000de2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000de6:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000df0:	2290      	movs	r2, #144	; 0x90
 8000df2:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000df4:	f3bf 8f4f 	dsb	sy
}
 8000df8:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e06:	f3bf 8f4f 	dsb	sy
}
 8000e0a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d123      	bne.n	8000e5c <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000e14:	4b18      	ldr	r3, [pc, #96]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <NAND_Read_ID+0xdc>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3310      	adds	r3, #16
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	0e1b      	lsrs	r3, r3, #24
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	711a      	strb	r2, [r3, #4]


	    	hnand->State = HAL_NAND_STATE_READY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2201      	movs	r2, #1
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e000      	b.n	8000e6a <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20001490 	.word	0x20001490

08000e7c <io_nand_read_8b>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b090      	sub	sp, #64	; 0x40
 8000e80:	af04      	add	r7, sp, #16
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	68f9      	ldr	r1, [r7, #12]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fcdd 	bl	8001850 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000e96:	4b6a      	ldr	r3, [pc, #424]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d101      	bne.n	8000ea8 <io_nand_read_8b+0x2c>
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	e1d6      	b.n	8001256 <io_nand_read_8b+0x3da>

    __HAL_LOCK(nandPort);
 8000ea8:	4b65      	ldr	r3, [pc, #404]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <io_nand_read_8b+0x3c>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e1ce      	b.n	8001256 <io_nand_read_8b+0x3da>
 8000eb8:	4b61      	ldr	r3, [pc, #388]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000ec2:	4b5f      	ldr	r3, [pc, #380]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2202      	movs	r2, #2
 8000ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000ecc:	4b5d      	ldr	r3, [pc, #372]	; (8001044 <io_nand_read_8b+0x1c8>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000ed2:	8a3b      	ldrh	r3, [r7, #16]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	8abb      	ldrh	r3, [r7, #20]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	8a7b      	ldrh	r3, [r7, #18]
 8000edc:	4618      	mov	r0, r3
 8000ede:	4b58      	ldr	r3, [pc, #352]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ee4:	fb00 f303 	mul.w	r3, r0, r3
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a55      	ldr	r2, [pc, #340]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000ef8:	4b53      	ldr	r3, [pc, #332]	; (8001048 <io_nand_read_8b+0x1cc>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d90b      	bls.n	8000f18 <io_nand_read_8b+0x9c>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 8000f00:	8a3b      	ldrh	r3, [r7, #16]
 8000f02:	8a7a      	ldrh	r2, [r7, #18]
 8000f04:	8ab9      	ldrh	r1, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 8000f06:	9102      	str	r1, [sp, #8]
 8000f08:	9201      	str	r2, [sp, #4]
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	4a4f      	ldr	r2, [pc, #316]	; (800104c <io_nand_read_8b+0x1d0>)
 8000f10:	494f      	ldr	r1, [pc, #316]	; (8001050 <io_nand_read_8b+0x1d4>)
 8000f12:	2001      	movs	r0, #1
 8000f14:	f001 fc90 	bl	8002838 <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	484c      	ldr	r0, [pc, #304]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000f22:	f010 fee9 	bl	8011cf8 <memset>
    tmpLen = 0;
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f36:	f3bf 8f4f 	dsb	sy
}
 8000f3a:	bf00      	nop
    __DSB();

    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d009      	beq.n	8000f56 <io_nand_read_8b+0xda>
 8000f42:	4b45      	ldr	r3, [pc, #276]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	b2d1      	uxtb	r1, r2
 8000f4a:	4a43      	ldr	r2, [pc, #268]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f4c:	7011      	strb	r1, [r2, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4b40      	ldr	r3, [pc, #256]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000f52:	2100      	movs	r1, #0
 8000f54:	5499      	strb	r1, [r3, r2]

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000f56:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f60:	d87c      	bhi.n	800105c <io_nand_read_8b+0x1e0>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	683a      	ldr	r2, [r7, #0]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f6e:	f3bf 8f4f 	dsb	sy
}
 8000f72:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);;
 8000f74:	7ffb      	ldrb	r3, [r7, #31]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00a      	beq.n	8000f90 <io_nand_read_8b+0x114>
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	b2d1      	uxtb	r1, r2
 8000f82:	4a35      	ldr	r2, [pc, #212]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000f84:	7011      	strb	r1, [r2, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2d9      	uxtb	r1, r3
 8000f8c:	4b31      	ldr	r3, [pc, #196]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000f8e:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f96:	6a3a      	ldr	r2, [r7, #32]
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9c:	f3bf 8f4f 	dsb	sy
}
 8000fa0:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8000fa2:	7ffb      	ldrb	r3, [r7, #31]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00a      	beq.n	8000fbe <io_nand_read_8b+0x142>
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	b2d1      	uxtb	r1, r2
 8000fb0:	4a29      	ldr	r2, [pc, #164]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000fb2:	7011      	strb	r1, [r2, #0]
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	6a3b      	ldr	r3, [r7, #32]
 8000fb8:	b2d9      	uxtb	r1, r3
 8000fba:	4b26      	ldr	r3, [pc, #152]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000fbc:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	0a1a      	lsrs	r2, r3, #8
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fcc:	f3bf 8f4f 	dsb	sy
}
 8000fd0:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8000fd2:	7ffb      	ldrb	r3, [r7, #31]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00b      	beq.n	8000ff0 <io_nand_read_8b+0x174>
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	0a19      	lsrs	r1, r3, #8
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	b2d0      	uxtb	r0, r2
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <io_nand_read_8b+0x1dc>)
 8000fe6:	7010      	strb	r0, [r2, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	b2c9      	uxtb	r1, r1
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <io_nand_read_8b+0x1d8>)
 8000fee:	5499      	strb	r1, [r3, r2]
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <io_nand_read_8b+0x1c4>)
 8000ff8:	6812      	ldr	r2, [r2, #0]
 8000ffa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ffc:	fb02 f303 	mul.w	r3, r2, r3
 8001000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001004:	f0c0 80ae 	bcc.w	8001164 <io_nand_read_8b+0x2e8>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001008:	6a3b      	ldr	r3, [r7, #32]
 800100a:	0c1a      	lsrs	r2, r3, #16
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001016:	f3bf 8f4f 	dsb	sy
}
 800101a:	bf00      	nop
			__DSB();
			if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800101c:	7ffb      	ldrb	r3, [r7, #31]
 800101e:	2b00      	cmp	r3, #0
 8001020:	f000 80a0 	beq.w	8001164 <io_nand_read_8b+0x2e8>
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	0c19      	lsrs	r1, r3, #16
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <io_nand_read_8b+0x1dc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	1c5a      	adds	r2, r3, #1
 800102e:	b2d0      	uxtb	r0, r2
 8001030:	4a09      	ldr	r2, [pc, #36]	; (8001058 <io_nand_read_8b+0x1dc>)
 8001032:	7010      	strb	r0, [r2, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	b2c9      	uxtb	r1, r1
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <io_nand_read_8b+0x1d8>)
 800103a:	5499      	strb	r1, [r3, r2]
 800103c:	e092      	b.n	8001164 <io_nand_read_8b+0x2e8>
 800103e:	bf00      	nop
 8001040:	20000074 	.word	0x20000074
 8001044:	20001490 	.word	0x20001490
 8001048:	20000062 	.word	0x20000062
 800104c:	08016bac 	.word	0x08016bac
 8001050:	08013190 	.word	0x08013190
 8001054:	2000013c 	.word	0x2000013c
 8001058:	2000015c 	.word	0x2000015c
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800105c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001068:	f3bf 8f4f 	dsb	sy
}
 800106c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800106e:	7ffb      	ldrb	r3, [r7, #31]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d00a      	beq.n	800108a <io_nand_read_8b+0x20e>
 8001074:	4b7a      	ldr	r3, [pc, #488]	; (8001260 <io_nand_read_8b+0x3e4>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	b2d1      	uxtb	r1, r2
 800107c:	4a78      	ldr	r2, [pc, #480]	; (8001260 <io_nand_read_8b+0x3e4>)
 800107e:	7011      	strb	r1, [r2, #0]
 8001080:	461a      	mov	r2, r3
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2d9      	uxtb	r1, r3
 8001086:	4b77      	ldr	r3, [pc, #476]	; (8001264 <io_nand_read_8b+0x3e8>)
 8001088:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	0a1a      	lsrs	r2, r3, #8
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001098:	f3bf 8f4f 	dsb	sy
}
 800109c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 800109e:	7ffb      	ldrb	r3, [r7, #31]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <io_nand_read_8b+0x240>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	0a19      	lsrs	r1, r3, #8
 80010a8:	4b6d      	ldr	r3, [pc, #436]	; (8001260 <io_nand_read_8b+0x3e4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	1c5a      	adds	r2, r3, #1
 80010ae:	b2d0      	uxtb	r0, r2
 80010b0:	4a6b      	ldr	r2, [pc, #428]	; (8001260 <io_nand_read_8b+0x3e4>)
 80010b2:	7010      	strb	r0, [r2, #0]
 80010b4:	461a      	mov	r2, r3
 80010b6:	b2c9      	uxtb	r1, r1
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <io_nand_read_8b+0x3e8>)
 80010ba:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80010bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c2:	6a3a      	ldr	r2, [r7, #32]
 80010c4:	b2d2      	uxtb	r2, r2
 80010c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010c8:	f3bf 8f4f 	dsb	sy
}
 80010cc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80010ce:	7ffb      	ldrb	r3, [r7, #31]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00a      	beq.n	80010ea <io_nand_read_8b+0x26e>
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <io_nand_read_8b+0x3e4>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	1c5a      	adds	r2, r3, #1
 80010da:	b2d1      	uxtb	r1, r2
 80010dc:	4a60      	ldr	r2, [pc, #384]	; (8001260 <io_nand_read_8b+0x3e4>)
 80010de:	7011      	strb	r1, [r2, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	6a3b      	ldr	r3, [r7, #32]
 80010e4:	b2d9      	uxtb	r1, r3
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <io_nand_read_8b+0x3e8>)
 80010e8:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	0a1a      	lsrs	r2, r3, #8
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010f8:	f3bf 8f4f 	dsb	sy
}
 80010fc:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80010fe:	7ffb      	ldrb	r3, [r7, #31]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <io_nand_read_8b+0x2a0>
 8001104:	6a3b      	ldr	r3, [r7, #32]
 8001106:	0a19      	lsrs	r1, r3, #8
 8001108:	4b55      	ldr	r3, [pc, #340]	; (8001260 <io_nand_read_8b+0x3e4>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	1c5a      	adds	r2, r3, #1
 800110e:	b2d0      	uxtb	r0, r2
 8001110:	4a53      	ldr	r2, [pc, #332]	; (8001260 <io_nand_read_8b+0x3e4>)
 8001112:	7010      	strb	r0, [r2, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4b52      	ldr	r3, [pc, #328]	; (8001264 <io_nand_read_8b+0x3e8>)
 800111a:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <io_nand_read_8b+0x3ec>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001122:	4a51      	ldr	r2, [pc, #324]	; (8001268 <io_nand_read_8b+0x3ec>)
 8001124:	6812      	ldr	r2, [r2, #0]
 8001126:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001128:	fb02 f303 	mul.w	r3, r2, r3
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d318      	bcc.n	8001164 <io_nand_read_8b+0x2e8>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	0c1a      	lsrs	r2, r3, #16
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001146:	7ffb      	ldrb	r3, [r7, #31]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d00b      	beq.n	8001164 <io_nand_read_8b+0x2e8>
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	0c19      	lsrs	r1, r3, #16
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <io_nand_read_8b+0x3e4>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	b2d0      	uxtb	r0, r2
 8001158:	4a41      	ldr	r2, [pc, #260]	; (8001260 <io_nand_read_8b+0x3e4>)
 800115a:	7010      	strb	r0, [r2, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	b2c9      	uxtb	r1, r1
 8001160:	4b40      	ldr	r3, [pc, #256]	; (8001264 <io_nand_read_8b+0x3e8>)
 8001162:	5499      	strb	r1, [r3, r2]
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116a:	2230      	movs	r2, #48	; 0x30
 800116c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800116e:	f3bf 8f4f 	dsb	sy
}
 8001172:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_TRUE1;
 8001174:	7ffb      	ldrb	r3, [r7, #31]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d009      	beq.n	800118e <io_nand_read_8b+0x312>
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <io_nand_read_8b+0x3e4>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	1c5a      	adds	r2, r3, #1
 8001180:	b2d1      	uxtb	r1, r2
 8001182:	4a37      	ldr	r2, [pc, #220]	; (8001260 <io_nand_read_8b+0x3e4>)
 8001184:	7011      	strb	r1, [r2, #0]
 8001186:	461a      	mov	r2, r3
 8001188:	4b36      	ldr	r3, [pc, #216]	; (8001264 <io_nand_read_8b+0x3e8>)
 800118a:	2130      	movs	r1, #48	; 0x30
 800118c:	5499      	strb	r1, [r3, r2]


    uint32_t tickstart = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001192:	4b35      	ldr	r3, [pc, #212]	; (8001268 <io_nand_read_8b+0x3ec>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119a:	2b01      	cmp	r3, #1
 800119c:	d134      	bne.n	8001208 <io_nand_read_8b+0x38c>
        tickstart = HAL_GetTick();
 800119e:	f008 fe83 	bl	8009ea8 <HAL_GetTick>
 80011a2:	61b8      	str	r0, [r7, #24]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011a4:	e013      	b.n	80011ce <io_nand_read_8b+0x352>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80011a6:	f008 fe7f 	bl	8009ea8 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d90b      	bls.n	80011ce <io_nand_read_8b+0x352>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80011b6:	4b2c      	ldr	r3, [pc, #176]	; (8001268 <io_nand_read_8b+0x3ec>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2203      	movs	r2, #3
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <io_nand_read_8b+0x3ec>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e043      	b.n	8001256 <io_nand_read_8b+0x3da>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <io_nand_read_8b+0x3ec>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f009 fe7b 	bl	800aece <HAL_NAND_Read_Status>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b40      	cmp	r3, #64	; 0x40
 80011dc:	d1e3      	bne.n	80011a6 <io_nand_read_8b+0x32a>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011e8:	f3bf 8f4f 	dsb	sy
}
 80011ec:	bf00      	nop
        __DSB();
        if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <io_nand_read_8b+0x38c>
 80011f4:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <io_nand_read_8b+0x3e4>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	1c5a      	adds	r2, r3, #1
 80011fa:	b2d1      	uxtb	r1, r2
 80011fc:	4a18      	ldr	r2, [pc, #96]	; (8001260 <io_nand_read_8b+0x3e4>)
 80011fe:	7011      	strb	r1, [r2, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <io_nand_read_8b+0x3e8>)
 8001204:	2100      	movs	r1, #0
 8001206:	5499      	strb	r1, [r3, r2]
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001210:	e008      	b.n	8001224 <io_nand_read_8b+0x3a8>
 8001212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	1c59      	adds	r1, r3, #1
 8001218:	62f9      	str	r1, [r7, #44]	; 0x2c
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001220:	3301      	adds	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
 8001224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	429a      	cmp	r2, r3
 800122a:	d3f2      	bcc.n	8001212 <io_nand_read_8b+0x396>

    nandPort->State = HAL_NAND_STATE_READY;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <io_nand_read_8b+0x3ec>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <io_nand_read_8b+0x3ec>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001240:	7ffb      	ldrb	r3, [r7, #31]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d006      	beq.n	8001254 <io_nand_read_8b+0x3d8>
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <io_nand_read_8b+0x3e4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4905      	ldr	r1, [pc, #20]	; (8001264 <io_nand_read_8b+0x3e8>)
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <io_nand_read_8b+0x3f0>)
 8001250:	f7ff fd02 	bl	8000c58 <tmpPrint>

    return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3730      	adds	r7, #48	; 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000015c 	.word	0x2000015c
 8001264:	2000013c 	.word	0x2000013c
 8001268:	20000074 	.word	0x20000074
 800126c:	08016bac 	.word	0x08016bac

08001270 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b090      	sub	sp, #64	; 0x40
 8001274:	af04      	add	r7, sp, #16
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 800127e:	f107 0310 	add.w	r3, r7, #16
 8001282:	68f9      	ldr	r1, [r7, #12]
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fae3 	bl	8001850 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 800128a:	4b74      	ldr	r3, [pc, #464]	; (800145c <io_nand_write_8b+0x1ec>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d101      	bne.n	800129c <io_nand_write_8b+0x2c>
 8001298:	2302      	movs	r3, #2
 800129a:	e1d0      	b.n	800163e <io_nand_write_8b+0x3ce>

    __HAL_LOCK(nandPort);
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <io_nand_write_8b+0x1ec>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d101      	bne.n	80012ac <io_nand_write_8b+0x3c>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e1c8      	b.n	800163e <io_nand_write_8b+0x3ce>
 80012ac:	4b6b      	ldr	r3, [pc, #428]	; (800145c <io_nand_write_8b+0x1ec>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 80012b6:	4b69      	ldr	r3, [pc, #420]	; (800145c <io_nand_write_8b+0x1ec>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 80012c0:	4b67      	ldr	r3, [pc, #412]	; (8001460 <io_nand_write_8b+0x1f0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 80012c6:	8a3b      	ldrh	r3, [r7, #16]
 80012c8:	4619      	mov	r1, r3
 80012ca:	8abb      	ldrh	r3, [r7, #20]
 80012cc:	461a      	mov	r2, r3
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4b62      	ldr	r3, [pc, #392]	; (800145c <io_nand_write_8b+0x1ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d8:	fb00 f303 	mul.w	r3, r0, r3
 80012dc:	4413      	add	r3, r2
 80012de:	4a5f      	ldr	r2, [pc, #380]	; (800145c <io_nand_write_8b+0x1ec>)
 80012e0:	6812      	ldr	r2, [r2, #0]
 80012e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012e4:	fb02 f303 	mul.w	r3, r2, r3
 80012e8:	440b      	add	r3, r1
 80012ea:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 80012ec:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <io_nand_write_8b+0x1f4>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d90b      	bls.n	800130c <io_nand_write_8b+0x9c>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 80012f4:	8a3b      	ldrh	r3, [r7, #16]
 80012f6:	8a7a      	ldrh	r2, [r7, #18]
 80012f8:	8ab9      	ldrh	r1, [r7, #20]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80012fa:	9102      	str	r1, [sp, #8]
 80012fc:	9201      	str	r2, [sp, #4]
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	6a3b      	ldr	r3, [r7, #32]
 8001302:	4a59      	ldr	r2, [pc, #356]	; (8001468 <io_nand_write_8b+0x1f8>)
 8001304:	4959      	ldr	r1, [pc, #356]	; (800146c <io_nand_write_8b+0x1fc>)
 8001306:	2001      	movs	r0, #1
 8001308:	f001 fa96 	bl	8002838 <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 800130c:	2301      	movs	r3, #1
 800130e:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4856      	ldr	r0, [pc, #344]	; (8001470 <io_nand_write_8b+0x200>)
 8001316:	f010 fcef 	bl	8011cf8 <memset>
    tmpLen = 0;
 800131a:	4b56      	ldr	r3, [pc, #344]	; (8001474 <io_nand_write_8b+0x204>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800132a:	f3bf 8f4f 	dsb	sy
}
 800132e:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8001330:	7ffb      	ldrb	r3, [r7, #31]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d009      	beq.n	800134a <io_nand_write_8b+0xda>
 8001336:	4b4f      	ldr	r3, [pc, #316]	; (8001474 <io_nand_write_8b+0x204>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	b2d1      	uxtb	r1, r2
 800133e:	4a4d      	ldr	r2, [pc, #308]	; (8001474 <io_nand_write_8b+0x204>)
 8001340:	7011      	strb	r1, [r2, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <io_nand_write_8b+0x200>)
 8001346:	2100      	movs	r1, #0
 8001348:	5499      	strb	r1, [r3, r2]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	2280      	movs	r2, #128	; 0x80
 8001352:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001354:	f3bf 8f4f 	dsb	sy
}
 8001358:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE0;
 800135a:	7ffb      	ldrb	r3, [r7, #31]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d009      	beq.n	8001374 <io_nand_write_8b+0x104>
 8001360:	4b44      	ldr	r3, [pc, #272]	; (8001474 <io_nand_write_8b+0x204>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	1c5a      	adds	r2, r3, #1
 8001366:	b2d1      	uxtb	r1, r2
 8001368:	4a42      	ldr	r2, [pc, #264]	; (8001474 <io_nand_write_8b+0x204>)
 800136a:	7011      	strb	r1, [r2, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b40      	ldr	r3, [pc, #256]	; (8001470 <io_nand_write_8b+0x200>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	5499      	strb	r1, [r3, r2]

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 8001374:	4b39      	ldr	r3, [pc, #228]	; (800145c <io_nand_write_8b+0x1ec>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800137e:	d87b      	bhi.n	8001478 <io_nand_write_8b+0x208>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800138c:	f3bf 8f4f 	dsb	sy
}
 8001390:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001392:	7ffb      	ldrb	r3, [r7, #31]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00a      	beq.n	80013ae <io_nand_write_8b+0x13e>
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <io_nand_write_8b+0x204>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	1c5a      	adds	r2, r3, #1
 800139e:	b2d1      	uxtb	r1, r2
 80013a0:	4a34      	ldr	r2, [pc, #208]	; (8001474 <io_nand_write_8b+0x204>)
 80013a2:	7011      	strb	r1, [r2, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2d9      	uxtb	r1, r3
 80013aa:	4b31      	ldr	r3, [pc, #196]	; (8001470 <io_nand_write_8b+0x200>)
 80013ac:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	6a3a      	ldr	r2, [r7, #32]
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ba:	f3bf 8f4f 	dsb	sy
}
 80013be:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <io_nand_write_8b+0x16c>
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <io_nand_write_8b+0x204>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	b2d1      	uxtb	r1, r2
 80013ce:	4a29      	ldr	r2, [pc, #164]	; (8001474 <io_nand_write_8b+0x204>)
 80013d0:	7011      	strb	r1, [r2, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	b2d9      	uxtb	r1, r3
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <io_nand_write_8b+0x200>)
 80013da:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80013dc:	6a3b      	ldr	r3, [r7, #32]
 80013de:	0a1a      	lsrs	r2, r3, #8
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ea:	f3bf 8f4f 	dsb	sy
}
 80013ee:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80013f0:	7ffb      	ldrb	r3, [r7, #31]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <io_nand_write_8b+0x19e>
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	0a19      	lsrs	r1, r3, #8
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <io_nand_write_8b+0x204>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	b2d0      	uxtb	r0, r2
 8001402:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <io_nand_write_8b+0x204>)
 8001404:	7010      	strb	r0, [r2, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	b2c9      	uxtb	r1, r1
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <io_nand_write_8b+0x200>)
 800140c:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <io_nand_write_8b+0x1ec>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	4a11      	ldr	r2, [pc, #68]	; (800145c <io_nand_write_8b+0x1ec>)
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	f0c0 80ad 	bcc.w	8001580 <io_nand_write_8b+0x310>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001426:	6a3b      	ldr	r3, [r7, #32]
 8001428:	0c1a      	lsrs	r2, r3, #16
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001434:	f3bf 8f4f 	dsb	sy
}
 8001438:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 800143a:	7ffb      	ldrb	r3, [r7, #31]
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 809f 	beq.w	8001580 <io_nand_write_8b+0x310>
 8001442:	6a3b      	ldr	r3, [r7, #32]
 8001444:	0c19      	lsrs	r1, r3, #16
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <io_nand_write_8b+0x204>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	1c5a      	adds	r2, r3, #1
 800144c:	b2d0      	uxtb	r0, r2
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <io_nand_write_8b+0x204>)
 8001450:	7010      	strb	r0, [r2, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	b2c9      	uxtb	r1, r1
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <io_nand_write_8b+0x200>)
 8001458:	5499      	strb	r1, [r3, r2]
 800145a:	e091      	b.n	8001580 <io_nand_write_8b+0x310>
 800145c:	20000074 	.word	0x20000074
 8001460:	20001490 	.word	0x20001490
 8001464:	20000062 	.word	0x20000062
 8001468:	08016bbc 	.word	0x08016bbc
 800146c:	08013190 	.word	0x08013190
 8001470:	2000013c 	.word	0x2000013c
 8001474:	2000015c 	.word	0x2000015c
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001484:	f3bf 8f4f 	dsb	sy
}
 8001488:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800148a:	7ffb      	ldrb	r3, [r7, #31]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d00a      	beq.n	80014a6 <io_nand_write_8b+0x236>
 8001490:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <io_nand_write_8b+0x3d8>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	b2d1      	uxtb	r1, r2
 8001498:	4a6b      	ldr	r2, [pc, #428]	; (8001648 <io_nand_write_8b+0x3d8>)
 800149a:	7011      	strb	r1, [r2, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	b2d9      	uxtb	r1, r3
 80014a2:	4b6a      	ldr	r3, [pc, #424]	; (800164c <io_nand_write_8b+0x3dc>)
 80014a4:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	0a1a      	lsrs	r2, r3, #8
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014b4:	f3bf 8f4f 	dsb	sy
}
 80014b8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 80014ba:	7ffb      	ldrb	r3, [r7, #31]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <io_nand_write_8b+0x268>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	0a19      	lsrs	r1, r3, #8
 80014c4:	4b60      	ldr	r3, [pc, #384]	; (8001648 <io_nand_write_8b+0x3d8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	b2d0      	uxtb	r0, r2
 80014cc:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <io_nand_write_8b+0x3d8>)
 80014ce:	7010      	strb	r0, [r2, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	b2c9      	uxtb	r1, r1
 80014d4:	4b5d      	ldr	r3, [pc, #372]	; (800164c <io_nand_write_8b+0x3dc>)
 80014d6:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014e4:	f3bf 8f4f 	dsb	sy
}
 80014e8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80014ea:	7ffb      	ldrb	r3, [r7, #31]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00a      	beq.n	8001506 <io_nand_write_8b+0x296>
 80014f0:	4b55      	ldr	r3, [pc, #340]	; (8001648 <io_nand_write_8b+0x3d8>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	b2d1      	uxtb	r1, r2
 80014f8:	4a53      	ldr	r2, [pc, #332]	; (8001648 <io_nand_write_8b+0x3d8>)
 80014fa:	7011      	strb	r1, [r2, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	6a3b      	ldr	r3, [r7, #32]
 8001500:	b2d9      	uxtb	r1, r3
 8001502:	4b52      	ldr	r3, [pc, #328]	; (800164c <io_nand_write_8b+0x3dc>)
 8001504:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	0a1a      	lsrs	r2, r3, #8
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	b2d2      	uxtb	r2, r2
 8001512:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001514:	f3bf 8f4f 	dsb	sy
}
 8001518:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800151a:	7ffb      	ldrb	r3, [r7, #31]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00b      	beq.n	8001538 <io_nand_write_8b+0x2c8>
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	0a19      	lsrs	r1, r3, #8
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <io_nand_write_8b+0x3d8>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	b2d0      	uxtb	r0, r2
 800152c:	4a46      	ldr	r2, [pc, #280]	; (8001648 <io_nand_write_8b+0x3d8>)
 800152e:	7010      	strb	r0, [r2, #0]
 8001530:	461a      	mov	r2, r3
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	4b45      	ldr	r3, [pc, #276]	; (800164c <io_nand_write_8b+0x3dc>)
 8001536:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <io_nand_write_8b+0x3e0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	4a44      	ldr	r2, [pc, #272]	; (8001650 <io_nand_write_8b+0x3e0>)
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001544:	fb02 f303 	mul.w	r3, r2, r3
 8001548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154c:	d318      	bcc.n	8001580 <io_nand_write_8b+0x310>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	0c1a      	lsrs	r2, r3, #16
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800155c:	f3bf 8f4f 	dsb	sy
}
 8001560:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001562:	7ffb      	ldrb	r3, [r7, #31]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <io_nand_write_8b+0x310>
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	0c19      	lsrs	r1, r3, #16
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <io_nand_write_8b+0x3d8>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	b2d0      	uxtb	r0, r2
 8001574:	4a34      	ldr	r2, [pc, #208]	; (8001648 <io_nand_write_8b+0x3d8>)
 8001576:	7010      	strb	r0, [r2, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	b2c9      	uxtb	r1, r1
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <io_nand_write_8b+0x3dc>)
 800157e:	5499      	strb	r1, [r3, r2]
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
 8001588:	e00b      	b.n	80015a2 <io_nand_write_8b+0x332>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 800158a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
}
 800159a:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	3301      	adds	r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d3ef      	bcc.n	800158a <io_nand_write_8b+0x31a>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	2210      	movs	r2, #16
 80015b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015b4:	f3bf 8f4f 	dsb	sy
}
 80015b8:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE_TRUE1;
 80015ba:	7ffb      	ldrb	r3, [r7, #31]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d021      	beq.n	8001604 <io_nand_write_8b+0x394>
 80015c0:	4b21      	ldr	r3, [pc, #132]	; (8001648 <io_nand_write_8b+0x3d8>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	b2d1      	uxtb	r1, r2
 80015c8:	4a1f      	ldr	r2, [pc, #124]	; (8001648 <io_nand_write_8b+0x3d8>)
 80015ca:	7011      	strb	r1, [r2, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b1f      	ldr	r3, [pc, #124]	; (800164c <io_nand_write_8b+0x3dc>)
 80015d0:	2110      	movs	r1, #16
 80015d2:	5499      	strb	r1, [r3, r2]

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80015d4:	e016      	b.n	8001604 <io_nand_write_8b+0x394>
        tickstart = HAL_GetTick();
 80015d6:	f008 fc67 	bl	8009ea8 <HAL_GetTick>
 80015da:	61b8      	str	r0, [r7, #24]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80015dc:	f008 fc64 	bl	8009ea8 <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ea:	d90b      	bls.n	8001604 <io_nand_write_8b+0x394>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <io_nand_write_8b+0x3e0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2203      	movs	r2, #3
 80015f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <io_nand_write_8b+0x3e0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e01c      	b.n	800163e <io_nand_write_8b+0x3ce>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <io_nand_write_8b+0x3e0>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f009 fc60 	bl	800aece <HAL_NAND_Read_Status>
 800160e:	4603      	mov	r3, r0
 8001610:	2b40      	cmp	r3, #64	; 0x40
 8001612:	d1e0      	bne.n	80015d6 <io_nand_write_8b+0x366>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <io_nand_write_8b+0x3e0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <io_nand_write_8b+0x3e0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2200      	movs	r2, #0
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d006      	beq.n	800163c <io_nand_write_8b+0x3cc>
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <io_nand_write_8b+0x3d8>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4905      	ldr	r1, [pc, #20]	; (800164c <io_nand_write_8b+0x3dc>)
 8001636:	4807      	ldr	r0, [pc, #28]	; (8001654 <io_nand_write_8b+0x3e4>)
 8001638:	f7ff fb0e 	bl	8000c58 <tmpPrint>

    return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3730      	adds	r7, #48	; 0x30
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000015c 	.word	0x2000015c
 800164c:	2000013c 	.word	0x2000013c
 8001650:	20000074 	.word	0x20000074
 8001654:	08016bbc 	.word	0x08016bbc

08001658 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af04      	add	r7, sp, #16
 800165e:	6078      	str	r0, [r7, #4]
//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001660:	4b74      	ldr	r3, [pc, #464]	; (8001834 <io_nand_erase_block+0x1dc>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d101      	bne.n	8001672 <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 800166e:	2302      	movs	r3, #2
 8001670:	e0dc      	b.n	800182c <io_nand_erase_block+0x1d4>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <io_nand_erase_block+0x1dc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 80d2 	bne.w	8001826 <io_nand_erase_block+0x1ce>

		__HAL_LOCK(nandPort);
 8001682:	4b6c      	ldr	r3, [pc, #432]	; (8001834 <io_nand_erase_block+0x1dc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f893 3020 	ldrb.w	r3, [r3, #32]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <io_nand_erase_block+0x3a>
 800168e:	2302      	movs	r3, #2
 8001690:	e0cc      	b.n	800182c <io_nand_erase_block+0x1d4>
 8001692:	4b68      	ldr	r3, [pc, #416]	; (8001834 <io_nand_erase_block+0x1dc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 800169c:	4b65      	ldr	r3, [pc, #404]	; (8001834 <io_nand_erase_block+0x1dc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80016a6:	4b64      	ldr	r3, [pc, #400]	; (8001838 <io_nand_erase_block+0x1e0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	461a      	mov	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	885b      	ldrh	r3, [r3, #2]
 80016bc:	4618      	mov	r0, r3
 80016be:	4b5d      	ldr	r3, [pc, #372]	; (8001834 <io_nand_erase_block+0x1dc>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c4:	fb00 f303 	mul.w	r3, r0, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <io_nand_erase_block+0x1dc>)
 80016cc:	6812      	ldr	r2, [r2, #0]
 80016ce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	440b      	add	r3, r1
 80016d6:	613b      	str	r3, [r7, #16]


		if (dbg > logOn)
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <io_nand_erase_block+0x1e4>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d910      	bls.n	8001702 <io_nand_erase_block+0xaa>
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016e4:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016ea:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Plane, pAddress->Block);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	9101      	str	r1, [sp, #4]
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <io_nand_erase_block+0x1e8>)
 80016fa:	4952      	ldr	r1, [pc, #328]	; (8001844 <io_nand_erase_block+0x1ec>)
 80016fc:	2001      	movs	r0, #1
 80016fe:	f001 f89b 	bl	8002838 <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8001706:	2220      	movs	r2, #32
 8001708:	2100      	movs	r1, #0
 800170a:	484f      	ldr	r0, [pc, #316]	; (8001848 <io_nand_erase_block+0x1f0>)
 800170c:	f010 faf4 	bl	8011cf8 <memset>
    tmpLen = 0;
 8001710:	4b4e      	ldr	r3, [pc, #312]	; (800184c <io_nand_erase_block+0x1f4>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171c:	2260      	movs	r2, #96	; 0x60
 800171e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001720:	f3bf 8f4f 	dsb	sy
}
 8001724:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE0;
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d009      	beq.n	8001740 <io_nand_erase_block+0xe8>
 800172c:	4b47      	ldr	r3, [pc, #284]	; (800184c <io_nand_erase_block+0x1f4>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	b2d1      	uxtb	r1, r2
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <io_nand_erase_block+0x1f4>)
 8001736:	7011      	strb	r1, [r2, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b43      	ldr	r3, [pc, #268]	; (8001848 <io_nand_erase_block+0x1f0>)
 800173c:	2160      	movs	r1, #96	; 0x60
 800173e:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800174c:	f3bf 8f4f 	dsb	sy
}
 8001750:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00a      	beq.n	800176e <io_nand_erase_block+0x116>
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <io_nand_erase_block+0x1f4>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	b2d1      	uxtb	r1, r2
 8001760:	4a3a      	ldr	r2, [pc, #232]	; (800184c <io_nand_erase_block+0x1f4>)
 8001762:	7011      	strb	r1, [r2, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	b2d9      	uxtb	r1, r3
 800176a:	4b37      	ldr	r3, [pc, #220]	; (8001848 <io_nand_erase_block+0x1f0>)
 800176c:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	0a1a      	lsrs	r2, r3, #8
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800177c:	f3bf 8f4f 	dsb	sy
}
 8001780:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d00b      	beq.n	80017a0 <io_nand_erase_block+0x148>
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	0a19      	lsrs	r1, r3, #8
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <io_nand_erase_block+0x1f4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	1c5a      	adds	r2, r3, #1
 8001792:	b2d0      	uxtb	r0, r2
 8001794:	4a2d      	ldr	r2, [pc, #180]	; (800184c <io_nand_erase_block+0x1f4>)
 8001796:	7010      	strb	r0, [r2, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	b2c9      	uxtb	r1, r1
 800179c:	4b2a      	ldr	r3, [pc, #168]	; (8001848 <io_nand_erase_block+0x1f0>)
 800179e:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	0c1a      	lsrs	r2, r3, #16
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ae:	f3bf 8f4f 	dsb	sy
}
 80017b2:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d00b      	beq.n	80017d2 <io_nand_erase_block+0x17a>
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	0c19      	lsrs	r1, r3, #16
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <io_nand_erase_block+0x1f4>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	b2d0      	uxtb	r0, r2
 80017c6:	4a21      	ldr	r2, [pc, #132]	; (800184c <io_nand_erase_block+0x1f4>)
 80017c8:	7010      	strb	r0, [r2, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	b2c9      	uxtb	r1, r1
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <io_nand_erase_block+0x1f0>)
 80017d0:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d8:	22d0      	movs	r2, #208	; 0xd0
 80017da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017dc:	f3bf 8f4f 	dsb	sy
}
 80017e0:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE1;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d009      	beq.n	80017fc <io_nand_erase_block+0x1a4>
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <io_nand_erase_block+0x1f4>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	1c5a      	adds	r2, r3, #1
 80017ee:	b2d1      	uxtb	r1, r2
 80017f0:	4a16      	ldr	r2, [pc, #88]	; (800184c <io_nand_erase_block+0x1f4>)
 80017f2:	7011      	strb	r1, [r2, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b14      	ldr	r3, [pc, #80]	; (8001848 <io_nand_erase_block+0x1f0>)
 80017f8:	21d0      	movs	r1, #208	; 0xd0
 80017fa:	5499      	strb	r1, [r3, r2]

		nandPort->State = HAL_NAND_STATE_READY;
 80017fc:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <io_nand_erase_block+0x1dc>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <io_nand_erase_block+0x1dc>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2020 	strb.w	r2, [r3, #32]

		if (tflag) tmpPrint(__func__, tmpBuf, tmpLen);
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d009      	beq.n	800182a <io_nand_erase_block+0x1d2>
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <io_nand_erase_block+0x1f4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	490a      	ldr	r1, [pc, #40]	; (8001848 <io_nand_erase_block+0x1f0>)
 800181e:	4808      	ldr	r0, [pc, #32]	; (8001840 <io_nand_erase_block+0x1e8>)
 8001820:	f7ff fa1a 	bl	8000c58 <tmpPrint>
 8001824:	e001      	b.n	800182a <io_nand_erase_block+0x1d2>

	} else {

		return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <io_nand_erase_block+0x1d4>

	}

	return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000074 	.word	0x20000074
 8001838:	20001490 	.word	0x20001490
 800183c:	20000062 	.word	0x20000062
 8001840:	08016bd0 	.word	0x08016bd0
 8001844:	08013190 	.word	0x08013190
 8001848:	2000013c 	.word	0x2000013c
 800184c:	2000015c 	.word	0x2000015c

08001850 <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <io_uint32_to_flash_adr+0x7c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	fbb2 f3f3 	udiv	r3, r2, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001868:	897b      	ldrh	r3, [r7, #10]
 800186a:	461a      	mov	r2, r3
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <io_uint32_to_flash_adr+0x7c>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	fb02 f303 	mul.w	r3, r2, r3
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	1ad2      	subs	r2, r2, r3
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <io_uint32_to_flash_adr+0x7c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	b29a      	uxth	r2, r3
 8001888:	8979      	ldrh	r1, [r7, #10]
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <io_uint32_to_flash_adr+0x7c>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	b29b      	uxth	r3, r3
 8001890:	fb11 f303 	smulbb	r3, r1, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	b29a      	uxth	r2, r3
 800189a:	89b9      	ldrh	r1, [r7, #12]
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <io_uint32_to_flash_adr+0x7c>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	fb11 f303 	smulbb	r3, r1, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	813b      	strh	r3, [r7, #8]

	return a;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	6010      	str	r0, [r2, #0]
 80018ba:	889b      	ldrh	r3, [r3, #4]
 80018bc:	8093      	strh	r3, [r2, #4]
}
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200014b0 	.word	0x200014b0

080018d0 <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, 0) != HAL_OK) devError |= devNAND;
 80018de:	2300      	movs	r3, #0
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f7ff fac9 	bl	8000e7c <io_nand_read_8b>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <io_nand_read+0x2e>
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <io_nand_read+0x38>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <io_nand_read+0x38>)
 80018fc:	801a      	strh	r2, [r3, #0]

    return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000470 	.word	0x20000470

0800190c <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f7ff fca5 	bl	8001270 <io_nand_write_8b>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <io_nand_write+0x2e>
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <io_nand_write+0x38>)
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	f043 0320 	orr.w	r3, r3, #32
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b03      	ldr	r3, [pc, #12]	; (8001944 <io_nand_write+0x38>)
 8001938:	801a      	strh	r2, [r3, #0]

	return 0;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000470 	.word	0x20000470

08001948 <io_nand_block_erase>:
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 8001950:	f107 0308 	add.w	r3, r7, #8
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff ff7a 	bl	8001850 <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe79 	bl	8001658 <io_nand_erase_block>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d006      	beq.n	800197a <io_nand_block_erase+0x32>
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <io_nand_block_erase+0x3c>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	f043 0320 	orr.w	r3, r3, #32
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b03      	ldr	r3, [pc, #12]	; (8001984 <io_nand_block_erase+0x3c>)
 8001978:	801a      	strh	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000470 	.word	0x20000470

08001988 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800198c:	f3bf 8f4f 	dsb	sy
}
 8001990:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <__NVIC_SystemReset+0x24>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800199a:	4904      	ldr	r1, [pc, #16]	; (80019ac <__NVIC_SystemReset+0x24>)
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <__NVIC_SystemReset+0x28>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019a2:	f3bf 8f4f 	dsb	sy
}
 80019a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <__NVIC_SystemReset+0x20>
 80019ac:	e000ed00 	.word	0xe000ed00
 80019b0:	05fa0004 	.word	0x05fa0004

080019b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ba:	f008 fa3f 	bl	8009e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019be:	f000 f885 	bl	8001acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c2:	f000 fa31 	bl	8001e28 <MX_GPIO_Init>
  MX_DMA_Init();
 80019c6:	f000 f9f9 	bl	8001dbc <MX_DMA_Init>
  MX_TIM2_Init();
 80019ca:	f000 f981 	bl	8001cd0 <MX_TIM2_Init>
  MX_RTC_Init();
 80019ce:	f000 f8e7 	bl	8001ba0 <MX_RTC_Init>
  MX_FSMC_Init();
 80019d2:	f000 facf 	bl	8001f74 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 80019d6:	f000 f9c7 	bl	8001d68 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80019da:	f000 f943 	bl	8001c64 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	71fb      	strb	r3, [r7, #7]
 80019e2:	e01e      	b.n	8001a22 <main+0x6e>
	  HAL_Delay(150);
 80019e4:	2096      	movs	r0, #150	; 0x96
 80019e6:	f008 fa6b 	bl	8009ec0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	4829      	ldr	r0, [pc, #164]	; (8001a94 <main+0xe0>)
 80019f0:	f009 f90a 	bl	800ac08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019fa:	4827      	ldr	r0, [pc, #156]	; (8001a98 <main+0xe4>)
 80019fc:	f009 f904 	bl	800ac08 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001a00:	2096      	movs	r0, #150	; 0x96
 8001a02:	f008 fa5d 	bl	8009ec0 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2180      	movs	r1, #128	; 0x80
 8001a0a:	4822      	ldr	r0, [pc, #136]	; (8001a94 <main+0xe0>)
 8001a0c:	f009 f8fc 	bl	800ac08 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001a10:	2200      	movs	r2, #0
 8001a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a16:	4820      	ldr	r0, [pc, #128]	; (8001a98 <main+0xe4>)
 8001a18:	f009 f8f6 	bl	800ac08 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d9dd      	bls.n	80019e4 <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <main+0xe8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f00b f85d 	bl	800caec <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8001a32:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <main+0xec>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2201      	movs	r2, #1
 8001a38:	491a      	ldr	r1, [pc, #104]	; (8001aa4 <main+0xf0>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00b fcd5 	bl	800d3ea <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 8001a40:	f002 fba0 	bl	8004184 <ST7789_Reset>
  ST7789_Init(back_color);
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <main+0xf4>)
 8001a46:	881b      	ldrh	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fbb5 	bl	80041b8 <ST7789_Init>

#if defined(SET_FS_TEST) || defined(SET_NAND_TEST)
  dbg = logDump;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <main+0xf8>)
 8001a50:	2202      	movs	r2, #2
 8001a52:	701a      	strb	r2, [r3, #0]
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a54:	f00c fe3a 	bl	800e6cc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <main+0xfc>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f00c ff2e 	bl	800e8be <osSemaphoreNew>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <main+0x100>)
 8001a66:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8001a68:	4a13      	ldr	r2, [pc, #76]	; (8001ab8 <main+0x104>)
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	2010      	movs	r0, #16
 8001a6e:	f00c ffaf 	bl	800e9d0 <osMessageQueueNew>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4a11      	ldr	r2, [pc, #68]	; (8001abc <main+0x108>)
 8001a76:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <main+0x10c>)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4811      	ldr	r0, [pc, #68]	; (8001ac4 <main+0x110>)
 8001a7e:	f00c fe71 	bl	800e764 <osThreadNew>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <main+0x114>)
 8001a86:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a88:	f00c fe46 	bl	800e718 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f008 fa17 	bl	8009ec0 <HAL_Delay>
 8001a92:	e7fb      	b.n	8001a8c <main+0xd8>
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	2000006c 	.word	0x2000006c
 8001aa0:	20000070 	.word	0x20000070
 8001aa4:	20001480 	.word	0x20001480
 8001aa8:	20001486 	.word	0x20001486
 8001aac:	20000062 	.word	0x20000062
 8001ab0:	08016c20 	.word	0x08016c20
 8001ab4:	2000046c 	.word	0x2000046c
 8001ab8:	08016c08 	.word	0x08016c08
 8001abc:	20000468 	.word	0x20000468
 8001ac0:	08016be4 	.word	0x08016be4
 8001ac4:	08003041 	.word	0x08003041
 8001ac8:	20000464 	.word	0x20000464

08001acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b094      	sub	sp, #80	; 0x50
 8001ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ad2:	f107 0320 	add.w	r3, r7, #32
 8001ad6:	2230      	movs	r2, #48	; 0x30
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f010 f90c 	bl	8011cf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
 8001aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	4b28      	ldr	r3, [pc, #160]	; (8001b98 <SystemClock_Config+0xcc>)
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <SystemClock_Config+0xcc>)
 8001afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6413      	str	r3, [r2, #64]	; 0x40
 8001b00:	4b25      	ldr	r3, [pc, #148]	; (8001b98 <SystemClock_Config+0xcc>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <SystemClock_Config+0xd0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <SystemClock_Config+0xd0>)
 8001b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <SystemClock_Config+0xd0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b32:	2302      	movs	r3, #2
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b3c:	2308      	movs	r3, #8
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b40:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001b44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b46:	2302      	movs	r3, #2
 8001b48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b4a:	2307      	movs	r3, #7
 8001b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	4618      	mov	r0, r3
 8001b54:	f009 f9e0 	bl	800af18 <HAL_RCC_OscConfig>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001b5e:	f002 f971 	bl	8003e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b62:	230f      	movs	r3, #15
 8001b64:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b66:	2302      	movs	r3, #2
 8001b68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001b6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b7a:	f107 030c 	add.w	r3, r7, #12
 8001b7e:	2105      	movs	r1, #5
 8001b80:	4618      	mov	r0, r3
 8001b82:	f009 fc41 	bl	800b408 <HAL_RCC_ClockConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001b8c:	f002 f95a 	bl	8003e44 <Error_Handler>
  }
}
 8001b90:	bf00      	nop
 8001b92:	3750      	adds	r7, #80	; 0x50
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40007000 	.word	0x40007000

08001ba0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bba:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <MX_RTC_Init+0xbc>)
 8001bbc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001bbe:	4b26      	ldr	r3, [pc, #152]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bc6:	227f      	movs	r2, #127	; 0x7f
 8001bc8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001bca:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bcc:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001bd0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bd2:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001be4:	481c      	ldr	r0, [pc, #112]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001be6:	f009 ff43 	bl	800ba70 <HAL_RTC_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f002 f928 	bl	8003e44 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001bf4:	2315      	movs	r3, #21
 8001bf6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001bf8:	2334      	movs	r3, #52	; 0x34
 8001bfa:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001bfc:	230c      	movs	r3, #12
 8001bfe:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4812      	ldr	r0, [pc, #72]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001c10:	f009 ffa4 	bl	800bb5c <HAL_RTC_SetTime>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001c1a:	f002 f913 	bl	8003e44 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001c22:	2301      	movs	r3, #1
 8001c24:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001c2e:	463b      	mov	r3, r7
 8001c30:	2200      	movs	r2, #0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4808      	ldr	r0, [pc, #32]	; (8001c58 <MX_RTC_Init+0xb8>)
 8001c36:	f00a f889 	bl	800bd4c <HAL_RTC_SetDate>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001c40:	f002 f900 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_RTC_Init+0xc0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fcfb 	bl	8002644 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000260 	.word	0x20000260
 8001c5c:	40002800 	.word	0x40002800
 8001c60:	20000064 	.word	0x20000064

08001c64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <MX_SPI1_Init+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c6e:	4b16      	ldr	r3, [pc, #88]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c76:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c84:	2202      	movs	r2, #2
 8001c86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ca2:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001cb0:	220a      	movs	r2, #10
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_SPI1_Init+0x64>)
 8001cb6:	f00a f9d9 	bl	800c06c <HAL_SPI_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f002 f8c0 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000280 	.word	0x20000280
 8001ccc:	40013000 	.word	0x40013000

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cec:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cf6:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b19      	ldr	r3, [pc, #100]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8001d02:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d04:	22f9      	movs	r2, #249	; 0xf9
 8001d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d16:	f00a fe99 	bl	800ca4c <HAL_TIM_Base_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d20:	f002 f890 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480c      	ldr	r0, [pc, #48]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d32:	f00b f853 	bl	800cddc <HAL_TIM_ConfigClockSource>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d3c:	f002 f882 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d40:	2320      	movs	r3, #32
 8001d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_TIM2_Init+0x94>)
 8001d4e:	f00b fa6f 	bl	800d230 <HAL_TIMEx_MasterConfigSynchronization>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d58:	f002 f874 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d5c:	bf00      	nop
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20000338 	.word	0x20000338

08001d68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <MX_USART3_UART_Init+0x50>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d74:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001d78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_USART3_UART_Init+0x4c>)
 8001da0:	f00b fad6 	bl	800d350 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001daa:	f002 f84b 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000380 	.word	0x20000380
 8001db8:	40004800 	.word	0x40004800

08001dbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <MX_DMA_Init+0x68>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a16      	ldr	r2, [pc, #88]	; (8001e24 <MX_DMA_Init+0x68>)
 8001dcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b14      	ldr	r3, [pc, #80]	; (8001e24 <MX_DMA_Init+0x68>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	603b      	str	r3, [r7, #0]
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <MX_DMA_Init+0x68>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a0f      	ldr	r2, [pc, #60]	; (8001e24 <MX_DMA_Init+0x68>)
 8001de8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <MX_DMA_Init+0x68>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2105      	movs	r1, #5
 8001dfe:	200e      	movs	r0, #14
 8001e00:	f008 f93a 	bl	800a078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e04:	200e      	movs	r0, #14
 8001e06:	f008 f953 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	203b      	movs	r0, #59	; 0x3b
 8001e10:	f008 f932 	bl	800a078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001e14:	203b      	movs	r0, #59	; 0x3b
 8001e16:	f008 f94b 	bl	800a0b0 <HAL_NVIC_EnableIRQ>

}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800

08001e28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	; 0x30
 8001e2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]
 8001e3a:	60da      	str	r2, [r3, #12]
 8001e3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a47      	ldr	r2, [pc, #284]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	617b      	str	r3, [r7, #20]
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b3e      	ldr	r3, [pc, #248]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a39      	ldr	r2, [pc, #228]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e80:	f043 0310 	orr.w	r3, r3, #16
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	4a32      	ldr	r2, [pc, #200]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea2:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a24      	ldr	r2, [pc, #144]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b22      	ldr	r3, [pc, #136]	; (8001f64 <MX_GPIO_Init+0x13c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	210e      	movs	r1, #14
 8001eea:	481f      	ldr	r0, [pc, #124]	; (8001f68 <MX_GPIO_Init+0x140>)
 8001eec:	f008 fe8c 	bl	800ac08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef6:	481d      	ldr	r0, [pc, #116]	; (8001f6c <MX_GPIO_Init+0x144>)
 8001ef8:	f008 fe86 	bl	800ac08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	481b      	ldr	r0, [pc, #108]	; (8001f70 <MX_GPIO_Init+0x148>)
 8001f02:	f008 fe81 	bl	800ac08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8001f06:	230e      	movs	r3, #14
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f12:	2301      	movs	r3, #1
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4812      	ldr	r0, [pc, #72]	; (8001f68 <MX_GPIO_Init+0x140>)
 8001f1e:	f008 fcd7 	bl	800a8d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f30:	2302      	movs	r3, #2
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <MX_GPIO_Init+0x144>)
 8001f3c:	f008 fcc8 	bl	800a8d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4806      	ldr	r0, [pc, #24]	; (8001f70 <MX_GPIO_Init+0x148>)
 8001f58:	f008 fcba 	bl	800a8d0 <HAL_GPIO_Init>

}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	; 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020c00 	.word	0x40020c00
 8001f70:	40020800 	.word	0x40020800

08001f74 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <MX_FSMC_Init+0xd0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001f80:	f107 0310 	add.w	r3, r7, #16
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001f8e:	463b      	mov	r3, r7
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001f9c:	4a2b      	ldr	r2, [pc, #172]	; (800204c <MX_FSMC_Init+0xd8>)
 8001f9e:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fa2:	2210      	movs	r2, #16
 8001fa4:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001fa6:	4b28      	ldr	r3, [pc, #160]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fa8:	2202      	movs	r2, #2
 8001faa:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001fb2:	4b25      	ldr	r3, [pc, #148]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072; (in pages)
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;// (in blocks) //134217728;
 8001fec:	4b16      	ldr	r3, [pc, #88]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ff2:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_FSMC_Init+0xd4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 8001ffc:	23fc      	movs	r3, #252	; 0xfc
 8001ffe:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 8002000:	23fc      	movs	r3, #252	; 0xfc
 8002002:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 8002004:	23fc      	movs	r3, #252	; 0xfc
 8002006:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 8002008:	23fc      	movs	r3, #252	; 0xfc
 800200a:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;//18
 800200c:	23fc      	movs	r3, #252	; 0xfc
 800200e:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;//12
 8002010:	23fc      	movs	r3, #252	; 0xfc
 8002012:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;//12
 8002014:	23fc      	movs	r3, #252	; 0xfc
 8002016:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;//6
 8002018:	23fc      	movs	r3, #252	; 0xfc
 800201a:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 800201c:	463a      	mov	r2, r7
 800201e:	f107 0310 	add.w	r3, r7, #16
 8002022:	4619      	mov	r1, r3
 8002024:	4808      	ldr	r0, [pc, #32]	; (8002048 <MX_FSMC_Init+0xd4>)
 8002026:	f008 fe22 	bl	800ac6e <HAL_NAND_Init>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_FSMC_Init+0xc0>
  {
    Error_Handler( );
 8002030:	f001 ff08 	bl	8003e44 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  	  io_nand_init(&hnand1);
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_FSMC_Init+0xd4>)
 8002036:	f7fe fe45 	bl	8000cc4 <io_nand_init>
//nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
//nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/

  /* USER CODE END FSMC_Init 2 */
}
 800203a:	bf00      	nop
 800203c:	3720      	adds	r7, #32
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200014a4 	.word	0x200014a4
 8002048:	20000424 	.word	0x20000424
 800204c:	a0000060 	.word	0xa0000060

08002050 <pageIsEmpty>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
bool ret = false;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 800205c:	4b13      	ldr	r3, [pc, #76]	; (80020ac <pageIsEmpty+0x5c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	4913      	ldr	r1, [pc, #76]	; (80020b0 <pageIsEmpty+0x60>)
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fc33 	bl	80018d0 <io_nand_read>
	if (!(devError & devNAND)) {
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <pageIsEmpty+0x64>)
 800206c:	881b      	ldrh	r3, [r3, #0]
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	2b00      	cmp	r3, #0
 8002074:	d115      	bne.n	80020a2 <pageIsEmpty+0x52>
		ret = true;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	e00b      	b.n	8002098 <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	4a0b      	ldr	r2, [pc, #44]	; (80020b0 <pageIsEmpty+0x60>)
 8002084:	4413      	add	r3, r2
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2bff      	cmp	r3, #255	; 0xff
 800208a:	d002      	beq.n	8002092 <pageIsEmpty+0x42>
				ret = false;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
				break;
 8002090:	e007      	b.n	80020a2 <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	3301      	adds	r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <pageIsEmpty+0x5c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3ee      	bcc.n	8002080 <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200014b0 	.word	0x200014b0
 80020b0:	200014c8 	.word	0x200014c8
 80020b4:	20000470 	.word	0x20000470

080020b8 <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4904      	ldr	r1, [pc, #16]	; (80020dc <_write+0x24>)
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 fbb4 	bl	8002838 <Report>
	return len;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	0801330c 	.word	0x0801330c

080020e0 <str_fsErr>:
#endif
//
#ifdef SET_FS_TEST
static char *str_fsErr(int e)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	switch (e) {
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3354      	adds	r3, #84	; 0x54
 80020ec:	2b54      	cmp	r3, #84	; 0x54
 80020ee:	f200 80cb 	bhi.w	8002288 <str_fsErr+0x1a8>
 80020f2:	a201      	add	r2, pc, #4	; (adr r2, 80020f8 <str_fsErr+0x18>)
 80020f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f8:	08002255 	.word	0x08002255
 80020fc:	08002289 	.word	0x08002289
 8002100:	08002289 	.word	0x08002289
 8002104:	08002289 	.word	0x08002289
 8002108:	08002289 	.word	0x08002289
 800210c:	08002289 	.word	0x08002289
 8002110:	08002289 	.word	0x08002289
 8002114:	08002289 	.word	0x08002289
 8002118:	08002289 	.word	0x08002289
 800211c:	08002289 	.word	0x08002289
 8002120:	08002289 	.word	0x08002289
 8002124:	08002289 	.word	0x08002289
 8002128:	08002289 	.word	0x08002289
 800212c:	08002289 	.word	0x08002289
 8002130:	08002289 	.word	0x08002289
 8002134:	08002289 	.word	0x08002289
 8002138:	08002289 	.word	0x08002289
 800213c:	08002289 	.word	0x08002289
 8002140:	08002289 	.word	0x08002289
 8002144:	08002289 	.word	0x08002289
 8002148:	08002289 	.word	0x08002289
 800214c:	08002289 	.word	0x08002289
 8002150:	08002289 	.word	0x08002289
 8002154:	08002281 	.word	0x08002281
 8002158:	08002289 	.word	0x08002289
 800215c:	08002289 	.word	0x08002289
 8002160:	08002289 	.word	0x08002289
 8002164:	08002289 	.word	0x08002289
 8002168:	08002289 	.word	0x08002289
 800216c:	08002289 	.word	0x08002289
 8002170:	08002289 	.word	0x08002289
 8002174:	08002289 	.word	0x08002289
 8002178:	08002289 	.word	0x08002289
 800217c:	08002289 	.word	0x08002289
 8002180:	08002289 	.word	0x08002289
 8002184:	08002289 	.word	0x08002289
 8002188:	08002289 	.word	0x08002289
 800218c:	08002289 	.word	0x08002289
 8002190:	08002289 	.word	0x08002289
 8002194:	08002289 	.word	0x08002289
 8002198:	08002289 	.word	0x08002289
 800219c:	08002289 	.word	0x08002289
 80021a0:	08002289 	.word	0x08002289
 80021a4:	08002289 	.word	0x08002289
 80021a8:	08002289 	.word	0x08002289
 80021ac:	08002269 	.word	0x08002269
 80021b0:	08002289 	.word	0x08002289
 80021b4:	08002289 	.word	0x08002289
 80021b8:	08002285 	.word	0x08002285
 80021bc:	08002289 	.word	0x08002289
 80021c0:	08002289 	.word	0x08002289
 80021c4:	08002289 	.word	0x08002289
 80021c8:	08002289 	.word	0x08002289
 80021cc:	08002289 	.word	0x08002289
 80021d0:	08002289 	.word	0x08002289
 80021d4:	08002289 	.word	0x08002289
 80021d8:	08002279 	.word	0x08002279
 80021dc:	08002271 	.word	0x08002271
 80021e0:	08002289 	.word	0x08002289
 80021e4:	08002289 	.word	0x08002289
 80021e8:	08002289 	.word	0x08002289
 80021ec:	08002289 	.word	0x08002289
 80021f0:	08002275 	.word	0x08002275
 80021f4:	08002265 	.word	0x08002265
 80021f8:	08002261 	.word	0x08002261
 80021fc:	08002289 	.word	0x08002289
 8002200:	08002289 	.word	0x08002289
 8002204:	0800225d 	.word	0x0800225d
 8002208:	08002289 	.word	0x08002289
 800220c:	08002289 	.word	0x08002289
 8002210:	08002289 	.word	0x08002289
 8002214:	08002289 	.word	0x08002289
 8002218:	0800227d 	.word	0x0800227d
 800221c:	08002289 	.word	0x08002289
 8002220:	08002289 	.word	0x08002289
 8002224:	0800226d 	.word	0x0800226d
 8002228:	08002289 	.word	0x08002289
 800222c:	08002289 	.word	0x08002289
 8002230:	08002289 	.word	0x08002289
 8002234:	08002251 	.word	0x08002251
 8002238:	08002289 	.word	0x08002289
 800223c:	08002289 	.word	0x08002289
 8002240:	08002259 	.word	0x08002259
 8002244:	08002289 	.word	0x08002289
 8002248:	0800224d 	.word	0x0800224d
		case LFS_ERR_OK://          = 0,    // No error
			return "OK";
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <str_fsErr+0x1b8>)
 800224e:	e01c      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_IO://          = -5,   // Error during device operation
			return "ERR_IO";
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <str_fsErr+0x1bc>)
 8002252:	e01a      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_CORRUPT://     = -84,  // Corrupted
			return "ERR_CORRUPT";
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <str_fsErr+0x1c0>)
 8002256:	e018      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOENT://       = -2,   // No directory entry
			return "ERR_NOENT";
 8002258:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <str_fsErr+0x1c4>)
 800225a:	e016      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_EXIST://       = -17,  // Entry already exists
			return "ERR_EXIST";
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <str_fsErr+0x1c8>)
 800225e:	e014      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOTDIR://      = -20,  // Entry is not a dir
			return "ERR_NOTDIR";
 8002260:	4b12      	ldr	r3, [pc, #72]	; (80022ac <str_fsErr+0x1cc>)
 8002262:	e012      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_ISDIR://       = -21,  // Entry is a dir
			return "ERR_ISDIR";
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <str_fsErr+0x1d0>)
 8002266:	e010      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOTEMPTY://    = -39,  // Dir is not empty
			return "ERR_NOTEMPTY";
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <str_fsErr+0x1d4>)
 800226a:	e00e      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_BADF://        = -9,   // Bad file number
			return "ERR_BADF";
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <str_fsErr+0x1d8>)
 800226e:	e00c      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_FBIG://        = -27,  // File too large
			return "ERR_FBIG";
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <str_fsErr+0x1dc>)
 8002272:	e00a      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_INVAL://       = -22,  // Invalid parameter
			return "ERR_INVAL";
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <str_fsErr+0x1e0>)
 8002276:	e008      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOSPC://       = -28,  // No space left on device
			return "ERR_NOSPC";
 8002278:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <str_fsErr+0x1e4>)
 800227a:	e006      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOMEM://       = -12,  // No more memory available
			return "ERR_NOMEM";
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <str_fsErr+0x1e8>)
 800227e:	e004      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NOATTR://      = -61,  // No data/attr available
			return "ERR_NOATTR";
 8002280:	4b12      	ldr	r3, [pc, #72]	; (80022cc <str_fsErr+0x1ec>)
 8002282:	e002      	b.n	800228a <str_fsErr+0x1aa>
		case LFS_ERR_NAMETOOLONG:// = -36,  // File name too long
			return "ERR_NAMETOOLONG";
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <str_fsErr+0x1f0>)
 8002286:	e000      	b.n	800228a <str_fsErr+0x1aa>
	}

	return "UNKNOWN";
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <str_fsErr+0x1f4>)
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	08013314 	.word	0x08013314
 800229c:	08013318 	.word	0x08013318
 80022a0:	08013320 	.word	0x08013320
 80022a4:	0801332c 	.word	0x0801332c
 80022a8:	08013338 	.word	0x08013338
 80022ac:	08013344 	.word	0x08013344
 80022b0:	08013350 	.word	0x08013350
 80022b4:	0801335c 	.word	0x0801335c
 80022b8:	0801336c 	.word	0x0801336c
 80022bc:	08013378 	.word	0x08013378
 80022c0:	08013384 	.word	0x08013384
 80022c4:	08013390 	.word	0x08013390
 80022c8:	0801339c 	.word	0x0801339c
 80022cc:	080133a8 	.word	0x080133a8
 80022d0:	080133b4 	.word	0x080133b4
 80022d4:	080133c4 	.word	0x080133c4

080022d8 <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	dc18      	bgt.n	8002318 <get_qStat+0x40>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f113 0f06 	cmn.w	r3, #6
 80022ec:	db2a      	blt.n	8002344 <get_qStat+0x6c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3306      	adds	r3, #6
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d826      	bhi.n	8002344 <get_qStat+0x6c>
 80022f6:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <get_qStat+0x24>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	0800233d 	.word	0x0800233d
 8002300:	08002339 	.word	0x08002339
 8002304:	08002335 	.word	0x08002335
 8002308:	08002331 	.word	0x08002331
 800230c:	0800232d 	.word	0x0800232d
 8002310:	08002329 	.word	0x08002329
 8002314:	08002325 	.word	0x08002325
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800231e:	4293      	cmp	r3, r2
 8002320:	d00e      	beq.n	8002340 <get_qStat+0x68>
 8002322:	e00f      	b.n	8002344 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <get_qStat+0x7c>)
 8002326:	e00e      	b.n	8002346 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8002328:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <get_qStat+0x80>)
 800232a:	e00c      	b.n	8002346 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <get_qStat+0x84>)
 800232e:	e00a      	b.n	8002346 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <get_qStat+0x88>)
 8002332:	e008      	b.n	8002346 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <get_qStat+0x8c>)
 8002336:	e006      	b.n	8002346 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8002338:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <get_qStat+0x90>)
 800233a:	e004      	b.n	8002346 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <get_qStat+0x94>)
 800233e:	e002      	b.n	8002346 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <get_qStat+0x98>)
 8002342:	e000      	b.n	8002346 <get_qStat+0x6e>
	}

	return "UnknownError";
 8002344:	4b0b      	ldr	r3, [pc, #44]	; (8002374 <get_qStat+0x9c>)
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	080133cc 	.word	0x080133cc
 8002358:	080133d4 	.word	0x080133d4
 800235c:	080133dc 	.word	0x080133dc
 8002360:	080133ec 	.word	0x080133ec
 8002364:	080133fc 	.word	0x080133fc
 8002368:	08013410 	.word	0x08013410
 800236c:	08013420 	.word	0x08013420
 8002370:	0801342c 	.word	0x0801342c
 8002374:	08013440 	.word	0x08013440

08002378 <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d00a      	beq.n	800239e <get_logName+0x26>
 8002388:	2b02      	cmp	r3, #2
 800238a:	dc0a      	bgt.n	80023a2 <get_logName+0x2a>
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <get_logName+0x1e>
 8002390:	2b01      	cmp	r3, #1
 8002392:	d002      	beq.n	800239a <get_logName+0x22>
 8002394:	e005      	b.n	80023a2 <get_logName+0x2a>
		case logOff:
			return "logOff";
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <get_logName+0x38>)
 8002398:	e004      	b.n	80023a4 <get_logName+0x2c>
		case logOn:
			return "logOn";
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <get_logName+0x3c>)
 800239c:	e002      	b.n	80023a4 <get_logName+0x2c>
		case logDump:
			return "logDump";
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <get_logName+0x40>)
 80023a0:	e000      	b.n	80023a4 <get_logName+0x2c>
	}

	return "???";
 80023a2:	4b06      	ldr	r3, [pc, #24]	; (80023bc <get_logName+0x44>)
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	08013450 	.word	0x08013450
 80023b4:	08013458 	.word	0x08013458
 80023b8:	08013460 	.word	0x08013460
 80023bc:	08013468 	.word	0x08013468

080023c0 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08a      	sub	sp, #40	; 0x28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80023cc:	2330      	movs	r3, #48	; 0x30
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	2300      	movs	r3, #0
 80023d6:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 80023dc:	78fb      	ldrb	r3, [r7, #3]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <hex2bin+0x28>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <hex2bin+0x2c>
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	e0b2      	b.n	8002552 <hex2bin+0x192>
    if (len > 8) len = 8;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d901      	bls.n	80023f6 <hex2bin+0x36>
 80023f2:	2308      	movs	r3, #8
 80023f4:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 80023f6:	78fb      	ldrb	r3, [r7, #3]
 80023f8:	f1c3 0308 	rsb	r3, r3, #8
 80023fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8002400:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002404:	f107 0210 	add.w	r2, r7, #16
 8002408:	4413      	add	r3, r2
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4618      	mov	r0, r3
 8002410:	f00f fc64 	bl	8011cdc <memcpy>

    k = j = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800241a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800241e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8002422:	e090      	b.n	8002546 <hex2bin+0x186>
        jk = j + 2;
 8002424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002428:	3302      	adds	r3, #2
 800242a:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 800242c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002430:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002434:	e066      	b.n	8002504 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8002436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800243a:	3328      	adds	r3, #40	; 0x28
 800243c:	443b      	add	r3, r7
 800243e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002442:	2b2f      	cmp	r3, #47	; 0x2f
 8002444:	d918      	bls.n	8002478 <hex2bin+0xb8>
 8002446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800244a:	3328      	adds	r3, #40	; 0x28
 800244c:	443b      	add	r3, r7
 800244e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002452:	2b39      	cmp	r3, #57	; 0x39
 8002454:	d810      	bhi.n	8002478 <hex2bin+0xb8>
 8002456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800245a:	3328      	adds	r3, #40	; 0x28
 800245c:	443b      	add	r3, r7
 800245e:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	3a30      	subs	r2, #48	; 0x30
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	3328      	adds	r3, #40	; 0x28
 8002470:	443b      	add	r3, r7
 8002472:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8002476:	e040      	b.n	80024fa <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8002478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800247c:	3328      	adds	r3, #40	; 0x28
 800247e:	443b      	add	r3, r7
 8002480:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002484:	2b60      	cmp	r3, #96	; 0x60
 8002486:	d918      	bls.n	80024ba <hex2bin+0xfa>
 8002488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800248c:	3328      	adds	r3, #40	; 0x28
 800248e:	443b      	add	r3, r7
 8002490:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002494:	2b66      	cmp	r3, #102	; 0x66
 8002496:	d810      	bhi.n	80024ba <hex2bin+0xfa>
 8002498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800249c:	3328      	adds	r3, #40	; 0x28
 800249e:	443b      	add	r3, r7
 80024a0:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80024a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	3a57      	subs	r2, #87	; 0x57
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	3328      	adds	r3, #40	; 0x28
 80024b2:	443b      	add	r3, r7
 80024b4:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80024b8:	e01f      	b.n	80024fa <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80024ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024be:	3328      	adds	r3, #40	; 0x28
 80024c0:	443b      	add	r3, r7
 80024c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024c6:	2b40      	cmp	r3, #64	; 0x40
 80024c8:	d917      	bls.n	80024fa <hex2bin+0x13a>
 80024ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ce:	3328      	adds	r3, #40	; 0x28
 80024d0:	443b      	add	r3, r7
 80024d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80024d6:	2b46      	cmp	r3, #70	; 0x46
 80024d8:	d80f      	bhi.n	80024fa <hex2bin+0x13a>
 80024da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024de:	3328      	adds	r3, #40	; 0x28
 80024e0:	443b      	add	r3, r7
 80024e2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80024e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	3a37      	subs	r2, #55	; 0x37
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	3328      	adds	r3, #40	; 0x28
 80024f4:	443b      	add	r3, r7
 80024f6:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80024fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fe:	3301      	adds	r3, #1
 8002500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002504:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002508:	7ffb      	ldrb	r3, [r7, #31]
 800250a:	429a      	cmp	r2, r3
 800250c:	d393      	bcc.n	8002436 <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 800250e:	7b3b      	ldrb	r3, [r7, #12]
 8002510:	011a      	lsls	r2, r3, #4
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	f003 030f 	and.w	r3, r3, #15
 8002518:	4313      	orrs	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 800251c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002520:	f1c3 0303 	rsb	r3, r3, #3
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	4313      	orrs	r3, r2
 8002530:	623b      	str	r3, [r7, #32]
        k++;
 8002532:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002536:	3301      	adds	r3, #1
 8002538:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 800253c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002540:	3302      	adds	r3, #2
 8002542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8002546:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800254a:	2b03      	cmp	r3, #3
 800254c:	f67f af6a 	bls.w	8002424 <hex2bin+0x64>
    }

    return ret;
 8002550:	6a3b      	ldr	r3, [r7, #32]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3728      	adds	r7, #40	; 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
	if (on)
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <errLedOn+0x34>)
 8002574:	f008 fb48 	bl	800ac08 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8002578:	e005      	b.n	8002586 <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002580:	4803      	ldr	r0, [pc, #12]	; (8002590 <errLedOn+0x34>)
 8002582:	f008 fb41 	bl	800ac08 <HAL_GPIO_WritePin>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40020c00 	.word	0x40020c00

08002594 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
	return secCounter;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <get_secCounter+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000474 	.word	0x20000474

080025ac <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
	secCounter++;
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <inc_secCounter+0x18>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <inc_secCounter+0x18>)
 80025b8:	6013      	str	r3, [r2, #0]
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	20000474 	.word	0x20000474

080025c8 <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	return msCounter;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <get_msCounter+0x18>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80025d2:	4610      	mov	r0, r2
 80025d4:	4619      	mov	r1, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000478 	.word	0x20000478

080025e4 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	msCounter++;
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <inc_msCounter+0x20>)
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	1c50      	adds	r0, r2, #1
 80025f0:	f143 0100 	adc.w	r1, r3, #0
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <inc_msCounter+0x20>)
 80025f6:	e9c3 0100 	strd	r0, r1, [r3]
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	20000478 	.word	0x20000478

08002608 <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8002610:	f7ff ffc0 	bl	8002594 <get_secCounter>
 8002614:	4602      	mov	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 800262a:	f7ff ffb3 	bl	8002594 <get_secCounter>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4293      	cmp	r3, r2
 8002634:	bf94      	ite	ls
 8002636:	2301      	movls	r3, #1
 8002638:	2300      	movhi	r3, #0
 800263a:	b2db      	uxtb	r3, r3
}
 800263c:	4618      	mov	r0, r3
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b094      	sub	sp, #80	; 0x50
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 800264c:	6879      	ldr	r1, [r7, #4]
 800264e:	2000      	movs	r0, #0
 8002650:	460a      	mov	r2, r1
 8002652:	4603      	mov	r3, r0
 8002654:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8002658:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800265c:	f107 0320 	add.w	r3, r7, #32
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f00f fa56 	bl	8011b14 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8002668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266a:	b2db      	uxtb	r3, r3
 800266c:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3301      	adds	r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8002678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267a:	b2db      	uxtb	r3, r3
 800267c:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 800267e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002680:	b2db      	uxtb	r3, r3
 8002682:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	b2da      	uxtb	r2, r3
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <set_Date+0xb0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	b2db      	uxtb	r3, r3
 8002690:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	b2db      	uxtb	r3, r3
 8002696:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	b2db      	uxtb	r3, r3
 800269c:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 800269e:	f107 030c 	add.w	r3, r7, #12
 80026a2:	2200      	movs	r2, #0
 80026a4:	4619      	mov	r1, r3
 80026a6:	4814      	ldr	r0, [pc, #80]	; (80026f8 <set_Date+0xb4>)
 80026a8:	f009 fa58 	bl	800bb5c <HAL_RTC_SetTime>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <set_Date+0x7e>
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <set_Date+0xb8>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	f043 0308 	orr.w	r3, r3, #8
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <set_Date+0xb8>)
 80026be:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 80026c0:	e014      	b.n	80026ec <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 80026c2:	f107 0308 	add.w	r3, r7, #8
 80026c6:	2200      	movs	r2, #0
 80026c8:	4619      	mov	r1, r3
 80026ca:	480b      	ldr	r0, [pc, #44]	; (80026f8 <set_Date+0xb4>)
 80026cc:	f009 fb3e 	bl	800bd4c <HAL_RTC_SetDate>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d007      	beq.n	80026e6 <set_Date+0xa2>
 80026d6:	4b09      	ldr	r3, [pc, #36]	; (80026fc <set_Date+0xb8>)
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <set_Date+0xb8>)
 80026e2:	801a      	strh	r2, [r3, #0]
}
 80026e4:	e002      	b.n	80026ec <set_Date+0xa8>
			setDate = true;
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <set_Date+0xbc>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
}
 80026ec:	bf00      	nop
 80026ee:	3750      	adds	r7, #80	; 0x50
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20001485 	.word	0x20001485
 80026f8:	20000260 	.word	0x20000260
 80026fc:	20000470 	.word	0x20000470
 8002700:	20001484 	.word	0x20001484

08002704 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002704:	b590      	push	{r4, r7, lr}
 8002706:	b093      	sub	sp, #76	; 0x4c
 8002708:	af04      	add	r7, sp, #16
 800270a:	6078      	str	r0, [r7, #4]
int ret = 0;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002710:	4b40      	ldr	r3, [pc, #256]	; (8002814 <sec2str+0x110>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	f083 0301 	eor.w	r3, r3, #1
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d040      	beq.n	80027a0 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 800271e:	f7ff ff39 	bl	8002594 <get_secCounter>
 8002722:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <sec2str+0x114>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002732:	4a39      	ldr	r2, [pc, #228]	; (8002818 <sec2str+0x114>)
 8002734:	fba2 1203 	umull	r1, r2, r2, r3
 8002738:	0c12      	lsrs	r2, r2, #16
 800273a:	4938      	ldr	r1, [pc, #224]	; (800281c <sec2str+0x118>)
 800273c:	fb01 f202 	mul.w	r2, r1, r2
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002746:	4a36      	ldr	r2, [pc, #216]	; (8002820 <sec2str+0x11c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	0adb      	lsrs	r3, r3, #11
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <sec2str+0x11c>)
 8002754:	fba2 1203 	umull	r1, r2, r2, r3
 8002758:	0ad2      	lsrs	r2, r2, #11
 800275a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800275e:	fb01 f202 	mul.w	r2, r1, r2
 8002762:	1a9b      	subs	r3, r3, r2
 8002764:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	4a2e      	ldr	r2, [pc, #184]	; (8002824 <sec2str+0x120>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <sec2str+0x120>)
 8002776:	fba3 1302 	umull	r1, r3, r3, r2
 800277a:	0959      	lsrs	r1, r3, #5
 800277c:	460b      	mov	r3, r1
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a5b      	subs	r3, r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002794:	4924      	ldr	r1, [pc, #144]	; (8002828 <sec2str+0x124>)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f00f ff16 	bl	80125c8 <siprintf>
 800279c:	6378      	str	r0, [r7, #52]	; 0x34
 800279e:	e034      	b.n	800280a <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80027a0:	f107 030c 	add.w	r3, r7, #12
 80027a4:	2200      	movs	r2, #0
 80027a6:	4619      	mov	r1, r3
 80027a8:	4820      	ldr	r0, [pc, #128]	; (800282c <sec2str+0x128>)
 80027aa:	f009 fb53 	bl	800be54 <HAL_RTC_GetDate>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <sec2str+0xc0>
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <sec2str+0x12c>)
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <sec2str+0x12c>)
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	e022      	b.n	800280a <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	2200      	movs	r2, #0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4817      	ldr	r0, [pc, #92]	; (800282c <sec2str+0x128>)
 80027ce:	f009 fa5f 	bl	800bc90 <HAL_RTC_GetTime>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <sec2str+0xe4>
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <sec2str+0x12c>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	f043 0308 	orr.w	r3, r3, #8
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <sec2str+0x12c>)
 80027e4:	801a      	strh	r2, [r3, #0]
 80027e6:	e010      	b.n	800280a <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 80027e8:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80027ea:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80027ee:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 80027f0:	7c3b      	ldrb	r3, [r7, #16]
 80027f2:	7c7a      	ldrb	r2, [r7, #17]
 80027f4:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 80027f6:	9102      	str	r1, [sp, #8]
 80027f8:	9201      	str	r2, [sp, #4]
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	4623      	mov	r3, r4
 80027fe:	4602      	mov	r2, r0
 8002800:	490c      	ldr	r1, [pc, #48]	; (8002834 <sec2str+0x130>)
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f00f fee0 	bl	80125c8 <siprintf>
 8002808:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800280a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800280c:	4618      	mov	r0, r3
 800280e:	373c      	adds	r7, #60	; 0x3c
 8002810:	46bd      	mov	sp, r7
 8002812:	bd90      	pop	{r4, r7, pc}
 8002814:	20001484 	.word	0x20001484
 8002818:	c22e4507 	.word	0xc22e4507
 800281c:	00015180 	.word	0x00015180
 8002820:	91a2b3c5 	.word	0x91a2b3c5
 8002824:	88888889 	.word	0x88888889
 8002828:	0801346c 	.word	0x0801346c
 800282c:	20000260 	.word	0x20000260
 8002830:	20000470 	.word	0x20000470
 8002834:	08013484 	.word	0x08013484

08002838 <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 8002838:	b40e      	push	{r1, r2, r3}
 800283a:	b590      	push	{r4, r7, lr}
 800283c:	b086      	sub	sp, #24
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002848:	613b      	str	r3, [r7, #16]
int dl = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <Report+0xb4>)
 8002850:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d010      	beq.n	8002880 <Report+0x48>
		dl = sec2str(buf);
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f7ff ff50 	bl	8002704 <sec2str>
 8002864:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f7fd fcb2 	bl	80001d0 <strlen>
 800286c:	4603      	mov	r3, r0
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	4a1e      	ldr	r2, [pc, #120]	; (80028f0 <Report+0xb8>)
 8002876:	6810      	ldr	r0, [r2, #0]
 8002878:	6018      	str	r0, [r3, #0]
		dl += 3;
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3303      	adds	r3, #3
 800287e:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002880:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002884:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	18d0      	adds	r0, r2, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	1ad1      	subs	r1, r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002896:	f00f ffff 	bl	8012898 <vsniprintf>

	uartRdy = false;
 800289a:	4b16      	ldr	r3, [pc, #88]	; (80028f4 <Report+0xbc>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <Report+0xc0>)
 80028a2:	681c      	ldr	r4, [r3, #0]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7fd fc93 	bl	80001d0 <strlen>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	68f9      	ldr	r1, [r7, #12]
 80028b2:	4620      	mov	r0, r4
 80028b4:	f00a fdca 	bl	800d44c <HAL_UART_Transmit_DMA>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d006      	beq.n	80028cc <Report+0x94>
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <Report+0xc4>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f043 0301 	orr.w	r3, r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <Report+0xc4>)
 80028ca:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 80028cc:	bf00      	nop
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <Report+0xbc>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	f083 0301 	eor.w	r3, r3, #1
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f8      	bne.n	80028ce <Report+0x96>

	va_end(args);

	return 0;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80028e8:	b003      	add	sp, #12
 80028ea:	4770      	bx	lr
 80028ec:	20000480 	.word	0x20000480
 80028f0:	080134a0 	.word	0x080134a0
 80028f4:	20000060 	.word	0x20000060
 80028f8:	20000070 	.word	0x20000070
 80028fc:	20000470 	.word	0x20000470

08002900 <showBuf>:
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08e      	sub	sp, #56	; 0x38
 8002904:	af02      	add	r7, sp, #8
 8002906:	60ba      	str	r2, [r7, #8]
 8002908:	607b      	str	r3, [r7, #4]
 800290a:	4603      	mov	r3, r0
 800290c:	73fb      	strb	r3, [r7, #15]
 800290e:	460b      	mov	r3, r1
 8002910:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002912:	2320      	movs	r3, #32
 8002914:	61bb      	str	r3, [r7, #24]
uint32_t ind = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	617b      	str	r3, [r7, #20]

	if (type == 2) {
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d10b      	bne.n	800293c <showBuf+0x3c>
		if (rd) {
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d006      	beq.n	8002938 <showBuf+0x38>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <showBuf+0x150>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	4013      	ands	r3, r2
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002936:	e001      	b.n	800293c <showBuf+0x3c>
			//max_ind = chipConf.PageSize;
		} else ind = max_ind;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 800293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	d271      	bcs.n	8002a28 <showBuf+0x128>
		bool done = false;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		uint32_t ix = 0, sch = len / step;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	623b      	str	r3, [r7, #32]
		if (len % step) sch++;
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	fbb3 f1f2 	udiv	r1, r3, r2
 8002960:	fb01 f202 	mul.w	r2, r1, r2
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <showBuf+0x70>
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	3301      	adds	r3, #1
 800296e:	623b      	str	r3, [r7, #32]
		stx[0] = '\0';
 8002970:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <showBuf+0x154>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002976:	e046      	b.n	8002a06 <showBuf+0x106>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 8002978:	4836      	ldr	r0, [pc, #216]	; (8002a54 <showBuf+0x154>)
 800297a:	f7fd fc29 	bl	80001d0 <strlen>
 800297e:	4603      	mov	r3, r0
 8002980:	4a34      	ldr	r2, [pc, #208]	; (8002a54 <showBuf+0x154>)
 8002982:	4413      	add	r3, r2
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4934      	ldr	r1, [pc, #208]	; (8002a58 <showBuf+0x158>)
 8002988:	4618      	mov	r0, r3
 800298a:	f00f fe1d 	bl	80125c8 <siprintf>
			for (int i = 0; i < step; i++) {
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	e01d      	b.n	80029d0 <showBuf+0xd0>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002994:	482f      	ldr	r0, [pc, #188]	; (8002a54 <showBuf+0x154>)
 8002996:	f7fd fc1b 	bl	80001d0 <strlen>
 800299a:	4603      	mov	r3, r0
 800299c:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <showBuf+0x154>)
 800299e:	1898      	adds	r0, r3, r2
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	4413      	add	r3, r2
 80029a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	492b      	ldr	r1, [pc, #172]	; (8002a5c <showBuf+0x15c>)
 80029b0:	f00f fe0a 	bl	80125c8 <siprintf>
				ix++;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	3301      	adds	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
				if (ix == len) {
 80029ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <showBuf+0xca>
					done = true;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					break;
 80029c8:	e006      	b.n	80029d8 <showBuf+0xd8>
			for (int i = 0; i < step; i++) {
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	3301      	adds	r3, #1
 80029ce:	61fb      	str	r3, [r7, #28]
 80029d0:	69fa      	ldr	r2, [r7, #28]
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dbdd      	blt.n	8002994 <showBuf+0x94>
				}
			}
			strcat(stx, eol);
 80029d8:	4b21      	ldr	r3, [pc, #132]	; (8002a60 <showBuf+0x160>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	481d      	ldr	r0, [pc, #116]	; (8002a54 <showBuf+0x154>)
 80029e0:	f00f fe55 	bl	801268e <strcat>
			adr += step;
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
			ind += step;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029f0:	4413      	add	r3, r2
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	623b      	str	r3, [r7, #32]
			if (!sch) done = true;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <showBuf+0x106>
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		while (!done) {
 8002a06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a0a:	f083 0301 	eor.w	r3, r3, #1
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1b1      	bne.n	8002978 <showBuf+0x78>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <showBuf+0x164>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d014      	beq.n	8002a46 <showBuf+0x146>
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <showBuf+0x154>)
 8002a1e:	4912      	ldr	r1, [pc, #72]	; (8002a68 <showBuf+0x168>)
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff ff09 	bl	8002838 <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002a26:	e00e      	b.n	8002a46 <showBuf+0x146>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <showBuf+0x164>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <showBuf+0x146>
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <showBuf+0x160>)
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	9201      	str	r2, [sp, #4]
 8002a38:	9300      	str	r3, [sp, #0]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a3e:	490b      	ldr	r1, [pc, #44]	; (8002a6c <showBuf+0x16c>)
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fef9 	bl	8002838 <Report>
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200014b0 	.word	0x200014b0
 8002a54:	200024cc 	.word	0x200024cc
 8002a58:	080134a4 	.word	0x080134a4
 8002a5c:	080134ac 	.word	0x080134ac
 8002a60:	20000004 	.word	0x20000004
 8002a64:	20000062 	.word	0x20000062
 8002a68:	080134b4 	.word	0x080134b4
 8002a6c:	080134b8 	.word	0x080134b8

08002a70 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//                        CallBack Functions
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b090      	sub	sp, #64	; 0x40
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4aad      	ldr	r2, [pc, #692]	; (8002d34 <HAL_UART_RxCpltCallback+0x2c4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 826f 	bne.w	8002f62 <HAL_UART_RxCpltCallback+0x4f2>

		rxBuf[ruk++] = (char)rxByte;
 8002a84:	4bac      	ldr	r3, [pc, #688]	; (8002d38 <HAL_UART_RxCpltCallback+0x2c8>)
 8002a86:	881b      	ldrh	r3, [r3, #0]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	b291      	uxth	r1, r2
 8002a8c:	4aaa      	ldr	r2, [pc, #680]	; (8002d38 <HAL_UART_RxCpltCallback+0x2c8>)
 8002a8e:	8011      	strh	r1, [r2, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4baa      	ldr	r3, [pc, #680]	; (8002d3c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a94:	7819      	ldrb	r1, [r3, #0]
 8002a96:	4baa      	ldr	r3, [pc, #680]	; (8002d40 <HAL_UART_RxCpltCallback+0x2d0>)
 8002a98:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002a9a:	4ba8      	ldr	r3, [pc, #672]	; (8002d3c <HAL_UART_RxCpltCallback+0x2cc>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b0a      	cmp	r3, #10
 8002aa0:	f040 825a 	bne.w	8002f58 <HAL_UART_RxCpltCallback+0x4e8>
			rxBuf[--ruk] = '\0';
 8002aa4:	4ba4      	ldr	r3, [pc, #656]	; (8002d38 <HAL_UART_RxCpltCallback+0x2c8>)
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	4ba2      	ldr	r3, [pc, #648]	; (8002d38 <HAL_UART_RxCpltCallback+0x2c8>)
 8002aae:	801a      	strh	r2, [r3, #0]
 8002ab0:	4ba1      	ldr	r3, [pc, #644]	; (8002d38 <HAL_UART_RxCpltCallback+0x2c8>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4ba2      	ldr	r3, [pc, #648]	; (8002d40 <HAL_UART_RxCpltCallback+0x2d0>)
 8002ab8:	2100      	movs	r1, #0
 8002aba:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8002ac6:	4b9f      	ldr	r3, [pc, #636]	; (8002d44 <HAL_UART_RxCpltCallback+0x2d4>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002acc:	2300      	movs	r3, #0
 8002ace:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002ad0:	23ff      	movs	r3, #255	; 0xff
 8002ad2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (strlen(rxBuf) >= 4) {
 8002ad6:	489a      	ldr	r0, [pc, #616]	; (8002d40 <HAL_UART_RxCpltCallback+0x2d0>)
 8002ad8:	f7fd fb7a 	bl	80001d0 <strlen>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	f240 8210 	bls.w	8002f04 <HAL_UART_RxCpltCallback+0x494>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002aea:	e018      	b.n	8002b1e <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002aec:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002af0:	4a95      	ldr	r2, [pc, #596]	; (8002d48 <HAL_UART_RxCpltCallback+0x2d8>)
 8002af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4891      	ldr	r0, [pc, #580]	; (8002d40 <HAL_UART_RxCpltCallback+0x2d0>)
 8002afa:	f00f fdff 	bl	80126fc <strstr>
 8002afe:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_UART_RxCpltCallback+0xa0>
														  //"erase:"
														  //"check:"
														  //"log:"
														  //"info"
						  	  	  	  	  	  	  	  	  //"help"
						idx = i;
 8002b06:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002b0a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002b0e:	e00a      	b.n	8002b26 <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002b10:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002b1e:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002b22:	2b0a      	cmp	r3, #10
 8002b24:	dde2      	ble.n	8002aec <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 8002b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b28:	4a85      	ldr	r2, [pc, #532]	; (8002d40 <HAL_UART_RxCpltCallback+0x2d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	f040 81ea 	bne.w	8002f04 <HAL_UART_RxCpltCallback+0x494>
 8002b30:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b38:	f000 81e4 	beq.w	8002f04 <HAL_UART_RxCpltCallback+0x494>
					nandLen = MAX_LEN_DATA;//256;
 8002b3c:	4b83      	ldr	r3, [pc, #524]	; (8002d4c <HAL_UART_RxCpltCallback+0x2dc>)
 8002b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b42:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002b44:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002b48:	4a7f      	ldr	r2, [pc, #508]	; (8002d48 <HAL_UART_RxCpltCallback+0x2d8>)
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fb3e 	bl	80001d0 <strlen>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b58:	4413      	add	r3, r2
 8002b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b60:	2300      	movs	r3, #0
 8002b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8002b68:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002b6c:	2b0a      	cmp	r3, #10
 8002b6e:	f200 81a6 	bhi.w	8002ebe <HAL_UART_RxCpltCallback+0x44e>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <HAL_UART_RxCpltCallback+0x108>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002ba5 	.word	0x08002ba5
 8002b7c:	08002bad 	.word	0x08002bad
 8002b80:	08002c05 	.word	0x08002c05
 8002b84:	08002c81 	.word	0x08002c81
 8002b88:	08002ca1 	.word	0x08002ca1
 8002b8c:	08002e0d 	.word	0x08002e0d
 8002b90:	08002e43 	.word	0x08002e43
 8002b94:	08002e65 	.word	0x08002e65
 8002b98:	08002ba5 	.word	0x08002ba5
 8002b9c:	08002ba5 	.word	0x08002ba5
 8002ba0:	08002ba5 	.word	0x08002ba5
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 8002ba4:	4b67      	ldr	r3, [pc, #412]	; (8002d44 <HAL_UART_RxCpltCallback+0x2d4>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	701a      	strb	r2, [r3, #0]
						break;
 8002baa:	e188      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002bac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bae:	f7fd fb0f 	bl	80001d0 <strlen>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d802      	bhi.n	8002bbe <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	777b      	strb	r3, [r7, #29]
 8002bbc:	e01e      	b.n	8002bfc <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002bbe:	213a      	movs	r1, #58	; 0x3a
 8002bc0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bc2:	f00f fd73 	bl	80126ac <strchr>
 8002bc6:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00c      	beq.n	8002be8 <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f00e fe8c 	bl	80118f0 <atol>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <HAL_UART_RxCpltCallback+0x2e0>)
 8002bde:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e002      	b.n	8002bee <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 8002be8:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_UART_RxCpltCallback+0x2e0>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002bee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002bf0:	f00e fe7e 	bl	80118f0 <atol>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_UART_RxCpltCallback+0x2e4>)
 8002bfa:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002bfc:	4b51      	ldr	r3, [pc, #324]	; (8002d44 <HAL_UART_RxCpltCallback+0x2d4>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
						break;
 8002c02:	e15c      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8002c04:	213a      	movs	r1, #58	; 0x3a
 8002c06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c08:	f00f fd50 	bl	80126ac <strchr>
 8002c0c:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00b      	beq.n	8002c2c <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 8002c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c16:	3301      	adds	r3, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f00e fe69 	bl	80118f0 <atol>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	4b4a      	ldr	r3, [pc, #296]	; (8002d4c <HAL_UART_RxCpltCallback+0x2dc>)
 8002c24:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002c2c:	494a      	ldr	r1, [pc, #296]	; (8002d58 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c2e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c30:	f00f fd64 	bl	80126fc <strstr>
 8002c34:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00f      	beq.n	8002c5c <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	3302      	adds	r3, #2
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8002c42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c44:	f7fd fac4 	bl	80001d0 <strlen>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002c50:	f7ff fbb6 	bl	80023c0 <hex2bin>
 8002c54:	4603      	mov	r3, r0
 8002c56:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e006      	b.n	8002c6a <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 8002c5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002c5e:	f00e fe47 	bl	80118f0 <atol>
 8002c62:	4603      	mov	r3, r0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c68:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b3c      	ldr	r3, [pc, #240]	; (8002d60 <HAL_UART_RxCpltCallback+0x2f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4413      	add	r3, r2
 8002c74:	4a39      	ldr	r2, [pc, #228]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c76:	6013      	str	r3, [r2, #0]
							check = true;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 8002c7e:	e11e      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 8002c80:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_UART_RxCpltCallback+0x2dc>)
 8002c82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c86:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 8002c88:	4b30      	ldr	r3, [pc, #192]	; (8002d4c <HAL_UART_RxCpltCallback+0x2dc>)
 8002c8a:	881b      	ldrh	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b33      	ldr	r3, [pc, #204]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002c96:	6013      	str	r3, [r2, #0]
							check = true;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 8002c9e:	e10e      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8002ca6:	492c      	ldr	r1, [pc, #176]	; (8002d58 <HAL_UART_RxCpltCallback+0x2e8>)
 8002ca8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002caa:	f00f fd27 	bl	80126fc <strstr>
 8002cae:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <HAL_UART_RxCpltCallback+0x25c>
								if (uki == uk) {
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d108      	bne.n	8002cd0 <HAL_UART_RxCpltCallback+0x260>
									uki += 2;
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002cca:	e001      	b.n	8002cd0 <HAL_UART_RxCpltCallback+0x260>
								}
							} else uki = uk;
 8002ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002cd0:	213a      	movs	r1, #58	; 0x3a
 8002cd2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cd4:	f00f fcea 	bl	80126ac <strchr>
 8002cd8:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80eb 	beq.w	8002eb8 <HAL_UART_RxCpltCallback+0x448>
								ukb = uke + 1;
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	2210      	movs	r2, #16
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f00f f801 	bl	8011cf8 <memset>
								memcpy(tmp, uki, uke - uki);
 8002cf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002d04:	4618      	mov	r0, r3
 8002d06:	f00e ffe9 	bl	8011cdc <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d028      	beq.n	8002d64 <HAL_UART_RxCpltCallback+0x2f4>
 8002d12:	f107 030c 	add.w	r3, r7, #12
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fd fa5a 	bl	80001d0 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	b2da      	uxtb	r2, r3
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff fb4a 	bl	80023c0 <hex2bin>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a0b      	ldr	r2, [pc, #44]	; (8002d5c <HAL_UART_RxCpltCallback+0x2ec>)
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e020      	b.n	8002d76 <HAL_UART_RxCpltCallback+0x306>
 8002d34:	40004800 	.word	0x40004800
 8002d38:	20001482 	.word	0x20001482
 8002d3c:	20001480 	.word	0x20001480
 8002d40:	20000c80 	.word	0x20000c80
 8002d44:	20000472 	.word	0x20000472
 8002d48:	20000008 	.word	0x20000008
 8002d4c:	20001498 	.word	0x20001498
 8002d50:	20001485 	.word	0x20001485
 8002d54:	20000064 	.word	0x20000064
 8002d58:	080134e0 	.word	0x080134e0
 8002d5c:	20001494 	.word	0x20001494
 8002d60:	20001490 	.word	0x20001490
								    else nandAdr = atol(tmp);
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f00e fdc1 	bl	80118f0 <atol>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b7e      	ldr	r3, [pc, #504]	; (8002f6c <HAL_UART_RxCpltCallback+0x4fc>)
 8002d74:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 8002d7a:	213a      	movs	r1, #58	; 0x3a
 8002d7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002d7e:	f00f fc95 	bl	80126ac <strchr>
 8002d82:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_UART_RxCpltCallback+0x332>
									nandLen = atol(uke + 1);
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00e fdae 	bl	80118f0 <atol>
 8002d94:	4603      	mov	r3, r0
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b75      	ldr	r3, [pc, #468]	; (8002f70 <HAL_UART_RxCpltCallback+0x500>)
 8002d9a:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002da2:	4974      	ldr	r1, [pc, #464]	; (8002f74 <HAL_UART_RxCpltCallback+0x504>)
 8002da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da6:	f00f fca9 	bl	80126fc <strstr>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_UART_RxCpltCallback+0x34e>
									ukb += 2;
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	3302      	adds	r3, #2
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002dbc:	e002      	b.n	8002dc4 <HAL_UART_RxCpltCallback+0x354>
								} else hex = false;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002dc4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_UART_RxCpltCallback+0x378>
 8002dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dce:	f7fd f9ff 	bl	80001d0 <strlen>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dda:	f7ff faf1 	bl	80023c0 <hex2bin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	4b65      	ldr	r3, [pc, #404]	; (8002f78 <HAL_UART_RxCpltCallback+0x508>)
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	e006      	b.n	8002df6 <HAL_UART_RxCpltCallback+0x386>
								    else nandByte = (uint8_t)atol(ukb);
 8002de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dea:	f00e fd81 	bl	80118f0 <atol>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	4b61      	ldr	r3, [pc, #388]	; (8002f78 <HAL_UART_RxCpltCallback+0x508>)
 8002df4:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <HAL_UART_RxCpltCallback+0x4fc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b60      	ldr	r3, [pc, #384]	; (8002f7c <HAL_UART_RxCpltCallback+0x50c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	4a5a      	ldr	r2, [pc, #360]	; (8002f6c <HAL_UART_RxCpltCallback+0x4fc>)
 8002e02:	6013      	str	r3, [r2, #0]
								check = true;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 8002e0a:	e055      	b.n	8002eb8 <HAL_UART_RxCpltCallback+0x448>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002e0c:	495c      	ldr	r1, [pc, #368]	; (8002f80 <HAL_UART_RxCpltCallback+0x510>)
 8002e0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e10:	f00f fc74 	bl	80126fc <strstr>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_UART_RxCpltCallback+0x3b0>
								qcmd.attr = 1;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	777b      	strb	r3, [r7, #29]
 8002e1e:	e00c      	b.n	8002e3a <HAL_UART_RxCpltCallback+0x3ca>
							} else {
								uint32_t blk = atol(uk);
 8002e20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e22:	f00e fd65 	bl	80118f0 <atol>
 8002e26:	4603      	mov	r3, r0
 8002e28:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002e2a:	4b56      	ldr	r3, [pc, #344]	; (8002f84 <HAL_UART_RxCpltCallback+0x514>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	6a3a      	ldr	r2, [r7, #32]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d202      	bcs.n	8002e3a <HAL_UART_RxCpltCallback+0x3ca>
 8002e34:	4a54      	ldr	r2, [pc, #336]	; (8002f88 <HAL_UART_RxCpltCallback+0x518>)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002e3a:	4b54      	ldr	r3, [pc, #336]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
						break;
 8002e40:	e03d      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 8002e42:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e44:	f00e fd54 	bl	80118f0 <atol>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 8002e4c:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <HAL_UART_RxCpltCallback+0x520>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d232      	bcs.n	8002ebc <HAL_UART_RxCpltCallback+0x44c>
								nandPage = page;
 8002e56:	4a4f      	ldr	r2, [pc, #316]	; (8002f94 <HAL_UART_RxCpltCallback+0x524>)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002e62:	e02b      	b.n	8002ebc <HAL_UART_RxCpltCallback+0x44c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 8002e6a:	494b      	ldr	r1, [pc, #300]	; (8002f98 <HAL_UART_RxCpltCallback+0x528>)
 8002e6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e6e:	f00f fc45 	bl	80126fc <strstr>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_UART_RxCpltCallback+0x410>
								lg = logOff;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002e7e:	e014      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "on")) {
 8002e80:	4946      	ldr	r1, [pc, #280]	; (8002f9c <HAL_UART_RxCpltCallback+0x52c>)
 8002e82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e84:	f00f fc3a 	bl	80126fc <strstr>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_UART_RxCpltCallback+0x426>
								lg = logOn;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8002e94:	e009      	b.n	8002eaa <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "dump")) {
 8002e96:	4942      	ldr	r1, [pc, #264]	; (8002fa0 <HAL_UART_RxCpltCallback+0x530>)
 8002e98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e9a:	f00f fc2f 	bl	80126fc <strstr>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_UART_RxCpltCallback+0x43a>
								lg = logDump;
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 8002eaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002eae:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
						}
						break;
 8002eb6:	e002      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002eb8:	bf00      	nop
 8002eba:	e000      	b.n	8002ebe <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002ebc:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002ebe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8002ec2:	773b      	strb	r3, [r7, #28]
					if (check) {
 8002ec4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_UART_RxCpltCallback+0x494>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002ecc:	4b28      	ldr	r3, [pc, #160]	; (8002f70 <HAL_UART_RxCpltCallback+0x500>)
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <HAL_UART_RxCpltCallback+0x4fc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	441a      	add	r2, r3
 8002ed8:	4b32      	ldr	r3, [pc, #200]	; (8002fa4 <HAL_UART_RxCpltCallback+0x534>)
 8002eda:	6819      	ldr	r1, [r3, #0]
 8002edc:	4b27      	ldr	r3, [pc, #156]	; (8002f7c <HAL_UART_RxCpltCallback+0x50c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	440b      	add	r3, r1
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d30b      	bcc.n	8002efe <HAL_UART_RxCpltCallback+0x48e>
							nandLen = total_bytes - nandAdr - 1;
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_UART_RxCpltCallback+0x534>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <HAL_UART_RxCpltCallback+0x4fc>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_UART_RxCpltCallback+0x500>)
 8002efc:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002efe:	4b23      	ldr	r3, [pc, #140]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
					}
					*/
				}

			}
			if (idx == -1) {
 8002f04:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_RxCpltCallback+0x4a8>
				qcmd.cmd = cmdErr;
 8002f0e:	230b      	movs	r3, #11
 8002f10:	773b      	strb	r3, [r7, #28]
				cmd_flag = 1;
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
			}
			if (cmd_flag) {
 8002f18:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_UART_RxCpltCallback+0x51c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_UART_RxCpltCallback+0x4dc>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <HAL_UART_RxCpltCallback+0x538>)
 8002f22:	6818      	ldr	r0, [r3, #0]
 8002f24:	f107 011c 	add.w	r1, r7, #28
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f00b fdc4 	bl	800eab8 <osMessageQueuePut>
 8002f30:	4603      	mov	r3, r0
 8002f32:	4a1e      	ldr	r2, [pc, #120]	; (8002fac <HAL_UART_RxCpltCallback+0x53c>)
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_UART_RxCpltCallback+0x53c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_UART_RxCpltCallback+0x4dc>
 8002f3e:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_UART_RxCpltCallback+0x540>)
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	4b19      	ldr	r3, [pc, #100]	; (8002fb0 <HAL_UART_RxCpltCallback+0x540>)
 8002f4a:	801a      	strh	r2, [r3, #0]
			}

			ruk = 0;
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_UART_RxCpltCallback+0x544>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_UART_RxCpltCallback+0x548>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 8002f58:	2201      	movs	r2, #1
 8002f5a:	4918      	ldr	r1, [pc, #96]	; (8002fbc <HAL_UART_RxCpltCallback+0x54c>)
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f00a fa44 	bl	800d3ea <HAL_UART_Receive_IT>
	}
}
 8002f62:	bf00      	nop
 8002f64:	3740      	adds	r7, #64	; 0x40
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	20001494 	.word	0x20001494
 8002f70:	20001498 	.word	0x20001498
 8002f74:	080134e0 	.word	0x080134e0
 8002f78:	20000080 	.word	0x20000080
 8002f7c:	20001490 	.word	0x20001490
 8002f80:	080134e4 	.word	0x080134e4
 8002f84:	200014b0 	.word	0x200014b0
 8002f88:	2000149c 	.word	0x2000149c
 8002f8c:	20000472 	.word	0x20000472
 8002f90:	20001488 	.word	0x20001488
 8002f94:	200014a0 	.word	0x200014a0
 8002f98:	080134e8 	.word	0x080134e8
 8002f9c:	080134ec 	.word	0x080134ec
 8002fa0:	080134f0 	.word	0x080134f0
 8002fa4:	2000148c 	.word	0x2000148c
 8002fa8:	20000468 	.word	0x20000468
 8002fac:	200024c8 	.word	0x200024c8
 8002fb0:	20000470 	.word	0x20000470
 8002fb4:	20001482 	.word	0x20001482
 8002fb8:	20000c80 	.word	0x20000c80
 8002fbc:	20001480 	.word	0x20001480

08002fc0 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_UART_TxCpltCallback+0x24>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d102      	bne.n	8002fd8 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_UART_TxCpltCallback+0x28>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
	}
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40004800 	.word	0x40004800
 8002fe8:	20000060 	.word	0x20000060

08002fec <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_SPI_TxCpltCallback+0x24>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d102      	bne.n	8003004 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <HAL_SPI_TxCpltCallback+0x28>)
 8003000:	2201      	movs	r2, #1
 8003002:	701a      	strb	r2, [r3, #0]
	}
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40013000 	.word	0x40013000
 8003014:	20000061 	.word	0x20000061

08003018 <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_NAND_ITCallback+0x20>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3301      	adds	r3, #1
 8003026:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_NAND_ITCallback+0x20>)
 8003028:	6013      	str	r3, [r2, #0]
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	200014a4 	.word	0x200014a4
 800303c:	00000000 	.word	0x00000000

08003040 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8003040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003042:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8003046:	af06      	add	r7, sp, #24
 8003048:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800304c:	f2a3 436c 	subw	r3, r3, #1132	; 0x46c
 8003050:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 8003052:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003056:	f006 ff33 	bl	8009ec0 <HAL_Delay>
	if (dbg != logOff) {
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <defThread+0x18c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d018      	beq.n	8003094 <defThread+0x54>
		Report(0, "%s", eol);
 8003062:	4b5b      	ldr	r3, [pc, #364]	; (80031d0 <defThread+0x190>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	495a      	ldr	r1, [pc, #360]	; (80031d4 <defThread+0x194>)
 800306a:	2000      	movs	r0, #0
 800306c:	f7ff fbe4 	bl	8002838 <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003070:	4b59      	ldr	r3, [pc, #356]	; (80031d8 <defThread+0x198>)
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	f00e faee 	bl	8011654 <xPortGetFreeHeapSize>
 8003078:	4602      	mov	r2, r0
 800307a:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <defThread+0x190>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	9302      	str	r3, [sp, #8]
 8003080:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003084:	9301      	str	r3, [sp, #4]
 8003086:	9200      	str	r2, [sp, #0]
 8003088:	4b54      	ldr	r3, [pc, #336]	; (80031dc <defThread+0x19c>)
 800308a:	4622      	mov	r2, r4
 800308c:	4954      	ldr	r1, [pc, #336]	; (80031e0 <defThread+0x1a0>)
 800308e:	2001      	movs	r0, #1
 8003090:	f7ff fbd2 	bl	8002838 <Report>
	}

	uint8_t byte = logOff;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
	uint8_t next_block_erase = 0;
 800309a:	2300      	movs	r3, #0
 800309c:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
	bool readed = false;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
	char cid[32] = {0};
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 80030b2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]
 80030c2:	615a      	str	r2, [r3, #20]
 80030c4:	619a      	str	r2, [r3, #24]
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize ) / 1024;
 80030c6:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <defThread+0x1a4>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	4a46      	ldr	r2, [pc, #280]	; (80031e4 <defThread+0x1a4>)
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
 80030d2:	0a9b      	lsrs	r3, r3, #10
 80030d4:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 80030d8:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <defThread+0x1a4>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	0d1b      	lsrs	r3, r3, #20
 80030de:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <defThread+0x1a8>)
 80030e4:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
	if (nandState == HAL_NAND_STATE_READY) {
 80030e8:	4b40      	ldr	r3, [pc, #256]	; (80031ec <defThread+0x1ac>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 8091 	bne.w	8003214 <defThread+0x1d4>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <defThread+0x1a8>)
 80030f4:	785b      	ldrb	r3, [r3, #1]
 80030f6:	22f1      	movs	r2, #241	; 0xf1
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <defThread+0xce>
 80030fc:	4b3c      	ldr	r3, [pc, #240]	; (80031f0 <defThread+0x1b0>)
 80030fe:	6819      	ldr	r1, [r3, #0]
 8003100:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003104:	2220      	movs	r2, #32
 8003106:	4618      	mov	r0, r3
 8003108:	f00f fae5 	bl	80126d6 <strncpy>
 800310c:	e006      	b.n	800311c <defThread+0xdc>
		                               else strcpy(cid, "UNKNOWN");
 800310e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003112:	4a38      	ldr	r2, [pc, #224]	; (80031f4 <defThread+0x1b4>)
 8003114:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003118:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 800311c:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <defThread+0x1b8>)
 800311e:	4a37      	ldr	r2, [pc, #220]	; (80031fc <defThread+0x1bc>)
 8003120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003124:	6018      	str	r0, [r3, #0]
 8003126:	3304      	adds	r3, #4
 8003128:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800312a:	2300      	movs	r3, #0
 800312c:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8003130:	e016      	b.n	8003160 <defThread+0x120>
 8003132:	4831      	ldr	r0, [pc, #196]	; (80031f8 <defThread+0x1b8>)
 8003134:	f7fd f84c 	bl	80001d0 <strlen>
 8003138:	4603      	mov	r3, r0
 800313a:	4a2f      	ldr	r2, [pc, #188]	; (80031f8 <defThread+0x1b8>)
 800313c:	1898      	adds	r0, r3, r2
 800313e:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8003142:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003146:	4413      	add	r3, r2
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	492c      	ldr	r1, [pc, #176]	; (8003200 <defThread+0x1c0>)
 800314e:	f00f fa3b 	bl	80125c8 <siprintf>
 8003152:	f997 3461 	ldrsb.w	r3, [r7, #1121]	; 0x461
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3301      	adds	r3, #1
 800315a:	b2db      	uxtb	r3, r3
 800315c:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
 8003160:	f897 3461 	ldrb.w	r3, [r7, #1121]	; 0x461
 8003164:	2b04      	cmp	r3, #4
 8003166:	d9e4      	bls.n	8003132 <defThread+0xf2>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003168:	4823      	ldr	r0, [pc, #140]	; (80031f8 <defThread+0x1b8>)
 800316a:	f7fd f831 	bl	80001d0 <strlen>
 800316e:	4603      	mov	r3, r0
 8003170:	4a21      	ldr	r2, [pc, #132]	; (80031f8 <defThread+0x1b8>)
 8003172:	1898      	adds	r0, r3, r2
 8003174:	4b1c      	ldr	r3, [pc, #112]	; (80031e8 <defThread+0x1a8>)
 8003176:	785b      	ldrb	r3, [r3, #1]
 8003178:	461a      	mov	r2, r3
 800317a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800317e:	4921      	ldr	r1, [pc, #132]	; (8003204 <defThread+0x1c4>)
 8003180:	f00f fa22 	bl	80125c8 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003184:	481c      	ldr	r0, [pc, #112]	; (80031f8 <defThread+0x1b8>)
 8003186:	f7fd f823 	bl	80001d0 <strlen>
 800318a:	4603      	mov	r3, r0
 800318c:	4a1a      	ldr	r2, [pc, #104]	; (80031f8 <defThread+0x1b8>)
 800318e:	189c      	adds	r4, r3, r2
 8003190:	4b14      	ldr	r3, [pc, #80]	; (80031e4 <defThread+0x1a4>)
 8003192:	681d      	ldr	r5, [r3, #0]
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <defThread+0x1a4>)
 8003196:	685e      	ldr	r6, [r3, #4]
 8003198:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <defThread+0x1a4>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <defThread+0x1a4>)
 800319e:	6912      	ldr	r2, [r2, #16]
 80031a0:	4919      	ldr	r1, [pc, #100]	; (8003208 <defThread+0x1c8>)
 80031a2:	6809      	ldr	r1, [r1, #0]
 80031a4:	4819      	ldr	r0, [pc, #100]	; (800320c <defThread+0x1cc>)
 80031a6:	6800      	ldr	r0, [r0, #0]
 80031a8:	9005      	str	r0, [sp, #20]
 80031aa:	9104      	str	r1, [sp, #16]
 80031ac:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80031b0:	9103      	str	r1, [sp, #12]
 80031b2:	9202      	str	r2, [sp, #8]
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	4633      	mov	r3, r6
 80031be:	462a      	mov	r2, r5
 80031c0:	4913      	ldr	r1, [pc, #76]	; (8003210 <defThread+0x1d0>)
 80031c2:	4620      	mov	r0, r4
 80031c4:	f00f fa00 	bl	80125c8 <siprintf>
 80031c8:	e031      	b.n	800322e <defThread+0x1ee>
 80031ca:	bf00      	nop
 80031cc:	20000062 	.word	0x20000062
 80031d0:	20000004 	.word	0x20000004
 80031d4:	080134b4 	.word	0x080134b4
 80031d8:	20000000 	.word	0x20000000
 80031dc:	08016c30 	.word	0x08016c30
 80031e0:	080134f8 	.word	0x080134f8
 80031e4:	200014b0 	.word	0x200014b0
 80031e8:	200014a8 	.word	0x200014a8
 80031ec:	20000081 	.word	0x20000081
 80031f0:	20000084 	.word	0x20000084
 80031f4:	080133c4 	.word	0x080133c4
 80031f8:	200024cc 	.word	0x200024cc
 80031fc:	08013538 	.word	0x08013538
 8003200:	080134ac 	.word	0x080134ac
 8003204:	08013540 	.word	0x08013540
 8003208:	20001488 	.word	0x20001488
 800320c:	2000148c 	.word	0x2000148c
 8003210:	08013558 	.word	0x08013558
					chipConf.PlaneNbr,
					PlaneSizeMB,
					total_pages, total_bytes);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8003214:	4b98      	ldr	r3, [pc, #608]	; (8003478 <defThread+0x438>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 800321c:	4a97      	ldr	r2, [pc, #604]	; (800347c <defThread+0x43c>)
 800321e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003222:	4b95      	ldr	r3, [pc, #596]	; (8003478 <defThread+0x438>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4996      	ldr	r1, [pc, #600]	; (8003480 <defThread+0x440>)
 8003228:	4896      	ldr	r0, [pc, #600]	; (8003484 <defThread+0x444>)
 800322a:	f00f f9cd 	bl	80125c8 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 800322e:	4b96      	ldr	r3, [pc, #600]	; (8003488 <defThread+0x448>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <defThread+0x204>
 8003236:	4b95      	ldr	r3, [pc, #596]	; (800348c <defThread+0x44c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a92      	ldr	r2, [pc, #584]	; (8003484 <defThread+0x444>)
 800323c:	4994      	ldr	r1, [pc, #592]	; (8003490 <defThread+0x450>)
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff fafa 	bl	8002838 <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8003244:	2300      	movs	r3, #0
 8003246:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 800324a:	4b92      	ldr	r3, [pc, #584]	; (8003494 <defThread+0x454>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	785b      	ldrb	r3, [r3, #1]
 8003250:	b29b      	uxth	r3, r3
 8003252:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003256:	9200      	str	r2, [sp, #0]
 8003258:	22ef      	movs	r2, #239	; 0xef
 800325a:	2100      	movs	r1, #0
 800325c:	2000      	movs	r0, #0
 800325e:	f001 f890 	bl	8004382 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8003262:	4b8c      	ldr	r3, [pc, #560]	; (8003494 <defThread+0x454>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	785b      	ldrb	r3, [r3, #1]
 8003268:	b29b      	uxth	r3, r3
 800326a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800326e:	b299      	uxth	r1, r3
 8003270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	23ef      	movs	r3, #239	; 0xef
 8003278:	22ef      	movs	r2, #239	; 0xef
 800327a:	2000      	movs	r0, #0
 800327c:	f001 f881 	bl	8004382 <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8003280:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8003284:	f107 0310 	add.w	r3, r7, #16
 8003288:	4983      	ldr	r1, [pc, #524]	; (8003498 <defThread+0x458>)
 800328a:	4618      	mov	r0, r3
 800328c:	f00f f99c 	bl	80125c8 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8003290:	4b82      	ldr	r3, [pc, #520]	; (800349c <defThread+0x45c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	23f0      	movs	r3, #240	; 0xf0
 800329a:	fb93 f3f2 	sdiv	r3, r3, r2
 800329e:	b29a      	uxth	r2, r3
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	4611      	mov	r1, r2
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 f978 	bl	800459c <mkLineCenter>
	sprintf(screen+strlen(screen),
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fc ff8d 	bl	80001d0 <strlen>
 80032b6:	4602      	mov	r2, r0
 80032b8:	f107 0310 	add.w	r3, r7, #16
 80032bc:	1898      	adds	r0, r3, r2
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <defThread+0x460>)
 80032c0:	681c      	ldr	r4, [r3, #0]
 80032c2:	4b77      	ldr	r3, [pc, #476]	; (80034a0 <defThread+0x460>)
 80032c4:	685d      	ldr	r5, [r3, #4]
 80032c6:	4b76      	ldr	r3, [pc, #472]	; (80034a0 <defThread+0x460>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4a75      	ldr	r2, [pc, #468]	; (80034a0 <defThread+0x460>)
 80032cc:	6912      	ldr	r2, [r2, #16]
 80032ce:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80032d2:	9103      	str	r1, [sp, #12]
 80032d4:	9202      	str	r2, [sp, #8]
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	462b      	mov	r3, r5
 80032e0:	4622      	mov	r2, r4
 80032e2:	4970      	ldr	r1, [pc, #448]	; (80034a4 <defThread+0x464>)
 80032e4:	f00f f970 	bl	80125c8 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 80032e8:	4b6f      	ldr	r3, [pc, #444]	; (80034a8 <defThread+0x468>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <defThread+0x2ce>
 80032f0:	f107 0310 	add.w	r3, r7, #16
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fc ff6b 	bl	80001d0 <strlen>
 80032fa:	4602      	mov	r2, r0
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4413      	add	r3, r2
 8003302:	4a69      	ldr	r2, [pc, #420]	; (80034a8 <defThread+0x468>)
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	4969      	ldr	r1, [pc, #420]	; (80034ac <defThread+0x46c>)
 8003308:	4618      	mov	r0, r3
 800330a:	f00f f95d 	bl	80125c8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <defThread+0x45c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	4618      	mov	r0, r3
 8003316:	f7fd fa2f 	bl	8000778 <__aeabi_i2d>
 800331a:	4604      	mov	r4, r0
 800331c:	460d      	mov	r5, r1
 800331e:	4b5f      	ldr	r3, [pc, #380]	; (800349c <defThread+0x45c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fa27 	bl	8000778 <__aeabi_i2d>
 800332a:	a351      	add	r3, pc, #324	; (adr r3, 8003470 <defThread+0x430>)
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f7fc ffa6 	bl	8000280 <__aeabi_dmul>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4620      	mov	r0, r4
 800333a:	4629      	mov	r1, r5
 800333c:	f7fd f8d0 	bl	80004e0 <__adddf3>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f7fd fa80 	bl	800084c <__aeabi_d2uiz>
 800334c:	4603      	mov	r3, r0
 800334e:	b298      	uxth	r0, r3
 8003350:	4b52      	ldr	r3, [pc, #328]	; (800349c <defThread+0x45c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	; (80034b0 <defThread+0x470>)
 8003356:	8812      	ldrh	r2, [r2, #0]
 8003358:	43d2      	mvns	r2, r2
 800335a:	b292      	uxth	r2, r2
 800335c:	4954      	ldr	r1, [pc, #336]	; (80034b0 <defThread+0x470>)
 800335e:	8809      	ldrh	r1, [r1, #0]
 8003360:	f107 0410 	add.w	r4, r7, #16
 8003364:	9102      	str	r1, [sp, #8]
 8003366:	9201      	str	r2, [sp, #4]
 8003368:	685a      	ldr	r2, [r3, #4]
 800336a:	9200      	str	r2, [sp, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4622      	mov	r2, r4
 8003370:	4601      	mov	r1, r0
 8003372:	2000      	movs	r0, #0
 8003374:	f001 f8bc 	bl	80044f0 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8003378:	2001      	movs	r0, #1
 800337a:	f000 fe73 	bl	8004064 <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 800337e:	2300      	movs	r3, #0
 8003380:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d

	#ifdef SET_FS_TEST
		fs_err = io_fs_init();
 8003384:	f001 fdb2 	bl	8004eec <io_fs_init>
 8003388:	4603      	mov	r3, r0
 800338a:	4a4a      	ldr	r2, [pc, #296]	; (80034b4 <defThread+0x474>)
 800338c:	6013      	str	r3, [r2, #0]
			mnt = true;
			sprintf(stx, "Mount device '%s' OK", cid);
		}
		Report(1, "%s%s", stx, eol);*/
		//if (fs_err) {
			Report(1, "Format...%s", eol);
 800338e:	4b3f      	ldr	r3, [pc, #252]	; (800348c <defThread+0x44c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	4948      	ldr	r1, [pc, #288]	; (80034b8 <defThread+0x478>)
 8003396:	2001      	movs	r0, #1
 8003398:	f7ff fa4e 	bl	8002838 <Report>
			fs_err = io_fs_format();
 800339c:	f001 fdee 	bl	8004f7c <io_fs_format>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a44      	ldr	r2, [pc, #272]	; (80034b4 <defThread+0x474>)
 80033a4:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <defThread+0x474>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <defThread+0x390>
				Report(1, "Format Error '%s'(%d)%s", str_fsErr(fs_err), fs_err, eol);
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <defThread+0x474>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fe fe94 	bl	80020e0 <str_fsErr>
 80033b8:	4601      	mov	r1, r0
 80033ba:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <defThread+0x474>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b33      	ldr	r3, [pc, #204]	; (800348c <defThread+0x44c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	460a      	mov	r2, r1
 80033c8:	493c      	ldr	r1, [pc, #240]	; (80034bc <defThread+0x47c>)
 80033ca:	2001      	movs	r0, #1
 80033cc:	f7ff fa34 	bl	8002838 <Report>
			}
		//}
		if (!fs_err) {
 80033d0:	4b38      	ldr	r3, [pc, #224]	; (80034b4 <defThread+0x474>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d12e      	bne.n	8003436 <defThread+0x3f6>
			Report(1, "Mount device '%s' start%s", cid, eol);
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <defThread+0x44c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80033e0:	4937      	ldr	r1, [pc, #220]	; (80034c0 <defThread+0x480>)
 80033e2:	2001      	movs	r0, #1
 80033e4:	f7ff fa28 	bl	8002838 <Report>
			fs_err = io_fs_mount();
 80033e8:	f001 fdd6 	bl	8004f98 <io_fs_mount>
 80033ec:	4603      	mov	r3, r0
 80033ee:	4a31      	ldr	r2, [pc, #196]	; (80034b4 <defThread+0x474>)
 80033f0:	6013      	str	r3, [r2, #0]
			if (fs_err) {
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <defThread+0x474>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00c      	beq.n	8003414 <defThread+0x3d4>
				printf(stx, "Mount Error '%s'(%d)%s", str_fsErr(fs_err), fs_err);
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <defThread+0x474>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fe6e 	bl	80020e0 <str_fsErr>
 8003404:	4602      	mov	r2, r0
 8003406:	4b2b      	ldr	r3, [pc, #172]	; (80034b4 <defThread+0x474>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	492e      	ldr	r1, [pc, #184]	; (80034c4 <defThread+0x484>)
 800340c:	481d      	ldr	r0, [pc, #116]	; (8003484 <defThread+0x444>)
 800340e:	f00f f849 	bl	80124a4 <iprintf>
 8003412:	e009      	b.n	8003428 <defThread+0x3e8>
			} else {
				mnt = true;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
				printf(stx, "Mount device '%s' OK%s", cid);
 800341a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800341e:	461a      	mov	r2, r3
 8003420:	4929      	ldr	r1, [pc, #164]	; (80034c8 <defThread+0x488>)
 8003422:	4818      	ldr	r0, [pc, #96]	; (8003484 <defThread+0x444>)
 8003424:	f00f f83e 	bl	80124a4 <iprintf>
			}
			Report(1, "%s%s", stx, eol);
 8003428:	4b18      	ldr	r3, [pc, #96]	; (800348c <defThread+0x44c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <defThread+0x444>)
 800342e:	4918      	ldr	r1, [pc, #96]	; (8003490 <defThread+0x450>)
 8003430:	2001      	movs	r0, #1
 8003432:	f7ff fa01 	bl	8002838 <Report>
			if (ok) Report(1, "[%s] Check page:%lu OK...%s----------------------------------------%s", __func__, pg, eol, eol);
		}
	#endif
#endif

	bool loop = true;
 8003436:	2301      	movs	r3, #1
 8003438:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
	bool led = false;
 800343c:	2300      	movs	r3, #0
 800343e:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
	uint32_t tmr = get_tmr(1);
 8003442:	2001      	movs	r0, #1
 8003444:	f7ff f8e0 	bl	8002608 <get_tmr>
 8003448:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454

	s_qcmd qcmd = {0};
 800344c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003450:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003454:	2200      	movs	r2, #0
 8003456:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8003458:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800345c:	f2a3 4365 	subw	r3, r3, #1125	; 0x465
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8003464:	2300      	movs	r3, #0
 8003466:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

  /* Infinite loop */

	while (loop) {
 800346a:	f000 bc61 	b.w	8003d30 <defThread+0xcf0>
 800346e:	bf00      	nop
 8003470:	33333333 	.word	0x33333333
 8003474:	3feb3333 	.word	0x3feb3333
 8003478:	20000081 	.word	0x20000081
 800347c:	20000088 	.word	0x20000088
 8003480:	080135dc 	.word	0x080135dc
 8003484:	200024cc 	.word	0x200024cc
 8003488:	20000062 	.word	0x20000062
 800348c:	20000004 	.word	0x20000004
 8003490:	080135fc 	.word	0x080135fc
 8003494:	20000078 	.word	0x20000078
 8003498:	08013604 	.word	0x08013604
 800349c:	2000007c 	.word	0x2000007c
 80034a0:	200014b0 	.word	0x200014b0
 80034a4:	08013610 	.word	0x08013610
 80034a8:	200014a4 	.word	0x200014a4
 80034ac:	0801366c 	.word	0x0801366c
 80034b0:	20001486 	.word	0x20001486
 80034b4:	20002ccc 	.word	0x20002ccc
 80034b8:	0801367c 	.word	0x0801367c
 80034bc:	08013688 	.word	0x08013688
 80034c0:	080136a0 	.word	0x080136a0
 80034c4:	080136bc 	.word	0x080136bc
 80034c8:	080136d4 	.word	0x080136d4

		if (check_tmr(tmr)) {
 80034cc:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 80034d0:	f7ff f8a7 	bl	8002622 <check_tmr>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8091 	beq.w	80035fe <defThread+0x5be>
			tmr = get_tmr(1);
 80034dc:	2001      	movs	r0, #1
 80034de:	f7ff f893 	bl	8002608 <get_tmr>
 80034e2:	f8c7 0454 	str.w	r0, [r7, #1108]	; 0x454
			//
			sec2str(screen);
 80034e6:	f107 0310 	add.w	r3, r7, #16
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff f90a 	bl	8002704 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80034f0:	4ba9      	ldr	r3, [pc, #676]	; (8003798 <defThread+0x758>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	461a      	mov	r2, r3
 80034f8:	23f0      	movs	r3, #240	; 0xf0
 80034fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80034fe:	b29a      	uxth	r2, r3
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4611      	mov	r1, r2
 8003506:	4618      	mov	r0, r3
 8003508:	f001 f848 	bl	800459c <mkLineCenter>
 800350c:	4601      	mov	r1, r0
 800350e:	4ba2      	ldr	r3, [pc, #648]	; (8003798 <defThread+0x758>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003516:	9202      	str	r2, [sp, #8]
 8003518:	221f      	movs	r2, #31
 800351a:	9201      	str	r2, [sp, #4]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	9200      	str	r2, [sp, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	460a      	mov	r2, r1
 8003524:	2100      	movs	r1, #0
 8003526:	2008      	movs	r0, #8
 8003528:	f000 ffe2 	bl	80044f0 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 800352c:	4b9b      	ldr	r3, [pc, #620]	; (800379c <defThread+0x75c>)
 800352e:	881b      	ldrh	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	f107 0310 	add.w	r3, r7, #16
 8003536:	499a      	ldr	r1, [pc, #616]	; (80037a0 <defThread+0x760>)
 8003538:	4618      	mov	r0, r3
 800353a:	f00f f845 	bl	80125c8 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 800353e:	4b97      	ldr	r3, [pc, #604]	; (800379c <defThread+0x75c>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d004      	beq.n	8003550 <defThread+0x510>
 8003546:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800354a:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
 800354e:	e002      	b.n	8003556 <defThread+0x516>
 8003550:	2300      	movs	r3, #0
 8003552:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003556:	4b90      	ldr	r3, [pc, #576]	; (8003798 <defThread+0x758>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	785b      	ldrb	r3, [r3, #1]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003562:	b29c      	uxth	r4, r3
 8003564:	4b8c      	ldr	r3, [pc, #560]	; (8003798 <defThread+0x758>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	23f0      	movs	r3, #240	; 0xf0
 800356e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003572:	b29a      	uxth	r2, r3
 8003574:	f107 0310 	add.w	r3, r7, #16
 8003578:	4611      	mov	r1, r2
 800357a:	4618      	mov	r0, r3
 800357c:	f001 f80e 	bl	800459c <mkLineCenter>
 8003580:	4601      	mov	r1, r0
 8003582:	4b85      	ldr	r3, [pc, #532]	; (8003798 <defThread+0x758>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358a:	9202      	str	r2, [sp, #8]
 800358c:	f8b7 245e 	ldrh.w	r2, [r7, #1118]	; 0x45e
 8003590:	9201      	str	r2, [sp, #4]
 8003592:	685a      	ldr	r2, [r3, #4]
 8003594:	9200      	str	r2, [sp, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	460a      	mov	r2, r1
 800359a:	4621      	mov	r1, r4
 800359c:	2000      	movs	r0, #0
 800359e:	f000 ffa7 	bl	80044f0 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80035a2:	4b80      	ldr	r3, [pc, #512]	; (80037a4 <defThread+0x764>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <defThread+0x59e>
				if (qs != qStat) {
 80035aa:	4b7e      	ldr	r3, [pc, #504]	; (80037a4 <defThread+0x764>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d013      	beq.n	80035de <defThread+0x59e>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80035b6:	4b7c      	ldr	r3, [pc, #496]	; (80037a8 <defThread+0x768>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00b      	beq.n	80035d6 <defThread+0x596>
 80035be:	4b79      	ldr	r3, [pc, #484]	; (80037a4 <defThread+0x764>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fe fe88 	bl	80022d8 <get_qStat>
 80035c8:	4602      	mov	r2, r0
 80035ca:	4b78      	ldr	r3, [pc, #480]	; (80037ac <defThread+0x76c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4978      	ldr	r1, [pc, #480]	; (80037b0 <defThread+0x770>)
 80035d0:	2001      	movs	r0, #1
 80035d2:	f7ff f931 	bl	8002838 <Report>
					qs = qStat;
 80035d6:	4b73      	ldr	r3, [pc, #460]	; (80037a4 <defThread+0x764>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
				}
			}

			if (devError) led = true; else led = false;
 80035de:	4b6f      	ldr	r3, [pc, #444]	; (800379c <defThread+0x75c>)
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d003      	beq.n	80035ee <defThread+0x5ae>
 80035e6:	2301      	movs	r3, #1
 80035e8:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
 80035ec:	e002      	b.n	80035f4 <defThread+0x5b4>
 80035ee:	2300      	movs	r3, #0
 80035f0:	f887 345b 	strb.w	r3, [r7, #1115]	; 0x45b
			errLedOn(led);
 80035f4:	f897 345b 	ldrb.w	r3, [r7, #1115]	; 0x45b
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fe ffaf 	bl	800255c <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <defThread+0x774>)
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f107 020b 	add.w	r2, r7, #11
 8003606:	f107 010c 	add.w	r1, r7, #12
 800360a:	2305      	movs	r3, #5
 800360c:	f00b fab4 	bl	800eb78 <osMessageQueueGet>
 8003610:	4603      	mov	r3, r0
 8003612:	4a64      	ldr	r2, [pc, #400]	; (80037a4 <defThread+0x764>)
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <defThread+0x764>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d028      	beq.n	8003670 <defThread+0x630>
			if (qs != qStat) qs = qStat;
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <defThread+0x764>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8003626:	429a      	cmp	r2, r3
 8003628:	d003      	beq.n	8003632 <defThread+0x5f2>
 800362a:	4b5e      	ldr	r3, [pc, #376]	; (80037a4 <defThread+0x764>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
			if (qStat != osErrorTimeout) {
 8003632:	4b5c      	ldr	r3, [pc, #368]	; (80037a4 <defThread+0x764>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f113 0f02 	cmn.w	r3, #2
 800363a:	f000 8319 	beq.w	8003c70 <defThread+0xc30>
				devError |= devQUE;
 800363e:	4b57      	ldr	r3, [pc, #348]	; (800379c <defThread+0x75c>)
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003646:	b29a      	uxth	r2, r3
 8003648:	4b54      	ldr	r3, [pc, #336]	; (800379c <defThread+0x75c>)
 800364a:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <defThread+0x768>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 830d 	beq.w	8003c70 <defThread+0xc30>
 8003656:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <defThread+0x764>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fe3c 	bl	80022d8 <get_qStat>
 8003660:	4602      	mov	r2, r0
 8003662:	4b52      	ldr	r3, [pc, #328]	; (80037ac <defThread+0x76c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4952      	ldr	r1, [pc, #328]	; (80037b0 <defThread+0x770>)
 8003668:	2001      	movs	r0, #1
 800366a:	f7ff f8e5 	bl	8002838 <Report>
 800366e:	e2ff      	b.n	8003c70 <defThread+0xc30>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 8003670:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003674:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	4b4e      	ldr	r3, [pc, #312]	; (80037b8 <defThread+0x778>)
 800367e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	494d      	ldr	r1, [pc, #308]	; (80037bc <defThread+0x77c>)
 8003688:	4618      	mov	r0, r3
 800368a:	f00e ff9d 	bl	80125c8 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 800368e:	4b42      	ldr	r3, [pc, #264]	; (8003798 <defThread+0x758>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	785b      	ldrb	r3, [r3, #1]
 8003694:	b29b      	uxth	r3, r3
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	b29b      	uxth	r3, r3
 800369a:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800369e:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <defThread+0x758>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	23f0      	movs	r3, #240	; 0xf0
 80036aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	f107 0310 	add.w	r3, r7, #16
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 ff70 	bl	800459c <mkLineCenter>
 80036bc:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80036be:	4b36      	ldr	r3, [pc, #216]	; (8003798 <defThread+0x758>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	9202      	str	r2, [sp, #8]
 80036c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80036ca:	9201      	str	r2, [sp, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	9200      	str	r2, [sp, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	460a      	mov	r2, r1
 80036d4:	4621      	mov	r1, r4
 80036d6:	2000      	movs	r0, #0
 80036d8:	f000 ff0a 	bl	80044f0 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 80036dc:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <defThread+0x768>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d91e      	bls.n	8003722 <defThread+0x6e2>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80036e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80036e8:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80036f4:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80036f8:	785b      	ldrb	r3, [r3, #1]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003700:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <defThread+0x778>)
 800370a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370e:	4a27      	ldr	r2, [pc, #156]	; (80037ac <defThread+0x76c>)
 8003710:	6812      	ldr	r2, [r2, #0]
 8003712:	9201      	str	r2, [sp, #4]
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	4603      	mov	r3, r0
 8003718:	460a      	mov	r2, r1
 800371a:	4929      	ldr	r1, [pc, #164]	; (80037c0 <defThread+0x780>)
 800371c:	2001      	movs	r0, #1
 800371e:	f7ff f88b 	bl	8002838 <Report>
			//
			nand_show = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
			switch (qcmd.cmd) {
 8003728:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800372c:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b0b      	cmp	r3, #11
 8003734:	f200 828a 	bhi.w	8003c4c <defThread+0xc0c>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <defThread+0x700>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003829 	.word	0x08003829
 8003744:	080038f7 	.word	0x080038f7
 8003748:	080039a1 	.word	0x080039a1
 800374c:	080039db 	.word	0x080039db
 8003750:	08003b69 	.word	0x08003b69
 8003754:	08003a05 	.word	0x08003a05
 8003758:	08003b03 	.word	0x08003b03
 800375c:	08003931 	.word	0x08003931
 8003760:	08003831 	.word	0x08003831
 8003764:	0800380f 	.word	0x0800380f
 8003768:	08003781 	.word	0x08003781
 800376c:	08003771 	.word	0x08003771
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <defThread+0x76c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4913      	ldr	r1, [pc, #76]	; (80037c4 <defThread+0x784>)
 8003778:	2001      	movs	r0, #1
 800377a:	f7ff f85d 	bl	8002838 <Report>
				break;
 800377e:	e265      	b.n	8003c4c <defThread+0xc0c>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <defThread+0x76c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	4910      	ldr	r1, [pc, #64]	; (80037c8 <defThread+0x788>)
 8003788:	4810      	ldr	r0, [pc, #64]	; (80037cc <defThread+0x78c>)
 800378a:	f00e ff1d 	bl	80125c8 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 800378e:	2300      	movs	r3, #0
 8003790:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 8003794:	e031      	b.n	80037fa <defThread+0x7ba>
 8003796:	bf00      	nop
 8003798:	20000078 	.word	0x20000078
 800379c:	20000470 	.word	0x20000470
 80037a0:	080136ec 	.word	0x080136ec
 80037a4:	200024c8 	.word	0x200024c8
 80037a8:	20000062 	.word	0x20000062
 80037ac:	20000004 	.word	0x20000004
 80037b0:	080136fc 	.word	0x080136fc
 80037b4:	20000468 	.word	0x20000468
 80037b8:	20000034 	.word	0x20000034
 80037bc:	08013708 	.word	0x08013708
 80037c0:	08013710 	.word	0x08013710
 80037c4:	08013728 	.word	0x08013728
 80037c8:	08013740 	.word	0x08013740
 80037cc:	200024cc 	.word	0x200024cc
 80037d0:	48a5      	ldr	r0, [pc, #660]	; (8003a68 <defThread+0xa28>)
 80037d2:	f7fc fcfd 	bl	80001d0 <strlen>
 80037d6:	4603      	mov	r3, r0
 80037d8:	4aa3      	ldr	r2, [pc, #652]	; (8003a68 <defThread+0xa28>)
 80037da:	1898      	adds	r0, r3, r2
 80037dc:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80037e0:	4aa2      	ldr	r2, [pc, #648]	; (8003a6c <defThread+0xa2c>)
 80037e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80037e6:	4ba2      	ldr	r3, [pc, #648]	; (8003a70 <defThread+0xa30>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	49a2      	ldr	r1, [pc, #648]	; (8003a74 <defThread+0xa34>)
 80037ec:	f00e feec 	bl	80125c8 <siprintf>
 80037f0:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80037f4:	3301      	adds	r3, #1
 80037f6:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
 80037fa:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 80037fe:	2b0a      	cmp	r3, #10
 8003800:	d9e6      	bls.n	80037d0 <defThread+0x790>
					Report(1, "%s", stx);
 8003802:	4a99      	ldr	r2, [pc, #612]	; (8003a68 <defThread+0xa28>)
 8003804:	499c      	ldr	r1, [pc, #624]	; (8003a78 <defThread+0xa38>)
 8003806:	2001      	movs	r0, #1
 8003808:	f7ff f816 	bl	8002838 <Report>
				break;
 800380c:	e21e      	b.n	8003c4c <defThread+0xc0c>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800380e:	f00d ff21 	bl	8011654 <xPortGetFreeHeapSize>
 8003812:	4602      	mov	r2, r0
 8003814:	4b96      	ldr	r3, [pc, #600]	; (8003a70 <defThread+0xa30>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800381e:	4997      	ldr	r1, [pc, #604]	; (8003a7c <defThread+0xa3c>)
 8003820:	2001      	movs	r0, #1
 8003822:	f7ff f809 	bl	8002838 <Report>
				break;
 8003826:	e211      	b.n	8003c4c <defThread+0xc0c>
				case cmdRestart:
					loop = false;
 8003828:	2300      	movs	r3, #0
 800382a:	f887 345c 	strb.w	r3, [r7, #1116]	; 0x45c
		  		break;
 800382e:	e20d      	b.n	8003c4c <defThread+0xc0c>
				case cmdInfo:
					if (dbg != logOff) {
 8003830:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <defThread+0xa40>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 81fe 	beq.w	8003c36 <defThread+0xbf6>
						strcpy(stx, "NAND:");
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <defThread+0xa28>)
 800383c:	4a91      	ldr	r2, [pc, #580]	; (8003a84 <defThread+0xa44>)
 800383e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003842:	6018      	str	r0, [r3, #0]
 8003844:	3304      	adds	r3, #4
 8003846:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8003848:	2300      	movs	r3, #0
 800384a:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
 800384e:	e016      	b.n	800387e <defThread+0x83e>
 8003850:	4885      	ldr	r0, [pc, #532]	; (8003a68 <defThread+0xa28>)
 8003852:	f7fc fcbd 	bl	80001d0 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	4a83      	ldr	r2, [pc, #524]	; (8003a68 <defThread+0xa28>)
 800385a:	1898      	adds	r0, r3, r2
 800385c:	f997 344e 	ldrsb.w	r3, [r7, #1102]	; 0x44e
 8003860:	f8d7 2440 	ldr.w	r2, [r7, #1088]	; 0x440
 8003864:	4413      	add	r3, r2
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	4987      	ldr	r1, [pc, #540]	; (8003a88 <defThread+0xa48>)
 800386c:	f00e feac 	bl	80125c8 <siprintf>
 8003870:	f997 344e 	ldrsb.w	r3, [r7, #1102]	; 0x44e
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3301      	adds	r3, #1
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f887 344e 	strb.w	r3, [r7, #1102]	; 0x44e
 800387e:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003882:	2b04      	cmp	r3, #4
 8003884:	d9e4      	bls.n	8003850 <defThread+0x810>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003886:	4878      	ldr	r0, [pc, #480]	; (8003a68 <defThread+0xa28>)
 8003888:	f7fc fca2 	bl	80001d0 <strlen>
 800388c:	4603      	mov	r3, r0
 800388e:	4a76      	ldr	r2, [pc, #472]	; (8003a68 <defThread+0xa28>)
 8003890:	1898      	adds	r0, r3, r2
 8003892:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <defThread+0xa4c>)
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	461a      	mov	r2, r3
 8003898:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800389c:	497c      	ldr	r1, [pc, #496]	; (8003a90 <defThread+0xa50>)
 800389e:	f00e fe93 	bl	80125c8 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 80038a2:	4871      	ldr	r0, [pc, #452]	; (8003a68 <defThread+0xa28>)
 80038a4:	f7fc fc94 	bl	80001d0 <strlen>
 80038a8:	4603      	mov	r3, r0
 80038aa:	4a6f      	ldr	r2, [pc, #444]	; (8003a68 <defThread+0xa28>)
 80038ac:	189c      	adds	r4, r3, r2
 80038ae:	4b79      	ldr	r3, [pc, #484]	; (8003a94 <defThread+0xa54>)
 80038b0:	681d      	ldr	r5, [r3, #0]
 80038b2:	4b78      	ldr	r3, [pc, #480]	; (8003a94 <defThread+0xa54>)
 80038b4:	685e      	ldr	r6, [r3, #4]
 80038b6:	4b77      	ldr	r3, [pc, #476]	; (8003a94 <defThread+0xa54>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	4a76      	ldr	r2, [pc, #472]	; (8003a94 <defThread+0xa54>)
 80038bc:	6912      	ldr	r2, [r2, #16]
 80038be:	4976      	ldr	r1, [pc, #472]	; (8003a98 <defThread+0xa58>)
 80038c0:	6809      	ldr	r1, [r1, #0]
 80038c2:	4876      	ldr	r0, [pc, #472]	; (8003a9c <defThread+0xa5c>)
 80038c4:	6800      	ldr	r0, [r0, #0]
 80038c6:	9005      	str	r0, [sp, #20]
 80038c8:	9104      	str	r1, [sp, #16]
 80038ca:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 80038ce:	9103      	str	r1, [sp, #12]
 80038d0:	9202      	str	r2, [sp, #8]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	4633      	mov	r3, r6
 80038dc:	462a      	mov	r2, r5
 80038de:	4970      	ldr	r1, [pc, #448]	; (8003aa0 <defThread+0xa60>)
 80038e0:	4620      	mov	r0, r4
 80038e2:	f00e fe71 	bl	80125c8 <siprintf>
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB,
											total_pages, total_bytes);
						Report(1, "%s%s", stx, eol);
 80038e6:	4b62      	ldr	r3, [pc, #392]	; (8003a70 <defThread+0xa30>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a5f      	ldr	r2, [pc, #380]	; (8003a68 <defThread+0xa28>)
 80038ec:	496d      	ldr	r1, [pc, #436]	; (8003aa4 <defThread+0xa64>)
 80038ee:	2001      	movs	r0, #1
 80038f0:	f7fe ffa2 	bl	8002838 <Report>
					}
				break;
 80038f4:	e19f      	b.n	8003c36 <defThread+0xbf6>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 80038f6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80038fa:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <defThread+0x8d0>
						set_Date(epoch);
 8003904:	4b68      	ldr	r3, [pc, #416]	; (8003aa8 <defThread+0xa68>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe fe9b 	bl	8002644 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 800390e:	e194      	b.n	8003c3a <defThread+0xbfa>
						sec2str(stx);
 8003910:	4855      	ldr	r0, [pc, #340]	; (8003a68 <defThread+0xa28>)
 8003912:	f7fe fef7 	bl	8002704 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003916:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <defThread+0xa40>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 818d 	beq.w	8003c3a <defThread+0xbfa>
 8003920:	4b53      	ldr	r3, [pc, #332]	; (8003a70 <defThread+0xa30>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <defThread+0xa28>)
 8003926:	4961      	ldr	r1, [pc, #388]	; (8003aac <defThread+0xa6c>)
 8003928:	2000      	movs	r0, #0
 800392a:	f7fe ff85 	bl	8002838 <Report>
				break;
 800392e:	e184      	b.n	8003c3a <defThread+0xbfa>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003930:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003934:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003938:	785b      	ldrb	r3, [r3, #1]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d81e      	bhi.n	800397c <defThread+0x93c>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 800393e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003942:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003946:	785b      	ldrb	r3, [r3, #1]
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe fd15 	bl	8002378 <get_logName>
 800394e:	4602      	mov	r2, r0
 8003950:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003954:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003958:	785b      	ldrb	r3, [r3, #1]
 800395a:	4619      	mov	r1, r3
 800395c:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <defThread+0xa30>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	460b      	mov	r3, r1
 8003964:	4952      	ldr	r1, [pc, #328]	; (8003ab0 <defThread+0xa70>)
 8003966:	2001      	movs	r0, #1
 8003968:	f7fe ff66 	bl	8002838 <Report>
						dbg = qcmd.attr;
 800396c:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003970:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003974:	785a      	ldrb	r2, [r3, #1]
 8003976:	4b42      	ldr	r3, [pc, #264]	; (8003a80 <defThread+0xa40>)
 8003978:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 800397a:	e167      	b.n	8003c4c <defThread+0xc0c>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 800397c:	4b40      	ldr	r3, [pc, #256]	; (8003a80 <defThread+0xa40>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fcf9 	bl	8002378 <get_logName>
 8003986:	4602      	mov	r2, r0
 8003988:	4b3d      	ldr	r3, [pc, #244]	; (8003a80 <defThread+0xa40>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	4619      	mov	r1, r3
 800398e:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <defThread+0xa30>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	460b      	mov	r3, r1
 8003996:	4947      	ldr	r1, [pc, #284]	; (8003ab4 <defThread+0xa74>)
 8003998:	2001      	movs	r0, #1
 800399a:	f7fe ff4d 	bl	8002838 <Report>
				break;
 800399e:	e155      	b.n	8003c4c <defThread+0xc0c>
				case cmdRead:
				//case cmdNext:
					io_nand_read((nandAdr - devAdr) / chipConf.PageSize, rdBuf, MAX_LEN_DATA, 0);//nandLen, 0);
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <defThread+0xa78>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <defThread+0xa7c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	4b3a      	ldr	r3, [pc, #232]	; (8003a94 <defThread+0xa54>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fbb2 f0f3 	udiv	r0, r2, r3
 80039b2:	2300      	movs	r3, #0
 80039b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b8:	4941      	ldr	r1, [pc, #260]	; (8003ac0 <defThread+0xa80>)
 80039ba:	f7fd ff89 	bl	80018d0 <io_nand_read>
					if (!(devError & devNAND)) {
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <defThread+0xa84>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8139 	bne.w	8003c3e <defThread+0xbfe>
						//if (qcmd.cmd == cmdRead)
							nand_show = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
						//				    else nand_show = 2;
						readed = true;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3462 	strb.w	r3, [r7, #1122]	; 0x462
					}
				break;
 80039d8:	e131      	b.n	8003c3e <defThread+0xbfe>
				case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
 80039da:	4b29      	ldr	r3, [pc, #164]	; (8003a80 <defThread+0xa40>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00c      	beq.n	80039fc <defThread+0x9bc>
 80039e2:	4b35      	ldr	r3, [pc, #212]	; (8003ab8 <defThread+0xa78>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <defThread+0xa88>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	4619      	mov	r1, r3
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <defThread+0xa30>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	460b      	mov	r3, r1
 80039f4:	4935      	ldr	r1, [pc, #212]	; (8003acc <defThread+0xa8c>)
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7fe ff1e 	bl	8002838 <Report>
					nand_show = 2;
 80039fc:	2302      	movs	r3, #2
 80039fe:	f887 3463 	strb.w	r3, [r7, #1123]	; 0x463
				break;
 8003a02:	e123      	b.n	8003c4c <defThread+0xc0c>
				case cmdErase:
					if (!qcmd.attr) {
 8003a04:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8003a08:	f2a3 4364 	subw	r3, r3, #1124	; 0x464
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d164      	bne.n	8003adc <defThread+0xa9c>
						uint32_t bk = nandBlk;// * chipConf.PageSize;
 8003a12:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <defThread+0xa90>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
						io_nand_block_erase(bk);
 8003a1a:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8003a1e:	f7fd ff93 	bl	8001948 <io_nand_block_erase>
						if (dbg != logOff) {
 8003a22:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <defThread+0xa40>)
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 810b 	beq.w	8003c42 <defThread+0xc02>
							if (devError & devNAND) {
 8003a2c:	4b25      	ldr	r3, [pc, #148]	; (8003ac4 <defThread+0xa84>)
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	f003 0320 	and.w	r3, r3, #32
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00b      	beq.n	8003a50 <defThread+0xa10>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 8003a38:	4b25      	ldr	r3, [pc, #148]	; (8003ad0 <defThread+0xa90>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <defThread+0xa30>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003a46:	4923      	ldr	r1, [pc, #140]	; (8003ad4 <defThread+0xa94>)
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f7fe fef5 	bl	8002838 <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003a4e:	e0f8      	b.n	8003c42 <defThread+0xc02>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 8003a50:	4b1f      	ldr	r3, [pc, #124]	; (8003ad0 <defThread+0xa90>)
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <defThread+0xa30>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003a5e:	491e      	ldr	r1, [pc, #120]	; (8003ad8 <defThread+0xa98>)
 8003a60:	2001      	movs	r0, #1
 8003a62:	f7fe fee9 	bl	8002838 <Report>
				break;
 8003a66:	e0ec      	b.n	8003c42 <defThread+0xc02>
 8003a68:	200024cc 	.word	0x200024cc
 8003a6c:	20000008 	.word	0x20000008
 8003a70:	20000004 	.word	0x20000004
 8003a74:	0801375c 	.word	0x0801375c
 8003a78:	080134b4 	.word	0x080134b4
 8003a7c:	08013764 	.word	0x08013764
 8003a80:	20000062 	.word	0x20000062
 8003a84:	08013538 	.word	0x08013538
 8003a88:	080134ac 	.word	0x080134ac
 8003a8c:	200014a8 	.word	0x200014a8
 8003a90:	08013540 	.word	0x08013540
 8003a94:	200014b0 	.word	0x200014b0
 8003a98:	20001488 	.word	0x20001488
 8003a9c:	2000148c 	.word	0x2000148c
 8003aa0:	08013558 	.word	0x08013558
 8003aa4:	080135fc 	.word	0x080135fc
 8003aa8:	20000064 	.word	0x20000064
 8003aac:	08013790 	.word	0x08013790
 8003ab0:	080137ac 	.word	0x080137ac
 8003ab4:	080137c8 	.word	0x080137c8
 8003ab8:	20001494 	.word	0x20001494
 8003abc:	20001490 	.word	0x20001490
 8003ac0:	200014c8 	.word	0x200014c8
 8003ac4:	20000470 	.word	0x20000470
 8003ac8:	20001498 	.word	0x20001498
 8003acc:	080137e8 	.word	0x080137e8
 8003ad0:	2000149c 	.word	0x2000149c
 8003ad4:	0801380c 	.word	0x0801380c
 8003ad8:	08013834 	.word	0x08013834
						iBlk = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
						next_block_erase = 1;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
						if (dbg != logOff) Report(1, "Erase chip ");
 8003ae8:	4ba6      	ldr	r3, [pc, #664]	; (8003d84 <defThread+0xd44>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <defThread+0xab8>
 8003af0:	49a5      	ldr	r1, [pc, #660]	; (8003d88 <defThread+0xd48>)
 8003af2:	2001      	movs	r0, #1
 8003af4:	f7fe fea0 	bl	8002838 <Report>
						stik = HAL_GetTick();
 8003af8:	f006 f9d6 	bl	8009ea8 <HAL_GetTick>
 8003afc:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
				break;
 8003b00:	e09f      	b.n	8003c42 <defThread+0xc02>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8003b02:	4ba2      	ldr	r3, [pc, #648]	; (8003d8c <defThread+0xd4c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4aa2      	ldr	r2, [pc, #648]	; (8003d90 <defThread+0xd50>)
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	fb02 f303 	mul.w	r3, r2, r3
 8003b0e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					if (!pageIsEmpty(adr)) {
 8003b12:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003b16:	f7fe fa9b 	bl	8002050 <pageIsEmpty>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f083 0301 	eor.w	r3, r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d010      	beq.n	8003b48 <defThread+0xb08>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 8003b26:	4b97      	ldr	r3, [pc, #604]	; (8003d84 <defThread+0xd44>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 808b 	beq.w	8003c46 <defThread+0xc06>
 8003b30:	4b97      	ldr	r3, [pc, #604]	; (8003d90 <defThread+0xd50>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	4b97      	ldr	r3, [pc, #604]	; (8003d94 <defThread+0xd54>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003b3e:	4996      	ldr	r1, [pc, #600]	; (8003d98 <defThread+0xd58>)
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7fe fe79 	bl	8002838 <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 8003b46:	e07e      	b.n	8003c46 <defThread+0xc06>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 8003b48:	4b8e      	ldr	r3, [pc, #568]	; (8003d84 <defThread+0xd44>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07a      	beq.n	8003c46 <defThread+0xc06>
 8003b50:	4b8f      	ldr	r3, [pc, #572]	; (8003d90 <defThread+0xd50>)
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b8f      	ldr	r3, [pc, #572]	; (8003d94 <defThread+0xd54>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003b5e:	498f      	ldr	r1, [pc, #572]	; (8003d9c <defThread+0xd5c>)
 8003b60:	2001      	movs	r0, #1
 8003b62:	f7fe fe69 	bl	8002838 <Report>
				break;
 8003b66:	e06e      	b.n	8003c46 <defThread+0xc06>
				case cmdWrite:
				{
						uint32_t wadr = (nandAdr - devAdr) / chipConf.PageSize;
 8003b68:	4b8d      	ldr	r3, [pc, #564]	; (8003da0 <defThread+0xd60>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b8d      	ldr	r3, [pc, #564]	; (8003da4 <defThread+0xd64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1ad2      	subs	r2, r2, r3
 8003b72:	4b86      	ldr	r3, [pc, #536]	; (8003d8c <defThread+0xd4c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
						if (!pageIsEmpty(wadr)) {
 8003b7e:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003b82:	f7fe fa65 	bl	8002050 <pageIsEmpty>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <defThread+0xb68>
							io_nand_block_erase(wadr);
 8003b92:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003b96:	f7fd fed7 	bl	8001948 <io_nand_block_erase>
							sprintf(stx, "Erase nand addr:%lu done", wadr);
 8003b9a:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003b9e:	4982      	ldr	r1, [pc, #520]	; (8003da8 <defThread+0xd68>)
 8003ba0:	4882      	ldr	r0, [pc, #520]	; (8003dac <defThread+0xd6c>)
 8003ba2:	f00e fd11 	bl	80125c8 <siprintf>
 8003ba6:	e005      	b.n	8003bb4 <defThread+0xb74>
						} else {
							sprintf(stx, "Addr:%lu is Empty", wadr);
 8003ba8:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 8003bac:	4980      	ldr	r1, [pc, #512]	; (8003db0 <defThread+0xd70>)
 8003bae:	487f      	ldr	r0, [pc, #508]	; (8003dac <defThread+0xd6c>)
 8003bb0:	f00e fd0a 	bl	80125c8 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <defThread+0xd44>)
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <defThread+0xb8a>
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <defThread+0xd54>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a7a      	ldr	r2, [pc, #488]	; (8003dac <defThread+0xd6c>)
 8003bc2:	497c      	ldr	r1, [pc, #496]	; (8003db4 <defThread+0xd74>)
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f7fe fe37 	bl	8002838 <Report>
						memset(wrBuf, EMPTY, chipConf.PageSize);
 8003bca:	4b70      	ldr	r3, [pc, #448]	; (8003d8c <defThread+0xd4c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	21ff      	movs	r1, #255	; 0xff
 8003bd2:	4879      	ldr	r0, [pc, #484]	; (8003db8 <defThread+0xd78>)
 8003bd4:	f00e f890 	bl	8011cf8 <memset>
						uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
						memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8003bde:	4b77      	ldr	r3, [pc, #476]	; (8003dbc <defThread+0xd7c>)
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	4b76      	ldr	r3, [pc, #472]	; (8003dc0 <defThread+0xd80>)
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	4873      	ldr	r0, [pc, #460]	; (8003db8 <defThread+0xd78>)
 8003bec:	f00e f884 	bl	8011cf8 <memset>
						////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
						//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
						//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
						io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003bf0:	4b73      	ldr	r3, [pc, #460]	; (8003dc0 <defThread+0xd80>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003bfa:	496f      	ldr	r1, [pc, #444]	; (8003db8 <defThread+0xd78>)
 8003bfc:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003c00:	f7fd fe84 	bl	800190c <io_nand_write>
						if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 8003c04:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <defThread+0xd44>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <defThread+0xc0a>
 8003c0c:	4b64      	ldr	r3, [pc, #400]	; (8003da0 <defThread+0xd60>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	4b6a      	ldr	r3, [pc, #424]	; (8003dbc <defThread+0xd7c>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <defThread+0xd80>)
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4b5d      	ldr	r3, [pc, #372]	; (8003d94 <defThread+0xd54>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	9302      	str	r3, [sp, #8]
 8003c22:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	9100      	str	r1, [sp, #0]
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4965      	ldr	r1, [pc, #404]	; (8003dc4 <defThread+0xd84>)
 8003c2e:	2001      	movs	r0, #1
 8003c30:	f7fe fe02 	bl	8002838 <Report>
							      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 8003c34:	e009      	b.n	8003c4a <defThread+0xc0a>
				break;
 8003c36:	bf00      	nop
 8003c38:	e008      	b.n	8003c4c <defThread+0xc0c>
				break;
 8003c3a:	bf00      	nop
 8003c3c:	e006      	b.n	8003c4c <defThread+0xc0c>
				break;
 8003c3e:	bf00      	nop
 8003c40:	e004      	b.n	8003c4c <defThread+0xc0c>
				break;
 8003c42:	bf00      	nop
 8003c44:	e002      	b.n	8003c4c <defThread+0xc0c>
				break;
 8003c46:	bf00      	nop
 8003c48:	e000      	b.n	8003c4c <defThread+0xc0c>
				break;
 8003c4a:	bf00      	nop
			}
			if (nand_show) {
 8003c4c:	f897 3463 	ldrb.w	r3, [r7, #1123]	; 0x463
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00d      	beq.n	8003c70 <defThread+0xc30>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <defThread+0xd60>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	4b59      	ldr	r3, [pc, #356]	; (8003dc0 <defThread+0xd80>)
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	461c      	mov	r4, r3
 8003c5e:	f897 1462 	ldrb.w	r1, [r7, #1122]	; 0x462
 8003c62:	f897 0463 	ldrb.w	r0, [r7, #1123]	; 0x463
 8003c66:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <defThread+0xd88>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	f7fe fe48 	bl	8002900 <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 8003c70:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d058      	beq.n	8003d2a <defThread+0xcea>
			byte = dbg;
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <defThread+0xd44>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	f887 344d 	strb.w	r3, [r7, #1101]	; 0x44d
			dbg = logOff;//disable print log !
 8003c80:	4b40      	ldr	r3, [pc, #256]	; (8003d84 <defThread+0xd44>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 8003c86:	f8d7 0468 	ldr.w	r0, [r7, #1128]	; 0x468
 8003c8a:	f7fd fe5d 	bl	8001948 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 8003c8e:	4a3d      	ldr	r2, [pc, #244]	; (8003d84 <defThread+0xd44>)
 8003c90:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003c94:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 8003c96:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <defThread+0xd8c>)
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <defThread+0xc6a>
				next_block_erase = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
 8003ca8:	e01c      	b.n	8003ce4 <defThread+0xca4>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 8003caa:	4b38      	ldr	r3, [pc, #224]	; (8003d8c <defThread+0xd4c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	029a      	lsls	r2, r3, #10
 8003cb0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8003cb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cb8:	fb01 f202 	mul.w	r2, r1, r2
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d103      	bne.n	8003cca <defThread+0xc8a>
 8003cc2:	4943      	ldr	r1, [pc, #268]	; (8003dd0 <defThread+0xd90>)
 8003cc4:	2000      	movs	r0, #0
 8003cc6:	f7fe fdb7 	bl	8002838 <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <defThread+0xd4c>)
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4a2f      	ldr	r2, [pc, #188]	; (8003d8c <defThread+0xd4c>)
 8003cd0:	6912      	ldr	r2, [r2, #16]
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <defThread+0xca4>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	f887 346f 	strb.w	r3, [r7, #1135]	; 0x46f
			}
			iBlk += chipConf.PageSize;
 8003ce4:	4b29      	ldr	r3, [pc, #164]	; (8003d8c <defThread+0xd4c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003cec:	4413      	add	r3, r2
 8003cee:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
			if (!next_block_erase) {
 8003cf2:	f897 346f 	ldrb.w	r3, [r7, #1135]	; 0x46f
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d117      	bne.n	8003d2a <defThread+0xcea>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003cfa:	4b22      	ldr	r3, [pc, #136]	; (8003d84 <defThread+0xd44>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d013      	beq.n	8003d2a <defThread+0xcea>
 8003d02:	f006 f8d1 	bl	8009ea8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	f8d7 3464 	ldr.w	r3, [r7, #1124]	; 0x464
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <defThread+0xd94>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	099a      	lsrs	r2, r3, #6
 8003d16:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <defThread+0xd54>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003d22:	492d      	ldr	r1, [pc, #180]	; (8003dd8 <defThread+0xd98>)
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7fe fd87 	bl	8002838 <Report>
			}
		}
		//
		osDelay(5);
 8003d2a:	2005      	movs	r0, #5
 8003d2c:	f00a fdac 	bl	800e888 <osDelay>
	while (loop) {
 8003d30:	f897 345c 	ldrb.w	r3, [r7, #1116]	; 0x45c
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f abc9 	bne.w	80034cc <defThread+0x48c>

//	if (wrBuf) free(wrBuf);
//	if (rdBuf) free(rdBuf);

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 8003d3a:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <defThread+0xd0c>
 8003d42:	f001 f937 	bl	8004fb4 <io_fs_unmount>
 8003d46:	4603      	mov	r3, r0
 8003d48:	4a24      	ldr	r2, [pc, #144]	; (8003ddc <defThread+0xd9c>)
 8003d4a:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003d4c:	4b0d      	ldr	r3, [pc, #52]	; (8003d84 <defThread+0xd44>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d011      	beq.n	8003d78 <defThread+0xd38>
 8003d54:	4b22      	ldr	r3, [pc, #136]	; (8003de0 <defThread+0xda0>)
 8003d56:	681c      	ldr	r4, [r3, #0]
 8003d58:	f00d fc7c 	bl	8011654 <xPortGetFreeHeapSize>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <defThread+0xd54>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	9302      	str	r3, [sp, #8]
 8003d64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	9200      	str	r2, [sp, #0]
 8003d6c:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <defThread+0xda4>)
 8003d6e:	4622      	mov	r2, r4
 8003d70:	491d      	ldr	r1, [pc, #116]	; (8003de8 <defThread+0xda8>)
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7fe fd60 	bl	8002838 <Report>
	osDelay(250);
 8003d78:	20fa      	movs	r0, #250	; 0xfa
 8003d7a:	f00a fd85 	bl	800e888 <osDelay>

	NVIC_SystemReset();
 8003d7e:	f7fd fe03 	bl	8001988 <__NVIC_SystemReset>
 8003d82:	bf00      	nop
 8003d84:	20000062 	.word	0x20000062
 8003d88:	08013858 	.word	0x08013858
 8003d8c:	200014b0 	.word	0x200014b0
 8003d90:	200014a0 	.word	0x200014a0
 8003d94:	20000004 	.word	0x20000004
 8003d98:	08013864 	.word	0x08013864
 8003d9c:	08013888 	.word	0x08013888
 8003da0:	20001494 	.word	0x20001494
 8003da4:	20001490 	.word	0x20001490
 8003da8:	080138a8 	.word	0x080138a8
 8003dac:	200024cc 	.word	0x200024cc
 8003db0:	080138c4 	.word	0x080138c4
 8003db4:	080135fc 	.word	0x080135fc
 8003db8:	20001cc8 	.word	0x20001cc8
 8003dbc:	20000080 	.word	0x20000080
 8003dc0:	20001498 	.word	0x20001498
 8003dc4:	080138d8 	.word	0x080138d8
 8003dc8:	200014c8 	.word	0x200014c8
 8003dcc:	20000470 	.word	0x20000470
 8003dd0:	0801390c 	.word	0x0801390c
 8003dd4:	10624dd3 	.word	0x10624dd3
 8003dd8:	08013910 	.word	0x08013910
 8003ddc:	20002ccc 	.word	0x20002ccc
 8003de0:	20000000 	.word	0x20000000
 8003de4:	08016c30 	.word	0x08016c30
 8003de8:	08013928 	.word	0x08013928

08003dec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b5b0      	push	{r4, r5, r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d102      	bne.n	8003e04 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8003dfe:	f006 f83f 	bl	8009e80 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003e02:	e016      	b.n	8003e32 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e0c:	d111      	bne.n	8003e32 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8003e0e:	f7fe fbdb 	bl	80025c8 <get_msCounter>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	f002 0403 	and.w	r4, r2, #3
 8003e1a:	2500      	movs	r5, #0
 8003e1c:	1ee3      	subs	r3, r4, #3
 8003e1e:	432b      	orrs	r3, r5
 8003e20:	d105      	bne.n	8003e2e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003e22:	f7fe fbc3 	bl	80025ac <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8003e2a:	f006 ff06 	bl	800ac3a <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8003e2e:	f7fe fbd9 	bl	80025e4 <inc_msCounter>
}
 8003e32:	bf00      	nop
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bdb0      	pop	{r4, r5, r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40010000 	.word	0x40010000
 8003e40:	40020800 	.word	0x40020800

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <Error_Handler+0x1c>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <Error_Handler+0x1c>)
 8003e54:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8003e56:	2001      	movs	r0, #1
 8003e58:	f7fe fb80 	bl	800255c <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8003e5c:	bf00      	nop
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000470 	.word	0x20000470

08003e64 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8003e6e:	2200      	movs	r2, #0
 8003e70:	2104      	movs	r1, #4
 8003e72:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <ST7789_WriteCommand+0x40>)
 8003e74:	f006 fec8 	bl	800ac08 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <ST7789_WriteCommand+0x44>)
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	2396      	movs	r3, #150	; 0x96
 8003e7e:	1df9      	adds	r1, r7, #7
 8003e80:	2201      	movs	r2, #1
 8003e82:	f008 f97c 	bl	800c17e <HAL_SPI_Transmit>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <ST7789_WriteCommand+0x36>
 8003e8c:	4b07      	ldr	r3, [pc, #28]	; (8003eac <ST7789_WriteCommand+0x48>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	4b05      	ldr	r3, [pc, #20]	; (8003eac <ST7789_WriteCommand+0x48>)
 8003e98:	801a      	strh	r2, [r3, #0]
}
 8003e9a:	bf00      	nop
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40020000 	.word	0x40020000
 8003ea8:	20000068 	.word	0x20000068
 8003eac:	20000470 	.word	0x20000470

08003eb0 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2104      	movs	r1, #4
 8003ebe:	480e      	ldr	r0, [pc, #56]	; (8003ef8 <ST7789_WriteCommands+0x48>)
 8003ec0:	f006 fea2 	bl	800ac08 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8003ec4:	4b0d      	ldr	r3, [pc, #52]	; (8003efc <ST7789_WriteCommands+0x4c>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	2196      	movs	r1, #150	; 0x96
 8003ece:	460b      	mov	r3, r1
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	440b      	add	r3, r1
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	f008 f951 	bl	800c17e <HAL_SPI_Transmit>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d006      	beq.n	8003ef0 <ST7789_WriteCommands+0x40>
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <ST7789_WriteCommands+0x50>)
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	f043 0310 	orr.w	r3, r3, #16
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <ST7789_WriteCommands+0x50>)
 8003eee:	801a      	strh	r2, [r3, #0]
}
 8003ef0:	bf00      	nop
 8003ef2:	3708      	adds	r7, #8
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	20000068 	.word	0x20000068
 8003f00:	20000470 	.word	0x20000470

08003f04 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003f12:	2201      	movs	r2, #1
 8003f14:	2104      	movs	r1, #4
 8003f16:	481f      	ldr	r0, [pc, #124]	; (8003f94 <ST7789_WriteData+0x90>)
 8003f18:	f006 fe76 	bl	800ac08 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003f1c:	e028      	b.n	8003f70 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f24:	4293      	cmp	r3, r2
 8003f26:	bf28      	it	cs
 8003f28:	4613      	movcs	r3, r2
 8003f2a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <ST7789_WriteData+0x94>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003f32:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <ST7789_WriteData+0x98>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	89ba      	ldrh	r2, [r7, #12]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f008 fa5c 	bl	800c3f8 <HAL_SPI_Transmit_DMA>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003f4a:	e002      	b.n	8003f52 <ST7789_WriteData+0x4e>
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	f005 ffb7 	bl	8009ec0 <HAL_Delay>
 8003f52:	4b11      	ldr	r3, [pc, #68]	; (8003f98 <ST7789_WriteData+0x94>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f083 0301 	eor.w	r3, r3, #1
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f5      	bne.n	8003f4c <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003f60:	89bb      	ldrh	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003f68:	89bb      	ldrh	r3, [r7, #12]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1d3      	bne.n	8003f1e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d006      	beq.n	8003f8a <ST7789_WriteData+0x86>
 8003f7c:	4b08      	ldr	r3, [pc, #32]	; (8003fa0 <ST7789_WriteData+0x9c>)
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	f043 0310 	orr.w	r3, r3, #16
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <ST7789_WriteData+0x9c>)
 8003f88:	801a      	strh	r2, [r3, #0]
}
 8003f8a:	bf00      	nop
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40020000 	.word	0x40020000
 8003f98:	20000061 	.word	0x20000061
 8003f9c:	20000068 	.word	0x20000068
 8003fa0:	20000470 	.word	0x20000470

08003fa4 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	4814      	ldr	r0, [pc, #80]	; (8004008 <ST7789_WriteDataLine+0x64>)
 8003fb8:	f006 fe26 	bl	800ac08 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003fbc:	4b13      	ldr	r3, [pc, #76]	; (800400c <ST7789_WriteDataLine+0x68>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <ST7789_WriteDataLine+0x6c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f008 fa13 	bl	800c3f8 <HAL_SPI_Transmit_DMA>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003fd6:	e002      	b.n	8003fde <ST7789_WriteDataLine+0x3a>
 8003fd8:	2001      	movs	r0, #1
 8003fda:	f005 ff71 	bl	8009ec0 <HAL_Delay>
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <ST7789_WriteDataLine+0x68>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1f5      	bne.n	8003fd8 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <ST7789_WriteDataLine+0x5c>
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <ST7789_WriteDataLine+0x70>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	f043 0310 	orr.w	r3, r3, #16
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <ST7789_WriteDataLine+0x70>)
 8003ffe:	801a      	strh	r2, [r3, #0]
}
 8004000:	bf00      	nop
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40020000 	.word	0x40020000
 800400c:	20000061 	.word	0x20000061
 8004010:	20000068 	.word	0x20000068
 8004014:	20000470 	.word	0x20000470

08004018 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8004022:	2201      	movs	r2, #1
 8004024:	2104      	movs	r1, #4
 8004026:	480c      	ldr	r0, [pc, #48]	; (8004058 <ST7789_WriteSmallData+0x40>)
 8004028:	f006 fdee 	bl	800ac08 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 800402c:	4b0b      	ldr	r3, [pc, #44]	; (800405c <ST7789_WriteSmallData+0x44>)
 800402e:	6818      	ldr	r0, [r3, #0]
 8004030:	2396      	movs	r3, #150	; 0x96
 8004032:	1df9      	adds	r1, r7, #7
 8004034:	2201      	movs	r2, #1
 8004036:	f008 f8a2 	bl	800c17e <HAL_SPI_Transmit>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d006      	beq.n	800404e <ST7789_WriteSmallData+0x36>
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <ST7789_WriteSmallData+0x48>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	f043 0310 	orr.w	r3, r3, #16
 8004048:	b29a      	uxth	r2, r3
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <ST7789_WriteSmallData+0x48>)
 800404c:	801a      	strh	r2, [r3, #0]
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40020000 	.word	0x40020000
 800405c:	20000068 	.word	0x20000068
 8004060:	20000470 	.word	0x20000470

08004064 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 800406e:	79fb      	ldrb	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <ipsOn+0x18>
 8004074:	2029      	movs	r0, #41	; 0x29
 8004076:	f7ff fef5 	bl	8003e64 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 800407a:	e002      	b.n	8004082 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 800407c:	2028      	movs	r0, #40	; 0x28
 800407e:	f7ff fef1 	bl	8003e64 <ST7789_WriteCommand>
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	4603      	mov	r3, r0
 8004094:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8004096:	2036      	movs	r0, #54	; 0x36
 8004098:	f7ff fee4 	bl	8003e64 <ST7789_WriteCommand>
	switch (m) {
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d81a      	bhi.n	80040d8 <ST7789_SetRotation+0x4c>
 80040a2:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <ST7789_SetRotation+0x1c>)
 80040a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c1 	.word	0x080040c1
 80040b0:	080040c9 	.word	0x080040c9
 80040b4:	080040d1 	.word	0x080040d1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80040b8:	20c0      	movs	r0, #192	; 0xc0
 80040ba:	f7ff ffad 	bl	8004018 <ST7789_WriteSmallData>
		break;
 80040be:	e00c      	b.n	80040da <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80040c0:	20a0      	movs	r0, #160	; 0xa0
 80040c2:	f7ff ffa9 	bl	8004018 <ST7789_WriteSmallData>
		break;
 80040c6:	e008      	b.n	80040da <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80040c8:	2000      	movs	r0, #0
 80040ca:	f7ff ffa5 	bl	8004018 <ST7789_WriteSmallData>
		break;
 80040ce:	e004      	b.n	80040da <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80040d0:	2060      	movs	r0, #96	; 0x60
 80040d2:	f7ff ffa1 	bl	8004018 <ST7789_WriteSmallData>
		break;
 80040d6:	e000      	b.n	80040da <ST7789_SetRotation+0x4e>
	default:
		break;
 80040d8:	bf00      	nop
	}
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop

080040e4 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	4604      	mov	r4, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	461a      	mov	r2, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	80fb      	strh	r3, [r7, #6]
 80040f6:	4603      	mov	r3, r0
 80040f8:	80bb      	strh	r3, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	807b      	strh	r3, [r7, #2]
 80040fe:	4613      	mov	r3, r2
 8004100:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	82fb      	strh	r3, [r7, #22]
 8004106:	887b      	ldrh	r3, [r7, #2]
 8004108:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800410a:	88bb      	ldrh	r3, [r7, #4]
 800410c:	827b      	strh	r3, [r7, #18]
 800410e:	883b      	ldrh	r3, [r7, #0]
 8004110:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8004112:	202a      	movs	r0, #42	; 0x2a
 8004114:	f7ff fea6 	bl	8003e64 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8004118:	8afb      	ldrh	r3, [r7, #22]
 800411a:	0a1b      	lsrs	r3, r3, #8
 800411c:	b29b      	uxth	r3, r3
 800411e:	b2db      	uxtb	r3, r3
 8004120:	733b      	strb	r3, [r7, #12]
 8004122:	8afb      	ldrh	r3, [r7, #22]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	737b      	strb	r3, [r7, #13]
 8004128:	8abb      	ldrh	r3, [r7, #20]
 800412a:	0a1b      	lsrs	r3, r3, #8
 800412c:	b29b      	uxth	r3, r3
 800412e:	b2db      	uxtb	r3, r3
 8004130:	73bb      	strb	r3, [r7, #14]
 8004132:	8abb      	ldrh	r3, [r7, #20]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004138:	f107 030c 	add.w	r3, r7, #12
 800413c:	2104      	movs	r1, #4
 800413e:	4618      	mov	r0, r3
 8004140:	f7ff fee0 	bl	8003f04 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8004144:	202b      	movs	r0, #43	; 0x2b
 8004146:	f7ff fe8d 	bl	8003e64 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800414a:	8a7b      	ldrh	r3, [r7, #18]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b29b      	uxth	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	723b      	strb	r3, [r7, #8]
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	727b      	strb	r3, [r7, #9]
 800415a:	8a3b      	ldrh	r3, [r7, #16]
 800415c:	0a1b      	lsrs	r3, r3, #8
 800415e:	b29b      	uxth	r3, r3
 8004160:	b2db      	uxtb	r3, r3
 8004162:	72bb      	strb	r3, [r7, #10]
 8004164:	8a3b      	ldrh	r3, [r7, #16]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	2104      	movs	r1, #4
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fec7 	bl	8003f04 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8004176:	202c      	movs	r0, #44	; 0x2c
 8004178:	f7ff fe74 	bl	8003e64 <ST7789_WriteCommand>
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd90      	pop	{r4, r7, pc}

08004184 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8004188:	2014      	movs	r0, #20
 800418a:	f005 fe99 	bl	8009ec0 <HAL_Delay>
    ST7789_RST_Clr();
 800418e:	2200      	movs	r2, #0
 8004190:	2102      	movs	r1, #2
 8004192:	4808      	ldr	r0, [pc, #32]	; (80041b4 <ST7789_Reset+0x30>)
 8004194:	f006 fd38 	bl	800ac08 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8004198:	200a      	movs	r0, #10
 800419a:	f005 fe91 	bl	8009ec0 <HAL_Delay>
    ST7789_RST_Set();
 800419e:	2201      	movs	r2, #1
 80041a0:	2102      	movs	r1, #2
 80041a2:	4804      	ldr	r0, [pc, #16]	; (80041b4 <ST7789_Reset+0x30>)
 80041a4:	f006 fd30 	bl	800ac08 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80041a8:	2014      	movs	r0, #20
 80041aa:	f005 fe89 	bl	8009ec0 <HAL_Delay>
}
 80041ae:	bf00      	nop
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40020000 	.word	0x40020000

080041b8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80041b8:	b590      	push	{r4, r7, lr}
 80041ba:	b08f      	sub	sp, #60	; 0x3c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80041c2:	203a      	movs	r0, #58	; 0x3a
 80041c4:	f7ff fe4e 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80041c8:	2055      	movs	r0, #85	; 0x55
 80041ca:	f7ff ff25 	bl	8004018 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80041ce:	20b2      	movs	r0, #178	; 0xb2
 80041d0:	f7ff fe48 	bl	8003e64 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80041d4:	4a3a      	ldr	r2, [pc, #232]	; (80042c0 <ST7789_Init+0x108>)
 80041d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041de:	6018      	str	r0, [r3, #0]
 80041e0:	3304      	adds	r3, #4
 80041e2:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80041e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80041e8:	2105      	movs	r1, #5
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fe8a 	bl	8003f04 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80041f0:	2003      	movs	r0, #3
 80041f2:	f7ff ff4b 	bl	800408c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 80041f6:	20b7      	movs	r0, #183	; 0xb7
 80041f8:	f7ff fe34 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80041fc:	2035      	movs	r0, #53	; 0x35
 80041fe:	f7ff ff0b 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8004202:	20bb      	movs	r0, #187	; 0xbb
 8004204:	f7ff fe2e 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8004208:	2019      	movs	r0, #25
 800420a:	f7ff ff05 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800420e:	20c0      	movs	r0, #192	; 0xc0
 8004210:	f7ff fe28 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8004214:	202c      	movs	r0, #44	; 0x2c
 8004216:	f7ff feff 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 800421a:	20c2      	movs	r0, #194	; 0xc2
 800421c:	f7ff fe22 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004220:	2001      	movs	r0, #1
 8004222:	f7ff fef9 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8004226:	20ff      	movs	r0, #255	; 0xff
 8004228:	f7ff fef6 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 800422c:	20c3      	movs	r0, #195	; 0xc3
 800422e:	f7ff fe19 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8004232:	2012      	movs	r0, #18
 8004234:	f7ff fef0 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004238:	20c4      	movs	r0, #196	; 0xc4
 800423a:	f7ff fe13 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800423e:	2020      	movs	r0, #32
 8004240:	f7ff feea 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8004244:	20c6      	movs	r0, #198	; 0xc6
 8004246:	f7ff fe0d 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800424a:	200f      	movs	r0, #15
 800424c:	f7ff fee4 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004250:	20d0      	movs	r0, #208	; 0xd0
 8004252:	f7ff fe07 	bl	8003e64 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8004256:	20a4      	movs	r0, #164	; 0xa4
 8004258:	f7ff fede 	bl	8004018 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 800425c:	20a1      	movs	r0, #161	; 0xa1
 800425e:	f7ff fedb 	bl	8004018 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8004262:	20e0      	movs	r0, #224	; 0xe0
 8004264:	f7ff fdfe 	bl	8003e64 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004268:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <ST7789_Init+0x10c>)
 800426a:	f107 041c 	add.w	r4, r7, #28
 800426e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004270:	c407      	stmia	r4!, {r0, r1, r2}
 8004272:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004274:	f107 031c 	add.w	r3, r7, #28
 8004278:	210e      	movs	r1, #14
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fe42 	bl	8003f04 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8004280:	20e1      	movs	r0, #225	; 0xe1
 8004282:	f7ff fdef 	bl	8003e64 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <ST7789_Init+0x110>)
 8004288:	f107 040c 	add.w	r4, r7, #12
 800428c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800428e:	c407      	stmia	r4!, {r0, r1, r2}
 8004290:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	210e      	movs	r1, #14
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fe33 	bl	8003f04 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <ST7789_Init+0x114>)
 80042a0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80042a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042a6:	2104      	movs	r1, #4
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff fe01 	bl	8003eb0 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f80d 	bl	80042d0 <ST7789_Fill_Color>
}
 80042b6:	bf00      	nop
 80042b8:	373c      	adds	r7, #60	; 0x3c
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd90      	pop	{r4, r7, pc}
 80042be:	bf00      	nop
 80042c0:	08013954 	.word	0x08013954
 80042c4:	0801395c 	.word	0x0801395c
 80042c8:	0801396c 	.word	0x0801396c
 80042cc:	28131121 	.word	0x28131121

080042d0 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b0fc      	sub	sp, #496	; 0x1f0
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4602      	mov	r2, r0
 80042d8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80042dc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80042e0:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80042e2:	23ef      	movs	r3, #239	; 0xef
 80042e4:	22ef      	movs	r2, #239	; 0xef
 80042e6:	2100      	movs	r1, #0
 80042e8:	2000      	movs	r0, #0
 80042ea:	f7ff fefb 	bl	80040e4 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80042fa:	e024      	b.n	8004346 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 80042fc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004300:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b21a      	sxth	r2, r3
 800430c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004310:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8004314:	881b      	ldrh	r3, [r3, #0]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	b21b      	sxth	r3, r3
 800431a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800431e:	b21b      	sxth	r3, r3
 8004320:	4313      	orrs	r3, r2
 8004322:	b219      	sxth	r1, r3
 8004324:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004328:	f107 020c 	add.w	r2, r7, #12
 800432c:	4413      	add	r3, r2
 800432e:	b28a      	uxth	r2, r1
 8004330:	801a      	strh	r2, [r3, #0]
		i += 2;
 8004332:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004336:	3302      	adds	r3, #2
 8004338:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800433c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004340:	3301      	adds	r3, #1
 8004342:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004346:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800434a:	2bef      	cmp	r3, #239	; 0xef
 800434c:	d9d6      	bls.n	80042fc <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800434e:	2300      	movs	r3, #0
 8004350:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004354:	e00b      	b.n	800436e <ST7789_Fill_Color+0x9e>
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800435e:	4618      	mov	r0, r3
 8004360:	f7ff fe20 	bl	8003fa4 <ST7789_WriteDataLine>
 8004364:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004368:	3301      	adds	r3, #1
 800436a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800436e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004372:	2bef      	cmp	r3, #239	; 0xef
 8004374:	d9ef      	bls.n	8004356 <ST7789_Fill_Color+0x86>

//#endif
}
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8004382:	b590      	push	{r4, r7, lr}
 8004384:	b085      	sub	sp, #20
 8004386:	af00      	add	r7, sp, #0
 8004388:	4604      	mov	r4, r0
 800438a:	4608      	mov	r0, r1
 800438c:	4611      	mov	r1, r2
 800438e:	461a      	mov	r2, r3
 8004390:	4623      	mov	r3, r4
 8004392:	80fb      	strh	r3, [r7, #6]
 8004394:	4603      	mov	r3, r0
 8004396:	80bb      	strh	r3, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	2bef      	cmp	r3, #239	; 0xef
 80043a4:	d82b      	bhi.n	80043fe <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80043a6:	883b      	ldrh	r3, [r7, #0]
 80043a8:	2bef      	cmp	r3, #239	; 0xef
 80043aa:	d828      	bhi.n	80043fe <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80043ac:	8c3b      	ldrh	r3, [r7, #32]
 80043ae:	0a1b      	lsrs	r3, r3, #8
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	723b      	strb	r3, [r7, #8]
 80043b6:	8c3b      	ldrh	r3, [r7, #32]
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80043bc:	883b      	ldrh	r3, [r7, #0]
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	88b9      	ldrh	r1, [r7, #4]
 80043c2:	88f8      	ldrh	r0, [r7, #6]
 80043c4:	f7ff fe8e 	bl	80040e4 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80043c8:	88bb      	ldrh	r3, [r7, #4]
 80043ca:	81fb      	strh	r3, [r7, #14]
 80043cc:	e012      	b.n	80043f4 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	81bb      	strh	r3, [r7, #12]
 80043d2:	e008      	b.n	80043e6 <ST7789_Fill+0x64>
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	2102      	movs	r1, #2
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff fd92 	bl	8003f04 <ST7789_WriteData>
 80043e0:	89bb      	ldrh	r3, [r7, #12]
 80043e2:	3301      	adds	r3, #1
 80043e4:	81bb      	strh	r3, [r7, #12]
 80043e6:	89ba      	ldrh	r2, [r7, #12]
 80043e8:	887b      	ldrh	r3, [r7, #2]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d9f2      	bls.n	80043d4 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80043ee:	89fb      	ldrh	r3, [r7, #14]
 80043f0:	3301      	adds	r3, #1
 80043f2:	81fb      	strh	r3, [r7, #14]
 80043f4:	89fa      	ldrh	r2, [r7, #14]
 80043f6:	883b      	ldrh	r3, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d9e8      	bls.n	80043ce <ST7789_Fill+0x4c>
 80043fc:	e000      	b.n	8004400 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80043fe:	bf00      	nop
	}
}
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	bd90      	pop	{r4, r7, pc}

08004406 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004406:	b082      	sub	sp, #8
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b089      	sub	sp, #36	; 0x24
 800440c:	af00      	add	r7, sp, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	4603      	mov	r3, r0
 8004412:	80fb      	strh	r3, [r7, #6]
 8004414:	460b      	mov	r3, r1
 8004416:	80bb      	strh	r3, [r7, #4]
 8004418:	4613      	mov	r3, r2
 800441a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800441c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004420:	b29a      	uxth	r2, r3
 8004422:	88fb      	ldrh	r3, [r7, #6]
 8004424:	4413      	add	r3, r2
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29c      	uxth	r4, r3
 800442c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004430:	b29a      	uxth	r2, r3
 8004432:	88bb      	ldrh	r3, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	88b9      	ldrh	r1, [r7, #4]
 800443e:	88f8      	ldrh	r0, [r7, #6]
 8004440:	4622      	mov	r2, r4
 8004442:	f7ff fe4f 	bl	80040e4 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004446:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	b29b      	uxth	r3, r3
 800444c:	b2db      	uxtb	r3, r3
 800444e:	733b      	strb	r3, [r7, #12]
 8004450:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004452:	b2db      	uxtb	r3, r3
 8004454:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	b29b      	uxth	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	723b      	strb	r3, [r7, #8]
 8004462:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004466:	b2db      	uxtb	r3, r3
 8004468:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	e02f      	b.n	80044d4 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	3b20      	subs	r3, #32
 800447a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4619      	mov	r1, r3
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	440b      	add	r3, r1
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	e015      	b.n	80044c2 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <ST7789_WriteChar+0xa8>
				uk = cdata;
 80044a6:	f107 030c 	add.w	r3, r7, #12
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	e002      	b.n	80044b4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80044b4:	2102      	movs	r1, #2
 80044b6:	6978      	ldr	r0, [r7, #20]
 80044b8:	f7ff fd24 	bl	8003f04 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	3301      	adds	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80044c6:	461a      	mov	r2, r3
 80044c8:	69bb      	ldr	r3, [r7, #24]
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d3e3      	bcc.n	8004496 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	3301      	adds	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80044d8:	461a      	mov	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4293      	cmp	r3, r2
 80044de:	d3c9      	bcc.n	8004474 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	3724      	adds	r7, #36	; 0x24
 80044e6:	46bd      	mov	sp, r7
 80044e8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80044ec:	b002      	add	sp, #8
 80044ee:	4770      	bx	lr

080044f0 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80044f0:	b082      	sub	sp, #8
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af04      	add	r7, sp, #16
 80044f8:	603a      	str	r2, [r7, #0]
 80044fa:	617b      	str	r3, [r7, #20]
 80044fc:	4603      	mov	r3, r0
 80044fe:	80fb      	strh	r3, [r7, #6]
 8004500:	460b      	mov	r3, r1
 8004502:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d03f      	beq.n	800458a <ST7789_WriteString+0x9a>

	while (*str) {
 800450a:	e039      	b.n	8004580 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 800450c:	88fb      	ldrh	r3, [r7, #6]
 800450e:	7d3a      	ldrb	r2, [r7, #20]
 8004510:	4413      	add	r3, r2
 8004512:	2bef      	cmp	r3, #239	; 0xef
 8004514:	dd13      	ble.n	800453e <ST7789_WriteString+0x4e>
			x = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800451a:	7d7b      	ldrb	r3, [r7, #21]
 800451c:	b29a      	uxth	r2, r3
 800451e:	88bb      	ldrh	r3, [r7, #4]
 8004520:	4413      	add	r3, r2
 8004522:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004524:	88bb      	ldrh	r3, [r7, #4]
 8004526:	7d7a      	ldrb	r2, [r7, #21]
 8004528:	4413      	add	r3, r2
 800452a:	2bef      	cmp	r3, #239	; 0xef
 800452c:	dc2f      	bgt.n	800458e <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b20      	cmp	r3, #32
 8004534:	d103      	bne.n	800453e <ST7789_WriteString+0x4e>
				str++;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	603b      	str	r3, [r7, #0]
				continue;
 800453c:	e020      	b.n	8004580 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b0a      	cmp	r3, #10
 8004544:	d012      	beq.n	800456c <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	781a      	ldrb	r2, [r3, #0]
 800454a:	88b9      	ldrh	r1, [r7, #4]
 800454c:	88f8      	ldrh	r0, [r7, #6]
 800454e:	8c3b      	ldrh	r3, [r7, #32]
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	8bbb      	ldrh	r3, [r7, #28]
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	f7ff ff53 	bl	8004406 <ST7789_WriteChar>
			x += font.width;
 8004560:	7d3b      	ldrb	r3, [r7, #20]
 8004562:	b29a      	uxth	r2, r3
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	4413      	add	r3, r2
 8004568:	80fb      	strh	r3, [r7, #6]
 800456a:	e006      	b.n	800457a <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004570:	7d7b      	ldrb	r3, [r7, #21]
 8004572:	b29a      	uxth	r2, r3
 8004574:	88bb      	ldrh	r3, [r7, #4]
 8004576:	4413      	add	r3, r2
 8004578:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1c1      	bne.n	800450c <ST7789_WriteString+0x1c>
 8004588:	e002      	b.n	8004590 <ST7789_WriteString+0xa0>
	if (!str) return;
 800458a:	bf00      	nop
 800458c:	e000      	b.n	8004590 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 800458e:	bf00      	nop
	}
}
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004598:	b002      	add	sp, #8
 800459a:	4770      	bx	lr

0800459c <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b0a4      	sub	sp, #144	; 0x90
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	f107 0310 	add.w	r3, r7, #16
 80045b0:	227c      	movs	r2, #124	; 0x7c
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f00d fb9f 	bl	8011cf8 <memset>

	memset(st, 0x20, 127);
 80045ba:	f107 030c 	add.w	r3, r7, #12
 80045be:	227f      	movs	r2, #127	; 0x7f
 80045c0:	2120      	movs	r1, #32
 80045c2:	4618      	mov	r0, r3
 80045c4:	f00d fb98 	bl	8011cf8 <memset>
	int8_t k = strlen(str);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fb fe01 	bl	80001d0 <strlen>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80045d4:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80045d8:	887b      	ldrh	r3, [r7, #2]
 80045da:	429a      	cmp	r2, r3
 80045dc:	da25      	bge.n	800462a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	0fda      	lsrs	r2, r3, #31
 80045e8:	4413      	add	r3, r2
 80045ea:	105b      	asrs	r3, r3, #1
 80045ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 80045f0:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80045f4:	f107 020c 	add.w	r2, r7, #12
 80045f8:	4413      	add	r3, r2
 80045fa:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4618      	mov	r0, r3
 8004602:	f00d fb6b 	bl	8011cdc <memcpy>
		st[k + n*2 + 1] = '\0';
 8004606:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800460a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4413      	add	r3, r2
 8004612:	3301      	adds	r3, #1
 8004614:	3390      	adds	r3, #144	; 0x90
 8004616:	443b      	add	r3, r7
 8004618:	2200      	movs	r2, #0
 800461a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800461e:	f107 030c 	add.w	r3, r7, #12
 8004622:	4619      	mov	r1, r3
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f00e f84e 	bl	80126c6 <strcpy>
	}

	return str;
 800462a:	687b      	ldr	r3, [r7, #4]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3790      	adds	r7, #144	; 0x90
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800463a:	2300      	movs	r3, #0
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_MspInit+0x74>)
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_MspInit+0x74>)
 8004644:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004648:	6453      	str	r3, [r2, #68]	; 0x44
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <HAL_MspInit+0x74>)
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004652:	607b      	str	r3, [r7, #4]
 8004654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_MspInit+0x74>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <HAL_MspInit+0x74>)
 8004660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004664:	6413      	str	r3, [r2, #64]	; 0x40
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <HAL_MspInit+0x74>)
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	210f      	movs	r1, #15
 8004676:	f06f 0001 	mvn.w	r0, #1
 800467a:	f005 fcfd 	bl	800a078 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800467e:	2200      	movs	r2, #0
 8004680:	2105      	movs	r1, #5
 8004682:	2005      	movs	r0, #5
 8004684:	f005 fcf8 	bl	800a078 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004688:	2005      	movs	r0, #5
 800468a:	f005 fd11 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800468e:	2200      	movs	r2, #0
 8004690:	2105      	movs	r1, #5
 8004692:	2005      	movs	r0, #5
 8004694:	f005 fcf0 	bl	800a078 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004698:	2005      	movs	r0, #5
 800469a:	f005 fd09 	bl	800a0b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800

080046ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a0c      	ldr	r2, [pc, #48]	; (80046f8 <HAL_RTC_MspInit+0x4c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d110      	bne.n	80046ee <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80046cc:	2302      	movs	r3, #2
 80046ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <HAL_RTC_MspInit+0x50>)
 80046d2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046d4:	f107 0308 	add.w	r3, r7, #8
 80046d8:	4618      	mov	r0, r3
 80046da:	f007 f8e7 	bl	800b8ac <HAL_RCCEx_PeriphCLKConfig>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 80046e4:	f7ff fbae 	bl	8003e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RTC_MspInit+0x54>)
 80046ea:	2201      	movs	r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40002800 	.word	0x40002800
 80046fc:	00190300 	.word	0x00190300
 8004700:	42470e3c 	.word	0x42470e3c

08004704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a39      	ldr	r2, [pc, #228]	; (8004808 <HAL_SPI_MspInit+0x104>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d16b      	bne.n	80047fe <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004726:	2300      	movs	r3, #0
 8004728:	613b      	str	r3, [r7, #16]
 800472a:	4b38      	ldr	r3, [pc, #224]	; (800480c <HAL_SPI_MspInit+0x108>)
 800472c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472e:	4a37      	ldr	r2, [pc, #220]	; (800480c <HAL_SPI_MspInit+0x108>)
 8004730:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004734:	6453      	str	r3, [r2, #68]	; 0x44
 8004736:	4b35      	ldr	r3, [pc, #212]	; (800480c <HAL_SPI_MspInit+0x108>)
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800473e:	613b      	str	r3, [r7, #16]
 8004740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	4b31      	ldr	r3, [pc, #196]	; (800480c <HAL_SPI_MspInit+0x108>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4a30      	ldr	r2, [pc, #192]	; (800480c <HAL_SPI_MspInit+0x108>)
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	6313      	str	r3, [r2, #48]	; 0x30
 8004752:	4b2e      	ldr	r3, [pc, #184]	; (800480c <HAL_SPI_MspInit+0x108>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800475e:	23a0      	movs	r3, #160	; 0xa0
 8004760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004762:	2302      	movs	r3, #2
 8004764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476a:	2303      	movs	r3, #3
 800476c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800476e:	2305      	movs	r3, #5
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	4619      	mov	r1, r3
 8004778:	4825      	ldr	r0, [pc, #148]	; (8004810 <HAL_SPI_MspInit+0x10c>)
 800477a:	f006 f8a9 	bl	800a8d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800477e:	4b25      	ldr	r3, [pc, #148]	; (8004814 <HAL_SPI_MspInit+0x110>)
 8004780:	4a25      	ldr	r2, [pc, #148]	; (8004818 <HAL_SPI_MspInit+0x114>)
 8004782:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004784:	4b23      	ldr	r3, [pc, #140]	; (8004814 <HAL_SPI_MspInit+0x110>)
 8004786:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800478a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_SPI_MspInit+0x110>)
 800478e:	2240      	movs	r2, #64	; 0x40
 8004790:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004792:	4b20      	ldr	r3, [pc, #128]	; (8004814 <HAL_SPI_MspInit+0x110>)
 8004794:	2200      	movs	r2, #0
 8004796:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004798:	4b1e      	ldr	r3, [pc, #120]	; (8004814 <HAL_SPI_MspInit+0x110>)
 800479a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800479e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80047a0:	4b1c      	ldr	r3, [pc, #112]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80047b2:	4b18      	ldr	r3, [pc, #96]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80047b8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047ba:	4b16      	ldr	r3, [pc, #88]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047bc:	2204      	movs	r2, #4
 80047be:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047c2:	2203      	movs	r2, #3
 80047c4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80047c6:	4b13      	ldr	r3, [pc, #76]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80047d2:	4810      	ldr	r0, [pc, #64]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047d4:	f005 fc7a 	bl	800a0cc <HAL_DMA_Init>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80047de:	f7ff fb31 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a0b      	ldr	r2, [pc, #44]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047e6:	649a      	str	r2, [r3, #72]	; 0x48
 80047e8:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <HAL_SPI_MspInit+0x110>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80047ee:	2200      	movs	r2, #0
 80047f0:	2102      	movs	r1, #2
 80047f2:	2023      	movs	r0, #35	; 0x23
 80047f4:	f005 fc40 	bl	800a078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80047f8:	2023      	movs	r0, #35	; 0x23
 80047fa:	f005 fc59 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80047fe:	bf00      	nop
 8004800:	3728      	adds	r7, #40	; 0x28
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	40013000 	.word	0x40013000
 800480c:	40023800 	.word	0x40023800
 8004810:	40020000 	.word	0x40020000
 8004814:	200002d8 	.word	0x200002d8
 8004818:	40026458 	.word	0x40026458

0800481c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d115      	bne.n	800485a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <HAL_TIM_Base_MspInit+0x48>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	4a0b      	ldr	r2, [pc, #44]	; (8004864 <HAL_TIM_Base_MspInit+0x48>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	6413      	str	r3, [r2, #64]	; 0x40
 800483e:	4b09      	ldr	r3, [pc, #36]	; (8004864 <HAL_TIM_Base_MspInit+0x48>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800484a:	2200      	movs	r2, #0
 800484c:	2101      	movs	r1, #1
 800484e:	201c      	movs	r0, #28
 8004850:	f005 fc12 	bl	800a078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004854:	201c      	movs	r0, #28
 8004856:	f005 fc2b 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800485a:	bf00      	nop
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	40023800 	.word	0x40023800

08004868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08a      	sub	sp, #40	; 0x28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	f107 0314 	add.w	r3, r7, #20
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a35      	ldr	r2, [pc, #212]	; (800495c <HAL_UART_MspInit+0xf4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d163      	bne.n	8004952 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	4b34      	ldr	r3, [pc, #208]	; (8004960 <HAL_UART_MspInit+0xf8>)
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	4a33      	ldr	r2, [pc, #204]	; (8004960 <HAL_UART_MspInit+0xf8>)
 8004894:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004898:	6413      	str	r3, [r2, #64]	; 0x40
 800489a:	4b31      	ldr	r3, [pc, #196]	; (8004960 <HAL_UART_MspInit+0xf8>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	4b2d      	ldr	r3, [pc, #180]	; (8004960 <HAL_UART_MspInit+0xf8>)
 80048ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ae:	4a2c      	ldr	r2, [pc, #176]	; (8004960 <HAL_UART_MspInit+0xf8>)
 80048b0:	f043 0302 	orr.w	r3, r3, #2
 80048b4:	6313      	str	r3, [r2, #48]	; 0x30
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <HAL_UART_MspInit+0xf8>)
 80048b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80048c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048c8:	2302      	movs	r3, #2
 80048ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048d0:	2303      	movs	r3, #3
 80048d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80048d4:	2307      	movs	r3, #7
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048d8:	f107 0314 	add.w	r3, r7, #20
 80048dc:	4619      	mov	r1, r3
 80048de:	4821      	ldr	r0, [pc, #132]	; (8004964 <HAL_UART_MspInit+0xfc>)
 80048e0:	f005 fff6 	bl	800a8d0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_UART_MspInit+0x100>)
 80048e6:	4a21      	ldr	r2, [pc, #132]	; (800496c <HAL_UART_MspInit+0x104>)
 80048e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80048ea:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <HAL_UART_MspInit+0x100>)
 80048ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80048f0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048f2:	4b1d      	ldr	r3, [pc, #116]	; (8004968 <HAL_UART_MspInit+0x100>)
 80048f4:	2240      	movs	r2, #64	; 0x40
 80048f6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <HAL_UART_MspInit+0x100>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <HAL_UART_MspInit+0x100>)
 8004900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004904:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004906:	4b18      	ldr	r3, [pc, #96]	; (8004968 <HAL_UART_MspInit+0x100>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800490c:	4b16      	ldr	r3, [pc, #88]	; (8004968 <HAL_UART_MspInit+0x100>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_UART_MspInit+0x100>)
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_UART_MspInit+0x100>)
 800491a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800491e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004920:	4b11      	ldr	r3, [pc, #68]	; (8004968 <HAL_UART_MspInit+0x100>)
 8004922:	2200      	movs	r2, #0
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004926:	4810      	ldr	r0, [pc, #64]	; (8004968 <HAL_UART_MspInit+0x100>)
 8004928:	f005 fbd0 	bl	800a0cc <HAL_DMA_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004932:	f7ff fa87 	bl	8003e44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <HAL_UART_MspInit+0x100>)
 800493a:	635a      	str	r2, [r3, #52]	; 0x34
 800493c:	4a0a      	ldr	r2, [pc, #40]	; (8004968 <HAL_UART_MspInit+0x100>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2105      	movs	r1, #5
 8004946:	2027      	movs	r0, #39	; 0x27
 8004948:	f005 fb96 	bl	800a078 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800494c:	2027      	movs	r0, #39	; 0x27
 800494e:	f005 fbaf 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004952:	bf00      	nop
 8004954:	3728      	adds	r7, #40	; 0x28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40004800 	.word	0x40004800
 8004960:	40023800 	.word	0x40023800
 8004964:	40020400 	.word	0x40020400
 8004968:	200003c4 	.word	0x200003c4
 800496c:	40026058 	.word	0x40026058

08004970 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004984:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_FSMC_MspInit+0x98>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d139      	bne.n	8004a00 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 800498c:	4b1e      	ldr	r3, [pc, #120]	; (8004a08 <HAL_FSMC_MspInit+0x98>)
 800498e:	2201      	movs	r2, #1
 8004990:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4b1d      	ldr	r3, [pc, #116]	; (8004a0c <HAL_FSMC_MspInit+0x9c>)
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4a1c      	ldr	r2, [pc, #112]	; (8004a0c <HAL_FSMC_MspInit+0x9c>)
 800499c:	f043 0301 	orr.w	r3, r3, #1
 80049a0:	6393      	str	r3, [r2, #56]	; 0x38
 80049a2:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <HAL_FSMC_MspInit+0x9c>)
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80049ae:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80049b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b4:	2302      	movs	r3, #2
 80049b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049bc:	2303      	movs	r3, #3
 80049be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80049c0:	230c      	movs	r3, #12
 80049c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049c4:	1d3b      	adds	r3, r7, #4
 80049c6:	4619      	mov	r1, r3
 80049c8:	4811      	ldr	r0, [pc, #68]	; (8004a10 <HAL_FSMC_MspInit+0xa0>)
 80049ca:	f005 ff81 	bl	800a8d0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80049ce:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 80049d2:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d4:	2302      	movs	r3, #2
 80049d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049dc:	2303      	movs	r3, #3
 80049de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80049e0:	230c      	movs	r3, #12
 80049e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80049e4:	1d3b      	adds	r3, r7, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	480a      	ldr	r0, [pc, #40]	; (8004a14 <HAL_FSMC_MspInit+0xa4>)
 80049ea:	f005 ff71 	bl	800a8d0 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 80049ee:	2200      	movs	r2, #0
 80049f0:	2105      	movs	r1, #5
 80049f2:	2030      	movs	r0, #48	; 0x30
 80049f4:	f005 fb40 	bl	800a078 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 80049f8:	2030      	movs	r0, #48	; 0x30
 80049fa:	f005 fb59 	bl	800a0b0 <HAL_NVIC_EnableIRQ>
 80049fe:	e000      	b.n	8004a02 <HAL_FSMC_MspInit+0x92>
    return;
 8004a00:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20002cd0 	.word	0x20002cd0
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	40021000 	.word	0x40021000
 8004a14:	40020c00 	.word	0x40020c00

08004a18 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004a20:	f7ff ffa6 	bl	8004970 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004a24:	bf00      	nop
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08c      	sub	sp, #48	; 0x30
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a34:	2300      	movs	r3, #0
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	2019      	movs	r0, #25
 8004a42:	f005 fb19 	bl	800a078 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004a46:	2019      	movs	r0, #25
 8004a48:	f005 fb32 	bl	800a0b0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	4b1f      	ldr	r3, [pc, #124]	; (8004ad0 <HAL_InitTick+0xa4>)
 8004a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <HAL_InitTick+0xa4>)
 8004a56:	f043 0301 	orr.w	r3, r3, #1
 8004a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8004a5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_InitTick+0xa4>)
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a68:	f107 0210 	add.w	r2, r7, #16
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f006 fee8 	bl	800b848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004a78:	f006 fed2 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <HAL_InitTick+0xa8>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	0c9b      	lsrs	r3, r3, #18
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004a90:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_InitTick+0xac>)
 8004a92:	4a12      	ldr	r2, [pc, #72]	; (8004adc <HAL_InitTick+0xb0>)
 8004a94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <HAL_InitTick+0xac>)
 8004a98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a9c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004a9e:	4a0e      	ldr	r2, [pc, #56]	; (8004ad8 <HAL_InitTick+0xac>)
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004aa4:	4b0c      	ldr	r3, [pc, #48]	; (8004ad8 <HAL_InitTick+0xac>)
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_InitTick+0xac>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004ab0:	4809      	ldr	r0, [pc, #36]	; (8004ad8 <HAL_InitTick+0xac>)
 8004ab2:	f007 ffcb 	bl	800ca4c <HAL_TIM_Base_Init>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d104      	bne.n	8004ac6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004abc:	4806      	ldr	r0, [pc, #24]	; (8004ad8 <HAL_InitTick+0xac>)
 8004abe:	f008 f815 	bl	800caec <HAL_TIM_Base_Start_IT>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	e000      	b.n	8004ac8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3730      	adds	r7, #48	; 0x30
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	431bde83 	.word	0x431bde83
 8004ad8:	20002cd4 	.word	0x20002cd4
 8004adc:	40010000 	.word	0x40010000

08004ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004ae4:	bf00      	nop
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004aee:	b480      	push	{r7}
 8004af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004af2:	e7fe      	b.n	8004af2 <HardFault_Handler+0x4>

08004af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004af8:	e7fe      	b.n	8004af8 <MemManage_Handler+0x4>

08004afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004afe:	e7fe      	b.n	8004afe <BusFault_Handler+0x4>

08004b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b04:	e7fe      	b.n	8004b04 <UsageFault_Handler+0x4>

08004b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b06:	b480      	push	{r7}
 8004b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004b28:	4802      	ldr	r0, [pc, #8]	; (8004b34 <DMA1_Stream3_IRQHandler+0x10>)
 8004b2a:	f005 fc67 	bl	800a3fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	200003c4 	.word	0x200003c4

08004b38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b3c:	4802      	ldr	r0, [pc, #8]	; (8004b48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004b3e:	f008 f845 	bl	800cbcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20002cd4 	.word	0x20002cd4

08004b4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b50:	4802      	ldr	r0, [pc, #8]	; (8004b5c <TIM2_IRQHandler+0x10>)
 8004b52:	f008 f83b 	bl	800cbcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b56:	bf00      	nop
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20000338 	.word	0x20000338

08004b60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004b64:	4802      	ldr	r0, [pc, #8]	; (8004b70 <SPI1_IRQHandler+0x10>)
 8004b66:	f007 fcfd 	bl	800c564 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000280 	.word	0x20000280

08004b74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <USART3_IRQHandler+0x10>)
 8004b7a:	f008 fce5 	bl	800d548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000380 	.word	0x20000380

08004b88 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <FSMC_IRQHandler+0x10>)
 8004b8e:	f006 f8bc 	bl	800ad0a <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000424 	.word	0x20000424

08004b9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <DMA2_Stream3_IRQHandler+0x10>)
 8004ba2:	f005 fc2b 	bl	800a3fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200002d8 	.word	0x200002d8

08004bb0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
	return 1;
 8004bb4:	2301      	movs	r3, #1
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <_kill>:

int _kill(int pid, int sig)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004bca:	f00c fe95 	bl	80118f8 <__errno>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2216      	movs	r2, #22
 8004bd2:	601a      	str	r2, [r3, #0]
	return -1;
 8004bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <_exit>:

void _exit (int status)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004be8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ffe7 	bl	8004bc0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004bf2:	e7fe      	b.n	8004bf2 <_exit+0x12>

08004bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
 8004c04:	e00a      	b.n	8004c1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c06:	f3af 8000 	nop.w
 8004c0a:	4601      	mov	r1, r0
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	60ba      	str	r2, [r7, #8]
 8004c12:	b2ca      	uxtb	r2, r1
 8004c14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	dbf0      	blt.n	8004c06 <_read+0x12>
	}

return len;
 8004c24:	687b      	ldr	r3, [r7, #4]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
	return -1;
 8004c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
 8004c4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c56:	605a      	str	r2, [r3, #4]
	return 0;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	370c      	adds	r7, #12
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr

08004c66 <_isatty>:

int _isatty(int file)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b083      	sub	sp, #12
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
	return 1;
 8004c6e:	2301      	movs	r3, #1
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	return 0;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <_sbrk+0x5c>)
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <_sbrk+0x60>)
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <_sbrk+0x64>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d102      	bne.n	8004cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <_sbrk+0x64>)
 8004cb6:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <_sbrk+0x68>)
 8004cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <_sbrk+0x64>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d207      	bcs.n	8004cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004cc8:	f00c fe16 	bl	80118f8 <__errno>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	220c      	movs	r2, #12
 8004cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd6:	e009      	b.n	8004cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cd8:	4b08      	ldr	r3, [pc, #32]	; (8004cfc <_sbrk+0x64>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cde:	4b07      	ldr	r3, [pc, #28]	; (8004cfc <_sbrk+0x64>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	4a05      	ldr	r2, [pc, #20]	; (8004cfc <_sbrk+0x64>)
 8004ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004cea:	68fb      	ldr	r3, [r7, #12]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20020000 	.word	0x20020000
 8004cf8:	00001000 	.word	0x00001000
 8004cfc:	20002d1c 	.word	0x20002d1c
 8004d00:	20008408 	.word	0x20008408

08004d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d08:	4b08      	ldr	r3, [pc, #32]	; (8004d2c <SystemInit+0x28>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <SystemInit+0x28>)
 8004d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <SystemInit+0x28>)
 8004d1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d1e:	609a      	str	r2, [r3, #8]
#endif
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <_fs_flash_read>:
/param: Number bytes to read
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_read(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, void *buffer, lfs_size_t size)
{
 8004d30:	b590      	push	{r4, r7, lr}
 8004d32:	b087      	sub	sp, #28
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
    assert(off  % cfg->read_size == 0);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	695a      	ldr	r2, [r3, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d48:	fb01 f202 	mul.w	r2, r1, r2
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <_fs_flash_read+0x2e>
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <_fs_flash_read+0x98>)
 8004d54:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <_fs_flash_read+0x9c>)
 8004d56:	2121      	movs	r1, #33	; 0x21
 8004d58:	481d      	ldr	r0, [pc, #116]	; (8004dd0 <_fs_flash_read+0xa0>)
 8004d5a:	f00c fdab 	bl	80118b4 <__assert_func>
    assert(size % cfg->read_size == 0);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004d68:	fb01 f202 	mul.w	r2, r1, r2
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <_fs_flash_read+0x4e>
 8004d72:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <_fs_flash_read+0xa4>)
 8004d74:	4a15      	ldr	r2, [pc, #84]	; (8004dcc <_fs_flash_read+0x9c>)
 8004d76:	2122      	movs	r1, #34	; 0x22
 8004d78:	4815      	ldr	r0, [pc, #84]	; (8004dd0 <_fs_flash_read+0xa0>)
 8004d7a:	f00c fd9b 	bl	80118b4 <__assert_func>
    assert(block < cfg->block_count);   
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d305      	bcc.n	8004d94 <_fs_flash_read+0x64>
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <_fs_flash_read+0xa8>)
 8004d8a:	4a10      	ldr	r2, [pc, #64]	; (8004dcc <_fs_flash_read+0x9c>)
 8004d8c:	2123      	movs	r1, #35	; 0x23
 8004d8e:	4810      	ldr	r0, [pc, #64]	; (8004dd0 <_fs_flash_read+0xa0>)
 8004d90:	f00c fd90 	bl	80118b4 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 8004d94:	f7fb fff6 	bl	8000d84 <io_nand_get_block_size>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	fb03 f402 	mul.w	r4, r3, r2
 8004da0:	f7fb ffd8 	bl	8000d54 <io_nand_get_page_size>
 8004da4:	4602      	mov	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dac:	4423      	add	r3, r4
 8004dae:	617b      	str	r3, [r7, #20]
    io_nand_read(addr, (uint8_t*) buffer, size, 0);
 8004db0:	2300      	movs	r3, #0
 8004db2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f7fc fd8a 	bl	80018d0 <io_nand_read>

    return 0;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	371c      	adds	r7, #28
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd90      	pop	{r4, r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	0801397c 	.word	0x0801397c
 8004dcc:	08016c54 	.word	0x08016c54
 8004dd0:	08013998 	.word	0x08013998
 8004dd4:	080139b0 	.word	0x080139b0
 8004dd8:	080139cc 	.word	0x080139cc

08004ddc <_fs_flash_prog>:
/param: Number bytes to write
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_prog(  const struct lfs_config *cfg, lfs_block_t block,
                    lfs_off_t off, const void *buffer, lfs_size_t size)
{
 8004ddc:	b590      	push	{r4, r7, lr}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]

    assert(off  % cfg->prog_size == 0);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	699a      	ldr	r2, [r3, #24]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004df4:	fb01 f202 	mul.w	r2, r1, r2
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <_fs_flash_prog+0x2e>
 8004dfe:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <_fs_flash_prog+0x98>)
 8004e00:	4a1d      	ldr	r2, [pc, #116]	; (8004e78 <_fs_flash_prog+0x9c>)
 8004e02:	2138      	movs	r1, #56	; 0x38
 8004e04:	481d      	ldr	r0, [pc, #116]	; (8004e7c <_fs_flash_prog+0xa0>)
 8004e06:	f00c fd55 	bl	80118b4 <__assert_func>
    assert(size % cfg->prog_size == 0);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699a      	ldr	r2, [r3, #24]
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e14:	fb01 f202 	mul.w	r2, r1, r2
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <_fs_flash_prog+0x4e>
 8004e1e:	4b18      	ldr	r3, [pc, #96]	; (8004e80 <_fs_flash_prog+0xa4>)
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <_fs_flash_prog+0x9c>)
 8004e22:	2139      	movs	r1, #57	; 0x39
 8004e24:	4815      	ldr	r0, [pc, #84]	; (8004e7c <_fs_flash_prog+0xa0>)
 8004e26:	f00c fd45 	bl	80118b4 <__assert_func>
    assert(block < cfg->block_count);  
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d305      	bcc.n	8004e40 <_fs_flash_prog+0x64>
 8004e34:	4b13      	ldr	r3, [pc, #76]	; (8004e84 <_fs_flash_prog+0xa8>)
 8004e36:	4a10      	ldr	r2, [pc, #64]	; (8004e78 <_fs_flash_prog+0x9c>)
 8004e38:	213a      	movs	r1, #58	; 0x3a
 8004e3a:	4810      	ldr	r0, [pc, #64]	; (8004e7c <_fs_flash_prog+0xa0>)
 8004e3c:	f00c fd3a 	bl	80118b4 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size() + off / io_nand_get_page_size();
 8004e40:	f7fb ffa0 	bl	8000d84 <io_nand_get_block_size>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	fb03 f402 	mul.w	r4, r3, r2
 8004e4c:	f7fb ff82 	bl	8000d54 <io_nand_get_page_size>
 8004e50:	4602      	mov	r2, r0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e58:	4423      	add	r3, r4
 8004e5a:	617b      	str	r3, [r7, #20]
    io_nand_write(addr, (uint8_t*) buffer, size, 0);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6978      	ldr	r0, [r7, #20]
 8004e64:	f7fc fd52 	bl	800190c <io_nand_write>
  
    return 0;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd90      	pop	{r4, r7, pc}
 8004e72:	bf00      	nop
 8004e74:	080139e8 	.word	0x080139e8
 8004e78:	08016c64 	.word	0x08016c64
 8004e7c:	08013998 	.word	0x08013998
 8004e80:	08013a04 	.word	0x08013a04
 8004e84:	080139cc 	.word	0x080139cc

08004e88 <_fs_flash_erase>:
/param: Pointer to lfs config
/param: Number block
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_erase(const struct lfs_config *cfg, lfs_block_t block)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
    assert(block < cfg->block_count);  
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d305      	bcc.n	8004ea8 <_fs_flash_erase+0x20>
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <_fs_flash_erase+0x40>)
 8004e9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <_fs_flash_erase+0x44>)
 8004ea0:	214a      	movs	r1, #74	; 0x4a
 8004ea2:	480b      	ldr	r0, [pc, #44]	; (8004ed0 <_fs_flash_erase+0x48>)
 8004ea4:	f00c fd06 	bl	80118b4 <__assert_func>

    uint32_t addr = block * io_nand_get_block_size();
 8004ea8:	f7fb ff6c 	bl	8000d84 <io_nand_get_block_size>
 8004eac:	4602      	mov	r2, r0
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	fb02 f303 	mul.w	r3, r2, r3
 8004eb4:	60fb      	str	r3, [r7, #12]
    io_nand_block_erase(addr);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f7fc fd46 	bl	8001948 <io_nand_block_erase>

    return 0;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	080139cc 	.word	0x080139cc
 8004ecc:	08016c74 	.word	0x08016c74
 8004ed0:	08013998 	.word	0x08013998

08004ed4 <_fs_flash_sync>:
/brief: Sync data
/param: Pointer to lfs config
/return: 0 if all ok
-----------------------------------------------------------*/
int _fs_flash_sync(const struct lfs_config *c)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
    return 0;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <io_fs_init>:
/brief: Init FS
/param:
/return: 0 if all ok
-----------------------------------------------------------*/
int io_fs_init(void)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
    uint32_t page_size = io_nand_get_page_size();
 8004ef2:	f7fb ff2f 	bl	8000d54 <io_nand_get_page_size>
 8004ef6:	6078      	str	r0, [r7, #4]

    _lfs_config.read_size   = page_size;
 8004ef8:	4a19      	ldr	r2, [pc, #100]	; (8004f60 <io_fs_init+0x74>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6153      	str	r3, [r2, #20]
    _lfs_config.prog_size   = page_size;
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <io_fs_init+0x74>)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6193      	str	r3, [r2, #24]
    
    _lfs_config.block_size  = io_nand_get_block_size() * page_size;
 8004f04:	f7fb ff3e 	bl	8000d84 <io_nand_get_block_size>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	fb02 f303 	mul.w	r3, r2, r3
 8004f10:	4a13      	ldr	r2, [pc, #76]	; (8004f60 <io_fs_init+0x74>)
 8004f12:	61d3      	str	r3, [r2, #28]
    _lfs_config.block_count = io_nand_get_block_number();
 8004f14:	f7fb ff2a 	bl	8000d6c <io_nand_get_block_number>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4a11      	ldr	r2, [pc, #68]	; (8004f60 <io_fs_init+0x74>)
 8004f1c:	6213      	str	r3, [r2, #32]
    
    _lfs_config.block_cycles = 100;
 8004f1e:	4b10      	ldr	r3, [pc, #64]	; (8004f60 <io_fs_init+0x74>)
 8004f20:	2264      	movs	r2, #100	; 0x64
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24
    _lfs_config.lookahead_size = page_size;
 8004f24:	4a0e      	ldr	r2, [pc, #56]	; (8004f60 <io_fs_init+0x74>)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	62d3      	str	r3, [r2, #44]	; 0x2c
    _lfs_config.cache_size     = page_size;
 8004f2a:	4a0d      	ldr	r2, [pc, #52]	; (8004f60 <io_fs_init+0x74>)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6293      	str	r3, [r2, #40]	; 0x28
    
    _lfs_config.read_buffer = _rd;
 8004f30:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <io_fs_init+0x74>)
 8004f32:	4a0c      	ldr	r2, [pc, #48]	; (8004f64 <io_fs_init+0x78>)
 8004f34:	631a      	str	r2, [r3, #48]	; 0x30
    _lfs_config.prog_buffer = _wr;
 8004f36:	4b0a      	ldr	r3, [pc, #40]	; (8004f60 <io_fs_init+0x74>)
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <io_fs_init+0x7c>)
 8004f3a:	635a      	str	r2, [r3, #52]	; 0x34

    _lfs_config.read   = _fs_flash_read;
 8004f3c:	4b08      	ldr	r3, [pc, #32]	; (8004f60 <io_fs_init+0x74>)
 8004f3e:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <io_fs_init+0x80>)
 8004f40:	605a      	str	r2, [r3, #4]
    _lfs_config.prog   = _fs_flash_prog;
 8004f42:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <io_fs_init+0x74>)
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <io_fs_init+0x84>)
 8004f46:	609a      	str	r2, [r3, #8]
    _lfs_config.erase  = _fs_flash_erase;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <io_fs_init+0x74>)
 8004f4a:	4a0a      	ldr	r2, [pc, #40]	; (8004f74 <io_fs_init+0x88>)
 8004f4c:	60da      	str	r2, [r3, #12]
    _lfs_config.sync   = _fs_flash_sync;
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <io_fs_init+0x74>)
 8004f50:	4a09      	ldr	r2, [pc, #36]	; (8004f78 <io_fs_init+0x8c>)
 8004f52:	611a      	str	r2, [r3, #16]

    return 0;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	20002d98 	.word	0x20002d98
 8004f64:	20002de0 	.word	0x20002de0
 8004f68:	200035e0 	.word	0x200035e0
 8004f6c:	08004d31 	.word	0x08004d31
 8004f70:	08004ddd 	.word	0x08004ddd
 8004f74:	08004e89 	.word	0x08004e89
 8004f78:	08004ed5 	.word	0x08004ed5

08004f7c <io_fs_format>:
/brief: Format a block device with the FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_format(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
    return lfs_format(&_lfs, &_lfs_config);
 8004f80:	4903      	ldr	r1, [pc, #12]	; (8004f90 <io_fs_format+0x14>)
 8004f82:	4804      	ldr	r0, [pc, #16]	; (8004f94 <io_fs_format+0x18>)
 8004f84:	f004 f9ae 	bl	80092e4 <lfs_format>
 8004f88:	4603      	mov	r3, r0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20002d98 	.word	0x20002d98
 8004f94:	20002d20 	.word	0x20002d20

08004f98 <io_fs_mount>:
/brief: Mount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_mount(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
    return lfs_mount(&_lfs, &_lfs_config);
 8004f9c:	4903      	ldr	r1, [pc, #12]	; (8004fac <io_fs_mount+0x14>)
 8004f9e:	4804      	ldr	r0, [pc, #16]	; (8004fb0 <io_fs_mount+0x18>)
 8004fa0:	f004 fa52 	bl	8009448 <lfs_mount>
 8004fa4:	4603      	mov	r3, r0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20002d98 	.word	0x20002d98
 8004fb0:	20002d20 	.word	0x20002d20

08004fb4 <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 8004fb8:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <io_fs_unmount+0x10>)
 8004fba:	f004 fbad 	bl	8009718 <lfs_unmount>
 8004fbe:	4603      	mov	r3, r0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20002d20 	.word	0x20002d20

08004fc8 <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	bf38      	it	cc
 8004fda:	4613      	movcc	r3, r2
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	bf28      	it	cs
 8004ffa:	4613      	movcs	r3, r2
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	fbb3 f2f2 	udiv	r2, r3, r2
 800501a:	6839      	ldr	r1, [r7, #0]
 800501c:	fb01 f202 	mul.w	r2, r1, r2
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	1ad3      	subs	r3, r2, r3
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	4413      	add	r3, r2
 8005042:	3b01      	subs	r3, #1
 8005044:	6839      	ldr	r1, [r7, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f7ff ffde 	bl	8005008 <lfs_aligndown>
 800504c:	4603      	mov	r3, r0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <lfs_npw2>:

// Find the next smallest power of 2 less than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3b01      	subs	r3, #1
 8005062:	fab3 f383 	clz	r3, r3
 8005066:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800506a:	4618      	mov	r0, r3
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 8005088:	4618      	mov	r0, r3
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f7fb fc5d 	bl	800095c <__popcountsi2>
 80050a2:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	1ad3      	subs	r3, r2, r3
}
 80050bc:	4618      	mov	r0, r3
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 80050d0:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7ff ffee 	bl	80050c8 <lfs_fromle32>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 8005102:	4618      	mov	r0, r3
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800510e:	b580      	push	{r7, lr}
 8005110:	b082      	sub	sp, #8
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff ffed 	bl	80050f6 <lfs_frombe32>
 800511c:	4603      	mov	r3, r0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}

08005126 <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f00c fdc4 	bl	8011cbc <malloc>
 8005134:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f00c fdc0 	bl	8011ccc <free>
#else
    (void)p;
#endif
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <lfs_cache_drop>:

#define LFS_BLOCK_NULL ((lfs_block_t)-1)
#define LFS_BLOCK_INLINE ((lfs_block_t)-2)

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005164:	601a      	str	r2, [r3, #0]
}
 8005166:	bf00      	nop
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68d8      	ldr	r0, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005186:	461a      	mov	r2, r3
 8005188:	21ff      	movs	r1, #255	; 0xff
 800518a:	f00c fdb5 	bl	8011cf8 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005194:	601a      	str	r2, [r3, #0]
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 80051a0:	b5b0      	push	{r4, r5, r7, lr}
 80051a2:	b08a      	sub	sp, #40	; 0x28
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 80051b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b8:	d105      	bne.n	80051c6 <lfs_bd_read+0x26>
 80051ba:	4b7c      	ldr	r3, [pc, #496]	; (80053ac <lfs_bd_read+0x20c>)
 80051bc:	4a7c      	ldr	r2, [pc, #496]	; (80053b0 <lfs_bd_read+0x210>)
 80051be:	2122      	movs	r1, #34	; 0x22
 80051c0:	487c      	ldr	r0, [pc, #496]	; (80053b4 <lfs_bd_read+0x214>)
 80051c2:	f00c fb77 	bl	80118b4 <__assert_func>
    if (off+size > lfs->cfg->block_size) {
 80051c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f240 80e0 	bls.w	8005398 <lfs_bd_read+0x1f8>
        return LFS_ERR_CORRUPT;
 80051d8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80051dc:	e0e1      	b.n	80053a2 <lfs_bd_read+0x202>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80051de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e0:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d03f      	beq.n	8005268 <lfs_bd_read+0xc8>
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d13a      	bne.n	8005268 <lfs_bd_read+0xc8>
                off < pcache->off + pcache->size) {
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 80051fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051fe:	429a      	cmp	r2, r3
 8005200:	d232      	bcs.n	8005268 <lfs_bd_read+0xc8>
            if (off >= pcache->off) {
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005208:	429a      	cmp	r2, r3
 800520a:	d324      	bcc.n	8005256 <lfs_bd_read+0xb6>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	6859      	ldr	r1, [r3, #4]
 8005214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005216:	1acb      	subs	r3, r1, r3
 8005218:	4413      	add	r3, r2
 800521a:	4619      	mov	r1, r3
 800521c:	69b8      	ldr	r0, [r7, #24]
 800521e:	f7ff fee3 	bl	8004fe8 <lfs_min>
 8005222:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800522e:	1acb      	subs	r3, r1, r3
 8005230:	4413      	add	r3, r2
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4619      	mov	r1, r3
 8005236:	69f8      	ldr	r0, [r7, #28]
 8005238:	f00c fd50 	bl	8011cdc <memcpy>

                data += diff;
 800523c:	69fa      	ldr	r2, [r7, #28]
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	4413      	add	r3, r2
 8005242:	61fb      	str	r3, [r7, #28]
                off += diff;
 8005244:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	4413      	add	r3, r2
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800524c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8005254:	e0a0      	b.n	8005398 <lfs_bd_read+0x1f8>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	4619      	mov	r1, r3
 8005260:	69b8      	ldr	r0, [r7, #24]
 8005262:	f7ff fec1 	bl	8004fe8 <lfs_min>
 8005266:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800526e:	429a      	cmp	r2, r3
 8005270:	d13a      	bne.n	80052e8 <lfs_bd_read+0x148>
                off < rcache->off + rcache->size) {
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	4413      	add	r3, r2
        if (block == rcache->block &&
 800527c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800527e:	429a      	cmp	r2, r3
 8005280:	d232      	bcs.n	80052e8 <lfs_bd_read+0x148>
            if (off >= rcache->off) {
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005288:	429a      	cmp	r2, r3
 800528a:	d324      	bcc.n	80052d6 <lfs_bd_read+0x136>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005296:	1acb      	subs	r3, r1, r3
 8005298:	4413      	add	r3, r2
 800529a:	4619      	mov	r1, r3
 800529c:	69b8      	ldr	r0, [r7, #24]
 800529e:	f7ff fea3 	bl	8004fe8 <lfs_min>
 80052a2:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052ae:	1acb      	subs	r3, r1, r3
 80052b0:	4413      	add	r3, r2
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4619      	mov	r1, r3
 80052b6:	69f8      	ldr	r0, [r7, #28]
 80052b8:	f00c fd10 	bl	8011cdc <memcpy>

                data += diff;
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	4413      	add	r3, r2
 80052c2:	61fb      	str	r3, [r7, #28]
                off += diff;
 80052c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	4413      	add	r3, r2
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80052cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80052d4:	e060      	b.n	8005398 <lfs_bd_read+0x1f8>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	69b8      	ldr	r0, [r7, #24]
 80052e2:	f7ff fe81 	bl	8004fe8 <lfs_min>
 80052e6:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d305      	bcc.n	8005300 <lfs_bd_read+0x160>
 80052f4:	4b30      	ldr	r3, [pc, #192]	; (80053b8 <lfs_bd_read+0x218>)
 80052f6:	4a2e      	ldr	r2, [pc, #184]	; (80053b0 <lfs_bd_read+0x210>)
 80052f8:	214d      	movs	r1, #77	; 0x4d
 80052fa:	482e      	ldr	r0, [pc, #184]	; (80053b4 <lfs_bd_read+0x214>)
 80052fc:	f00c fada 	bl	80118b4 <__assert_func>
        rcache->block = block;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005304:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4619      	mov	r1, r3
 800530e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005310:	f7ff fe7a 	bl	8005008 <lfs_aligndown>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800531a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	4619      	mov	r1, r3
 8005328:	4610      	mov	r0, r2
 800532a:	f7ff fe82 	bl	8005032 <lfs_alignup>
 800532e:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                lfs_min(
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	4619      	mov	r1, r3
 8005338:	4610      	mov	r0, r2
 800533a:	f7ff fe55 	bl	8004fe8 <lfs_min>
 800533e:	4602      	mov	r2, r0
                - rcache->off,
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 8005344:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7ff fe4a 	bl	8004fe8 <lfs_min>
 8005354:	4602      	mov	r2, r0
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800535e:	685c      	ldr	r4, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	462b      	mov	r3, r5
 8005378:	47a0      	blx	r4
 800537a:	6178      	str	r0, [r7, #20]
        LFS_ASSERT(err <= 0);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	dd05      	ble.n	800538e <lfs_bd_read+0x1ee>
 8005382:	4b0e      	ldr	r3, [pc, #56]	; (80053bc <lfs_bd_read+0x21c>)
 8005384:	4a0a      	ldr	r2, [pc, #40]	; (80053b0 <lfs_bd_read+0x210>)
 8005386:	2158      	movs	r1, #88	; 0x58
 8005388:	480a      	ldr	r0, [pc, #40]	; (80053b4 <lfs_bd_read+0x214>)
 800538a:	f00c fa93 	bl	80118b4 <__assert_func>
        if (err) {
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <lfs_bd_read+0x1f8>
            return err;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	e004      	b.n	80053a2 <lfs_bd_read+0x202>
    while (size > 0) {
 8005398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800539a:	2b00      	cmp	r3, #0
 800539c:	f47f af1f 	bne.w	80051de <lfs_bd_read+0x3e>
        }
    }

    return 0;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bdb0      	pop	{r4, r5, r7, pc}
 80053aa:	bf00      	nop
 80053ac:	08013a20 	.word	0x08013a20
 80053b0:	08016c84 	.word	0x08016c84
 80053b4:	08013a3c 	.word	0x08013a3c
 80053b8:	08013a54 	.word	0x08013a54
 80053bc:	08013a74 	.word	0x08013a74

080053c0 <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af04      	add	r7, sp, #16
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
 80053cc:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 80053ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d0:	61bb      	str	r3, [r7, #24]

    for (lfs_off_t i = 0; i < size; i++) {
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	e02e      	b.n	8005436 <lfs_bd_cmp+0x76>
        uint8_t dat;
        int err = lfs_bd_read(lfs,
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	1ad1      	subs	r1, r2, r3
 80053de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	4413      	add	r3, r2
 80053e4:	2201      	movs	r2, #1
 80053e6:	9203      	str	r2, [sp, #12]
 80053e8:	f107 0213 	add.w	r2, r7, #19
 80053ec:	9202      	str	r2, [sp, #8]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	460b      	mov	r3, r1
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff fed0 	bl	80051a0 <lfs_bd_read>
 8005400:	6178      	str	r0, [r7, #20]
                pcache, rcache, hint-i,
                block, off+i, &dat, 1);
        if (err) {
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <lfs_bd_cmp+0x4c>
            return err;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	e019      	b.n	8005440 <lfs_bd_cmp+0x80>
        }

        if (dat != data[i]) {
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	4413      	add	r3, r2
 8005412:	781a      	ldrb	r2, [r3, #0]
 8005414:	7cfb      	ldrb	r3, [r7, #19]
 8005416:	429a      	cmp	r2, r3
 8005418:	d00a      	beq.n	8005430 <lfs_bd_cmp+0x70>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	781a      	ldrb	r2, [r3, #0]
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	429a      	cmp	r2, r3
 8005426:	d901      	bls.n	800542c <lfs_bd_cmp+0x6c>
 8005428:	2301      	movs	r3, #1
 800542a:	e009      	b.n	8005440 <lfs_bd_cmp+0x80>
 800542c:	2302      	movs	r3, #2
 800542e:	e007      	b.n	8005440 <lfs_bd_cmp+0x80>
    for (lfs_off_t i = 0; i < size; i++) {
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	3301      	adds	r3, #1
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	69fa      	ldr	r2, [r7, #28]
 8005438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800543a:	429a      	cmp	r2, r3
 800543c:	d3cc      	bcc.n	80053d8 <lfs_bd_cmp+0x18>
        }
    }

    return LFS_CMP_EQ;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <lfs_bd_flush>:

static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b08c      	sub	sp, #48	; 0x30
 800544c:	af04      	add	r7, sp, #16
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800545e:	d061      	beq.n	8005524 <lfs_bd_flush+0xdc>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f113 0f02 	cmn.w	r3, #2
 8005468:	d05c      	beq.n	8005524 <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	429a      	cmp	r2, r3
 8005476:	d305      	bcc.n	8005484 <lfs_bd_flush+0x3c>
 8005478:	4b2d      	ldr	r3, [pc, #180]	; (8005530 <lfs_bd_flush+0xe8>)
 800547a:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <lfs_bd_flush+0xec>)
 800547c:	2181      	movs	r1, #129	; 0x81
 800547e:	482e      	ldr	r0, [pc, #184]	; (8005538 <lfs_bd_flush+0xf0>)
 8005480:	f00c fa18 	bl	80118b4 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7ff fdce 	bl	8005032 <lfs_alignup>
 8005496:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800549c:	689c      	ldr	r4, [r3, #8]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6819      	ldr	r1, [r3, #0]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	462b      	mov	r3, r5
 80054b4:	47a0      	blx	r4
 80054b6:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd05      	ble.n	80054ca <lfs_bd_flush+0x82>
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <lfs_bd_flush+0xf4>)
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <lfs_bd_flush+0xec>)
 80054c2:	2185      	movs	r1, #133	; 0x85
 80054c4:	481c      	ldr	r0, [pc, #112]	; (8005538 <lfs_bd_flush+0xf0>)
 80054c6:	f00c f9f5 	bl	80118b4 <__assert_func>
        if (err) {
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <lfs_bd_flush+0x8c>
            return err;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	e028      	b.n	8005526 <lfs_bd_flush+0xde>
        }

        if (validate) {
 80054d4:	78fb      	ldrb	r3, [r7, #3]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d020      	beq.n	800551c <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 80054da:	6879      	ldr	r1, [r7, #4]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff fe39 	bl	8005154 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 80054ee:	69f8      	ldr	r0, [r7, #28]
 80054f0:	9003      	str	r0, [sp, #12]
 80054f2:	9102      	str	r1, [sp, #8]
 80054f4:	9201      	str	r2, [sp, #4]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	2100      	movs	r1, #0
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7ff ff5e 	bl	80053c0 <lfs_bd_cmp>
 8005504:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	da01      	bge.n	8005510 <lfs_bd_flush+0xc8>
                return res;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	e00a      	b.n	8005526 <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 8005516:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800551a:	e004      	b.n	8005526 <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7ff fe27 	bl	8005172 <lfs_cache_zero>
    }

    return 0;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bdb0      	pop	{r4, r5, r7, pc}
 800552e:	bf00      	nop
 8005530:	08013a80 	.word	0x08013a80
 8005534:	08016c90 	.word	0x08016c90
 8005538:	08013a3c 	.word	0x08013a3c
 800553c:	08013a74 	.word	0x08013a74

08005540 <lfs_bd_sync>:

static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800554e:	6879      	ldr	r1, [r7, #4]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff fdff 	bl	8005154 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005556:	78fb      	ldrb	r3, [r7, #3]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	68b9      	ldr	r1, [r7, #8]
 800555c:	68f8      	ldr	r0, [r7, #12]
 800555e:	f7ff ff73 	bl	8005448 <lfs_bd_flush>
 8005562:	6178      	str	r0, [r7, #20]
    if (err) {
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <lfs_bd_sync+0x2e>
        return err;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	e011      	b.n	8005592 <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005578:	4610      	mov	r0, r2
 800557a:	4798      	blx	r3
 800557c:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	dd05      	ble.n	8005590 <lfs_bd_sync+0x50>
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <lfs_bd_sync+0x5c>)
 8005586:	4a06      	ldr	r2, [pc, #24]	; (80055a0 <lfs_bd_sync+0x60>)
 8005588:	21a9      	movs	r1, #169	; 0xa9
 800558a:	4806      	ldr	r0, [pc, #24]	; (80055a4 <lfs_bd_sync+0x64>)
 800558c:	f00c f992 	bl	80118b4 <__assert_func>
    return err;
 8005590:	697b      	ldr	r3, [r7, #20]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	08013a74 	.word	0x08013a74
 80055a0:	08016ca0 	.word	0x08016ca0
 80055a4:	08013a3c 	.word	0x08013a3c

080055a8 <lfs_bd_prog>:

static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b088      	sub	sp, #32
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block != LFS_BLOCK_NULL);
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c0:	d105      	bne.n	80055ce <lfs_bd_prog+0x26>
 80055c2:	4b47      	ldr	r3, [pc, #284]	; (80056e0 <lfs_bd_prog+0x138>)
 80055c4:	4a47      	ldr	r2, [pc, #284]	; (80056e4 <lfs_bd_prog+0x13c>)
 80055c6:	21b2      	movs	r1, #178	; 0xb2
 80055c8:	4847      	ldr	r0, [pc, #284]	; (80056e8 <lfs_bd_prog+0x140>)
 80055ca:	f00c f973 	bl	80118b4 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 80055ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055d2:	441a      	add	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d977      	bls.n	80056ce <lfs_bd_prog+0x126>
 80055de:	4b43      	ldr	r3, [pc, #268]	; (80056ec <lfs_bd_prog+0x144>)
 80055e0:	4a40      	ldr	r2, [pc, #256]	; (80056e4 <lfs_bd_prog+0x13c>)
 80055e2:	21b3      	movs	r1, #179	; 0xb3
 80055e4:	4840      	ldr	r0, [pc, #256]	; (80056e8 <lfs_bd_prog+0x140>)
 80055e6:	f00c f965 	bl	80118b4 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d151      	bne.n	8005698 <lfs_bd_prog+0xf0>
                off >= pcache->off &&
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 80055f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d34c      	bcc.n	8005698 <lfs_bd_prog+0xf0>
                off < pcache->off + lfs->cfg->cache_size) {
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	4413      	add	r3, r2
                off >= pcache->off &&
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	429a      	cmp	r2, r3
 800560e:	d243      	bcs.n	8005698 <lfs_bd_prog+0xf0>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005614:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	6859      	ldr	r1, [r3, #4]
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800561e:	4413      	add	r3, r2
 8005620:	4619      	mov	r1, r3
 8005622:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005624:	f7ff fce0 	bl	8004fe8 <lfs_min>
 8005628:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005634:	1acb      	subs	r3, r1, r3
 8005636:	4413      	add	r3, r2
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	69f9      	ldr	r1, [r7, #28]
 800563c:	4618      	mov	r0, r3
 800563e:	f00c fb4d 	bl	8011cdc <memcpy>

            data += diff;
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	4413      	add	r3, r2
 8005648:	61fb      	str	r3, [r7, #28]
            off += diff;
 800564a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 8005652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	6898      	ldr	r0, [r3, #8]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	4619      	mov	r1, r3
 8005668:	f7ff fcae 	bl	8004fc8 <lfs_max>
 800566c:	4602      	mov	r2, r0
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	429a      	cmp	r2, r3
 800567e:	d126      	bne.n	80056ce <lfs_bd_prog+0x126>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff fede 	bl	8005448 <lfs_bd_flush>
 800568c:	6178      	str	r0, [r7, #20]
                if (err) {
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01c      	beq.n	80056ce <lfs_bd_prog+0x126>
                    return err;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	e01e      	b.n	80056d6 <lfs_bd_prog+0x12e>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a0:	d005      	beq.n	80056ae <lfs_bd_prog+0x106>
 80056a2:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <lfs_bd_prog+0x148>)
 80056a4:	4a0f      	ldr	r2, [pc, #60]	; (80056e4 <lfs_bd_prog+0x13c>)
 80056a6:	21d0      	movs	r1, #208	; 0xd0
 80056a8:	480f      	ldr	r0, [pc, #60]	; (80056e8 <lfs_bd_prog+0x140>)
 80056aa:	f00c f903 	bl	80118b4 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056b2:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	4619      	mov	r1, r3
 80056bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056be:	f7ff fca3 	bl	8005008 <lfs_aligndown>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d18a      	bne.n	80055ea <lfs_bd_prog+0x42>
    }

    return 0;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	08013a20 	.word	0x08013a20
 80056e4:	08016cac 	.word	0x08016cac
 80056e8:	08013a3c 	.word	0x08013a3c
 80056ec:	08013aa8 	.word	0x08013aa8
 80056f0:	08013acc 	.word	0x08013acc

080056f4 <lfs_bd_erase>:

static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005702:	6a1b      	ldr	r3, [r3, #32]
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	429a      	cmp	r2, r3
 8005708:	d305      	bcc.n	8005716 <lfs_bd_erase+0x22>
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <lfs_bd_erase+0x50>)
 800570c:	4a0e      	ldr	r2, [pc, #56]	; (8005748 <lfs_bd_erase+0x54>)
 800570e:	21dc      	movs	r1, #220	; 0xdc
 8005710:	480e      	ldr	r0, [pc, #56]	; (800574c <lfs_bd_erase+0x58>)
 8005712:	f00c f8cf 	bl	80118b4 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005720:	6839      	ldr	r1, [r7, #0]
 8005722:	4610      	mov	r0, r2
 8005724:	4798      	blx	r3
 8005726:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dd05      	ble.n	800573a <lfs_bd_erase+0x46>
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <lfs_bd_erase+0x5c>)
 8005730:	4a05      	ldr	r2, [pc, #20]	; (8005748 <lfs_bd_erase+0x54>)
 8005732:	21de      	movs	r1, #222	; 0xde
 8005734:	4805      	ldr	r0, [pc, #20]	; (800574c <lfs_bd_erase+0x58>)
 8005736:	f00c f8bd 	bl	80118b4 <__assert_func>
    return err;
 800573a:	68fb      	ldr	r3, [r7, #12]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08013a54 	.word	0x08013a54
 8005748:	08016cb8 	.word	0x08016cb8
 800574c:	08013a3c 	.word	0x08013a3c
 8005750:	08013a74 	.word	0x08013a74

08005754 <lfs_pair_swap>:


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3304      	adds	r3, #4
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	601a      	str	r2, [r3, #0]
}
 8005772:	bf00      	nop
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800578e:	d005      	beq.n	800579c <lfs_pair_isnull+0x1e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800579a:	d101      	bne.n	80057a0 <lfs_pair_isnull+0x22>
 800579c:	2301      	movs	r3, #1
 800579e:	e000      	b.n	80057a2 <lfs_pair_isnull+0x24>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d017      	beq.n	80057fa <lfs_pair_cmp+0x46>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	3304      	adds	r3, #4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00f      	beq.n	80057fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	3304      	adds	r3, #4
 80057e2:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d008      	beq.n	80057fa <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3304      	adds	r3, #4
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d001      	beq.n	80057fa <lfs_pair_cmp+0x46>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <lfs_pair_cmp+0x48>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <lfs_pair_fromle32>:
        const lfs_block_t pairb[2]) {
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
}

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fc57 	bl	80050c8 <lfs_fromle32>
 800581a:	4602      	mov	r2, r0
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	1d1c      	adds	r4, r3, #4
 800582a:	4610      	mov	r0, r2
 800582c:	f7ff fc4c 	bl	80050c8 <lfs_fromle32>
 8005830:	4603      	mov	r3, r0
 8005832:	6023      	str	r3, [r4, #0]
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fc48 	bl	80050de <lfs_tole32>
 800584e:	4602      	mov	r2, r0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3304      	adds	r3, #4
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	1d1c      	adds	r4, r3, #4
 800585e:	4610      	mov	r0, r2
 8005860:	f7ff fc3d 	bl	80050de <lfs_tole32>
 8005864:	4603      	mov	r3, r0
 8005866:	6023      	str	r3, [r4, #0]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	bd90      	pop	{r4, r7, pc}

08005870 <lfs_tag_isvalid>:
typedef int32_t lfs_stag_t;

#define LFS_MKTAG(type, id, size) \
    (((lfs_tag_t)(type) << 20) | ((lfs_tag_t)(id) << 10) | (lfs_tag_t)(size))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	43db      	mvns	r3, r3
 800587c:	0fdb      	lsrs	r3, r3, #31
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	059b      	lsls	r3, r3, #22
 8005898:	159b      	asrs	r3, r3, #22
 800589a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	0d1b      	lsrs	r3, r3, #20
 80058be:	b29b      	uxth	r3, r3
 80058c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058c4:	b29b      	uxth	r3, r3
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	0d1b      	lsrs	r3, r3, #20
 80058de:	b29b      	uxth	r3, r3
 80058e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058e4:	b29b      	uxth	r3, r3
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	0d1b      	lsrs	r3, r3, #20
 80058fe:	b2db      	uxtb	r3, r3
}
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff ffec 	bl	80058f2 <lfs_tag_chunk>
 800591a:	4603      	mov	r3, r0
 800591c:	b25b      	sxtb	r3, r3
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	0a9b      	lsrs	r3, r3, #10
 8005932:	b29b      	uxth	r3, r3
 8005934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005938:	b29b      	uxth	r3, r3
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 8005954:	4618      	mov	r0, r3
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f7ff ff8f 	bl	800588c <lfs_tag_isdelete>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4413      	add	r3, r2
 8005976:	4618      	mov	r0, r3
 8005978:	f7ff ffe5 	bl	8005946 <lfs_tag_size>
 800597c:	4603      	mov	r3, r0
 800597e:	3304      	adds	r3, #4
}
 8005980:	4618      	mov	r0, r3
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <lfs_gstate_xor>:
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(struct lfs_gstate *a,
        const struct lfs_gstate *b) {
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8005992:	2300      	movs	r3, #0
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e012      	b.n	80059be <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	4413      	add	r3, r2
 80059a0:	6819      	ldr	r1, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	683a      	ldr	r2, [r7, #0]
 80059a8:	4413      	add	r3, r2
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4403      	add	r3, r0
 80059b4:	404a      	eors	r2, r1
 80059b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	3301      	adds	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	dde9      	ble.n	8005998 <lfs_gstate_xor+0x10>
    }
}
 80059c4:	bf00      	nop
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const struct lfs_gstate *a) {
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80059da:	2300      	movs	r3, #0
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e00b      	b.n	80059f8 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	4413      	add	r3, r2
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <lfs_gstate_iszero+0x20>
            return false;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e006      	b.n	8005a00 <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	ddf0      	ble.n	80059e0 <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const struct lfs_gstate *a) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff ff94 	bl	8005946 <lfs_tag_size>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	bf14      	ite	ne
 8005a24:	2301      	movne	r3, #1
 8005a26:	2300      	moveq	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <lfs_gstate_hasmove>:

static inline uint8_t lfs_gstate_getorphans(const struct lfs_gstate *a) {
    return lfs_tag_size(a->tag);
}

static inline bool lfs_gstate_hasmove(const struct lfs_gstate *a) {
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b082      	sub	sp, #8
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff ff37 	bl	80058b2 <lfs_tag_type1>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	bf14      	ite	ne
 8005a4a:	2301      	movne	r3, #1
 8005a4c:	2300      	moveq	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const struct lfs_gstate *a,
        const lfs_block_t *pair) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff ff23 	bl	80058b2 <lfs_tag_type1>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <lfs_gstate_hasmovehere+0x30>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	3304      	adds	r3, #4
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff fe9b 	bl	80057b4 <lfs_pair_cmp>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <lfs_gstate_hasmovehere+0x30>
 8005a84:	2301      	movs	r3, #1
 8005a86:	e000      	b.n	8005a8a <lfs_gstate_hasmovehere+0x32>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <lfs_gstate_xororphans>:

static inline void lfs_gstate_xororphans(struct lfs_gstate *a,
        const struct lfs_gstate *b, bool orphans) {
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	71fb      	strb	r3, [r7, #7]
    a->tag ^= LFS_MKTAG(0x800, 0, 0) & (b->tag ^ ((uint32_t)orphans << 31));
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	6819      	ldr	r1, [r3, #0]
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	07db      	lsls	r3, r3, #31
 8005ab2:	404b      	eors	r3, r1
 8005ab4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab8:	405a      	eors	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	601a      	str	r2, [r3, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <lfs_gstate_xormove>:

static inline void lfs_gstate_xormove(struct lfs_gstate *a,
        const struct lfs_gstate *b, uint16_t id, const lfs_block_t pair[2]) {
 8005acc:	b480      	push	{r7}
 8005ace:	b085      	sub	sp, #20
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	603b      	str	r3, [r7, #0]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	80fb      	strh	r3, [r7, #6]
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	6819      	ldr	r1, [r3, #0]
            (id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8005aea:	4283      	cmp	r3, r0
 8005aec:	d006      	beq.n	8005afc <lfs_gstate_xormove+0x30>
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	029b      	lsls	r3, r3, #10
 8005af2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8005af6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8005afa:	e000      	b.n	8005afe <lfs_gstate_xormove+0x32>
 8005afc:	2300      	movs	r3, #0
    a->tag ^= LFS_MKTAG(0x7ff, 0x3ff, 0) & (b->tag ^ (
 8005afe:	4059      	eors	r1, r3
 8005b00:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <lfs_gstate_xormove+0x90>)
 8005b02:	400b      	ands	r3, r1
 8005b04:	405a      	eors	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	601a      	str	r2, [r3, #0]
    a->pair[0] ^= b->pair[0] ^ ((id != 0x3ff) ? pair[0] : 0);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	88fb      	ldrh	r3, [r7, #6]
 8005b14:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8005b18:	4283      	cmp	r3, r0
 8005b1a:	d002      	beq.n	8005b22 <lfs_gstate_xormove+0x56>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	e000      	b.n	8005b24 <lfs_gstate_xormove+0x58>
 8005b22:	2300      	movs	r3, #0
 8005b24:	404b      	eors	r3, r1
 8005b26:	405a      	eors	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
    a->pair[1] ^= b->pair[1] ^ ((id != 0x3ff) ? pair[1] : 0);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689a      	ldr	r2, [r3, #8]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6899      	ldr	r1, [r3, #8]
 8005b34:	88fb      	ldrh	r3, [r7, #6]
 8005b36:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8005b3a:	4283      	cmp	r3, r0
 8005b3c:	d003      	beq.n	8005b46 <lfs_gstate_xormove+0x7a>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	3304      	adds	r3, #4
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	e000      	b.n	8005b48 <lfs_gstate_xormove+0x7c>
 8005b46:	2300      	movs	r3, #0
 8005b48:	404b      	eors	r3, r1
 8005b4a:	405a      	eors	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	7ffffc00 	.word	0x7ffffc00

08005b60 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(struct lfs_gstate *a) {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff faab 	bl	80050c8 <lfs_fromle32>
 8005b72:	4602      	mov	r2, r0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff faa3 	bl	80050c8 <lfs_fromle32>
 8005b82:	4602      	mov	r2, r0
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fa9b 	bl	80050c8 <lfs_fromle32>
 8005b92:	4602      	mov	r2, r0
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(struct lfs_gstate *a) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff fa96 	bl	80050de <lfs_tole32>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7ff fa8e 	bl	80050de <lfs_tole32>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fa86 	bl	80050de <lfs_tole32>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	609a      	str	r2, [r3, #8]
}
 8005bd8:	bf00      	nop
 8005bda:	3708      	adds	r7, #8
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fa6b 	bl	80050c8 <lfs_fromle32>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7ff fa63 	bl	80050c8 <lfs_fromle32>
 8005c02:	4602      	mov	r2, r0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	605a      	str	r2, [r3, #4]
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <lfs_superblock_fromle32>:
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
    ctz->head = lfs_tole32(ctz->head);
    ctz->size = lfs_tole32(ctz->size);
}

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff fa53 	bl	80050c8 <lfs_fromle32>
 8005c22:	4602      	mov	r2, r0
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fa4b 	bl	80050c8 <lfs_fromle32>
 8005c32:	4602      	mov	r2, r0
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fa43 	bl	80050c8 <lfs_fromle32>
 8005c42:	4602      	mov	r2, r0
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fa3b 	bl	80050c8 <lfs_fromle32>
 8005c52:	4602      	mov	r2, r0
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff fa33 	bl	80050c8 <lfs_fromle32>
 8005c62:	4602      	mov	r2, r0
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fa2b 	bl	80050c8 <lfs_fromle32>
 8005c72:	4602      	mov	r2, r0
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	615a      	str	r2, [r3, #20]
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fa26 	bl	80050de <lfs_tole32>
 8005c92:	4602      	mov	r2, r0
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff fa1e 	bl	80050de <lfs_tole32>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fa16 	bl	80050de <lfs_tole32>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fa0e 	bl	80050de <lfs_tole32>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7ff fa06 	bl	80050de <lfs_tole32>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff f9fe 	bl	80050de <lfs_tole32>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	615a      	str	r2, [r3, #20]
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <lfs_alloc_lookahead>:
static int lfs1_traverse(lfs_t *lfs,
        int (*cb)(void*, lfs_block_t), void *data);
#endif

/// Block allocator ///
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005d12:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 8005d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d18:	fb01 f202 	mul.w	r2, r1, r2
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d212      	bcs.n	8005d50 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	095b      	lsrs	r3, r3, #5
 8005d32:	009a      	lsls	r2, r3, #2
 8005d34:	440a      	add	r2, r1
 8005d36:	6811      	ldr	r1, [r2, #0]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	f002 021f 	and.w	r2, r2, #31
 8005d3e:	2001      	movs	r0, #1
 8005d40:	fa00 f202 	lsl.w	r2, r0, r2
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	4403      	add	r3, r0
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	601a      	str	r2, [r3, #0]
    }

    return 0;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3714      	adds	r7, #20
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <lfs_alloc>:

static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 8005d6a:	e04f      	b.n	8005e0c <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d70:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d80:	1e5a      	subs	r2, r3, #1
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	095b      	lsrs	r3, r3, #5
 8005d8e:	009b      	lsls	r3, r3, #2
 8005d90:	4413      	add	r3, r2
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	4013      	ands	r3, r2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d132      	bne.n	8005e0c <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4413      	add	r3, r2
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005db2:	6a12      	ldr	r2, [r2, #32]
 8005db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005db8:	fb01 f202 	mul.w	r2, r1, r2
 8005dbc:	1a9a      	subs	r2, r3, r2
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 8005dc2:	e009      	b.n	8005dd8 <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	1e5a      	subs	r2, r3, #1
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d011      	beq.n	8005e08 <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	f003 031f 	and.w	r3, r3, #31
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005e02:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1dd      	bne.n	8005dc4 <lfs_alloc+0x64>
                }

                return 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e04a      	b.n	8005ea2 <lfs_alloc+0x142>
        while (lfs->free.i != lfs->free.size) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d1a9      	bne.n	8005d6c <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d10d      	bne.n	8005e3c <lfs_alloc+0xdc>
            LFS_ERROR("No more free space %"PRIu32,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	4413      	add	r3, r2
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005e30:	481e      	ldr	r0, [pc, #120]	; (8005eac <lfs_alloc+0x14c>)
 8005e32:	f00c fb37 	bl	80124a4 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 8005e36:	f06f 031b 	mvn.w	r3, #27
 8005e3a:	e032      	b.n	8005ea2 <lfs_alloc+0x142>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e44:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e4a:	6a12      	ldr	r2, [r2, #32]
 8005e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e50:	fb01 f202 	mul.w	r2, r1, r2
 8005e54:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	00da      	lsls	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7ff f8bd 	bl	8004fe8 <lfs_min>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	461a      	mov	r2, r3
 8005e86:	2100      	movs	r1, #0
 8005e88:	f00b ff36 	bl	8011cf8 <memset>
        int err = lfs_fs_traverse(lfs, lfs_alloc_lookahead, lfs);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4908      	ldr	r1, [pc, #32]	; (8005eb0 <lfs_alloc+0x150>)
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f003 fc5f 	bl	8009754 <lfs_fs_traverse>
 8005e96:	60f8      	str	r0, [r7, #12]
        if (err) {
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f43f af65 	beq.w	8005d6a <lfs_alloc+0xa>
            return err;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	08013af0 	.word	0x08013af0
 8005eb0:	08005cf1 	.word	0x08005cf1

08005eb4 <lfs_alloc_ack>:

static void lfs_alloc_ack(lfs_t *lfs) {
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	661a      	str	r2, [r3, #96]	; 0x60
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
	...

08005ed4 <lfs_dir_getslice>:


/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b08f      	sub	sp, #60	; 0x3c
 8005ed8:	af04      	add	r7, sp, #16
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3330      	adds	r3, #48	; 0x30
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7ff fdac 	bl	8005a58 <lfs_gstate_hasmovehere>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	f000 80b2 	beq.w	800606c <lfs_dir_getslice+0x198>
            lfs_tag_id(gtag) <= lfs_tag_id(lfs->gstate.tag)) {
 8005f08:	6838      	ldr	r0, [r7, #0]
 8005f0a:	f7ff fd0c 	bl	8005926 <lfs_tag_id>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	461c      	mov	r4, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fd05 	bl	8005926 <lfs_tag_id>
 8005f1c:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair) &&
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	f200 80a4 	bhi.w	800606c <lfs_dir_getslice+0x198>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f2a:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 8005f2c:	e09e      	b.n	800606c <lfs_dir_getslice+0x198>
        off -= lfs_tag_dsize(ntag);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7ff fd15 	bl	8005960 <lfs_tag_dsize>
 8005f36:	4602      	mov	r2, r0
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2204      	movs	r2, #4
 8005f4a:	9203      	str	r2, [sp, #12]
 8005f4c:	f107 0210 	add.w	r2, r7, #16
 8005f50:	9202      	str	r2, [sp, #8]
 8005f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f54:	9201      	str	r2, [sp, #4]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	2304      	movs	r3, #4
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f7ff f91e 	bl	80051a0 <lfs_bd_read>
 8005f64:	61b8      	str	r0, [r7, #24]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
        if (err) {
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <lfs_dir_getslice+0x9c>
            return err;
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	e089      	b.n	8006084 <lfs_dir_getslice+0x1b0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7ff f8bf 	bl	80050f6 <lfs_frombe32>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	4053      	eors	r3, r2
 8005f7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f82:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fcce 	bl	8005926 <lfs_tag_id>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d02b      	beq.n	8005fe8 <lfs_dir_getslice+0x114>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005f90:	69f8      	ldr	r0, [r7, #28]
 8005f92:	f7ff fc8e 	bl	80058b2 <lfs_tag_type1>
 8005f96:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 8005f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9c:	d124      	bne.n	8005fe8 <lfs_dir_getslice+0x114>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 8005f9e:	69f8      	ldr	r0, [r7, #28]
 8005fa0:	f7ff fcc1 	bl	8005926 <lfs_tag_id>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	461c      	mov	r4, r3
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fcb9 	bl	8005926 <lfs_tag_id>
 8005fb4:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8005fb6:	429c      	cmp	r4, r3
 8005fb8:	d816      	bhi.n	8005fe8 <lfs_dir_getslice+0x114>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	4b32      	ldr	r3, [pc, #200]	; (800608c <lfs_dir_getslice+0x1b8>)
 8005fc2:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 8005fc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d102      	bne.n	8005fd8 <lfs_dir_getslice+0x104>
                // found where we were created
                return LFS_ERR_NOENT;
 8005fd2:	f06f 0301 	mvn.w	r3, #1
 8005fd6:	e055      	b.n	8006084 <lfs_dir_getslice+0x1b0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8005fd8:	69f8      	ldr	r0, [r7, #28]
 8005fda:	f7ff fc97 	bl	800590c <lfs_tag_splice>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	029a      	lsls	r2, r3, #10
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	1ad2      	subs	r2, r2, r3
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	405a      	eors	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d138      	bne.n	800606c <lfs_dir_getslice+0x198>
            if (lfs_tag_isdelete(tag)) {
 8005ffa:	69f8      	ldr	r0, [r7, #28]
 8005ffc:	f7ff fc46 	bl	800588c <lfs_tag_isdelete>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <lfs_dir_getslice+0x138>
                return LFS_ERR_NOENT;
 8006006:	f06f 0301 	mvn.w	r3, #1
 800600a:	e03b      	b.n	8006084 <lfs_dir_getslice+0x1b0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800600c:	69f8      	ldr	r0, [r7, #28]
 800600e:	f7ff fc9a 	bl	8005946 <lfs_tag_size>
 8006012:	4603      	mov	r3, r0
 8006014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe ffe6 	bl	8004fe8 <lfs_min>
 800601c:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	681b      	ldr	r3, [r3, #0]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 8006024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006028:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800602a:	3204      	adds	r2, #4
 800602c:	6979      	ldr	r1, [r7, #20]
 800602e:	9103      	str	r1, [sp, #12]
 8006030:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006032:	9102      	str	r1, [sp, #8]
 8006034:	9201      	str	r2, [sp, #4]
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4602      	mov	r2, r0
 800603c:	2100      	movs	r1, #0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f7ff f8ae 	bl	80051a0 <lfs_bd_read>
 8006044:	61b8      	str	r0, [r7, #24]
            if (err) {
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <lfs_dir_getslice+0x17c>
                return err;
 800604c:	69bb      	ldr	r3, [r7, #24]
 800604e:	e019      	b.n	8006084 <lfs_dir_getslice+0x1b0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 8006050:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	18d0      	adds	r0, r2, r3
 8006056:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	461a      	mov	r2, r3
 800605e:	2100      	movs	r1, #0
 8006060:	f00b fe4a 	bl	8011cf8 <memset>

            return tag + gdiff;
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	e00b      	b.n	8006084 <lfs_dir_getslice+0x1b0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4618      	mov	r0, r3
 8006070:	f7ff fc76 	bl	8005960 <lfs_tag_dsize>
 8006074:	4603      	mov	r3, r0
 8006076:	3304      	adds	r3, #4
 8006078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607a:	429a      	cmp	r2, r3
 800607c:	f4bf af57 	bcs.w	8005f2e <lfs_dir_getslice+0x5a>
        }
    }

    return LFS_ERR_NOENT;
 8006080:	f06f 0301 	mvn.w	r3, #1
}
 8006084:	4618      	mov	r0, r3
 8006086:	372c      	adds	r7, #44	; 0x2c
 8006088:	46bd      	mov	sp, r7
 800608a:	bd90      	pop	{r4, r7, pc}
 800608c:	000ffc00 	.word	0x000ffc00

08006090 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af04      	add	r7, sp, #16
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800609e:	6838      	ldr	r0, [r7, #0]
 80060a0:	f7ff fc51 	bl	8005946 <lfs_tag_size>
 80060a4:	4603      	mov	r3, r0
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	68b9      	ldr	r1, [r7, #8]
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff ff0c 	bl	8005ed4 <lfs_dir_getslice>
 80060bc:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b08c      	sub	sp, #48	; 0x30
 80060ca:	af04      	add	r7, sp, #16
 80060cc:	60f8      	str	r0, [r7, #12]
 80060ce:	60b9      	str	r1, [r7, #8]
 80060d0:	607a      	str	r2, [r7, #4]
 80060d2:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 80060d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060dc:	441a      	add	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f240 80c0 	bls.w	800626a <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 80060ea:	f06f 0353 	mvn.w	r3, #83	; 0x53
 80060ee:	e0c1      	b.n	8006274 <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 80060f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060f2:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d03f      	beq.n	800617a <lfs_dir_getread+0xb4>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f113 0f02 	cmn.w	r3, #2
 8006102:	d13a      	bne.n	800617a <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800610e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006110:	429a      	cmp	r2, r3
 8006112:	d232      	bcs.n	800617a <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800611a:	429a      	cmp	r2, r3
 800611c:	d324      	bcc.n	8006168 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689a      	ldr	r2, [r3, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006128:	1acb      	subs	r3, r1, r3
 800612a:	4413      	add	r3, r2
 800612c:	4619      	mov	r1, r3
 800612e:	69b8      	ldr	r0, [r7, #24]
 8006130:	f7fe ff5a 	bl	8004fe8 <lfs_min>
 8006134:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006140:	1acb      	subs	r3, r1, r3
 8006142:	4413      	add	r3, r2
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4619      	mov	r1, r3
 8006148:	69f8      	ldr	r0, [r7, #28]
 800614a:	f00b fdc7 	bl	8011cdc <memcpy>

                data += diff;
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	4413      	add	r3, r2
 8006154:	61fb      	str	r3, [r7, #28]
                off += diff;
 8006156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	4413      	add	r3, r2
 800615c:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800615e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 8006166:	e080      	b.n	800626a <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	4619      	mov	r1, r3
 8006172:	69b8      	ldr	r0, [r7, #24]
 8006174:	f7fe ff38 	bl	8004fe8 <lfs_min>
 8006178:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f113 0f02 	cmn.w	r3, #2
 8006182:	d13a      	bne.n	80061fa <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800618e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006190:	429a      	cmp	r2, r3
 8006192:	d232      	bcs.n	80061fa <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800619a:	429a      	cmp	r2, r3
 800619c:	d324      	bcc.n	80061e8 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6859      	ldr	r1, [r3, #4]
 80061a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a8:	1acb      	subs	r3, r1, r3
 80061aa:	4413      	add	r3, r2
 80061ac:	4619      	mov	r1, r3
 80061ae:	69b8      	ldr	r0, [r7, #24]
 80061b0:	f7fe ff1a 	bl	8004fe8 <lfs_min>
 80061b4:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80061c0:	1acb      	subs	r3, r1, r3
 80061c2:	4413      	add	r3, r2
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4619      	mov	r1, r3
 80061c8:	69f8      	ldr	r0, [r7, #28]
 80061ca:	f00b fd87 	bl	8011cdc <memcpy>

                data += diff;
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	69bb      	ldr	r3, [r7, #24]
 80061d2:	4413      	add	r3, r2
 80061d4:	61fb      	str	r3, [r7, #28]
                off += diff;
 80061d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	4413      	add	r3, r2
 80061dc:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 80061de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 80061e6:	e040      	b.n	800626a <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	4619      	mov	r1, r3
 80061f2:	69b8      	ldr	r0, [r7, #24]
 80061f4:	f7fe fef8 	bl	8004fe8 <lfs_min>
 80061f8:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	f06f 0201 	mvn.w	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	4619      	mov	r1, r3
 800620a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800620c:	f7fe fefc 	bl	8005008 <lfs_aligndown>
 8006210:	4602      	mov	r2, r0
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8006216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800621a:	441a      	add	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	4619      	mov	r1, r3
 8006224:	4610      	mov	r0, r2
 8006226:	f7fe ff04 	bl	8005032 <lfs_alignup>
 800622a:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 8006230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe fed7 	bl	8004fe8 <lfs_min>
 800623a:	4602      	mov	r2, r0
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 8006248:	6839      	ldr	r1, [r7, #0]
 800624a:	6889      	ldr	r1, [r1, #8]
 800624c:	9102      	str	r1, [sp, #8]
 800624e:	9201      	str	r2, [sp, #4]
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006256:	68b9      	ldr	r1, [r7, #8]
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f7ff fe3b 	bl	8005ed4 <lfs_dir_getslice>
 800625e:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2b00      	cmp	r3, #0
 8006264:	da01      	bge.n	800626a <lfs_dir_getread+0x1a4>
            return err;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	e004      	b.n	8006274 <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800626a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f47f af3f 	bne.w	80060f0 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3720      	adds	r7, #32
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <lfs_dir_traverse_filter>:

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800627c:	b590      	push	{r4, r7, lr}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <lfs_dir_traverse_filter+0x1e>
 8006296:	4b23      	ldr	r3, [pc, #140]	; (8006324 <lfs_dir_traverse_filter+0xa8>)
 8006298:	e000      	b.n	800629c <lfs_dir_traverse_filter+0x20>
 800629a:	4b23      	ldr	r3, [pc, #140]	; (8006328 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800629c:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	405a      	eors	r2, r3
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4013      	ands	r3, r2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d014      	beq.n	80062d8 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7ff faea 	bl	800588c <lfs_tag_isdelete>
 80062b8:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10c      	bne.n	80062d8 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	4a18      	ldr	r2, [pc, #96]	; (8006324 <lfs_dir_traverse_filter+0xa8>)
 80062c2:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	6819      	ldr	r1, [r3, #0]
 80062c8:	4b18      	ldr	r3, [pc, #96]	; (800632c <lfs_dir_traverse_filter+0xb0>)
 80062ca:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 80062cc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 80062d0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d101      	bne.n	80062dc <lfs_dir_traverse_filter+0x60>
        return true;
 80062d8:	2301      	movs	r3, #1
 80062da:	e01e      	b.n	800631a <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 80062dc:	68b8      	ldr	r0, [r7, #8]
 80062de:	f7ff fae8 	bl	80058b2 <lfs_tag_type1>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e8:	d116      	bne.n	8006318 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	f7ff fb1b 	bl	8005926 <lfs_tag_id>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461c      	mov	r4, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fb14 	bl	8005926 <lfs_tag_id>
 80062fe:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 8006300:	429c      	cmp	r4, r3
 8006302:	d809      	bhi.n	8006318 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f7ff fb01 	bl	800590c <lfs_tag_splice>
 800630a:	4603      	mov	r3, r0
 800630c:	029a      	lsls	r2, r3, #10
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	441a      	add	r2, r3
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	601a      	str	r2, [r3, #0]
    }

    return false;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	bd90      	pop	{r4, r7, pc}
 8006322:	bf00      	nop
 8006324:	7ffffc00 	.word	0x7ffffc00
 8006328:	700ffc00 	.word	0x700ffc00
 800632c:	000ffc00 	.word	0x000ffc00

08006330 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount, bool hasseenmove,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006330:	b590      	push	{r4, r7, lr}
 8006332:	b09d      	sub	sp, #116	; 0x74
 8006334:	af0a      	add	r7, sp, #40	; 0x28
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800633e:	6838      	ldr	r0, [r7, #0]
 8006340:	f7ff fb0e 	bl	8005960 <lfs_tag_dsize>
 8006344:	4602      	mov	r2, r0
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	441a      	add	r2, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	429a      	cmp	r2, r3
 8006350:	d233      	bcs.n	80063ba <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 8006352:	6838      	ldr	r0, [r7, #0]
 8006354:	f7ff fb04 	bl	8005960 <lfs_tag_dsize>
 8006358:	4602      	mov	r2, r0
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 8006360:	68f9      	ldr	r1, [r7, #12]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2204      	movs	r2, #4
 8006368:	9203      	str	r2, [sp, #12]
 800636a:	f107 021c 	add.w	r2, r7, #28
 800636e:	9202      	str	r2, [sp, #8]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	9201      	str	r2, [sp, #4]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	2304      	movs	r3, #4
 8006378:	460a      	mov	r2, r1
 800637a:	2100      	movs	r1, #0
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7fe ff0f 	bl	80051a0 <lfs_bd_read>
 8006382:	63f8      	str	r0, [r7, #60]	; 0x3c
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 8006384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <lfs_dir_traverse+0x5e>
                return err;
 800638a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638c:	e13f      	b.n	800660e <lfs_dir_traverse+0x2de>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe feb0 	bl	80050f6 <lfs_frombe32>
 8006396:	4602      	mov	r2, r0
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4053      	eors	r3, r2
 800639c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063a0:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	3304      	adds	r3, #4
 80063ac:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 80063ae:	f107 0314 	add.w	r3, r7, #20
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	e02d      	b.n	8006416 <lfs_dir_traverse+0xe6>
        } else if (attrcount > 0) {
 80063ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	dd0c      	ble.n	80063da <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 80063c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 80063c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 80063cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063ce:	3308      	adds	r3, #8
 80063d0:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 80063d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063d4:	3b01      	subs	r3, #1
 80063d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063d8:	e01d      	b.n	8006416 <lfs_dir_traverse+0xe6>
        } else if (!hasseenmove &&
 80063da:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80063de:	f083 0301 	eor.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d014      	beq.n	8006412 <lfs_dir_traverse+0xe2>
                lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	333c      	adds	r3, #60	; 0x3c
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7ff fb31 	bl	8005a58 <lfs_gstate_hasmovehere>
 80063f6:	4603      	mov	r3, r0
        } else if (!hasseenmove &&
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <lfs_dir_traverse+0xe2>
            // Wait, we have pending move? Handle this here (we need to
            // or else we risk letting moves fall out of date)
            tag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006400:	4b85      	ldr	r3, [pc, #532]	; (8006618 <lfs_dir_traverse+0x2e8>)
 8006402:	4013      	ands	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]
            buffer = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	647b      	str	r3, [r7, #68]	; 0x44
            hasseenmove = true;
 800640a:	2301      	movs	r3, #1
 800640c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8006410:	e001      	b.n	8006416 <lfs_dir_traverse+0xe6>
        } else {
            return 0;
 8006412:	2300      	movs	r3, #0
 8006414:	e0fb      	b.n	800660e <lfs_dir_traverse+0x2de>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 8006416:	4b81      	ldr	r3, [pc, #516]	; (800661c <lfs_dir_traverse+0x2ec>)
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800641e:	405a      	eors	r2, r3
 8006420:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006424:	400b      	ands	r3, r1
 8006426:	4013      	ands	r3, r2
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 80ea 	bne.w	8006602 <lfs_dir_traverse+0x2d2>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800642e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006430:	f7ff fa79 	bl	8005926 <lfs_tag_id>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d03b      	beq.n	80064b2 <lfs_dir_traverse+0x182>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800643a:	f107 031c 	add.w	r3, r7, #28
 800643e:	9309      	str	r3, [sp, #36]	; 0x24
 8006440:	4b77      	ldr	r3, [pc, #476]	; (8006620 <lfs_dir_traverse+0x2f0>)
 8006442:	9308      	str	r3, [sp, #32]
 8006444:	2300      	movs	r3, #0
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	2300      	movs	r3, #0
 800644a:	9306      	str	r3, [sp, #24]
 800644c:	2300      	movs	r3, #0
 800644e:	9305      	str	r3, [sp, #20]
 8006450:	2300      	movs	r3, #0
 8006452:	9304      	str	r3, [sp, #16]
 8006454:	2300      	movs	r3, #0
 8006456:	9303      	str	r3, [sp, #12]
 8006458:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800645c:	9302      	str	r3, [sp, #8]
 800645e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006460:	9301      	str	r3, [sp, #4]
 8006462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	68b9      	ldr	r1, [r7, #8]
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff ff5f 	bl	8006330 <lfs_dir_traverse>
 8006472:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount, hasseenmove,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	da01      	bge.n	800647e <lfs_dir_traverse+0x14e>
                return filter;
 800647a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647c:	e0c7      	b.n	800660e <lfs_dir_traverse+0x2de>
            }

            if (filter) {
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	f040 80c0 	bne.w	8006606 <lfs_dir_traverse+0x2d6>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff fa4c 	bl	8005926 <lfs_tag_id>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006496:	4293      	cmp	r3, r2
 8006498:	f200 80b7 	bhi.w	800660a <lfs_dir_traverse+0x2da>
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff fa41 	bl	8005926 <lfs_tag_id>
 80064a4:	4603      	mov	r3, r0
 80064a6:	461a      	mov	r2, r3
 80064a8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 80064ac:	4293      	cmp	r3, r2
 80064ae:	f240 80ac 	bls.w	800660a <lfs_dir_traverse+0x2da>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff fa0c 	bl	80058d2 <lfs_tag_type3>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f43f af3e 	beq.w	800633e <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff fa04 	bl	80058d2 <lfs_tag_type3>
 80064ca:	4603      	mov	r3, r0
 80064cc:	461a      	mov	r2, r3
 80064ce:	f240 1301 	movw	r3, #257	; 0x101
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d138      	bne.n	8006548 <lfs_dir_traverse+0x218>
            uint16_t fromid = lfs_tag_size(tag);
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fa34 	bl	8005946 <lfs_tag_size>
 80064de:	4603      	mov	r3, r0
 80064e0:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7ff fa1e 	bl	8005926 <lfs_tag_id>
 80064ea:	4603      	mov	r3, r0
 80064ec:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 80064ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064f0:	3301      	adds	r3, #1
 80064f2:	b29b      	uxth	r3, r3
                    buffer, 0, LFS_BLOCK_NULL, NULL, 0, true,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 80064f4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80064f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064f8:	1a8a      	subs	r2, r1, r2
 80064fa:	b291      	uxth	r1, r2
 80064fc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8006500:	440a      	add	r2, r1
 8006502:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 8006504:	b212      	sxth	r2, r2
 8006506:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006508:	9109      	str	r1, [sp, #36]	; 0x24
 800650a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800650c:	9108      	str	r1, [sp, #32]
 800650e:	9207      	str	r2, [sp, #28]
 8006510:	9306      	str	r3, [sp, #24]
 8006512:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006514:	9305      	str	r3, [sp, #20]
 8006516:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800651a:	9304      	str	r3, [sp, #16]
 800651c:	4b41      	ldr	r3, [pc, #260]	; (8006624 <lfs_dir_traverse+0x2f4>)
 800651e:	9303      	str	r3, [sp, #12]
 8006520:	2301      	movs	r3, #1
 8006522:	9302      	str	r3, [sp, #8]
 8006524:	2300      	movs	r3, #0
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	2300      	movs	r3, #0
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006530:	2200      	movs	r2, #0
 8006532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f7ff fefb 	bl	8006330 <lfs_dir_traverse>
 800653a:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	2b00      	cmp	r3, #0
 8006540:	f43f aefd 	beq.w	800633e <lfs_dir_traverse+0xe>
                return err;
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	e062      	b.n	800660e <lfs_dir_traverse+0x2de>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f9c1 	bl	80058d2 <lfs_tag_type3>
 8006550:	4603      	mov	r3, r0
 8006552:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006556:	d144      	bne.n	80065e2 <lfs_dir_traverse+0x2b2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 8006558:	2300      	movs	r3, #0
 800655a:	643b      	str	r3, [r7, #64]	; 0x40
 800655c:	e038      	b.n	80065d0 <lfs_dir_traverse+0x2a0>
                const struct lfs_attr *a = buffer;
 800655e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 8006562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006564:	4613      	mov	r3, r2
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	461a      	mov	r2, r3
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	4413      	add	r3, r2
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8006578:	051c      	lsls	r4, r3, #20
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	4618      	mov	r0, r3
 800657e:	f7ff f9d2 	bl	8005926 <lfs_tag_id>
 8006582:	4603      	mov	r3, r0
 8006584:	461a      	mov	r2, r3
 8006586:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 800658a:	4413      	add	r3, r2
 800658c:	029b      	lsls	r3, r3, #10
 800658e:	ea44 0103 	orr.w	r1, r4, r3
 8006592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006594:	4613      	mov	r3, r2
 8006596:	005b      	lsls	r3, r3, #1
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	461a      	mov	r2, r3
 800659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a0:	4413      	add	r3, r2
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 80065a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065a8:	4613      	mov	r3, r2
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	461a      	mov	r2, r3
 80065b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b4:	4413      	add	r3, r2
 80065b6:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 80065b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ba:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80065bc:	4798      	blx	r3
 80065be:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <lfs_dir_traverse+0x29a>
                    return err;
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	e021      	b.n	800660e <lfs_dir_traverse+0x2de>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 80065ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065cc:	3301      	adds	r3, #1
 80065ce:	643b      	str	r3, [r7, #64]	; 0x40
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7ff f9b7 	bl	8005946 <lfs_tag_size>
 80065d8:	4602      	mov	r2, r0
 80065da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065dc:	4293      	cmp	r3, r2
 80065de:	d3be      	bcc.n	800655e <lfs_dir_traverse+0x22e>
 80065e0:	e6ad      	b.n	800633e <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 80065e2:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80065e6:	029a      	lsls	r2, r3, #10
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	18d1      	adds	r1, r2, r3
 80065ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065f0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80065f2:	4798      	blx	r3
 80065f4:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f43f aea0 	beq.w	800633e <lfs_dir_traverse+0xe>
                return err;
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	e005      	b.n	800660e <lfs_dir_traverse+0x2de>
            continue;
 8006602:	bf00      	nop
 8006604:	e69b      	b.n	800633e <lfs_dir_traverse+0xe>
                continue;
 8006606:	bf00      	nop
 8006608:	e699      	b.n	800633e <lfs_dir_traverse+0xe>
                continue;
 800660a:	bf00      	nop
    while (true) {
 800660c:	e697      	b.n	800633e <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800660e:	4618      	mov	r0, r3
 8006610:	374c      	adds	r7, #76	; 0x4c
 8006612:	46bd      	mov	sp, r7
 8006614:	bd90      	pop	{r4, r7, pc}
 8006616:	bf00      	nop
 8006618:	7ffffc00 	.word	0x7ffffc00
 800661c:	7ff00000 	.word	0x7ff00000
 8006620:	0800627d 	.word	0x0800627d
 8006624:	600ffc00 	.word	0x600ffc00

08006628 <lfs_dir_fetchmatch>:

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b09f      	sub	sp, #124	; 0x7c
 800662c:	af04      	add	r7, sp, #16
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
 8006634:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 8006636:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800663a:	667b      	str	r3, [r7, #100]	; 0x64

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800663c:	2300      	movs	r3, #0
 800663e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006640:	2300      	movs	r3, #0
 8006642:	633b      	str	r3, [r7, #48]	; 0x30
    int r = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 8006648:	2300      	movs	r3, #0
 800664a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800664c:	e052      	b.n	80066f4 <lfs_dir_fetchmatch+0xcc>
        int err = lfs_bd_read(lfs,
 800664e:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 8006650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 8006658:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800665a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800665e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006660:	0092      	lsls	r2, r2, #2
 8006662:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 8006664:	2104      	movs	r1, #4
 8006666:	9103      	str	r1, [sp, #12]
 8006668:	9202      	str	r2, [sp, #8]
 800666a:	2200      	movs	r2, #0
 800666c:	9201      	str	r2, [sp, #4]
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	2304      	movs	r3, #4
 8006672:	4602      	mov	r2, r0
 8006674:	2100      	movs	r1, #0
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f7fe fd92 	bl	80051a0 <lfs_bd_read>
 800667c:	6378      	str	r0, [r7, #52]	; 0x34
        revs[i] = lfs_fromle32(revs[i]);
 800667e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	3368      	adds	r3, #104	; 0x68
 8006684:	443b      	add	r3, r7
 8006686:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fe fd1c 	bl	80050c8 <lfs_fromle32>
 8006690:	4602      	mov	r2, r0
 8006692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	3368      	adds	r3, #104	; 0x68
 8006698:	443b      	add	r3, r7
 800669a:	f843 2c3c 	str.w	r2, [r3, #-60]
        if (err && err != LFS_ERR_CORRUPT) {
 800669e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <lfs_dir_fetchmatch+0x88>
 80066a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80066aa:	d001      	beq.n	80066b0 <lfs_dir_fetchmatch+0x88>
            return err;
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	e2e9      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
        }

        if (err != LFS_ERR_CORRUPT &&
 80066b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80066b6:	d01a      	beq.n	80066ee <lfs_dir_fetchmatch+0xc6>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 80066b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	3368      	adds	r3, #104	; 0x68
 80066be:	443b      	add	r3, r7
 80066c0:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 80066c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c6:	3301      	adds	r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	bfb8      	it	lt
 80066d0:	425b      	neglt	r3, r3
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	3368      	adds	r3, #104	; 0x68
 80066d6:	443b      	add	r3, r7
 80066d8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80066dc:	4619      	mov	r1, r3
 80066de:	4610      	mov	r0, r2
 80066e0:	f7fe fce4 	bl	80050ac <lfs_scmp>
 80066e4:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd01      	ble.n	80066ee <lfs_dir_fetchmatch+0xc6>
            r = i;
 80066ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066ec:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 80066ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f0:	3301      	adds	r3, #1
 80066f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	dda9      	ble.n	800664e <lfs_dir_fetchmatch+0x26>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 80066fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	bfb8      	it	lt
 8006704:	425b      	neglt	r3, r3
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4413      	add	r3, r2
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 8006712:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006714:	3301      	adds	r3, #1
 8006716:	2b00      	cmp	r3, #0
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	bfb8      	it	lt
 800671e:	425b      	neglt	r3, r3
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4413      	add	r3, r2
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800672c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800672e:	2b00      	cmp	r3, #0
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	bfb8      	it	lt
 8006736:	425b      	neglt	r3, r3
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	3368      	adds	r3, #104	; 0x68
 800673c:	443b      	add	r3, r7
 800673e:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2200      	movs	r2, #0
 800674a:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800674c:	2300      	movs	r3, #0
 800674e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006750:	e289      	b.n	8006c66 <lfs_dir_fetchmatch+0x63e>
        lfs_off_t off = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = LFS_BLOCK_NULL;
 8006756:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800675a:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800675c:	2300      	movs	r3, #0
 800675e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 8006762:	4a90      	ldr	r2, [pc, #576]	; (80069a4 <lfs_dir_fetchmatch+0x37c>)
 8006764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800676c:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 8006770:	2300      	movs	r3, #0
 8006772:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 8006776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006778:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fcad 	bl	80050de <lfs_tole32>
 8006784:	4602      	mov	r2, r0
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(LFS_BLOCK_NULL, &dir->rev, sizeof(dir->rev));
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	3308      	adds	r3, #8
 800678e:	2204      	movs	r2, #4
 8006790:	4619      	mov	r1, r3
 8006792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006796:	f003 fae9 	bl	8009d6c <lfs_crc>
 800679a:	6478      	str	r0, [r7, #68]	; 0x44
        dir->rev = lfs_fromle32(dir->rev);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fc91 	bl	80050c8 <lfs_fromle32>
 80067a6:	4602      	mov	r2, r0
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 80067ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80067ae:	f7ff f8d7 	bl	8005960 <lfs_tag_dsize>
 80067b2:	4602      	mov	r2, r0
 80067b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b6:	4413      	add	r3, r2
 80067b8:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 80067ba:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 80067c0:	69d8      	ldr	r0, [r3, #28]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2204      	movs	r2, #4
 80067c8:	9203      	str	r2, [sp, #12]
 80067ca:	f107 0220 	add.w	r2, r7, #32
 80067ce:	9202      	str	r2, [sp, #8]
 80067d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	460a      	mov	r2, r1
 80067da:	2100      	movs	r1, #0
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7fe fcdf 	bl	80051a0 <lfs_bd_read>
 80067e2:	63f8      	str	r0, [r7, #60]	; 0x3c
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d009      	beq.n	80067fe <lfs_dir_fetchmatch+0x1d6>
                if (err == LFS_ERR_CORRUPT) {
 80067ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ec:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80067f0:	d103      	bne.n	80067fa <lfs_dir_fetchmatch+0x1d2>
                    // can't continue?
                    dir->erased = false;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2200      	movs	r2, #0
 80067f6:	759a      	strb	r2, [r3, #22]
                    break;
 80067f8:	e1bd      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
                }
                return err;
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	e242      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 80067fe:	f107 0320 	add.w	r3, r7, #32
 8006802:	2204      	movs	r2, #4
 8006804:	4619      	mov	r1, r3
 8006806:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006808:	f003 fab0 	bl	8009d6c <lfs_crc>
 800680c:	6478      	str	r0, [r7, #68]	; 0x44
            tag = lfs_frombe32(tag) ^ ptag;
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe fc70 	bl	80050f6 <lfs_frombe32>
 8006816:	4602      	mov	r2, r0
 8006818:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681a:	4053      	eors	r3, r2
 800681c:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag) ||
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff f825 	bl	8005870 <lfs_tag_isvalid>
 8006826:	4603      	mov	r3, r0
 8006828:	f083 0301 	eor.w	r3, r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10b      	bne.n	800684a <lfs_dir_fetchmatch+0x222>
                    off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff f893 	bl	8005960 <lfs_tag_dsize>
 800683a:	4602      	mov	r2, r0
 800683c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683e:	441a      	add	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006844:	69db      	ldr	r3, [r3, #28]
            if (!lfs_tag_isvalid(tag) ||
 8006846:	429a      	cmp	r2, r3
 8006848:	d91b      	bls.n	8006882 <lfs_dir_fetchmatch+0x25a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800684a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800684c:	f7ff f831 	bl	80058b2 <lfs_tag_type1>
 8006850:	4603      	mov	r3, r0
 8006852:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006856:	d10d      	bne.n	8006874 <lfs_dir_fetchmatch+0x24c>
                        dir->off % lfs->cfg->prog_size == 0);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006860:	6992      	ldr	r2, [r2, #24]
 8006862:	fbb3 f1f2 	udiv	r1, r3, r2
 8006866:	fb01 f202 	mul.w	r2, r1, r2
 800686a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <lfs_dir_fetchmatch+0x24c>
 8006870:	2301      	movs	r3, #1
 8006872:	e000      	b.n	8006876 <lfs_dir_fetchmatch+0x24e>
 8006874:	2300      	movs	r3, #0
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	b2da      	uxtb	r2, r3
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	759a      	strb	r2, [r3, #22]
                break;
 8006880:	e179      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
            }

            ptag = tag;
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 8006886:	6a3b      	ldr	r3, [r7, #32]
 8006888:	4618      	mov	r0, r3
 800688a:	f7ff f812 	bl	80058b2 <lfs_tag_type1>
 800688e:	4603      	mov	r3, r0
 8006890:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006894:	d15f      	bne.n	8006956 <lfs_dir_fetchmatch+0x32e>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 8006896:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 800689c:	69dc      	ldr	r4, [r3, #28]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068a4:	3204      	adds	r2, #4
 80068a6:	2104      	movs	r1, #4
 80068a8:	9103      	str	r1, [sp, #12]
 80068aa:	f107 011c 	add.w	r1, r7, #28
 80068ae:	9102      	str	r1, [sp, #8]
 80068b0:	9201      	str	r2, [sp, #4]
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	4623      	mov	r3, r4
 80068b6:	4602      	mov	r2, r0
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7fe fc70 	bl	80051a0 <lfs_bd_read>
 80068c0:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 80068c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <lfs_dir_fetchmatch+0x2b4>
                    if (err == LFS_ERR_CORRUPT) {
 80068c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80068ce:	d103      	bne.n	80068d8 <lfs_dir_fetchmatch+0x2b0>
                        dir->erased = false;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2200      	movs	r2, #0
 80068d4:	759a      	strb	r2, [r3, #22]
                        break;
 80068d6:	e14e      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
                    }
                    return err;
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80068da:	e1d3      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
                }
                dcrc = lfs_fromle32(dcrc);
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fbf2 	bl	80050c8 <lfs_fromle32>
 80068e4:	4603      	mov	r3, r0
 80068e6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d003      	beq.n	80068f8 <lfs_dir_fetchmatch+0x2d0>
                    dir->erased = false;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	759a      	strb	r2, [r3, #22]
                    break;
 80068f6:	e13e      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	4618      	mov	r0, r3
 80068fc:	f7fe fff9 	bl	80058f2 <lfs_tag_chunk>
 8006900:	4603      	mov	r3, r0
 8006902:	07db      	lsls	r3, r3, #31
 8006904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006906:	4053      	eors	r3, r2
 8006908:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers
                lfs->seed ^= crc;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006910:	405a      	eors	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 8006916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006918:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff f81f 	bl	8005960 <lfs_tag_dsize>
 8006922:	4602      	mov	r2, r0
 8006924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006926:	441a      	add	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006930:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8006938:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 8006940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800694c:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = LFS_BLOCK_NULL;
 800694e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	e72a      	b.n	80067ac <lfs_dir_fetchmatch+0x184>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 8006956:	2304      	movs	r3, #4
 8006958:	643b      	str	r3, [r7, #64]	; 0x40
 800695a:	e030      	b.n	80069be <lfs_dir_fetchmatch+0x396>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800695c:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006962:	69dc      	ldr	r4, [r3, #28]
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800696a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800696c:	440a      	add	r2, r1
 800696e:	2101      	movs	r1, #1
 8006970:	9103      	str	r1, [sp, #12]
 8006972:	f107 011b 	add.w	r1, r7, #27
 8006976:	9102      	str	r1, [sp, #8]
 8006978:	9201      	str	r2, [sp, #4]
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4623      	mov	r3, r4
 800697e:	4602      	mov	r2, r0
 8006980:	2100      	movs	r1, #0
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f7fe fc0c 	bl	80051a0 <lfs_bd_read>
 8006988:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800698a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00b      	beq.n	80069a8 <lfs_dir_fetchmatch+0x380>
                    if (err == LFS_ERR_CORRUPT) {
 8006990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006992:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006996:	d103      	bne.n	80069a0 <lfs_dir_fetchmatch+0x378>
                        dir->erased = false;
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	759a      	strb	r2, [r3, #22]
 800699e:	e016      	b.n	80069ce <lfs_dir_fetchmatch+0x3a6>
                        break;
                    }
                    return err;
 80069a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 80069a2:	e16f      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
 80069a4:	08013b48 	.word	0x08013b48
                }

                crc = lfs_crc(crc, &dat, 1);
 80069a8:	f107 031b 	add.w	r3, r7, #27
 80069ac:	2201      	movs	r2, #1
 80069ae:	4619      	mov	r1, r3
 80069b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80069b2:	f003 f9db 	bl	8009d6c <lfs_crc>
 80069b6:	6478      	str	r0, [r7, #68]	; 0x44
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 80069b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ba:	3301      	adds	r3, #1
 80069bc:	643b      	str	r3, [r7, #64]	; 0x40
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fe ffcd 	bl	8005960 <lfs_tag_dsize>
 80069c6:	4602      	mov	r2, r0
 80069c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d3c6      	bcc.n	800695c <lfs_dir_fetchmatch+0x334>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 80069ce:	6a3b      	ldr	r3, [r7, #32]
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe ff6e 	bl	80058b2 <lfs_tag_type1>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d113      	bne.n	8006a04 <lfs_dir_fetchmatch+0x3dc>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe ffa1 	bl	8005926 <lfs_tag_id>
 80069e4:	4603      	mov	r3, r0
 80069e6:	461a      	mov	r2, r3
 80069e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069ec:	4293      	cmp	r3, r2
 80069ee:	f200 8081 	bhi.w	8006af4 <lfs_dir_fetchmatch+0x4cc>
                    tempcount = lfs_tag_id(tag) + 1;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fe ff96 	bl	8005926 <lfs_tag_id>
 80069fa:	4603      	mov	r3, r0
 80069fc:	3301      	adds	r3, #1
 80069fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006a02:	e077      	b.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7fe ff53 	bl	80058b2 <lfs_tag_type1>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a12:	d134      	bne.n	8006a7e <lfs_dir_fetchmatch+0x456>
                tempcount += lfs_tag_splice(tag);
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7fe ff78 	bl	800590c <lfs_tag_splice>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a24:	4413      	add	r3, r2
 8006a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 8006a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a2c:	4b97      	ldr	r3, [pc, #604]	; (8006c8c <lfs_dir_fetchmatch+0x664>)
 8006a2e:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 8006a30:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8006a34:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8006a38:	6a3a      	ldr	r2, [r7, #32]
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d104      	bne.n	8006a48 <lfs_dir_fetchmatch+0x420>
                    tempbesttag |= 0x80000000;
 8006a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a40:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a46:	e055      	b.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                } else if (tempbesttag != -1 &&
 8006a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4e:	d051      	beq.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe ff67 	bl	8005926 <lfs_tag_id>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461c      	mov	r4, r3
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe ff61 	bl	8005926 <lfs_tag_id>
 8006a64:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d844      	bhi.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe ff4d 	bl	800590c <lfs_tag_splice>
 8006a72:	4603      	mov	r3, r0
 8006a74:	029a      	lsls	r2, r3, #10
 8006a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a78:	4413      	add	r3, r2
 8006a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7c:	e03a      	b.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe ff16 	bl	80058b2 <lfs_tag_type1>
 8006a86:	4603      	mov	r3, r0
 8006a88:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006a8c:	d132      	bne.n	8006af4 <lfs_dir_fetchmatch+0x4cc>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fe ff2e 	bl	80058f2 <lfs_tag_chunk>
 8006a96:	4603      	mov	r3, r0
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	bf14      	ite	ne
 8006aa0:	2301      	movne	r3, #1
 8006aa2:	2300      	moveq	r3, #0
 8006aa4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 8006aa8:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                err = lfs_bd_read(lfs,
 8006aae:	69dc      	ldr	r4, [r3, #28]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ab6:	3204      	adds	r2, #4
 8006ab8:	2108      	movs	r1, #8
 8006aba:	9103      	str	r1, [sp, #12]
 8006abc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8006ac0:	9102      	str	r1, [sp, #8]
 8006ac2:	9201      	str	r2, [sp, #4]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	4602      	mov	r2, r0
 8006aca:	2100      	movs	r1, #0
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f7fe fb67 	bl	80051a0 <lfs_bd_read>
 8006ad2:	63f8      	str	r0, [r7, #60]	; 0x3c
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 8006ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d007      	beq.n	8006aea <lfs_dir_fetchmatch+0x4c2>
                    if (err == LFS_ERR_CORRUPT) {
 8006ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006adc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006ae0:	d103      	bne.n	8006aea <lfs_dir_fetchmatch+0x4c2>
                        dir->erased = false;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	759a      	strb	r2, [r3, #22]
                        break;
 8006ae8:	e045      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
                    }
                }
                lfs_pair_fromle32(temptail);
 8006aea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aee:	4618      	mov	r0, r3
 8006af0:	f7fe fe8a 	bl	8005808 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 8006af4:	6a3a      	ldr	r2, [r7, #32]
 8006af6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af8:	405a      	eors	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	4013      	ands	r3, r2
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f47f ae54 	bne.w	80067ac <lfs_dir_fetchmatch+0x184>
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006b04:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006b0a:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0e:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	f107 0210 	add.w	r2, r7, #16
 8006b16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006b1a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8006b1e:	4798      	blx	r3
 8006b20:	63b8      	str	r0, [r7, #56]	; 0x38
                if (res < 0) {
 8006b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	da09      	bge.n	8006b3c <lfs_dir_fetchmatch+0x514>
                    if (res == LFS_ERR_CORRUPT) {
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006b2e:	d103      	bne.n	8006b38 <lfs_dir_fetchmatch+0x510>
                        dir->erased = false;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	2200      	movs	r2, #0
 8006b34:	759a      	strb	r2, [r3, #22]
 8006b36:	e01e      	b.n	8006b76 <lfs_dir_fetchmatch+0x54e>
                        break;
                    }
                    return res;
 8006b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                return err;
 8006b3a:	e0a3      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
                }

                if (res == LFS_CMP_EQ) {
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <lfs_dir_fetchmatch+0x520>
                    // found a match
                    tempbesttag = tag;
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b46:	e631      	b.n	80067ac <lfs_dir_fetchmatch+0x184>
                } else if (res == LFS_CMP_GT &&
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	f47f ae2e 	bne.w	80067ac <lfs_dir_fetchmatch+0x184>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fee7 	bl	8005926 <lfs_tag_id>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe fee1 	bl	8005926 <lfs_tag_id>
 8006b64:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 8006b66:	429c      	cmp	r4, r3
 8006b68:	f63f ae20 	bhi.w	80067ac <lfs_dir_fetchmatch+0x184>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b74:	e61a      	b.n	80067ac <lfs_dir_fetchmatch+0x184>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d100      	bne.n	8006b80 <lfs_dir_fetchmatch+0x558>
 8006b7e:	e05d      	b.n	8006c3c <lfs_dir_fetchmatch+0x614>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gstate, dir->pair)) {
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3330      	adds	r3, #48	; 0x30
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	4611      	mov	r1, r2
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7fe ff65 	bl	8005a58 <lfs_gstate_hasmovehere>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d028      	beq.n	8006be6 <lfs_dir_fetchmatch+0x5be>
                if (lfs_tag_id(lfs->gstate.tag) == lfs_tag_id(besttag)) {
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f7fe fec4 	bl	8005926 <lfs_tag_id>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	461c      	mov	r4, r3
 8006ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7fe febe 	bl	8005926 <lfs_tag_id>
 8006baa:	4603      	mov	r3, r0
 8006bac:	429c      	cmp	r4, r3
 8006bae:	d104      	bne.n	8006bba <lfs_dir_fetchmatch+0x592>
                    besttag |= 0x80000000;
 8006bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006bb6:	667b      	str	r3, [r7, #100]	; 0x64
 8006bb8:	e015      	b.n	8006be6 <lfs_dir_fetchmatch+0x5be>
                } else if (besttag != -1 &&
 8006bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d011      	beq.n	8006be6 <lfs_dir_fetchmatch+0x5be>
                        lfs_tag_id(lfs->gstate.tag) < lfs_tag_id(besttag)) {
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fead 	bl	8005926 <lfs_tag_id>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461c      	mov	r4, r3
 8006bd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe fea7 	bl	8005926 <lfs_tag_id>
 8006bd8:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d203      	bcs.n	8006be6 <lfs_dir_fetchmatch+0x5be>
                    besttag -= LFS_MKTAG(0, 1, 0);
 8006bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006be0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006be4:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 8006be6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <lfs_dir_fetchmatch+0x5e4>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 8006bec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fe99 	bl	8005926 <lfs_tag_id>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	8a9b      	ldrh	r3, [r3, #20]
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe f9f2 	bl	8004fe8 <lfs_min>
 8006c04:	4603      	mov	r3, r0
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c0a:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 8006c0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fe fe2e 	bl	8005870 <lfs_tag_isvalid>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <lfs_dir_fetchmatch+0x5f6>
                return besttag;
 8006c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c1c:	e032      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
            } else if (lfs_tag_id(besttag) < dir->count) {
 8006c1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fe80 	bl	8005926 <lfs_tag_id>
 8006c26:	4603      	mov	r3, r0
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	8a9b      	ldrh	r3, [r3, #20]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d202      	bcs.n	8006c38 <lfs_dir_fetchmatch+0x610>
                return LFS_ERR_NOENT;
 8006c32:	f06f 0301 	mvn.w	r3, #1
 8006c36:	e025      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
            } else {
                return 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	e023      	b.n	8006c84 <lfs_dir_fetchmatch+0x65c>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd88 	bl	8005754 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 8006c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c46:	3301      	adds	r3, #1
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	bfb8      	it	lt
 8006c50:	425b      	neglt	r3, r3
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	3368      	adds	r3, #104	; 0x68
 8006c56:	443b      	add	r3, r7
 8006c58:	f853 2c3c 	ldr.w	r2, [r3, #-60]
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 8006c60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c62:	3301      	adds	r3, #1
 8006c64:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	f77f ad72 	ble.w	8006752 <lfs_dir_fetchmatch+0x12a>
    }

    LFS_ERROR("Corrupted dir pair at %"PRIx32" %"PRIx32,
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f240 31cd 	movw	r1, #973	; 0x3cd
 8006c7a:	4805      	ldr	r0, [pc, #20]	; (8006c90 <lfs_dir_fetchmatch+0x668>)
 8006c7c:	f00b fc12 	bl	80124a4 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 8006c80:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	376c      	adds	r7, #108	; 0x6c
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}
 8006c8c:	000ffc00 	.word	0x000ffc00
 8006c90:	08013b18 	.word	0x08013b18

08006c94 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b088      	sub	sp, #32
 8006c98:	af04      	add	r7, sp, #16
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=0 can never match a tag since this
    // pattern has the invalid bit set
    return lfs_dir_fetchmatch(lfs, dir, pair, -1, 0, NULL, NULL, NULL);
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	2300      	movs	r3, #0
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff fcb5 	bl	8006628 <lfs_dir_fetchmatch>
 8006cbe:	4603      	mov	r3, r0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        struct lfs_gstate *gstate) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af02      	add	r7, sp, #8
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	607a      	str	r2, [r7, #4]
    struct lfs_gstate temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 8006cd4:	f107 0310 	add.w	r3, r7, #16
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	4b12      	ldr	r3, [pc, #72]	; (8006d24 <lfs_dir_getgstate+0x5c>)
 8006cdc:	4a12      	ldr	r2, [pc, #72]	; (8006d28 <lfs_dir_getgstate+0x60>)
 8006cde:	68b9      	ldr	r1, [r7, #8]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff f9d5 	bl	8006090 <lfs_dir_get>
 8006ce6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da05      	bge.n	8006cfa <lfs_dir_getgstate+0x32>
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f113 0f02 	cmn.w	r3, #2
 8006cf4:	d001      	beq.n	8006cfa <lfs_dir_getgstate+0x32>
        return res;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	e00f      	b.n	8006d1a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	f113 0f02 	cmn.w	r3, #2
 8006d00:	d00a      	beq.n	8006d18 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 8006d02:	f107 0310 	add.w	r3, r7, #16
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ff2a 	bl	8005b60 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 8006d0c:	f107 0310 	add.w	r3, r7, #16
 8006d10:	4619      	mov	r1, r3
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fe fe38 	bl	8005988 <lfs_gstate_xor>
    }

    return 0;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	7ff0000c 	.word	0x7ff0000c
 8006d28:	7ff00000 	.word	0x7ff00000

08006d2c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b08f      	sub	sp, #60	; 0x3c
 8006d30:	af04      	add	r7, sp, #16
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 8006d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 8006d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d48:	689c      	ldr	r4, [r3, #8]
 8006d4a:	68b8      	ldr	r0, [r7, #8]
 8006d4c:	f7fe fdfb 	bl	8005946 <lfs_tag_size>
 8006d50:	4603      	mov	r3, r0
 8006d52:	4619      	mov	r1, r3
 8006d54:	4620      	mov	r0, r4
 8006d56:	f7fe f947 	bl	8004fe8 <lfs_min>
 8006d5a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 8006d5c:	6a3c      	ldr	r4, [r7, #32]
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	6852      	ldr	r2, [r2, #4]
 8006d66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d68:	6849      	ldr	r1, [r1, #4]
 8006d6a:	69b8      	ldr	r0, [r7, #24]
 8006d6c:	9003      	str	r0, [sp, #12]
 8006d6e:	9102      	str	r1, [sp, #8]
 8006d70:	9201      	str	r2, [sp, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	4622      	mov	r2, r4
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6a38      	ldr	r0, [r7, #32]
 8006d7c:	f7fe fb20 	bl	80053c0 <lfs_bd_cmp>
 8006d80:	6178      	str	r0, [r7, #20]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
    if (res != LFS_CMP_EQ) {
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d001      	beq.n	8006d8c <lfs_dir_find_match+0x60>
        return res;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	e014      	b.n	8006db6 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	689c      	ldr	r4, [r3, #8]
 8006d90:	68b8      	ldr	r0, [r7, #8]
 8006d92:	f7fe fdd8 	bl	8005946 <lfs_tag_size>
 8006d96:	4603      	mov	r3, r0
 8006d98:	429c      	cmp	r4, r3
 8006d9a:	d00b      	beq.n	8006db4 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	689c      	ldr	r4, [r3, #8]
 8006da0:	68b8      	ldr	r0, [r7, #8]
 8006da2:	f7fe fdd0 	bl	8005946 <lfs_tag_size>
 8006da6:	4603      	mov	r3, r0
 8006da8:	429c      	cmp	r4, r3
 8006daa:	d201      	bcs.n	8006db0 <lfs_dir_find_match+0x84>
 8006dac:	2301      	movs	r3, #1
 8006dae:	e002      	b.n	8006db6 <lfs_dir_find_match+0x8a>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e000      	b.n	8006db6 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	372c      	adds	r7, #44	; 0x2c
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd90      	pop	{r4, r7, pc}

08006dbe <lfs_dir_commitprog>:
    lfs_off_t begin;
    lfs_off_t end;
};

static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 8006dbe:	b590      	push	{r4, r7, lr}
 8006dc0:	b08b      	sub	sp, #44	; 0x2c
 8006dc2:	af04      	add	r7, sp, #16
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
 8006dca:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f103 0010 	add.w	r0, r3, #16
 8006dd2:	68fc      	ldr	r4, [r7, #12]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	9103      	str	r1, [sp, #12]
 8006de0:	6879      	ldr	r1, [r7, #4]
 8006de2:	9102      	str	r1, [sp, #8]
 8006de4:	9201      	str	r2, [sp, #4]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2300      	movs	r3, #0
 8006dea:	4622      	mov	r2, r4
 8006dec:	4601      	mov	r1, r0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f7fe fbda 	bl	80055a8 <lfs_bd_prog>
 8006df4:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <lfs_dir_commitprog+0x42>
        return err;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	e010      	b.n	8006e22 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f002 ffaf 	bl	8009d6c <lfs_crc>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	60da      	str	r2, [r3, #12]
    commit->off += size;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	441a      	add	r2, r3
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
    return 0;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd90      	pop	{r4, r7, pc}

08006e2a <lfs_dir_commitattr>:

static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 8006e2a:	b590      	push	{r4, r7, lr}
 8006e2c:	b08f      	sub	sp, #60	; 0x3c
 8006e2e:	af04      	add	r7, sp, #16
 8006e30:	60f8      	str	r0, [r7, #12]
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	607a      	str	r2, [r7, #4]
 8006e36:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fe fd91 	bl	8005960 <lfs_tag_dsize>
 8006e3e:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	441a      	add	r2, r3
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	695b      	ldr	r3, [r3, #20]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d902      	bls.n	8006e56 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 8006e50:	f06f 031b 	mvn.w	r3, #27
 8006e54:	e065      	b.n	8006f22 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	4053      	eors	r3, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fe f953 	bl	800510e <lfs_tobe32>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 8006e6c:	f107 0214 	add.w	r2, r7, #20
 8006e70:	2304      	movs	r3, #4
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff ffa2 	bl	8006dbe <lfs_dir_commitprog>
 8006e7a:	61f8      	str	r0, [r7, #28]
    if (err) {
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <lfs_dir_commitattr+0x5c>
        return err;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	e04d      	b.n	8006f22 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	db0c      	blt.n	8006ea6 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 8006e8c:	6a3b      	ldr	r3, [r7, #32]
 8006e8e:	3b04      	subs	r3, #4
 8006e90:	683a      	ldr	r2, [r7, #0]
 8006e92:	68b9      	ldr	r1, [r7, #8]
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7ff ff92 	bl	8006dbe <lfs_dir_commitprog>
 8006e9a:	61f8      	str	r0, [r7, #28]
        if (err) {
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d039      	beq.n	8006f16 <lfs_dir_commitattr+0xec>
            return err;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	e03d      	b.n	8006f22 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
 8006eae:	e02d      	b.n	8006f0c <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 8006eb0:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 8006eb2:	6a3a      	ldr	r2, [r7, #32]
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 8006eb8:	1f1c      	subs	r4, r3, #4
 8006eba:	69bb      	ldr	r3, [r7, #24]
 8006ebc:	681b      	ldr	r3, [r3, #0]
                    disk->block, disk->off+i, &dat, 1);
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 8006ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec4:	440a      	add	r2, r1
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	9103      	str	r1, [sp, #12]
 8006eca:	f107 0113 	add.w	r1, r7, #19
 8006ece:	9102      	str	r1, [sp, #8]
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4623      	mov	r3, r4
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	2100      	movs	r1, #0
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7fe f960 	bl	80051a0 <lfs_bd_read>
 8006ee0:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <lfs_dir_commitattr+0xc2>
                return err;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	e01a      	b.n	8006f22 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 8006eec:	f107 0213 	add.w	r2, r7, #19
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff62 	bl	8006dbe <lfs_dir_commitprog>
 8006efa:	61f8      	str	r0, [r7, #28]
            if (err) {
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <lfs_dir_commitattr+0xdc>
                return err;
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	e00d      	b.n	8006f22 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 8006f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f08:	3301      	adds	r3, #1
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d3cc      	bcc.n	8006eb0 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	609a      	str	r2, [r3, #8]
    return 0;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	372c      	adds	r7, #44	; 0x2c
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}

08006f2a <lfs_dir_commitcrc>:

static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 8006f2a:	b590      	push	{r4, r7, lr}
 8006f2c:	b097      	sub	sp, #92	; 0x5c
 8006f2e:	af04      	add	r7, sp, #16
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t off1 = commit->off + sizeof(lfs_tag_t);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	1d1a      	adds	r2, r3, #4
            lfs->cfg->prog_size);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + sizeof(uint32_t),
 8006f44:	699b      	ldr	r3, [r3, #24]
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f7fe f872 	bl	8005032 <lfs_alignup>
 8006f4e:	62f8      	str	r0, [r7, #44]	; 0x2c

    // create crc tags to fill up remainder of commit, note that
    // padding is not crcd, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 8006f50:	e09c      	b.n	800708c <lfs_dir_commitcrc+0x162>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 8006f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe f83f 	bl	8004fe8 <lfs_min>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	4413      	add	r3, r2
 8006f70:	647b      	str	r3, [r7, #68]	; 0x44
        if (noff < end) {
 8006f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	429a      	cmp	r2, r3
 8006f78:	d206      	bcs.n	8006f88 <lfs_dir_commitcrc+0x5e>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	3b08      	subs	r3, #8
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006f82:	f7fe f831 	bl	8004fe8 <lfs_min>
 8006f86:	6478      	str	r0, [r7, #68]	; 0x44
        }

        // read erased state from next program unit
        lfs_tag_t tag = LFS_BLOCK_NULL;
 8006f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f8c:	61bb      	str	r3, [r7, #24]
        int err = lfs_bd_read(lfs,
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2204      	movs	r2, #4
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	f107 0218 	add.w	r2, r7, #24
 8006f9c:	9202      	str	r2, [sp, #8]
 8006f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa0:	9201      	str	r2, [sp, #4]
 8006fa2:	9300      	str	r3, [sp, #0]
 8006fa4:	2304      	movs	r3, #4
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	2100      	movs	r1, #0
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe f8f8 	bl	80051a0 <lfs_bd_read>
 8006fb0:	6238      	str	r0, [r7, #32]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <lfs_dir_commitcrc+0x9a>
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8006fbe:	d001      	beq.n	8006fc4 <lfs_dir_commitcrc+0x9a>
            return err;
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	e0d3      	b.n	800716c <lfs_dir_commitcrc+0x242>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe f895 	bl	80050f6 <lfs_frombe32>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	43db      	mvns	r3, r3
 8006fd0:	0fdb      	lsrs	r3, r3, #31
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	77fb      	strb	r3, [r7, #31]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 8006fdc:	7ffb      	ldrb	r3, [r7, #31]
 8006fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fe2:	051a      	lsls	r2, r3, #20
 8006fe4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	1acb      	subs	r3, r1, r3
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 8006ff0:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8006ff4:	61bb      	str	r3, [r7, #24]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	4053      	eors	r3, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fe f885 	bl	800510e <lfs_tobe32>
 8007004:	4603      	mov	r3, r0
 8007006:	613b      	str	r3, [r7, #16]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f107 0110 	add.w	r1, r7, #16
 8007010:	2204      	movs	r2, #4
 8007012:	4618      	mov	r0, r3
 8007014:	f002 feaa 	bl	8009d6c <lfs_crc>
 8007018:	4602      	mov	r2, r0
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	4618      	mov	r0, r3
 8007024:	f7fe f85b 	bl	80050de <lfs_tole32>
 8007028:	4603      	mov	r3, r0
 800702a:	617b      	str	r3, [r7, #20]
        err = lfs_bd_prog(lfs,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f103 0010 	add.w	r0, r3, #16
 8007032:	687c      	ldr	r4, [r7, #4]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	6852      	ldr	r2, [r2, #4]
 800703c:	2108      	movs	r1, #8
 800703e:	9103      	str	r1, [sp, #12]
 8007040:	f107 0110 	add.w	r1, r7, #16
 8007044:	9102      	str	r1, [sp, #8]
 8007046:	9201      	str	r2, [sp, #4]
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	2300      	movs	r3, #0
 800704c:	4622      	mov	r2, r4
 800704e:	4601      	mov	r1, r0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7fe faa9 	bl	80055a8 <lfs_bd_prog>
 8007056:	6238      	str	r0, [r7, #32]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 8007058:	6a3b      	ldr	r3, [r7, #32]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <lfs_dir_commitcrc+0x138>
            return err;
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	e084      	b.n	800716c <lfs_dir_commitcrc+0x242>
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	4618      	mov	r0, r3
 8007066:	f7fe fc6e 	bl	8005946 <lfs_tag_size>
 800706a:	4603      	mov	r3, r0
 800706c:	1d1a      	adds	r2, r3, #4
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	441a      	add	r2, r3
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 8007078:	7ffb      	ldrb	r3, [r7, #31]
 800707a:	07da      	lsls	r2, r3, #31
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	405a      	eors	r2, r3
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	609a      	str	r2, [r3, #8]
        commit->crc = LFS_BLOCK_NULL; // reset crc for next "commit"
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800708a:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007092:	429a      	cmp	r2, r3
 8007094:	f63f af5d 	bhi.w	8006f52 <lfs_dir_commitcrc+0x28>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f103 0110 	add.w	r1, r3, #16
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	2300      	movs	r3, #0
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fe fa4c 	bl	8005540 <lfs_bd_sync>
 80070a8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (err) {
 80070aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <lfs_dir_commitcrc+0x18a>
        return err;
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	e05b      	b.n	800716c <lfs_dir_commitcrc+0x242>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	643b      	str	r3, [r7, #64]	; 0x40
    lfs_off_t noff = off1;
 80070ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 80070be:	e050      	b.n	8007162 <lfs_dir_commitcrc+0x238>
        uint32_t crc = LFS_BLOCK_NULL;
 80070c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070c4:	63bb      	str	r3, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 80070c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	e025      	b.n	8007118 <lfs_dir_commitcrc+0x1ee>
            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 80070cc:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 80070ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070d2:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 80070d4:	1d18      	adds	r0, r3, #4
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2201      	movs	r2, #1
 80070dc:	9203      	str	r2, [sp, #12]
 80070de:	f107 020f 	add.w	r2, r7, #15
 80070e2:	9202      	str	r2, [sp, #8]
 80070e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e6:	9201      	str	r2, [sp, #4]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4603      	mov	r3, r0
 80070ec:	460a      	mov	r2, r1
 80070ee:	2100      	movs	r1, #0
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f7fe f855 	bl	80051a0 <lfs_bd_read>
 80070f6:	62b8      	str	r0, [r7, #40]	; 0x28
                    commit->block, i, &dat, 1);
            if (err) {
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d001      	beq.n	8007102 <lfs_dir_commitcrc+0x1d8>
                return err;
 80070fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007100:	e034      	b.n	800716c <lfs_dir_commitcrc+0x242>
            }

            crc = lfs_crc(crc, &dat, 1);
 8007102:	f107 030f 	add.w	r3, r7, #15
 8007106:	2201      	movs	r2, #1
 8007108:	4619      	mov	r1, r3
 800710a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800710c:	f002 fe2e 	bl	8009d6c <lfs_crc>
 8007110:	63b8      	str	r0, [r7, #56]	; 0x38
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 8007112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007114:	3301      	adds	r3, #1
 8007116:	637b      	str	r3, [r7, #52]	; 0x34
 8007118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800711a:	3304      	adds	r3, #4
 800711c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800711e:	429a      	cmp	r2, r3
 8007120:	d3d4      	bcc.n	80070cc <lfs_dir_commitcrc+0x1a2>
        }

        // detected write error?
        if (crc != 0) {
 8007122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d002      	beq.n	800712e <lfs_dir_commitcrc+0x204>
            return LFS_ERR_CORRUPT;
 8007128:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800712c:	e01e      	b.n	800716c <lfs_dir_commitcrc+0x242>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800712e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007132:	1ad3      	subs	r3, r2, r3
 8007134:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8007138:	4618      	mov	r0, r3
 800713a:	f7fd ff55 	bl	8004fe8 <lfs_min>
 800713e:	4602      	mov	r2, r0
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007142:	4413      	add	r3, r2
 8007144:	643b      	str	r3, [r7, #64]	; 0x40
        if (off < end) {
 8007146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800714a:	429a      	cmp	r2, r3
 800714c:	d206      	bcs.n	800715c <lfs_dir_commitcrc+0x232>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800714e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007150:	3b08      	subs	r3, #8
 8007152:	4619      	mov	r1, r3
 8007154:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007156:	f7fd ff47 	bl	8004fe8 <lfs_min>
 800715a:	6438      	str	r0, [r7, #64]	; 0x40
        }
        noff = off + sizeof(uint32_t);
 800715c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715e:	3304      	adds	r3, #4
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
    while (off < end) {
 8007162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007166:	429a      	cmp	r2, r3
 8007168:	d3aa      	bcc.n	80070c0 <lfs_dir_commitcrc+0x196>
    }

    return 0;
 800716a:	2300      	movs	r3, #0
}
 800716c:	4618      	mov	r0, r3
 800716e:	374c      	adds	r7, #76	; 0x4c
 8007170:	46bd      	mov	sp, r7
 8007172:	bd90      	pop	{r4, r7, pc}

08007174 <lfs_dir_alloc>:

static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 8007174:	b580      	push	{r7, lr}
 8007176:	b08a      	sub	sp, #40	; 0x28
 8007178:	af04      	add	r7, sp, #16
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	e016      	b.n	80071b2 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	3301      	adds	r3, #1
 8007188:	2b00      	cmp	r3, #0
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	bfb8      	it	lt
 8007190:	425b      	neglt	r3, r3
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	4413      	add	r3, r2
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fe fde0 	bl	8005d60 <lfs_alloc>
 80071a0:	60f8      	str	r0, [r7, #12]
        if (err) {
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <lfs_dir_alloc+0x38>
            return err;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	e048      	b.n	800723e <lfs_dir_alloc+0xca>
    for (int i = 0; i < 2; i++) {
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3301      	adds	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	dde5      	ble.n	8007184 <lfs_dir_alloc+0x10>
        }
    }

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 80071c2:	2004      	movs	r0, #4
 80071c4:	9003      	str	r0, [sp, #12]
 80071c6:	9202      	str	r2, [sp, #8]
 80071c8:	2200      	movs	r2, #0
 80071ca:	9201      	str	r2, [sp, #4]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	2304      	movs	r3, #4
 80071d0:	460a      	mov	r2, r1
 80071d2:	2100      	movs	r1, #0
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f7fd ffe3 	bl	80051a0 <lfs_bd_read>
 80071da:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f7fd ff71 	bl	80050c8 <lfs_fromle32>
 80071e6:	4602      	mov	r2, r0
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d005      	beq.n	80071fe <lfs_dir_alloc+0x8a>
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80071f8:	d001      	beq.n	80071fe <lfs_dir_alloc+0x8a>
        return err;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	e01f      	b.n	800723e <lfs_dir_alloc+0xca>
    }

    // make sure we don't immediately evict
    dir->rev += dir->rev & 1;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	3301      	adds	r3, #1
 8007204:	f023 0201 	bic.w	r2, r3, #1
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	609a      	str	r2, [r3, #8]

    // set defaults
    dir->off = sizeof(dir->rev);
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2204      	movs	r2, #4
 8007210:	60da      	str	r2, [r3, #12]
    dir->etag = LFS_BLOCK_NULL;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007218:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007226:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800722e:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	2200      	movs	r2, #0
 8007234:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <lfs_dir_drop>:

static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3348      	adds	r3, #72	; 0x48
 8007258:	461a      	mov	r2, r3
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fd33 	bl	8006cc8 <lfs_dir_getgstate>
 8007262:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <lfs_dir_drop+0x26>
        return err;
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	e022      	b.n	80072b4 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	3318      	adds	r3, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fae2 	bl	800583c <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7ddb      	ldrb	r3, [r3, #23]
 800727c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8007280:	051a      	lsls	r2, r3, #20
 8007282:	4b0e      	ldr	r3, [pc, #56]	; (80072bc <lfs_dir_drop+0x74>)
 8007284:	4313      	orrs	r3, r2
 8007286:	61fb      	str	r3, [r7, #28]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3318      	adds	r3, #24
 800728c:	623b      	str	r3, [r7, #32]
 800728e:	f107 021c 	add.w	r2, r7, #28
 8007292:	2301      	movs	r3, #1
 8007294:	68b9      	ldr	r1, [r7, #8]
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f000 fb6a 	bl	8007970 <lfs_dir_commit>
 800729c:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	3318      	adds	r3, #24
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fab0 	bl	8005808 <lfs_pair_fromle32>
    if (err) {
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <lfs_dir_drop+0x6a>
        return err;
 80072ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b0:	e000      	b.n	80072b4 <lfs_dir_drop+0x6c>
    }

    return 0;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3728      	adds	r7, #40	; 0x28
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	000ffc08 	.word	0x000ffc08

080072c0 <lfs_dir_split>:

static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b092      	sub	sp, #72	; 0x48
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
 80072cc:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 80072ce:	f107 0314 	add.w	r3, r7, #20
 80072d2:	4619      	mov	r1, r3
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f7ff ff4d 	bl	8007174 <lfs_dir_alloc>
 80072da:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 80072dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <lfs_dir_split+0x26>
        return err;
 80072e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e4:	e03c      	b.n	8007360 <lfs_dir_split+0xa0>
    }

    tail.split = dir->split;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	7ddb      	ldrb	r3, [r3, #23]
 80072ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	699b      	ldr	r3, [r3, #24]
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 80072fa:	f107 0114 	add.w	r1, r7, #20
 80072fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007302:	9302      	str	r3, [sp, #8]
 8007304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 f854 	bl	80073c0 <lfs_dir_compact>
 8007318:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <lfs_dir_split+0x64>
        return err;
 8007320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007322:	e01d      	b.n	8007360 <lfs_dir_split+0xa0>
    }

    dir->tail[0] = tail.pair[0];
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	61da      	str	r2, [r3, #28]
    dir->split = true;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2201      	movs	r2, #1
 8007334:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3320      	adds	r3, #32
 800733c:	4619      	mov	r1, r3
 800733e:	4610      	mov	r0, r2
 8007340:	f7fe fa38 	bl	80057b4 <lfs_pair_cmp>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d109      	bne.n	800735e <lfs_dir_split+0x9e>
 800734a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800734e:	2b00      	cmp	r3, #0
 8007350:	d105      	bne.n	800735e <lfs_dir_split+0x9e>
        lfs->root[0] = tail.pair[0];
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3738      	adds	r7, #56	; 0x38
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <lfs_dir_commit_size>:

static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8007378:	68b8      	ldr	r0, [r7, #8]
 800737a:	f7fe faf1 	bl	8005960 <lfs_tag_dsize>
 800737e:	4602      	mov	r2, r0
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	441a      	add	r2, r3
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	601a      	str	r2, [r3, #0]
    return 0;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <lfs_dir_commit_commit>:
struct lfs_dir_commit_commit {
    lfs_t *lfs;
    struct lfs_commit *commit;
};

static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6818      	ldr	r0, [r3, #0]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	6859      	ldr	r1, [r3, #4]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	f7ff fd3b 	bl	8006e2a <lfs_dir_commitattr>
 80073b4:	4603      	mov	r3, r0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
	...

080073c0 <lfs_dir_compact>:

static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 80073c0:	b590      	push	{r4, r7, lr}
 80073c2:	b0a9      	sub	sp, #164	; 0xa4
 80073c4:	af0a      	add	r7, sp, #40	; 0x28
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[1], dir->pair[0]};
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	653b      	str	r3, [r7, #80]	; 0x50
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	657b      	str	r3, [r7, #84]	; 0x54
    bool relocated = false;
 80073da:	2300      	movs	r3, #0
 80073dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    bool exhausted = false;
 80073e0:	2300      	movs	r3, #0
 80073e2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

    // should we split?
    while (end - begin > 1) {
 80073e6:	e080      	b.n	80074ea <lfs_dir_compact+0x12a>
        // find size
        lfs_size_t size = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	64fb      	str	r3, [r7, #76]	; 0x4c
        int err = lfs_dir_traverse(lfs,
 80073ec:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80073f0:	425b      	negs	r3, r3
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	b21b      	sxth	r3, r3
 80073f6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80073fa:	9209      	str	r2, [sp, #36]	; 0x24
 80073fc:	4a9c      	ldr	r2, [pc, #624]	; (8007670 <lfs_dir_compact+0x2b0>)
 80073fe:	9208      	str	r2, [sp, #32]
 8007400:	9307      	str	r3, [sp, #28]
 8007402:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007406:	9306      	str	r3, [sp, #24]
 8007408:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800740c:	9305      	str	r3, [sp, #20]
 800740e:	2300      	movs	r3, #0
 8007410:	9304      	str	r3, [sp, #16]
 8007412:	4b98      	ldr	r3, [pc, #608]	; (8007674 <lfs_dir_compact+0x2b4>)
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	2300      	movs	r3, #0
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	9300      	str	r3, [sp, #0]
 8007422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007426:	2200      	movs	r2, #0
 8007428:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f7fe ff7f 	bl	8006330 <lfs_dir_traverse>
 8007432:	6738      	str	r0, [r7, #112]	; 0x70
                source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 8007434:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007436:	2b00      	cmp	r3, #0
 8007438:	d001      	beq.n	800743e <lfs_dir_compact+0x7e>
            return err;
 800743a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800743c:	e27f      	b.n	800793e <lfs_dir_compact+0x57e>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800743e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007442:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007446:	1ad3      	subs	r3, r2, r3
 8007448:	2bfe      	cmp	r3, #254	; 0xfe
 800744a:	dc18      	bgt.n	800747e <lfs_dir_compact+0xbe>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup(lfs->cfg->block_size/2,
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800745a:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800745c:	085a      	lsrs	r2, r3, #1
                        lfs->cfg->prog_size))) {
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                size <= lfs_min(lfs->cfg->block_size - 36,
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	4619      	mov	r1, r3
 8007466:	4610      	mov	r0, r2
 8007468:	f7fd fde3 	bl	8005032 <lfs_alignup>
 800746c:	4603      	mov	r3, r0
 800746e:	4619      	mov	r1, r3
 8007470:	4620      	mov	r0, r4
 8007472:	f7fd fdb9 	bl	8004fe8 <lfs_min>
 8007476:	4602      	mov	r2, r0
 8007478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
        if (end - begin < 0xff &&
 800747a:	429a      	cmp	r2, r3
 800747c:	d23e      	bcs.n	80074fc <lfs_dir_compact+0x13c>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800747e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 8007482:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007486:	1ad3      	subs	r3, r2, r3
 8007488:	0fda      	lsrs	r2, r3, #31
 800748a:	4413      	add	r3, r2
 800748c:	105b      	asrs	r3, r3, #1
 800748e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8007492:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007496:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800749a:	4413      	add	r3, r2
 800749c:	b29b      	uxth	r3, r3
 800749e:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80074a2:	9202      	str	r2, [sp, #8]
 80074a4:	9301      	str	r3, [sp, #4]
 80074a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68b9      	ldr	r1, [r7, #8]
 80074b2:	68f8      	ldr	r0, [r7, #12]
 80074b4:	f7ff ff04 	bl	80072c0 <lfs_dir_split>
 80074b8:	6738      	str	r0, [r7, #112]	; 0x70
                source, begin+split, end);
        if (err) {
 80074ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00d      	beq.n	80074dc <lfs_dir_compact+0x11c>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 80074c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c2:	f113 0f1c 	cmn.w	r3, #28
 80074c6:	d107      	bne.n	80074d8 <lfs_dir_compact+0x118>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 80074d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d213      	bcs.n	8007500 <lfs_dir_compact+0x140>
                break;
            }
            return err;
 80074d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074da:	e230      	b.n	800793e <lfs_dir_compact+0x57e>
        }

        end = begin + split;
 80074dc:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80074e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074e4:	4413      	add	r3, r2
 80074e6:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
    while (end - begin > 1) {
 80074ea:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80074ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	f73f af77 	bgt.w	80073e8 <lfs_dir_compact+0x28>
 80074fa:	e002      	b.n	8007502 <lfs_dir_compact+0x142>
            break;
 80074fc:	bf00      	nop
 80074fe:	e000      	b.n	8007502 <lfs_dir_compact+0x142>
                break;
 8007500:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	609a      	str	r2, [r3, #8]
    if (lfs->cfg->block_cycles > 0 &&
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	2b00      	cmp	r3, #0
 8007514:	dd58      	ble.n	80075c8 <lfs_dir_compact+0x208>
            (dir->rev % (lfs->cfg->block_cycles+1) == 0)) {
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800751e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007520:	3201      	adds	r2, #1
 8007522:	fbb3 f1f2 	udiv	r1, r3, r2
 8007526:	fb01 f202 	mul.w	r2, r1, r2
 800752a:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800752c:	2b00      	cmp	r3, #0
 800752e:	d14b      	bne.n	80075c8 <lfs_dir_compact+0x208>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2200      	movs	r2, #0
 8007534:	647a      	str	r2, [r7, #68]	; 0x44
 8007536:	2201      	movs	r2, #1
 8007538:	64ba      	str	r2, [r7, #72]	; 0x48
 800753a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800753e:	4611      	mov	r1, r2
 8007540:	4618      	mov	r0, r3
 8007542:	f7fe f937 	bl	80057b4 <lfs_pair_cmp>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d138      	bne.n	80075be <lfs_dir_compact+0x1fe>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_size(lfs);
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f002 fbdd 	bl	8009d0c <lfs_fs_size>
 8007552:	66b8      	str	r0, [r7, #104]	; 0x68
            if (res < 0) {
 8007554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007556:	2b00      	cmp	r3, #0
 8007558:	da01      	bge.n	800755e <lfs_dir_compact+0x19e>
                return res;
 800755a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800755c:	e1ef      	b.n	800793e <lfs_dir_compact+0x57e>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	085a      	lsrs	r2, r3, #1
 8007566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007568:	429a      	cmp	r2, r3
 800756a:	d92d      	bls.n	80075c8 <lfs_dir_compact+0x208>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	461a      	mov	r2, r3
 8007572:	f240 51d6 	movw	r1, #1494	; 0x5d6
 8007576:	4840      	ldr	r0, [pc, #256]	; (8007678 <lfs_dir_compact+0x2b8>)
 8007578:	f00a ff94 	bl	80124a4 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800757c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8007580:	9302      	str	r3, [sp, #8]
 8007582:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007586:	9301      	str	r3, [sp, #4]
 8007588:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	68f8      	ldr	r0, [r7, #12]
 8007596:	f7ff fe93 	bl	80072c0 <lfs_dir_split>
 800759a:	6678      	str	r0, [r7, #100]	; 0x64
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800759c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <lfs_dir_compact+0x1ee>
 80075a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075a4:	f113 0f1c 	cmn.w	r3, #28
 80075a8:	d001      	beq.n	80075ae <lfs_dir_compact+0x1ee>
                    return err;
 80075aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ac:	e1c7      	b.n	800793e <lfs_dir_compact+0x57e>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 80075ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <lfs_dir_compact+0x208>
                    end = begin;
 80075b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80075b8:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80075bc:	e004      	b.n	80075c8 <lfs_dir_compact+0x208>
            // we can't relocate our root during migrations, as this would
            // cause the superblock to get updated, which would clobber v1
#endif
        } else {
            // we're writing too much, time to relocate
            exhausted = true;
 80075be:	2301      	movs	r3, #1
 80075c0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80075c4:	e13d      	b.n	8007842 <lfs_dir_compact+0x482>
            goto relocate;
        }
    }

    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
 80075c6:	bf00      	nop
        {
            // There's nothing special about our global delta, so feed it into
            // our local global delta
            int err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3348      	adds	r3, #72	; 0x48
 80075cc:	461a      	mov	r2, r3
 80075ce:	68b9      	ldr	r1, [r7, #8]
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fb79 	bl	8006cc8 <lfs_dir_getgstate>
 80075d6:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 80075d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <lfs_dir_compact+0x222>
                return err;
 80075de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075e0:	e1ad      	b.n	800793e <lfs_dir_compact+0x57e>
            }

            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 80075e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075e8:	2300      	movs	r3, #0
 80075ea:	633b      	str	r3, [r7, #48]	; 0x30
 80075ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f0:	637b      	str	r3, [r7, #52]	; 0x34
 80075f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80075f8:	2300      	movs	r3, #0
 80075fa:	63fb      	str	r3, [r7, #60]	; 0x3c
                .off = 0,
                .ptag = LFS_BLOCK_NULL,
                .crc = LFS_BLOCK_NULL,

                .begin = 0,
                .end = lfs->cfg->block_size - 8,
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 8007604:	643b      	str	r3, [r7, #64]	; 0x40
            };

            // erase block to write to
            err = lfs_bd_erase(lfs, dir->pair[1]);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	4619      	mov	r1, r3
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	f7fe f871 	bl	80056f4 <lfs_bd_erase>
 8007612:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 8007614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007616:	2b00      	cmp	r3, #0
 8007618:	d006      	beq.n	8007628 <lfs_dir_compact+0x268>
                if (err == LFS_ERR_CORRUPT) {
 800761a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800761c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007620:	f000 8104 	beq.w	800782c <lfs_dir_compact+0x46c>
                    goto relocate;
                }
                return err;
 8007624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007626:	e18a      	b.n	800793e <lfs_dir_compact+0x57e>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	4618      	mov	r0, r3
 800762e:	f7fd fd56 	bl	80050de <lfs_tole32>
 8007632:	4602      	mov	r2, r0
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800763e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007642:	2304      	movs	r3, #4
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff fbba 	bl	8006dbe <lfs_dir_commitprog>
 800764a:	6638      	str	r0, [r7, #96]	; 0x60
            dir->rev = lfs_fromle32(dir->rev);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f7fd fd39 	bl	80050c8 <lfs_fromle32>
 8007656:	4602      	mov	r2, r0
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	609a      	str	r2, [r3, #8]
            if (err) {
 800765c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00c      	beq.n	800767c <lfs_dir_compact+0x2bc>
                if (err == LFS_ERR_CORRUPT) {
 8007662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007664:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007668:	f000 80e2 	beq.w	8007830 <lfs_dir_compact+0x470>
                    goto relocate;
                }
                return err;
 800766c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800766e:	e166      	b.n	800793e <lfs_dir_compact+0x57e>
 8007670:	08007369 	.word	0x08007369
 8007674:	400ffc00 	.word	0x400ffc00
 8007678:	08013b5c 	.word	0x08013b5c
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800767c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007680:	425b      	negs	r3, r3
 8007682:	b29b      	uxth	r3, r3
 8007684:	b21b      	sxth	r3, r3
                    source, 0, LFS_BLOCK_NULL, attrs, attrcount, false,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	627a      	str	r2, [r7, #36]	; 0x24
 800768a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800768e:	62ba      	str	r2, [r7, #40]	; 0x28
            err = lfs_dir_traverse(lfs,
 8007690:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007694:	9209      	str	r2, [sp, #36]	; 0x24
 8007696:	4aac      	ldr	r2, [pc, #688]	; (8007948 <lfs_dir_compact+0x588>)
 8007698:	9208      	str	r2, [sp, #32]
 800769a:	9307      	str	r3, [sp, #28]
 800769c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80076a0:	9306      	str	r3, [sp, #24]
 80076a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80076a6:	9305      	str	r3, [sp, #20]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	4ba7      	ldr	r3, [pc, #668]	; (800794c <lfs_dir_compact+0x58c>)
 80076ae:	9303      	str	r3, [sp, #12]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	9301      	str	r3, [sp, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076c0:	2200      	movs	r2, #0
 80076c2:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f7fe fe32 	bl	8006330 <lfs_dir_traverse>
 80076cc:	6638      	str	r0, [r7, #96]	; 0x60
                        lfs, &commit});
            if (err) {
 80076ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d006      	beq.n	80076e2 <lfs_dir_compact+0x322>
                if (err == LFS_ERR_CORRUPT) {
 80076d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076d6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80076da:	f000 80ab 	beq.w	8007834 <lfs_dir_compact+0x474>
                    goto relocate;
                }
                return err;
 80076de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076e0:	e12d      	b.n	800793e <lfs_dir_compact+0x57e>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	3318      	adds	r3, #24
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7fe f849 	bl	800577e <lfs_pair_isnull>
 80076ec:	4603      	mov	r3, r0
 80076ee:	f083 0301 	eor.w	r3, r3, #1
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d021      	beq.n	800773c <lfs_dir_compact+0x37c>
                lfs_pair_tole32(dir->tail);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	3318      	adds	r3, #24
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fe f89d 	bl	800583c <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	7ddb      	ldrb	r3, [r3, #23]
 8007706:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800770a:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800770c:	4a90      	ldr	r2, [pc, #576]	; (8007950 <lfs_dir_compact+0x590>)
 800770e:	431a      	orrs	r2, r3
                        dir->tail);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 8007714:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff fb86 	bl	8006e2a <lfs_dir_commitattr>
 800771e:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_pair_fromle32(dir->tail);
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	3318      	adds	r3, #24
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f86f 	bl	8005808 <lfs_pair_fromle32>
                if (err) {
 800772a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800772c:	2b00      	cmp	r3, #0
 800772e:	d005      	beq.n	800773c <lfs_dir_compact+0x37c>
                    if (err == LFS_ERR_CORRUPT) {
 8007730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007732:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007736:	d07f      	beq.n	8007838 <lfs_dir_compact+0x478>
                        goto relocate;
                    }
                    return err;
 8007738:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800773a:	e100      	b.n	800793e <lfs_dir_compact+0x57e>
                }
            }

            if (!relocated && !lfs_gstate_iszero(&lfs->gdelta)) {
 800773c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007740:	f083 0301 	eor.w	r3, r3, #1
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d026      	beq.n	8007798 <lfs_dir_compact+0x3d8>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3348      	adds	r3, #72	; 0x48
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe f93f 	bl	80059d2 <lfs_gstate_iszero>
 8007754:	4603      	mov	r3, r0
 8007756:	f083 0301 	eor.w	r3, r3, #1
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01b      	beq.n	8007798 <lfs_dir_compact+0x3d8>
                // commit any globals, unless we're relocating,
                // in which case our parent will steal our globals
                lfs_gstate_tole32(&lfs->gdelta);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	3348      	adds	r3, #72	; 0x48
 8007764:	4618      	mov	r0, r3
 8007766:	f7fe fa1b 	bl	8005ba0 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(lfs->gdelta)), &lfs->gdelta);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3348      	adds	r3, #72	; 0x48
                err = lfs_dir_commitattr(lfs, &commit,
 800776e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8007772:	4a78      	ldr	r2, [pc, #480]	; (8007954 <lfs_dir_compact+0x594>)
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f7ff fb58 	bl	8006e2a <lfs_dir_commitattr>
 800777a:	6638      	str	r0, [r7, #96]	; 0x60
                lfs_gstate_fromle32(&lfs->gdelta);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	3348      	adds	r3, #72	; 0x48
 8007780:	4618      	mov	r0, r3
 8007782:	f7fe f9ed 	bl	8005b60 <lfs_gstate_fromle32>
                if (err) {
 8007786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <lfs_dir_compact+0x3d8>
                    if (err == LFS_ERR_CORRUPT) {
 800778c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800778e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007792:	d053      	beq.n	800783c <lfs_dir_compact+0x47c>
                        goto relocate;
                    }
                    return err;
 8007794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007796:	e0d2      	b.n	800793e <lfs_dir_compact+0x57e>
                }
            }

            err = lfs_dir_commitcrc(lfs, &commit);
 8007798:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800779c:	4619      	mov	r1, r3
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f7ff fbc3 	bl	8006f2a <lfs_dir_commitcrc>
 80077a4:	6638      	str	r0, [r7, #96]	; 0x60
            if (err) {
 80077a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <lfs_dir_compact+0x3f8>
                if (err == LFS_ERR_CORRUPT) {
 80077ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80077b2:	d045      	beq.n	8007840 <lfs_dir_compact+0x480>
                    goto relocate;
                }
                return err;
 80077b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077b6:	e0c2      	b.n	800793e <lfs_dir_compact+0x57e>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80077be:	6992      	ldr	r2, [r2, #24]
 80077c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80077c4:	fb01 f202 	mul.w	r2, r1, r2
 80077c8:	1a9b      	subs	r3, r3, r2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d006      	beq.n	80077dc <lfs_dir_compact+0x41c>
 80077ce:	4b62      	ldr	r3, [pc, #392]	; (8007958 <lfs_dir_compact+0x598>)
 80077d0:	4a62      	ldr	r2, [pc, #392]	; (800795c <lfs_dir_compact+0x59c>)
 80077d2:	f44f 61ca 	mov.w	r1, #1616	; 0x650
 80077d6:	4862      	ldr	r0, [pc, #392]	; (8007960 <lfs_dir_compact+0x5a0>)
 80077d8:	f00a f86c 	bl	80118b4 <__assert_func>
            lfs_pair_swap(dir->pair);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fd ffb8 	bl	8005754 <lfs_pair_swap>
            dir->count = end - begin;
 80077e4:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80077e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 80077f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 80077fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	611a      	str	r2, [r3, #16]
            // note we able to have already handled move here
            if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	333c      	adds	r3, #60	; 0x3c
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4611      	mov	r1, r2
 8007808:	4618      	mov	r0, r3
 800780a:	f7fe f925 	bl	8005a58 <lfs_gstate_hasmovehere>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d061      	beq.n	80078d8 <lfs_dir_compact+0x518>
                lfs_gstate_xormove(&lfs->gpending,
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f103 003c 	add.w	r0, r3, #60	; 0x3c
                    &lfs->gpending, 0x3ff, NULL);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
                lfs_gstate_xormove(&lfs->gpending,
 8007820:	2300      	movs	r3, #0
 8007822:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007826:	f7fe f951 	bl	8005acc <lfs_gstate_xormove>
            }
        }
        break;
 800782a:	e055      	b.n	80078d8 <lfs_dir_compact+0x518>
                    goto relocate;
 800782c:	bf00      	nop
 800782e:	e008      	b.n	8007842 <lfs_dir_compact+0x482>
                    goto relocate;
 8007830:	bf00      	nop
 8007832:	e006      	b.n	8007842 <lfs_dir_compact+0x482>
                    goto relocate;
 8007834:	bf00      	nop
 8007836:	e004      	b.n	8007842 <lfs_dir_compact+0x482>
                        goto relocate;
 8007838:	bf00      	nop
 800783a:	e002      	b.n	8007842 <lfs_dir_compact+0x482>
                        goto relocate;
 800783c:	bf00      	nop
 800783e:	e000      	b.n	8007842 <lfs_dir_compact+0x482>
                    goto relocate;
 8007840:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        lfs_cache_drop(lfs, &lfs->pcache);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3310      	adds	r3, #16
 800784c:	4619      	mov	r1, r3
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f7fd fc80 	bl	8005154 <lfs_cache_drop>
        if (!exhausted) {
 8007854:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8007858:	f083 0301 	eor.w	r3, r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d007      	beq.n	8007872 <lfs_dir_compact+0x4b2>
            LFS_DEBUG("Bad block at %"PRIx32, dir->pair[1]);
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	461a      	mov	r2, r3
 8007868:	f240 6162 	movw	r1, #1634	; 0x662
 800786c:	483d      	ldr	r0, [pc, #244]	; (8007964 <lfs_dir_compact+0x5a4>)
 800786e:	f00a fe19 	bl	80124a4 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(oldpair, (const lfs_block_t[2]){0, 1}) == 0) {
 8007872:	2300      	movs	r3, #0
 8007874:	61fb      	str	r3, [r7, #28]
 8007876:	2301      	movs	r3, #1
 8007878:	623b      	str	r3, [r7, #32]
 800787a:	f107 021c 	add.w	r2, r7, #28
 800787e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007882:	4611      	mov	r1, r2
 8007884:	4618      	mov	r0, r3
 8007886:	f7fd ff95 	bl	80057b4 <lfs_pair_cmp>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d109      	bne.n	80078a4 <lfs_dir_compact+0x4e4>
            LFS_WARN("Superblock %"PRIx32" has become unwritable", oldpair[1]);
 8007890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007892:	461a      	mov	r2, r3
 8007894:	f240 6167 	movw	r1, #1639	; 0x667
 8007898:	4833      	ldr	r0, [pc, #204]	; (8007968 <lfs_dir_compact+0x5a8>)
 800789a:	f00a fe03 	bl	80124a4 <iprintf>
            return LFS_ERR_NOSPC;
 800789e:	f06f 031b 	mvn.w	r3, #27
 80078a2:	e04c      	b.n	800793e <lfs_dir_compact+0x57e>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	68f8      	ldr	r0, [r7, #12]
 80078ac:	f7fe fa58 	bl	8005d60 <lfs_alloc>
 80078b0:	65b8      	str	r0, [r7, #88]	; 0x58
        if (err && (err != LFS_ERR_NOSPC && !exhausted)) {
 80078b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f43f ae86 	beq.w	80075c6 <lfs_dir_compact+0x206>
 80078ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078bc:	f113 0f1c 	cmn.w	r3, #28
 80078c0:	f43f ae81 	beq.w	80075c6 <lfs_dir_compact+0x206>
 80078c4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80078c8:	f083 0301 	eor.w	r3, r3, #1
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f43f ae79 	beq.w	80075c6 <lfs_dir_compact+0x206>
            return err;
 80078d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078d6:	e032      	b.n	800793e <lfs_dir_compact+0x57e>
        break;
 80078d8:	bf00      	nop
        }

        continue;
    }

    if (!relocated) {
 80078da:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078de:	f083 0301 	eor.w	r3, r3, #1
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00d      	beq.n	8007904 <lfs_dir_compact+0x544>
        lfs->gstate = lfs->gpending;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	3330      	adds	r3, #48	; 0x30
 80078ee:	323c      	adds	r2, #60	; 0x3c
 80078f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80078f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	3348      	adds	r3, #72	; 0x48
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
 80078fe:	605a      	str	r2, [r3, #4]
 8007900:	609a      	str	r2, [r3, #8]
 8007902:	e01b      	b.n	800793c <lfs_dir_compact+0x57c>
    } else {
        // update references if we relocated
        LFS_DEBUG("Relocating %"PRIx32" %"PRIx32" -> %"PRIx32" %"PRIx32,
 8007904:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007906:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	9201      	str	r2, [sp, #4]
 8007912:	9300      	str	r3, [sp, #0]
 8007914:	4603      	mov	r3, r0
 8007916:	460a      	mov	r2, r1
 8007918:	f240 6179 	movw	r1, #1657	; 0x679
 800791c:	4813      	ldr	r0, [pc, #76]	; (800796c <lfs_dir_compact+0x5ac>)
 800791e:	f00a fdc1 	bl	80124a4 <iprintf>
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 8007922:	68ba      	ldr	r2, [r7, #8]
 8007924:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007928:	4619      	mov	r1, r3
 800792a:	68f8      	ldr	r0, [r7, #12]
 800792c:	f002 f8fa 	bl	8009b24 <lfs_fs_relocate>
 8007930:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8007932:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <lfs_dir_compact+0x57c>
            return err;
 8007938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800793a:	e000      	b.n	800793e <lfs_dir_compact+0x57e>
        }
    }

    return 0;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	377c      	adds	r7, #124	; 0x7c
 8007942:	46bd      	mov	sp, r7
 8007944:	bd90      	pop	{r4, r7, pc}
 8007946:	bf00      	nop
 8007948:	08007395 	.word	0x08007395
 800794c:	400ffc00 	.word	0x400ffc00
 8007950:	000ffc08 	.word	0x000ffc08
 8007954:	7ffffc0c 	.word	0x7ffffc0c
 8007958:	08013b8c 	.word	0x08013b8c
 800795c:	08016cc8 	.word	0x08016cc8
 8007960:	08013a3c 	.word	0x08013a3c
 8007964:	08013bb4 	.word	0x08013bb4
 8007968:	08013bd4 	.word	0x08013bd4
 800796c:	08013c08 	.word	0x08013c08

08007970 <lfs_dir_commit>:

static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount)
{
 8007970:	b5b0      	push	{r4, r5, r7, lr}
 8007972:	b0b4      	sub	sp, #208	; 0xd0
 8007974:	af0a      	add	r7, sp, #40	; 0x28
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007986:	e045      	b.n	8007a14 <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 8007988:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800798c:	3308      	adds	r3, #8
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	429a      	cmp	r2, r3
 8007992:	d03a      	beq.n	8007a0a <lfs_dir_commit+0x9a>
 8007994:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007998:	3308      	adds	r3, #8
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	4611      	mov	r1, r2
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fd ff08 	bl	80057b4 <lfs_pair_cmp>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d12f      	bne.n	8007a0a <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80079aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079ae:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d12a      	bne.n	8007a0a <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80079b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d023      	beq.n	8007a0a <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80079c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80079c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d91b      	bls.n	8007a0a <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80079d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fe3a 	bl	8008650 <lfs_file_outline>
 80079dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 80079e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d002      	beq.n	80079ee <lfs_dir_commit+0x7e>
                return err;
 80079e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80079ec:	e2e3      	b.n	8007fb6 <lfs_dir_commit+0x646>
            }

            err = lfs_file_flush(lfs, f);
 80079ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079f2:	68f8      	ldr	r0, [r7, #12]
 80079f4:	f000 fe4e 	bl	8008694 <lfs_file_flush>
 80079f8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
            if (err) {
 80079fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d002      	beq.n	8007a0a <lfs_dir_commit+0x9a>
                return err;
 8007a04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007a08:	e2d5      	b.n	8007fb6 <lfs_dir_commit+0x646>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8007a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1b5      	bne.n	8007988 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_tag_t deletetag = LFS_BLOCK_NULL;
 8007a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    lfs_tag_t createtag = LFS_BLOCK_NULL;
 8007a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    for (int i = 0; i < attrcount; i++) {
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007a32:	e082      	b.n	8007b3a <lfs_dir_commit+0x1ca>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 8007a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fd ff46 	bl	80058d2 <lfs_tag_type3>
 8007a46:	4603      	mov	r3, r0
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f240 4301 	movw	r3, #1025	; 0x401
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d10e      	bne.n	8007a70 <lfs_dir_commit+0x100>
            createtag = attrs[i].tag;
 8007a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a56:	00db      	lsls	r3, r3, #3
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            dir->count += 1;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	8a9b      	ldrh	r3, [r3, #20]
 8007a66:	3301      	adds	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	829a      	strh	r2, [r3, #20]
 8007a6e:	e05f      	b.n	8007b30 <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8007a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	687a      	ldr	r2, [r7, #4]
 8007a78:	4413      	add	r3, r2
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd ff28 	bl	80058d2 <lfs_tag_type3>
 8007a82:	4603      	mov	r3, r0
 8007a84:	461a      	mov	r2, r3
 8007a86:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d119      	bne.n	8007ac2 <lfs_dir_commit+0x152>
            deletetag = attrs[i].tag;
 8007a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	4413      	add	r3, r2
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
            LFS_ASSERT(dir->count > 0);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	8a9b      	ldrh	r3, [r3, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d106      	bne.n	8007ab4 <lfs_dir_commit+0x144>
 8007aa6:	4ba6      	ldr	r3, [pc, #664]	; (8007d40 <lfs_dir_commit+0x3d0>)
 8007aa8:	4aa6      	ldr	r2, [pc, #664]	; (8007d44 <lfs_dir_commit+0x3d4>)
 8007aaa:	f240 61a1 	movw	r1, #1697	; 0x6a1
 8007aae:	48a6      	ldr	r0, [pc, #664]	; (8007d48 <lfs_dir_commit+0x3d8>)
 8007ab0:	f009 ff00 	bl	80118b4 <__assert_func>
            dir->count -= 1;
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	8a9b      	ldrh	r3, [r3, #20]
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	829a      	strh	r2, [r3, #20]
 8007ac0:	e036      	b.n	8007b30 <lfs_dir_commit+0x1c0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 8007ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4413      	add	r3, r2
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fd feef 	bl	80058b2 <lfs_tag_type1>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007ada:	d129      	bne.n	8007b30 <lfs_dir_commit+0x1c0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 8007adc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 8007aee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	4413      	add	r3, r2
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 8007b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd fef0 	bl	80058f2 <lfs_tag_chunk>
 8007b12:	4603      	mov	r3, r0
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	bf14      	ite	ne
 8007b1c:	2301      	movne	r3, #1
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	b2da      	uxtb	r2, r3
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3318      	adds	r3, #24
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fd fe6c 	bl	8005808 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 8007b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b34:	3301      	adds	r3, #1
 8007b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007b3a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	f6ff af77 	blt.w	8007a34 <lfs_dir_commit+0xc4>
        }
    }

    // do we have a pending move?
    if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	333c      	adds	r3, #60	; 0x3c
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd ff82 	bl	8005a58 <lfs_gstate_hasmovehere>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d021      	beq.n	8007b9e <lfs_dir_commit+0x22e>
        deletetag = lfs->gpending.tag & LFS_MKTAG(0x7ff, 0x3ff, 0);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b5e:	4b7b      	ldr	r3, [pc, #492]	; (8007d4c <lfs_dir_commit+0x3dc>)
 8007b60:	4013      	ands	r3, r2
 8007b62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        LFS_ASSERT(dir->count > 0);
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	8a9b      	ldrh	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d106      	bne.n	8007b7c <lfs_dir_commit+0x20c>
 8007b6e:	4b74      	ldr	r3, [pc, #464]	; (8007d40 <lfs_dir_commit+0x3d0>)
 8007b70:	4a74      	ldr	r2, [pc, #464]	; (8007d44 <lfs_dir_commit+0x3d4>)
 8007b72:	f240 61ae 	movw	r1, #1710	; 0x6ae
 8007b76:	4874      	ldr	r0, [pc, #464]	; (8007d48 <lfs_dir_commit+0x3d8>)
 8007b78:	f009 fe9c 	bl	80118b4 <__assert_func>
        dir->count -= 1;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	8a9b      	ldrh	r3, [r3, #20]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	829a      	strh	r2, [r3, #20]

        // mark gdelta so we reflect the move we will fix
        lfs_gstate_xormove(&lfs->gdelta, &lfs->gpending, 0x3ff, NULL);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007b94:	2300      	movs	r3, #0
 8007b96:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007b9a:	f7fd ff97 	bl	8005acc <lfs_gstate_xormove>
    }

    // should we actually drop the directory block?
    if (lfs_tag_isvalid(deletetag) && dir->count == 0) {
 8007b9e:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007ba2:	f7fd fe65 	bl	8005870 <lfs_tag_isvalid>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d02a      	beq.n	8007c02 <lfs_dir_commit+0x292>
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	8a9b      	ldrh	r3, [r3, #20]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d126      	bne.n	8007c02 <lfs_dir_commit+0x292>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f107 0214 	add.w	r2, r7, #20
 8007bba:	4619      	mov	r1, r3
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f001 fef1 	bl	80099a4 <lfs_fs_pred>
 8007bc2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if (err && err != LFS_ERR_NOENT) {
 8007bc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d007      	beq.n	8007bde <lfs_dir_commit+0x26e>
 8007bce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bd2:	f113 0f02 	cmn.w	r3, #2
 8007bd6:	d002      	beq.n	8007bde <lfs_dir_commit+0x26e>
            return err;
 8007bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007bdc:	e1eb      	b.n	8007fb6 <lfs_dir_commit+0x646>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 8007bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007be2:	f113 0f02 	cmn.w	r3, #2
 8007be6:	d00c      	beq.n	8007c02 <lfs_dir_commit+0x292>
 8007be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <lfs_dir_commit+0x292>
            return lfs_dir_drop(lfs, &pdir, dir);
 8007bf0:	f107 0314 	add.w	r3, r7, #20
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fb25 	bl	8007248 <lfs_dir_drop>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	e1d9      	b.n	8007fb6 <lfs_dir_commit+0x646>
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	7d9b      	ldrb	r3, [r3, #22]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d104      	bne.n	8007c14 <lfs_dir_commit+0x2a4>
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	8a9b      	ldrh	r3, [r3, #20]
 8007c0e:	2bfe      	cmp	r3, #254	; 0xfe
 8007c10:	f240 80f6 	bls.w	8007e00 <lfs_dir_commit+0x490>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 8007c18:	64bb      	str	r3, [r7, #72]	; 0x48
            .off = dir->off,
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
            .ptag = dir->etag,
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8007c24:	653b      	str	r3, [r7, #80]	; 0x50
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2a:	657b      	str	r3, [r7, #84]	; 0x54
            .crc = LFS_BLOCK_NULL,

            .begin = dir->off,
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8007c30:	65bb      	str	r3, [r7, #88]	; 0x58
            .end = lfs->cfg->block_size - 8,
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c36:	69db      	ldr	r3, [r3, #28]
 8007c38:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8007c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3318      	adds	r3, #24
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd fdfb 	bl	800583c <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount, false,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	643b      	str	r3, [r7, #64]	; 0x40
 8007c52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
        int err = lfs_dir_traverse(lfs,
 8007c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c5e:	4b3c      	ldr	r3, [pc, #240]	; (8007d50 <lfs_dir_commit+0x3e0>)
 8007c60:	9308      	str	r3, [sp, #32]
 8007c62:	2300      	movs	r3, #0
 8007c64:	9307      	str	r3, [sp, #28]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9306      	str	r3, [sp, #24]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	2300      	movs	r3, #0
 8007c74:	9303      	str	r3, [sp, #12]
 8007c76:	2300      	movs	r3, #0
 8007c78:	9302      	str	r3, [sp, #8]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	9301      	str	r3, [sp, #4]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	460b      	mov	r3, r1
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	68f8      	ldr	r0, [r7, #12]
 8007c88:	f7fe fb52 	bl	8006330 <lfs_dir_traverse>
 8007c8c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	3318      	adds	r3, #24
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fdb7 	bl	8005808 <lfs_pair_fromle32>
        if (err) {
 8007c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00e      	beq.n	8007cc0 <lfs_dir_commit+0x350>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ca6:	f113 0f1c 	cmn.w	r3, #28
 8007caa:	f000 80ab 	beq.w	8007e04 <lfs_dir_commit+0x494>
 8007cae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cb2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007cb6:	f000 80a5 	beq.w	8007e04 <lfs_dir_commit+0x494>
                goto compact;
            }
            return err;
 8007cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cbe:	e17a      	b.n	8007fb6 <lfs_dir_commit+0x646>
        }

        // commit any global diffs if we have any
        if (!lfs_gstate_iszero(&lfs->gdelta)) {
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	3348      	adds	r3, #72	; 0x48
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f7fd fe84 	bl	80059d2 <lfs_gstate_iszero>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	f083 0301 	eor.w	r3, r3, #1
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d040      	beq.n	8007d58 <lfs_dir_commit+0x3e8>
            err = lfs_dir_getgstate(lfs, dir, &lfs->gdelta);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3348      	adds	r3, #72	; 0x48
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f7fe fff2 	bl	8006cc8 <lfs_dir_getgstate>
 8007ce4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 8007ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d002      	beq.n	8007cf6 <lfs_dir_commit+0x386>
                return err;
 8007cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf4:	e15f      	b.n	8007fb6 <lfs_dir_commit+0x646>
            }

            lfs_gstate_tole32(&lfs->gdelta);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	3348      	adds	r3, #72	; 0x48
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fd ff50 	bl	8005ba0 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(lfs->gdelta)), &lfs->gdelta);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3348      	adds	r3, #72	; 0x48
            err = lfs_dir_commitattr(lfs, &commit,
 8007d04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007d08:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <lfs_dir_commit+0x3e4>)
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f7ff f88d 	bl	8006e2a <lfs_dir_commitattr>
 8007d10:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            lfs_gstate_fromle32(&lfs->gdelta);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3348      	adds	r3, #72	; 0x48
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd ff21 	bl	8005b60 <lfs_gstate_fromle32>
            if (err) {
 8007d1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d018      	beq.n	8007d58 <lfs_dir_commit+0x3e8>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007d26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d2a:	f113 0f1c 	cmn.w	r3, #28
 8007d2e:	d06b      	beq.n	8007e08 <lfs_dir_commit+0x498>
 8007d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d34:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d38:	d066      	beq.n	8007e08 <lfs_dir_commit+0x498>
                    goto compact;
                }
                return err;
 8007d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d3e:	e13a      	b.n	8007fb6 <lfs_dir_commit+0x646>
 8007d40:	08013c38 	.word	0x08013c38
 8007d44:	08016cd8 	.word	0x08016cd8
 8007d48:	08013a3c 	.word	0x08013a3c
 8007d4c:	7ffffc00 	.word	0x7ffffc00
 8007d50:	08007395 	.word	0x08007395
 8007d54:	7ffffc0c 	.word	0x7ffffc0c
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8007d58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff f8e3 	bl	8006f2a <lfs_dir_commitcrc>
 8007d64:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 8007d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00c      	beq.n	8007d8a <lfs_dir_commit+0x41a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8007d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d74:	f113 0f1c 	cmn.w	r3, #28
 8007d78:	d048      	beq.n	8007e0c <lfs_dir_commit+0x49c>
 8007d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8007d82:	d043      	beq.n	8007e0c <lfs_dir_commit+0x49c>
                goto compact;
            }
            return err;
 8007d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d88:	e115      	b.n	8007fb6 <lfs_dir_commit+0x646>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8007d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d90:	6992      	ldr	r2, [r2, #24]
 8007d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d96:	fb01 f202 	mul.w	r2, r1, r2
 8007d9a:	1a9b      	subs	r3, r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d006      	beq.n	8007dae <lfs_dir_commit+0x43e>
 8007da0:	4b87      	ldr	r3, [pc, #540]	; (8007fc0 <lfs_dir_commit+0x650>)
 8007da2:	4a88      	ldr	r2, [pc, #544]	; (8007fc4 <lfs_dir_commit+0x654>)
 8007da4:	f240 61fb 	movw	r1, #1787	; 0x6fb
 8007da8:	4887      	ldr	r0, [pc, #540]	; (8007fc8 <lfs_dir_commit+0x658>)
 8007daa:	f009 fd83 	bl	80118b4 <__assert_func>
        dir->off = commit.off;
 8007dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8007db4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	611a      	str	r2, [r3, #16]

        // note we able to have already handled move here
        if (lfs_gstate_hasmovehere(&lfs->gpending, dir->pair)) {
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	333c      	adds	r3, #60	; 0x3c
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	4611      	mov	r1, r2
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7fd fe48 	bl	8005a58 <lfs_gstate_hasmovehere>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <lfs_dir_commit+0x474>
            lfs_gstate_xormove(&lfs->gpending, &lfs->gpending, 0x3ff, NULL);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8007dda:	2300      	movs	r3, #0
 8007ddc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007de0:	f7fd fe74 	bl	8005acc <lfs_gstate_xormove>
        }

        // update gstate
        lfs->gstate = lfs->gpending;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	3330      	adds	r3, #48	; 0x30
 8007dea:	323c      	adds	r2, #60	; 0x3c
 8007dec:	ca07      	ldmia	r2, {r0, r1, r2}
 8007dee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (struct lfs_gstate){0};
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	3348      	adds	r3, #72	; 0x48
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
 8007dfc:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 8007dfe:	e022      	b.n	8007e46 <lfs_dir_commit+0x4d6>
    } else {
compact:
 8007e00:	bf00      	nop
 8007e02:	e004      	b.n	8007e0e <lfs_dir_commit+0x49e>
                goto compact;
 8007e04:	bf00      	nop
 8007e06:	e002      	b.n	8007e0e <lfs_dir_commit+0x49e>
                    goto compact;
 8007e08:	bf00      	nop
 8007e0a:	e000      	b.n	8007e0e <lfs_dir_commit+0x49e>
                goto compact;
 8007e0c:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	3310      	adds	r3, #16
 8007e12:	4619      	mov	r1, r3
 8007e14:	68f8      	ldr	r0, [r7, #12]
 8007e16:	f7fd f99d 	bl	8005154 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	8a9b      	ldrh	r3, [r3, #20]
 8007e1e:	9302      	str	r3, [sp, #8]
 8007e20:	2300      	movs	r3, #0
 8007e22:	9301      	str	r3, [sp, #4]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	9300      	str	r3, [sp, #0]
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fac6 	bl	80073c0 <lfs_dir_compact>
 8007e34:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
                dir, 0, dir->count);
        if (err) {
 8007e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <lfs_dir_commit+0x4d6>
            return err;
 8007e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e44:	e0b7      	b.n	8007fb6 <lfs_dir_commit+0x646>
        }
    }

    // update any directories that are affected
    lfs_mdir_t copy = *dir;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8007e4c:	461d      	mov	r5, r3
 8007e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e52:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    // two passes, once for things that aren't us, and one
    // for things that are
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e62:	e0a2      	b.n	8007faa <lfs_dir_commit+0x63a>
        if (lfs_pair_cmp(d->m.pair, copy.pair) == 0) {
 8007e64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e68:	3308      	adds	r3, #8
 8007e6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd fc9f 	bl	80057b4 <lfs_pair_cmp>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f040 8091 	bne.w	8007fa0 <lfs_dir_commit+0x630>
            d->m = *dir;
 8007e7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e82:	68ba      	ldr	r2, [r7, #8]
 8007e84:	f103 0408 	add.w	r4, r3, #8
 8007e88:	4615      	mov	r5, r2
 8007e8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if (d->id == lfs_tag_id(deletetag)) {
 8007e96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e9a:	889c      	ldrh	r4, [r3, #4]
 8007e9c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007ea0:	f7fd fd41 	bl	8005926 <lfs_tag_id>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d10a      	bne.n	8007ec0 <lfs_dir_commit+0x550>
                d->m.pair[0] = LFS_BLOCK_NULL;
 8007eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb2:	609a      	str	r2, [r3, #8]
                d->m.pair[1] = LFS_BLOCK_NULL;
 8007eb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e062      	b.n	8007f86 <lfs_dir_commit+0x616>
            } else if (d->id > lfs_tag_id(deletetag)) {
 8007ec0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ec4:	889c      	ldrh	r4, [r3, #4]
 8007ec6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8007eca:	f7fd fd2c 	bl	8005926 <lfs_tag_id>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	429c      	cmp	r4, r3
 8007ed2:	d914      	bls.n	8007efe <lfs_dir_commit+0x58e>
                d->id -= 1;
 8007ed4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed8:	889b      	ldrh	r3, [r3, #4]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ee2:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 8007ee4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ee8:	799b      	ldrb	r3, [r3, #6]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d14b      	bne.n	8007f86 <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos -= 1;
 8007eee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ef4:	1e5a      	subs	r2, r3, #1
 8007ef6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007efa:	629a      	str	r2, [r3, #40]	; 0x28
 8007efc:	e043      	b.n	8007f86 <lfs_dir_commit+0x616>
                }
            } else if (&d->m != dir && d->id >= lfs_tag_id(createtag)) {
 8007efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f02:	3308      	adds	r3, #8
 8007f04:	68ba      	ldr	r2, [r7, #8]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d03d      	beq.n	8007f86 <lfs_dir_commit+0x616>
 8007f0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f0e:	889c      	ldrh	r4, [r3, #4]
 8007f10:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8007f14:	f7fd fd07 	bl	8005926 <lfs_tag_id>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	429c      	cmp	r4, r3
 8007f1c:	d333      	bcc.n	8007f86 <lfs_dir_commit+0x616>
                d->id += 1;
 8007f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f22:	889b      	ldrh	r3, [r3, #4]
 8007f24:	3301      	adds	r3, #1
 8007f26:	b29a      	uxth	r2, r3
 8007f28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f2c:	809a      	strh	r2, [r3, #4]
                if (d->type == LFS_TYPE_DIR) {
 8007f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f32:	799b      	ldrb	r3, [r3, #6]
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d126      	bne.n	8007f86 <lfs_dir_commit+0x616>
                    ((lfs_dir_t*)d)->pos += 1;
 8007f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f44:	629a      	str	r2, [r3, #40]	; 0x28
                }
            }

            while (d->id >= d->m.count && d->m.split) {
 8007f46:	e01e      	b.n	8007f86 <lfs_dir_commit+0x616>
                // we split and id is on tail now
                d->id -= d->m.count;
 8007f48:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f4c:	889a      	ldrh	r2, [r3, #4]
 8007f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f52:	8b9b      	ldrh	r3, [r3, #28]
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f5c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8007f5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f62:	f103 0108 	add.w	r1, r3, #8
 8007f66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f6a:	3320      	adds	r3, #32
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7fe fe90 	bl	8006c94 <lfs_dir_fetch>
 8007f74:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                if (err) {
 8007f78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d002      	beq.n	8007f86 <lfs_dir_commit+0x616>
                    return err;
 8007f80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007f84:	e017      	b.n	8007fb6 <lfs_dir_commit+0x646>
            while (d->id >= d->m.count && d->m.split) {
 8007f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f8a:	889a      	ldrh	r2, [r3, #4]
 8007f8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f90:	8b9b      	ldrh	r3, [r3, #28]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d304      	bcc.n	8007fa0 <lfs_dir_commit+0x630>
 8007f96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f9a:	7fdb      	ldrb	r3, [r3, #31]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d1d3      	bne.n	8007f48 <lfs_dir_commit+0x5d8>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8007fa0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007faa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f47f af58 	bne.w	8007e64 <lfs_dir_commit+0x4f4>
                }
            }
        }
    }

    return 0;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	37a8      	adds	r7, #168	; 0xa8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bdb0      	pop	{r4, r5, r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08013b8c 	.word	0x08013b8c
 8007fc4:	08016cd8 	.word	0x08016cd8
 8007fc8:	08013a3c 	.word	0x08013a3c

08007fcc <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b087      	sub	sp, #28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	3b08      	subs	r3, #8
 8007fe4:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fee:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <lfs_ctz_index+0x2e>
        return 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e01c      	b.n	8008034 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fd f848 	bl	8005094 <lfs_popc>
 8008004:	4603      	mov	r3, r0
 8008006:	3302      	adds	r3, #2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	1ad2      	subs	r2, r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	fbb2 f3f3 	udiv	r3, r2, r3
 8008014:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	1ad4      	subs	r4, r2, r3
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f7fd f836 	bl	8005094 <lfs_popc>
 8008028:	4603      	mov	r3, r0
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	1ae2      	subs	r2, r4, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	601a      	str	r2, [r3, #0]
    return i;
 8008032:	68fb      	ldr	r3, [r7, #12]
}
 8008034:	4618      	mov	r0, r3
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	bd90      	pop	{r4, r7, pc}

0800803c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b08f      	sub	sp, #60	; 0x3c
 8008040:	af04      	add	r7, sp, #16
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
 8008048:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b00      	cmp	r3, #0
 800804e:	d108      	bne.n	8008062 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 8008050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008052:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008056:	601a      	str	r2, [r3, #0]
        *off = 0;
 8008058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]
        return 0;
 800805e:	2300      	movs	r3, #0
 8008060:	e063      	b.n	800812a <lfs_ctz_find+0xee>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	3b01      	subs	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	f107 0314 	add.w	r3, r7, #20
 800806c:	4619      	mov	r1, r3
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	f7ff ffac 	bl	8007fcc <lfs_ctz_index>
 8008074:	4603      	mov	r3, r0
 8008076:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8008078:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800807c:	4619      	mov	r1, r3
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff ffa4 	bl	8007fcc <lfs_ctz_index>
 8008084:	4603      	mov	r3, r0
 8008086:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8008088:	e044      	b.n	8008114 <lfs_ctz_find+0xd8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800808a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	3301      	adds	r3, #1
 8008092:	4618      	mov	r0, r3
 8008094:	f7fc ffdf 	bl	8005056 <lfs_npw2>
 8008098:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800809a:	1e5c      	subs	r4, r3, #1
 800809c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800809e:	f7fc ffea 	bl	8005076 <lfs_ctz>
 80080a2:	4603      	mov	r3, r0
 80080a4:	4619      	mov	r1, r3
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7fc ff9e 	bl	8004fe8 <lfs_min>
 80080ac:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	69fa      	ldr	r2, [r7, #28]
 80080b2:	0092      	lsls	r2, r2, #2
 80080b4:	2104      	movs	r1, #4
 80080b6:	9103      	str	r1, [sp, #12]
 80080b8:	4639      	mov	r1, r7
 80080ba:	9102      	str	r1, [sp, #8]
 80080bc:	9201      	str	r2, [sp, #4]
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	2304      	movs	r3, #4
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f7fd f86a 	bl	80051a0 <lfs_bd_read>
 80080cc:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fc fff9 	bl	80050c8 <lfs_fromle32>
 80080d6:	4603      	mov	r3, r0
 80080d8:	603b      	str	r3, [r7, #0]
        if (err) {
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d001      	beq.n	80080e4 <lfs_ctz_find+0xa8>
            return err;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	e022      	b.n	800812a <lfs_ctz_find+0xee>
        }

        LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d905      	bls.n	80080f6 <lfs_ctz_find+0xba>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ee:	6a1a      	ldr	r2, [r3, #32]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d206      	bcs.n	8008104 <lfs_ctz_find+0xc8>
 80080f6:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <lfs_ctz_find+0xf8>)
 80080f8:	4a0f      	ldr	r2, [pc, #60]	; (8008138 <lfs_ctz_find+0xfc>)
 80080fa:	f640 016d 	movw	r1, #2157	; 0x86d
 80080fe:	480f      	ldr	r0, [pc, #60]	; (800813c <lfs_ctz_find+0x100>)
 8008100:	f009 fbd8 	bl	80118b4 <__assert_func>
        current -= 1 << skip;
 8008104:	2201      	movs	r2, #1
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	fa02 f303 	lsl.w	r3, r2, r3
 800810c:	461a      	mov	r2, r3
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	1a9b      	subs	r3, r3, r2
 8008112:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 8008114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	429a      	cmp	r2, r3
 800811a:	d8b6      	bhi.n	800808a <lfs_ctz_find+0x4e>
    }

    *block = head;
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008120:	601a      	str	r2, [r3, #0]
    *off = pos;
 8008122:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008126:	601a      	str	r2, [r3, #0]
    return 0;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	372c      	adds	r7, #44	; 0x2c
 800812e:	46bd      	mov	sp, r7
 8008130:	bd90      	pop	{r4, r7, pc}
 8008132:	bf00      	nop
 8008134:	08013e58 	.word	0x08013e58
 8008138:	08016ce8 	.word	0x08016ce8
 800813c:	08013a3c 	.word	0x08013a3c

08008140 <lfs_ctz_extend>:

static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 8008140:	b580      	push	{r7, lr}
 8008142:	b090      	sub	sp, #64	; 0x40
 8008144:	af04      	add	r7, sp, #16
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f7fd fe03 	bl	8005d60 <lfs_alloc>
 800815a:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <lfs_ctz_extend+0x26>
            return err;
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	e103      	b.n	800836e <lfs_ctz_extend+0x22e>
        }
        LFS_ASSERT(nblock >= 2 && nblock <= lfs->cfg->block_count);
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d905      	bls.n	8008178 <lfs_ctz_extend+0x38>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008170:	6a1a      	ldr	r2, [r3, #32]
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	429a      	cmp	r2, r3
 8008176:	d206      	bcs.n	8008186 <lfs_ctz_extend+0x46>
 8008178:	4b7f      	ldr	r3, [pc, #508]	; (8008378 <lfs_ctz_extend+0x238>)
 800817a:	4a80      	ldr	r2, [pc, #512]	; (800837c <lfs_ctz_extend+0x23c>)
 800817c:	f640 0181 	movw	r1, #2177	; 0x881
 8008180:	487f      	ldr	r0, [pc, #508]	; (8008380 <lfs_ctz_extend+0x240>)
 8008182:	f009 fb97 	bl	80118b4 <__assert_func>

        {
            err = lfs_bd_erase(lfs, nblock);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	4619      	mov	r1, r3
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7fd fab2 	bl	80056f4 <lfs_bd_erase>
 8008190:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <lfs_ctz_extend+0x66>
                if (err == LFS_ERR_CORRUPT) {
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800819e:	f000 80d5 	beq.w	800834c <lfs_ctz_extend+0x20c>
                    goto relocate;
                }
                return err;
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	e0e3      	b.n	800836e <lfs_ctz_extend+0x22e>
            }

            if (size == 0) {
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d107      	bne.n	80081bc <lfs_ctz_extend+0x7c>
                *block = nblock;
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081b0:	601a      	str	r2, [r3, #0]
                *off = 0;
 80081b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
                return 0;
 80081b8:	2300      	movs	r3, #0
 80081ba:	e0d8      	b.n	800836e <lfs_ctz_extend+0x22e>
            }

            size -= 1;
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	3b01      	subs	r3, #1
 80081c0:	63bb      	str	r3, [r7, #56]	; 0x38
            lfs_off_t index = lfs_ctz_index(lfs, &size);
 80081c2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff ff00 	bl	8007fcc <lfs_ctz_index>
 80081cc:	4603      	mov	r3, r0
 80081ce:	623b      	str	r3, [r7, #32]
            size += 1;
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	3301      	adds	r3, #1
 80081d4:	63bb      	str	r3, [r7, #56]	; 0x38

            // just copy out the last block if it is incomplete
            if (size != lfs->cfg->block_size) {
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081de:	429a      	cmp	r2, r3
 80081e0:	d043      	beq.n	800826a <lfs_ctz_extend+0x12a>
                for (lfs_off_t i = 0; i < size; i++) {
 80081e2:	2300      	movs	r3, #0
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081e6:	e034      	b.n	8008252 <lfs_ctz_extend+0x112>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 80081e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	1ad1      	subs	r1, r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2201      	movs	r2, #1
 80081f2:	9203      	str	r2, [sp, #12]
 80081f4:	f107 0217 	add.w	r2, r7, #23
 80081f8:	9202      	str	r2, [sp, #8]
 80081fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081fc:	9201      	str	r2, [sp, #4]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	460b      	mov	r3, r1
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	2100      	movs	r1, #0
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f7fc ffca 	bl	80051a0 <lfs_bd_read>
 800820c:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, size-i,
                            head, i, &data, 1);
                    if (err) {
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <lfs_ctz_extend+0xd8>
                        return err;
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	e0aa      	b.n	800836e <lfs_ctz_extend+0x22e>
                    }

                    err = lfs_bd_prog(lfs,
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	2201      	movs	r2, #1
 800821c:	9203      	str	r2, [sp, #12]
 800821e:	f107 0217 	add.w	r2, r7, #23
 8008222:	9202      	str	r2, [sp, #8]
 8008224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	2301      	movs	r3, #1
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	68b9      	ldr	r1, [r7, #8]
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7fd f9b9 	bl	80055a8 <lfs_bd_prog>
 8008236:	6278      	str	r0, [r7, #36]	; 0x24
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	2b00      	cmp	r3, #0
 800823c:	d006      	beq.n	800824c <lfs_ctz_extend+0x10c>
                        if (err == LFS_ERR_CORRUPT) {
 800823e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008240:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008244:	f000 8084 	beq.w	8008350 <lfs_ctz_extend+0x210>
                            goto relocate;
                        }
                        return err;
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	e090      	b.n	800836e <lfs_ctz_extend+0x22e>
                for (lfs_off_t i = 0; i < size; i++) {
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	3301      	adds	r3, #1
 8008250:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008256:	429a      	cmp	r2, r3
 8008258:	d3c6      	bcc.n	80081e8 <lfs_ctz_extend+0xa8>
                    }
                }

                *block = nblock;
 800825a:	69ba      	ldr	r2, [r7, #24]
 800825c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800825e:	601a      	str	r2, [r3, #0]
                *off = size;
 8008260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008264:	601a      	str	r2, [r3, #0]
                return 0;
 8008266:	2300      	movs	r3, #0
 8008268:	e081      	b.n	800836e <lfs_ctz_extend+0x22e>
            }

            // append block
            index += 1;
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	3301      	adds	r3, #1
 800826e:	623b      	str	r3, [r7, #32]
            lfs_size_t skips = lfs_ctz(index) + 1;
 8008270:	6a38      	ldr	r0, [r7, #32]
 8008272:	f7fc ff00 	bl	8005076 <lfs_ctz>
 8008276:	4603      	mov	r3, r0
 8008278:	3301      	adds	r3, #1
 800827a:	61fb      	str	r3, [r7, #28]

            for (lfs_off_t i = 0; i < skips; i++) {
 800827c:	2300      	movs	r3, #0
 800827e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008280:	e057      	b.n	8008332 <lfs_ctz_extend+0x1f2>
                head = lfs_tole32(head);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f7fc ff2a 	bl	80050de <lfs_tole32>
 800828a:	4603      	mov	r3, r0
 800828c:	603b      	str	r3, [r7, #0]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008292:	0092      	lsls	r2, r2, #2
 8008294:	2104      	movs	r1, #4
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	4639      	mov	r1, r7
 800829a:	9102      	str	r1, [sp, #8]
 800829c:	9201      	str	r2, [sp, #4]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	2301      	movs	r3, #1
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7fd f97e 	bl	80055a8 <lfs_bd_prog>
 80082ac:	6278      	str	r0, [r7, #36]	; 0x24
                        nblock, 4*i, &head, 4);
                head = lfs_fromle32(head);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fc ff09 	bl	80050c8 <lfs_fromle32>
 80082b6:	4603      	mov	r3, r0
 80082b8:	603b      	str	r3, [r7, #0]
                if (err) {
 80082ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <lfs_ctz_extend+0x18c>
                    if (err == LFS_ERR_CORRUPT) {
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80082c6:	d045      	beq.n	8008354 <lfs_ctz_extend+0x214>
                        goto relocate;
                    }
                    return err;
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ca:	e050      	b.n	800836e <lfs_ctz_extend+0x22e>
                }

                if (i != skips-1) {
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d01a      	beq.n	800830c <lfs_ctz_extend+0x1cc>
                    err = lfs_bd_read(lfs,
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082da:	0092      	lsls	r2, r2, #2
 80082dc:	2104      	movs	r1, #4
 80082de:	9103      	str	r1, [sp, #12]
 80082e0:	4639      	mov	r1, r7
 80082e2:	9102      	str	r1, [sp, #8]
 80082e4:	9201      	str	r2, [sp, #4]
 80082e6:	9300      	str	r3, [sp, #0]
 80082e8:	2304      	movs	r3, #4
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f7fc ff56 	bl	80051a0 <lfs_bd_read>
 80082f4:	6278      	str	r0, [r7, #36]	; 0x24
                            NULL, rcache, sizeof(head),
                            head, 4*i, &head, sizeof(head));
                    head = lfs_fromle32(head);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fc fee5 	bl	80050c8 <lfs_fromle32>
 80082fe:	4603      	mov	r3, r0
 8008300:	603b      	str	r3, [r7, #0]
                    if (err) {
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <lfs_ctz_extend+0x1cc>
                        return err;
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	e030      	b.n	800836e <lfs_ctz_extend+0x22e>
                    }
                }

                LFS_ASSERT(head >= 2 && head <= lfs->cfg->block_count);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d905      	bls.n	800831e <lfs_ctz_extend+0x1de>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008316:	6a1a      	ldr	r2, [r3, #32]
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	429a      	cmp	r2, r3
 800831c:	d206      	bcs.n	800832c <lfs_ctz_extend+0x1ec>
 800831e:	4b19      	ldr	r3, [pc, #100]	; (8008384 <lfs_ctz_extend+0x244>)
 8008320:	4a16      	ldr	r2, [pc, #88]	; (800837c <lfs_ctz_extend+0x23c>)
 8008322:	f640 01cb 	movw	r1, #2251	; 0x8cb
 8008326:	4816      	ldr	r0, [pc, #88]	; (8008380 <lfs_ctz_extend+0x240>)
 8008328:	f009 fac4 	bl	80118b4 <__assert_func>
            for (lfs_off_t i = 0; i < skips; i++) {
 800832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832e:	3301      	adds	r3, #1
 8008330:	62bb      	str	r3, [r7, #40]	; 0x28
 8008332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	429a      	cmp	r2, r3
 8008338:	d3a3      	bcc.n	8008282 <lfs_ctz_extend+0x142>
            }

            *block = nblock;
 800833a:	69ba      	ldr	r2, [r7, #24]
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	009a      	lsls	r2, r3, #2
 8008344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008346:	601a      	str	r2, [r3, #0]
            return 0;
 8008348:	2300      	movs	r3, #0
 800834a:	e010      	b.n	800836e <lfs_ctz_extend+0x22e>
                    goto relocate;
 800834c:	bf00      	nop
 800834e:	e002      	b.n	8008356 <lfs_ctz_extend+0x216>
                            goto relocate;
 8008350:	bf00      	nop
 8008352:	e000      	b.n	8008356 <lfs_ctz_extend+0x216>
                        goto relocate;
 8008354:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	461a      	mov	r2, r3
 800835a:	f640 01d4 	movw	r1, #2260	; 0x8d4
 800835e:	480a      	ldr	r0, [pc, #40]	; (8008388 <lfs_ctz_extend+0x248>)
 8008360:	f00a f8a0 	bl	80124a4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 8008364:	68b9      	ldr	r1, [r7, #8]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7fc fef4 	bl	8005154 <lfs_cache_drop>
    while (true) {
 800836c:	e6ef      	b.n	800814e <lfs_ctz_extend+0xe>
    }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	; 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	08013e84 	.word	0x08013e84
 800837c:	08016cf8 	.word	0x08016cf8
 8008380:	08013a3c 	.word	0x08013a3c
 8008384:	08013e58 	.word	0x08013e58
 8008388:	08013bb4 	.word	0x08013bb4

0800838c <lfs_ctz_traverse>:

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800838c:	b580      	push	{r7, lr}
 800838e:	b090      	sub	sp, #64	; 0x40
 8008390:	af04      	add	r7, sp, #16
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800839a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800839c:	2b00      	cmp	r3, #0
 800839e:	d101      	bne.n	80083a4 <lfs_ctz_traverse+0x18>
        return 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e06b      	b.n	800847c <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	3b01      	subs	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
 80083aa:	f107 031c 	add.w	r3, r7, #28
 80083ae:	4619      	mov	r1, r3
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f7ff fe0b 	bl	8007fcc <lfs_ctz_index>
 80083b6:	4603      	mov	r3, r0
 80083b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 80083ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80083c0:	4798      	blx	r3
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d001      	beq.n	80083ce <lfs_ctz_traverse+0x42>
            return err;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	e056      	b.n	800847c <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <lfs_ctz_traverse+0x4c>
            return 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	e051      	b.n	800847c <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	f1c3 0302 	rsb	r3, r3, #2
 80083e2:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 80083e4:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 80083e6:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 80083e8:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 80083ea:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 80083ec:	9303      	str	r3, [sp, #12]
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	2300      	movs	r3, #0
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4613      	mov	r3, r2
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	68b9      	ldr	r1, [r7, #8]
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f7fc fecc 	bl	80051a0 <lfs_bd_read>
 8008408:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	4618      	mov	r0, r3
 800840e:	f7fc fe5b 	bl	80050c8 <lfs_fromle32>
 8008412:	4603      	mov	r3, r0
 8008414:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	4618      	mov	r0, r3
 800841a:	f7fc fe55 	bl	80050c8 <lfs_fromle32>
 800841e:	4603      	mov	r3, r0
 8008420:	61bb      	str	r3, [r7, #24]
        if (err) {
 8008422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <lfs_ctz_traverse+0xa0>
            return err;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	e027      	b.n	800847c <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800842c:	2300      	movs	r3, #0
 800842e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008430:	e012      	b.n	8008458 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	3330      	adds	r3, #48	; 0x30
 8008438:	443b      	add	r3, r7
 800843a:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800843e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008440:	4611      	mov	r1, r2
 8008442:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008444:	4798      	blx	r3
 8008446:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <lfs_ctz_traverse+0xc6>
                return err;
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	e014      	b.n	800847c <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	3301      	adds	r3, #1
 8008456:	62bb      	str	r3, [r7, #40]	; 0x28
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	3b01      	subs	r3, #1
 800845c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845e:	429a      	cmp	r2, r3
 8008460:	dbe7      	blt.n	8008432 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	3b01      	subs	r3, #1
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	3330      	adds	r3, #48	; 0x30
 800846a:	443b      	add	r3, r7
 800846c:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8008470:	603b      	str	r3, [r7, #0]
        index -= count;
 8008472:	6a3b      	ldr	r3, [r7, #32]
 8008474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800847a:	e79e      	b.n	80083ba <lfs_ctz_traverse+0x2e>
    }
}
 800847c:	4618      	mov	r0, r3
 800847e:	3730      	adds	r7, #48	; 0x30
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <lfs_file_relocate>:
    file->flags &= ~LFS_F_OPENED;
    LFS_TRACE("lfs_file_close -> %d", err);
    return err;
}

static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8008484:	b590      	push	{r4, r7, lr}
 8008486:	b08d      	sub	sp, #52	; 0x34
 8008488:	af06      	add	r7, sp, #24
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <lfs_file_relocate+0x24>
 800849a:	4b68      	ldr	r3, [pc, #416]	; (800863c <lfs_file_relocate+0x1b8>)
 800849c:	4a68      	ldr	r2, [pc, #416]	; (8008640 <lfs_file_relocate+0x1bc>)
 800849e:	f640 11c5 	movw	r1, #2501	; 0x9c5
 80084a2:	4868      	ldr	r0, [pc, #416]	; (8008644 <lfs_file_relocate+0x1c0>)
 80084a4:	f009 fa06 	bl	80118b4 <__assert_func>

    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80084a8:	f107 030c 	add.w	r3, r7, #12
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fd fc56 	bl	8005d60 <lfs_alloc>
 80084b4:	6138      	str	r0, [r7, #16]
        if (err) {
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <lfs_file_relocate+0x3c>
            return err;
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	e0b9      	b.n	8008634 <lfs_file_relocate+0x1b0>
        }

        err = lfs_bd_erase(lfs, nblock);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f7fd f915 	bl	80056f4 <lfs_bd_erase>
 80084ca:	6138      	str	r0, [r7, #16]
        if (err) {
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d006      	beq.n	80084e0 <lfs_file_relocate+0x5c>
            if (err == LFS_ERR_CORRUPT) {
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80084d8:	f000 809b 	beq.w	8008612 <lfs_file_relocate+0x18e>
                goto relocate;
            }
            return err;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	e0a9      	b.n	8008634 <lfs_file_relocate+0x1b0>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	e069      	b.n	80085ba <lfs_file_relocate+0x136>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d027      	beq.n	8008542 <lfs_file_relocate+0xbe>
                err = lfs_dir_getread(lfs, &file->m,
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f103 0008 	add.w	r0, r3, #8
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800850c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008514:	2101      	movs	r1, #1
 8008516:	9105      	str	r1, [sp, #20]
 8008518:	f107 010b 	add.w	r1, r7, #11
 800851c:	9104      	str	r1, [sp, #16]
 800851e:	6979      	ldr	r1, [r7, #20]
 8008520:	9103      	str	r1, [sp, #12]
 8008522:	9302      	str	r3, [sp, #8]
 8008524:	4b48      	ldr	r3, [pc, #288]	; (8008648 <lfs_file_relocate+0x1c4>)
 8008526:	9301      	str	r3, [sp, #4]
 8008528:	9200      	str	r2, [sp, #0]
 800852a:	4623      	mov	r3, r4
 800852c:	2200      	movs	r2, #0
 800852e:	4601      	mov	r1, r0
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f7fd fdc8 	bl	80060c6 <lfs_dir_getread>
 8008536:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d01e      	beq.n	800857c <lfs_file_relocate+0xf8>
                    return err;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	e078      	b.n	8008634 <lfs_file_relocate+0x1b0>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8008548:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	1ad4      	subs	r4, r2, r3
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	2201      	movs	r2, #1
 8008558:	9203      	str	r2, [sp, #12]
 800855a:	f107 020b 	add.w	r2, r7, #11
 800855e:	9202      	str	r2, [sp, #8]
 8008560:	697a      	ldr	r2, [r7, #20]
 8008562:	9201      	str	r2, [sp, #4]
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	4623      	mov	r3, r4
 8008568:	4602      	mov	r2, r0
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7fc fe18 	bl	80051a0 <lfs_bd_read>
 8008570:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <lfs_file_relocate+0xf8>
                    return err;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	e05b      	b.n	8008634 <lfs_file_relocate+0x1b0>
                }
            }

            err = lfs_bd_prog(lfs,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f103 0110 	add.w	r1, r3, #16
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2201      	movs	r2, #1
 8008588:	9203      	str	r2, [sp, #12]
 800858a:	f107 020b 	add.w	r2, r7, #11
 800858e:	9202      	str	r2, [sp, #8]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2301      	movs	r3, #1
 8008598:	4602      	mov	r2, r0
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fd f804 	bl	80055a8 <lfs_bd_prog>
 80085a0:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <lfs_file_relocate+0x130>
                if (err == LFS_ERR_CORRUPT) {
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80085ae:	d032      	beq.n	8008616 <lfs_file_relocate+0x192>
                    goto relocate;
                }
                return err;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	e03f      	b.n	8008634 <lfs_file_relocate+0x1b0>
        for (lfs_off_t i = 0; i < file->off; i++) {
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	3301      	adds	r3, #1
 80085b8:	617b      	str	r3, [r7, #20]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d390      	bcc.n	80084e6 <lfs_file_relocate+0x62>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	69d9      	ldr	r1, [r3, #28]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d2:	461a      	mov	r2, r3
 80085d4:	f009 fb82 	bl	8011cdc <memcpy>
        file->cache.block = lfs->pcache.block;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	695a      	ldr	r2, [r3, #20]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3310      	adds	r3, #16
 80085f4:	4619      	mov	r1, r3
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f7fc fdbb 	bl	8005172 <lfs_cache_zero>

        file->block = nblock;
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800860e:	2300      	movs	r3, #0
 8008610:	e010      	b.n	8008634 <lfs_file_relocate+0x1b0>
                goto relocate;
 8008612:	bf00      	nop
 8008614:	e000      	b.n	8008618 <lfs_file_relocate+0x194>
                    goto relocate;
 8008616:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at %"PRIx32, nblock);
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	461a      	mov	r2, r3
 800861c:	f640 2104 	movw	r1, #2564	; 0xa04
 8008620:	480a      	ldr	r0, [pc, #40]	; (800864c <lfs_file_relocate+0x1c8>)
 8008622:	f009 ff3f 	bl	80124a4 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3310      	adds	r3, #16
 800862a:	4619      	mov	r1, r3
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7fc fd91 	bl	8005154 <lfs_cache_drop>
    while (true) {
 8008632:	e739      	b.n	80084a8 <lfs_file_relocate+0x24>
    }
}
 8008634:	4618      	mov	r0, r3
 8008636:	371c      	adds	r7, #28
 8008638:	46bd      	mov	sp, r7
 800863a:	bd90      	pop	{r4, r7, pc}
 800863c:	08013fb8 	.word	0x08013fb8
 8008640:	08016d08 	.word	0x08016d08
 8008644:	08013a3c 	.word	0x08013a3c
 8008648:	fff7fc00 	.word	0xfff7fc00
 800864c:	08013bb4 	.word	0x08013bb4

08008650 <lfs_file_outline>:

static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f7fd fc26 	bl	8005eb4 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8008668:	6839      	ldr	r1, [r7, #0]
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff ff0a 	bl	8008484 <lfs_file_relocate>
 8008670:	60f8      	str	r0, [r7, #12]
    if (err) {
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <lfs_file_outline+0x2c>
        return err;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	e006      	b.n	800868a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3710      	adds	r7, #16
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <lfs_file_flush>:

static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b09d      	sub	sp, #116	; 0x74
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <lfs_file_flush+0x24>
 80086aa:	4b66      	ldr	r3, [pc, #408]	; (8008844 <lfs_file_flush+0x1b0>)
 80086ac:	4a66      	ldr	r2, [pc, #408]	; (8008848 <lfs_file_flush+0x1b4>)
 80086ae:	f640 2118 	movw	r1, #2584	; 0xa18
 80086b2:	4866      	ldr	r0, [pc, #408]	; (800884c <lfs_file_flush+0x1b8>)
 80086b4:	f009 f8fe 	bl	80118b4 <__assert_func>

    if (file->flags & LFS_F_READING) {
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d011      	beq.n	80086e8 <lfs_file_flush+0x54>
        if (!(file->flags & LFS_F_INLINE)) {
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d105      	bne.n	80086dc <lfs_file_flush+0x48>
            lfs_cache_drop(lfs, &file->cache);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	3340      	adds	r3, #64	; 0x40
 80086d4:	4619      	mov	r1, r3
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7fc fd3c 	bl	8005154 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	f000 80a2 	beq.w	800883a <lfs_file_flush+0x1a6>
        lfs_off_t pos = file->pos;
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d174      	bne.n	80087f2 <lfs_file_flush+0x15e>
            // copy over anything after current branch
            lfs_file_t orig = {
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	2254      	movs	r2, #84	; 0x54
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f009 faf1 	bl	8011cf8 <memset>
                .ctz.head = file->ctz.head,
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800871a:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8008720:	63bb      	str	r3, [r7, #56]	; 0x38
 8008722:	4b4b      	ldr	r3, [pc, #300]	; (8008850 <lfs_file_flush+0x1bc>)
 8008724:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY | LFS_F_OPENED,
                .pos = file->pos,
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800872a:	643b      	str	r3, [r7, #64]	; 0x40
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8008732:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008734:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f7fc fd09 	bl	8005154 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8008742:	e02b      	b.n	800879c <lfs_file_flush+0x108>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
 8008744:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008748:	f107 010c 	add.w	r1, r7, #12
 800874c:	2301      	movs	r3, #1
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f882 	bl	8008858 <lfs_file_read>
 8008754:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008758:	2b00      	cmp	r3, #0
 800875a:	da01      	bge.n	8008760 <lfs_file_flush+0xcc>
                    return res;
 800875c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800875e:	e06d      	b.n	800883c <lfs_file_flush+0x1a8>
                }

                res = lfs_file_write(lfs, file, &data, 1);
 8008760:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8008764:	2301      	movs	r3, #1
 8008766:	6839      	ldr	r1, [r7, #0]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f9ab 	bl	8008ac4 <lfs_file_write>
 800876e:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8008770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008772:	2b00      	cmp	r3, #0
 8008774:	da01      	bge.n	800877a <lfs_file_flush+0xe6>
                    return res;
 8008776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008778:	e060      	b.n	800883c <lfs_file_flush+0x1a8>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008782:	d00b      	beq.n	800879c <lfs_file_flush+0x108>
                    lfs_cache_drop(lfs, &orig.cache);
 8008784:	f107 030c 	add.w	r3, r7, #12
 8008788:	3340      	adds	r3, #64	; 0x40
 800878a:	4619      	mov	r1, r3
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7fc fce1 	bl	8005154 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f7fc fcdc 	bl	8005154 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d3cd      	bcc.n	8008744 <lfs_file_flush+0xb0>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	2301      	movs	r3, #1
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f7fc fe48 	bl	8005448 <lfs_bd_flush>
 80087b8:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80087ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d024      	beq.n	800880a <lfs_file_flush+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 80087c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80087c6:	d001      	beq.n	80087cc <lfs_file_flush+0x138>
                        goto relocate;
                    }
                    return err;
 80087c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ca:	e037      	b.n	800883c <lfs_file_flush+0x1a8>
                        goto relocate;
 80087cc:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at %"PRIx32, file->block);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d2:	461a      	mov	r2, r3
 80087d4:	f640 2151 	movw	r1, #2641	; 0xa51
 80087d8:	481e      	ldr	r0, [pc, #120]	; (8008854 <lfs_file_flush+0x1c0>)
 80087da:	f009 fe63 	bl	80124a4 <iprintf>
                err = lfs_file_relocate(lfs, file);
 80087de:	6839      	ldr	r1, [r7, #0]
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7ff fe4f 	bl	8008484 <lfs_file_relocate>
 80087e6:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 80087e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d0dc      	beq.n	80087a8 <lfs_file_flush+0x114>
                    return err;
 80087ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087f0:	e024      	b.n	800883c <lfs_file_flush+0x1a8>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fa:	4619      	mov	r1, r3
 80087fc:	4610      	mov	r0, r2
 80087fe:	f7fc fbe3 	bl	8004fc8 <lfs_max>
 8008802:	4602      	mov	r2, r0
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	635a      	str	r2, [r3, #52]	; 0x34
 8008808:	e000      	b.n	800880c <lfs_file_flush+0x178>
                break;
 800880a:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008820:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800882c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008838:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	3774      	adds	r7, #116	; 0x74
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}
 8008844:	08013fb8 	.word	0x08013fb8
 8008848:	08016d1c 	.word	0x08016d1c
 800884c:	08013a3c 	.word	0x08013a3c
 8008850:	00200001 	.word	0x00200001
 8008854:	08013bb4 	.word	0x08013bb4

08008858 <lfs_file_read>:
        }
    }
}

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8008858:	b5b0      	push	{r4, r5, r7, lr}
 800885a:	b092      	sub	sp, #72	; 0x48
 800885c:	af06      	add	r7, sp, #24
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	f640 21ab 	movw	r1, #2731	; 0xaab
 8008876:	488c      	ldr	r0, [pc, #560]	; (8008aa8 <lfs_file_read+0x250>)
 8008878:	f009 fe14 	bl	80124a4 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <lfs_file_read+0x3e>
 8008888:	4b88      	ldr	r3, [pc, #544]	; (8008aac <lfs_file_read+0x254>)
 800888a:	4a89      	ldr	r2, [pc, #548]	; (8008ab0 <lfs_file_read+0x258>)
 800888c:	f640 21ad 	movw	r1, #2733	; 0xaad
 8008890:	4888      	ldr	r0, [pc, #544]	; (8008ab4 <lfs_file_read+0x25c>)
 8008892:	f009 f80f 	bl	80118b4 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_WRONLY);
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d106      	bne.n	80088b0 <lfs_file_read+0x58>
 80088a2:	4b85      	ldr	r3, [pc, #532]	; (8008ab8 <lfs_file_read+0x260>)
 80088a4:	4a82      	ldr	r2, [pc, #520]	; (8008ab0 <lfs_file_read+0x258>)
 80088a6:	f640 21ae 	movw	r1, #2734	; 0xaae
 80088aa:	4882      	ldr	r0, [pc, #520]	; (8008ab4 <lfs_file_read+0x25c>)
 80088ac:	f009 f802 	bl	80118b4 <__assert_func>

    uint8_t *data = buffer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (file->flags & LFS_F_WRITING) {
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00f      	beq.n	80088e4 <lfs_file_read+0x8c>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 80088c4:	68b9      	ldr	r1, [r7, #8]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f7ff fee4 	bl	8008694 <lfs_file_flush>
 80088cc:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d007      	beq.n	80088e4 <lfs_file_read+0x8c>
            LFS_TRACE("lfs_file_read -> %"PRId32, err);
 80088d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d6:	f640 21b7 	movw	r1, #2743	; 0xab7
 80088da:	4878      	ldr	r0, [pc, #480]	; (8008abc <lfs_file_read+0x264>)
 80088dc:	f009 fde2 	bl	80124a4 <iprintf>
            return err;
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	e0dd      	b.n	8008aa0 <lfs_file_read+0x248>
        }
    }

    if (file->pos >= file->ctz.size) {
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d307      	bcc.n	8008900 <lfs_file_read+0xa8>
        // eof if past end
        LFS_TRACE("lfs_file_read -> %"PRId32, 0);
 80088f0:	2200      	movs	r2, #0
 80088f2:	f640 21be 	movw	r1, #2750	; 0xabe
 80088f6:	4871      	ldr	r0, [pc, #452]	; (8008abc <lfs_file_read+0x264>)
 80088f8:	f009 fdd4 	bl	80124a4 <iprintf>
        return 0;
 80088fc:	2300      	movs	r3, #0
 80088fe:	e0cf      	b.n	8008aa0 <lfs_file_read+0x248>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	4619      	mov	r1, r3
 800890c:	6838      	ldr	r0, [r7, #0]
 800890e:	f7fc fb6b 	bl	8004fe8 <lfs_min>
 8008912:	6038      	str	r0, [r7, #0]
    nsize = size;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 8008918:	e0b7      	b.n	8008a8a <lfs_file_read+0x232>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008922:	2b00      	cmp	r3, #0
 8008924:	d006      	beq.n	8008934 <lfs_file_read+0xdc>
                file->off == lfs->cfg->block_size) {
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8008930:	429a      	cmp	r2, r3
 8008932:	d136      	bne.n	80089a2 <lfs_file_read+0x14a>
            if (!(file->flags & LFS_F_INLINE)) {
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800893c:	2b00      	cmp	r3, #0
 800893e:	d122      	bne.n	8008986 <lfs_file_read+0x12e>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008952:	68b9      	ldr	r1, [r7, #8]
 8008954:	3138      	adds	r1, #56	; 0x38
 8008956:	68b8      	ldr	r0, [r7, #8]
 8008958:	303c      	adds	r0, #60	; 0x3c
 800895a:	9003      	str	r0, [sp, #12]
 800895c:	9102      	str	r1, [sp, #8]
 800895e:	9201      	str	r2, [sp, #4]
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462b      	mov	r3, r5
 8008964:	4622      	mov	r2, r4
 8008966:	2100      	movs	r1, #0
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7ff fb67 	bl	800803c <lfs_ctz_find>
 800896e:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8008970:	6a3b      	ldr	r3, [r7, #32]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00f      	beq.n	8008996 <lfs_file_read+0x13e>
                    LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008976:	6a3a      	ldr	r2, [r7, #32]
 8008978:	f640 21ce 	movw	r1, #2766	; 0xace
 800897c:	484f      	ldr	r0, [pc, #316]	; (8008abc <lfs_file_read+0x264>)
 800897e:	f009 fd91 	bl	80124a4 <iprintf>
                    return err;
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	e08c      	b.n	8008aa0 <lfs_file_read+0x248>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f06f 0201 	mvn.w	r2, #1
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	4619      	mov	r1, r3
 80089b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b2:	f7fc fb19 	bl	8004fe8 <lfs_min>
 80089b6:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d02c      	beq.n	8008a1e <lfs_file_read+0x1c6>
            int err = lfs_dir_getread(lfs, &file->m,
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	f103 0408 	add.w	r4, r3, #8
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_dir_getread(lfs, &file->m,
 80089d4:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	889b      	ldrh	r3, [r3, #4]
 80089da:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80089dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80089e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80089e8:	69f8      	ldr	r0, [r7, #28]
 80089ea:	9005      	str	r0, [sp, #20]
 80089ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ee:	9004      	str	r0, [sp, #16]
 80089f0:	9103      	str	r1, [sp, #12]
 80089f2:	9302      	str	r3, [sp, #8]
 80089f4:	4b32      	ldr	r3, [pc, #200]	; (8008ac0 <lfs_file_read+0x268>)
 80089f6:	9301      	str	r3, [sp, #4]
 80089f8:	9200      	str	r2, [sp, #0]
 80089fa:	462b      	mov	r3, r5
 80089fc:	2200      	movs	r2, #0
 80089fe:	4621      	mov	r1, r4
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f7fd fb60 	bl	80060c6 <lfs_dir_getread>
 8008a06:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d029      	beq.n	8008a62 <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	f640 21e2 	movw	r1, #2786	; 0xae2
 8008a14:	4829      	ldr	r0, [pc, #164]	; (8008abc <lfs_file_read+0x264>)
 8008a16:	f009 fd45 	bl	80124a4 <iprintf>
                return err;
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	e040      	b.n	8008aa0 <lfs_file_read+0x248>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            int err = lfs_bd_read(lfs,
 8008a28:	69dc      	ldr	r4, [r3, #28]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008a32:	69f9      	ldr	r1, [r7, #28]
 8008a34:	9103      	str	r1, [sp, #12]
 8008a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a38:	9102      	str	r1, [sp, #8]
 8008a3a:	9201      	str	r2, [sp, #4]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	4623      	mov	r3, r4
 8008a40:	4602      	mov	r2, r0
 8008a42:	2100      	movs	r1, #0
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7fc fbab 	bl	80051a0 <lfs_bd_read>
 8008a4a:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <lfs_file_read+0x20a>
                LFS_TRACE("lfs_file_read -> %"PRId32, err);
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	f640 21ea 	movw	r1, #2794	; 0xaea
 8008a58:	4818      	ldr	r0, [pc, #96]	; (8008abc <lfs_file_read+0x264>)
 8008a5a:	f009 fd23 	bl	80124a4 <iprintf>
                return err;
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	e01e      	b.n	8008aa0 <lfs_file_read+0x248>
            }
        }

        file->pos += diff;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	441a      	add	r2, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	441a      	add	r2, r3
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	4413      	add	r3, r2
 8008a80:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 8008a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 8008a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f47f af44 	bne.w	800891a <lfs_file_read+0xc2>
    }

    LFS_TRACE("lfs_file_read -> %"PRId32, size);
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	f640 21f5 	movw	r1, #2805	; 0xaf5
 8008a98:	4808      	ldr	r0, [pc, #32]	; (8008abc <lfs_file_read+0x264>)
 8008a9a:	f009 fd03 	bl	80124a4 <iprintf>
    return size;
 8008a9e:	683b      	ldr	r3, [r7, #0]
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3730      	adds	r7, #48	; 0x30
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8008aa8:	08014044 	.word	0x08014044
 8008aac:	08013fb8 	.word	0x08013fb8
 8008ab0:	08016d2c 	.word	0x08016d2c
 8008ab4:	08013a3c 	.word	0x08013a3c
 8008ab8:	08014074 	.word	0x08014074
 8008abc:	08014098 	.word	0x08014098
 8008ac0:	fff7fc00 	.word	0xfff7fc00

08008ac4 <lfs_file_write>:

lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8008ac4:	b5b0      	push	{r4, r5, r7, lr}
 8008ac6:	b094      	sub	sp, #80	; 0x50
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
 8008ad0:	603b      	str	r3, [r7, #0]
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	f640 21fb 	movw	r1, #2811	; 0xafb
 8008ae2:	4886      	ldr	r0, [pc, #536]	; (8008cfc <lfs_file_write+0x238>)
 8008ae4:	f009 fcde 	bl	80124a4 <iprintf>
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(file->flags & LFS_F_OPENED);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d106      	bne.n	8008b02 <lfs_file_write+0x3e>
 8008af4:	4b82      	ldr	r3, [pc, #520]	; (8008d00 <lfs_file_write+0x23c>)
 8008af6:	4a83      	ldr	r2, [pc, #524]	; (8008d04 <lfs_file_write+0x240>)
 8008af8:	f640 21fd 	movw	r1, #2813	; 0xafd
 8008afc:	4882      	ldr	r0, [pc, #520]	; (8008d08 <lfs_file_write+0x244>)
 8008afe:	f008 fed9 	bl	80118b4 <__assert_func>
    LFS_ASSERT((file->flags & 3) != LFS_O_RDONLY);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	f003 0303 	and.w	r3, r3, #3
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d106      	bne.n	8008b1c <lfs_file_write+0x58>
 8008b0e:	4b7f      	ldr	r3, [pc, #508]	; (8008d0c <lfs_file_write+0x248>)
 8008b10:	4a7c      	ldr	r2, [pc, #496]	; (8008d04 <lfs_file_write+0x240>)
 8008b12:	f640 21fe 	movw	r1, #2814	; 0xafe
 8008b16:	487c      	ldr	r0, [pc, #496]	; (8008d08 <lfs_file_write+0x244>)
 8008b18:	f008 fecc 	bl	80118b4 <__assert_func>

    const uint8_t *data = buffer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d00f      	beq.n	8008b50 <lfs_file_write+0x8c>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 8008b30:	68b9      	ldr	r1, [r7, #8]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff fdae 	bl	8008694 <lfs_file_flush>
 8008b38:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <lfs_file_write+0x8c>
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b42:	f640 3107 	movw	r1, #2823	; 0xb07
 8008b46:	4872      	ldr	r0, [pc, #456]	; (8008d10 <lfs_file_write+0x24c>)
 8008b48:	f009 fcac 	bl	80124a4 <iprintf>
            return err;
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	e194      	b.n	8008e7a <lfs_file_write+0x3b6>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <lfs_file_write+0xac>
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d203      	bcs.n	8008b70 <lfs_file_write+0xac>
        file->pos = file->ctz.size;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	441a      	add	r2, r3
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b7c:	429a      	cmp	r2, r3
 8008b7e:	d909      	bls.n	8008b94 <lfs_file_write+0xd0>
        // Larger than file limit?
        LFS_TRACE("lfs_file_write -> %"PRId32, LFS_ERR_FBIG);
 8008b80:	f06f 021a 	mvn.w	r2, #26
 8008b84:	f640 3112 	movw	r1, #2834	; 0xb12
 8008b88:	4861      	ldr	r0, [pc, #388]	; (8008d10 <lfs_file_write+0x24c>)
 8008b8a:	f009 fc8b 	bl	80124a4 <iprintf>
        return LFS_ERR_FBIG;
 8008b8e:	f06f 031a 	mvn.w	r3, #26
 8008b92:	e172      	b.n	8008e7a <lfs_file_write+0x3b6>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d127      	bne.n	8008bf0 <lfs_file_write+0x12c>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	429a      	cmp	r2, r3
 8008baa:	d921      	bls.n	8008bf0 <lfs_file_write+0x12c>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb0:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8008bba:	e014      	b.n	8008be6 <lfs_file_write+0x122>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	75fb      	strb	r3, [r7, #23]
 8008bc0:	f107 0217 	add.w	r2, r7, #23
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	68b9      	ldr	r1, [r7, #8]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f7ff ff7b 	bl	8008ac4 <lfs_file_write>
 8008bce:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 8008bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	da07      	bge.n	8008be6 <lfs_file_write+0x122>
                LFS_TRACE("lfs_file_write -> %"PRId32, res);
 8008bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bd8:	f640 311e 	movw	r1, #2846	; 0xb1e
 8008bdc:	484c      	ldr	r0, [pc, #304]	; (8008d10 <lfs_file_write+0x24c>)
 8008bde:	f009 fc61 	bl	80124a4 <iprintf>
                return res;
 8008be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be4:	e149      	b.n	8008e7a <lfs_file_write+0x3b6>
        while (file->pos < pos) {
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d8e5      	bhi.n	8008bbc <lfs_file_write+0xf8>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 812d 	beq.w	8008e58 <lfs_file_write+0x394>
            lfs_max(file->pos+nsize, file->ctz.size) >
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	441a      	add	r2, r3
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fc f9db 	bl	8004fc8 <lfs_max>
 8008c12:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
 8008c18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c1e:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 8008c20:	08db      	lsrs	r3, r3, #3
 8008c22:	4619      	mov	r1, r3
 8008c24:	4610      	mov	r0, r2
 8008c26:	f7fc f9df 	bl	8004fe8 <lfs_min>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f240 30fe 	movw	r0, #1022	; 0x3fe
 8008c32:	f7fc f9d9 	bl	8004fe8 <lfs_min>
 8008c36:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	f240 810d 	bls.w	8008e58 <lfs_file_write+0x394>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 8008c3e:	68b9      	ldr	r1, [r7, #8]
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7ff fd05 	bl	8008650 <lfs_file_outline>
 8008c46:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	f000 8104 	beq.w	8008e58 <lfs_file_write+0x394>
            file->flags |= LFS_F_ERRED;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	631a      	str	r2, [r3, #48]	; 0x30
            LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	f640 312c 	movw	r1, #2860	; 0xb2c
 8008c62:	482b      	ldr	r0, [pc, #172]	; (8008d10 <lfs_file_write+0x24c>)
 8008c64:	f009 fc1e 	bl	80124a4 <iprintf>
            return err;
 8008c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6a:	e106      	b.n	8008e7a <lfs_file_write+0x3b6>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <lfs_file_write+0x1c4>
                file->off == lfs->cfg->block_size) {
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c80:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 8008c82:	429a      	cmp	r2, r3
 8008c84:	f040 8084 	bne.w	8008d90 <lfs_file_write+0x2cc>
            if (!(file->flags & LFS_F_INLINE)) {
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d16f      	bne.n	8008d74 <lfs_file_write+0x2b0>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d13f      	bne.n	8008d20 <lfs_file_write+0x25c>
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d03b      	beq.n	8008d20 <lfs_file_write+0x25c>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8008cba:	3a01      	subs	r2, #1
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	3138      	adds	r1, #56	; 0x38
 8008cc0:	68b8      	ldr	r0, [r7, #8]
 8008cc2:	303c      	adds	r0, #60	; 0x3c
 8008cc4:	9003      	str	r0, [sp, #12]
 8008cc6:	9102      	str	r1, [sp, #8]
 8008cc8:	9201      	str	r2, [sp, #4]
 8008cca:	9300      	str	r3, [sp, #0]
 8008ccc:	462b      	mov	r3, r5
 8008cce:	4622      	mov	r2, r4
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	68f8      	ldr	r0, [r7, #12]
 8008cd4:	f7ff f9b2 	bl	800803c <lfs_ctz_find>
 8008cd8:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d019      	beq.n	8008d14 <lfs_file_write+0x250>
                        file->flags |= LFS_F_ERRED;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30
                        LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cee:	f640 313d 	movw	r1, #2877	; 0xb3d
 8008cf2:	4807      	ldr	r0, [pc, #28]	; (8008d10 <lfs_file_write+0x24c>)
 8008cf4:	f009 fbd6 	bl	80124a4 <iprintf>
                        return err;
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	e0be      	b.n	8008e7a <lfs_file_write+0x3b6>
 8008cfc:	080140bc 	.word	0x080140bc
 8008d00:	08013fb8 	.word	0x08013fb8
 8008d04:	08016d3c 	.word	0x08016d3c
 8008d08:	08013a3c 	.word	0x08013a3c
 8008d0c:	080140ec 	.word	0x080140ec
 8008d10:	08014110 	.word	0x08014110
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	3340      	adds	r3, #64	; 0x40
 8008d18:	4619      	mov	r1, r3
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7fc fa29 	bl	8005172 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8008d20:	68f8      	ldr	r0, [r7, #12]
 8008d22:	f7fd f8c7 	bl	8005eb4 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008d2c:	68fc      	ldr	r4, [r7, #12]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	3238      	adds	r2, #56	; 0x38
 8008d3a:	68b9      	ldr	r1, [r7, #8]
 8008d3c:	313c      	adds	r1, #60	; 0x3c
 8008d3e:	9102      	str	r1, [sp, #8]
 8008d40:	9201      	str	r2, [sp, #4]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	462b      	mov	r3, r5
 8008d46:	4622      	mov	r2, r4
 8008d48:	4601      	mov	r1, r0
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f7ff f9f8 	bl	8008140 <lfs_ctz_extend>
 8008d50:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d015      	beq.n	8008d84 <lfs_file_write+0x2c0>
                    file->flags |= LFS_F_ERRED;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	631a      	str	r2, [r3, #48]	; 0x30
                    LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008d64:	6a3a      	ldr	r2, [r7, #32]
 8008d66:	f640 314c 	movw	r1, #2892	; 0xb4c
 8008d6a:	4846      	ldr	r0, [pc, #280]	; (8008e84 <lfs_file_write+0x3c0>)
 8008d6c:	f009 fb9a 	bl	80124a4 <iprintf>
                    return err;
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	e082      	b.n	8008e7a <lfs_file_write+0x3b6>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f06f 0201 	mvn.w	r2, #1
 8008d7a:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d94:	69da      	ldr	r2, [r3, #28]
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008da0:	f7fc f922 	bl	8004fe8 <lfs_min>
 8008da4:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8008dac:	68fc      	ldr	r4, [r7, #12]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008db6:	69f9      	ldr	r1, [r7, #28]
 8008db8:	9103      	str	r1, [sp, #12]
 8008dba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008dbc:	9102      	str	r1, [sp, #8]
 8008dbe:	9201      	str	r2, [sp, #4]
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7fc fbed 	bl	80055a8 <lfs_bd_prog>
 8008dce:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8008dd0:	69bb      	ldr	r3, [r7, #24]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d028      	beq.n	8008e28 <lfs_file_write+0x364>
                if (err == LFS_ERR_CORRUPT) {
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8008ddc:	d00d      	beq.n	8008dfa <lfs_file_write+0x336>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008dea:	69ba      	ldr	r2, [r7, #24]
 8008dec:	f640 3161 	movw	r1, #2913	; 0xb61
 8008df0:	4824      	ldr	r0, [pc, #144]	; (8008e84 <lfs_file_write+0x3c0>)
 8008df2:	f009 fb57 	bl	80124a4 <iprintf>
                return err;
 8008df6:	69bb      	ldr	r3, [r7, #24]
 8008df8:	e03f      	b.n	8008e7a <lfs_file_write+0x3b6>
                    goto relocate;
 8008dfa:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8008dfc:	68b9      	ldr	r1, [r7, #8]
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7ff fb40 	bl	8008484 <lfs_file_relocate>
 8008e04:	61b8      	str	r0, [r7, #24]
            if (err) {
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d0cc      	beq.n	8008da6 <lfs_file_write+0x2e2>
                file->flags |= LFS_F_ERRED;
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e10:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	631a      	str	r2, [r3, #48]	; 0x30
                LFS_TRACE("lfs_file_write -> %"PRId32, err);
 8008e18:	69ba      	ldr	r2, [r7, #24]
 8008e1a:	f640 316a 	movw	r1, #2922	; 0xb6a
 8008e1e:	4819      	ldr	r0, [pc, #100]	; (8008e84 <lfs_file_write+0x3c0>)
 8008e20:	f009 fb40 	bl	80124a4 <iprintf>
                return err;
 8008e24:	69bb      	ldr	r3, [r7, #24]
 8008e26:	e028      	b.n	8008e7a <lfs_file_write+0x3b6>
            break;
 8008e28:	bf00      	nop
            }
        }

        file->pos += diff;
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	441a      	add	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8008e42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	4413      	add	r3, r2
 8008e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8008e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f7fd f82e 	bl	8005eb4 <lfs_alloc_ack>
    while (nsize > 0) {
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f47f af06 	bne.w	8008c6c <lfs_file_write+0x1a8>
    }

    file->flags &= ~LFS_F_ERRED;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	631a      	str	r2, [r3, #48]	; 0x30
    LFS_TRACE("lfs_file_write -> %"PRId32, size);
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	f640 3178 	movw	r1, #2936	; 0xb78
 8008e72:	4804      	ldr	r0, [pc, #16]	; (8008e84 <lfs_file_write+0x3c0>)
 8008e74:	f009 fb16 	bl	80124a4 <iprintf>
    return size;
 8008e78:	683b      	ldr	r3, [r7, #0]
}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	3740      	adds	r7, #64	; 0x40
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	bdb0      	pop	{r4, r5, r7, pc}
 8008e82:	bf00      	nop
 8008e84:	08014110 	.word	0x08014110

08008e88 <lfs_init>:
    return err;
}


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b08c      	sub	sp, #48	; 0x30
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ea0:	695b      	ldr	r3, [r3, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d106      	bne.n	8008eb4 <lfs_init+0x2c>
 8008ea6:	4b92      	ldr	r3, [pc, #584]	; (80090f0 <lfs_init+0x268>)
 8008ea8:	4a92      	ldr	r2, [pc, #584]	; (80090f4 <lfs_init+0x26c>)
 8008eaa:	f44f 6153 	mov.w	r1, #3376	; 0xd30
 8008eae:	4892      	ldr	r0, [pc, #584]	; (80090f8 <lfs_init+0x270>)
 8008eb0:	f008 fd00 	bl	80118b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d106      	bne.n	8008ecc <lfs_init+0x44>
 8008ebe:	4b8f      	ldr	r3, [pc, #572]	; (80090fc <lfs_init+0x274>)
 8008ec0:	4a8c      	ldr	r2, [pc, #560]	; (80090f4 <lfs_init+0x26c>)
 8008ec2:	f640 5131 	movw	r1, #3377	; 0xd31
 8008ec6:	488c      	ldr	r0, [pc, #560]	; (80090f8 <lfs_init+0x270>)
 8008ec8:	f008 fcf4 	bl	80118b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <lfs_init+0x5c>
 8008ed6:	4b8a      	ldr	r3, [pc, #552]	; (8009100 <lfs_init+0x278>)
 8008ed8:	4a86      	ldr	r2, [pc, #536]	; (80090f4 <lfs_init+0x26c>)
 8008eda:	f640 5132 	movw	r1, #3378	; 0xd32
 8008ede:	4886      	ldr	r0, [pc, #536]	; (80090f8 <lfs_init+0x270>)
 8008ee0:	f008 fce8 	bl	80118b4 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008eee:	6952      	ldr	r2, [r2, #20]
 8008ef0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ef4:	fb01 f202 	mul.w	r2, r1, r2
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d006      	beq.n	8008f0c <lfs_init+0x84>
 8008efe:	4b81      	ldr	r3, [pc, #516]	; (8009104 <lfs_init+0x27c>)
 8008f00:	4a7c      	ldr	r2, [pc, #496]	; (80090f4 <lfs_init+0x26c>)
 8008f02:	f640 5136 	movw	r1, #3382	; 0xd36
 8008f06:	487c      	ldr	r0, [pc, #496]	; (80090f8 <lfs_init+0x270>)
 8008f08:	f008 fcd4 	bl	80118b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f16:	6992      	ldr	r2, [r2, #24]
 8008f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f1c:	fb01 f202 	mul.w	r2, r1, r2
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d006      	beq.n	8008f34 <lfs_init+0xac>
 8008f26:	4b78      	ldr	r3, [pc, #480]	; (8009108 <lfs_init+0x280>)
 8008f28:	4a72      	ldr	r2, [pc, #456]	; (80090f4 <lfs_init+0x26c>)
 8008f2a:	f640 5137 	movw	r1, #3383	; 0xd37
 8008f2e:	4872      	ldr	r0, [pc, #456]	; (80090f8 <lfs_init+0x270>)
 8008f30:	f008 fcc0 	bl	80118b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008f40:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f44:	fb01 f202 	mul.w	r2, r1, r2
 8008f48:	1a9b      	subs	r3, r3, r2
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d006      	beq.n	8008f5c <lfs_init+0xd4>
 8008f4e:	4b6f      	ldr	r3, [pc, #444]	; (800910c <lfs_init+0x284>)
 8008f50:	4a68      	ldr	r2, [pc, #416]	; (80090f4 <lfs_init+0x26c>)
 8008f52:	f640 5138 	movw	r1, #3384	; 0xd38
 8008f56:	4868      	ldr	r0, [pc, #416]	; (80090f8 <lfs_init+0x270>)
 8008f58:	f008 fcac 	bl	80118b4 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(LFS_BLOCK_NULL / (lfs->cfg->block_size-2*4))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	3b08      	subs	r3, #8
 8008f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fc f872 	bl	8005056 <lfs_npw2>
 8008f72:	4603      	mov	r3, r0
 8008f74:	009a      	lsls	r2, r3, #2
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d906      	bls.n	8008f8e <lfs_init+0x106>
 8008f80:	4b63      	ldr	r3, [pc, #396]	; (8009110 <lfs_init+0x288>)
 8008f82:	4a5c      	ldr	r2, [pc, #368]	; (80090f4 <lfs_init+0x26c>)
 8008f84:	f640 513b 	movw	r1, #3387	; 0xd3b
 8008f88:	485b      	ldr	r0, [pc, #364]	; (80090f8 <lfs_init+0x270>)
 8008f8a:	f008 fc93 	bl	80118b4 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d106      	bne.n	8008fa6 <lfs_init+0x11e>
 8008f98:	4b5e      	ldr	r3, [pc, #376]	; (8009114 <lfs_init+0x28c>)
 8008f9a:	4a56      	ldr	r2, [pc, #344]	; (80090f4 <lfs_init+0x26c>)
 8008f9c:	f640 5144 	movw	r1, #3396	; 0xd44
 8008fa0:	4855      	ldr	r0, [pc, #340]	; (80090f8 <lfs_init+0x270>)
 8008fa2:	f008 fc87 	bl	80118b4 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	60da      	str	r2, [r3, #12]
 8008fba:	e010      	b.n	8008fde <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fc f8af 	bl	8005126 <lfs_malloc>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d103      	bne.n	8008fde <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 8008fd6:	f06f 030b 	mvn.w	r3, #11
 8008fda:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8008fdc:	e0ee      	b.n	80091bc <lfs_init+0x334>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d005      	beq.n	8008ff4 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	61da      	str	r2, [r3, #28]
 8008ff2:	e010      	b.n	8009016 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fc f893 	bl	8005126 <lfs_malloc>
 8009000:	4602      	mov	r2, r0
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	69db      	ldr	r3, [r3, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d103      	bne.n	8009016 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800900e:	f06f 030b 	mvn.w	r3, #11
 8009012:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8009014:	e0d2      	b.n	80091bc <lfs_init+0x334>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7fc f8a9 	bl	8005172 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	3310      	adds	r3, #16
 8009024:	4619      	mov	r1, r3
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fc f8a3 	bl	8005172 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009032:	2b00      	cmp	r3, #0
 8009034:	d106      	bne.n	8009044 <lfs_init+0x1bc>
 8009036:	4b38      	ldr	r3, [pc, #224]	; (8009118 <lfs_init+0x290>)
 8009038:	4a2e      	ldr	r2, [pc, #184]	; (80090f4 <lfs_init+0x26c>)
 800903a:	f640 5162 	movw	r1, #3426	; 0xd62
 800903e:	482e      	ldr	r0, [pc, #184]	; (80090f8 <lfs_init+0x270>)
 8009040:	f008 fc38 	bl	80118b4 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	f003 0307 	and.w	r3, r3, #7
 800904e:	2b00      	cmp	r3, #0
 8009050:	d106      	bne.n	8009060 <lfs_init+0x1d8>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009058:	f003 0303 	and.w	r3, r3, #3
 800905c:	2b00      	cmp	r3, #0
 800905e:	d006      	beq.n	800906e <lfs_init+0x1e6>
 8009060:	4b2e      	ldr	r3, [pc, #184]	; (800911c <lfs_init+0x294>)
 8009062:	4a24      	ldr	r2, [pc, #144]	; (80090f4 <lfs_init+0x26c>)
 8009064:	f640 5163 	movw	r1, #3427	; 0xd63
 8009068:	4823      	ldr	r0, [pc, #140]	; (80090f8 <lfs_init+0x270>)
 800906a:	f008 fc23 	bl	80118b4 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009074:	2b00      	cmp	r3, #0
 8009076:	d005      	beq.n	8009084 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800907c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	665a      	str	r2, [r3, #100]	; 0x64
 8009082:	e010      	b.n	80090a6 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	4618      	mov	r0, r3
 800908c:	f7fc f84b 	bl	8005126 <lfs_malloc>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909a:	2b00      	cmp	r3, #0
 800909c:	d103      	bne.n	80090a6 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800909e:	f06f 030b 	mvn.w	r3, #11
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80090a4:	e08a      	b.n	80091bc <lfs_init+0x334>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ac:	2bff      	cmp	r3, #255	; 0xff
 80090ae:	d906      	bls.n	80090be <lfs_init+0x236>
 80090b0:	4b1b      	ldr	r3, [pc, #108]	; (8009120 <lfs_init+0x298>)
 80090b2:	4a10      	ldr	r2, [pc, #64]	; (80090f4 <lfs_init+0x26c>)
 80090b4:	f44f 6157 	mov.w	r1, #3440	; 0xd70
 80090b8:	480f      	ldr	r0, [pc, #60]	; (80090f8 <lfs_init+0x270>)
 80090ba:	f008 fbfb 	bl	80118b4 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d102      	bne.n	80090d6 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	22ff      	movs	r2, #255	; 0xff
 80090d4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	da23      	bge.n	8009128 <lfs_init+0x2a0>
 80090e0:	4b10      	ldr	r3, [pc, #64]	; (8009124 <lfs_init+0x29c>)
 80090e2:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <lfs_init+0x26c>)
 80090e4:	f640 5176 	movw	r1, #3446	; 0xd76
 80090e8:	4803      	ldr	r0, [pc, #12]	; (80090f8 <lfs_init+0x270>)
 80090ea:	f008 fbe3 	bl	80118b4 <__assert_func>
 80090ee:	bf00      	nop
 80090f0:	080144a8 	.word	0x080144a8
 80090f4:	08016d4c 	.word	0x08016d4c
 80090f8:	08013a3c 	.word	0x08013a3c
 80090fc:	080144c4 	.word	0x080144c4
 8009100:	080144e0 	.word	0x080144e0
 8009104:	080144fc 	.word	0x080144fc
 8009108:	0801452c 	.word	0x0801452c
 800910c:	0801455c 	.word	0x0801455c
 8009110:	08014590 	.word	0x08014590
 8009114:	080145e4 	.word	0x080145e4
 8009118:	08014600 	.word	0x08014600
 800911c:	08014620 	.word	0x08014620
 8009120:	08014674 	.word	0x08014674
 8009124:	08014690 	.word	0x08014690
    lfs->file_max = lfs->cfg->file_max;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009136:	2b00      	cmp	r3, #0
 8009138:	d103      	bne.n	8009142 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8009140:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009148:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800914c:	4293      	cmp	r3, r2
 800914e:	d906      	bls.n	800915e <lfs_init+0x2d6>
 8009150:	4b1e      	ldr	r3, [pc, #120]	; (80091cc <lfs_init+0x344>)
 8009152:	4a1f      	ldr	r2, [pc, #124]	; (80091d0 <lfs_init+0x348>)
 8009154:	f640 517c 	movw	r1, #3452	; 0xd7c
 8009158:	481e      	ldr	r0, [pc, #120]	; (80091d4 <lfs_init+0x34c>)
 800915a:	f008 fbab 	bl	80118b4 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916c:	2b00      	cmp	r3, #0
 800916e:	d103      	bne.n	8009178 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009176:	675a      	str	r2, [r3, #116]	; 0x74
    }

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800917e:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009186:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2200      	movs	r2, #0
 8009192:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gstate = (struct lfs_gstate){0};
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	3330      	adds	r3, #48	; 0x30
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	605a      	str	r2, [r3, #4]
 800919e:	609a      	str	r2, [r3, #8]
    lfs->gpending = (struct lfs_gstate){0};
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	333c      	adds	r3, #60	; 0x3c
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]
 80091a8:	605a      	str	r2, [r3, #4]
 80091aa:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (struct lfs_gstate){0};
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	3348      	adds	r3, #72	; 0x48
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	605a      	str	r2, [r3, #4]
 80091b6:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	e003      	b.n	80091c4 <lfs_init+0x33c>

cleanup:
    lfs_deinit(lfs);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f80b 	bl	80091d8 <lfs_deinit>
    return err;
 80091c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3730      	adds	r7, #48	; 0x30
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	080146b4 	.word	0x080146b4
 80091d0:	08016d4c 	.word	0x08016d4c
 80091d4:	08013a3c 	.word	0x08013a3c

080091d8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	68db      	ldr	r3, [r3, #12]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7fb ffa5 	bl	800513e <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d104      	bne.n	8009208 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	69db      	ldr	r3, [r3, #28]
 8009202:	4618      	mov	r0, r3
 8009204:	f7fb ff9b 	bl	800513e <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009216:	4618      	mov	r0, r3
 8009218:	f7fb ff91 	bl	800513e <lfs_free>
    }

    return 0;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <cfg_prn>:

void cfg_prn(lfs_t *lfs, const struct lfs_config *cfg)
{
 8009228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800922a:	b0a1      	sub	sp, #132	; 0x84
 800922c:	af12      	add	r7, sp, #72	; 0x48
 800922e:	6378      	str	r0, [r7, #52]	; 0x34
 8009230:	6339      	str	r1, [r7, #48]	; 0x30
	LFS_TRACE("lfs_format(%p, %p\n{\n\t.context=%p, "
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	681d      	ldr	r5, [r3, #0]
 8009236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009238:	685e      	ldr	r6, [r3, #4]
 800923a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	62ba      	str	r2, [r7, #40]	; 0x28
 8009246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009248:	6919      	ldr	r1, [r3, #16]
 800924a:	6279      	str	r1, [r7, #36]	; 0x24
 800924c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924e:	6958      	ldr	r0, [r3, #20]
 8009250:	6238      	str	r0, [r7, #32]
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	699c      	ldr	r4, [r3, #24]
 8009256:	61fc      	str	r4, [r7, #28]
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	69db      	ldr	r3, [r3, #28]
 800925c:	61bb      	str	r3, [r7, #24]
 800925e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009260:	6a1a      	ldr	r2, [r3, #32]
 8009262:	617a      	str	r2, [r7, #20]
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009268:	6139      	str	r1, [r7, #16]
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009272:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8009274:	60bc      	str	r4, [r7, #8]
 8009276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800927a:	607b      	str	r3, [r7, #4]
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009286:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009290:	9311      	str	r3, [sp, #68]	; 0x44
 8009292:	9210      	str	r2, [sp, #64]	; 0x40
 8009294:	910f      	str	r1, [sp, #60]	; 0x3c
 8009296:	900e      	str	r0, [sp, #56]	; 0x38
 8009298:	940d      	str	r4, [sp, #52]	; 0x34
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	930c      	str	r3, [sp, #48]	; 0x30
 800929e:	68bc      	ldr	r4, [r7, #8]
 80092a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	900a      	str	r0, [sp, #40]	; 0x28
 80092a6:	6939      	ldr	r1, [r7, #16]
 80092a8:	9109      	str	r1, [sp, #36]	; 0x24
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	9208      	str	r2, [sp, #32]
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	9307      	str	r3, [sp, #28]
 80092b2:	69fc      	ldr	r4, [r7, #28]
 80092b4:	9406      	str	r4, [sp, #24]
 80092b6:	6a38      	ldr	r0, [r7, #32]
 80092b8:	9005      	str	r0, [sp, #20]
 80092ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092bc:	9104      	str	r1, [sp, #16]
 80092be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092c0:	9203      	str	r2, [sp, #12]
 80092c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c4:	9302      	str	r3, [sp, #8]
 80092c6:	9601      	str	r6, [sp, #4]
 80092c8:	9500      	str	r5, [sp, #0]
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ce:	f640 51a8 	movw	r1, #3496	; 0xda8
 80092d2:	4803      	ldr	r0, [pc, #12]	; (80092e0 <cfg_prn+0xb8>)
 80092d4:	f009 f8e6 	bl	80124a4 <iprintf>
	            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
	            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
	            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
	            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
	            cfg->name_max, cfg->file_max, cfg->attr_max);
}
 80092d8:	bf00      	nop
 80092da:	373c      	adds	r7, #60	; 0x3c
 80092dc:	46bd      	mov	sp, r7
 80092de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e0:	080146d0 	.word	0x080146d0

080092e4 <lfs_format>:

int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b0a0      	sub	sp, #128	; 0x80
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
	cfg_prn(lfs, cfg);
 80092ee:	6839      	ldr	r1, [r7, #0]
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff99 	bl	8009228 <cfg_prn>
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = 0;
 80092f6:	2300      	movs	r3, #0
 80092f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 80092fa:	6839      	ldr	r1, [r7, #0]
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f7ff fdc3 	bl	8008e88 <lfs_init>
 8009302:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009306:	2b00      	cmp	r3, #0
 8009308:	d007      	beq.n	800931a <lfs_format+0x36>
            LFS_TRACE("lfs_format -> %d", err);
 800930a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800930c:	f44f 615d 	mov.w	r1, #3536	; 0xdd0
 8009310:	4848      	ldr	r0, [pc, #288]	; (8009434 <lfs_format+0x150>)
 8009312:	f009 f8c7 	bl	80124a4 <iprintf>
            return err;
 8009316:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009318:	e088      	b.n	800942c <lfs_format+0x148>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009324:	461a      	mov	r2, r3
 8009326:	2100      	movs	r1, #0
 8009328:	f008 fce6 	bl	8011cf8 <memset>
        lfs->free.off = 0;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009338:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	4619      	mov	r1, r3
 8009342:	4610      	mov	r0, r2
 8009344:	f7fb fe50 	bl	8004fe8 <lfs_min>
 8009348:	4602      	mov	r2, r0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7fc fdad 	bl	8005eb4 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800935a:	f107 030c 	add.w	r3, r7, #12
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7fd ff07 	bl	8007174 <lfs_dir_alloc>
 8009366:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d14f      	bne.n	800940e <lfs_format+0x12a>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800936e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009372:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009378:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 800937a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009380:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8009382:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8009388:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800938e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8009394:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8009396:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800939a:	4618      	mov	r0, r3
 800939c:	f7fc fc70 	bl	8005c80 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <lfs_format+0x154>)
 80093a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093a4:	2300      	movs	r3, #0
 80093a6:	653b      	str	r3, [r7, #80]	; 0x50
 80093a8:	4b24      	ldr	r3, [pc, #144]	; (800943c <lfs_format+0x158>)
 80093aa:	657b      	str	r3, [r7, #84]	; 0x54
 80093ac:	4b24      	ldr	r3, [pc, #144]	; (8009440 <lfs_format+0x15c>)
 80093ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80093b0:	4b24      	ldr	r3, [pc, #144]	; (8009444 <lfs_format+0x160>)
 80093b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80093b8:	663b      	str	r3, [r7, #96]	; 0x60
 80093ba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80093be:	f107 010c 	add.w	r1, r7, #12
 80093c2:	2303      	movs	r3, #3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fe fad3 	bl	8007970 <lfs_dir_commit>
 80093ca:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)), &superblock}));
        if (err) {
 80093cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d11f      	bne.n	8009412 <lfs_format+0x12e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 80093d2:	2300      	movs	r3, #0
 80093d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d6:	2301      	movs	r3, #1
 80093d8:	633b      	str	r3, [r7, #48]	; 0x30
 80093da:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80093de:	f107 030c 	add.w	r3, r7, #12
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f7fd fc55 	bl	8006c94 <lfs_dir_fetch>
 80093ea:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80093ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d111      	bne.n	8009416 <lfs_format+0x132>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 80093f2:	2300      	movs	r3, #0
 80093f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 80093f8:	f107 010c 	add.w	r1, r7, #12
 80093fc:	2300      	movs	r3, #0
 80093fe:	2200      	movs	r2, #0
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe fab5 	bl	8007970 <lfs_dir_commit>
 8009406:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8009408:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800940a:	2b00      	cmp	r3, #0
 800940c:	e004      	b.n	8009418 <lfs_format+0x134>
            goto cleanup;
 800940e:	bf00      	nop
 8009410:	e002      	b.n	8009418 <lfs_format+0x134>
            goto cleanup;
 8009412:	bf00      	nop
 8009414:	e000      	b.n	8009418 <lfs_format+0x134>
            goto cleanup;
 8009416:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7ff fedd 	bl	80091d8 <lfs_deinit>
    LFS_TRACE("lfs_format -> %d", err);
 800941e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009420:	f640 6107 	movw	r1, #3591	; 0xe07
 8009424:	4803      	ldr	r0, [pc, #12]	; (8009434 <lfs_format+0x150>)
 8009426:	f009 f83d 	bl	80124a4 <iprintf>
    return err;
 800942a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
}
 800942c:	4618      	mov	r0, r3
 800942e:	3780      	adds	r7, #128	; 0x80
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	08014830 	.word	0x08014830
 8009438:	40100000 	.word	0x40100000
 800943c:	0ff00008 	.word	0x0ff00008
 8009440:	08014850 	.word	0x08014850
 8009444:	20100018 	.word	0x20100018

08009448 <lfs_mount>:

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8009448:	b5b0      	push	{r4, r5, r7, lr}
 800944a:	b09a      	sub	sp, #104	; 0x68
 800944c:	af04      	add	r7, sp, #16
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
	cfg_prn(lfs, cfg);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f7ff fee7 	bl	8009228 <cfg_prn>
            (void*)(uintptr_t)cfg->erase, (void*)(uintptr_t)cfg->sync,
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);*/
    int err = lfs_init(lfs, cfg);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f7ff fd13 	bl	8008e88 <lfs_init>
 8009462:	6578      	str	r0, [r7, #84]	; 0x54
    if (err) {
 8009464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <lfs_mount+0x32>
        LFS_TRACE("lfs_mount -> %d", err);
 800946a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800946c:	f640 611f 	movw	r1, #3615	; 0xe1f
 8009470:	489e      	ldr	r0, [pc, #632]	; (80096ec <lfs_mount+0x2a4>)
 8009472:	f009 f817 	bl	80124a4 <iprintf>
        return err;
 8009476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009478:	e134      	b.n	80096e4 <lfs_mount+0x29c>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800947a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800947e:	2220      	movs	r2, #32
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f008 fc38 	bl	8011cf8 <memset>
 8009488:	2301      	movs	r3, #1
 800948a:	64bb      	str	r3, [r7, #72]	; 0x48
    while (!lfs_pair_isnull(dir.tail)) {
 800948c:	e0b9      	b.n	8009602 <lfs_mount+0x1ba>
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	623b      	str	r3, [r7, #32]
 8009492:	4b97      	ldr	r3, [pc, #604]	; (80096f0 <lfs_mount+0x2a8>)
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	2308      	movs	r3, #8
 8009498:	62bb      	str	r3, [r7, #40]	; 0x28
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800949a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800949e:	f103 0218 	add.w	r2, r3, #24
 80094a2:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80094a6:	f107 0320 	add.w	r3, r7, #32
 80094aa:	9303      	str	r3, [sp, #12]
 80094ac:	4b91      	ldr	r3, [pc, #580]	; (80096f4 <lfs_mount+0x2ac>)
 80094ae:	9302      	str	r3, [sp, #8]
 80094b0:	2300      	movs	r3, #0
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	4b90      	ldr	r3, [pc, #576]	; (80096f8 <lfs_mount+0x2b0>)
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	4b90      	ldr	r3, [pc, #576]	; (80096fc <lfs_mount+0x2b4>)
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f7fd f8b4 	bl	8006628 <lfs_dir_fetchmatch>
 80094c0:	6538      	str	r0, [r7, #80]	; 0x50
                    lfs, "littlefs", 8});
        if (tag < 0) {
 80094c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da02      	bge.n	80094ce <lfs_mount+0x86>
            err = tag;
 80094c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ca:	657b      	str	r3, [r7, #84]	; 0x54
            goto cleanup;
 80094cc:	e100      	b.n	80096d0 <lfs_mount+0x288>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 80094ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8089 	beq.w	80095e8 <lfs_mount+0x1a0>
 80094d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fc f9d7 	bl	800588c <lfs_tag_isdelete>
 80094de:	4603      	mov	r3, r0
 80094e0:	f083 0301 	eor.w	r3, r3, #1
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d07e      	beq.n	80095e8 <lfs_mount+0x1a0>
            // update root
            lfs->root[0] = dir.pair[0];
 80094ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 80094f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 80094f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80094fa:	f107 0308 	add.w	r3, r7, #8
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4b7f      	ldr	r3, [pc, #508]	; (8009700 <lfs_mount+0x2b8>)
 8009502:	4a7e      	ldr	r2, [pc, #504]	; (80096fc <lfs_mount+0x2b4>)
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7fc fdc3 	bl	8006090 <lfs_dir_get>
 800950a:	6538      	str	r0, [r7, #80]	; 0x50
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800950c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800950e:	2b00      	cmp	r3, #0
 8009510:	da02      	bge.n	8009518 <lfs_mount+0xd0>
                err = tag;
 8009512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009514:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 8009516:	e0db      	b.n	80096d0 <lfs_mount+0x288>
            }
            lfs_superblock_fromle32(&superblock);
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	4618      	mov	r0, r3
 800951e:	f7fc fb77 	bl	8005c10 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8009530:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009534:	2b02      	cmp	r3, #2
 8009536:	d103      	bne.n	8009540 <lfs_mount+0xf8>
 8009538:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800953c:	2b00      	cmp	r3, #0
 800953e:	d00c      	beq.n	800955a <lfs_mount+0x112>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version %"PRIu16".%"PRIu16,
 8009540:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009544:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009548:	f640 6148 	movw	r1, #3656	; 0xe48
 800954c:	486d      	ldr	r0, [pc, #436]	; (8009704 <lfs_mount+0x2bc>)
 800954e:	f008 ffa9 	bl	80124a4 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8009552:	f06f 0315 	mvn.w	r3, #21
 8009556:	657b      	str	r3, [r7, #84]	; 0x54
                goto cleanup;
 8009558:	e045      	b.n	80095e6 <lfs_mount+0x19e>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d013      	beq.n	8009588 <lfs_mount+0x140>
                if (superblock.name_max > lfs->name_max) {
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009566:	429a      	cmp	r2, r3
 8009568:	d90b      	bls.n	8009582 <lfs_mount+0x13a>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800956a:	697a      	ldr	r2, [r7, #20]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009570:	f640 6151 	movw	r1, #3665	; 0xe51
 8009574:	4864      	ldr	r0, [pc, #400]	; (8009708 <lfs_mount+0x2c0>)
 8009576:	f008 ff95 	bl	80124a4 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800957a:	f06f 0315 	mvn.w	r3, #21
 800957e:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 8009580:	e031      	b.n	80095e6 <lfs_mount+0x19e>
                }

                lfs->name_max = superblock.name_max;
 8009582:	697a      	ldr	r2, [r7, #20]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d013      	beq.n	80095b6 <lfs_mount+0x16e>
                if (superblock.file_max > lfs->file_max) {
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009594:	429a      	cmp	r2, r3
 8009596:	d90b      	bls.n	80095b0 <lfs_mount+0x168>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8009598:	69ba      	ldr	r2, [r7, #24]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800959e:	f640 615c 	movw	r1, #3676	; 0xe5c
 80095a2:	485a      	ldr	r0, [pc, #360]	; (800970c <lfs_mount+0x2c4>)
 80095a4:	f008 ff7e 	bl	80124a4 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 80095a8:	f06f 0315 	mvn.w	r3, #21
 80095ac:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 80095ae:	e01a      	b.n	80095e6 <lfs_mount+0x19e>
                }

                lfs->file_max = superblock.file_max;
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d015      	beq.n	80095e8 <lfs_mount+0x1a0>
                if (superblock.attr_max > lfs->attr_max) {
 80095bc:	69fa      	ldr	r2, [r7, #28]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d90b      	bls.n	80095de <lfs_mount+0x196>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 80095c6:	69fa      	ldr	r2, [r7, #28]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095cc:	f640 6167 	movw	r1, #3687	; 0xe67
 80095d0:	484f      	ldr	r0, [pc, #316]	; (8009710 <lfs_mount+0x2c8>)
 80095d2:	f008 ff67 	bl	80124a4 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 80095d6:	f06f 0315 	mvn.w	r3, #21
 80095da:	657b      	str	r3, [r7, #84]	; 0x54
                    goto cleanup;
 80095dc:	e003      	b.n	80095e6 <lfs_mount+0x19e>
                }

                lfs->attr_max = superblock.attr_max;
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	675a      	str	r2, [r3, #116]	; 0x74
 80095e4:	e000      	b.n	80095e8 <lfs_mount+0x1a0>
            goto cleanup;
 80095e6:	e073      	b.n	80096d0 <lfs_mount+0x288>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gpending);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80095ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7fd fb67 	bl	8006cc8 <lfs_dir_getgstate>
 80095fa:	6578      	str	r0, [r7, #84]	; 0x54
        if (err) {
 80095fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d165      	bne.n	80096ce <lfs_mount+0x286>
    while (!lfs_pair_isnull(dir.tail)) {
 8009602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009606:	3318      	adds	r3, #24
 8009608:	4618      	mov	r0, r3
 800960a:	f7fc f8b8 	bl	800577e <lfs_pair_isnull>
 800960e:	4603      	mov	r3, r0
 8009610:	f083 0301 	eor.w	r3, r3, #1
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	f47f af39 	bne.w	800948e <lfs_mount+0x46>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	3320      	adds	r3, #32
 8009620:	4618      	mov	r0, r3
 8009622:	f7fc f8ac 	bl	800577e <lfs_pair_isnull>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <lfs_mount+0x1ec>
        err = LFS_ERR_INVAL;
 800962c:	f06f 0315 	mvn.w	r3, #21
 8009630:	657b      	str	r3, [r7, #84]	; 0x54
        goto cleanup;
 8009632:	e04d      	b.n	80096d0 <lfs_mount+0x288>
    }

    // update littlefs with gstate
    lfs->gpending.tag += !lfs_tag_isvalid(lfs->gpending.tag);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009638:	4618      	mov	r0, r3
 800963a:	f7fc f919 	bl	8005870 <lfs_tag_isvalid>
 800963e:	4603      	mov	r3, r0
 8009640:	f083 0301 	eor.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	461a      	mov	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs->gstate = lfs->gpending;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	3330      	adds	r3, #48	; 0x30
 8009658:	323c      	adds	r2, #60	; 0x3c
 800965a:	ca07      	ldmia	r2, {r0, r1, r2}
 800965c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (lfs_gstate_hasmove(&lfs->gstate)) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3330      	adds	r3, #48	; 0x30
 8009664:	4618      	mov	r0, r3
 8009666:	f7fc f9e4 	bl	8005a32 <lfs_gstate_hasmove>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d011      	beq.n	8009694 <lfs_mount+0x24c>
        LFS_DEBUG("Found move %"PRIx32" %"PRIx32" %"PRIx16,
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	4618      	mov	r0, r3
 800967e:	f7fc f952 	bl	8005926 <lfs_tag_id>
 8009682:	4603      	mov	r3, r0
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	462b      	mov	r3, r5
 8009688:	4622      	mov	r2, r4
 800968a:	f640 6182 	movw	r1, #3714	; 0xe82
 800968e:	4821      	ldr	r0, [pc, #132]	; (8009714 <lfs_mount+0x2cc>)
 8009690:	f008 ff08 	bl	80124a4 <iprintf>
                lfs->gstate.pair[1],
                lfs_tag_id(lfs->gstate.tag));
    }

    // setup free lookahead
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800969c:	69d2      	ldr	r2, [r2, #28]
 800969e:	fbb3 f1f2 	udiv	r1, r3, r2
 80096a2:	fb01 f202 	mul.w	r2, r1, r2
 80096a6:	1a9a      	subs	r2, r3, r2
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	655a      	str	r2, [r3, #84]	; 0x54
    lfs->free.size = 0;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2200      	movs	r2, #0
 80096b0:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2200      	movs	r2, #0
 80096b6:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7fc fbfb 	bl	8005eb4 <lfs_alloc_ack>

    LFS_TRACE("lfs_mount -> %d", 0);
 80096be:	2200      	movs	r2, #0
 80096c0:	f640 618e 	movw	r1, #3726	; 0xe8e
 80096c4:	4809      	ldr	r0, [pc, #36]	; (80096ec <lfs_mount+0x2a4>)
 80096c6:	f008 feed 	bl	80124a4 <iprintf>
    return 0;
 80096ca:	2300      	movs	r3, #0
 80096cc:	e00a      	b.n	80096e4 <lfs_mount+0x29c>
            goto cleanup;
 80096ce:	bf00      	nop

cleanup:
    lfs_unmount(lfs);
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f000 f821 	bl	8009718 <lfs_unmount>
    LFS_TRACE("lfs_mount -> %d", err);
 80096d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096d8:	f640 6193 	movw	r1, #3731	; 0xe93
 80096dc:	4803      	ldr	r0, [pc, #12]	; (80096ec <lfs_mount+0x2a4>)
 80096de:	f008 fee1 	bl	80124a4 <iprintf>
    return err;
 80096e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3758      	adds	r7, #88	; 0x58
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bdb0      	pop	{r4, r5, r7, pc}
 80096ec:	0801485c 	.word	0x0801485c
 80096f0:	08014850 	.word	0x08014850
 80096f4:	08006d2d 	.word	0x08006d2d
 80096f8:	0ff00008 	.word	0x0ff00008
 80096fc:	7ffffc00 	.word	0x7ffffc00
 8009700:	20100018 	.word	0x20100018
 8009704:	0801487c 	.word	0x0801487c
 8009708:	080148a4 	.word	0x080148a4
 800970c:	080148d4 	.word	0x080148d4
 8009710:	08014904 	.word	0x08014904
 8009714:	08014934 	.word	0x08014934

08009718 <lfs_unmount>:

int lfs_unmount(lfs_t *lfs) {
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	f640 6198 	movw	r1, #3736	; 0xe98
 8009726:	4809      	ldr	r0, [pc, #36]	; (800974c <lfs_unmount+0x34>)
 8009728:	f008 febc 	bl	80124a4 <iprintf>
    int err = lfs_deinit(lfs);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f7ff fd53 	bl	80091d8 <lfs_deinit>
 8009732:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	f640 619a 	movw	r1, #3738	; 0xe9a
 800973a:	4805      	ldr	r0, [pc, #20]	; (8009750 <lfs_unmount+0x38>)
 800973c:	f008 feb2 	bl	80124a4 <iprintf>
    return err;
 8009740:	68fb      	ldr	r3, [r7, #12]
}
 8009742:	4618      	mov	r0, r3
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	0801495c 	.word	0x0801495c
 8009750:	0801497c 	.word	0x0801497c

08009754 <lfs_fs_traverse>:


/// Filesystem filesystem operations ///
int lfs_fs_traverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data) {
 8009754:	b590      	push	{r4, r7, lr}
 8009756:	b09b      	sub	sp, #108	; 0x6c
 8009758:	af04      	add	r7, sp, #16
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
    LFS_TRACE("lfs_fs_traverse(%p, %p, %p)",
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	f640 61a2 	movw	r1, #3746	; 0xea2
 800976c:	488a      	ldr	r0, [pc, #552]	; (8009998 <lfs_fs_traverse+0x244>)
 800976e:	f008 fe99 	bl	80124a4 <iprintf>
            (void*)lfs, (void*)(uintptr_t)cb, data);
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8009772:	f107 0318 	add.w	r3, r7, #24
 8009776:	2220      	movs	r2, #32
 8009778:	2100      	movs	r1, #0
 800977a:	4618      	mov	r0, r3
 800977c:	f008 fabc 	bl	8011cf8 <memset>
 8009780:	2301      	movs	r3, #1
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    while (!lfs_pair_isnull(dir.tail)) {
 8009784:	e08d      	b.n	80098a2 <lfs_fs_traverse+0x14e>
        for (int i = 0; i < 2; i++) {
 8009786:	2300      	movs	r3, #0
 8009788:	657b      	str	r3, [r7, #84]	; 0x54
 800978a:	e019      	b.n	80097c0 <lfs_fs_traverse+0x6c>
            int err = cb(data, dir.tail[i]);
 800978c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800978e:	3306      	adds	r3, #6
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	3358      	adds	r3, #88	; 0x58
 8009794:	443b      	add	r3, r7
 8009796:	f853 2c40 	ldr.w	r2, [r3, #-64]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4611      	mov	r1, r2
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
 80097a2:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 80097a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d007      	beq.n	80097ba <lfs_fs_traverse+0x66>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 80097aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097ac:	f640 61b9 	movw	r1, #3769	; 0xeb9
 80097b0:	487a      	ldr	r0, [pc, #488]	; (800999c <lfs_fs_traverse+0x248>)
 80097b2:	f008 fe77 	bl	80124a4 <iprintf>
                return err;
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	e0ea      	b.n	8009990 <lfs_fs_traverse+0x23c>
        for (int i = 0; i < 2; i++) {
 80097ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097bc:	3301      	adds	r3, #1
 80097be:	657b      	str	r3, [r7, #84]	; 0x54
 80097c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	dde2      	ble.n	800978c <lfs_fs_traverse+0x38>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 80097c6:	f107 0318 	add.w	r3, r7, #24
 80097ca:	f103 0218 	add.w	r2, r3, #24
 80097ce:	f107 0318 	add.w	r3, r7, #24
 80097d2:	4619      	mov	r1, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f7fd fa5d 	bl	8006c94 <lfs_dir_fetch>
 80097da:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 80097dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <lfs_fs_traverse+0x9e>
            LFS_TRACE("lfs_fs_traverse -> %d", err);
 80097e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097e4:	f640 61c1 	movw	r1, #3777	; 0xec1
 80097e8:	486c      	ldr	r0, [pc, #432]	; (800999c <lfs_fs_traverse+0x248>)
 80097ea:	f008 fe5b 	bl	80124a4 <iprintf>
            return err;
 80097ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097f0:	e0ce      	b.n	8009990 <lfs_fs_traverse+0x23c>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 80097f2:	2300      	movs	r3, #0
 80097f4:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80097f8:	e04e      	b.n	8009898 <lfs_fs_traverse+0x144>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 80097fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80097fe:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8009800:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009804:	f043 0308 	orr.w	r3, r3, #8
 8009808:	f107 0118 	add.w	r1, r7, #24
 800980c:	f107 0210 	add.w	r2, r7, #16
 8009810:	9200      	str	r2, [sp, #0]
 8009812:	4a63      	ldr	r2, [pc, #396]	; (80099a0 <lfs_fs_traverse+0x24c>)
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f7fc fc3b 	bl	8006090 <lfs_dir_get>
 800981a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800981c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800981e:	2b00      	cmp	r3, #0
 8009820:	da0b      	bge.n	800983a <lfs_fs_traverse+0xe6>
                if (tag == LFS_ERR_NOENT) {
 8009822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009824:	f113 0f02 	cmn.w	r3, #2
 8009828:	d030      	beq.n	800988c <lfs_fs_traverse+0x138>
                    continue;
                }
                LFS_TRACE("lfs_fs_traverse -> %d", tag);
 800982a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800982c:	f640 61cd 	movw	r1, #3789	; 0xecd
 8009830:	485a      	ldr	r0, [pc, #360]	; (800999c <lfs_fs_traverse+0x248>)
 8009832:	f008 fe37 	bl	80124a4 <iprintf>
                return tag;
 8009836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009838:	e0aa      	b.n	8009990 <lfs_fs_traverse+0x23c>
            }
            lfs_ctz_fromle32(&ctz);
 800983a:	f107 0310 	add.w	r3, r7, #16
 800983e:	4618      	mov	r0, r3
 8009840:	f7fc f9ce 	bl	8005be0 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8009844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009846:	4618      	mov	r0, r3
 8009848:	f7fc f843 	bl	80058d2 <lfs_tag_type3>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	f240 2302 	movw	r3, #514	; 0x202
 8009854:	429a      	cmp	r2, r3
 8009856:	d11a      	bne.n	800988e <lfs_fs_traverse+0x13a>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8009858:	68f9      	ldr	r1, [r7, #12]
 800985a:	6938      	ldr	r0, [r7, #16]
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	9202      	str	r2, [sp, #8]
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	9201      	str	r2, [sp, #4]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	460a      	mov	r2, r1
 800986c:	2100      	movs	r1, #0
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7fe fd8c 	bl	800838c <lfs_ctz_traverse>
 8009874:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8009876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d008      	beq.n	800988e <lfs_fs_traverse+0x13a>
                    LFS_TRACE("lfs_fs_traverse -> %d", err);
 800987c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800987e:	f640 61d6 	movw	r1, #3798	; 0xed6
 8009882:	4846      	ldr	r0, [pc, #280]	; (800999c <lfs_fs_traverse+0x248>)
 8009884:	f008 fe0e 	bl	80124a4 <iprintf>
                    return err;
 8009888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800988a:	e081      	b.n	8009990 <lfs_fs_traverse+0x23c>
                    continue;
 800988c:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800988e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8009892:	3301      	adds	r3, #1
 8009894:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8009898:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800989a:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800989e:	429a      	cmp	r2, r3
 80098a0:	d3ab      	bcc.n	80097fa <lfs_fs_traverse+0xa6>
    while (!lfs_pair_isnull(dir.tail)) {
 80098a2:	f107 0318 	add.w	r3, r7, #24
 80098a6:	3318      	adds	r3, #24
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fb ff68 	bl	800577e <lfs_pair_isnull>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f083 0301 	eor.w	r3, r3, #1
 80098b4:	b2db      	uxtb	r3, r3
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f47f af65 	bne.w	8009786 <lfs_fs_traverse+0x32>
            }
        }
    }

    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c2:	e05b      	b.n	800997c <lfs_fs_traverse+0x228>
        if (f->type != LFS_TYPE_REG) {
 80098c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c6:	799b      	ldrb	r3, [r3, #6]
 80098c8:	2b01      	cmp	r3, #1
 80098ca:	d153      	bne.n	8009974 <lfs_fs_traverse+0x220>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d023      	beq.n	8009920 <lfs_fs_traverse+0x1cc>
 80098d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d11d      	bne.n	8009920 <lfs_fs_traverse+0x1cc>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 80098e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098e6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ee:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80098f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	9202      	str	r2, [sp, #8]
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	9201      	str	r2, [sp, #4]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4623      	mov	r3, r4
 8009900:	4602      	mov	r2, r0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7fe fd42 	bl	800838c <lfs_ctz_traverse>
 8009908:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800990a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800990c:	2b00      	cmp	r3, #0
 800990e:	d007      	beq.n	8009920 <lfs_fs_traverse+0x1cc>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	f640 61e7 	movw	r1, #3815	; 0xee7
 8009916:	4821      	ldr	r0, [pc, #132]	; (800999c <lfs_fs_traverse+0x248>)
 8009918:	f008 fdc4 	bl	80124a4 <iprintf>
                return err;
 800991c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800991e:	e037      	b.n	8009990 <lfs_fs_traverse+0x23c>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8009920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d024      	beq.n	8009976 <lfs_fs_traverse+0x222>
 800992c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800992e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009930:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009934:	2b00      	cmp	r3, #0
 8009936:	d11e      	bne.n	8009976 <lfs_fs_traverse+0x222>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8009938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993a:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009942:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8009944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	9202      	str	r2, [sp, #8]
 800994c:	68ba      	ldr	r2, [r7, #8]
 800994e:	9201      	str	r2, [sp, #4]
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	4623      	mov	r3, r4
 8009954:	4602      	mov	r2, r0
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f7fe fd18 	bl	800838c <lfs_ctz_traverse>
 800995c:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800995e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009960:	2b00      	cmp	r3, #0
 8009962:	d008      	beq.n	8009976 <lfs_fs_traverse+0x222>
                LFS_TRACE("lfs_fs_traverse -> %d", err);
 8009964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009966:	f44f 616f 	mov.w	r1, #3824	; 0xef0
 800996a:	480c      	ldr	r0, [pc, #48]	; (800999c <lfs_fs_traverse+0x248>)
 800996c:	f008 fd9a 	bl	80124a4 <iprintf>
                return err;
 8009970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009972:	e00d      	b.n	8009990 <lfs_fs_traverse+0x23c>
            continue;
 8009974:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8009976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800997c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800997e:	2b00      	cmp	r3, #0
 8009980:	d1a0      	bne.n	80098c4 <lfs_fs_traverse+0x170>
            }
        }
    }

    LFS_TRACE("lfs_fs_traverse -> %d", 0);
 8009982:	2200      	movs	r2, #0
 8009984:	f640 61f6 	movw	r1, #3830	; 0xef6
 8009988:	4804      	ldr	r0, [pc, #16]	; (800999c <lfs_fs_traverse+0x248>)
 800998a:	f008 fd8b 	bl	80124a4 <iprintf>
    return 0;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	375c      	adds	r7, #92	; 0x5c
 8009994:	46bd      	mov	sp, r7
 8009996:	bd90      	pop	{r4, r7, pc}
 8009998:	080149a0 	.word	0x080149a0
 800999c:	080149cc 	.word	0x080149cc
 80099a0:	700ffc00 	.word	0x700ffc00

080099a4 <lfs_fs_pred>:

static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2201      	movs	r2, #1
 80099ba:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(pdir->tail)) {
 80099bc:	e017      	b.n	80099ee <lfs_fs_pred+0x4a>
        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	3318      	adds	r3, #24
 80099c2:	68b9      	ldr	r1, [r7, #8]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7fb fef5 	bl	80057b4 <lfs_pair_cmp>
 80099ca:	4603      	mov	r3, r0
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <lfs_fs_pred+0x30>
            return 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	e019      	b.n	8009a08 <lfs_fs_pred+0x64>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	3318      	adds	r3, #24
 80099d8:	461a      	mov	r2, r3
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7fd f959 	bl	8006c94 <lfs_dir_fetch>
 80099e2:	6178      	str	r0, [r7, #20]
        if (err) {
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <lfs_fs_pred+0x4a>
            return err;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	e00c      	b.n	8009a08 <lfs_fs_pred+0x64>
    while (!lfs_pair_isnull(pdir->tail)) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	3318      	adds	r3, #24
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fb fec3 	bl	800577e <lfs_pair_isnull>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f083 0301 	eor.w	r3, r3, #1
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1dc      	bne.n	80099be <lfs_fs_pred+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 8009a04:	f06f 0301 	mvn.w	r3, #1
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <lfs_fs_parent_match>:
    lfs_t *lfs;
    const lfs_block_t pair[2];
};

static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 8009a10:	b5b0      	push	{r4, r5, r7, lr}
 8009a12:	b08e      	sub	sp, #56	; 0x38
 8009a14:	af04      	add	r7, sp, #16
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009a2a:	6a3b      	ldr	r3, [r7, #32]
 8009a2c:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 8009a30:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    int err = lfs_bd_read(lfs,
 8009a36:	69dd      	ldr	r5, [r3, #28]
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	6852      	ldr	r2, [r2, #4]
 8009a40:	2108      	movs	r1, #8
 8009a42:	9103      	str	r1, [sp, #12]
 8009a44:	f107 0110 	add.w	r1, r7, #16
 8009a48:	9102      	str	r1, [sp, #8]
 8009a4a:	9201      	str	r2, [sp, #4]
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	462b      	mov	r3, r5
 8009a50:	4622      	mov	r2, r4
 8009a52:	4601      	mov	r1, r0
 8009a54:	6a38      	ldr	r0, [r7, #32]
 8009a56:	f7fb fba3 	bl	80051a0 <lfs_bd_read>
 8009a5a:	61b8      	str	r0, [r7, #24]
            disk->block, disk->off, &child, sizeof(child));
    if (err) {
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <lfs_fs_parent_match+0x56>
        return err;
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	e012      	b.n	8009a8c <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 8009a66:	f107 0310 	add.w	r3, r7, #16
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fb fecc 	bl	8005808 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	f107 0310 	add.w	r3, r7, #16
 8009a78:	4611      	mov	r1, r2
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fb fe9a 	bl	80057b4 <lfs_pair_cmp>
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	bf14      	ite	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	2300      	moveq	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3728      	adds	r7, #40	; 0x28
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bdb0      	pop	{r4, r5, r7, pc}

08009a94 <lfs_fs_parent>:

static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	; 0x30
 8009a98:	af04      	add	r7, sp, #16
 8009a9a:	60f8      	str	r0, [r7, #12]
 8009a9c:	60b9      	str	r1, [r7, #8]
 8009a9e:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	61da      	str	r2, [r3, #28]
    while (!lfs_pair_isnull(parent->tail)) {
 8009aac:	e022      	b.n	8009af4 <lfs_fs_parent+0x60>
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	613b      	str	r3, [r7, #16]
                    lfs, {pair[0], pair[1]}});
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8009abc:	617b      	str	r3, [r7, #20]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	61bb      	str	r3, [r7, #24]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8009ac4:	f107 0310 	add.w	r3, r7, #16
 8009ac8:	9303      	str	r3, [sp, #12]
 8009aca:	4b13      	ldr	r3, [pc, #76]	; (8009b18 <lfs_fs_parent+0x84>)
 8009acc:	9302      	str	r3, [sp, #8]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9301      	str	r3, [sp, #4]
 8009ad2:	4b12      	ldr	r3, [pc, #72]	; (8009b1c <lfs_fs_parent+0x88>)
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	4b12      	ldr	r3, [pc, #72]	; (8009b20 <lfs_fs_parent+0x8c>)
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f7fc fda4 	bl	8006628 <lfs_dir_fetchmatch>
 8009ae0:	61f8      	str	r0, [r7, #28]
        if (tag && tag != LFS_ERR_NOENT) {
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d005      	beq.n	8009af4 <lfs_fs_parent+0x60>
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f113 0f02 	cmn.w	r3, #2
 8009aee:	d001      	beq.n	8009af4 <lfs_fs_parent+0x60>
            return tag;
 8009af0:	69fb      	ldr	r3, [r7, #28]
 8009af2:	e00c      	b.n	8009b0e <lfs_fs_parent+0x7a>
    while (!lfs_pair_isnull(parent->tail)) {
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3318      	adds	r3, #24
 8009af8:	4618      	mov	r0, r3
 8009afa:	f7fb fe40 	bl	800577e <lfs_pair_isnull>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f083 0301 	eor.w	r3, r3, #1
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1d1      	bne.n	8009aae <lfs_fs_parent+0x1a>
        }
    }

    return LFS_ERR_NOENT;
 8009b0a:	f06f 0301 	mvn.w	r3, #1
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3720      	adds	r7, #32
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}
 8009b16:	bf00      	nop
 8009b18:	08009a11 	.word	0x08009a11
 8009b1c:	20000008 	.word	0x20000008
 8009b20:	7ff003ff 	.word	0x7ff003ff

08009b24 <lfs_fs_relocate>:

static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b098      	sub	sp, #96	; 0x60
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	3320      	adds	r3, #32
 8009b34:	4619      	mov	r1, r3
 8009b36:	68b8      	ldr	r0, [r7, #8]
 8009b38:	f7fb fe3c 	bl	80057b4 <lfs_pair_cmp>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d111      	bne.n	8009b66 <lfs_fs_relocate+0x42>
        LFS_DEBUG("Relocating root %"PRIx32" %"PRIx32,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	3304      	adds	r3, #4
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f640 713d 	movw	r1, #3901	; 0xf3d
 8009b50:	4849      	ldr	r0, [pc, #292]	; (8009c78 <lfs_fs_relocate+0x154>)
 8009b52:	f008 fca7 	bl	80124a4 <iprintf>
                newpair[0], newpair[1]);
        lfs->root[0] = newpair[0];
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	685a      	ldr	r2, [r3, #4]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b6c:	e013      	b.n	8009b96 <lfs_fs_relocate+0x72>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8009b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b70:	3308      	adds	r3, #8
 8009b72:	4619      	mov	r1, r3
 8009b74:	68b8      	ldr	r0, [r7, #8]
 8009b76:	f7fb fe1d 	bl	80057b4 <lfs_pair_cmp>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d107      	bne.n	8009b90 <lfs_fs_relocate+0x6c>
            d->m.pair[0] = newpair[0];
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b86:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b8e:	60da      	str	r2, [r3, #12]
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8009b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d1e8      	bne.n	8009b6e <lfs_fs_relocate+0x4a>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8009b9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	68b9      	ldr	r1, [r7, #8]
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff ff75 	bl	8009a94 <lfs_fs_parent>
 8009baa:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8009bac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da05      	bge.n	8009bbe <lfs_fs_relocate+0x9a>
 8009bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb4:	f113 0f02 	cmn.w	r3, #2
 8009bb8:	d001      	beq.n	8009bbe <lfs_fs_relocate+0x9a>
        return tag;
 8009bba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bbc:	e058      	b.n	8009c70 <lfs_fs_relocate+0x14c>
    }

    if (tag != LFS_ERR_NOENT) {
 8009bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc0:	f113 0f02 	cmn.w	r3, #2
 8009bc4:	d020      	beq.n	8009c08 <lfs_fs_relocate+0xe4>
        // update disk, this creates a desync
        lfs_fs_preporphans(lfs, +1);
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	f000 f859 	bl	8009c80 <lfs_fs_preporphans>

        lfs_pair_tole32(newpair);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f7fb fe34 	bl	800583c <lfs_pair_tole32>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS({tag, newpair}));
 8009bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bdc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009be0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009be4:	2301      	movs	r3, #1
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f7fd fec2 	bl	8007970 <lfs_dir_commit>
 8009bec:	6578      	str	r0, [r7, #84]	; 0x54
        lfs_pair_fromle32(newpair);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7fb fe0a 	bl	8005808 <lfs_pair_fromle32>
        if (err) {
 8009bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d001      	beq.n	8009bfe <lfs_fs_relocate+0xda>
            return err;
 8009bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bfc:	e038      	b.n	8009c70 <lfs_fs_relocate+0x14c>
        }

        // next step, clean up orphans
        lfs_fs_preporphans(lfs, -1);
 8009bfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 f83c 	bl	8009c80 <lfs_fs_preporphans>
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 8009c08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7ff fec7 	bl	80099a4 <lfs_fs_pred>
 8009c16:	6538      	str	r0, [r7, #80]	; 0x50
    if (err && err != LFS_ERR_NOENT) {
 8009c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <lfs_fs_relocate+0x106>
 8009c1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c20:	f113 0f02 	cmn.w	r3, #2
 8009c24:	d001      	beq.n	8009c2a <lfs_fs_relocate+0x106>
        return err;
 8009c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c28:	e022      	b.n	8009c70 <lfs_fs_relocate+0x14c>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 8009c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2c:	f113 0f02 	cmn.w	r3, #2
 8009c30:	d01d      	beq.n	8009c6e <lfs_fs_relocate+0x14a>
        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f7fb fe02 	bl	800583c <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 8009c38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009c3c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8009c40:	051a      	lsls	r2, r3, #20
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <lfs_fs_relocate+0x158>)
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61bb      	str	r3, [r7, #24]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	61fb      	str	r3, [r7, #28]
 8009c4c:	f107 0218 	add.w	r2, r7, #24
 8009c50:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8009c54:	2301      	movs	r3, #1
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f7fd fe8a 	bl	8007970 <lfs_dir_commit>
 8009c5c:	6538      	str	r0, [r7, #80]	; 0x50
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f7fb fdd2 	bl	8005808 <lfs_pair_fromle32>
        if (err) {
 8009c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <lfs_fs_relocate+0x14a>
            return err;
 8009c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c6c:	e000      	b.n	8009c70 <lfs_fs_relocate+0x14c>
        }
    }

    return 0;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3760      	adds	r7, #96	; 0x60
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	080149f4 	.word	0x080149f4
 8009c7c:	000ffc08 	.word	0x000ffc08

08009c80 <lfs_fs_preporphans>:

static void lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 8009c80:	b5b0      	push	{r4, r5, r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
    lfs->gpending.tag += orphans;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c94:	441a      	add	r2, r3
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gdelta,   &lfs->gpending,
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fb feae 	bl	8005a0c <lfs_gstate_hasorphans>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7fb feee 	bl	8005a98 <lfs_gstate_xororphans>
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f103 053c 	add.w	r5, r3, #60	; 0x3c
            lfs_gstate_hasorphans(&lfs->gpending));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	333c      	adds	r3, #60	; 0x3c
    lfs_gstate_xororphans(&lfs->gpending, &lfs->gpending,
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7fb fe9d 	bl	8005a0c <lfs_gstate_hasorphans>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7fb fedd 	bl	8005a98 <lfs_gstate_xororphans>
}
 8009cde:	bf00      	nop
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bdb0      	pop	{r4, r5, r7, pc}

08009ce6 <lfs_fs_size_count>:
    }

    return 0;
}

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	601a      	str	r2, [r3, #0]
    return 0;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <lfs_fs_size>:

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	f640 71fe 	movw	r1, #4094	; 0xffe
 8009d1a:	4811      	ldr	r0, [pc, #68]	; (8009d60 <lfs_fs_size+0x54>)
 8009d1c:	f008 fbc2 	bl	80124a4 <iprintf>
    lfs_size_t size = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_traverse(lfs, lfs_fs_size_count, &size);
 8009d24:	f107 0308 	add.w	r3, r7, #8
 8009d28:	461a      	mov	r2, r3
 8009d2a:	490e      	ldr	r1, [pc, #56]	; (8009d64 <lfs_fs_size+0x58>)
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f7ff fd11 	bl	8009754 <lfs_fs_traverse>
 8009d32:	60f8      	str	r0, [r7, #12]
    if (err) {
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d007      	beq.n	8009d4a <lfs_fs_size+0x3e>
        LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	f241 0102 	movw	r1, #4098	; 0x1002
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <lfs_fs_size+0x5c>)
 8009d42:	f008 fbaf 	bl	80124a4 <iprintf>
        return err;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	e006      	b.n	8009d58 <lfs_fs_size+0x4c>
    }

    LFS_TRACE("lfs_fs_size -> %"PRId32, err);
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f241 0106 	movw	r1, #4102	; 0x1006
 8009d50:	4805      	ldr	r0, [pc, #20]	; (8009d68 <lfs_fs_size+0x5c>)
 8009d52:	f008 fba7 	bl	80124a4 <iprintf>
    return size;
 8009d56:	68bb      	ldr	r3, [r7, #8]
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3710      	adds	r7, #16
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}
 8009d60:	08014a98 	.word	0x08014a98
 8009d64:	08009ce7 	.word	0x08009ce7
 8009d68:	08014ab8 	.word	0x08014ab8

08009d6c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	617b      	str	r3, [r7, #20]
 8009d80:	e024      	b.n	8009dcc <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	091a      	lsrs	r2, r3, #4
 8009d86:	6939      	ldr	r1, [r7, #16]
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	440b      	add	r3, r1
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	404b      	eors	r3, r1
 8009d94:	f003 030f 	and.w	r3, r3, #15
 8009d98:	4912      	ldr	r1, [pc, #72]	; (8009de4 <lfs_crc+0x78>)
 8009d9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009d9e:	4053      	eors	r3, r2
 8009da0:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	091a      	lsrs	r2, r3, #4
 8009da6:	6939      	ldr	r1, [r7, #16]
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	440b      	add	r3, r1
 8009dac:	781b      	ldrb	r3, [r3, #0]
 8009dae:	091b      	lsrs	r3, r3, #4
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	4619      	mov	r1, r3
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	404b      	eors	r3, r1
 8009db8:	f003 030f 	and.w	r3, r3, #15
 8009dbc:	4909      	ldr	r1, [pc, #36]	; (8009de4 <lfs_crc+0x78>)
 8009dbe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009dc2:	4053      	eors	r3, r2
 8009dc4:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	617b      	str	r3, [r7, #20]
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d3d6      	bcc.n	8009d82 <lfs_crc+0x16>
    }

    return crc;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	371c      	adds	r7, #28
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
 8009de2:	bf00      	nop
 8009de4:	08016d58 	.word	0x08016d58

08009de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009de8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009e20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009dec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009dee:	e003      	b.n	8009df8 <LoopCopyDataInit>

08009df0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009df0:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009df2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009df4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009df6:	3104      	adds	r1, #4

08009df8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009df8:	480b      	ldr	r0, [pc, #44]	; (8009e28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009dfa:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009dfc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009dfe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009e00:	d3f6      	bcc.n	8009df0 <CopyDataInit>
  ldr  r2, =_sbss
 8009e02:	4a0b      	ldr	r2, [pc, #44]	; (8009e30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009e04:	e002      	b.n	8009e0c <LoopFillZerobss>

08009e06 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009e06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009e08:	f842 3b04 	str.w	r3, [r2], #4

08009e0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009e0c:	4b09      	ldr	r3, [pc, #36]	; (8009e34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009e0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009e10:	d3f9      	bcc.n	8009e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009e12:	f7fa ff77 	bl	8004d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009e16:	f007 ff29 	bl	8011c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009e1a:	f7f7 fdcb 	bl	80019b4 <main>
  bx  lr    
 8009e1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009e20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009e24:	08016f84 	.word	0x08016f84
  ldr  r0, =_sdata
 8009e28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009e2c:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 8009e30:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 8009e34:	20008404 	.word	0x20008404

08009e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009e38:	e7fe      	b.n	8009e38 <ADC_IRQHandler>
	...

08009e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009e40:	4b0e      	ldr	r3, [pc, #56]	; (8009e7c <HAL_Init+0x40>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a0d      	ldr	r2, [pc, #52]	; (8009e7c <HAL_Init+0x40>)
 8009e46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <HAL_Init+0x40>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a0a      	ldr	r2, [pc, #40]	; (8009e7c <HAL_Init+0x40>)
 8009e52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009e58:	4b08      	ldr	r3, [pc, #32]	; (8009e7c <HAL_Init+0x40>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a07      	ldr	r2, [pc, #28]	; (8009e7c <HAL_Init+0x40>)
 8009e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009e64:	2003      	movs	r0, #3
 8009e66:	f000 f8fc 	bl	800a062 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009e6a:	200f      	movs	r0, #15
 8009e6c:	f7fa fdde 	bl	8004a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009e70:	f7fa fbe0 	bl	8004634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	40023c00 	.word	0x40023c00

08009e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009e80:	b480      	push	{r7}
 8009e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009e84:	4b06      	ldr	r3, [pc, #24]	; (8009ea0 <HAL_IncTick+0x20>)
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4b06      	ldr	r3, [pc, #24]	; (8009ea4 <HAL_IncTick+0x24>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4413      	add	r3, r2
 8009e90:	4a04      	ldr	r2, [pc, #16]	; (8009ea4 <HAL_IncTick+0x24>)
 8009e92:	6013      	str	r3, [r2, #0]
}
 8009e94:	bf00      	nop
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	200000a0 	.word	0x200000a0
 8009ea4:	20003de0 	.word	0x20003de0

08009ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8009eac:	4b03      	ldr	r3, [pc, #12]	; (8009ebc <HAL_GetTick+0x14>)
 8009eae:	681b      	ldr	r3, [r3, #0]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	20003de0 	.word	0x20003de0

08009ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ec8:	f7ff ffee 	bl	8009ea8 <HAL_GetTick>
 8009ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ed8:	d005      	beq.n	8009ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009eda:	4b0a      	ldr	r3, [pc, #40]	; (8009f04 <HAL_Delay+0x44>)
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	461a      	mov	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009ee6:	bf00      	nop
 8009ee8:	f7ff ffde 	bl	8009ea8 <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d8f7      	bhi.n	8009ee8 <HAL_Delay+0x28>
  {
  }
}
 8009ef8:	bf00      	nop
 8009efa:	bf00      	nop
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	200000a0 	.word	0x200000a0

08009f08 <__NVIC_SetPriorityGrouping>:
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b085      	sub	sp, #20
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f003 0307 	and.w	r3, r3, #7
 8009f16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <__NVIC_SetPriorityGrouping+0x44>)
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f24:	4013      	ands	r3, r2
 8009f26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f3a:	4a04      	ldr	r2, [pc, #16]	; (8009f4c <__NVIC_SetPriorityGrouping+0x44>)
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	60d3      	str	r3, [r2, #12]
}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	e000ed00 	.word	0xe000ed00

08009f50 <__NVIC_GetPriorityGrouping>:
{
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f54:	4b04      	ldr	r3, [pc, #16]	; (8009f68 <__NVIC_GetPriorityGrouping+0x18>)
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	0a1b      	lsrs	r3, r3, #8
 8009f5a:	f003 0307 	and.w	r3, r3, #7
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	e000ed00 	.word	0xe000ed00

08009f6c <__NVIC_EnableIRQ>:
{
 8009f6c:	b480      	push	{r7}
 8009f6e:	b083      	sub	sp, #12
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	4603      	mov	r3, r0
 8009f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	db0b      	blt.n	8009f96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	f003 021f 	and.w	r2, r3, #31
 8009f84:	4907      	ldr	r1, [pc, #28]	; (8009fa4 <__NVIC_EnableIRQ+0x38>)
 8009f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f8a:	095b      	lsrs	r3, r3, #5
 8009f8c:	2001      	movs	r0, #1
 8009f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	e000e100 	.word	0xe000e100

08009fa8 <__NVIC_SetPriority>:
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	4603      	mov	r3, r0
 8009fb0:	6039      	str	r1, [r7, #0]
 8009fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	db0a      	blt.n	8009fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	b2da      	uxtb	r2, r3
 8009fc0:	490c      	ldr	r1, [pc, #48]	; (8009ff4 <__NVIC_SetPriority+0x4c>)
 8009fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fc6:	0112      	lsls	r2, r2, #4
 8009fc8:	b2d2      	uxtb	r2, r2
 8009fca:	440b      	add	r3, r1
 8009fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009fd0:	e00a      	b.n	8009fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	4908      	ldr	r1, [pc, #32]	; (8009ff8 <__NVIC_SetPriority+0x50>)
 8009fd8:	79fb      	ldrb	r3, [r7, #7]
 8009fda:	f003 030f 	and.w	r3, r3, #15
 8009fde:	3b04      	subs	r3, #4
 8009fe0:	0112      	lsls	r2, r2, #4
 8009fe2:	b2d2      	uxtb	r2, r2
 8009fe4:	440b      	add	r3, r1
 8009fe6:	761a      	strb	r2, [r3, #24]
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr
 8009ff4:	e000e100 	.word	0xe000e100
 8009ff8:	e000ed00 	.word	0xe000ed00

08009ffc <NVIC_EncodePriority>:
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b089      	sub	sp, #36	; 0x24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f003 0307 	and.w	r3, r3, #7
 800a00e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	f1c3 0307 	rsb	r3, r3, #7
 800a016:	2b04      	cmp	r3, #4
 800a018:	bf28      	it	cs
 800a01a:	2304      	movcs	r3, #4
 800a01c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	3304      	adds	r3, #4
 800a022:	2b06      	cmp	r3, #6
 800a024:	d902      	bls.n	800a02c <NVIC_EncodePriority+0x30>
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	3b03      	subs	r3, #3
 800a02a:	e000      	b.n	800a02e <NVIC_EncodePriority+0x32>
 800a02c:	2300      	movs	r3, #0
 800a02e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	fa02 f303 	lsl.w	r3, r2, r3
 800a03a:	43da      	mvns	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	401a      	ands	r2, r3
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a044:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	fa01 f303 	lsl.w	r3, r1, r3
 800a04e:	43d9      	mvns	r1, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a054:	4313      	orrs	r3, r2
}
 800a056:	4618      	mov	r0, r3
 800a058:	3724      	adds	r7, #36	; 0x24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr

0800a062 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b082      	sub	sp, #8
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f7ff ff4c 	bl	8009f08 <__NVIC_SetPriorityGrouping>
}
 800a070:	bf00      	nop
 800a072:	3708      	adds	r7, #8
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
 800a084:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a086:	2300      	movs	r3, #0
 800a088:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a08a:	f7ff ff61 	bl	8009f50 <__NVIC_GetPriorityGrouping>
 800a08e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	68b9      	ldr	r1, [r7, #8]
 800a094:	6978      	ldr	r0, [r7, #20]
 800a096:	f7ff ffb1 	bl	8009ffc <NVIC_EncodePriority>
 800a09a:	4602      	mov	r2, r0
 800a09c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0a0:	4611      	mov	r1, r2
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff ff80 	bl	8009fa8 <__NVIC_SetPriority>
}
 800a0a8:	bf00      	nop
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f7ff ff54 	bl	8009f6c <__NVIC_EnableIRQ>
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a0d8:	f7ff fee6 	bl	8009ea8 <HAL_GetTick>
 800a0dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e099      	b.n	800a21c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f022 0201 	bic.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a108:	e00f      	b.n	800a12a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a10a:	f7ff fecd 	bl	8009ea8 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	2b05      	cmp	r3, #5
 800a116:	d908      	bls.n	800a12a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2220      	movs	r2, #32
 800a11c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2203      	movs	r2, #3
 800a122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e078      	b.n	800a21c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	2b00      	cmp	r3, #0
 800a136:	d1e8      	bne.n	800a10a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	4b38      	ldr	r3, [pc, #224]	; (800a224 <HAL_DMA_Init+0x158>)
 800a144:	4013      	ands	r3, r2
 800a146:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a156:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a162:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a16e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a180:	2b04      	cmp	r3, #4
 800a182:	d107      	bne.n	800a194 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a18c:	4313      	orrs	r3, r2
 800a18e:	697a      	ldr	r2, [r7, #20]
 800a190:	4313      	orrs	r3, r2
 800a192:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	695b      	ldr	r3, [r3, #20]
 800a1a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d117      	bne.n	800a1ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d00e      	beq.n	800a1ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fb01 	bl	800a7d8 <DMA_CheckFifoParam>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d008      	beq.n	800a1ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2240      	movs	r2, #64	; 0x40
 800a1e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	e016      	b.n	800a21c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 fab8 	bl	800a76c <DMA_CalcBaseAndBitshift>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a204:	223f      	movs	r2, #63	; 0x3f
 800a206:	409a      	lsls	r2, r3
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a21a:	2300      	movs	r3, #0
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	f010803f 	.word	0xf010803f

0800a228 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
 800a234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a236:	2300      	movs	r3, #0
 800a238:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a23e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_DMA_Start_IT+0x26>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e040      	b.n	800a2d0 <HAL_DMA_Start_IT+0xa8>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d12f      	bne.n	800a2c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2202      	movs	r2, #2
 800a266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 fa4a 	bl	800a710 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a280:	223f      	movs	r2, #63	; 0x3f
 800a282:	409a      	lsls	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0216 	orr.w	r2, r2, #22
 800a296:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d007      	beq.n	800a2b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0208 	orr.w	r2, r2, #8
 800a2ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f042 0201 	orr.w	r2, r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	e005      	b.n	800a2ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a2e6:	f7ff fddf 	bl	8009ea8 <HAL_GetTick>
 800a2ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b02      	cmp	r3, #2
 800a2f6:	d008      	beq.n	800a30a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2280      	movs	r2, #128	; 0x80
 800a2fc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e052      	b.n	800a3b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0216 	bic.w	r2, r2, #22
 800a318:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695a      	ldr	r2, [r3, #20]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a328:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d103      	bne.n	800a33a <HAL_DMA_Abort+0x62>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f022 0208 	bic.w	r2, r2, #8
 800a348:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f022 0201 	bic.w	r2, r2, #1
 800a358:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a35a:	e013      	b.n	800a384 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a35c:	f7ff fda4 	bl	8009ea8 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b05      	cmp	r3, #5
 800a368:	d90c      	bls.n	800a384 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2220      	movs	r2, #32
 800a36e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2203      	movs	r2, #3
 800a374:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800a380:	2303      	movs	r3, #3
 800a382:	e015      	b.n	800a3b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 0301 	and.w	r3, r3, #1
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e4      	bne.n	800a35c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a396:	223f      	movs	r2, #63	; 0x3f
 800a398:	409a      	lsls	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800a3ae:	2300      	movs	r3, #0
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2280      	movs	r2, #128	; 0x80
 800a3d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	e00c      	b.n	800a3f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2205      	movs	r2, #5
 800a3da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f022 0201 	bic.w	r2, r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	370c      	adds	r7, #12
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a408:	4b8e      	ldr	r3, [pc, #568]	; (800a644 <HAL_DMA_IRQHandler+0x248>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	4a8e      	ldr	r2, [pc, #568]	; (800a648 <HAL_DMA_IRQHandler+0x24c>)
 800a40e:	fba2 2303 	umull	r2, r3, r2, r3
 800a412:	0a9b      	lsrs	r3, r3, #10
 800a414:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a41a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a426:	2208      	movs	r2, #8
 800a428:	409a      	lsls	r2, r3
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4013      	ands	r3, r2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d01a      	beq.n	800a468 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d013      	beq.n	800a468 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0204 	bic.w	r2, r2, #4
 800a44e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a454:	2208      	movs	r2, #8
 800a456:	409a      	lsls	r2, r3
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a460:	f043 0201 	orr.w	r2, r3, #1
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46c:	2201      	movs	r2, #1
 800a46e:	409a      	lsls	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	4013      	ands	r3, r2
 800a474:	2b00      	cmp	r3, #0
 800a476:	d012      	beq.n	800a49e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	695b      	ldr	r3, [r3, #20]
 800a47e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a482:	2b00      	cmp	r3, #0
 800a484:	d00b      	beq.n	800a49e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48a:	2201      	movs	r2, #1
 800a48c:	409a      	lsls	r2, r3
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a496:	f043 0202 	orr.w	r2, r3, #2
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a2:	2204      	movs	r2, #4
 800a4a4:	409a      	lsls	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	4013      	ands	r3, r2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d012      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0302 	and.w	r3, r3, #2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c0:	2204      	movs	r2, #4
 800a4c2:	409a      	lsls	r2, r3
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4cc:	f043 0204 	orr.w	r2, r3, #4
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d8:	2210      	movs	r2, #16
 800a4da:	409a      	lsls	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d043      	beq.n	800a56c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0308 	and.w	r3, r3, #8
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d03c      	beq.n	800a56c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	409a      	lsls	r2, r3
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d018      	beq.n	800a53e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d108      	bne.n	800a52c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d024      	beq.n	800a56c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
 800a52a:	e01f      	b.n	800a56c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a530:	2b00      	cmp	r3, #0
 800a532:	d01b      	beq.n	800a56c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	4798      	blx	r3
 800a53c:	e016      	b.n	800a56c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d107      	bne.n	800a55c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f022 0208 	bic.w	r2, r2, #8
 800a55a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	2b00      	cmp	r3, #0
 800a562:	d003      	beq.n	800a56c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a570:	2220      	movs	r2, #32
 800a572:	409a      	lsls	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4013      	ands	r3, r2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f000 808f 	beq.w	800a69c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 0310 	and.w	r3, r3, #16
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8087 	beq.w	800a69c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a592:	2220      	movs	r2, #32
 800a594:	409a      	lsls	r2, r3
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b05      	cmp	r3, #5
 800a5a4:	d136      	bne.n	800a614 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f022 0216 	bic.w	r2, r2, #22
 800a5b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	695a      	ldr	r2, [r3, #20]
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d103      	bne.n	800a5d6 <HAL_DMA_IRQHandler+0x1da>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d007      	beq.n	800a5e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f022 0208 	bic.w	r2, r2, #8
 800a5e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ea:	223f      	movs	r2, #63	; 0x3f
 800a5ec:	409a      	lsls	r2, r3
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a606:	2b00      	cmp	r3, #0
 800a608:	d07e      	beq.n	800a708 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	4798      	blx	r3
        }
        return;
 800a612:	e079      	b.n	800a708 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d01d      	beq.n	800a65e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d10d      	bne.n	800a64c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a634:	2b00      	cmp	r3, #0
 800a636:	d031      	beq.n	800a69c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63c:	6878      	ldr	r0, [r7, #4]
 800a63e:	4798      	blx	r3
 800a640:	e02c      	b.n	800a69c <HAL_DMA_IRQHandler+0x2a0>
 800a642:	bf00      	nop
 800a644:	20000098 	.word	0x20000098
 800a648:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a650:	2b00      	cmp	r3, #0
 800a652:	d023      	beq.n	800a69c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	4798      	blx	r3
 800a65c:	e01e      	b.n	800a69c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10f      	bne.n	800a68c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f022 0210 	bic.w	r2, r2, #16
 800a67a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d032      	beq.n	800a70a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a8:	f003 0301 	and.w	r3, r3, #1
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d022      	beq.n	800a6f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2205      	movs	r2, #5
 800a6b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f022 0201 	bic.w	r2, r2, #1
 800a6c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	697a      	ldr	r2, [r7, #20]
 800a6d0:	429a      	cmp	r2, r3
 800a6d2:	d307      	bcc.n	800a6e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1f2      	bne.n	800a6c8 <HAL_DMA_IRQHandler+0x2cc>
 800a6e2:	e000      	b.n	800a6e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a6e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d005      	beq.n	800a70a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	4798      	blx	r3
 800a706:	e000      	b.n	800a70a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a708:	bf00      	nop
    }
  }
}
 800a70a:	3718      	adds	r7, #24
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
 800a71c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a72c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	689b      	ldr	r3, [r3, #8]
 800a73a:	2b40      	cmp	r3, #64	; 0x40
 800a73c:	d108      	bne.n	800a750 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a74e:	e007      	b.n	800a760 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68ba      	ldr	r2, [r7, #8]
 800a756:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	60da      	str	r2, [r3, #12]
}
 800a760:	bf00      	nop
 800a762:	3714      	adds	r7, #20
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	b2db      	uxtb	r3, r3
 800a77a:	3b10      	subs	r3, #16
 800a77c:	4a14      	ldr	r2, [pc, #80]	; (800a7d0 <DMA_CalcBaseAndBitshift+0x64>)
 800a77e:	fba2 2303 	umull	r2, r3, r2, r3
 800a782:	091b      	lsrs	r3, r3, #4
 800a784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a786:	4a13      	ldr	r2, [pc, #76]	; (800a7d4 <DMA_CalcBaseAndBitshift+0x68>)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4413      	add	r3, r2
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	2b03      	cmp	r3, #3
 800a798:	d909      	bls.n	800a7ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	1d1a      	adds	r2, r3, #4
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	659a      	str	r2, [r3, #88]	; 0x58
 800a7ac:	e007      	b.n	800a7be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7b6:	f023 0303 	bic.w	r3, r3, #3
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr
 800a7ce:	bf00      	nop
 800a7d0:	aaaaaaab 	.word	0xaaaaaaab
 800a7d4:	08016d98 	.word	0x08016d98

0800a7d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	699b      	ldr	r3, [r3, #24]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d11f      	bne.n	800a832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2b03      	cmp	r3, #3
 800a7f6:	d856      	bhi.n	800a8a6 <DMA_CheckFifoParam+0xce>
 800a7f8:	a201      	add	r2, pc, #4	; (adr r2, 800a800 <DMA_CheckFifoParam+0x28>)
 800a7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7fe:	bf00      	nop
 800a800:	0800a811 	.word	0x0800a811
 800a804:	0800a823 	.word	0x0800a823
 800a808:	0800a811 	.word	0x0800a811
 800a80c:	0800a8a7 	.word	0x0800a8a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d046      	beq.n	800a8aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a820:	e043      	b.n	800a8aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a82a:	d140      	bne.n	800a8ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a830:	e03d      	b.n	800a8ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a83a:	d121      	bne.n	800a880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	2b03      	cmp	r3, #3
 800a840:	d837      	bhi.n	800a8b2 <DMA_CheckFifoParam+0xda>
 800a842:	a201      	add	r2, pc, #4	; (adr r2, 800a848 <DMA_CheckFifoParam+0x70>)
 800a844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a848:	0800a859 	.word	0x0800a859
 800a84c:	0800a85f 	.word	0x0800a85f
 800a850:	0800a859 	.word	0x0800a859
 800a854:	0800a871 	.word	0x0800a871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	73fb      	strb	r3, [r7, #15]
      break;
 800a85c:	e030      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a866:	2b00      	cmp	r3, #0
 800a868:	d025      	beq.n	800a8b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a86a:	2301      	movs	r3, #1
 800a86c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a86e:	e022      	b.n	800a8b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a878:	d11f      	bne.n	800a8ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a87e:	e01c      	b.n	800a8ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b02      	cmp	r3, #2
 800a884:	d903      	bls.n	800a88e <DMA_CheckFifoParam+0xb6>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b03      	cmp	r3, #3
 800a88a:	d003      	beq.n	800a894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a88c:	e018      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	73fb      	strb	r3, [r7, #15]
      break;
 800a892:	e015      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d00e      	beq.n	800a8be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a4:	e00b      	b.n	800a8be <DMA_CheckFifoParam+0xe6>
      break;
 800a8a6:	bf00      	nop
 800a8a8:	e00a      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800a8aa:	bf00      	nop
 800a8ac:	e008      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800a8ae:	bf00      	nop
 800a8b0:	e006      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800a8b2:	bf00      	nop
 800a8b4:	e004      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800a8b6:	bf00      	nop
 800a8b8:	e002      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;   
 800a8ba:	bf00      	nop
 800a8bc:	e000      	b.n	800a8c0 <DMA_CheckFifoParam+0xe8>
      break;
 800a8be:	bf00      	nop
    }
  } 
  
  return status; 
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3714      	adds	r7, #20
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop

0800a8d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b089      	sub	sp, #36	; 0x24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61fb      	str	r3, [r7, #28]
 800a8ea:	e16b      	b.n	800abc4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	4013      	ands	r3, r2
 800a8fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a900:	693a      	ldr	r2, [r7, #16]
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	429a      	cmp	r2, r3
 800a906:	f040 815a 	bne.w	800abbe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	2b01      	cmp	r3, #1
 800a914:	d005      	beq.n	800a922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d130      	bne.n	800a984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	005b      	lsls	r3, r3, #1
 800a92c:	2203      	movs	r2, #3
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	43db      	mvns	r3, r3
 800a934:	69ba      	ldr	r2, [r7, #24]
 800a936:	4013      	ands	r3, r2
 800a938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	005b      	lsls	r3, r3, #1
 800a942:	fa02 f303 	lsl.w	r3, r2, r3
 800a946:	69ba      	ldr	r2, [r7, #24]
 800a948:	4313      	orrs	r3, r2
 800a94a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a958:	2201      	movs	r2, #1
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	fa02 f303 	lsl.w	r3, r2, r3
 800a960:	43db      	mvns	r3, r3
 800a962:	69ba      	ldr	r2, [r7, #24]
 800a964:	4013      	ands	r3, r2
 800a966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	091b      	lsrs	r3, r3, #4
 800a96e:	f003 0201 	and.w	r2, r3, #1
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	fa02 f303 	lsl.w	r3, r2, r3
 800a978:	69ba      	ldr	r2, [r7, #24]
 800a97a:	4313      	orrs	r3, r2
 800a97c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	69ba      	ldr	r2, [r7, #24]
 800a982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	f003 0303 	and.w	r3, r3, #3
 800a98c:	2b03      	cmp	r3, #3
 800a98e:	d017      	beq.n	800a9c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	2203      	movs	r2, #3
 800a99c:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a0:	43db      	mvns	r3, r3
 800a9a2:	69ba      	ldr	r2, [r7, #24]
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b4:	69ba      	ldr	r2, [r7, #24]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	69ba      	ldr	r2, [r7, #24]
 800a9be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f003 0303 	and.w	r3, r3, #3
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	d123      	bne.n	800aa14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	08da      	lsrs	r2, r3, #3
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	3208      	adds	r2, #8
 800a9d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	f003 0307 	and.w	r3, r3, #7
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	220f      	movs	r2, #15
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	43db      	mvns	r3, r3
 800a9ea:	69ba      	ldr	r2, [r7, #24]
 800a9ec:	4013      	ands	r3, r2
 800a9ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	691a      	ldr	r2, [r3, #16]
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	f003 0307 	and.w	r3, r3, #7
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa06:	69fb      	ldr	r3, [r7, #28]
 800aa08:	08da      	lsrs	r2, r3, #3
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3208      	adds	r2, #8
 800aa0e:	69b9      	ldr	r1, [r7, #24]
 800aa10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	2203      	movs	r2, #3
 800aa20:	fa02 f303 	lsl.w	r3, r2, r3
 800aa24:	43db      	mvns	r3, r3
 800aa26:	69ba      	ldr	r2, [r7, #24]
 800aa28:	4013      	ands	r3, r2
 800aa2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	f003 0203 	and.w	r2, r3, #3
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3c:	69ba      	ldr	r2, [r7, #24]
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 80b4 	beq.w	800abbe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aa56:	2300      	movs	r3, #0
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	4b60      	ldr	r3, [pc, #384]	; (800abdc <HAL_GPIO_Init+0x30c>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	4a5f      	ldr	r2, [pc, #380]	; (800abdc <HAL_GPIO_Init+0x30c>)
 800aa60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa64:	6453      	str	r3, [r2, #68]	; 0x44
 800aa66:	4b5d      	ldr	r3, [pc, #372]	; (800abdc <HAL_GPIO_Init+0x30c>)
 800aa68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa6e:	60fb      	str	r3, [r7, #12]
 800aa70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aa72:	4a5b      	ldr	r2, [pc, #364]	; (800abe0 <HAL_GPIO_Init+0x310>)
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	089b      	lsrs	r3, r3, #2
 800aa78:	3302      	adds	r3, #2
 800aa7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	220f      	movs	r2, #15
 800aa8a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8e:	43db      	mvns	r3, r3
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	4013      	ands	r3, r2
 800aa94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	4a52      	ldr	r2, [pc, #328]	; (800abe4 <HAL_GPIO_Init+0x314>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d02b      	beq.n	800aaf6 <HAL_GPIO_Init+0x226>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a51      	ldr	r2, [pc, #324]	; (800abe8 <HAL_GPIO_Init+0x318>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d025      	beq.n	800aaf2 <HAL_GPIO_Init+0x222>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a50      	ldr	r2, [pc, #320]	; (800abec <HAL_GPIO_Init+0x31c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d01f      	beq.n	800aaee <HAL_GPIO_Init+0x21e>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a4f      	ldr	r2, [pc, #316]	; (800abf0 <HAL_GPIO_Init+0x320>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d019      	beq.n	800aaea <HAL_GPIO_Init+0x21a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a4e      	ldr	r2, [pc, #312]	; (800abf4 <HAL_GPIO_Init+0x324>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d013      	beq.n	800aae6 <HAL_GPIO_Init+0x216>
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a4d      	ldr	r2, [pc, #308]	; (800abf8 <HAL_GPIO_Init+0x328>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00d      	beq.n	800aae2 <HAL_GPIO_Init+0x212>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a4c      	ldr	r2, [pc, #304]	; (800abfc <HAL_GPIO_Init+0x32c>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d007      	beq.n	800aade <HAL_GPIO_Init+0x20e>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a4b      	ldr	r2, [pc, #300]	; (800ac00 <HAL_GPIO_Init+0x330>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d101      	bne.n	800aada <HAL_GPIO_Init+0x20a>
 800aad6:	2307      	movs	r3, #7
 800aad8:	e00e      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aada:	2308      	movs	r3, #8
 800aadc:	e00c      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aade:	2306      	movs	r3, #6
 800aae0:	e00a      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aae2:	2305      	movs	r3, #5
 800aae4:	e008      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aae6:	2304      	movs	r3, #4
 800aae8:	e006      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aaea:	2303      	movs	r3, #3
 800aaec:	e004      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aaee:	2302      	movs	r3, #2
 800aaf0:	e002      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e000      	b.n	800aaf8 <HAL_GPIO_Init+0x228>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	69fa      	ldr	r2, [r7, #28]
 800aafa:	f002 0203 	and.w	r2, r2, #3
 800aafe:	0092      	lsls	r2, r2, #2
 800ab00:	4093      	lsls	r3, r2
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab08:	4935      	ldr	r1, [pc, #212]	; (800abe0 <HAL_GPIO_Init+0x310>)
 800ab0a:	69fb      	ldr	r3, [r7, #28]
 800ab0c:	089b      	lsrs	r3, r3, #2
 800ab0e:	3302      	adds	r3, #2
 800ab10:	69ba      	ldr	r2, [r7, #24]
 800ab12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ab16:	4b3b      	ldr	r3, [pc, #236]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	43db      	mvns	r3, r3
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	4013      	ands	r3, r2
 800ab24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ab3a:	4a32      	ldr	r2, [pc, #200]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ab40:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab42:	68db      	ldr	r3, [r3, #12]
 800ab44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	43db      	mvns	r3, r3
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ab64:	4a27      	ldr	r2, [pc, #156]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ab6a:	4b26      	ldr	r3, [pc, #152]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4013      	ands	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ab8e:	4a1d      	ldr	r2, [pc, #116]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab94:	4b1b      	ldr	r3, [pc, #108]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	4013      	ands	r3, r2
 800aba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800abb8:	4a12      	ldr	r2, [pc, #72]	; (800ac04 <HAL_GPIO_Init+0x334>)
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800abbe:	69fb      	ldr	r3, [r7, #28]
 800abc0:	3301      	adds	r3, #1
 800abc2:	61fb      	str	r3, [r7, #28]
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	2b0f      	cmp	r3, #15
 800abc8:	f67f ae90 	bls.w	800a8ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800abcc:	bf00      	nop
 800abce:	bf00      	nop
 800abd0:	3724      	adds	r7, #36	; 0x24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
 800abda:	bf00      	nop
 800abdc:	40023800 	.word	0x40023800
 800abe0:	40013800 	.word	0x40013800
 800abe4:	40020000 	.word	0x40020000
 800abe8:	40020400 	.word	0x40020400
 800abec:	40020800 	.word	0x40020800
 800abf0:	40020c00 	.word	0x40020c00
 800abf4:	40021000 	.word	0x40021000
 800abf8:	40021400 	.word	0x40021400
 800abfc:	40021800 	.word	0x40021800
 800ac00:	40021c00 	.word	0x40021c00
 800ac04:	40013c00 	.word	0x40013c00

0800ac08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	807b      	strh	r3, [r7, #2]
 800ac14:	4613      	mov	r3, r2
 800ac16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ac18:	787b      	ldrb	r3, [r7, #1]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d003      	beq.n	800ac26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ac1e:	887a      	ldrh	r2, [r7, #2]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ac24:	e003      	b.n	800ac2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ac26:	887b      	ldrh	r3, [r7, #2]
 800ac28:	041a      	lsls	r2, r3, #16
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	619a      	str	r2, [r3, #24]
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr

0800ac3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac3a:	b480      	push	{r7}
 800ac3c:	b085      	sub	sp, #20
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]
 800ac42:	460b      	mov	r3, r1
 800ac44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ac4c:	887a      	ldrh	r2, [r7, #2]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	4013      	ands	r3, r2
 800ac52:	041a      	lsls	r2, r3, #16
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	43d9      	mvns	r1, r3
 800ac58:	887b      	ldrh	r3, [r7, #2]
 800ac5a:	400b      	ands	r3, r1
 800ac5c:	431a      	orrs	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	619a      	str	r2, [r3, #24]
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	60f8      	str	r0, [r7, #12]
 800ac76:	60b9      	str	r1, [r7, #8]
 800ac78:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d101      	bne.n	800ac84 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e03e      	b.n	800ad02 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 800ac98:	68f8      	ldr	r0, [r7, #12]
 800ac9a:	f7f9 febd 	bl	8004a18 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4619      	mov	r1, r3
 800aca8:	4610      	mov	r0, r2
 800acaa:	f003 fc15 	bl	800e4d8 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6818      	ldr	r0, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	461a      	mov	r2, r3
 800acb8:	68b9      	ldr	r1, [r7, #8]
 800acba:	f003 fc59 	bl	800e570 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6818      	ldr	r0, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	461a      	mov	r2, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	f003 fc86 	bl	800e5da <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	2b10      	cmp	r3, #16
 800acd4:	d108      	bne.n	800ace8 <HAL_NAND_Init+0x7a>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	f042 0204 	orr.w	r2, r2, #4
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	e007      	b.n	800acf8 <HAL_NAND_Init+0x8a>
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	6a1a      	ldr	r2, [r3, #32]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0204 	orr.w	r2, r2, #4
 800acf6:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b082      	sub	sp, #8
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d10a      	bne.n	800ad30 <HAL_NAND_IRQHandler+0x26>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	bf0c      	ite	eq
 800ad28:	2301      	moveq	r3, #1
 800ad2a:	2300      	movne	r3, #0
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	e009      	b.n	800ad44 <HAL_NAND_IRQHandler+0x3a>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2301      	moveq	r3, #1
 800ad40:	2300      	movne	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d017      	beq.n	800ad78 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7f8 f965 	bl	8003018 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	2b10      	cmp	r3, #16
 800ad54:	d108      	bne.n	800ad68 <HAL_NAND_IRQHandler+0x5e>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f022 0201 	bic.w	r2, r2, #1
 800ad64:	605a      	str	r2, [r3, #4]
 800ad66:	e007      	b.n	800ad78 <HAL_NAND_IRQHandler+0x6e>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f022 0201 	bic.w	r2, r2, #1
 800ad76:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	2b10      	cmp	r3, #16
 800ad7e:	d10a      	bne.n	800ad96 <HAL_NAND_IRQHandler+0x8c>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b02      	cmp	r3, #2
 800ad8c:	bf0c      	ite	eq
 800ad8e:	2301      	moveq	r3, #1
 800ad90:	2300      	movne	r3, #0
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	e009      	b.n	800adaa <HAL_NAND_IRQHandler+0xa0>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9c:	f003 0302 	and.w	r3, r3, #2
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	bf0c      	ite	eq
 800ada4:	2301      	moveq	r3, #1
 800ada6:	2300      	movne	r3, #0
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d017      	beq.n	800adde <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f7f8 f932 	bl	8003018 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	685b      	ldr	r3, [r3, #4]
 800adb8:	2b10      	cmp	r3, #16
 800adba:	d108      	bne.n	800adce <HAL_NAND_IRQHandler+0xc4>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	685a      	ldr	r2, [r3, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f022 0202 	bic.w	r2, r2, #2
 800adca:	605a      	str	r2, [r3, #4]
 800adcc:	e007      	b.n	800adde <HAL_NAND_IRQHandler+0xd4>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 0202 	bic.w	r2, r2, #2
 800addc:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	2b10      	cmp	r3, #16
 800ade4:	d10a      	bne.n	800adfc <HAL_NAND_IRQHandler+0xf2>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b04      	cmp	r3, #4
 800adf2:	bf0c      	ite	eq
 800adf4:	2301      	moveq	r3, #1
 800adf6:	2300      	movne	r3, #0
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	e009      	b.n	800ae10 <HAL_NAND_IRQHandler+0x106>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	f003 0304 	and.w	r3, r3, #4
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	bf0c      	ite	eq
 800ae0a:	2301      	moveq	r3, #1
 800ae0c:	2300      	movne	r3, #0
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d017      	beq.n	800ae44 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f7f8 f8ff 	bl	8003018 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d108      	bne.n	800ae34 <HAL_NAND_IRQHandler+0x12a>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f022 0204 	bic.w	r2, r2, #4
 800ae30:	605a      	str	r2, [r3, #4]
 800ae32:	e007      	b.n	800ae44 <HAL_NAND_IRQHandler+0x13a>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f022 0204 	bic.w	r2, r2, #4
 800ae42:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d10a      	bne.n	800ae62 <HAL_NAND_IRQHandler+0x158>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae56:	2b40      	cmp	r3, #64	; 0x40
 800ae58:	bf0c      	ite	eq
 800ae5a:	2301      	moveq	r3, #1
 800ae5c:	2300      	movne	r3, #0
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	e009      	b.n	800ae76 <HAL_NAND_IRQHandler+0x16c>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae6c:	2b40      	cmp	r3, #64	; 0x40
 800ae6e:	bf0c      	ite	eq
 800ae70:	2301      	moveq	r3, #1
 800ae72:	2300      	movne	r3, #0
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d017      	beq.n	800aeaa <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7f8 f8cc 	bl	8003018 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	2b10      	cmp	r3, #16
 800ae86:	d108      	bne.n	800ae9a <HAL_NAND_IRQHandler+0x190>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	685a      	ldr	r2, [r3, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae96:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 800ae98:	e007      	b.n	800aeaa <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aeaa:	bf00      	nop
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  return hnand->State;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aec0:	b2db      	uxtb	r3, r3
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800aece:	b480      	push	{r7}
 800aed0:	b085      	sub	sp, #20
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 800aed6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800aeda:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aee2:	2270      	movs	r2, #112	; 0x70
 800aee4:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f003 0301 	and.w	r3, r3, #1
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d001      	beq.n	800aefc <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 800aef8:	2301      	movs	r3, #1
 800aefa:	e007      	b.n	800af0c <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 800af06:	2340      	movs	r3, #64	; 0x40
 800af08:	e000      	b.n	800af0c <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800af0a:	2300      	movs	r3, #0
  }
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	e267      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d075      	beq.n	800b022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af36:	4b88      	ldr	r3, [pc, #544]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	f003 030c 	and.w	r3, r3, #12
 800af3e:	2b04      	cmp	r3, #4
 800af40:	d00c      	beq.n	800af5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af42:	4b85      	ldr	r3, [pc, #532]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800af4a:	2b08      	cmp	r3, #8
 800af4c:	d112      	bne.n	800af74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800af4e:	4b82      	ldr	r3, [pc, #520]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af5a:	d10b      	bne.n	800af74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af5c:	4b7e      	ldr	r3, [pc, #504]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af64:	2b00      	cmp	r3, #0
 800af66:	d05b      	beq.n	800b020 <HAL_RCC_OscConfig+0x108>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	685b      	ldr	r3, [r3, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d157      	bne.n	800b020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e242      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af7c:	d106      	bne.n	800af8c <HAL_RCC_OscConfig+0x74>
 800af7e:	4b76      	ldr	r3, [pc, #472]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a75      	ldr	r2, [pc, #468]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af88:	6013      	str	r3, [r2, #0]
 800af8a:	e01d      	b.n	800afc8 <HAL_RCC_OscConfig+0xb0>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af94:	d10c      	bne.n	800afb0 <HAL_RCC_OscConfig+0x98>
 800af96:	4b70      	ldr	r3, [pc, #448]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a6f      	ldr	r2, [pc, #444]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800af9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800afa0:	6013      	str	r3, [r2, #0]
 800afa2:	4b6d      	ldr	r3, [pc, #436]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a6c      	ldr	r2, [pc, #432]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afac:	6013      	str	r3, [r2, #0]
 800afae:	e00b      	b.n	800afc8 <HAL_RCC_OscConfig+0xb0>
 800afb0:	4b69      	ldr	r3, [pc, #420]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a68      	ldr	r2, [pc, #416]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afba:	6013      	str	r3, [r2, #0]
 800afbc:	4b66      	ldr	r3, [pc, #408]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a65      	ldr	r2, [pc, #404]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800afc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d013      	beq.n	800aff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afd0:	f7fe ff6a 	bl	8009ea8 <HAL_GetTick>
 800afd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afd6:	e008      	b.n	800afea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800afd8:	f7fe ff66 	bl	8009ea8 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	2b64      	cmp	r3, #100	; 0x64
 800afe4:	d901      	bls.n	800afea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e207      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800afea:	4b5b      	ldr	r3, [pc, #364]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d0f0      	beq.n	800afd8 <HAL_RCC_OscConfig+0xc0>
 800aff6:	e014      	b.n	800b022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aff8:	f7fe ff56 	bl	8009ea8 <HAL_GetTick>
 800affc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800affe:	e008      	b.n	800b012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b000:	f7fe ff52 	bl	8009ea8 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b64      	cmp	r3, #100	; 0x64
 800b00c:	d901      	bls.n	800b012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e1f3      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b012:	4b51      	ldr	r3, [pc, #324]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1f0      	bne.n	800b000 <HAL_RCC_OscConfig+0xe8>
 800b01e:	e000      	b.n	800b022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0302 	and.w	r3, r3, #2
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d063      	beq.n	800b0f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b02e:	4b4a      	ldr	r3, [pc, #296]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b030:	689b      	ldr	r3, [r3, #8]
 800b032:	f003 030c 	and.w	r3, r3, #12
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b03a:	4b47      	ldr	r3, [pc, #284]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800b042:	2b08      	cmp	r3, #8
 800b044:	d11c      	bne.n	800b080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b046:	4b44      	ldr	r3, [pc, #272]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d116      	bne.n	800b080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b052:	4b41      	ldr	r3, [pc, #260]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d005      	beq.n	800b06a <HAL_RCC_OscConfig+0x152>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	68db      	ldr	r3, [r3, #12]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d001      	beq.n	800b06a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800b066:	2301      	movs	r3, #1
 800b068:	e1c7      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b06a:	4b3b      	ldr	r3, [pc, #236]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	4937      	ldr	r1, [pc, #220]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b07e:	e03a      	b.n	800b0f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d020      	beq.n	800b0ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b088:	4b34      	ldr	r3, [pc, #208]	; (800b15c <HAL_RCC_OscConfig+0x244>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b08e:	f7fe ff0b 	bl	8009ea8 <HAL_GetTick>
 800b092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b094:	e008      	b.n	800b0a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b096:	f7fe ff07 	bl	8009ea8 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	d901      	bls.n	800b0a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e1a8      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b0a8:	4b2b      	ldr	r3, [pc, #172]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f003 0302 	and.w	r3, r3, #2
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d0f0      	beq.n	800b096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0b4:	4b28      	ldr	r3, [pc, #160]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	4925      	ldr	r1, [pc, #148]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	600b      	str	r3, [r1, #0]
 800b0c8:	e015      	b.n	800b0f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <HAL_RCC_OscConfig+0x244>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0d0:	f7fe feea 	bl	8009ea8 <HAL_GetTick>
 800b0d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0d6:	e008      	b.n	800b0ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0d8:	f7fe fee6 	bl	8009ea8 <HAL_GetTick>
 800b0dc:	4602      	mov	r2, r0
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	1ad3      	subs	r3, r2, r3
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d901      	bls.n	800b0ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b0e6:	2303      	movs	r3, #3
 800b0e8:	e187      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b0ea:	4b1b      	ldr	r3, [pc, #108]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d1f0      	bne.n	800b0d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f003 0308 	and.w	r3, r3, #8
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d036      	beq.n	800b170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b10a:	4b15      	ldr	r3, [pc, #84]	; (800b160 <HAL_RCC_OscConfig+0x248>)
 800b10c:	2201      	movs	r2, #1
 800b10e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b110:	f7fe feca 	bl	8009ea8 <HAL_GetTick>
 800b114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b116:	e008      	b.n	800b12a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b118:	f7fe fec6 	bl	8009ea8 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	2b02      	cmp	r3, #2
 800b124:	d901      	bls.n	800b12a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e167      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <HAL_RCC_OscConfig+0x240>)
 800b12c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b12e:	f003 0302 	and.w	r3, r3, #2
 800b132:	2b00      	cmp	r3, #0
 800b134:	d0f0      	beq.n	800b118 <HAL_RCC_OscConfig+0x200>
 800b136:	e01b      	b.n	800b170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b138:	4b09      	ldr	r3, [pc, #36]	; (800b160 <HAL_RCC_OscConfig+0x248>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b13e:	f7fe feb3 	bl	8009ea8 <HAL_GetTick>
 800b142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b144:	e00e      	b.n	800b164 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b146:	f7fe feaf 	bl	8009ea8 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	2b02      	cmp	r3, #2
 800b152:	d907      	bls.n	800b164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e150      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
 800b158:	40023800 	.word	0x40023800
 800b15c:	42470000 	.word	0x42470000
 800b160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b164:	4b88      	ldr	r3, [pc, #544]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b168:	f003 0302 	and.w	r3, r3, #2
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d1ea      	bne.n	800b146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0304 	and.w	r3, r3, #4
 800b178:	2b00      	cmp	r3, #0
 800b17a:	f000 8097 	beq.w	800b2ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b17e:	2300      	movs	r3, #0
 800b180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b182:	4b81      	ldr	r3, [pc, #516]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10f      	bne.n	800b1ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b18e:	2300      	movs	r3, #0
 800b190:	60bb      	str	r3, [r7, #8]
 800b192:	4b7d      	ldr	r3, [pc, #500]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	4a7c      	ldr	r2, [pc, #496]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b19c:	6413      	str	r3, [r2, #64]	; 0x40
 800b19e:	4b7a      	ldr	r3, [pc, #488]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1a6:	60bb      	str	r3, [r7, #8]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1ae:	4b77      	ldr	r3, [pc, #476]	; (800b38c <HAL_RCC_OscConfig+0x474>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d118      	bne.n	800b1ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b1ba:	4b74      	ldr	r3, [pc, #464]	; (800b38c <HAL_RCC_OscConfig+0x474>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a73      	ldr	r2, [pc, #460]	; (800b38c <HAL_RCC_OscConfig+0x474>)
 800b1c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1c6:	f7fe fe6f 	bl	8009ea8 <HAL_GetTick>
 800b1ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1cc:	e008      	b.n	800b1e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1ce:	f7fe fe6b 	bl	8009ea8 <HAL_GetTick>
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	1ad3      	subs	r3, r2, r3
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d901      	bls.n	800b1e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b1dc:	2303      	movs	r3, #3
 800b1de:	e10c      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b1e0:	4b6a      	ldr	r3, [pc, #424]	; (800b38c <HAL_RCC_OscConfig+0x474>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d0f0      	beq.n	800b1ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d106      	bne.n	800b202 <HAL_RCC_OscConfig+0x2ea>
 800b1f4:	4b64      	ldr	r3, [pc, #400]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b1f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1f8:	4a63      	ldr	r2, [pc, #396]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b1fa:	f043 0301 	orr.w	r3, r3, #1
 800b1fe:	6713      	str	r3, [r2, #112]	; 0x70
 800b200:	e01c      	b.n	800b23c <HAL_RCC_OscConfig+0x324>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	2b05      	cmp	r3, #5
 800b208:	d10c      	bne.n	800b224 <HAL_RCC_OscConfig+0x30c>
 800b20a:	4b5f      	ldr	r3, [pc, #380]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20e:	4a5e      	ldr	r2, [pc, #376]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b210:	f043 0304 	orr.w	r3, r3, #4
 800b214:	6713      	str	r3, [r2, #112]	; 0x70
 800b216:	4b5c      	ldr	r3, [pc, #368]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21a:	4a5b      	ldr	r2, [pc, #364]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b21c:	f043 0301 	orr.w	r3, r3, #1
 800b220:	6713      	str	r3, [r2, #112]	; 0x70
 800b222:	e00b      	b.n	800b23c <HAL_RCC_OscConfig+0x324>
 800b224:	4b58      	ldr	r3, [pc, #352]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b228:	4a57      	ldr	r2, [pc, #348]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b22a:	f023 0301 	bic.w	r3, r3, #1
 800b22e:	6713      	str	r3, [r2, #112]	; 0x70
 800b230:	4b55      	ldr	r3, [pc, #340]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b234:	4a54      	ldr	r2, [pc, #336]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b236:	f023 0304 	bic.w	r3, r3, #4
 800b23a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d015      	beq.n	800b270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b244:	f7fe fe30 	bl	8009ea8 <HAL_GetTick>
 800b248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b24a:	e00a      	b.n	800b262 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b24c:	f7fe fe2c 	bl	8009ea8 <HAL_GetTick>
 800b250:	4602      	mov	r2, r0
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	1ad3      	subs	r3, r2, r3
 800b256:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d901      	bls.n	800b262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b25e:	2303      	movs	r3, #3
 800b260:	e0cb      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b262:	4b49      	ldr	r3, [pc, #292]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b266:	f003 0302 	and.w	r3, r3, #2
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d0ee      	beq.n	800b24c <HAL_RCC_OscConfig+0x334>
 800b26e:	e014      	b.n	800b29a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b270:	f7fe fe1a 	bl	8009ea8 <HAL_GetTick>
 800b274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b276:	e00a      	b.n	800b28e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b278:	f7fe fe16 	bl	8009ea8 <HAL_GetTick>
 800b27c:	4602      	mov	r2, r0
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	f241 3288 	movw	r2, #5000	; 0x1388
 800b286:	4293      	cmp	r3, r2
 800b288:	d901      	bls.n	800b28e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b28a:	2303      	movs	r3, #3
 800b28c:	e0b5      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b28e:	4b3e      	ldr	r3, [pc, #248]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	f003 0302 	and.w	r3, r3, #2
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1ee      	bne.n	800b278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d105      	bne.n	800b2ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b2a0:	4b39      	ldr	r3, [pc, #228]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a4:	4a38      	ldr	r2, [pc, #224]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b2a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	699b      	ldr	r3, [r3, #24]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 80a1 	beq.w	800b3f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b2b6:	4b34      	ldr	r3, [pc, #208]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f003 030c 	and.w	r3, r3, #12
 800b2be:	2b08      	cmp	r3, #8
 800b2c0:	d05c      	beq.n	800b37c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	d141      	bne.n	800b34e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2ca:	4b31      	ldr	r3, [pc, #196]	; (800b390 <HAL_RCC_OscConfig+0x478>)
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2d0:	f7fe fdea 	bl	8009ea8 <HAL_GetTick>
 800b2d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2d6:	e008      	b.n	800b2ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b2d8:	f7fe fde6 	bl	8009ea8 <HAL_GetTick>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	1ad3      	subs	r3, r2, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d901      	bls.n	800b2ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e087      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2ea:	4b27      	ldr	r3, [pc, #156]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1f0      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	69da      	ldr	r2, [r3, #28]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a1b      	ldr	r3, [r3, #32]
 800b2fe:	431a      	orrs	r2, r3
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	019b      	lsls	r3, r3, #6
 800b306:	431a      	orrs	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b30c:	085b      	lsrs	r3, r3, #1
 800b30e:	3b01      	subs	r3, #1
 800b310:	041b      	lsls	r3, r3, #16
 800b312:	431a      	orrs	r2, r3
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	061b      	lsls	r3, r3, #24
 800b31a:	491b      	ldr	r1, [pc, #108]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b31c:	4313      	orrs	r3, r2
 800b31e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b320:	4b1b      	ldr	r3, [pc, #108]	; (800b390 <HAL_RCC_OscConfig+0x478>)
 800b322:	2201      	movs	r2, #1
 800b324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b326:	f7fe fdbf 	bl	8009ea8 <HAL_GetTick>
 800b32a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b32c:	e008      	b.n	800b340 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b32e:	f7fe fdbb 	bl	8009ea8 <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	2b02      	cmp	r3, #2
 800b33a:	d901      	bls.n	800b340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b33c:	2303      	movs	r3, #3
 800b33e:	e05c      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b340:	4b11      	ldr	r3, [pc, #68]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d0f0      	beq.n	800b32e <HAL_RCC_OscConfig+0x416>
 800b34c:	e054      	b.n	800b3f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b34e:	4b10      	ldr	r3, [pc, #64]	; (800b390 <HAL_RCC_OscConfig+0x478>)
 800b350:	2200      	movs	r2, #0
 800b352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b354:	f7fe fda8 	bl	8009ea8 <HAL_GetTick>
 800b358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b35a:	e008      	b.n	800b36e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b35c:	f7fe fda4 	bl	8009ea8 <HAL_GetTick>
 800b360:	4602      	mov	r2, r0
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	2b02      	cmp	r3, #2
 800b368:	d901      	bls.n	800b36e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e045      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b36e:	4b06      	ldr	r3, [pc, #24]	; (800b388 <HAL_RCC_OscConfig+0x470>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d1f0      	bne.n	800b35c <HAL_RCC_OscConfig+0x444>
 800b37a:	e03d      	b.n	800b3f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d107      	bne.n	800b394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e038      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
 800b388:	40023800 	.word	0x40023800
 800b38c:	40007000 	.word	0x40007000
 800b390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b394:	4b1b      	ldr	r3, [pc, #108]	; (800b404 <HAL_RCC_OscConfig+0x4ec>)
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	2b01      	cmp	r3, #1
 800b3a0:	d028      	beq.n	800b3f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d121      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b3ba:	429a      	cmp	r2, r3
 800b3bc:	d11a      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b3c4:	4013      	ands	r3, r2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b3ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d111      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3da:	085b      	lsrs	r3, r3, #1
 800b3dc:	3b01      	subs	r3, #1
 800b3de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d107      	bne.n	800b3f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d001      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e000      	b.n	800b3fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	40023800 	.word	0x40023800

0800b408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d101      	bne.n	800b41c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b418:	2301      	movs	r3, #1
 800b41a:	e0cc      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b41c:	4b68      	ldr	r3, [pc, #416]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0307 	and.w	r3, r3, #7
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	429a      	cmp	r2, r3
 800b428:	d90c      	bls.n	800b444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b42a:	4b65      	ldr	r3, [pc, #404]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	b2d2      	uxtb	r2, r2
 800b430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b432:	4b63      	ldr	r3, [pc, #396]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f003 0307 	and.w	r3, r3, #7
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d001      	beq.n	800b444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b440:	2301      	movs	r3, #1
 800b442:	e0b8      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d020      	beq.n	800b492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b45c:	4b59      	ldr	r3, [pc, #356]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	4a58      	ldr	r2, [pc, #352]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 0308 	and.w	r3, r3, #8
 800b470:	2b00      	cmp	r3, #0
 800b472:	d005      	beq.n	800b480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b474:	4b53      	ldr	r3, [pc, #332]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	4a52      	ldr	r2, [pc, #328]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b47a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b47e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b480:	4b50      	ldr	r3, [pc, #320]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	494d      	ldr	r1, [pc, #308]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0301 	and.w	r3, r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d044      	beq.n	800b528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d107      	bne.n	800b4b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4a6:	4b47      	ldr	r3, [pc, #284]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d119      	bne.n	800b4e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	e07f      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d003      	beq.n	800b4c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4c2:	2b03      	cmp	r3, #3
 800b4c4:	d107      	bne.n	800b4d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4c6:	4b3f      	ldr	r3, [pc, #252]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d109      	bne.n	800b4e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e06f      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4d6:	4b3b      	ldr	r3, [pc, #236]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f003 0302 	and.w	r3, r3, #2
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d101      	bne.n	800b4e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e067      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4e6:	4b37      	ldr	r3, [pc, #220]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	f023 0203 	bic.w	r2, r3, #3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	4934      	ldr	r1, [pc, #208]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4f8:	f7fe fcd6 	bl	8009ea8 <HAL_GetTick>
 800b4fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4fe:	e00a      	b.n	800b516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b500:	f7fe fcd2 	bl	8009ea8 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b50e:	4293      	cmp	r3, r2
 800b510:	d901      	bls.n	800b516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b512:	2303      	movs	r3, #3
 800b514:	e04f      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b516:	4b2b      	ldr	r3, [pc, #172]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	f003 020c 	and.w	r2, r3, #12
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	429a      	cmp	r2, r3
 800b526:	d1eb      	bne.n	800b500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b528:	4b25      	ldr	r3, [pc, #148]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0307 	and.w	r3, r3, #7
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d20c      	bcs.n	800b550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b536:	4b22      	ldr	r3, [pc, #136]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	b2d2      	uxtb	r2, r2
 800b53c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b53e:	4b20      	ldr	r3, [pc, #128]	; (800b5c0 <HAL_RCC_ClockConfig+0x1b8>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 0307 	and.w	r3, r3, #7
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d001      	beq.n	800b550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	e032      	b.n	800b5b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0304 	and.w	r3, r3, #4
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d008      	beq.n	800b56e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b55c:	4b19      	ldr	r3, [pc, #100]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b55e:	689b      	ldr	r3, [r3, #8]
 800b560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	4916      	ldr	r1, [pc, #88]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b00      	cmp	r3, #0
 800b578:	d009      	beq.n	800b58e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b57a:	4b12      	ldr	r3, [pc, #72]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	00db      	lsls	r3, r3, #3
 800b588:	490e      	ldr	r1, [pc, #56]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b58e:	f000 f821 	bl	800b5d4 <HAL_RCC_GetSysClockFreq>
 800b592:	4602      	mov	r2, r0
 800b594:	4b0b      	ldr	r3, [pc, #44]	; (800b5c4 <HAL_RCC_ClockConfig+0x1bc>)
 800b596:	689b      	ldr	r3, [r3, #8]
 800b598:	091b      	lsrs	r3, r3, #4
 800b59a:	f003 030f 	and.w	r3, r3, #15
 800b59e:	490a      	ldr	r1, [pc, #40]	; (800b5c8 <HAL_RCC_ClockConfig+0x1c0>)
 800b5a0:	5ccb      	ldrb	r3, [r1, r3]
 800b5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <HAL_RCC_ClockConfig+0x1c4>)
 800b5a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b5aa:	4b09      	ldr	r3, [pc, #36]	; (800b5d0 <HAL_RCC_ClockConfig+0x1c8>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7f9 fa3c 	bl	8004a2c <HAL_InitTick>

  return HAL_OK;
 800b5b4:	2300      	movs	r3, #0
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	40023c00 	.word	0x40023c00
 800b5c4:	40023800 	.word	0x40023800
 800b5c8:	08016c3c 	.word	0x08016c3c
 800b5cc:	20000098 	.word	0x20000098
 800b5d0:	2000009c 	.word	0x2000009c

0800b5d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b5d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5d8:	b094      	sub	sp, #80	; 0x50
 800b5da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	647b      	str	r3, [r7, #68]	; 0x44
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b5ec:	4b79      	ldr	r3, [pc, #484]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f003 030c 	and.w	r3, r3, #12
 800b5f4:	2b08      	cmp	r3, #8
 800b5f6:	d00d      	beq.n	800b614 <HAL_RCC_GetSysClockFreq+0x40>
 800b5f8:	2b08      	cmp	r3, #8
 800b5fa:	f200 80e1 	bhi.w	800b7c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d002      	beq.n	800b608 <HAL_RCC_GetSysClockFreq+0x34>
 800b602:	2b04      	cmp	r3, #4
 800b604:	d003      	beq.n	800b60e <HAL_RCC_GetSysClockFreq+0x3a>
 800b606:	e0db      	b.n	800b7c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b608:	4b73      	ldr	r3, [pc, #460]	; (800b7d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b60a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b60c:	e0db      	b.n	800b7c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b60e:	4b73      	ldr	r3, [pc, #460]	; (800b7dc <HAL_RCC_GetSysClockFreq+0x208>)
 800b610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b612:	e0d8      	b.n	800b7c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b614:	4b6f      	ldr	r3, [pc, #444]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b61c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b61e:	4b6d      	ldr	r3, [pc, #436]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b620:	685b      	ldr	r3, [r3, #4]
 800b622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b626:	2b00      	cmp	r3, #0
 800b628:	d063      	beq.n	800b6f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b62a:	4b6a      	ldr	r3, [pc, #424]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	099b      	lsrs	r3, r3, #6
 800b630:	2200      	movs	r2, #0
 800b632:	63bb      	str	r3, [r7, #56]	; 0x38
 800b634:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b63c:	633b      	str	r3, [r7, #48]	; 0x30
 800b63e:	2300      	movs	r3, #0
 800b640:	637b      	str	r3, [r7, #52]	; 0x34
 800b642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b646:	4622      	mov	r2, r4
 800b648:	462b      	mov	r3, r5
 800b64a:	f04f 0000 	mov.w	r0, #0
 800b64e:	f04f 0100 	mov.w	r1, #0
 800b652:	0159      	lsls	r1, r3, #5
 800b654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b658:	0150      	lsls	r0, r2, #5
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4621      	mov	r1, r4
 800b660:	1a51      	subs	r1, r2, r1
 800b662:	6139      	str	r1, [r7, #16]
 800b664:	4629      	mov	r1, r5
 800b666:	eb63 0301 	sbc.w	r3, r3, r1
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	f04f 0200 	mov.w	r2, #0
 800b670:	f04f 0300 	mov.w	r3, #0
 800b674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b678:	4659      	mov	r1, fp
 800b67a:	018b      	lsls	r3, r1, #6
 800b67c:	4651      	mov	r1, sl
 800b67e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b682:	4651      	mov	r1, sl
 800b684:	018a      	lsls	r2, r1, #6
 800b686:	4651      	mov	r1, sl
 800b688:	ebb2 0801 	subs.w	r8, r2, r1
 800b68c:	4659      	mov	r1, fp
 800b68e:	eb63 0901 	sbc.w	r9, r3, r1
 800b692:	f04f 0200 	mov.w	r2, #0
 800b696:	f04f 0300 	mov.w	r3, #0
 800b69a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b69e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b6a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b6a6:	4690      	mov	r8, r2
 800b6a8:	4699      	mov	r9, r3
 800b6aa:	4623      	mov	r3, r4
 800b6ac:	eb18 0303 	adds.w	r3, r8, r3
 800b6b0:	60bb      	str	r3, [r7, #8]
 800b6b2:	462b      	mov	r3, r5
 800b6b4:	eb49 0303 	adc.w	r3, r9, r3
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	f04f 0200 	mov.w	r2, #0
 800b6be:	f04f 0300 	mov.w	r3, #0
 800b6c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b6c6:	4629      	mov	r1, r5
 800b6c8:	024b      	lsls	r3, r1, #9
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b6d0:	4621      	mov	r1, r4
 800b6d2:	024a      	lsls	r2, r1, #9
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6da:	2200      	movs	r2, #0
 800b6dc:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6e4:	f7f5 f922 	bl	800092c <__aeabi_uldivmod>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6f0:	e058      	b.n	800b7a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6f2:	4b38      	ldr	r3, [pc, #224]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	099b      	lsrs	r3, r3, #6
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	4611      	mov	r1, r2
 800b6fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b702:	623b      	str	r3, [r7, #32]
 800b704:	2300      	movs	r3, #0
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
 800b708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b70c:	4642      	mov	r2, r8
 800b70e:	464b      	mov	r3, r9
 800b710:	f04f 0000 	mov.w	r0, #0
 800b714:	f04f 0100 	mov.w	r1, #0
 800b718:	0159      	lsls	r1, r3, #5
 800b71a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b71e:	0150      	lsls	r0, r2, #5
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4641      	mov	r1, r8
 800b726:	ebb2 0a01 	subs.w	sl, r2, r1
 800b72a:	4649      	mov	r1, r9
 800b72c:	eb63 0b01 	sbc.w	fp, r3, r1
 800b730:	f04f 0200 	mov.w	r2, #0
 800b734:	f04f 0300 	mov.w	r3, #0
 800b738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b73c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b744:	ebb2 040a 	subs.w	r4, r2, sl
 800b748:	eb63 050b 	sbc.w	r5, r3, fp
 800b74c:	f04f 0200 	mov.w	r2, #0
 800b750:	f04f 0300 	mov.w	r3, #0
 800b754:	00eb      	lsls	r3, r5, #3
 800b756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b75a:	00e2      	lsls	r2, r4, #3
 800b75c:	4614      	mov	r4, r2
 800b75e:	461d      	mov	r5, r3
 800b760:	4643      	mov	r3, r8
 800b762:	18e3      	adds	r3, r4, r3
 800b764:	603b      	str	r3, [r7, #0]
 800b766:	464b      	mov	r3, r9
 800b768:	eb45 0303 	adc.w	r3, r5, r3
 800b76c:	607b      	str	r3, [r7, #4]
 800b76e:	f04f 0200 	mov.w	r2, #0
 800b772:	f04f 0300 	mov.w	r3, #0
 800b776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b77a:	4629      	mov	r1, r5
 800b77c:	028b      	lsls	r3, r1, #10
 800b77e:	4621      	mov	r1, r4
 800b780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b784:	4621      	mov	r1, r4
 800b786:	028a      	lsls	r2, r1, #10
 800b788:	4610      	mov	r0, r2
 800b78a:	4619      	mov	r1, r3
 800b78c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b78e:	2200      	movs	r2, #0
 800b790:	61bb      	str	r3, [r7, #24]
 800b792:	61fa      	str	r2, [r7, #28]
 800b794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b798:	f7f5 f8c8 	bl	800092c <__aeabi_uldivmod>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4613      	mov	r3, r2
 800b7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7a4:	4b0b      	ldr	r3, [pc, #44]	; (800b7d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	0c1b      	lsrs	r3, r3, #16
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	005b      	lsls	r3, r3, #1
 800b7b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b7b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b7b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7be:	e002      	b.n	800b7c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800b7c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b7c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b7c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3750      	adds	r7, #80	; 0x50
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b7d2:	bf00      	nop
 800b7d4:	40023800 	.word	0x40023800
 800b7d8:	00f42400 	.word	0x00f42400
 800b7dc:	007a1200 	.word	0x007a1200

0800b7e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b7e4:	4b03      	ldr	r3, [pc, #12]	; (800b7f4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000098 	.word	0x20000098

0800b7f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b7fc:	f7ff fff0 	bl	800b7e0 <HAL_RCC_GetHCLKFreq>
 800b800:	4602      	mov	r2, r0
 800b802:	4b05      	ldr	r3, [pc, #20]	; (800b818 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	0a9b      	lsrs	r3, r3, #10
 800b808:	f003 0307 	and.w	r3, r3, #7
 800b80c:	4903      	ldr	r1, [pc, #12]	; (800b81c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b80e:	5ccb      	ldrb	r3, [r1, r3]
 800b810:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b814:	4618      	mov	r0, r3
 800b816:	bd80      	pop	{r7, pc}
 800b818:	40023800 	.word	0x40023800
 800b81c:	08016c4c 	.word	0x08016c4c

0800b820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b824:	f7ff ffdc 	bl	800b7e0 <HAL_RCC_GetHCLKFreq>
 800b828:	4602      	mov	r2, r0
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b82c:	689b      	ldr	r3, [r3, #8]
 800b82e:	0b5b      	lsrs	r3, r3, #13
 800b830:	f003 0307 	and.w	r3, r3, #7
 800b834:	4903      	ldr	r1, [pc, #12]	; (800b844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b836:	5ccb      	ldrb	r3, [r1, r3]
 800b838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	40023800 	.word	0x40023800
 800b844:	08016c4c 	.word	0x08016c4c

0800b848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	220f      	movs	r2, #15
 800b856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b858:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f003 0203 	and.w	r2, r3, #3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b864:	4b0f      	ldr	r3, [pc, #60]	; (800b8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b870:	4b0c      	ldr	r3, [pc, #48]	; (800b8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800b872:	689b      	ldr	r3, [r3, #8]
 800b874:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b87c:	4b09      	ldr	r3, [pc, #36]	; (800b8a4 <HAL_RCC_GetClockConfig+0x5c>)
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	08db      	lsrs	r3, r3, #3
 800b882:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b88a:	4b07      	ldr	r3, [pc, #28]	; (800b8a8 <HAL_RCC_GetClockConfig+0x60>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f003 0207 	and.w	r2, r3, #7
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	370c      	adds	r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	40023800 	.word	0x40023800
 800b8a8:	40023c00 	.word	0x40023c00

0800b8ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f003 0301 	and.w	r3, r3, #1
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d105      	bne.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d035      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b8d4:	4b62      	ldr	r3, [pc, #392]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b8da:	f7fe fae5 	bl	8009ea8 <HAL_GetTick>
 800b8de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8e0:	e008      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b8e2:	f7fe fae1 	bl	8009ea8 <HAL_GetTick>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d901      	bls.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b8f0:	2303      	movs	r3, #3
 800b8f2:	e0b0      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b8f4:	4b5b      	ldr	r3, [pc, #364]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1f0      	bne.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	019a      	lsls	r2, r3, #6
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	689b      	ldr	r3, [r3, #8]
 800b90a:	071b      	lsls	r3, r3, #28
 800b90c:	4955      	ldr	r1, [pc, #340]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b90e:	4313      	orrs	r3, r2
 800b910:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b914:	4b52      	ldr	r3, [pc, #328]	; (800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b916:	2201      	movs	r2, #1
 800b918:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b91a:	f7fe fac5 	bl	8009ea8 <HAL_GetTick>
 800b91e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b920:	e008      	b.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b922:	f7fe fac1 	bl	8009ea8 <HAL_GetTick>
 800b926:	4602      	mov	r2, r0
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	d901      	bls.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b930:	2303      	movs	r3, #3
 800b932:	e090      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b934:	4b4b      	ldr	r3, [pc, #300]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d0f0      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f003 0302 	and.w	r3, r3, #2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	f000 8083 	beq.w	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b94e:	2300      	movs	r3, #0
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	4b44      	ldr	r3, [pc, #272]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b956:	4a43      	ldr	r2, [pc, #268]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b95c:	6413      	str	r3, [r2, #64]	; 0x40
 800b95e:	4b41      	ldr	r3, [pc, #260]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b966:	60fb      	str	r3, [r7, #12]
 800b968:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b96a:	4b3f      	ldr	r3, [pc, #252]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a3e      	ldr	r2, [pc, #248]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b974:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b976:	f7fe fa97 	bl	8009ea8 <HAL_GetTick>
 800b97a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b97c:	e008      	b.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b97e:	f7fe fa93 	bl	8009ea8 <HAL_GetTick>
 800b982:	4602      	mov	r2, r0
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	1ad3      	subs	r3, r2, r3
 800b988:	2b02      	cmp	r3, #2
 800b98a:	d901      	bls.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b98c:	2303      	movs	r3, #3
 800b98e:	e062      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b990:	4b35      	ldr	r3, [pc, #212]	; (800ba68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d0f0      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b99c:	4b31      	ldr	r3, [pc, #196]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b99e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9a4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d02f      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9b4:	693a      	ldr	r2, [r7, #16]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d028      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b9ba:	4b2a      	ldr	r3, [pc, #168]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b9c4:	4b29      	ldr	r3, [pc, #164]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b9ca:	4b28      	ldr	r3, [pc, #160]	; (800ba6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b9d0:	4a24      	ldr	r2, [pc, #144]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b9d6:	4b23      	ldr	r3, [pc, #140]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b9d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9da:	f003 0301 	and.w	r3, r3, #1
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d114      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b9e2:	f7fe fa61 	bl	8009ea8 <HAL_GetTick>
 800b9e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b9e8:	e00a      	b.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b9ea:	f7fe fa5d 	bl	8009ea8 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d901      	bls.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	e02a      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba00:	4b18      	ldr	r3, [pc, #96]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba04:	f003 0302 	and.w	r3, r3, #2
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0ee      	beq.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba18:	d10d      	bne.n	800ba36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ba1a:	4b12      	ldr	r3, [pc, #72]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba2e:	490d      	ldr	r1, [pc, #52]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	608b      	str	r3, [r1, #8]
 800ba34:	e005      	b.n	800ba42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ba36:	4b0b      	ldr	r3, [pc, #44]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	4a0a      	ldr	r2, [pc, #40]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ba40:	6093      	str	r3, [r2, #8]
 800ba42:	4b08      	ldr	r3, [pc, #32]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ba4e:	4905      	ldr	r1, [pc, #20]	; (800ba64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ba50:	4313      	orrs	r3, r2
 800ba52:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3718      	adds	r7, #24
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}
 800ba5e:	bf00      	nop
 800ba60:	42470068 	.word	0x42470068
 800ba64:	40023800 	.word	0x40023800
 800ba68:	40007000 	.word	0x40007000
 800ba6c:	42470e40 	.word	0x42470e40

0800ba70 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d101      	bne.n	800ba86 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e066      	b.n	800bb54 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	7f5b      	ldrb	r3, [r3, #29]
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d105      	bne.n	800ba9c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f7f8 fe08 	bl	80046ac <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2202      	movs	r2, #2
 800baa0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	22ca      	movs	r2, #202	; 0xca
 800baa8:	625a      	str	r2, [r3, #36]	; 0x24
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2253      	movs	r2, #83	; 0x53
 800bab0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 fa45 	bl	800bf42 <RTC_EnterInitMode>
 800bab8:	4603      	mov	r3, r0
 800baba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800babc:	7bfb      	ldrb	r3, [r7, #15]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d12c      	bne.n	800bb1c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	689b      	ldr	r3, [r3, #8]
 800bac8:	687a      	ldr	r2, [r7, #4]
 800baca:	6812      	ldr	r2, [r2, #0]
 800bacc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6899      	ldr	r1, [r3, #8]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	685a      	ldr	r2, [r3, #4]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	431a      	orrs	r2, r3
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	695b      	ldr	r3, [r3, #20]
 800baea:	431a      	orrs	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	430a      	orrs	r2, r1
 800baf2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	68d2      	ldr	r2, [r2, #12]
 800bafc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	6919      	ldr	r1, [r3, #16]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	041a      	lsls	r2, r3, #16
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fa4c 	bl	800bfb0 <RTC_ExitInitMode>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d113      	bne.n	800bb4a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bb30:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	699a      	ldr	r2, [r3, #24]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2201      	movs	r2, #1
 800bb48:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	22ff      	movs	r2, #255	; 0xff
 800bb50:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb54:	4618      	mov	r0, r3
 800bb56:	3710      	adds	r7, #16
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bb5c:	b590      	push	{r4, r7, lr}
 800bb5e:	b087      	sub	sp, #28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	7f1b      	ldrb	r3, [r3, #28]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d101      	bne.n	800bb78 <HAL_RTC_SetTime+0x1c>
 800bb74:	2302      	movs	r3, #2
 800bb76:	e087      	b.n	800bc88 <HAL_RTC_SetTime+0x12c>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2202      	movs	r2, #2
 800bb82:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d126      	bne.n	800bbd8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d102      	bne.n	800bb9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f000 fa29 	bl	800bffa <RTC_ByteToBcd2>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f000 fa22 	bl	800bffa <RTC_ByteToBcd2>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bbba:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	789b      	ldrb	r3, [r3, #2]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 fa1a 	bl	800bffa <RTC_ByteToBcd2>
 800bbc6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800bbc8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	78db      	ldrb	r3, [r3, #3]
 800bbd0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]
 800bbd6:	e018      	b.n	800bc0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d102      	bne.n	800bbec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bbf8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800bbfa:	68ba      	ldr	r2, [r7, #8]
 800bbfc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800bbfe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	78db      	ldrb	r3, [r3, #3]
 800bc04:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800bc06:	4313      	orrs	r3, r2
 800bc08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	22ca      	movs	r2, #202	; 0xca
 800bc10:	625a      	str	r2, [r3, #36]	; 0x24
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	2253      	movs	r2, #83	; 0x53
 800bc18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f991 	bl	800bf42 <RTC_EnterInitMode>
 800bc20:	4603      	mov	r3, r0
 800bc22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800bc24:	7cfb      	ldrb	r3, [r7, #19]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d120      	bne.n	800bc6c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bc34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bc38:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689a      	ldr	r2, [r3, #8]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc48:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6899      	ldr	r1, [r3, #8]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	431a      	orrs	r2, r3
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 f9a4 	bl	800bfb0 <RTC_ExitInitMode>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800bc6c:	7cfb      	ldrb	r3, [r7, #19]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d102      	bne.n	800bc78 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	2201      	movs	r2, #1
 800bc76:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	22ff      	movs	r2, #255	; 0xff
 800bc7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	771a      	strb	r2, [r3, #28]

  return status;
 800bc86:	7cfb      	ldrb	r3, [r7, #19]
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	371c      	adds	r7, #28
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bd90      	pop	{r4, r7, pc}

0800bc90 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bcb4:	68bb      	ldr	r3, [r7, #8]
 800bcb6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bcc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bcc6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800bcc8:	697b      	ldr	r3, [r7, #20]
 800bcca:	0c1b      	lsrs	r3, r3, #16
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	0a1b      	lsrs	r3, r3, #8
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf0:	b2da      	uxtb	r2, r3
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	0d9b      	lsrs	r3, r3, #22
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 0301 	and.w	r3, r3, #1
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d11a      	bne.n	800bd42 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	4618      	mov	r0, r3
 800bd12:	f000 f98f 	bl	800c034 <RTC_Bcd2ToByte>
 800bd16:	4603      	mov	r3, r0
 800bd18:	461a      	mov	r2, r3
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	785b      	ldrb	r3, [r3, #1]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 f986 	bl	800c034 <RTC_Bcd2ToByte>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	789b      	ldrb	r3, [r3, #2]
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 f97d 	bl	800c034 <RTC_Bcd2ToByte>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bd4c:	b590      	push	{r4, r7, lr}
 800bd4e:	b087      	sub	sp, #28
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	60f8      	str	r0, [r7, #12]
 800bd54:	60b9      	str	r1, [r7, #8]
 800bd56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	7f1b      	ldrb	r3, [r3, #28]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d101      	bne.n	800bd68 <HAL_RTC_SetDate+0x1c>
 800bd64:	2302      	movs	r3, #2
 800bd66:	e071      	b.n	800be4c <HAL_RTC_SetDate+0x100>
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2202      	movs	r2, #2
 800bd72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10e      	bne.n	800bd98 <HAL_RTC_SetDate+0x4c>
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	785b      	ldrb	r3, [r3, #1]
 800bd7e:	f003 0310 	and.w	r3, r3, #16
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d008      	beq.n	800bd98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	f023 0310 	bic.w	r3, r3, #16
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	330a      	adds	r3, #10
 800bd92:	b2da      	uxtb	r2, r3
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d11c      	bne.n	800bdd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	78db      	ldrb	r3, [r3, #3]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 f929 	bl	800bffa <RTC_ByteToBcd2>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	785b      	ldrb	r3, [r3, #1]
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 f922 	bl	800bffa <RTC_ByteToBcd2>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bdba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	789b      	ldrb	r3, [r3, #2]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 f91a 	bl	800bffa <RTC_ByteToBcd2>
 800bdc6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800bdc8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	617b      	str	r3, [r7, #20]
 800bdd6:	e00e      	b.n	800bdf6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	78db      	ldrb	r3, [r3, #3]
 800bddc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	785b      	ldrb	r3, [r3, #1]
 800bde2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bde4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800bde6:	68ba      	ldr	r2, [r7, #8]
 800bde8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800bdea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	22ca      	movs	r2, #202	; 0xca
 800bdfc:	625a      	str	r2, [r3, #36]	; 0x24
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2253      	movs	r2, #83	; 0x53
 800be04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 f89b 	bl	800bf42 <RTC_EnterInitMode>
 800be0c:	4603      	mov	r3, r0
 800be0e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800be10:	7cfb      	ldrb	r3, [r7, #19]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10c      	bne.n	800be30 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	697b      	ldr	r3, [r7, #20]
 800be1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 f8c2 	bl	800bfb0 <RTC_ExitInitMode>
 800be2c:	4603      	mov	r3, r0
 800be2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800be30:	7cfb      	ldrb	r3, [r7, #19]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d102      	bne.n	800be3c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	2201      	movs	r2, #1
 800be3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	22ff      	movs	r2, #255	; 0xff
 800be42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2200      	movs	r2, #0
 800be48:	771a      	strb	r2, [r3, #28]

  return status;
 800be4a:	7cfb      	ldrb	r3, [r7, #19]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	371c      	adds	r7, #28
 800be50:	46bd      	mov	sp, r7
 800be52:	bd90      	pop	{r4, r7, pc}

0800be54 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b086      	sub	sp, #24
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800be72:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	0c1b      	lsrs	r3, r3, #16
 800be78:	b2da      	uxtb	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	0a1b      	lsrs	r3, r3, #8
 800be82:	b2db      	uxtb	r3, r3
 800be84:	f003 031f 	and.w	r3, r3, #31
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	b2db      	uxtb	r3, r3
 800be92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be96:	b2da      	uxtb	r2, r3
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	0b5b      	lsrs	r3, r3, #13
 800bea0:	b2db      	uxtb	r3, r3
 800bea2:	f003 0307 	and.w	r3, r3, #7
 800bea6:	b2da      	uxtb	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d11a      	bne.n	800bee8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	78db      	ldrb	r3, [r3, #3]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f8bc 	bl	800c034 <RTC_Bcd2ToByte>
 800bebc:	4603      	mov	r3, r0
 800bebe:	461a      	mov	r2, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	4618      	mov	r0, r3
 800beca:	f000 f8b3 	bl	800c034 <RTC_Bcd2ToByte>
 800bece:	4603      	mov	r3, r0
 800bed0:	461a      	mov	r2, r3
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	789b      	ldrb	r3, [r3, #2]
 800beda:	4618      	mov	r0, r3
 800bedc:	f000 f8aa 	bl	800c034 <RTC_Bcd2ToByte>
 800bee0:	4603      	mov	r3, r0
 800bee2:	461a      	mov	r2, r3
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3718      	adds	r7, #24
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b084      	sub	sp, #16
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800befa:	2300      	movs	r3, #0
 800befc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68da      	ldr	r2, [r3, #12]
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bf0c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf0e:	f7fd ffcb 	bl	8009ea8 <HAL_GetTick>
 800bf12:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bf14:	e009      	b.n	800bf2a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf16:	f7fd ffc7 	bl	8009ea8 <HAL_GetTick>
 800bf1a:	4602      	mov	r2, r0
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	1ad3      	subs	r3, r2, r3
 800bf20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf24:	d901      	bls.n	800bf2a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bf26:	2303      	movs	r3, #3
 800bf28:	e007      	b.n	800bf3a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	f003 0320 	and.w	r3, r3, #32
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0ee      	beq.n	800bf16 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3710      	adds	r7, #16
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bf42:	b580      	push	{r7, lr}
 800bf44:	b084      	sub	sp, #16
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d122      	bne.n	800bfa6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf6e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf70:	f7fd ff9a 	bl	8009ea8 <HAL_GetTick>
 800bf74:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bf76:	e00c      	b.n	800bf92 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bf78:	f7fd ff96 	bl	8009ea8 <HAL_GetTick>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	1ad3      	subs	r3, r2, r3
 800bf82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf86:	d904      	bls.n	800bf92 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2204      	movs	r2, #4
 800bf8c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d102      	bne.n	800bfa6 <RTC_EnterInitMode+0x64>
 800bfa0:	7bfb      	ldrb	r3, [r7, #15]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d1e8      	bne.n	800bf78 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68da      	ldr	r2, [r3, #12]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfca:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	f003 0320 	and.w	r3, r3, #32
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff ff89 	bl	800bef2 <HAL_RTC_WaitForSynchro>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d004      	beq.n	800bff0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2204      	movs	r2, #4
 800bfea:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800bfec:	2301      	movs	r3, #1
 800bfee:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800bff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800bffa:	b480      	push	{r7}
 800bffc:	b085      	sub	sp, #20
 800bffe:	af00      	add	r7, sp, #0
 800c000:	4603      	mov	r3, r0
 800c002:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800c004:	2300      	movs	r3, #0
 800c006:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800c008:	e005      	b.n	800c016 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c00a:	7bfb      	ldrb	r3, [r7, #15]
 800c00c:	3301      	adds	r3, #1
 800c00e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800c010:	79fb      	ldrb	r3, [r7, #7]
 800c012:	3b0a      	subs	r3, #10
 800c014:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	2b09      	cmp	r3, #9
 800c01a:	d8f6      	bhi.n	800c00a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800c01c:	7bfb      	ldrb	r3, [r7, #15]
 800c01e:	011b      	lsls	r3, r3, #4
 800c020:	b2da      	uxtb	r2, r3
 800c022:	79fb      	ldrb	r3, [r7, #7]
 800c024:	4313      	orrs	r3, r2
 800c026:	b2db      	uxtb	r3, r3
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3714      	adds	r7, #20
 800c02c:	46bd      	mov	sp, r7
 800c02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c032:	4770      	bx	lr

0800c034 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	091b      	lsrs	r3, r3, #4
 800c046:	b2db      	uxtb	r3, r3
 800c048:	461a      	mov	r2, r3
 800c04a:	0092      	lsls	r2, r2, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	005b      	lsls	r3, r3, #1
 800c050:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800c052:	79fb      	ldrb	r3, [r7, #7]
 800c054:	f003 030f 	and.w	r3, r3, #15
 800c058:	b2da      	uxtb	r2, r3
 800c05a:	7bfb      	ldrb	r3, [r7, #15]
 800c05c:	4413      	add	r3, r2
 800c05e:	b2db      	uxtb	r3, r3
}
 800c060:	4618      	mov	r0, r3
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e07b      	b.n	800c176 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c082:	2b00      	cmp	r3, #0
 800c084:	d108      	bne.n	800c098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c08e:	d009      	beq.n	800c0a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	61da      	str	r2, [r3, #28]
 800c096:	e005      	b.n	800c0a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7f8 fb20 	bl	8004704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c0da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	689b      	ldr	r3, [r3, #8]
 800c0e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c0ec:	431a      	orrs	r2, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c0f6:	431a      	orrs	r2, r3
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	691b      	ldr	r3, [r3, #16]
 800c0fc:	f003 0302 	and.w	r3, r3, #2
 800c100:	431a      	orrs	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	f003 0301 	and.w	r3, r3, #1
 800c10a:	431a      	orrs	r2, r3
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c114:	431a      	orrs	r2, r3
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c11e:	431a      	orrs	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6a1b      	ldr	r3, [r3, #32]
 800c124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c128:	ea42 0103 	orr.w	r1, r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c130:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	430a      	orrs	r2, r1
 800c13a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	0c1b      	lsrs	r3, r3, #16
 800c142:	f003 0104 	and.w	r1, r3, #4
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14a:	f003 0210 	and.w	r2, r3, #16
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69da      	ldr	r2, [r3, #28]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c164:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	2200      	movs	r2, #0
 800c16a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}

0800c17e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c17e:	b580      	push	{r7, lr}
 800c180:	b088      	sub	sp, #32
 800c182:	af00      	add	r7, sp, #0
 800c184:	60f8      	str	r0, [r7, #12]
 800c186:	60b9      	str	r1, [r7, #8]
 800c188:	603b      	str	r3, [r7, #0]
 800c18a:	4613      	mov	r3, r2
 800c18c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c198:	2b01      	cmp	r3, #1
 800c19a:	d101      	bne.n	800c1a0 <HAL_SPI_Transmit+0x22>
 800c19c:	2302      	movs	r3, #2
 800c19e:	e126      	b.n	800c3ee <HAL_SPI_Transmit+0x270>
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c1a8:	f7fd fe7e 	bl	8009ea8 <HAL_GetTick>
 800c1ac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d002      	beq.n	800c1c4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c1be:	2302      	movs	r3, #2
 800c1c0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c1c2:	e10b      	b.n	800c3dc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d002      	beq.n	800c1d0 <HAL_SPI_Transmit+0x52>
 800c1ca:	88fb      	ldrh	r3, [r7, #6]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c1d4:	e102      	b.n	800c3dc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2203      	movs	r2, #3
 800c1da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68ba      	ldr	r2, [r7, #8]
 800c1e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	88fa      	ldrh	r2, [r7, #6]
 800c1ee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	88fa      	ldrh	r2, [r7, #6]
 800c1f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2200      	movs	r2, #0
 800c206:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	2200      	movs	r2, #0
 800c20c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	2200      	movs	r2, #0
 800c212:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c21c:	d10f      	bne.n	800c23e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c22c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681a      	ldr	r2, [r3, #0]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c23c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c248:	2b40      	cmp	r3, #64	; 0x40
 800c24a:	d007      	beq.n	800c25c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c25a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c264:	d14b      	bne.n	800c2fe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d002      	beq.n	800c274 <HAL_SPI_Transmit+0xf6>
 800c26e:	8afb      	ldrh	r3, [r7, #22]
 800c270:	2b01      	cmp	r3, #1
 800c272:	d13e      	bne.n	800c2f2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c278:	881a      	ldrh	r2, [r3, #0]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c284:	1c9a      	adds	r2, r3, #2
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c28e:	b29b      	uxth	r3, r3
 800c290:	3b01      	subs	r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c298:	e02b      	b.n	800c2f2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f003 0302 	and.w	r3, r3, #2
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d112      	bne.n	800c2ce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b8:	1c9a      	adds	r2, r3, #2
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	86da      	strh	r2, [r3, #54]	; 0x36
 800c2cc:	e011      	b.n	800c2f2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2ce:	f7fd fdeb 	bl	8009ea8 <HAL_GetTick>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	1ad3      	subs	r3, r2, r3
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d803      	bhi.n	800c2e6 <HAL_SPI_Transmit+0x168>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2e4:	d102      	bne.n	800c2ec <HAL_SPI_Transmit+0x16e>
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c2f0:	e074      	b.n	800c3dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d1ce      	bne.n	800c29a <HAL_SPI_Transmit+0x11c>
 800c2fc:	e04c      	b.n	800c398 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	685b      	ldr	r3, [r3, #4]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d002      	beq.n	800c30c <HAL_SPI_Transmit+0x18e>
 800c306:	8afb      	ldrh	r3, [r7, #22]
 800c308:	2b01      	cmp	r3, #1
 800c30a:	d140      	bne.n	800c38e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	330c      	adds	r3, #12
 800c316:	7812      	ldrb	r2, [r2, #0]
 800c318:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c31e:	1c5a      	adds	r2, r3, #1
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c332:	e02c      	b.n	800c38e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	f003 0302 	and.w	r3, r3, #2
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d113      	bne.n	800c36a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	330c      	adds	r3, #12
 800c34c:	7812      	ldrb	r2, [r2, #0]
 800c34e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c35e:	b29b      	uxth	r3, r3
 800c360:	3b01      	subs	r3, #1
 800c362:	b29a      	uxth	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	86da      	strh	r2, [r3, #54]	; 0x36
 800c368:	e011      	b.n	800c38e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c36a:	f7fd fd9d 	bl	8009ea8 <HAL_GetTick>
 800c36e:	4602      	mov	r2, r0
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	1ad3      	subs	r3, r2, r3
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	429a      	cmp	r2, r3
 800c378:	d803      	bhi.n	800c382 <HAL_SPI_Transmit+0x204>
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c380:	d102      	bne.n	800c388 <HAL_SPI_Transmit+0x20a>
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d102      	bne.n	800c38e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c388:	2303      	movs	r3, #3
 800c38a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c38c:	e026      	b.n	800c3dc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c392:	b29b      	uxth	r3, r3
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1cd      	bne.n	800c334 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c398:	69ba      	ldr	r2, [r7, #24]
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 fb13 	bl	800c9c8 <SPI_EndRxTxTransaction>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2220      	movs	r2, #32
 800c3ac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d10a      	bne.n	800c3cc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	613b      	str	r3, [r7, #16]
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	68db      	ldr	r3, [r3, #12]
 800c3c0:	613b      	str	r3, [r7, #16]
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	613b      	str	r3, [r7, #16]
 800c3ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	77fb      	strb	r3, [r7, #31]
 800c3d8:	e000      	b.n	800c3dc <HAL_SPI_Transmit+0x25e>
  }

error:
 800c3da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c3ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3720      	adds	r7, #32
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b086      	sub	sp, #24
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	60f8      	str	r0, [r7, #12]
 800c400:	60b9      	str	r1, [r7, #8]
 800c402:	4613      	mov	r3, r2
 800c404:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c410:	2b01      	cmp	r3, #1
 800c412:	d101      	bne.n	800c418 <HAL_SPI_Transmit_DMA+0x20>
 800c414:	2302      	movs	r3, #2
 800c416:	e09b      	b.n	800c550 <HAL_SPI_Transmit_DMA+0x158>
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2201      	movs	r2, #1
 800c41c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c426:	b2db      	uxtb	r3, r3
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d002      	beq.n	800c432 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c42c:	2302      	movs	r3, #2
 800c42e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c430:	e089      	b.n	800c546 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_SPI_Transmit_DMA+0x46>
 800c438:	88fb      	ldrh	r3, [r7, #6]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d102      	bne.n	800c444 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c442:	e080      	b.n	800c546 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2203      	movs	r2, #3
 800c448:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2200      	movs	r2, #0
 800c450:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	68ba      	ldr	r2, [r7, #8]
 800c456:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	88fa      	ldrh	r2, [r7, #6]
 800c45c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	88fa      	ldrh	r2, [r7, #6]
 800c462:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	2200      	movs	r2, #0
 800c46e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2200      	movs	r2, #0
 800c47a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c48a:	d10f      	bne.n	800c4ac <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c49a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4b0:	4a29      	ldr	r2, [pc, #164]	; (800c558 <HAL_SPI_Transmit_DMA+0x160>)
 800c4b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4b8:	4a28      	ldr	r2, [pc, #160]	; (800c55c <HAL_SPI_Transmit_DMA+0x164>)
 800c4ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c0:	4a27      	ldr	r2, [pc, #156]	; (800c560 <HAL_SPI_Transmit_DMA+0x168>)
 800c4c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4d4:	4619      	mov	r1, r3
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	330c      	adds	r3, #12
 800c4dc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4e2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c4e4:	f7fd fea0 	bl	800a228 <HAL_DMA_Start_IT>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00c      	beq.n	800c508 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f2:	f043 0210 	orr.w	r2, r3, #16
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2201      	movs	r2, #1
 800c502:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c506:	e01e      	b.n	800c546 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c512:	2b40      	cmp	r3, #64	; 0x40
 800c514:	d007      	beq.n	800c526 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c524:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f042 0220 	orr.w	r2, r2, #32
 800c534:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	685a      	ldr	r2, [r3, #4]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0202 	orr.w	r2, r2, #2
 800c544:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	0800c835 	.word	0x0800c835
 800c55c:	0800c78d 	.word	0x0800c78d
 800c560:	0800c851 	.word	0x0800c851

0800c564 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	099b      	lsrs	r3, r3, #6
 800c580:	f003 0301 	and.w	r3, r3, #1
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10f      	bne.n	800c5a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c588:	69bb      	ldr	r3, [r7, #24]
 800c58a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d00a      	beq.n	800c5a8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	099b      	lsrs	r3, r3, #6
 800c596:	f003 0301 	and.w	r3, r3, #1
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d004      	beq.n	800c5a8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	4798      	blx	r3
    return;
 800c5a6:	e0d7      	b.n	800c758 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c5a8:	69bb      	ldr	r3, [r7, #24]
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	f003 0301 	and.w	r3, r3, #1
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d00a      	beq.n	800c5ca <HAL_SPI_IRQHandler+0x66>
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	09db      	lsrs	r3, r3, #7
 800c5b8:	f003 0301 	and.w	r3, r3, #1
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	4798      	blx	r3
    return;
 800c5c8:	e0c6      	b.n	800c758 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	095b      	lsrs	r3, r3, #5
 800c5ce:	f003 0301 	and.w	r3, r3, #1
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d10c      	bne.n	800c5f0 <HAL_SPI_IRQHandler+0x8c>
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	099b      	lsrs	r3, r3, #6
 800c5da:	f003 0301 	and.w	r3, r3, #1
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d106      	bne.n	800c5f0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c5e2:	69bb      	ldr	r3, [r7, #24]
 800c5e4:	0a1b      	lsrs	r3, r3, #8
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f000 80b4 	beq.w	800c758 <HAL_SPI_IRQHandler+0x1f4>
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	095b      	lsrs	r3, r3, #5
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	f000 80ad 	beq.w	800c758 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	099b      	lsrs	r3, r3, #6
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d023      	beq.n	800c652 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c610:	b2db      	uxtb	r3, r3
 800c612:	2b03      	cmp	r3, #3
 800c614:	d011      	beq.n	800c63a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	f043 0204 	orr.w	r2, r3, #4
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c622:	2300      	movs	r3, #0
 800c624:	617b      	str	r3, [r7, #20]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	617b      	str	r3, [r7, #20]
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	e00b      	b.n	800c652 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c63a:	2300      	movs	r3, #0
 800c63c:	613b      	str	r3, [r7, #16]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	613b      	str	r3, [r7, #16]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	689b      	ldr	r3, [r3, #8]
 800c64c:	613b      	str	r3, [r7, #16]
 800c64e:	693b      	ldr	r3, [r7, #16]
        return;
 800c650:	e082      	b.n	800c758 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c652:	69bb      	ldr	r3, [r7, #24]
 800c654:	095b      	lsrs	r3, r3, #5
 800c656:	f003 0301 	and.w	r3, r3, #1
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d014      	beq.n	800c688 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c662:	f043 0201 	orr.w	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c66a:	2300      	movs	r3, #0
 800c66c:	60fb      	str	r3, [r7, #12]
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	60fb      	str	r3, [r7, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c684:	601a      	str	r2, [r3, #0]
 800c686:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	0a1b      	lsrs	r3, r3, #8
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00c      	beq.n	800c6ae <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c698:	f043 0208 	orr.w	r2, r3, #8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	60bb      	str	r3, [r7, #8]
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	689b      	ldr	r3, [r3, #8]
 800c6aa:	60bb      	str	r3, [r7, #8]
 800c6ac:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d04f      	beq.n	800c756 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	685a      	ldr	r2, [r3, #4]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6c4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2201      	movs	r2, #1
 800c6ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c6ce:	69fb      	ldr	r3, [r7, #28]
 800c6d0:	f003 0302 	and.w	r3, r3, #2
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d104      	bne.n	800c6e2 <HAL_SPI_IRQHandler+0x17e>
 800c6d8:	69fb      	ldr	r3, [r7, #28]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d034      	beq.n	800c74c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f022 0203 	bic.w	r2, r2, #3
 800c6f0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d011      	beq.n	800c71e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6fe:	4a18      	ldr	r2, [pc, #96]	; (800c760 <HAL_SPI_IRQHandler+0x1fc>)
 800c700:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c706:	4618      	mov	r0, r3
 800c708:	f7fd fe56 	bl	800a3b8 <HAL_DMA_Abort_IT>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d005      	beq.n	800c71e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c722:	2b00      	cmp	r3, #0
 800c724:	d016      	beq.n	800c754 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c72a:	4a0d      	ldr	r2, [pc, #52]	; (800c760 <HAL_SPI_IRQHandler+0x1fc>)
 800c72c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c732:	4618      	mov	r0, r3
 800c734:	f7fd fe40 	bl	800a3b8 <HAL_DMA_Abort_IT>
 800c738:	4603      	mov	r3, r0
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00a      	beq.n	800c754 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c742:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c74a:	e003      	b.n	800c754 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f813 	bl	800c778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c752:	e000      	b.n	800c756 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c754:	bf00      	nop
    return;
 800c756:	bf00      	nop
  }
}
 800c758:	3720      	adds	r7, #32
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	0800c891 	.word	0x0800c891

0800c764 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800c76c:	bf00      	nop
 800c76e:	370c      	adds	r7, #12
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c778:	b480      	push	{r7}
 800c77a:	b083      	sub	sp, #12
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b086      	sub	sp, #24
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c798:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c79a:	f7fd fb85 	bl	8009ea8 <HAL_GetTick>
 800c79e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7ae:	d03b      	beq.n	800c828 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f022 0220 	bic.w	r2, r2, #32
 800c7be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f022 0202 	bic.w	r2, r2, #2
 800c7ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	2164      	movs	r1, #100	; 0x64
 800c7d4:	6978      	ldr	r0, [r7, #20]
 800c7d6:	f000 f8f7 	bl	800c9c8 <SPI_EndRxTxTransaction>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d005      	beq.n	800c7ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7e4:	f043 0220 	orr.w	r2, r3, #32
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	689b      	ldr	r3, [r3, #8]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10a      	bne.n	800c80a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	60fb      	str	r3, [r7, #12]
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68db      	ldr	r3, [r3, #12]
 800c7fe:	60fb      	str	r3, [r7, #12]
 800c800:	697b      	ldr	r3, [r7, #20]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	60fb      	str	r3, [r7, #12]
 800c808:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	2200      	movs	r2, #0
 800c80e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	2201      	movs	r2, #1
 800c814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d003      	beq.n	800c828 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c820:	6978      	ldr	r0, [r7, #20]
 800c822:	f7ff ffa9 	bl	800c778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c826:	e002      	b.n	800c82e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800c828:	6978      	ldr	r0, [r7, #20]
 800c82a:	f7f6 fbdf 	bl	8002fec <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c82e:	3718      	adds	r7, #24
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c840:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff ff8e 	bl	800c764 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c848:	bf00      	nop
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	685a      	ldr	r2, [r3, #4]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f022 0203 	bic.w	r2, r2, #3
 800c86c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c872:	f043 0210 	orr.w	r2, r3, #16
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f7ff ff78 	bl	800c778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c888:	bf00      	nop
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}

0800c890 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f7ff ff64 	bl	800c778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c8b0:	bf00      	nop
 800c8b2:	3710      	adds	r7, #16
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b088      	sub	sp, #32
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	60f8      	str	r0, [r7, #12]
 800c8c0:	60b9      	str	r1, [r7, #8]
 800c8c2:	603b      	str	r3, [r7, #0]
 800c8c4:	4613      	mov	r3, r2
 800c8c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800c8c8:	f7fd faee 	bl	8009ea8 <HAL_GetTick>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	1a9b      	subs	r3, r3, r2
 800c8d2:	683a      	ldr	r2, [r7, #0]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800c8d8:	f7fd fae6 	bl	8009ea8 <HAL_GetTick>
 800c8dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800c8de:	4b39      	ldr	r3, [pc, #228]	; (800c9c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	015b      	lsls	r3, r3, #5
 800c8e4:	0d1b      	lsrs	r3, r3, #20
 800c8e6:	69fa      	ldr	r2, [r7, #28]
 800c8e8:	fb02 f303 	mul.w	r3, r2, r3
 800c8ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c8ee:	e054      	b.n	800c99a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8f6:	d050      	beq.n	800c99a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800c8f8:	f7fd fad6 	bl	8009ea8 <HAL_GetTick>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	429a      	cmp	r2, r3
 800c906:	d902      	bls.n	800c90e <SPI_WaitFlagStateUntilTimeout+0x56>
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d13d      	bne.n	800c98a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	685a      	ldr	r2, [r3, #4]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c91c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c926:	d111      	bne.n	800c94c <SPI_WaitFlagStateUntilTimeout+0x94>
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c930:	d004      	beq.n	800c93c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c93a:	d107      	bne.n	800c94c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c94a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c954:	d10f      	bne.n	800c976 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	681a      	ldr	r2, [r3, #0]
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c964:	601a      	str	r2, [r3, #0]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c974:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c986:	2303      	movs	r3, #3
 800c988:	e017      	b.n	800c9ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d101      	bne.n	800c994 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800c990:	2300      	movs	r3, #0
 800c992:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	3b01      	subs	r3, #1
 800c998:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4013      	ands	r3, r2
 800c9a4:	68ba      	ldr	r2, [r7, #8]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	bf0c      	ite	eq
 800c9aa:	2301      	moveq	r3, #1
 800c9ac:	2300      	movne	r3, #0
 800c9ae:	b2db      	uxtb	r3, r3
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	429a      	cmp	r2, r3
 800c9b6:	d19b      	bne.n	800c8f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800c9b8:	2300      	movs	r3, #0
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3720      	adds	r7, #32
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	20000098 	.word	0x20000098

0800c9c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c9d4:	4b1b      	ldr	r3, [pc, #108]	; (800ca44 <SPI_EndRxTxTransaction+0x7c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a1b      	ldr	r2, [pc, #108]	; (800ca48 <SPI_EndRxTxTransaction+0x80>)
 800c9da:	fba2 2303 	umull	r2, r3, r2, r3
 800c9de:	0d5b      	lsrs	r3, r3, #21
 800c9e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c9e4:	fb02 f303 	mul.w	r3, r2, r3
 800c9e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9f2:	d112      	bne.n	800ca1a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	2180      	movs	r1, #128	; 0x80
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7ff ff5a 	bl	800c8b8 <SPI_WaitFlagStateUntilTimeout>
 800ca04:	4603      	mov	r3, r0
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d016      	beq.n	800ca38 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca0e:	f043 0220 	orr.w	r2, r3, #32
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ca16:	2303      	movs	r3, #3
 800ca18:	e00f      	b.n	800ca3a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ca1a:	697b      	ldr	r3, [r7, #20]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00a      	beq.n	800ca36 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ca20:	697b      	ldr	r3, [r7, #20]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689b      	ldr	r3, [r3, #8]
 800ca2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca30:	2b80      	cmp	r3, #128	; 0x80
 800ca32:	d0f2      	beq.n	800ca1a <SPI_EndRxTxTransaction+0x52>
 800ca34:	e000      	b.n	800ca38 <SPI_EndRxTxTransaction+0x70>
        break;
 800ca36:	bf00      	nop
  }

  return HAL_OK;
 800ca38:	2300      	movs	r3, #0
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3718      	adds	r7, #24
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}
 800ca42:	bf00      	nop
 800ca44:	20000098 	.word	0x20000098
 800ca48:	165e9f81 	.word	0x165e9f81

0800ca4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e041      	b.n	800cae2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f7f7 fed2 	bl	800481c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2202      	movs	r2, #2
 800ca7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4619      	mov	r1, r3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	f000 fa96 	bl	800cfbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2201      	movs	r2, #1
 800ca9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2201      	movs	r2, #1
 800cabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3708      	adds	r7, #8
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
	...

0800caec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d001      	beq.n	800cb04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	e04e      	b.n	800cba2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2202      	movs	r2, #2
 800cb08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	68da      	ldr	r2, [r3, #12]
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f042 0201 	orr.w	r2, r2, #1
 800cb1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4a23      	ldr	r2, [pc, #140]	; (800cbb0 <HAL_TIM_Base_Start_IT+0xc4>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d022      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb2e:	d01d      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4a1f      	ldr	r2, [pc, #124]	; (800cbb4 <HAL_TIM_Base_Start_IT+0xc8>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d018      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	4a1e      	ldr	r2, [pc, #120]	; (800cbb8 <HAL_TIM_Base_Start_IT+0xcc>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d013      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a1c      	ldr	r2, [pc, #112]	; (800cbbc <HAL_TIM_Base_Start_IT+0xd0>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d00e      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4a1b      	ldr	r2, [pc, #108]	; (800cbc0 <HAL_TIM_Base_Start_IT+0xd4>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d009      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a19      	ldr	r2, [pc, #100]	; (800cbc4 <HAL_TIM_Base_Start_IT+0xd8>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d004      	beq.n	800cb6c <HAL_TIM_Base_Start_IT+0x80>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	4a18      	ldr	r2, [pc, #96]	; (800cbc8 <HAL_TIM_Base_Start_IT+0xdc>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d111      	bne.n	800cb90 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	f003 0307 	and.w	r3, r3, #7
 800cb76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b06      	cmp	r3, #6
 800cb7c:	d010      	beq.n	800cba0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	681a      	ldr	r2, [r3, #0]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f042 0201 	orr.w	r2, r2, #1
 800cb8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb8e:	e007      	b.n	800cba0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f042 0201 	orr.w	r2, r2, #1
 800cb9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cba0:	2300      	movs	r3, #0
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	40010000 	.word	0x40010000
 800cbb4:	40000400 	.word	0x40000400
 800cbb8:	40000800 	.word	0x40000800
 800cbbc:	40000c00 	.word	0x40000c00
 800cbc0:	40010400 	.word	0x40010400
 800cbc4:	40014000 	.word	0x40014000
 800cbc8:	40001800 	.word	0x40001800

0800cbcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b082      	sub	sp, #8
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	691b      	ldr	r3, [r3, #16]
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d122      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d11b      	bne.n	800cc28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f06f 0202 	mvn.w	r2, #2
 800cbf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	699b      	ldr	r3, [r3, #24]
 800cc06:	f003 0303 	and.w	r3, r3, #3
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d003      	beq.n	800cc16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 f9b5 	bl	800cf7e <HAL_TIM_IC_CaptureCallback>
 800cc14:	e005      	b.n	800cc22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 f9a7 	bl	800cf6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f000 f9b8 	bl	800cf92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	691b      	ldr	r3, [r3, #16]
 800cc2e:	f003 0304 	and.w	r3, r3, #4
 800cc32:	2b04      	cmp	r3, #4
 800cc34:	d122      	bne.n	800cc7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b04      	cmp	r3, #4
 800cc42:	d11b      	bne.n	800cc7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f06f 0204 	mvn.w	r2, #4
 800cc4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2202      	movs	r2, #2
 800cc52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	699b      	ldr	r3, [r3, #24]
 800cc5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f98b 	bl	800cf7e <HAL_TIM_IC_CaptureCallback>
 800cc68:	e005      	b.n	800cc76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 f97d 	bl	800cf6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f000 f98e 	bl	800cf92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	f003 0308 	and.w	r3, r3, #8
 800cc86:	2b08      	cmp	r3, #8
 800cc88:	d122      	bne.n	800ccd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0308 	and.w	r3, r3, #8
 800cc94:	2b08      	cmp	r3, #8
 800cc96:	d11b      	bne.n	800ccd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f06f 0208 	mvn.w	r2, #8
 800cca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2204      	movs	r2, #4
 800cca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	f003 0303 	and.w	r3, r3, #3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 f961 	bl	800cf7e <HAL_TIM_IC_CaptureCallback>
 800ccbc:	e005      	b.n	800ccca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f953 	bl	800cf6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 f964 	bl	800cf92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	f003 0310 	and.w	r3, r3, #16
 800ccda:	2b10      	cmp	r3, #16
 800ccdc:	d122      	bne.n	800cd24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f003 0310 	and.w	r3, r3, #16
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d11b      	bne.n	800cd24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f06f 0210 	mvn.w	r2, #16
 800ccf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2208      	movs	r2, #8
 800ccfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 f937 	bl	800cf7e <HAL_TIM_IC_CaptureCallback>
 800cd10:	e005      	b.n	800cd1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f929 	bl	800cf6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 f93a 	bl	800cf92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	f003 0301 	and.w	r3, r3, #1
 800cd2e:	2b01      	cmp	r3, #1
 800cd30:	d10e      	bne.n	800cd50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0301 	and.w	r3, r3, #1
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d107      	bne.n	800cd50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f06f 0201 	mvn.w	r2, #1
 800cd48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f7f7 f84e 	bl	8003dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd5a:	2b80      	cmp	r3, #128	; 0x80
 800cd5c:	d10e      	bne.n	800cd7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd68:	2b80      	cmp	r3, #128	; 0x80
 800cd6a:	d107      	bne.n	800cd7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cd74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 fae0 	bl	800d33c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd86:	2b40      	cmp	r3, #64	; 0x40
 800cd88:	d10e      	bne.n	800cda8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd94:	2b40      	cmp	r3, #64	; 0x40
 800cd96:	d107      	bne.n	800cda8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cda0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f000 f8ff 	bl	800cfa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	691b      	ldr	r3, [r3, #16]
 800cdae:	f003 0320 	and.w	r3, r3, #32
 800cdb2:	2b20      	cmp	r3, #32
 800cdb4:	d10e      	bne.n	800cdd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b20      	cmp	r3, #32
 800cdc2:	d107      	bne.n	800cdd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f06f 0220 	mvn.w	r2, #32
 800cdcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f000 faaa 	bl	800d328 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cdd4:	bf00      	nop
 800cdd6:	3708      	adds	r7, #8
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cdf0:	2b01      	cmp	r3, #1
 800cdf2:	d101      	bne.n	800cdf8 <HAL_TIM_ConfigClockSource+0x1c>
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	e0b4      	b.n	800cf62 <HAL_TIM_ConfigClockSource+0x186>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2202      	movs	r2, #2
 800ce04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ce16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce18:	68bb      	ldr	r3, [r7, #8]
 800ce1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ce1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	68ba      	ldr	r2, [r7, #8]
 800ce26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce30:	d03e      	beq.n	800ceb0 <HAL_TIM_ConfigClockSource+0xd4>
 800ce32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce36:	f200 8087 	bhi.w	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3e:	f000 8086 	beq.w	800cf4e <HAL_TIM_ConfigClockSource+0x172>
 800ce42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce46:	d87f      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce48:	2b70      	cmp	r3, #112	; 0x70
 800ce4a:	d01a      	beq.n	800ce82 <HAL_TIM_ConfigClockSource+0xa6>
 800ce4c:	2b70      	cmp	r3, #112	; 0x70
 800ce4e:	d87b      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce50:	2b60      	cmp	r3, #96	; 0x60
 800ce52:	d050      	beq.n	800cef6 <HAL_TIM_ConfigClockSource+0x11a>
 800ce54:	2b60      	cmp	r3, #96	; 0x60
 800ce56:	d877      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce58:	2b50      	cmp	r3, #80	; 0x50
 800ce5a:	d03c      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0xfa>
 800ce5c:	2b50      	cmp	r3, #80	; 0x50
 800ce5e:	d873      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce60:	2b40      	cmp	r3, #64	; 0x40
 800ce62:	d058      	beq.n	800cf16 <HAL_TIM_ConfigClockSource+0x13a>
 800ce64:	2b40      	cmp	r3, #64	; 0x40
 800ce66:	d86f      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce68:	2b30      	cmp	r3, #48	; 0x30
 800ce6a:	d064      	beq.n	800cf36 <HAL_TIM_ConfigClockSource+0x15a>
 800ce6c:	2b30      	cmp	r3, #48	; 0x30
 800ce6e:	d86b      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce70:	2b20      	cmp	r3, #32
 800ce72:	d060      	beq.n	800cf36 <HAL_TIM_ConfigClockSource+0x15a>
 800ce74:	2b20      	cmp	r3, #32
 800ce76:	d867      	bhi.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d05c      	beq.n	800cf36 <HAL_TIM_ConfigClockSource+0x15a>
 800ce7c:	2b10      	cmp	r3, #16
 800ce7e:	d05a      	beq.n	800cf36 <HAL_TIM_ConfigClockSource+0x15a>
 800ce80:	e062      	b.n	800cf48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6818      	ldr	r0, [r3, #0]
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	6899      	ldr	r1, [r3, #8]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	f000 f9ad 	bl	800d1f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cea4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	609a      	str	r2, [r3, #8]
      break;
 800ceae:	e04f      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	6899      	ldr	r1, [r3, #8]
 800ceb8:	683b      	ldr	r3, [r7, #0]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	68db      	ldr	r3, [r3, #12]
 800cec0:	f000 f996 	bl	800d1f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	689a      	ldr	r2, [r3, #8]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ced2:	609a      	str	r2, [r3, #8]
      break;
 800ced4:	e03c      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6818      	ldr	r0, [r3, #0]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	6859      	ldr	r1, [r3, #4]
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	461a      	mov	r2, r3
 800cee4:	f000 f90a 	bl	800d0fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2150      	movs	r1, #80	; 0x50
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 f963 	bl	800d1ba <TIM_ITRx_SetConfig>
      break;
 800cef4:	e02c      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6818      	ldr	r0, [r3, #0]
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	6859      	ldr	r1, [r3, #4]
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	68db      	ldr	r3, [r3, #12]
 800cf02:	461a      	mov	r2, r3
 800cf04:	f000 f929 	bl	800d15a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2160      	movs	r1, #96	; 0x60
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f000 f953 	bl	800d1ba <TIM_ITRx_SetConfig>
      break;
 800cf14:	e01c      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6818      	ldr	r0, [r3, #0]
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	6859      	ldr	r1, [r3, #4]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	68db      	ldr	r3, [r3, #12]
 800cf22:	461a      	mov	r2, r3
 800cf24:	f000 f8ea 	bl	800d0fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	2140      	movs	r1, #64	; 0x40
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f943 	bl	800d1ba <TIM_ITRx_SetConfig>
      break;
 800cf34:	e00c      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	4619      	mov	r1, r3
 800cf40:	4610      	mov	r0, r2
 800cf42:	f000 f93a 	bl	800d1ba <TIM_ITRx_SetConfig>
      break;
 800cf46:	e003      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf4c:	e000      	b.n	800cf50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cf4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2201      	movs	r2, #1
 800cf54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cf60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3710      	adds	r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf6a:	b480      	push	{r7}
 800cf6c:	b083      	sub	sp, #12
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf72:	bf00      	nop
 800cf74:	370c      	adds	r7, #12
 800cf76:	46bd      	mov	sp, r7
 800cf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7c:	4770      	bx	lr

0800cf7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf7e:	b480      	push	{r7}
 800cf80:	b083      	sub	sp, #12
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf86:	bf00      	nop
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa4:	4770      	bx	lr

0800cfa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cfa6:	b480      	push	{r7}
 800cfa8:	b083      	sub	sp, #12
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cfae:	bf00      	nop
 800cfb0:	370c      	adds	r7, #12
 800cfb2:	46bd      	mov	sp, r7
 800cfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb8:	4770      	bx	lr
	...

0800cfbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	b085      	sub	sp, #20
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
 800cfc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	4a40      	ldr	r2, [pc, #256]	; (800d0d0 <TIM_Base_SetConfig+0x114>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d013      	beq.n	800cffc <TIM_Base_SetConfig+0x40>
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfda:	d00f      	beq.n	800cffc <TIM_Base_SetConfig+0x40>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	4a3d      	ldr	r2, [pc, #244]	; (800d0d4 <TIM_Base_SetConfig+0x118>)
 800cfe0:	4293      	cmp	r3, r2
 800cfe2:	d00b      	beq.n	800cffc <TIM_Base_SetConfig+0x40>
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a3c      	ldr	r2, [pc, #240]	; (800d0d8 <TIM_Base_SetConfig+0x11c>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d007      	beq.n	800cffc <TIM_Base_SetConfig+0x40>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	4a3b      	ldr	r2, [pc, #236]	; (800d0dc <TIM_Base_SetConfig+0x120>)
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d003      	beq.n	800cffc <TIM_Base_SetConfig+0x40>
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4a3a      	ldr	r2, [pc, #232]	; (800d0e0 <TIM_Base_SetConfig+0x124>)
 800cff8:	4293      	cmp	r3, r2
 800cffa:	d108      	bne.n	800d00e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	4313      	orrs	r3, r2
 800d00c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a2f      	ldr	r2, [pc, #188]	; (800d0d0 <TIM_Base_SetConfig+0x114>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d02b      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d01c:	d027      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a2c      	ldr	r2, [pc, #176]	; (800d0d4 <TIM_Base_SetConfig+0x118>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d023      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a2b      	ldr	r2, [pc, #172]	; (800d0d8 <TIM_Base_SetConfig+0x11c>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d01f      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a2a      	ldr	r2, [pc, #168]	; (800d0dc <TIM_Base_SetConfig+0x120>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d01b      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4a29      	ldr	r2, [pc, #164]	; (800d0e0 <TIM_Base_SetConfig+0x124>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d017      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a28      	ldr	r2, [pc, #160]	; (800d0e4 <TIM_Base_SetConfig+0x128>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d013      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a27      	ldr	r2, [pc, #156]	; (800d0e8 <TIM_Base_SetConfig+0x12c>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d00f      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a26      	ldr	r2, [pc, #152]	; (800d0ec <TIM_Base_SetConfig+0x130>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d00b      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	4a25      	ldr	r2, [pc, #148]	; (800d0f0 <TIM_Base_SetConfig+0x134>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d007      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	4a24      	ldr	r2, [pc, #144]	; (800d0f4 <TIM_Base_SetConfig+0x138>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d003      	beq.n	800d06e <TIM_Base_SetConfig+0xb2>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	4a23      	ldr	r2, [pc, #140]	; (800d0f8 <TIM_Base_SetConfig+0x13c>)
 800d06a:	4293      	cmp	r3, r2
 800d06c:	d108      	bne.n	800d080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	68db      	ldr	r3, [r3, #12]
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	4313      	orrs	r3, r2
 800d08c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68fa      	ldr	r2, [r7, #12]
 800d092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <TIM_Base_SetConfig+0x114>)
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d003      	beq.n	800d0b4 <TIM_Base_SetConfig+0xf8>
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	4a0c      	ldr	r2, [pc, #48]	; (800d0e0 <TIM_Base_SetConfig+0x124>)
 800d0b0:	4293      	cmp	r3, r2
 800d0b2:	d103      	bne.n	800d0bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	691a      	ldr	r2, [r3, #16]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	615a      	str	r2, [r3, #20]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	40010000 	.word	0x40010000
 800d0d4:	40000400 	.word	0x40000400
 800d0d8:	40000800 	.word	0x40000800
 800d0dc:	40000c00 	.word	0x40000c00
 800d0e0:	40010400 	.word	0x40010400
 800d0e4:	40014000 	.word	0x40014000
 800d0e8:	40014400 	.word	0x40014400
 800d0ec:	40014800 	.word	0x40014800
 800d0f0:	40001800 	.word	0x40001800
 800d0f4:	40001c00 	.word	0x40001c00
 800d0f8:	40002000 	.word	0x40002000

0800d0fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b087      	sub	sp, #28
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6a1b      	ldr	r3, [r3, #32]
 800d10c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	6a1b      	ldr	r3, [r3, #32]
 800d112:	f023 0201 	bic.w	r2, r3, #1
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	699b      	ldr	r3, [r3, #24]
 800d11e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	693a      	ldr	r2, [r7, #16]
 800d12e:	4313      	orrs	r3, r2
 800d130:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	f023 030a 	bic.w	r3, r3, #10
 800d138:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	4313      	orrs	r3, r2
 800d140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	693a      	ldr	r2, [r7, #16]
 800d146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	697a      	ldr	r2, [r7, #20]
 800d14c:	621a      	str	r2, [r3, #32]
}
 800d14e:	bf00      	nop
 800d150:	371c      	adds	r7, #28
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b087      	sub	sp, #28
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6a1b      	ldr	r3, [r3, #32]
 800d16a:	f023 0210 	bic.w	r2, r3, #16
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	6a1b      	ldr	r3, [r3, #32]
 800d17c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	031b      	lsls	r3, r3, #12
 800d18a:	697a      	ldr	r2, [r7, #20]
 800d18c:	4313      	orrs	r3, r2
 800d18e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	011b      	lsls	r3, r3, #4
 800d19c:	693a      	ldr	r2, [r7, #16]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	693a      	ldr	r2, [r7, #16]
 800d1ac:	621a      	str	r2, [r3, #32]
}
 800d1ae:	bf00      	nop
 800d1b0:	371c      	adds	r7, #28
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b085      	sub	sp, #20
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d1d2:	683a      	ldr	r2, [r7, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	4313      	orrs	r3, r2
 800d1d8:	f043 0307 	orr.w	r3, r3, #7
 800d1dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	609a      	str	r2, [r3, #8]
}
 800d1e4:	bf00      	nop
 800d1e6:	3714      	adds	r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d20a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	021a      	lsls	r2, r3, #8
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	431a      	orrs	r2, r3
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	4313      	orrs	r3, r2
 800d218:	697a      	ldr	r2, [r7, #20]
 800d21a:	4313      	orrs	r3, r2
 800d21c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	609a      	str	r2, [r3, #8]
}
 800d224:	bf00      	nop
 800d226:	371c      	adds	r7, #28
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d240:	2b01      	cmp	r3, #1
 800d242:	d101      	bne.n	800d248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d244:	2302      	movs	r3, #2
 800d246:	e05a      	b.n	800d2fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2202      	movs	r2, #2
 800d254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	689b      	ldr	r3, [r3, #8]
 800d266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d26e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	68fa      	ldr	r2, [r7, #12]
 800d276:	4313      	orrs	r3, r2
 800d278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	68fa      	ldr	r2, [r7, #12]
 800d280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4a21      	ldr	r2, [pc, #132]	; (800d30c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d022      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d294:	d01d      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4a1d      	ldr	r2, [pc, #116]	; (800d310 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d29c:	4293      	cmp	r3, r2
 800d29e:	d018      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4a1b      	ldr	r2, [pc, #108]	; (800d314 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d013      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a1a      	ldr	r2, [pc, #104]	; (800d318 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d00e      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a18      	ldr	r2, [pc, #96]	; (800d31c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d009      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a17      	ldr	r2, [pc, #92]	; (800d320 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d004      	beq.n	800d2d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4a15      	ldr	r2, [pc, #84]	; (800d324 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d10c      	bne.n	800d2ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d2d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	68ba      	ldr	r2, [r7, #8]
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	40010000 	.word	0x40010000
 800d310:	40000400 	.word	0x40000400
 800d314:	40000800 	.word	0x40000800
 800d318:	40000c00 	.word	0x40000c00
 800d31c:	40010400 	.word	0x40010400
 800d320:	40014000 	.word	0x40014000
 800d324:	40001800 	.word	0x40001800

0800d328 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d330:	bf00      	nop
 800d332:	370c      	adds	r7, #12
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d344:	bf00      	nop
 800d346:	370c      	adds	r7, #12
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr

0800d350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e03f      	b.n	800d3e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d106      	bne.n	800d37c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d376:	6878      	ldr	r0, [r7, #4]
 800d378:	f7f7 fa76 	bl	8004868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2224      	movs	r2, #36	; 0x24
 800d380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	68da      	ldr	r2, [r3, #12]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 fe2b 	bl	800dff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	691a      	ldr	r2, [r3, #16]
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	695a      	ldr	r2, [r3, #20]
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	68da      	ldr	r2, [r3, #12]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2200      	movs	r2, #0
 800d3ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2220      	movs	r2, #32
 800d3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2220      	movs	r2, #32
 800d3dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3708      	adds	r7, #8
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	60b9      	str	r1, [r7, #8]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d3fe:	b2db      	uxtb	r3, r3
 800d400:	2b20      	cmp	r3, #32
 800d402:	d11d      	bne.n	800d440 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d002      	beq.n	800d410 <HAL_UART_Receive_IT+0x26>
 800d40a:	88fb      	ldrh	r3, [r7, #6]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d101      	bne.n	800d414 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d410:	2301      	movs	r3, #1
 800d412:	e016      	b.n	800d442 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d101      	bne.n	800d422 <HAL_UART_Receive_IT+0x38>
 800d41e:	2302      	movs	r3, #2
 800d420:	e00f      	b.n	800d442 <HAL_UART_Receive_IT+0x58>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d430:	88fb      	ldrh	r3, [r7, #6]
 800d432:	461a      	mov	r2, r3
 800d434:	68b9      	ldr	r1, [r7, #8]
 800d436:	68f8      	ldr	r0, [r7, #12]
 800d438:	f000 fbd9 	bl	800dbee <UART_Start_Receive_IT>
 800d43c:	4603      	mov	r3, r0
 800d43e:	e000      	b.n	800d442 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d440:	2302      	movs	r3, #2
  }
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
	...

0800d44c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08c      	sub	sp, #48	; 0x30
 800d450:	af00      	add	r7, sp, #0
 800d452:	60f8      	str	r0, [r7, #12]
 800d454:	60b9      	str	r1, [r7, #8]
 800d456:	4613      	mov	r3, r2
 800d458:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b20      	cmp	r3, #32
 800d464:	d165      	bne.n	800d532 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d002      	beq.n	800d472 <HAL_UART_Transmit_DMA+0x26>
 800d46c:	88fb      	ldrh	r3, [r7, #6]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d472:	2301      	movs	r3, #1
 800d474:	e05e      	b.n	800d534 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d101      	bne.n	800d484 <HAL_UART_Transmit_DMA+0x38>
 800d480:	2302      	movs	r3, #2
 800d482:	e057      	b.n	800d534 <HAL_UART_Transmit_DMA+0xe8>
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2201      	movs	r2, #1
 800d488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	88fa      	ldrh	r2, [r7, #6]
 800d496:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	88fa      	ldrh	r2, [r7, #6]
 800d49c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2221      	movs	r2, #33	; 0x21
 800d4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b0:	4a22      	ldr	r2, [pc, #136]	; (800d53c <HAL_UART_Transmit_DMA+0xf0>)
 800d4b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b8:	4a21      	ldr	r2, [pc, #132]	; (800d540 <HAL_UART_Transmit_DMA+0xf4>)
 800d4ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c0:	4a20      	ldr	r2, [pc, #128]	; (800d544 <HAL_UART_Transmit_DMA+0xf8>)
 800d4c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800d4cc:	f107 0308 	add.w	r3, r7, #8
 800d4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d8:	6819      	ldr	r1, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	88fb      	ldrh	r3, [r7, #6]
 800d4e4:	f7fc fea0 	bl	800a228 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d4f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	3314      	adds	r3, #20
 800d500:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	e853 3f00 	ldrex	r3, [r3]
 800d508:	617b      	str	r3, [r7, #20]
   return(result);
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d510:	62bb      	str	r3, [r7, #40]	; 0x28
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	3314      	adds	r3, #20
 800d518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d51a:	627a      	str	r2, [r7, #36]	; 0x24
 800d51c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51e:	6a39      	ldr	r1, [r7, #32]
 800d520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d522:	e841 2300 	strex	r3, r2, [r1]
 800d526:	61fb      	str	r3, [r7, #28]
   return(result);
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1e5      	bne.n	800d4fa <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	e000      	b.n	800d534 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800d532:	2302      	movs	r3, #2
  }
}
 800d534:	4618      	mov	r0, r3
 800d536:	3730      	adds	r7, #48	; 0x30
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	0800daa5 	.word	0x0800daa5
 800d540:	0800db3f 	.word	0x0800db3f
 800d544:	0800db5b 	.word	0x0800db5b

0800d548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b0ba      	sub	sp, #232	; 0xe8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68db      	ldr	r3, [r3, #12]
 800d560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d56e:	2300      	movs	r3, #0
 800d570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d574:	2300      	movs	r3, #0
 800d576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d57e:	f003 030f 	and.w	r3, r3, #15
 800d582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10f      	bne.n	800d5ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b00      	cmp	r3, #0
 800d598:	d009      	beq.n	800d5ae <HAL_UART_IRQHandler+0x66>
 800d59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 fc66 	bl	800de78 <UART_Receive_IT>
      return;
 800d5ac:	e256      	b.n	800da5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	f000 80de 	beq.w	800d774 <HAL_UART_IRQHandler+0x22c>
 800d5b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5bc:	f003 0301 	and.w	r3, r3, #1
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	f000 80d1 	beq.w	800d774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <HAL_UART_IRQHandler+0xae>
 800d5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ee:	f043 0201 	orr.w	r2, r3, #1
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5fa:	f003 0304 	and.w	r3, r3, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00b      	beq.n	800d61a <HAL_UART_IRQHandler+0xd2>
 800d602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d612:	f043 0202 	orr.w	r2, r3, #2
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d61e:	f003 0302 	and.w	r3, r3, #2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00b      	beq.n	800d63e <HAL_UART_IRQHandler+0xf6>
 800d626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d62a:	f003 0301 	and.w	r3, r3, #1
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d005      	beq.n	800d63e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d636:	f043 0204 	orr.w	r2, r3, #4
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d642:	f003 0308 	and.w	r3, r3, #8
 800d646:	2b00      	cmp	r3, #0
 800d648:	d011      	beq.n	800d66e <HAL_UART_IRQHandler+0x126>
 800d64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d64e:	f003 0320 	and.w	r3, r3, #32
 800d652:	2b00      	cmp	r3, #0
 800d654:	d105      	bne.n	800d662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d65a:	f003 0301 	and.w	r3, r3, #1
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d005      	beq.n	800d66e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d666:	f043 0208 	orr.w	r2, r3, #8
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d672:	2b00      	cmp	r3, #0
 800d674:	f000 81ed 	beq.w	800da52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d67c:	f003 0320 	and.w	r3, r3, #32
 800d680:	2b00      	cmp	r3, #0
 800d682:	d008      	beq.n	800d696 <HAL_UART_IRQHandler+0x14e>
 800d684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d688:	f003 0320 	and.w	r3, r3, #32
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fbf1 	bl	800de78 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a0:	2b40      	cmp	r3, #64	; 0x40
 800d6a2:	bf0c      	ite	eq
 800d6a4:	2301      	moveq	r3, #1
 800d6a6:	2300      	movne	r3, #0
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b2:	f003 0308 	and.w	r3, r3, #8
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d103      	bne.n	800d6c2 <HAL_UART_IRQHandler+0x17a>
 800d6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d04f      	beq.n	800d762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 faf9 	bl	800dcba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6d2:	2b40      	cmp	r3, #64	; 0x40
 800d6d4:	d141      	bne.n	800d75a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	3314      	adds	r3, #20
 800d6dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d6e4:	e853 3f00 	ldrex	r3, [r3]
 800d6e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d6ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	3314      	adds	r3, #20
 800d6fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d702:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d706:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d70e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d712:	e841 2300 	strex	r3, r2, [r1]
 800d716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1d9      	bne.n	800d6d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	2b00      	cmp	r3, #0
 800d728:	d013      	beq.n	800d752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72e:	4a7d      	ldr	r2, [pc, #500]	; (800d924 <HAL_UART_IRQHandler+0x3dc>)
 800d730:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d736:	4618      	mov	r0, r3
 800d738:	f7fc fe3e 	bl	800a3b8 <HAL_DMA_Abort_IT>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d016      	beq.n	800d770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d748:	687a      	ldr	r2, [r7, #4]
 800d74a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d750:	e00e      	b.n	800d770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f000 f990 	bl	800da78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d758:	e00a      	b.n	800d770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 f98c 	bl	800da78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d760:	e006      	b.n	800d770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 f988 	bl	800da78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d76e:	e170      	b.n	800da52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d770:	bf00      	nop
    return;
 800d772:	e16e      	b.n	800da52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d778:	2b01      	cmp	r3, #1
 800d77a:	f040 814a 	bne.w	800da12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d782:	f003 0310 	and.w	r3, r3, #16
 800d786:	2b00      	cmp	r3, #0
 800d788:	f000 8143 	beq.w	800da12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d790:	f003 0310 	and.w	r3, r3, #16
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 813c 	beq.w	800da12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d79a:	2300      	movs	r3, #0
 800d79c:	60bb      	str	r3, [r7, #8]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	60bb      	str	r3, [r7, #8]
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	60bb      	str	r3, [r7, #8]
 800d7ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7ba:	2b40      	cmp	r3, #64	; 0x40
 800d7bc:	f040 80b4 	bne.w	800d928 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	685b      	ldr	r3, [r3, #4]
 800d7c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d7cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	f000 8140 	beq.w	800da56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d7da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	f080 8139 	bcs.w	800da56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d7ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7f6:	f000 8088 	beq.w	800d90a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	330c      	adds	r3, #12
 800d800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d804:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d808:	e853 3f00 	ldrex	r3, [r3]
 800d80c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	330c      	adds	r3, #12
 800d822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d826:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d82a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d832:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d836:	e841 2300 	strex	r3, r2, [r1]
 800d83a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d842:	2b00      	cmp	r3, #0
 800d844:	d1d9      	bne.n	800d7fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3314      	adds	r3, #20
 800d84c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d850:	e853 3f00 	ldrex	r3, [r3]
 800d854:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d858:	f023 0301 	bic.w	r3, r3, #1
 800d85c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	3314      	adds	r3, #20
 800d866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d86a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d86e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d870:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d872:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d876:	e841 2300 	strex	r3, r2, [r1]
 800d87a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e1      	bne.n	800d846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	3314      	adds	r3, #20
 800d888:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d88c:	e853 3f00 	ldrex	r3, [r3]
 800d890:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3314      	adds	r3, #20
 800d8a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d8a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d8a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d8ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d8b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e3      	bne.n	800d882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2220      	movs	r2, #32
 800d8be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	330c      	adds	r3, #12
 800d8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8d2:	e853 3f00 	ldrex	r3, [r3]
 800d8d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d8d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8da:	f023 0310 	bic.w	r3, r3, #16
 800d8de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	330c      	adds	r3, #12
 800d8e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d8ec:	65ba      	str	r2, [r7, #88]	; 0x58
 800d8ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d8f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8f4:	e841 2300 	strex	r3, r2, [r1]
 800d8f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d1e3      	bne.n	800d8c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	4618      	mov	r0, r3
 800d906:	f7fc fce7 	bl	800a2d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d912:	b29b      	uxth	r3, r3
 800d914:	1ad3      	subs	r3, r2, r3
 800d916:	b29b      	uxth	r3, r3
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 f8b6 	bl	800da8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d920:	e099      	b.n	800da56 <HAL_UART_IRQHandler+0x50e>
 800d922:	bf00      	nop
 800d924:	0800dd81 	.word	0x0800dd81
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d930:	b29b      	uxth	r3, r3
 800d932:	1ad3      	subs	r3, r2, r3
 800d934:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	2b00      	cmp	r3, #0
 800d940:	f000 808b 	beq.w	800da5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d944:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 8086 	beq.w	800da5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	330c      	adds	r3, #12
 800d954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d958:	e853 3f00 	ldrex	r3, [r3]
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d964:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	330c      	adds	r3, #12
 800d96e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d972:	647a      	str	r2, [r7, #68]	; 0x44
 800d974:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d976:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d978:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d97a:	e841 2300 	strex	r3, r2, [r1]
 800d97e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e3      	bne.n	800d94e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	3314      	adds	r3, #20
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d990:	e853 3f00 	ldrex	r3, [r3]
 800d994:	623b      	str	r3, [r7, #32]
   return(result);
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	f023 0301 	bic.w	r3, r3, #1
 800d99c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3314      	adds	r3, #20
 800d9a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d9aa:	633a      	str	r2, [r7, #48]	; 0x30
 800d9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b2:	e841 2300 	strex	r3, r2, [r1]
 800d9b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d1e3      	bne.n	800d986 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2220      	movs	r2, #32
 800d9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	330c      	adds	r3, #12
 800d9d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	e853 3f00 	ldrex	r3, [r3]
 800d9da:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	f023 0310 	bic.w	r3, r3, #16
 800d9e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	330c      	adds	r3, #12
 800d9ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d9f0:	61fa      	str	r2, [r7, #28]
 800d9f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f4:	69b9      	ldr	r1, [r7, #24]
 800d9f6:	69fa      	ldr	r2, [r7, #28]
 800d9f8:	e841 2300 	strex	r3, r2, [r1]
 800d9fc:	617b      	str	r3, [r7, #20]
   return(result);
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d1e3      	bne.n	800d9cc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da08:	4619      	mov	r1, r3
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f83e 	bl	800da8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da10:	e023      	b.n	800da5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800da12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d009      	beq.n	800da32 <HAL_UART_IRQHandler+0x4ea>
 800da1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f9bc 	bl	800dda8 <UART_Transmit_IT>
    return;
 800da30:	e014      	b.n	800da5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800da32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00e      	beq.n	800da5c <HAL_UART_IRQHandler+0x514>
 800da3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800da42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da46:	2b00      	cmp	r3, #0
 800da48:	d008      	beq.n	800da5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f9fc 	bl	800de48 <UART_EndTransmit_IT>
    return;
 800da50:	e004      	b.n	800da5c <HAL_UART_IRQHandler+0x514>
    return;
 800da52:	bf00      	nop
 800da54:	e002      	b.n	800da5c <HAL_UART_IRQHandler+0x514>
      return;
 800da56:	bf00      	nop
 800da58:	e000      	b.n	800da5c <HAL_UART_IRQHandler+0x514>
      return;
 800da5a:	bf00      	nop
  }
}
 800da5c:	37e8      	adds	r7, #232	; 0xe8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop

0800da64 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800da6c:	bf00      	nop
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800da80:	bf00      	nop
 800da82:	370c      	adds	r7, #12
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da8c:	b480      	push	{r7}
 800da8e:	b083      	sub	sp, #12
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	460b      	mov	r3, r1
 800da96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b090      	sub	sp, #64	; 0x40
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d137      	bne.n	800db30 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800dac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac2:	2200      	movs	r2, #0
 800dac4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3314      	adds	r3, #20
 800dacc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad0:	e853 3f00 	ldrex	r3, [r3]
 800dad4:	623b      	str	r3, [r7, #32]
   return(result);
 800dad6:	6a3b      	ldr	r3, [r7, #32]
 800dad8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dadc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3314      	adds	r3, #20
 800dae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dae6:	633a      	str	r2, [r7, #48]	; 0x30
 800dae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800daec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800daf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e5      	bne.n	800dac6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	330c      	adds	r3, #12
 800db00:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	e853 3f00 	ldrex	r3, [r3]
 800db08:	60fb      	str	r3, [r7, #12]
   return(result);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db10:	637b      	str	r3, [r7, #52]	; 0x34
 800db12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	330c      	adds	r3, #12
 800db18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db1a:	61fa      	str	r2, [r7, #28]
 800db1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1e:	69b9      	ldr	r1, [r7, #24]
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	e841 2300 	strex	r3, r2, [r1]
 800db26:	617b      	str	r3, [r7, #20]
   return(result);
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e5      	bne.n	800dafa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db2e:	e002      	b.n	800db36 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800db30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800db32:	f7f5 fa45 	bl	8002fc0 <HAL_UART_TxCpltCallback>
}
 800db36:	bf00      	nop
 800db38:	3740      	adds	r7, #64	; 0x40
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b084      	sub	sp, #16
 800db42:	af00      	add	r7, sp, #0
 800db44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db4a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f7ff ff89 	bl	800da64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db52:	bf00      	nop
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b084      	sub	sp, #16
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800db62:	2300      	movs	r3, #0
 800db64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	695b      	ldr	r3, [r3, #20]
 800db72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db76:	2b80      	cmp	r3, #128	; 0x80
 800db78:	bf0c      	ite	eq
 800db7a:	2301      	moveq	r3, #1
 800db7c:	2300      	movne	r3, #0
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800db82:	68bb      	ldr	r3, [r7, #8]
 800db84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db88:	b2db      	uxtb	r3, r3
 800db8a:	2b21      	cmp	r3, #33	; 0x21
 800db8c:	d108      	bne.n	800dba0 <UART_DMAError+0x46>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d005      	beq.n	800dba0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2200      	movs	r2, #0
 800db98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800db9a:	68b8      	ldr	r0, [r7, #8]
 800db9c:	f000 f865 	bl	800dc6a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	695b      	ldr	r3, [r3, #20]
 800dba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbaa:	2b40      	cmp	r3, #64	; 0x40
 800dbac:	bf0c      	ite	eq
 800dbae:	2301      	moveq	r3, #1
 800dbb0:	2300      	movne	r3, #0
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b22      	cmp	r3, #34	; 0x22
 800dbc0:	d108      	bne.n	800dbd4 <UART_DMAError+0x7a>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d005      	beq.n	800dbd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dbce:	68b8      	ldr	r0, [r7, #8]
 800dbd0:	f000 f873 	bl	800dcba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd8:	f043 0210 	orr.w	r2, r3, #16
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbe0:	68b8      	ldr	r0, [r7, #8]
 800dbe2:	f7ff ff49 	bl	800da78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}

0800dbee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b085      	sub	sp, #20
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	60b9      	str	r1, [r7, #8]
 800dbf8:	4613      	mov	r3, r2
 800dbfa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	88fa      	ldrh	r2, [r7, #6]
 800dc06:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	88fa      	ldrh	r2, [r7, #6]
 800dc0c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	2200      	movs	r2, #0
 800dc12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2222      	movs	r2, #34	; 0x22
 800dc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	691b      	ldr	r3, [r3, #16]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d007      	beq.n	800dc3c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68da      	ldr	r2, [r3, #12]
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dc3a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	695a      	ldr	r2, [r3, #20]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f042 0201 	orr.w	r2, r2, #1
 800dc4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	68da      	ldr	r2, [r3, #12]
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f042 0220 	orr.w	r2, r2, #32
 800dc5a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3714      	adds	r7, #20
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800dc6a:	b480      	push	{r7}
 800dc6c:	b089      	sub	sp, #36	; 0x24
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	330c      	adds	r3, #12
 800dc78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	e853 3f00 	ldrex	r3, [r3]
 800dc80:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dc88:	61fb      	str	r3, [r7, #28]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	330c      	adds	r3, #12
 800dc90:	69fa      	ldr	r2, [r7, #28]
 800dc92:	61ba      	str	r2, [r7, #24]
 800dc94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc96:	6979      	ldr	r1, [r7, #20]
 800dc98:	69ba      	ldr	r2, [r7, #24]
 800dc9a:	e841 2300 	strex	r3, r2, [r1]
 800dc9e:	613b      	str	r3, [r7, #16]
   return(result);
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1e5      	bne.n	800dc72 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2220      	movs	r2, #32
 800dcaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800dcae:	bf00      	nop
 800dcb0:	3724      	adds	r7, #36	; 0x24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr

0800dcba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dcba:	b480      	push	{r7}
 800dcbc:	b095      	sub	sp, #84	; 0x54
 800dcbe:	af00      	add	r7, sp, #0
 800dcc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	330c      	adds	r3, #12
 800dcc8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dccc:	e853 3f00 	ldrex	r3, [r3]
 800dcd0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dcd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	330c      	adds	r3, #12
 800dce0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dce2:	643a      	str	r2, [r7, #64]	; 0x40
 800dce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dce6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dce8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dcea:	e841 2300 	strex	r3, r2, [r1]
 800dcee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d1e5      	bne.n	800dcc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	3314      	adds	r3, #20
 800dcfc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcfe:	6a3b      	ldr	r3, [r7, #32]
 800dd00:	e853 3f00 	ldrex	r3, [r3]
 800dd04:	61fb      	str	r3, [r7, #28]
   return(result);
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	f023 0301 	bic.w	r3, r3, #1
 800dd0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	3314      	adds	r3, #20
 800dd14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd16:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dd18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd1e:	e841 2300 	strex	r3, r2, [r1]
 800dd22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1e5      	bne.n	800dcf6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d119      	bne.n	800dd66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	330c      	adds	r3, #12
 800dd38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	e853 3f00 	ldrex	r3, [r3]
 800dd40:	60bb      	str	r3, [r7, #8]
   return(result);
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	f023 0310 	bic.w	r3, r3, #16
 800dd48:	647b      	str	r3, [r7, #68]	; 0x44
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	330c      	adds	r3, #12
 800dd50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd52:	61ba      	str	r2, [r7, #24]
 800dd54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd56:	6979      	ldr	r1, [r7, #20]
 800dd58:	69ba      	ldr	r2, [r7, #24]
 800dd5a:	e841 2300 	strex	r3, r2, [r1]
 800dd5e:	613b      	str	r3, [r7, #16]
   return(result);
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d1e5      	bne.n	800dd32 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2220      	movs	r2, #32
 800dd6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2200      	movs	r2, #0
 800dd72:	631a      	str	r2, [r3, #48]	; 0x30
}
 800dd74:	bf00      	nop
 800dd76:	3754      	adds	r7, #84	; 0x54
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2200      	movs	r2, #0
 800dd92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2200      	movs	r2, #0
 800dd98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f7ff fe6c 	bl	800da78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dda0:	bf00      	nop
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}

0800dda8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b085      	sub	sp, #20
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ddb6:	b2db      	uxtb	r3, r3
 800ddb8:	2b21      	cmp	r3, #33	; 0x21
 800ddba:	d13e      	bne.n	800de3a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddc4:	d114      	bne.n	800ddf0 <UART_Transmit_IT+0x48>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d110      	bne.n	800ddf0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6a1b      	ldr	r3, [r3, #32]
 800ddd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	461a      	mov	r2, r3
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dde2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	1c9a      	adds	r2, r3, #2
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	621a      	str	r2, [r3, #32]
 800ddee:	e008      	b.n	800de02 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6a1b      	ldr	r3, [r3, #32]
 800ddf4:	1c59      	adds	r1, r3, #1
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	6211      	str	r1, [r2, #32]
 800ddfa:	781a      	ldrb	r2, [r3, #0]
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b01      	subs	r3, #1
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	687a      	ldr	r2, [r7, #4]
 800de0e:	4619      	mov	r1, r3
 800de10:	84d1      	strh	r1, [r2, #38]	; 0x26
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10f      	bne.n	800de36 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	68da      	ldr	r2, [r3, #12]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800de24:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68da      	ldr	r2, [r3, #12]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de34:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	e000      	b.n	800de3c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800de3a:	2302      	movs	r3, #2
  }
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3714      	adds	r7, #20
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	68da      	ldr	r2, [r3, #12]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de5e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2220      	movs	r2, #32
 800de64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f7f5 f8a9 	bl	8002fc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b08c      	sub	sp, #48	; 0x30
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800de86:	b2db      	uxtb	r3, r3
 800de88:	2b22      	cmp	r3, #34	; 0x22
 800de8a:	f040 80ab 	bne.w	800dfe4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de96:	d117      	bne.n	800dec8 <UART_Receive_IT+0x50>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	691b      	ldr	r3, [r3, #16]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d113      	bne.n	800dec8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dea0:	2300      	movs	r3, #0
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dec0:	1c9a      	adds	r2, r3, #2
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	629a      	str	r2, [r3, #40]	; 0x28
 800dec6:	e026      	b.n	800df16 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800decc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800deda:	d007      	beq.n	800deec <UART_Receive_IT+0x74>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	689b      	ldr	r3, [r3, #8]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d10a      	bne.n	800defa <UART_Receive_IT+0x82>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	691b      	ldr	r3, [r3, #16]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d106      	bne.n	800defa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	b2da      	uxtb	r2, r3
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	701a      	strb	r2, [r3, #0]
 800def8:	e008      	b.n	800df0c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	685b      	ldr	r3, [r3, #4]
 800df00:	b2db      	uxtb	r3, r3
 800df02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df06:	b2da      	uxtb	r2, r3
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b29b      	uxth	r3, r3
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	4619      	mov	r1, r3
 800df24:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800df26:	2b00      	cmp	r3, #0
 800df28:	d15a      	bne.n	800dfe0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	68da      	ldr	r2, [r3, #12]
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	f022 0220 	bic.w	r2, r2, #32
 800df38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	68da      	ldr	r2, [r3, #12]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	695a      	ldr	r2, [r3, #20]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	f022 0201 	bic.w	r2, r2, #1
 800df58:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2220      	movs	r2, #32
 800df5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df66:	2b01      	cmp	r3, #1
 800df68:	d135      	bne.n	800dfd6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2200      	movs	r2, #0
 800df6e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	330c      	adds	r3, #12
 800df76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	e853 3f00 	ldrex	r3, [r3]
 800df7e:	613b      	str	r3, [r7, #16]
   return(result);
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	f023 0310 	bic.w	r3, r3, #16
 800df86:	627b      	str	r3, [r7, #36]	; 0x24
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	330c      	adds	r3, #12
 800df8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df90:	623a      	str	r2, [r7, #32]
 800df92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df94:	69f9      	ldr	r1, [r7, #28]
 800df96:	6a3a      	ldr	r2, [r7, #32]
 800df98:	e841 2300 	strex	r3, r2, [r1]
 800df9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800df9e:	69bb      	ldr	r3, [r7, #24]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d1e5      	bne.n	800df70 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f003 0310 	and.w	r3, r3, #16
 800dfae:	2b10      	cmp	r3, #16
 800dfb0:	d10a      	bne.n	800dfc8 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	60fb      	str	r3, [r7, #12]
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	60fb      	str	r3, [r7, #12]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff fd5c 	bl	800da8c <HAL_UARTEx_RxEventCallback>
 800dfd4:	e002      	b.n	800dfdc <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7f4 fd4a 	bl	8002a70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e002      	b.n	800dfe6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	e000      	b.n	800dfe6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800dfe4:	2302      	movs	r3, #2
  }
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3730      	adds	r7, #48	; 0x30
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
	...

0800dff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dff4:	b0c0      	sub	sp, #256	; 0x100
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	691b      	ldr	r3, [r3, #16]
 800e004:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e00c:	68d9      	ldr	r1, [r3, #12]
 800e00e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e012:	681a      	ldr	r2, [r3, #0]
 800e014:	ea40 0301 	orr.w	r3, r0, r1
 800e018:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e01a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e01e:	689a      	ldr	r2, [r3, #8]
 800e020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	431a      	orrs	r2, r3
 800e028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e02c:	695b      	ldr	r3, [r3, #20]
 800e02e:	431a      	orrs	r2, r3
 800e030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e034:	69db      	ldr	r3, [r3, #28]
 800e036:	4313      	orrs	r3, r2
 800e038:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e03c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e048:	f021 010c 	bic.w	r1, r1, #12
 800e04c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e056:	430b      	orrs	r3, r1
 800e058:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e05a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	695b      	ldr	r3, [r3, #20]
 800e062:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e06a:	6999      	ldr	r1, [r3, #24]
 800e06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	ea40 0301 	orr.w	r3, r0, r1
 800e076:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	4b8f      	ldr	r3, [pc, #572]	; (800e2bc <UART_SetConfig+0x2cc>)
 800e080:	429a      	cmp	r2, r3
 800e082:	d005      	beq.n	800e090 <UART_SetConfig+0xa0>
 800e084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4b8d      	ldr	r3, [pc, #564]	; (800e2c0 <UART_SetConfig+0x2d0>)
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d104      	bne.n	800e09a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e090:	f7fd fbc6 	bl	800b820 <HAL_RCC_GetPCLK2Freq>
 800e094:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e098:	e003      	b.n	800e0a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e09a:	f7fd fbad 	bl	800b7f8 <HAL_RCC_GetPCLK1Freq>
 800e09e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e0a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e0a6:	69db      	ldr	r3, [r3, #28]
 800e0a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0ac:	f040 810c 	bne.w	800e2c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e0b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e0ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e0be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e0c2:	4622      	mov	r2, r4
 800e0c4:	462b      	mov	r3, r5
 800e0c6:	1891      	adds	r1, r2, r2
 800e0c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800e0ca:	415b      	adcs	r3, r3
 800e0cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e0ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e0d2:	4621      	mov	r1, r4
 800e0d4:	eb12 0801 	adds.w	r8, r2, r1
 800e0d8:	4629      	mov	r1, r5
 800e0da:	eb43 0901 	adc.w	r9, r3, r1
 800e0de:	f04f 0200 	mov.w	r2, #0
 800e0e2:	f04f 0300 	mov.w	r3, #0
 800e0e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e0ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e0ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e0f2:	4690      	mov	r8, r2
 800e0f4:	4699      	mov	r9, r3
 800e0f6:	4623      	mov	r3, r4
 800e0f8:	eb18 0303 	adds.w	r3, r8, r3
 800e0fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e100:	462b      	mov	r3, r5
 800e102:	eb49 0303 	adc.w	r3, r9, r3
 800e106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e10a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e116:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e11a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e11e:	460b      	mov	r3, r1
 800e120:	18db      	adds	r3, r3, r3
 800e122:	653b      	str	r3, [r7, #80]	; 0x50
 800e124:	4613      	mov	r3, r2
 800e126:	eb42 0303 	adc.w	r3, r2, r3
 800e12a:	657b      	str	r3, [r7, #84]	; 0x54
 800e12c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e130:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e134:	f7f2 fbfa 	bl	800092c <__aeabi_uldivmod>
 800e138:	4602      	mov	r2, r0
 800e13a:	460b      	mov	r3, r1
 800e13c:	4b61      	ldr	r3, [pc, #388]	; (800e2c4 <UART_SetConfig+0x2d4>)
 800e13e:	fba3 2302 	umull	r2, r3, r3, r2
 800e142:	095b      	lsrs	r3, r3, #5
 800e144:	011c      	lsls	r4, r3, #4
 800e146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e14a:	2200      	movs	r2, #0
 800e14c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e150:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e154:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e158:	4642      	mov	r2, r8
 800e15a:	464b      	mov	r3, r9
 800e15c:	1891      	adds	r1, r2, r2
 800e15e:	64b9      	str	r1, [r7, #72]	; 0x48
 800e160:	415b      	adcs	r3, r3
 800e162:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e164:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e168:	4641      	mov	r1, r8
 800e16a:	eb12 0a01 	adds.w	sl, r2, r1
 800e16e:	4649      	mov	r1, r9
 800e170:	eb43 0b01 	adc.w	fp, r3, r1
 800e174:	f04f 0200 	mov.w	r2, #0
 800e178:	f04f 0300 	mov.w	r3, #0
 800e17c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e180:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e188:	4692      	mov	sl, r2
 800e18a:	469b      	mov	fp, r3
 800e18c:	4643      	mov	r3, r8
 800e18e:	eb1a 0303 	adds.w	r3, sl, r3
 800e192:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e196:	464b      	mov	r3, r9
 800e198:	eb4b 0303 	adc.w	r3, fp, r3
 800e19c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e1a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e1ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e1b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	18db      	adds	r3, r3, r3
 800e1b8:	643b      	str	r3, [r7, #64]	; 0x40
 800e1ba:	4613      	mov	r3, r2
 800e1bc:	eb42 0303 	adc.w	r3, r2, r3
 800e1c0:	647b      	str	r3, [r7, #68]	; 0x44
 800e1c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e1c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e1ca:	f7f2 fbaf 	bl	800092c <__aeabi_uldivmod>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	4611      	mov	r1, r2
 800e1d4:	4b3b      	ldr	r3, [pc, #236]	; (800e2c4 <UART_SetConfig+0x2d4>)
 800e1d6:	fba3 2301 	umull	r2, r3, r3, r1
 800e1da:	095b      	lsrs	r3, r3, #5
 800e1dc:	2264      	movs	r2, #100	; 0x64
 800e1de:	fb02 f303 	mul.w	r3, r2, r3
 800e1e2:	1acb      	subs	r3, r1, r3
 800e1e4:	00db      	lsls	r3, r3, #3
 800e1e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e1ea:	4b36      	ldr	r3, [pc, #216]	; (800e2c4 <UART_SetConfig+0x2d4>)
 800e1ec:	fba3 2302 	umull	r2, r3, r3, r2
 800e1f0:	095b      	lsrs	r3, r3, #5
 800e1f2:	005b      	lsls	r3, r3, #1
 800e1f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e1f8:	441c      	add	r4, r3
 800e1fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e1fe:	2200      	movs	r2, #0
 800e200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e204:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e208:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e20c:	4642      	mov	r2, r8
 800e20e:	464b      	mov	r3, r9
 800e210:	1891      	adds	r1, r2, r2
 800e212:	63b9      	str	r1, [r7, #56]	; 0x38
 800e214:	415b      	adcs	r3, r3
 800e216:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e218:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e21c:	4641      	mov	r1, r8
 800e21e:	1851      	adds	r1, r2, r1
 800e220:	6339      	str	r1, [r7, #48]	; 0x30
 800e222:	4649      	mov	r1, r9
 800e224:	414b      	adcs	r3, r1
 800e226:	637b      	str	r3, [r7, #52]	; 0x34
 800e228:	f04f 0200 	mov.w	r2, #0
 800e22c:	f04f 0300 	mov.w	r3, #0
 800e230:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e234:	4659      	mov	r1, fp
 800e236:	00cb      	lsls	r3, r1, #3
 800e238:	4651      	mov	r1, sl
 800e23a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e23e:	4651      	mov	r1, sl
 800e240:	00ca      	lsls	r2, r1, #3
 800e242:	4610      	mov	r0, r2
 800e244:	4619      	mov	r1, r3
 800e246:	4603      	mov	r3, r0
 800e248:	4642      	mov	r2, r8
 800e24a:	189b      	adds	r3, r3, r2
 800e24c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e250:	464b      	mov	r3, r9
 800e252:	460a      	mov	r2, r1
 800e254:	eb42 0303 	adc.w	r3, r2, r3
 800e258:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e268:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e26c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e270:	460b      	mov	r3, r1
 800e272:	18db      	adds	r3, r3, r3
 800e274:	62bb      	str	r3, [r7, #40]	; 0x28
 800e276:	4613      	mov	r3, r2
 800e278:	eb42 0303 	adc.w	r3, r2, r3
 800e27c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e27e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e282:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e286:	f7f2 fb51 	bl	800092c <__aeabi_uldivmod>
 800e28a:	4602      	mov	r2, r0
 800e28c:	460b      	mov	r3, r1
 800e28e:	4b0d      	ldr	r3, [pc, #52]	; (800e2c4 <UART_SetConfig+0x2d4>)
 800e290:	fba3 1302 	umull	r1, r3, r3, r2
 800e294:	095b      	lsrs	r3, r3, #5
 800e296:	2164      	movs	r1, #100	; 0x64
 800e298:	fb01 f303 	mul.w	r3, r1, r3
 800e29c:	1ad3      	subs	r3, r2, r3
 800e29e:	00db      	lsls	r3, r3, #3
 800e2a0:	3332      	adds	r3, #50	; 0x32
 800e2a2:	4a08      	ldr	r2, [pc, #32]	; (800e2c4 <UART_SetConfig+0x2d4>)
 800e2a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a8:	095b      	lsrs	r3, r3, #5
 800e2aa:	f003 0207 	and.w	r2, r3, #7
 800e2ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4422      	add	r2, r4
 800e2b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e2b8:	e105      	b.n	800e4c6 <UART_SetConfig+0x4d6>
 800e2ba:	bf00      	nop
 800e2bc:	40011000 	.word	0x40011000
 800e2c0:	40011400 	.word	0x40011400
 800e2c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e2c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e2d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e2d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e2da:	4642      	mov	r2, r8
 800e2dc:	464b      	mov	r3, r9
 800e2de:	1891      	adds	r1, r2, r2
 800e2e0:	6239      	str	r1, [r7, #32]
 800e2e2:	415b      	adcs	r3, r3
 800e2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e2ea:	4641      	mov	r1, r8
 800e2ec:	1854      	adds	r4, r2, r1
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	eb43 0501 	adc.w	r5, r3, r1
 800e2f4:	f04f 0200 	mov.w	r2, #0
 800e2f8:	f04f 0300 	mov.w	r3, #0
 800e2fc:	00eb      	lsls	r3, r5, #3
 800e2fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e302:	00e2      	lsls	r2, r4, #3
 800e304:	4614      	mov	r4, r2
 800e306:	461d      	mov	r5, r3
 800e308:	4643      	mov	r3, r8
 800e30a:	18e3      	adds	r3, r4, r3
 800e30c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e310:	464b      	mov	r3, r9
 800e312:	eb45 0303 	adc.w	r3, r5, r3
 800e316:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e31a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e326:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e32a:	f04f 0200 	mov.w	r2, #0
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e336:	4629      	mov	r1, r5
 800e338:	008b      	lsls	r3, r1, #2
 800e33a:	4621      	mov	r1, r4
 800e33c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e340:	4621      	mov	r1, r4
 800e342:	008a      	lsls	r2, r1, #2
 800e344:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e348:	f7f2 faf0 	bl	800092c <__aeabi_uldivmod>
 800e34c:	4602      	mov	r2, r0
 800e34e:	460b      	mov	r3, r1
 800e350:	4b60      	ldr	r3, [pc, #384]	; (800e4d4 <UART_SetConfig+0x4e4>)
 800e352:	fba3 2302 	umull	r2, r3, r3, r2
 800e356:	095b      	lsrs	r3, r3, #5
 800e358:	011c      	lsls	r4, r3, #4
 800e35a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e35e:	2200      	movs	r2, #0
 800e360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e364:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e368:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e36c:	4642      	mov	r2, r8
 800e36e:	464b      	mov	r3, r9
 800e370:	1891      	adds	r1, r2, r2
 800e372:	61b9      	str	r1, [r7, #24]
 800e374:	415b      	adcs	r3, r3
 800e376:	61fb      	str	r3, [r7, #28]
 800e378:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e37c:	4641      	mov	r1, r8
 800e37e:	1851      	adds	r1, r2, r1
 800e380:	6139      	str	r1, [r7, #16]
 800e382:	4649      	mov	r1, r9
 800e384:	414b      	adcs	r3, r1
 800e386:	617b      	str	r3, [r7, #20]
 800e388:	f04f 0200 	mov.w	r2, #0
 800e38c:	f04f 0300 	mov.w	r3, #0
 800e390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e394:	4659      	mov	r1, fp
 800e396:	00cb      	lsls	r3, r1, #3
 800e398:	4651      	mov	r1, sl
 800e39a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e39e:	4651      	mov	r1, sl
 800e3a0:	00ca      	lsls	r2, r1, #3
 800e3a2:	4610      	mov	r0, r2
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	4642      	mov	r2, r8
 800e3aa:	189b      	adds	r3, r3, r2
 800e3ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e3b0:	464b      	mov	r3, r9
 800e3b2:	460a      	mov	r2, r1
 800e3b4:	eb42 0303 	adc.w	r3, r2, r3
 800e3b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e3bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e3c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e3c8:	f04f 0200 	mov.w	r2, #0
 800e3cc:	f04f 0300 	mov.w	r3, #0
 800e3d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e3d4:	4649      	mov	r1, r9
 800e3d6:	008b      	lsls	r3, r1, #2
 800e3d8:	4641      	mov	r1, r8
 800e3da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e3de:	4641      	mov	r1, r8
 800e3e0:	008a      	lsls	r2, r1, #2
 800e3e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e3e6:	f7f2 faa1 	bl	800092c <__aeabi_uldivmod>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	4b39      	ldr	r3, [pc, #228]	; (800e4d4 <UART_SetConfig+0x4e4>)
 800e3f0:	fba3 1302 	umull	r1, r3, r3, r2
 800e3f4:	095b      	lsrs	r3, r3, #5
 800e3f6:	2164      	movs	r1, #100	; 0x64
 800e3f8:	fb01 f303 	mul.w	r3, r1, r3
 800e3fc:	1ad3      	subs	r3, r2, r3
 800e3fe:	011b      	lsls	r3, r3, #4
 800e400:	3332      	adds	r3, #50	; 0x32
 800e402:	4a34      	ldr	r2, [pc, #208]	; (800e4d4 <UART_SetConfig+0x4e4>)
 800e404:	fba2 2303 	umull	r2, r3, r2, r3
 800e408:	095b      	lsrs	r3, r3, #5
 800e40a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e40e:	441c      	add	r4, r3
 800e410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e414:	2200      	movs	r2, #0
 800e416:	673b      	str	r3, [r7, #112]	; 0x70
 800e418:	677a      	str	r2, [r7, #116]	; 0x74
 800e41a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e41e:	4642      	mov	r2, r8
 800e420:	464b      	mov	r3, r9
 800e422:	1891      	adds	r1, r2, r2
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	415b      	adcs	r3, r3
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e42e:	4641      	mov	r1, r8
 800e430:	1851      	adds	r1, r2, r1
 800e432:	6039      	str	r1, [r7, #0]
 800e434:	4649      	mov	r1, r9
 800e436:	414b      	adcs	r3, r1
 800e438:	607b      	str	r3, [r7, #4]
 800e43a:	f04f 0200 	mov.w	r2, #0
 800e43e:	f04f 0300 	mov.w	r3, #0
 800e442:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e446:	4659      	mov	r1, fp
 800e448:	00cb      	lsls	r3, r1, #3
 800e44a:	4651      	mov	r1, sl
 800e44c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e450:	4651      	mov	r1, sl
 800e452:	00ca      	lsls	r2, r1, #3
 800e454:	4610      	mov	r0, r2
 800e456:	4619      	mov	r1, r3
 800e458:	4603      	mov	r3, r0
 800e45a:	4642      	mov	r2, r8
 800e45c:	189b      	adds	r3, r3, r2
 800e45e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e460:	464b      	mov	r3, r9
 800e462:	460a      	mov	r2, r1
 800e464:	eb42 0303 	adc.w	r3, r2, r3
 800e468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e46a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	2200      	movs	r2, #0
 800e472:	663b      	str	r3, [r7, #96]	; 0x60
 800e474:	667a      	str	r2, [r7, #100]	; 0x64
 800e476:	f04f 0200 	mov.w	r2, #0
 800e47a:	f04f 0300 	mov.w	r3, #0
 800e47e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e482:	4649      	mov	r1, r9
 800e484:	008b      	lsls	r3, r1, #2
 800e486:	4641      	mov	r1, r8
 800e488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e48c:	4641      	mov	r1, r8
 800e48e:	008a      	lsls	r2, r1, #2
 800e490:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e494:	f7f2 fa4a 	bl	800092c <__aeabi_uldivmod>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	4b0d      	ldr	r3, [pc, #52]	; (800e4d4 <UART_SetConfig+0x4e4>)
 800e49e:	fba3 1302 	umull	r1, r3, r3, r2
 800e4a2:	095b      	lsrs	r3, r3, #5
 800e4a4:	2164      	movs	r1, #100	; 0x64
 800e4a6:	fb01 f303 	mul.w	r3, r1, r3
 800e4aa:	1ad3      	subs	r3, r2, r3
 800e4ac:	011b      	lsls	r3, r3, #4
 800e4ae:	3332      	adds	r3, #50	; 0x32
 800e4b0:	4a08      	ldr	r2, [pc, #32]	; (800e4d4 <UART_SetConfig+0x4e4>)
 800e4b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b6:	095b      	lsrs	r3, r3, #5
 800e4b8:	f003 020f 	and.w	r2, r3, #15
 800e4bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4422      	add	r2, r4
 800e4c4:	609a      	str	r2, [r3, #8]
}
 800e4c6:	bf00      	nop
 800e4c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4d2:	bf00      	nop
 800e4d4:	51eb851f 	.word	0x51eb851f

0800e4d8 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	2b10      	cmp	r3, #16
 800e4e8:	d11c      	bne.n	800e524 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	4b1f      	ldr	r3, [pc, #124]	; (800e56c <FSMC_NAND_Init+0x94>)
 800e4f0:	4013      	ands	r3, r2
 800e4f2:	683a      	ldr	r2, [r7, #0]
 800e4f4:	6851      	ldr	r1, [r2, #4]
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	6892      	ldr	r2, [r2, #8]
 800e4fa:	4311      	orrs	r1, r2
 800e4fc:	683a      	ldr	r2, [r7, #0]
 800e4fe:	68d2      	ldr	r2, [r2, #12]
 800e500:	4311      	orrs	r1, r2
 800e502:	683a      	ldr	r2, [r7, #0]
 800e504:	6912      	ldr	r2, [r2, #16]
 800e506:	4311      	orrs	r1, r2
 800e508:	683a      	ldr	r2, [r7, #0]
 800e50a:	6952      	ldr	r2, [r2, #20]
 800e50c:	0252      	lsls	r2, r2, #9
 800e50e:	4311      	orrs	r1, r2
 800e510:	683a      	ldr	r2, [r7, #0]
 800e512:	6992      	ldr	r2, [r2, #24]
 800e514:	0352      	lsls	r2, r2, #13
 800e516:	430a      	orrs	r2, r1
 800e518:	4313      	orrs	r3, r2
 800e51a:	f043 0208 	orr.w	r2, r3, #8
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	601a      	str	r2, [r3, #0]
 800e522:	e01b      	b.n	800e55c <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6a1a      	ldr	r2, [r3, #32]
 800e528:	4b10      	ldr	r3, [pc, #64]	; (800e56c <FSMC_NAND_Init+0x94>)
 800e52a:	4013      	ands	r3, r2
 800e52c:	683a      	ldr	r2, [r7, #0]
 800e52e:	6851      	ldr	r1, [r2, #4]
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	6892      	ldr	r2, [r2, #8]
 800e534:	4311      	orrs	r1, r2
 800e536:	683a      	ldr	r2, [r7, #0]
 800e538:	68d2      	ldr	r2, [r2, #12]
 800e53a:	4311      	orrs	r1, r2
 800e53c:	683a      	ldr	r2, [r7, #0]
 800e53e:	6912      	ldr	r2, [r2, #16]
 800e540:	4311      	orrs	r1, r2
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	6952      	ldr	r2, [r2, #20]
 800e546:	0252      	lsls	r2, r2, #9
 800e548:	4311      	orrs	r1, r2
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	6992      	ldr	r2, [r2, #24]
 800e54e:	0352      	lsls	r2, r2, #13
 800e550:	430a      	orrs	r2, r1
 800e552:	4313      	orrs	r3, r2
 800e554:	f043 0208 	orr.w	r2, r3, #8
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	fff00181 	.word	0xfff00181

0800e570 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e570:	b480      	push	{r7}
 800e572:	b085      	sub	sp, #20
 800e574:	af00      	add	r7, sp, #0
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b10      	cmp	r3, #16
 800e580:	d112      	bne.n	800e5a8 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	689b      	ldr	r3, [r3, #8]
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	681a      	ldr	r2, [r3, #0]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	021b      	lsls	r3, r3, #8
 800e590:	431a      	orrs	r2, r3
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	041b      	lsls	r3, r3, #16
 800e598:	431a      	orrs	r2, r3
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	061b      	lsls	r3, r3, #24
 800e5a0:	431a      	orrs	r2, r3
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	609a      	str	r2, [r3, #8]
 800e5a6:	e011      	b.n	800e5cc <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	68bb      	ldr	r3, [r7, #8]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	431a      	orrs	r2, r3
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	689b      	ldr	r3, [r3, #8]
 800e5bc:	041b      	lsls	r3, r3, #16
 800e5be:	431a      	orrs	r2, r3
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	061b      	lsls	r3, r3, #24
 800e5c6:	431a      	orrs	r2, r3
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800e5cc:	2300      	movs	r3, #0
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b085      	sub	sp, #20
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	60f8      	str	r0, [r7, #12]
 800e5e2:	60b9      	str	r1, [r7, #8]
 800e5e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b10      	cmp	r3, #16
 800e5ea:	d112      	bne.n	800e612 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	685b      	ldr	r3, [r3, #4]
 800e5f8:	021b      	lsls	r3, r3, #8
 800e5fa:	431a      	orrs	r2, r3
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	689b      	ldr	r3, [r3, #8]
 800e600:	041b      	lsls	r3, r3, #16
 800e602:	431a      	orrs	r2, r3
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	68db      	ldr	r3, [r3, #12]
 800e608:	061b      	lsls	r3, r3, #24
 800e60a:	431a      	orrs	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	60da      	str	r2, [r3, #12]
 800e610:	e011      	b.n	800e636 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	685b      	ldr	r3, [r3, #4]
 800e61e:	021b      	lsls	r3, r3, #8
 800e620:	431a      	orrs	r2, r3
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	689b      	ldr	r3, [r3, #8]
 800e626:	041b      	lsls	r3, r3, #16
 800e628:	431a      	orrs	r2, r3
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	68db      	ldr	r3, [r3, #12]
 800e62e:	061b      	lsls	r3, r3, #24
 800e630:	431a      	orrs	r2, r3
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800e636:	2300      	movs	r3, #0
}
 800e638:	4618      	mov	r0, r3
 800e63a:	3714      	adds	r7, #20
 800e63c:	46bd      	mov	sp, r7
 800e63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e642:	4770      	bx	lr

0800e644 <__NVIC_SetPriority>:
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
 800e64a:	4603      	mov	r3, r0
 800e64c:	6039      	str	r1, [r7, #0]
 800e64e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e654:	2b00      	cmp	r3, #0
 800e656:	db0a      	blt.n	800e66e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e658:	683b      	ldr	r3, [r7, #0]
 800e65a:	b2da      	uxtb	r2, r3
 800e65c:	490c      	ldr	r1, [pc, #48]	; (800e690 <__NVIC_SetPriority+0x4c>)
 800e65e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e662:	0112      	lsls	r2, r2, #4
 800e664:	b2d2      	uxtb	r2, r2
 800e666:	440b      	add	r3, r1
 800e668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e66c:	e00a      	b.n	800e684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	b2da      	uxtb	r2, r3
 800e672:	4908      	ldr	r1, [pc, #32]	; (800e694 <__NVIC_SetPriority+0x50>)
 800e674:	79fb      	ldrb	r3, [r7, #7]
 800e676:	f003 030f 	and.w	r3, r3, #15
 800e67a:	3b04      	subs	r3, #4
 800e67c:	0112      	lsls	r2, r2, #4
 800e67e:	b2d2      	uxtb	r2, r2
 800e680:	440b      	add	r3, r1
 800e682:	761a      	strb	r2, [r3, #24]
}
 800e684:	bf00      	nop
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68e:	4770      	bx	lr
 800e690:	e000e100 	.word	0xe000e100
 800e694:	e000ed00 	.word	0xe000ed00

0800e698 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e698:	b580      	push	{r7, lr}
 800e69a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <SysTick_Handler+0x1c>)
 800e69e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e6a0:	f002 f856 	bl	8010750 <xTaskGetSchedulerState>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	2b01      	cmp	r3, #1
 800e6a8:	d001      	beq.n	800e6ae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e6aa:	f002 fe3d 	bl	8011328 <xPortSysTickHandler>
  }
}
 800e6ae:	bf00      	nop
 800e6b0:	bd80      	pop	{r7, pc}
 800e6b2:	bf00      	nop
 800e6b4:	e000e010 	.word	0xe000e010

0800e6b8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e6bc:	2100      	movs	r1, #0
 800e6be:	f06f 0004 	mvn.w	r0, #4
 800e6c2:	f7ff ffbf 	bl	800e644 <__NVIC_SetPriority>
#endif
}
 800e6c6:	bf00      	nop
 800e6c8:	bd80      	pop	{r7, pc}
	...

0800e6cc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b082      	sub	sp, #8
 800e6d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6d2:	f3ef 8305 	mrs	r3, IPSR
 800e6d6:	603b      	str	r3, [r7, #0]
  return(result);
 800e6d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e6de:	f06f 0305 	mvn.w	r3, #5
 800e6e2:	607b      	str	r3, [r7, #4]
 800e6e4:	e00f      	b.n	800e706 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e6e6:	4b0a      	ldr	r3, [pc, #40]	; (800e710 <osKernelInitialize+0x44>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d108      	bne.n	800e700 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800e6ee:	4809      	ldr	r0, [pc, #36]	; (800e714 <osKernelInitialize+0x48>)
 800e6f0:	f003 f816 	bl	8011720 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800e6f4:	4b06      	ldr	r3, [pc, #24]	; (800e710 <osKernelInitialize+0x44>)
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	607b      	str	r3, [r7, #4]
 800e6fe:	e002      	b.n	800e706 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800e700:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e704:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e706:	687b      	ldr	r3, [r7, #4]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3708      	adds	r7, #8
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd80      	pop	{r7, pc}
 800e710:	20003de4 	.word	0x20003de4
 800e714:	200000a4 	.word	0x200000a4

0800e718 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e71e:	f3ef 8305 	mrs	r3, IPSR
 800e722:	603b      	str	r3, [r7, #0]
  return(result);
 800e724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e726:	2b00      	cmp	r3, #0
 800e728:	d003      	beq.n	800e732 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e72a:	f06f 0305 	mvn.w	r3, #5
 800e72e:	607b      	str	r3, [r7, #4]
 800e730:	e010      	b.n	800e754 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e732:	4b0b      	ldr	r3, [pc, #44]	; (800e760 <osKernelStart+0x48>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	2b01      	cmp	r3, #1
 800e738:	d109      	bne.n	800e74e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e73a:	f7ff ffbd 	bl	800e6b8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e73e:	4b08      	ldr	r3, [pc, #32]	; (800e760 <osKernelStart+0x48>)
 800e740:	2202      	movs	r2, #2
 800e742:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e744:	f001 fba8 	bl	800fe98 <vTaskStartScheduler>
      stat = osOK;
 800e748:	2300      	movs	r3, #0
 800e74a:	607b      	str	r3, [r7, #4]
 800e74c:	e002      	b.n	800e754 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e752:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e754:	687b      	ldr	r3, [r7, #4]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	20003de4 	.word	0x20003de4

0800e764 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e764:	b580      	push	{r7, lr}
 800e766:	b08e      	sub	sp, #56	; 0x38
 800e768:	af04      	add	r7, sp, #16
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e774:	f3ef 8305 	mrs	r3, IPSR
 800e778:	617b      	str	r3, [r7, #20]
  return(result);
 800e77a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d17e      	bne.n	800e87e <osThreadNew+0x11a>
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d07b      	beq.n	800e87e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e786:	2380      	movs	r3, #128	; 0x80
 800e788:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e78a:	2318      	movs	r3, #24
 800e78c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e78e:	2300      	movs	r3, #0
 800e790:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e796:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d045      	beq.n	800e82a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d002      	beq.n	800e7ac <osThreadNew+0x48>
        name = attr->name;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	699b      	ldr	r3, [r3, #24]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d002      	beq.n	800e7ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	699b      	ldr	r3, [r3, #24]
 800e7b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d008      	beq.n	800e7d2 <osThreadNew+0x6e>
 800e7c0:	69fb      	ldr	r3, [r7, #28]
 800e7c2:	2b38      	cmp	r3, #56	; 0x38
 800e7c4:	d805      	bhi.n	800e7d2 <osThreadNew+0x6e>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	f003 0301 	and.w	r3, r3, #1
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d001      	beq.n	800e7d6 <osThreadNew+0x72>
        return (NULL);
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e054      	b.n	800e880 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	695b      	ldr	r3, [r3, #20]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	695b      	ldr	r3, [r3, #20]
 800e7e2:	089b      	lsrs	r3, r3, #2
 800e7e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00e      	beq.n	800e80c <osThreadNew+0xa8>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	68db      	ldr	r3, [r3, #12]
 800e7f2:	2bbb      	cmp	r3, #187	; 0xbb
 800e7f4:	d90a      	bls.n	800e80c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d006      	beq.n	800e80c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	695b      	ldr	r3, [r3, #20]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <osThreadNew+0xa8>
        mem = 1;
 800e806:	2301      	movs	r3, #1
 800e808:	61bb      	str	r3, [r7, #24]
 800e80a:	e010      	b.n	800e82e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d10c      	bne.n	800e82e <osThreadNew+0xca>
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	68db      	ldr	r3, [r3, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d108      	bne.n	800e82e <osThreadNew+0xca>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d104      	bne.n	800e82e <osThreadNew+0xca>
          mem = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	61bb      	str	r3, [r7, #24]
 800e828:	e001      	b.n	800e82e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e82a:	2300      	movs	r3, #0
 800e82c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e82e:	69bb      	ldr	r3, [r7, #24]
 800e830:	2b01      	cmp	r3, #1
 800e832:	d110      	bne.n	800e856 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e83c:	9202      	str	r2, [sp, #8]
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	69fb      	ldr	r3, [r7, #28]
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	6a3a      	ldr	r2, [r7, #32]
 800e848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f001 f938 	bl	800fac0 <xTaskCreateStatic>
 800e850:	4603      	mov	r3, r0
 800e852:	613b      	str	r3, [r7, #16]
 800e854:	e013      	b.n	800e87e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d110      	bne.n	800e87e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	b29a      	uxth	r2, r3
 800e860:	f107 0310 	add.w	r3, r7, #16
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	9300      	str	r3, [sp, #0]
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f001 f983 	bl	800fb7a <xTaskCreate>
 800e874:	4603      	mov	r3, r0
 800e876:	2b01      	cmp	r3, #1
 800e878:	d001      	beq.n	800e87e <osThreadNew+0x11a>
            hTask = NULL;
 800e87a:	2300      	movs	r3, #0
 800e87c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e87e:	693b      	ldr	r3, [r7, #16]
}
 800e880:	4618      	mov	r0, r3
 800e882:	3728      	adds	r7, #40	; 0x28
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}

0800e888 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e890:	f3ef 8305 	mrs	r3, IPSR
 800e894:	60bb      	str	r3, [r7, #8]
  return(result);
 800e896:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d003      	beq.n	800e8a4 <osDelay+0x1c>
    stat = osErrorISR;
 800e89c:	f06f 0305 	mvn.w	r3, #5
 800e8a0:	60fb      	str	r3, [r7, #12]
 800e8a2:	e007      	b.n	800e8b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f001 fabe 	bl	800fe30 <vTaskDelay>
    }
  }

  return (stat);
 800e8b4:	68fb      	ldr	r3, [r7, #12]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b08a      	sub	sp, #40	; 0x28
 800e8c2:	af02      	add	r7, sp, #8
 800e8c4:	60f8      	str	r0, [r7, #12]
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ce:	f3ef 8305 	mrs	r3, IPSR
 800e8d2:	613b      	str	r3, [r7, #16]
  return(result);
 800e8d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d175      	bne.n	800e9c6 <osSemaphoreNew+0x108>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d072      	beq.n	800e9c6 <osSemaphoreNew+0x108>
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d86e      	bhi.n	800e9c6 <osSemaphoreNew+0x108>
    mem = -1;
 800e8e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e8ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d015      	beq.n	800e920 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	689b      	ldr	r3, [r3, #8]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d006      	beq.n	800e90a <osSemaphoreNew+0x4c>
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	2b4f      	cmp	r3, #79	; 0x4f
 800e902:	d902      	bls.n	800e90a <osSemaphoreNew+0x4c>
        mem = 1;
 800e904:	2301      	movs	r3, #1
 800e906:	61bb      	str	r3, [r7, #24]
 800e908:	e00c      	b.n	800e924 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d108      	bne.n	800e924 <osSemaphoreNew+0x66>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d104      	bne.n	800e924 <osSemaphoreNew+0x66>
          mem = 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	61bb      	str	r3, [r7, #24]
 800e91e:	e001      	b.n	800e924 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800e920:	2300      	movs	r3, #0
 800e922:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800e924:	69bb      	ldr	r3, [r7, #24]
 800e926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e92a:	d04c      	beq.n	800e9c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d128      	bne.n	800e984 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	2b01      	cmp	r3, #1
 800e936:	d10a      	bne.n	800e94e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	689b      	ldr	r3, [r3, #8]
 800e93c:	2203      	movs	r2, #3
 800e93e:	9200      	str	r2, [sp, #0]
 800e940:	2200      	movs	r2, #0
 800e942:	2100      	movs	r1, #0
 800e944:	2001      	movs	r0, #1
 800e946:	f000 fac5 	bl	800eed4 <xQueueGenericCreateStatic>
 800e94a:	61f8      	str	r0, [r7, #28]
 800e94c:	e005      	b.n	800e95a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800e94e:	2203      	movs	r2, #3
 800e950:	2100      	movs	r1, #0
 800e952:	2001      	movs	r0, #1
 800e954:	f000 fb36 	bl	800efc4 <xQueueGenericCreate>
 800e958:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d022      	beq.n	800e9a6 <osSemaphoreNew+0xe8>
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d01f      	beq.n	800e9a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800e966:	2300      	movs	r3, #0
 800e968:	2200      	movs	r2, #0
 800e96a:	2100      	movs	r1, #0
 800e96c:	69f8      	ldr	r0, [r7, #28]
 800e96e:	f000 fbf1 	bl	800f154 <xQueueGenericSend>
 800e972:	4603      	mov	r3, r0
 800e974:	2b01      	cmp	r3, #1
 800e976:	d016      	beq.n	800e9a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800e978:	69f8      	ldr	r0, [r7, #28]
 800e97a:	f000 fee5 	bl	800f748 <vQueueDelete>
            hSemaphore = NULL;
 800e97e:	2300      	movs	r3, #0
 800e980:	61fb      	str	r3, [r7, #28]
 800e982:	e010      	b.n	800e9a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	2b01      	cmp	r3, #1
 800e988:	d108      	bne.n	800e99c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	689b      	ldr	r3, [r3, #8]
 800e98e:	461a      	mov	r2, r3
 800e990:	68b9      	ldr	r1, [r7, #8]
 800e992:	68f8      	ldr	r0, [r7, #12]
 800e994:	f000 fb73 	bl	800f07e <xQueueCreateCountingSemaphoreStatic>
 800e998:	61f8      	str	r0, [r7, #28]
 800e99a:	e004      	b.n	800e9a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800e99c:	68b9      	ldr	r1, [r7, #8]
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f000 fba4 	bl	800f0ec <xQueueCreateCountingSemaphore>
 800e9a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800e9a6:	69fb      	ldr	r3, [r7, #28]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d00c      	beq.n	800e9c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d003      	beq.n	800e9ba <osSemaphoreNew+0xfc>
          name = attr->name;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	e001      	b.n	800e9be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800e9be:	6979      	ldr	r1, [r7, #20]
 800e9c0:	69f8      	ldr	r0, [r7, #28]
 800e9c2:	f000 fff5 	bl	800f9b0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800e9c6:	69fb      	ldr	r3, [r7, #28]
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3720      	adds	r7, #32
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}

0800e9d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	; 0x28
 800e9d4:	af02      	add	r7, sp, #8
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	60b9      	str	r1, [r7, #8]
 800e9da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e9e0:	f3ef 8305 	mrs	r3, IPSR
 800e9e4:	613b      	str	r3, [r7, #16]
  return(result);
 800e9e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d15f      	bne.n	800eaac <osMessageQueueNew+0xdc>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d05c      	beq.n	800eaac <osMessageQueueNew+0xdc>
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d059      	beq.n	800eaac <osMessageQueueNew+0xdc>
    mem = -1;
 800e9f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e9fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d029      	beq.n	800ea58 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	689b      	ldr	r3, [r3, #8]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d012      	beq.n	800ea32 <osMessageQueueNew+0x62>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	68db      	ldr	r3, [r3, #12]
 800ea10:	2b4f      	cmp	r3, #79	; 0x4f
 800ea12:	d90e      	bls.n	800ea32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d00a      	beq.n	800ea32 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	695a      	ldr	r2, [r3, #20]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	68b9      	ldr	r1, [r7, #8]
 800ea24:	fb01 f303 	mul.w	r3, r1, r3
 800ea28:	429a      	cmp	r2, r3
 800ea2a:	d302      	bcc.n	800ea32 <osMessageQueueNew+0x62>
        mem = 1;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	61bb      	str	r3, [r7, #24]
 800ea30:	e014      	b.n	800ea5c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d110      	bne.n	800ea5c <osMessageQueueNew+0x8c>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68db      	ldr	r3, [r3, #12]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d10c      	bne.n	800ea5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d108      	bne.n	800ea5c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	695b      	ldr	r3, [r3, #20]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d104      	bne.n	800ea5c <osMessageQueueNew+0x8c>
          mem = 0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	61bb      	str	r3, [r7, #24]
 800ea56:	e001      	b.n	800ea5c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ea5c:	69bb      	ldr	r3, [r7, #24]
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d10b      	bne.n	800ea7a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	691a      	ldr	r2, [r3, #16]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	9100      	str	r1, [sp, #0]
 800ea6e:	68b9      	ldr	r1, [r7, #8]
 800ea70:	68f8      	ldr	r0, [r7, #12]
 800ea72:	f000 fa2f 	bl	800eed4 <xQueueGenericCreateStatic>
 800ea76:	61f8      	str	r0, [r7, #28]
 800ea78:	e008      	b.n	800ea8c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d105      	bne.n	800ea8c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ea80:	2200      	movs	r2, #0
 800ea82:	68b9      	ldr	r1, [r7, #8]
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f000 fa9d 	bl	800efc4 <xQueueGenericCreate>
 800ea8a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d00c      	beq.n	800eaac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d003      	beq.n	800eaa0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	617b      	str	r3, [r7, #20]
 800ea9e:	e001      	b.n	800eaa4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800eaa4:	6979      	ldr	r1, [r7, #20]
 800eaa6:	69f8      	ldr	r0, [r7, #28]
 800eaa8:	f000 ff82 	bl	800f9b0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800eaac:	69fb      	ldr	r3, [r7, #28]
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3720      	adds	r7, #32
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
	...

0800eab8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b088      	sub	sp, #32
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	603b      	str	r3, [r7, #0]
 800eac4:	4613      	mov	r3, r2
 800eac6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eacc:	2300      	movs	r3, #0
 800eace:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ead0:	f3ef 8305 	mrs	r3, IPSR
 800ead4:	617b      	str	r3, [r7, #20]
  return(result);
 800ead6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d028      	beq.n	800eb2e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eadc:	69bb      	ldr	r3, [r7, #24]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <osMessageQueuePut+0x36>
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d002      	beq.n	800eaee <osMessageQueuePut+0x36>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800eaee:	f06f 0303 	mvn.w	r3, #3
 800eaf2:	61fb      	str	r3, [r7, #28]
 800eaf4:	e038      	b.n	800eb68 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800eafa:	f107 0210 	add.w	r2, r7, #16
 800eafe:	2300      	movs	r3, #0
 800eb00:	68b9      	ldr	r1, [r7, #8]
 800eb02:	69b8      	ldr	r0, [r7, #24]
 800eb04:	f000 fc24 	bl	800f350 <xQueueGenericSendFromISR>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b01      	cmp	r3, #1
 800eb0c:	d003      	beq.n	800eb16 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800eb0e:	f06f 0302 	mvn.w	r3, #2
 800eb12:	61fb      	str	r3, [r7, #28]
 800eb14:	e028      	b.n	800eb68 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d025      	beq.n	800eb68 <osMessageQueuePut+0xb0>
 800eb1c:	4b15      	ldr	r3, [pc, #84]	; (800eb74 <osMessageQueuePut+0xbc>)
 800eb1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	e01c      	b.n	800eb68 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d002      	beq.n	800eb3a <osMessageQueuePut+0x82>
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d103      	bne.n	800eb42 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800eb3a:	f06f 0303 	mvn.w	r3, #3
 800eb3e:	61fb      	str	r3, [r7, #28]
 800eb40:	e012      	b.n	800eb68 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eb42:	2300      	movs	r3, #0
 800eb44:	683a      	ldr	r2, [r7, #0]
 800eb46:	68b9      	ldr	r1, [r7, #8]
 800eb48:	69b8      	ldr	r0, [r7, #24]
 800eb4a:	f000 fb03 	bl	800f154 <xQueueGenericSend>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d009      	beq.n	800eb68 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d003      	beq.n	800eb62 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800eb5a:	f06f 0301 	mvn.w	r3, #1
 800eb5e:	61fb      	str	r3, [r7, #28]
 800eb60:	e002      	b.n	800eb68 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800eb62:	f06f 0302 	mvn.w	r3, #2
 800eb66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800eb68:	69fb      	ldr	r3, [r7, #28]
}
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	3720      	adds	r7, #32
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	e000ed04 	.word	0xe000ed04

0800eb78 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b088      	sub	sp, #32
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	60f8      	str	r0, [r7, #12]
 800eb80:	60b9      	str	r1, [r7, #8]
 800eb82:	607a      	str	r2, [r7, #4]
 800eb84:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb8e:	f3ef 8305 	mrs	r3, IPSR
 800eb92:	617b      	str	r3, [r7, #20]
  return(result);
 800eb94:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d028      	beq.n	800ebec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d005      	beq.n	800ebac <osMessageQueueGet+0x34>
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d002      	beq.n	800ebac <osMessageQueueGet+0x34>
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d003      	beq.n	800ebb4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ebac:	f06f 0303 	mvn.w	r3, #3
 800ebb0:	61fb      	str	r3, [r7, #28]
 800ebb2:	e037      	b.n	800ec24 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ebb8:	f107 0310 	add.w	r3, r7, #16
 800ebbc:	461a      	mov	r2, r3
 800ebbe:	68b9      	ldr	r1, [r7, #8]
 800ebc0:	69b8      	ldr	r0, [r7, #24]
 800ebc2:	f000 fd41 	bl	800f648 <xQueueReceiveFromISR>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	d003      	beq.n	800ebd4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ebcc:	f06f 0302 	mvn.w	r3, #2
 800ebd0:	61fb      	str	r3, [r7, #28]
 800ebd2:	e027      	b.n	800ec24 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d024      	beq.n	800ec24 <osMessageQueueGet+0xac>
 800ebda:	4b15      	ldr	r3, [pc, #84]	; (800ec30 <osMessageQueueGet+0xb8>)
 800ebdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebe0:	601a      	str	r2, [r3, #0]
 800ebe2:	f3bf 8f4f 	dsb	sy
 800ebe6:	f3bf 8f6f 	isb	sy
 800ebea:	e01b      	b.n	800ec24 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ebec:	69bb      	ldr	r3, [r7, #24]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d002      	beq.n	800ebf8 <osMessageQueueGet+0x80>
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d103      	bne.n	800ec00 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ebf8:	f06f 0303 	mvn.w	r3, #3
 800ebfc:	61fb      	str	r3, [r7, #28]
 800ebfe:	e011      	b.n	800ec24 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ec00:	683a      	ldr	r2, [r7, #0]
 800ec02:	68b9      	ldr	r1, [r7, #8]
 800ec04:	69b8      	ldr	r0, [r7, #24]
 800ec06:	f000 fc3f 	bl	800f488 <xQueueReceive>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b01      	cmp	r3, #1
 800ec0e:	d009      	beq.n	800ec24 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ec16:	f06f 0301 	mvn.w	r3, #1
 800ec1a:	61fb      	str	r3, [r7, #28]
 800ec1c:	e002      	b.n	800ec24 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ec1e:	f06f 0302 	mvn.w	r3, #2
 800ec22:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ec24:	69fb      	ldr	r3, [r7, #28]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3720      	adds	r7, #32
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	e000ed04 	.word	0xe000ed04

0800ec34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ec34:	b480      	push	{r7}
 800ec36:	b085      	sub	sp, #20
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	60f8      	str	r0, [r7, #12]
 800ec3c:	60b9      	str	r1, [r7, #8]
 800ec3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	4a07      	ldr	r2, [pc, #28]	; (800ec60 <vApplicationGetIdleTaskMemory+0x2c>)
 800ec44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ec46:	68bb      	ldr	r3, [r7, #8]
 800ec48:	4a06      	ldr	r2, [pc, #24]	; (800ec64 <vApplicationGetIdleTaskMemory+0x30>)
 800ec4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2280      	movs	r2, #128	; 0x80
 800ec50:	601a      	str	r2, [r3, #0]
}
 800ec52:	bf00      	nop
 800ec54:	3714      	adds	r7, #20
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
 800ec5e:	bf00      	nop
 800ec60:	200075e8 	.word	0x200075e8
 800ec64:	200076a4 	.word	0x200076a4

0800ec68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	60f8      	str	r0, [r7, #12]
 800ec70:	60b9      	str	r1, [r7, #8]
 800ec72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	4a07      	ldr	r2, [pc, #28]	; (800ec94 <vApplicationGetTimerTaskMemory+0x2c>)
 800ec78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	4a06      	ldr	r2, [pc, #24]	; (800ec98 <vApplicationGetTimerTaskMemory+0x30>)
 800ec7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ec86:	601a      	str	r2, [r3, #0]
}
 800ec88:	bf00      	nop
 800ec8a:	3714      	adds	r7, #20
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr
 800ec94:	200078a4 	.word	0x200078a4
 800ec98:	20007960 	.word	0x20007960

0800ec9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b083      	sub	sp, #12
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f103 0208 	add.w	r2, r3, #8
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f103 0208 	add.w	r2, r3, #8
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	f103 0208 	add.w	r2, r3, #8
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	2200      	movs	r2, #0
 800ecce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ecd0:	bf00      	nop
 800ecd2:	370c      	adds	r7, #12
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b083      	sub	sp, #12
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2200      	movs	r2, #0
 800ece8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ecea:	bf00      	nop
 800ecec:	370c      	adds	r7, #12
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf4:	4770      	bx	lr

0800ecf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ecf6:	b480      	push	{r7}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	68fa      	ldr	r2, [r7, #12]
 800ed0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	689a      	ldr	r2, [r3, #8]
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	689b      	ldr	r3, [r3, #8]
 800ed18:	683a      	ldr	r2, [r7, #0]
 800ed1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	1c5a      	adds	r2, r3, #1
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	601a      	str	r2, [r3, #0]
}
 800ed32:	bf00      	nop
 800ed34:	3714      	adds	r7, #20
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ed3e:	b480      	push	{r7}
 800ed40:	b085      	sub	sp, #20
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
 800ed46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ed54:	d103      	bne.n	800ed5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	60fb      	str	r3, [r7, #12]
 800ed5c:	e00c      	b.n	800ed78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	3308      	adds	r3, #8
 800ed62:	60fb      	str	r3, [r7, #12]
 800ed64:	e002      	b.n	800ed6c <vListInsert+0x2e>
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	685b      	ldr	r3, [r3, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68ba      	ldr	r2, [r7, #8]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d2f6      	bcs.n	800ed66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	683a      	ldr	r2, [r7, #0]
 800ed86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	687a      	ldr	r2, [r7, #4]
 800ed98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	1c5a      	adds	r2, r3, #1
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	601a      	str	r2, [r3, #0]
}
 800eda4:	bf00      	nop
 800eda6:	3714      	adds	r7, #20
 800eda8:	46bd      	mov	sp, r7
 800edaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edae:	4770      	bx	lr

0800edb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800edb0:	b480      	push	{r7}
 800edb2:	b085      	sub	sp, #20
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	691b      	ldr	r3, [r3, #16]
 800edbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	685b      	ldr	r3, [r3, #4]
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6892      	ldr	r2, [r2, #8]
 800edc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	687a      	ldr	r2, [r7, #4]
 800edce:	6852      	ldr	r2, [r2, #4]
 800edd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	685b      	ldr	r3, [r3, #4]
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d103      	bne.n	800ede4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	689a      	ldr	r2, [r3, #8]
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	1e5a      	subs	r2, r3, #1
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
}
 800edf8:	4618      	mov	r0, r3
 800edfa:	3714      	adds	r7, #20
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b084      	sub	sp, #16
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10a      	bne.n	800ee2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ee18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1c:	f383 8811 	msr	BASEPRI, r3
 800ee20:	f3bf 8f6f 	isb	sy
 800ee24:	f3bf 8f4f 	dsb	sy
 800ee28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ee2a:	bf00      	nop
 800ee2c:	e7fe      	b.n	800ee2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ee2e:	f002 f9e9 	bl	8011204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee3a:	68f9      	ldr	r1, [r7, #12]
 800ee3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee3e:	fb01 f303 	mul.w	r3, r1, r3
 800ee42:	441a      	add	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	681a      	ldr	r2, [r3, #0]
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	68f9      	ldr	r1, [r7, #12]
 800ee62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ee64:	fb01 f303 	mul.w	r3, r1, r3
 800ee68:	441a      	add	r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	22ff      	movs	r2, #255	; 0xff
 800ee72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	22ff      	movs	r2, #255	; 0xff
 800ee7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d114      	bne.n	800eeae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d01a      	beq.n	800eec2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	3310      	adds	r3, #16
 800ee90:	4618      	mov	r0, r3
 800ee92:	f001 fa9b 	bl	80103cc <xTaskRemoveFromEventList>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d012      	beq.n	800eec2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ee9c:	4b0c      	ldr	r3, [pc, #48]	; (800eed0 <xQueueGenericReset+0xcc>)
 800ee9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eea2:	601a      	str	r2, [r3, #0]
 800eea4:	f3bf 8f4f 	dsb	sy
 800eea8:	f3bf 8f6f 	isb	sy
 800eeac:	e009      	b.n	800eec2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	3310      	adds	r3, #16
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff fef2 	bl	800ec9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3324      	adds	r3, #36	; 0x24
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7ff feed 	bl	800ec9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eec2:	f002 f9cf 	bl	8011264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800eec6:	2301      	movs	r3, #1
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3710      	adds	r7, #16
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b08e      	sub	sp, #56	; 0x38
 800eed8:	af02      	add	r7, sp, #8
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10a      	bne.n	800eefe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800eee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeec:	f383 8811 	msr	BASEPRI, r3
 800eef0:	f3bf 8f6f 	isb	sy
 800eef4:	f3bf 8f4f 	dsb	sy
 800eef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eefa:	bf00      	nop
 800eefc:	e7fe      	b.n	800eefc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10a      	bne.n	800ef1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ef04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef08:	f383 8811 	msr	BASEPRI, r3
 800ef0c:	f3bf 8f6f 	isb	sy
 800ef10:	f3bf 8f4f 	dsb	sy
 800ef14:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ef16:	bf00      	nop
 800ef18:	e7fe      	b.n	800ef18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d002      	beq.n	800ef26 <xQueueGenericCreateStatic+0x52>
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <xQueueGenericCreateStatic+0x56>
 800ef26:	2301      	movs	r3, #1
 800ef28:	e000      	b.n	800ef2c <xQueueGenericCreateStatic+0x58>
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d10a      	bne.n	800ef46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800ef30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef34:	f383 8811 	msr	BASEPRI, r3
 800ef38:	f3bf 8f6f 	isb	sy
 800ef3c:	f3bf 8f4f 	dsb	sy
 800ef40:	623b      	str	r3, [r7, #32]
}
 800ef42:	bf00      	nop
 800ef44:	e7fe      	b.n	800ef44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d102      	bne.n	800ef52 <xQueueGenericCreateStatic+0x7e>
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d101      	bne.n	800ef56 <xQueueGenericCreateStatic+0x82>
 800ef52:	2301      	movs	r3, #1
 800ef54:	e000      	b.n	800ef58 <xQueueGenericCreateStatic+0x84>
 800ef56:	2300      	movs	r3, #0
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d10a      	bne.n	800ef72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ef5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef60:	f383 8811 	msr	BASEPRI, r3
 800ef64:	f3bf 8f6f 	isb	sy
 800ef68:	f3bf 8f4f 	dsb	sy
 800ef6c:	61fb      	str	r3, [r7, #28]
}
 800ef6e:	bf00      	nop
 800ef70:	e7fe      	b.n	800ef70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ef72:	2350      	movs	r3, #80	; 0x50
 800ef74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	2b50      	cmp	r3, #80	; 0x50
 800ef7a:	d00a      	beq.n	800ef92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ef7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef80:	f383 8811 	msr	BASEPRI, r3
 800ef84:	f3bf 8f6f 	isb	sy
 800ef88:	f3bf 8f4f 	dsb	sy
 800ef8c:	61bb      	str	r3, [r7, #24]
}
 800ef8e:	bf00      	nop
 800ef90:	e7fe      	b.n	800ef90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ef92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ef98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d00d      	beq.n	800efba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ef9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa0:	2201      	movs	r2, #1
 800efa2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800efa6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	9300      	str	r3, [sp, #0]
 800efae:	4613      	mov	r3, r2
 800efb0:	687a      	ldr	r2, [r7, #4]
 800efb2:	68b9      	ldr	r1, [r7, #8]
 800efb4:	68f8      	ldr	r0, [r7, #12]
 800efb6:	f000 f83f 	bl	800f038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800efbc:	4618      	mov	r0, r3
 800efbe:	3730      	adds	r7, #48	; 0x30
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bd80      	pop	{r7, pc}

0800efc4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08a      	sub	sp, #40	; 0x28
 800efc8:	af02      	add	r7, sp, #8
 800efca:	60f8      	str	r0, [r7, #12]
 800efcc:	60b9      	str	r1, [r7, #8]
 800efce:	4613      	mov	r3, r2
 800efd0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d10a      	bne.n	800efee <xQueueGenericCreate+0x2a>
	__asm volatile
 800efd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	613b      	str	r3, [r7, #16]
}
 800efea:	bf00      	nop
 800efec:	e7fe      	b.n	800efec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	68ba      	ldr	r2, [r7, #8]
 800eff2:	fb02 f303 	mul.w	r3, r2, r3
 800eff6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eff8:	69fb      	ldr	r3, [r7, #28]
 800effa:	3350      	adds	r3, #80	; 0x50
 800effc:	4618      	mov	r0, r3
 800effe:	f002 fa23 	bl	8011448 <pvPortMalloc>
 800f002:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f004:	69bb      	ldr	r3, [r7, #24]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d011      	beq.n	800f02e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f00a:	69bb      	ldr	r3, [r7, #24]
 800f00c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	3350      	adds	r3, #80	; 0x50
 800f012:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	2200      	movs	r2, #0
 800f018:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f01c:	79fa      	ldrb	r2, [r7, #7]
 800f01e:	69bb      	ldr	r3, [r7, #24]
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	4613      	mov	r3, r2
 800f024:	697a      	ldr	r2, [r7, #20]
 800f026:	68b9      	ldr	r1, [r7, #8]
 800f028:	68f8      	ldr	r0, [r7, #12]
 800f02a:	f000 f805 	bl	800f038 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f02e:	69bb      	ldr	r3, [r7, #24]
	}
 800f030:	4618      	mov	r0, r3
 800f032:	3720      	adds	r7, #32
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d103      	bne.n	800f054 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	69ba      	ldr	r2, [r7, #24]
 800f050:	601a      	str	r2, [r3, #0]
 800f052:	e002      	b.n	800f05a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f05a:	69bb      	ldr	r3, [r7, #24]
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f060:	69bb      	ldr	r3, [r7, #24]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f066:	2101      	movs	r1, #1
 800f068:	69b8      	ldr	r0, [r7, #24]
 800f06a:	f7ff fecb 	bl	800ee04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f076:	bf00      	nop
 800f078:	3710      	adds	r7, #16
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}

0800f07e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f07e:	b580      	push	{r7, lr}
 800f080:	b08a      	sub	sp, #40	; 0x28
 800f082:	af02      	add	r7, sp, #8
 800f084:	60f8      	str	r0, [r7, #12]
 800f086:	60b9      	str	r1, [r7, #8]
 800f088:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d10a      	bne.n	800f0a6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f094:	f383 8811 	msr	BASEPRI, r3
 800f098:	f3bf 8f6f 	isb	sy
 800f09c:	f3bf 8f4f 	dsb	sy
 800f0a0:	61bb      	str	r3, [r7, #24]
}
 800f0a2:	bf00      	nop
 800f0a4:	e7fe      	b.n	800f0a4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d90a      	bls.n	800f0c4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0b2:	f383 8811 	msr	BASEPRI, r3
 800f0b6:	f3bf 8f6f 	isb	sy
 800f0ba:	f3bf 8f4f 	dsb	sy
 800f0be:	617b      	str	r3, [r7, #20]
}
 800f0c0:	bf00      	nop
 800f0c2:	e7fe      	b.n	800f0c2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f0c4:	2302      	movs	r3, #2
 800f0c6:	9300      	str	r3, [sp, #0]
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff ff00 	bl	800eed4 <xQueueGenericCreateStatic>
 800f0d4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f0d6:	69fb      	ldr	r3, [r7, #28]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f0dc:	69fb      	ldr	r3, [r7, #28]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f0e2:	69fb      	ldr	r3, [r7, #28]
	}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3720      	adds	r7, #32
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b086      	sub	sp, #24
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
 800f0f4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10a      	bne.n	800f112 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f100:	f383 8811 	msr	BASEPRI, r3
 800f104:	f3bf 8f6f 	isb	sy
 800f108:	f3bf 8f4f 	dsb	sy
 800f10c:	613b      	str	r3, [r7, #16]
}
 800f10e:	bf00      	nop
 800f110:	e7fe      	b.n	800f110 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	429a      	cmp	r2, r3
 800f118:	d90a      	bls.n	800f130 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11e:	f383 8811 	msr	BASEPRI, r3
 800f122:	f3bf 8f6f 	isb	sy
 800f126:	f3bf 8f4f 	dsb	sy
 800f12a:	60fb      	str	r3, [r7, #12]
}
 800f12c:	bf00      	nop
 800f12e:	e7fe      	b.n	800f12e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f130:	2202      	movs	r2, #2
 800f132:	2100      	movs	r1, #0
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ff45 	bl	800efc4 <xQueueGenericCreate>
 800f13a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f148:	697b      	ldr	r3, [r7, #20]
	}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3718      	adds	r7, #24
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
	...

0800f154 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b08e      	sub	sp, #56	; 0x38
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	607a      	str	r2, [r7, #4]
 800f160:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f162:	2300      	movs	r3, #0
 800f164:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10a      	bne.n	800f186 <xQueueGenericSend+0x32>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f186:	68bb      	ldr	r3, [r7, #8]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d103      	bne.n	800f194 <xQueueGenericSend+0x40>
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f190:	2b00      	cmp	r3, #0
 800f192:	d101      	bne.n	800f198 <xQueueGenericSend+0x44>
 800f194:	2301      	movs	r3, #1
 800f196:	e000      	b.n	800f19a <xQueueGenericSend+0x46>
 800f198:	2300      	movs	r3, #0
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d10a      	bne.n	800f1b4 <xQueueGenericSend+0x60>
	__asm volatile
 800f19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f1b0:	bf00      	nop
 800f1b2:	e7fe      	b.n	800f1b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	2b02      	cmp	r3, #2
 800f1b8:	d103      	bne.n	800f1c2 <xQueueGenericSend+0x6e>
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d101      	bne.n	800f1c6 <xQueueGenericSend+0x72>
 800f1c2:	2301      	movs	r3, #1
 800f1c4:	e000      	b.n	800f1c8 <xQueueGenericSend+0x74>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10a      	bne.n	800f1e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	623b      	str	r3, [r7, #32]
}
 800f1de:	bf00      	nop
 800f1e0:	e7fe      	b.n	800f1e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f1e2:	f001 fab5 	bl	8010750 <xTaskGetSchedulerState>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d102      	bne.n	800f1f2 <xQueueGenericSend+0x9e>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <xQueueGenericSend+0xa2>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e000      	b.n	800f1f8 <xQueueGenericSend+0xa4>
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d10a      	bne.n	800f212 <xQueueGenericSend+0xbe>
	__asm volatile
 800f1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f200:	f383 8811 	msr	BASEPRI, r3
 800f204:	f3bf 8f6f 	isb	sy
 800f208:	f3bf 8f4f 	dsb	sy
 800f20c:	61fb      	str	r3, [r7, #28]
}
 800f20e:	bf00      	nop
 800f210:	e7fe      	b.n	800f210 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f212:	f001 fff7 	bl	8011204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21e:	429a      	cmp	r2, r3
 800f220:	d302      	bcc.n	800f228 <xQueueGenericSend+0xd4>
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	2b02      	cmp	r3, #2
 800f226:	d129      	bne.n	800f27c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	68b9      	ldr	r1, [r7, #8]
 800f22c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f22e:	f000 faae 	bl	800f78e <prvCopyDataToQueue>
 800f232:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d010      	beq.n	800f25e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23e:	3324      	adds	r3, #36	; 0x24
 800f240:	4618      	mov	r0, r3
 800f242:	f001 f8c3 	bl	80103cc <xTaskRemoveFromEventList>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d013      	beq.n	800f274 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f24c:	4b3f      	ldr	r3, [pc, #252]	; (800f34c <xQueueGenericSend+0x1f8>)
 800f24e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f252:	601a      	str	r2, [r3, #0]
 800f254:	f3bf 8f4f 	dsb	sy
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	e00a      	b.n	800f274 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f260:	2b00      	cmp	r3, #0
 800f262:	d007      	beq.n	800f274 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f264:	4b39      	ldr	r3, [pc, #228]	; (800f34c <xQueueGenericSend+0x1f8>)
 800f266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f26a:	601a      	str	r2, [r3, #0]
 800f26c:	f3bf 8f4f 	dsb	sy
 800f270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f274:	f001 fff6 	bl	8011264 <vPortExitCritical>
				return pdPASS;
 800f278:	2301      	movs	r3, #1
 800f27a:	e063      	b.n	800f344 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d103      	bne.n	800f28a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f282:	f001 ffef 	bl	8011264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f286:	2300      	movs	r3, #0
 800f288:	e05c      	b.n	800f344 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d106      	bne.n	800f29e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f290:	f107 0314 	add.w	r3, r7, #20
 800f294:	4618      	mov	r0, r3
 800f296:	f001 f8fd 	bl	8010494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f29a:	2301      	movs	r3, #1
 800f29c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f29e:	f001 ffe1 	bl	8011264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2a2:	f000 fe69 	bl	800ff78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2a6:	f001 ffad 	bl	8011204 <vPortEnterCritical>
 800f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2b0:	b25b      	sxtb	r3, r3
 800f2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2b6:	d103      	bne.n	800f2c0 <xQueueGenericSend+0x16c>
 800f2b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2c6:	b25b      	sxtb	r3, r3
 800f2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2cc:	d103      	bne.n	800f2d6 <xQueueGenericSend+0x182>
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2d6:	f001 ffc5 	bl	8011264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2da:	1d3a      	adds	r2, r7, #4
 800f2dc:	f107 0314 	add.w	r3, r7, #20
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	f001 f8ec 	bl	80104c0 <xTaskCheckForTimeOut>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d124      	bne.n	800f338 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f2ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f2f0:	f000 fb45 	bl	800f97e <prvIsQueueFull>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d018      	beq.n	800f32c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2fc:	3310      	adds	r3, #16
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	4611      	mov	r1, r2
 800f302:	4618      	mov	r0, r3
 800f304:	f001 f812 	bl	801032c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f30a:	f000 fad0 	bl	800f8ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f30e:	f000 fe41 	bl	800ff94 <xTaskResumeAll>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	f47f af7c 	bne.w	800f212 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f31a:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <xQueueGenericSend+0x1f8>)
 800f31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f320:	601a      	str	r2, [r3, #0]
 800f322:	f3bf 8f4f 	dsb	sy
 800f326:	f3bf 8f6f 	isb	sy
 800f32a:	e772      	b.n	800f212 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f32e:	f000 fabe 	bl	800f8ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f332:	f000 fe2f 	bl	800ff94 <xTaskResumeAll>
 800f336:	e76c      	b.n	800f212 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f338:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f33a:	f000 fab8 	bl	800f8ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f33e:	f000 fe29 	bl	800ff94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f342:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f344:	4618      	mov	r0, r3
 800f346:	3738      	adds	r7, #56	; 0x38
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	e000ed04 	.word	0xe000ed04

0800f350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b090      	sub	sp, #64	; 0x40
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	60b9      	str	r1, [r7, #8]
 800f35a:	607a      	str	r2, [r7, #4]
 800f35c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f364:	2b00      	cmp	r3, #0
 800f366:	d10a      	bne.n	800f37e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f36c:	f383 8811 	msr	BASEPRI, r3
 800f370:	f3bf 8f6f 	isb	sy
 800f374:	f3bf 8f4f 	dsb	sy
 800f378:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f37a:	bf00      	nop
 800f37c:	e7fe      	b.n	800f37c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d103      	bne.n	800f38c <xQueueGenericSendFromISR+0x3c>
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <xQueueGenericSendFromISR+0x40>
 800f38c:	2301      	movs	r3, #1
 800f38e:	e000      	b.n	800f392 <xQueueGenericSendFromISR+0x42>
 800f390:	2300      	movs	r3, #0
 800f392:	2b00      	cmp	r3, #0
 800f394:	d10a      	bne.n	800f3ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f39a:	f383 8811 	msr	BASEPRI, r3
 800f39e:	f3bf 8f6f 	isb	sy
 800f3a2:	f3bf 8f4f 	dsb	sy
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3a8:	bf00      	nop
 800f3aa:	e7fe      	b.n	800f3aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3ac:	683b      	ldr	r3, [r7, #0]
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d103      	bne.n	800f3ba <xQueueGenericSendFromISR+0x6a>
 800f3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d101      	bne.n	800f3be <xQueueGenericSendFromISR+0x6e>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	e000      	b.n	800f3c0 <xQueueGenericSendFromISR+0x70>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d10a      	bne.n	800f3da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c8:	f383 8811 	msr	BASEPRI, r3
 800f3cc:	f3bf 8f6f 	isb	sy
 800f3d0:	f3bf 8f4f 	dsb	sy
 800f3d4:	623b      	str	r3, [r7, #32]
}
 800f3d6:	bf00      	nop
 800f3d8:	e7fe      	b.n	800f3d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f3da:	f001 fff5 	bl	80113c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f3de:	f3ef 8211 	mrs	r2, BASEPRI
 800f3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e6:	f383 8811 	msr	BASEPRI, r3
 800f3ea:	f3bf 8f6f 	isb	sy
 800f3ee:	f3bf 8f4f 	dsb	sy
 800f3f2:	61fa      	str	r2, [r7, #28]
 800f3f4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f3f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f3f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f402:	429a      	cmp	r2, r3
 800f404:	d302      	bcc.n	800f40c <xQueueGenericSendFromISR+0xbc>
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d12f      	bne.n	800f46c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f40e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f41a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f41c:	683a      	ldr	r2, [r7, #0]
 800f41e:	68b9      	ldr	r1, [r7, #8]
 800f420:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f422:	f000 f9b4 	bl	800f78e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f426:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f42a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f42e:	d112      	bne.n	800f456 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f434:	2b00      	cmp	r3, #0
 800f436:	d016      	beq.n	800f466 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43a:	3324      	adds	r3, #36	; 0x24
 800f43c:	4618      	mov	r0, r3
 800f43e:	f000 ffc5 	bl	80103cc <xTaskRemoveFromEventList>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00e      	beq.n	800f466 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d00b      	beq.n	800f466 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	2201      	movs	r2, #1
 800f452:	601a      	str	r2, [r3, #0]
 800f454:	e007      	b.n	800f466 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f45a:	3301      	adds	r3, #1
 800f45c:	b2db      	uxtb	r3, r3
 800f45e:	b25a      	sxtb	r2, r3
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f466:	2301      	movs	r3, #1
 800f468:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f46a:	e001      	b.n	800f470 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f46c:	2300      	movs	r3, #0
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f47a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f47e:	4618      	mov	r0, r3
 800f480:	3740      	adds	r7, #64	; 0x40
 800f482:	46bd      	mov	sp, r7
 800f484:	bd80      	pop	{r7, pc}
	...

0800f488 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b08c      	sub	sp, #48	; 0x30
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	60b9      	str	r1, [r7, #8]
 800f492:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f494:	2300      	movs	r3, #0
 800f496:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d10a      	bne.n	800f4b8 <xQueueReceive+0x30>
	__asm volatile
 800f4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4a6:	f383 8811 	msr	BASEPRI, r3
 800f4aa:	f3bf 8f6f 	isb	sy
 800f4ae:	f3bf 8f4f 	dsb	sy
 800f4b2:	623b      	str	r3, [r7, #32]
}
 800f4b4:	bf00      	nop
 800f4b6:	e7fe      	b.n	800f4b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d103      	bne.n	800f4c6 <xQueueReceive+0x3e>
 800f4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d101      	bne.n	800f4ca <xQueueReceive+0x42>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	e000      	b.n	800f4cc <xQueueReceive+0x44>
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d10a      	bne.n	800f4e6 <xQueueReceive+0x5e>
	__asm volatile
 800f4d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d4:	f383 8811 	msr	BASEPRI, r3
 800f4d8:	f3bf 8f6f 	isb	sy
 800f4dc:	f3bf 8f4f 	dsb	sy
 800f4e0:	61fb      	str	r3, [r7, #28]
}
 800f4e2:	bf00      	nop
 800f4e4:	e7fe      	b.n	800f4e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f4e6:	f001 f933 	bl	8010750 <xTaskGetSchedulerState>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d102      	bne.n	800f4f6 <xQueueReceive+0x6e>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <xQueueReceive+0x72>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e000      	b.n	800f4fc <xQueueReceive+0x74>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d10a      	bne.n	800f516 <xQueueReceive+0x8e>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	61bb      	str	r3, [r7, #24]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f516:	f001 fe75 	bl	8011204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f51e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f522:	2b00      	cmp	r3, #0
 800f524:	d01f      	beq.n	800f566 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f526:	68b9      	ldr	r1, [r7, #8]
 800f528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f52a:	f000 f99a 	bl	800f862 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f530:	1e5a      	subs	r2, r3, #1
 800f532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f534:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00f      	beq.n	800f55e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f540:	3310      	adds	r3, #16
 800f542:	4618      	mov	r0, r3
 800f544:	f000 ff42 	bl	80103cc <xTaskRemoveFromEventList>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d007      	beq.n	800f55e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f54e:	4b3d      	ldr	r3, [pc, #244]	; (800f644 <xQueueReceive+0x1bc>)
 800f550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f554:	601a      	str	r2, [r3, #0]
 800f556:	f3bf 8f4f 	dsb	sy
 800f55a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f55e:	f001 fe81 	bl	8011264 <vPortExitCritical>
				return pdPASS;
 800f562:	2301      	movs	r3, #1
 800f564:	e069      	b.n	800f63a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d103      	bne.n	800f574 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f56c:	f001 fe7a 	bl	8011264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f570:	2300      	movs	r3, #0
 800f572:	e062      	b.n	800f63a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f576:	2b00      	cmp	r3, #0
 800f578:	d106      	bne.n	800f588 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f57a:	f107 0310 	add.w	r3, r7, #16
 800f57e:	4618      	mov	r0, r3
 800f580:	f000 ff88 	bl	8010494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f584:	2301      	movs	r3, #1
 800f586:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f588:	f001 fe6c 	bl	8011264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f58c:	f000 fcf4 	bl	800ff78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f590:	f001 fe38 	bl	8011204 <vPortEnterCritical>
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f59a:	b25b      	sxtb	r3, r3
 800f59c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5a0:	d103      	bne.n	800f5aa <xQueueReceive+0x122>
 800f5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5b0:	b25b      	sxtb	r3, r3
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5b6:	d103      	bne.n	800f5c0 <xQueueReceive+0x138>
 800f5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5c0:	f001 fe50 	bl	8011264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5c4:	1d3a      	adds	r2, r7, #4
 800f5c6:	f107 0310 	add.w	r3, r7, #16
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f000 ff77 	bl	80104c0 <xTaskCheckForTimeOut>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d123      	bne.n	800f620 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5da:	f000 f9ba 	bl	800f952 <prvIsQueueEmpty>
 800f5de:	4603      	mov	r3, r0
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d017      	beq.n	800f614 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5e6:	3324      	adds	r3, #36	; 0x24
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 fe9d 	bl	801032c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f5f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5f4:	f000 f95b 	bl	800f8ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f5f8:	f000 fccc 	bl	800ff94 <xTaskResumeAll>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d189      	bne.n	800f516 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f602:	4b10      	ldr	r3, [pc, #64]	; (800f644 <xQueueReceive+0x1bc>)
 800f604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f608:	601a      	str	r2, [r3, #0]
 800f60a:	f3bf 8f4f 	dsb	sy
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	e780      	b.n	800f516 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f616:	f000 f94a 	bl	800f8ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f61a:	f000 fcbb 	bl	800ff94 <xTaskResumeAll>
 800f61e:	e77a      	b.n	800f516 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f622:	f000 f944 	bl	800f8ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f626:	f000 fcb5 	bl	800ff94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f62a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f62c:	f000 f991 	bl	800f952 <prvIsQueueEmpty>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	f43f af6f 	beq.w	800f516 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f638:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3730      	adds	r7, #48	; 0x30
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}
 800f642:	bf00      	nop
 800f644:	e000ed04 	.word	0xe000ed04

0800f648 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b08e      	sub	sp, #56	; 0x38
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	60f8      	str	r0, [r7, #12]
 800f650:	60b9      	str	r1, [r7, #8]
 800f652:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d10a      	bne.n	800f674 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	623b      	str	r3, [r7, #32]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d103      	bne.n	800f682 <xQueueReceiveFromISR+0x3a>
 800f67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d101      	bne.n	800f686 <xQueueReceiveFromISR+0x3e>
 800f682:	2301      	movs	r3, #1
 800f684:	e000      	b.n	800f688 <xQueueReceiveFromISR+0x40>
 800f686:	2300      	movs	r3, #0
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d10a      	bne.n	800f6a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	61fb      	str	r3, [r7, #28]
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f6a2:	f001 fe91 	bl	80113c8 <vPortValidateInterruptPriority>
	__asm volatile
 800f6a6:	f3ef 8211 	mrs	r2, BASEPRI
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	61ba      	str	r2, [r7, #24]
 800f6bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f6be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d02f      	beq.n	800f72e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f6d8:	68b9      	ldr	r1, [r7, #8]
 800f6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f6dc:	f000 f8c1 	bl	800f862 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6e2:	1e5a      	subs	r2, r3, #1
 800f6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6f0:	d112      	bne.n	800f718 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d016      	beq.n	800f728 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6fc:	3310      	adds	r3, #16
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 fe64 	bl	80103cc <xTaskRemoveFromEventList>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00e      	beq.n	800f728 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00b      	beq.n	800f728 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	2201      	movs	r2, #1
 800f714:	601a      	str	r2, [r3, #0]
 800f716:	e007      	b.n	800f728 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f71c:	3301      	adds	r3, #1
 800f71e:	b2db      	uxtb	r3, r3
 800f720:	b25a      	sxtb	r2, r3
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f728:	2301      	movs	r3, #1
 800f72a:	637b      	str	r3, [r7, #52]	; 0x34
 800f72c:	e001      	b.n	800f732 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f72e:	2300      	movs	r3, #0
 800f730:	637b      	str	r3, [r7, #52]	; 0x34
 800f732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f734:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	f383 8811 	msr	BASEPRI, r3
}
 800f73c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f740:	4618      	mov	r0, r3
 800f742:	3738      	adds	r7, #56	; 0x38
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b084      	sub	sp, #16
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d10a      	bne.n	800f770 <vQueueDelete+0x28>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	60bb      	str	r3, [r7, #8]
}
 800f76c:	bf00      	nop
 800f76e:	e7fe      	b.n	800f76e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f770:	68f8      	ldr	r0, [r7, #12]
 800f772:	f000 f947 	bl	800fa04 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d102      	bne.n	800f786 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f001 ff05 	bl	8011590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f786:	bf00      	nop
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b086      	sub	sp, #24
 800f792:	af00      	add	r7, sp, #0
 800f794:	60f8      	str	r0, [r7, #12]
 800f796:	60b9      	str	r1, [r7, #8]
 800f798:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f79a:	2300      	movs	r3, #0
 800f79c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d10d      	bne.n	800f7c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d14d      	bne.n	800f850 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f000 ffe7 	bl	801078c <xTaskPriorityDisinherit>
 800f7be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	609a      	str	r2, [r3, #8]
 800f7c6:	e043      	b.n	800f850 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d119      	bne.n	800f802 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	6858      	ldr	r0, [r3, #4]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	f002 fa7f 	bl	8011cdc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e6:	441a      	add	r2, r3
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	689b      	ldr	r3, [r3, #8]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d32b      	bcc.n	800f850 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	605a      	str	r2, [r3, #4]
 800f800:	e026      	b.n	800f850 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	68d8      	ldr	r0, [r3, #12]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f80a:	461a      	mov	r2, r3
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	f002 fa65 	bl	8011cdc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	68da      	ldr	r2, [r3, #12]
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f81a:	425b      	negs	r3, r3
 800f81c:	441a      	add	r2, r3
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	68da      	ldr	r2, [r3, #12]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d207      	bcs.n	800f83e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	689a      	ldr	r2, [r3, #8]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f836:	425b      	negs	r3, r3
 800f838:	441a      	add	r2, r3
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	2b02      	cmp	r3, #2
 800f842:	d105      	bne.n	800f850 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d002      	beq.n	800f850 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	1c5a      	adds	r2, r3, #1
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f858:	697b      	ldr	r3, [r7, #20]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b082      	sub	sp, #8
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f870:	2b00      	cmp	r3, #0
 800f872:	d018      	beq.n	800f8a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68da      	ldr	r2, [r3, #12]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f87c:	441a      	add	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	68da      	ldr	r2, [r3, #12]
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	689b      	ldr	r3, [r3, #8]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d303      	bcc.n	800f896 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68d9      	ldr	r1, [r3, #12]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f89e:	461a      	mov	r2, r3
 800f8a0:	6838      	ldr	r0, [r7, #0]
 800f8a2:	f002 fa1b 	bl	8011cdc <memcpy>
	}
}
 800f8a6:	bf00      	nop
 800f8a8:	3708      	adds	r7, #8
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b084      	sub	sp, #16
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f8b6:	f001 fca5 	bl	8011204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f8c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8c2:	e011      	b.n	800f8e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d012      	beq.n	800f8f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	3324      	adds	r3, #36	; 0x24
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f000 fd7b 	bl	80103cc <xTaskRemoveFromEventList>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f8dc:	f000 fe52 	bl	8010584 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f8e0:	7bfb      	ldrb	r3, [r7, #15]
 800f8e2:	3b01      	subs	r3, #1
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	dce9      	bgt.n	800f8c4 <prvUnlockQueue+0x16>
 800f8f0:	e000      	b.n	800f8f4 <prvUnlockQueue+0x46>
					break;
 800f8f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	22ff      	movs	r2, #255	; 0xff
 800f8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f8fc:	f001 fcb2 	bl	8011264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f900:	f001 fc80 	bl	8011204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f90a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f90c:	e011      	b.n	800f932 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	691b      	ldr	r3, [r3, #16]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d012      	beq.n	800f93c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3310      	adds	r3, #16
 800f91a:	4618      	mov	r0, r3
 800f91c:	f000 fd56 	bl	80103cc <xTaskRemoveFromEventList>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d001      	beq.n	800f92a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f926:	f000 fe2d 	bl	8010584 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f92a:	7bbb      	ldrb	r3, [r7, #14]
 800f92c:	3b01      	subs	r3, #1
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f936:	2b00      	cmp	r3, #0
 800f938:	dce9      	bgt.n	800f90e <prvUnlockQueue+0x60>
 800f93a:	e000      	b.n	800f93e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f93c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	22ff      	movs	r2, #255	; 0xff
 800f942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f946:	f001 fc8d 	bl	8011264 <vPortExitCritical>
}
 800f94a:	bf00      	nop
 800f94c:	3710      	adds	r7, #16
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f952:	b580      	push	{r7, lr}
 800f954:	b084      	sub	sp, #16
 800f956:	af00      	add	r7, sp, #0
 800f958:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f95a:	f001 fc53 	bl	8011204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f962:	2b00      	cmp	r3, #0
 800f964:	d102      	bne.n	800f96c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f966:	2301      	movs	r3, #1
 800f968:	60fb      	str	r3, [r7, #12]
 800f96a:	e001      	b.n	800f970 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f96c:	2300      	movs	r3, #0
 800f96e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f970:	f001 fc78 	bl	8011264 <vPortExitCritical>

	return xReturn;
 800f974:	68fb      	ldr	r3, [r7, #12]
}
 800f976:	4618      	mov	r0, r3
 800f978:	3710      	adds	r7, #16
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}

0800f97e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f97e:	b580      	push	{r7, lr}
 800f980:	b084      	sub	sp, #16
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f986:	f001 fc3d 	bl	8011204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f992:	429a      	cmp	r2, r3
 800f994:	d102      	bne.n	800f99c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f996:	2301      	movs	r3, #1
 800f998:	60fb      	str	r3, [r7, #12]
 800f99a:	e001      	b.n	800f9a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f9a0:	f001 fc60 	bl	8011264 <vPortExitCritical>

	return xReturn;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3710      	adds	r7, #16
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f9b0:	b480      	push	{r7}
 800f9b2:	b085      	sub	sp, #20
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60fb      	str	r3, [r7, #12]
 800f9be:	e014      	b.n	800f9ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f9c0:	4a0f      	ldr	r2, [pc, #60]	; (800fa00 <vQueueAddToRegistry+0x50>)
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d10b      	bne.n	800f9e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f9cc:	490c      	ldr	r1, [pc, #48]	; (800fa00 <vQueueAddToRegistry+0x50>)
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	683a      	ldr	r2, [r7, #0]
 800f9d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f9d6:	4a0a      	ldr	r2, [pc, #40]	; (800fa00 <vQueueAddToRegistry+0x50>)
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	00db      	lsls	r3, r3, #3
 800f9dc:	4413      	add	r3, r2
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f9e2:	e006      	b.n	800f9f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	60fb      	str	r3, [r7, #12]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2b07      	cmp	r3, #7
 800f9ee:	d9e7      	bls.n	800f9c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f9f0:	bf00      	nop
 800f9f2:	bf00      	nop
 800f9f4:	3714      	adds	r7, #20
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	20007d60 	.word	0x20007d60

0800fa04 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800fa04:	b480      	push	{r7}
 800fa06:	b085      	sub	sp, #20
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	60fb      	str	r3, [r7, #12]
 800fa10:	e016      	b.n	800fa40 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800fa12:	4a10      	ldr	r2, [pc, #64]	; (800fa54 <vQueueUnregisterQueue+0x50>)
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	00db      	lsls	r3, r3, #3
 800fa18:	4413      	add	r3, r2
 800fa1a:	685b      	ldr	r3, [r3, #4]
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d10b      	bne.n	800fa3a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800fa22:	4a0c      	ldr	r2, [pc, #48]	; (800fa54 <vQueueUnregisterQueue+0x50>)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2100      	movs	r1, #0
 800fa28:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800fa2c:	4a09      	ldr	r2, [pc, #36]	; (800fa54 <vQueueUnregisterQueue+0x50>)
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	00db      	lsls	r3, r3, #3
 800fa32:	4413      	add	r3, r2
 800fa34:	2200      	movs	r2, #0
 800fa36:	605a      	str	r2, [r3, #4]
				break;
 800fa38:	e006      	b.n	800fa48 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	60fb      	str	r3, [r7, #12]
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b07      	cmp	r3, #7
 800fa44:	d9e5      	bls.n	800fa12 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800fa46:	bf00      	nop
 800fa48:	bf00      	nop
 800fa4a:	3714      	adds	r7, #20
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa52:	4770      	bx	lr
 800fa54:	20007d60 	.word	0x20007d60

0800fa58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b086      	sub	sp, #24
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800fa68:	f001 fbcc 	bl	8011204 <vPortEnterCritical>
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa72:	b25b      	sxtb	r3, r3
 800fa74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa78:	d103      	bne.n	800fa82 <vQueueWaitForMessageRestricted+0x2a>
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa88:	b25b      	sxtb	r3, r3
 800fa8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa8e:	d103      	bne.n	800fa98 <vQueueWaitForMessageRestricted+0x40>
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa98:	f001 fbe4 	bl	8011264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800fa9c:	697b      	ldr	r3, [r7, #20]
 800fa9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d106      	bne.n	800fab2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	3324      	adds	r3, #36	; 0x24
 800faa8:	687a      	ldr	r2, [r7, #4]
 800faaa:	68b9      	ldr	r1, [r7, #8]
 800faac:	4618      	mov	r0, r3
 800faae:	f000 fc61 	bl	8010374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800fab2:	6978      	ldr	r0, [r7, #20]
 800fab4:	f7ff fefb 	bl	800f8ae <prvUnlockQueue>
	}
 800fab8:	bf00      	nop
 800faba:	3718      	adds	r7, #24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b08e      	sub	sp, #56	; 0x38
 800fac4:	af04      	add	r7, sp, #16
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	607a      	str	r2, [r7, #4]
 800facc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800face:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d10a      	bne.n	800faea <xTaskCreateStatic+0x2a>
	__asm volatile
 800fad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad8:	f383 8811 	msr	BASEPRI, r3
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f3bf 8f4f 	dsb	sy
 800fae4:	623b      	str	r3, [r7, #32]
}
 800fae6:	bf00      	nop
 800fae8:	e7fe      	b.n	800fae8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800faea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faec:	2b00      	cmp	r3, #0
 800faee:	d10a      	bne.n	800fb06 <xTaskCreateStatic+0x46>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	61fb      	str	r3, [r7, #28]
}
 800fb02:	bf00      	nop
 800fb04:	e7fe      	b.n	800fb04 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800fb06:	23bc      	movs	r3, #188	; 0xbc
 800fb08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800fb0a:	693b      	ldr	r3, [r7, #16]
 800fb0c:	2bbc      	cmp	r3, #188	; 0xbc
 800fb0e:	d00a      	beq.n	800fb26 <xTaskCreateStatic+0x66>
	__asm volatile
 800fb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb14:	f383 8811 	msr	BASEPRI, r3
 800fb18:	f3bf 8f6f 	isb	sy
 800fb1c:	f3bf 8f4f 	dsb	sy
 800fb20:	61bb      	str	r3, [r7, #24]
}
 800fb22:	bf00      	nop
 800fb24:	e7fe      	b.n	800fb24 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800fb26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d01e      	beq.n	800fb6c <xTaskCreateStatic+0xac>
 800fb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d01b      	beq.n	800fb6c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800fb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800fb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb40:	2202      	movs	r2, #2
 800fb42:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800fb46:	2300      	movs	r3, #0
 800fb48:	9303      	str	r3, [sp, #12]
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4c:	9302      	str	r3, [sp, #8]
 800fb4e:	f107 0314 	add.w	r3, r7, #20
 800fb52:	9301      	str	r3, [sp, #4]
 800fb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb56:	9300      	str	r3, [sp, #0]
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	687a      	ldr	r2, [r7, #4]
 800fb5c:	68b9      	ldr	r1, [r7, #8]
 800fb5e:	68f8      	ldr	r0, [r7, #12]
 800fb60:	f000 f850 	bl	800fc04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb66:	f000 f8f3 	bl	800fd50 <prvAddNewTaskToReadyList>
 800fb6a:	e001      	b.n	800fb70 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fb70:	697b      	ldr	r3, [r7, #20]
	}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3728      	adds	r7, #40	; 0x28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}

0800fb7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fb7a:	b580      	push	{r7, lr}
 800fb7c:	b08c      	sub	sp, #48	; 0x30
 800fb7e:	af04      	add	r7, sp, #16
 800fb80:	60f8      	str	r0, [r7, #12]
 800fb82:	60b9      	str	r1, [r7, #8]
 800fb84:	603b      	str	r3, [r7, #0]
 800fb86:	4613      	mov	r3, r2
 800fb88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800fb8a:	88fb      	ldrh	r3, [r7, #6]
 800fb8c:	009b      	lsls	r3, r3, #2
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f001 fc5a 	bl	8011448 <pvPortMalloc>
 800fb94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d00e      	beq.n	800fbba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb9c:	20bc      	movs	r0, #188	; 0xbc
 800fb9e:	f001 fc53 	bl	8011448 <pvPortMalloc>
 800fba2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d003      	beq.n	800fbb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	697a      	ldr	r2, [r7, #20]
 800fbae:	631a      	str	r2, [r3, #48]	; 0x30
 800fbb0:	e005      	b.n	800fbbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fbb2:	6978      	ldr	r0, [r7, #20]
 800fbb4:	f001 fcec 	bl	8011590 <vPortFree>
 800fbb8:	e001      	b.n	800fbbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d017      	beq.n	800fbf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fbcc:	88fa      	ldrh	r2, [r7, #6]
 800fbce:	2300      	movs	r3, #0
 800fbd0:	9303      	str	r3, [sp, #12]
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	9302      	str	r3, [sp, #8]
 800fbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbd8:	9301      	str	r3, [sp, #4]
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	9300      	str	r3, [sp, #0]
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	68b9      	ldr	r1, [r7, #8]
 800fbe2:	68f8      	ldr	r0, [r7, #12]
 800fbe4:	f000 f80e 	bl	800fc04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fbe8:	69f8      	ldr	r0, [r7, #28]
 800fbea:	f000 f8b1 	bl	800fd50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fbee:	2301      	movs	r3, #1
 800fbf0:	61bb      	str	r3, [r7, #24]
 800fbf2:	e002      	b.n	800fbfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fbf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fbfa:	69bb      	ldr	r3, [r7, #24]
	}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3720      	adds	r7, #32
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b088      	sub	sp, #32
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	60f8      	str	r0, [r7, #12]
 800fc0c:	60b9      	str	r1, [r7, #8]
 800fc0e:	607a      	str	r2, [r7, #4]
 800fc10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800fc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	21a5      	movs	r1, #165	; 0xa5
 800fc1e:	f002 f86b 	bl	8011cf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fc2c:	3b01      	subs	r3, #1
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	4413      	add	r3, r2
 800fc32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fc34:	69bb      	ldr	r3, [r7, #24]
 800fc36:	f023 0307 	bic.w	r3, r3, #7
 800fc3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fc3c:	69bb      	ldr	r3, [r7, #24]
 800fc3e:	f003 0307 	and.w	r3, r3, #7
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d00a      	beq.n	800fc5c <prvInitialiseNewTask+0x58>
	__asm volatile
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	f383 8811 	msr	BASEPRI, r3
 800fc4e:	f3bf 8f6f 	isb	sy
 800fc52:	f3bf 8f4f 	dsb	sy
 800fc56:	617b      	str	r3, [r7, #20]
}
 800fc58:	bf00      	nop
 800fc5a:	e7fe      	b.n	800fc5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d01f      	beq.n	800fca2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc62:	2300      	movs	r3, #0
 800fc64:	61fb      	str	r3, [r7, #28]
 800fc66:	e012      	b.n	800fc8e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fc68:	68ba      	ldr	r2, [r7, #8]
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	7819      	ldrb	r1, [r3, #0]
 800fc70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	4413      	add	r3, r2
 800fc76:	3334      	adds	r3, #52	; 0x34
 800fc78:	460a      	mov	r2, r1
 800fc7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fc7c:	68ba      	ldr	r2, [r7, #8]
 800fc7e:	69fb      	ldr	r3, [r7, #28]
 800fc80:	4413      	add	r3, r2
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d006      	beq.n	800fc96 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	61fb      	str	r3, [r7, #28]
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	2b0f      	cmp	r3, #15
 800fc92:	d9e9      	bls.n	800fc68 <prvInitialiseNewTask+0x64>
 800fc94:	e000      	b.n	800fc98 <prvInitialiseNewTask+0x94>
			{
				break;
 800fc96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fca0:	e003      	b.n	800fcaa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcac:	2b37      	cmp	r3, #55	; 0x37
 800fcae:	d901      	bls.n	800fcb4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fcb0:	2337      	movs	r3, #55	; 0x37
 800fcb2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcb8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcbe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800fcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc8:	3304      	adds	r3, #4
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff f806 	bl	800ecdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fcd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd2:	3318      	adds	r3, #24
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	f7ff f801 	bl	800ecdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fce2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800fce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fce8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fcf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fcf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	3354      	adds	r3, #84	; 0x54
 800fd04:	2260      	movs	r2, #96	; 0x60
 800fd06:	2100      	movs	r1, #0
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f001 fff5 	bl	8011cf8 <memset>
 800fd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd10:	4a0c      	ldr	r2, [pc, #48]	; (800fd44 <prvInitialiseNewTask+0x140>)
 800fd12:	659a      	str	r2, [r3, #88]	; 0x58
 800fd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd16:	4a0c      	ldr	r2, [pc, #48]	; (800fd48 <prvInitialiseNewTask+0x144>)
 800fd18:	65da      	str	r2, [r3, #92]	; 0x5c
 800fd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd1c:	4a0b      	ldr	r2, [pc, #44]	; (800fd4c <prvInitialiseNewTask+0x148>)
 800fd1e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fd20:	683a      	ldr	r2, [r7, #0]
 800fd22:	68f9      	ldr	r1, [r7, #12]
 800fd24:	69b8      	ldr	r0, [r7, #24]
 800fd26:	f001 f941 	bl	8010fac <pxPortInitialiseStack>
 800fd2a:	4602      	mov	r2, r0
 800fd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d002      	beq.n	800fd3c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fd36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd3c:	bf00      	nop
 800fd3e:	3720      	adds	r7, #32
 800fd40:	46bd      	mov	sp, r7
 800fd42:	bd80      	pop	{r7, pc}
 800fd44:	08016dfc 	.word	0x08016dfc
 800fd48:	08016e1c 	.word	0x08016e1c
 800fd4c:	08016ddc 	.word	0x08016ddc

0800fd50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fd58:	f001 fa54 	bl	8011204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fd5c:	4b2d      	ldr	r3, [pc, #180]	; (800fe14 <prvAddNewTaskToReadyList+0xc4>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	3301      	adds	r3, #1
 800fd62:	4a2c      	ldr	r2, [pc, #176]	; (800fe14 <prvAddNewTaskToReadyList+0xc4>)
 800fd64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fd66:	4b2c      	ldr	r3, [pc, #176]	; (800fe18 <prvAddNewTaskToReadyList+0xc8>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d109      	bne.n	800fd82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fd6e:	4a2a      	ldr	r2, [pc, #168]	; (800fe18 <prvAddNewTaskToReadyList+0xc8>)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fd74:	4b27      	ldr	r3, [pc, #156]	; (800fe14 <prvAddNewTaskToReadyList+0xc4>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d110      	bne.n	800fd9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fd7c:	f000 fc26 	bl	80105cc <prvInitialiseTaskLists>
 800fd80:	e00d      	b.n	800fd9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fd82:	4b26      	ldr	r3, [pc, #152]	; (800fe1c <prvAddNewTaskToReadyList+0xcc>)
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d109      	bne.n	800fd9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fd8a:	4b23      	ldr	r3, [pc, #140]	; (800fe18 <prvAddNewTaskToReadyList+0xc8>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d802      	bhi.n	800fd9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fd98:	4a1f      	ldr	r2, [pc, #124]	; (800fe18 <prvAddNewTaskToReadyList+0xc8>)
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fd9e:	4b20      	ldr	r3, [pc, #128]	; (800fe20 <prvAddNewTaskToReadyList+0xd0>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	3301      	adds	r3, #1
 800fda4:	4a1e      	ldr	r2, [pc, #120]	; (800fe20 <prvAddNewTaskToReadyList+0xd0>)
 800fda6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800fda8:	4b1d      	ldr	r3, [pc, #116]	; (800fe20 <prvAddNewTaskToReadyList+0xd0>)
 800fdaa:	681a      	ldr	r2, [r3, #0]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdb4:	4b1b      	ldr	r3, [pc, #108]	; (800fe24 <prvAddNewTaskToReadyList+0xd4>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d903      	bls.n	800fdc4 <prvAddNewTaskToReadyList+0x74>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc0:	4a18      	ldr	r2, [pc, #96]	; (800fe24 <prvAddNewTaskToReadyList+0xd4>)
 800fdc2:	6013      	str	r3, [r2, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdc8:	4613      	mov	r3, r2
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	4413      	add	r3, r2
 800fdce:	009b      	lsls	r3, r3, #2
 800fdd0:	4a15      	ldr	r2, [pc, #84]	; (800fe28 <prvAddNewTaskToReadyList+0xd8>)
 800fdd2:	441a      	add	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	4619      	mov	r1, r3
 800fdda:	4610      	mov	r0, r2
 800fddc:	f7fe ff8b 	bl	800ecf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fde0:	f001 fa40 	bl	8011264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fde4:	4b0d      	ldr	r3, [pc, #52]	; (800fe1c <prvAddNewTaskToReadyList+0xcc>)
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d00e      	beq.n	800fe0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fdec:	4b0a      	ldr	r3, [pc, #40]	; (800fe18 <prvAddNewTaskToReadyList+0xc8>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d207      	bcs.n	800fe0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fdfa:	4b0c      	ldr	r3, [pc, #48]	; (800fe2c <prvAddNewTaskToReadyList+0xdc>)
 800fdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe00:	601a      	str	r2, [r3, #0]
 800fe02:	f3bf 8f4f 	dsb	sy
 800fe06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fe0a:	bf00      	nop
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
 800fe12:	bf00      	nop
 800fe14:	20008274 	.word	0x20008274
 800fe18:	20007da0 	.word	0x20007da0
 800fe1c:	20008280 	.word	0x20008280
 800fe20:	20008290 	.word	0x20008290
 800fe24:	2000827c 	.word	0x2000827c
 800fe28:	20007da4 	.word	0x20007da4
 800fe2c:	e000ed04 	.word	0xe000ed04

0800fe30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d017      	beq.n	800fe72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fe42:	4b13      	ldr	r3, [pc, #76]	; (800fe90 <vTaskDelay+0x60>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00a      	beq.n	800fe60 <vTaskDelay+0x30>
	__asm volatile
 800fe4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe4e:	f383 8811 	msr	BASEPRI, r3
 800fe52:	f3bf 8f6f 	isb	sy
 800fe56:	f3bf 8f4f 	dsb	sy
 800fe5a:	60bb      	str	r3, [r7, #8]
}
 800fe5c:	bf00      	nop
 800fe5e:	e7fe      	b.n	800fe5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fe60:	f000 f88a 	bl	800ff78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fe64:	2100      	movs	r1, #0
 800fe66:	6878      	ldr	r0, [r7, #4]
 800fe68:	f000 fcfe 	bl	8010868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fe6c:	f000 f892 	bl	800ff94 <xTaskResumeAll>
 800fe70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d107      	bne.n	800fe88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fe78:	4b06      	ldr	r3, [pc, #24]	; (800fe94 <vTaskDelay+0x64>)
 800fe7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe7e:	601a      	str	r2, [r3, #0]
 800fe80:	f3bf 8f4f 	dsb	sy
 800fe84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fe88:	bf00      	nop
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	2000829c 	.word	0x2000829c
 800fe94:	e000ed04 	.word	0xe000ed04

0800fe98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b08a      	sub	sp, #40	; 0x28
 800fe9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fe9e:	2300      	movs	r3, #0
 800fea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fea2:	2300      	movs	r3, #0
 800fea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fea6:	463a      	mov	r2, r7
 800fea8:	1d39      	adds	r1, r7, #4
 800feaa:	f107 0308 	add.w	r3, r7, #8
 800feae:	4618      	mov	r0, r3
 800feb0:	f7fe fec0 	bl	800ec34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	68ba      	ldr	r2, [r7, #8]
 800feba:	9202      	str	r2, [sp, #8]
 800febc:	9301      	str	r3, [sp, #4]
 800febe:	2300      	movs	r3, #0
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	2300      	movs	r3, #0
 800fec4:	460a      	mov	r2, r1
 800fec6:	4924      	ldr	r1, [pc, #144]	; (800ff58 <vTaskStartScheduler+0xc0>)
 800fec8:	4824      	ldr	r0, [pc, #144]	; (800ff5c <vTaskStartScheduler+0xc4>)
 800feca:	f7ff fdf9 	bl	800fac0 <xTaskCreateStatic>
 800fece:	4603      	mov	r3, r0
 800fed0:	4a23      	ldr	r2, [pc, #140]	; (800ff60 <vTaskStartScheduler+0xc8>)
 800fed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fed4:	4b22      	ldr	r3, [pc, #136]	; (800ff60 <vTaskStartScheduler+0xc8>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d002      	beq.n	800fee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fedc:	2301      	movs	r3, #1
 800fede:	617b      	str	r3, [r7, #20]
 800fee0:	e001      	b.n	800fee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fee2:	2300      	movs	r3, #0
 800fee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	2b01      	cmp	r3, #1
 800feea:	d102      	bne.n	800fef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800feec:	f000 fd10 	bl	8010910 <xTimerCreateTimerTask>
 800fef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d11b      	bne.n	800ff30 <vTaskStartScheduler+0x98>
	__asm volatile
 800fef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fefc:	f383 8811 	msr	BASEPRI, r3
 800ff00:	f3bf 8f6f 	isb	sy
 800ff04:	f3bf 8f4f 	dsb	sy
 800ff08:	613b      	str	r3, [r7, #16]
}
 800ff0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ff0c:	4b15      	ldr	r3, [pc, #84]	; (800ff64 <vTaskStartScheduler+0xcc>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	3354      	adds	r3, #84	; 0x54
 800ff12:	4a15      	ldr	r2, [pc, #84]	; (800ff68 <vTaskStartScheduler+0xd0>)
 800ff14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ff16:	4b15      	ldr	r3, [pc, #84]	; (800ff6c <vTaskStartScheduler+0xd4>)
 800ff18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ff1e:	4b14      	ldr	r3, [pc, #80]	; (800ff70 <vTaskStartScheduler+0xd8>)
 800ff20:	2201      	movs	r2, #1
 800ff22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ff24:	4b13      	ldr	r3, [pc, #76]	; (800ff74 <vTaskStartScheduler+0xdc>)
 800ff26:	2200      	movs	r2, #0
 800ff28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ff2a:	f001 f8c9 	bl	80110c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ff2e:	e00e      	b.n	800ff4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff36:	d10a      	bne.n	800ff4e <vTaskStartScheduler+0xb6>
	__asm volatile
 800ff38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	60fb      	str	r3, [r7, #12]
}
 800ff4a:	bf00      	nop
 800ff4c:	e7fe      	b.n	800ff4c <vTaskStartScheduler+0xb4>
}
 800ff4e:	bf00      	nop
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	08014adc 	.word	0x08014adc
 800ff5c:	0801059d 	.word	0x0801059d
 800ff60:	20008298 	.word	0x20008298
 800ff64:	20007da0 	.word	0x20007da0
 800ff68:	200000b8 	.word	0x200000b8
 800ff6c:	20008294 	.word	0x20008294
 800ff70:	20008280 	.word	0x20008280
 800ff74:	20008278 	.word	0x20008278

0800ff78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ff7c:	4b04      	ldr	r3, [pc, #16]	; (800ff90 <vTaskSuspendAll+0x18>)
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	3301      	adds	r3, #1
 800ff82:	4a03      	ldr	r2, [pc, #12]	; (800ff90 <vTaskSuspendAll+0x18>)
 800ff84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ff86:	bf00      	nop
 800ff88:	46bd      	mov	sp, r7
 800ff8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff8e:	4770      	bx	lr
 800ff90:	2000829c 	.word	0x2000829c

0800ff94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b084      	sub	sp, #16
 800ff98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ff9a:	2300      	movs	r3, #0
 800ff9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ffa2:	4b42      	ldr	r3, [pc, #264]	; (80100ac <xTaskResumeAll+0x118>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10a      	bne.n	800ffc0 <xTaskResumeAll+0x2c>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	603b      	str	r3, [r7, #0]
}
 800ffbc:	bf00      	nop
 800ffbe:	e7fe      	b.n	800ffbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ffc0:	f001 f920 	bl	8011204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ffc4:	4b39      	ldr	r3, [pc, #228]	; (80100ac <xTaskResumeAll+0x118>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	4a38      	ldr	r2, [pc, #224]	; (80100ac <xTaskResumeAll+0x118>)
 800ffcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ffce:	4b37      	ldr	r3, [pc, #220]	; (80100ac <xTaskResumeAll+0x118>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d162      	bne.n	801009c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ffd6:	4b36      	ldr	r3, [pc, #216]	; (80100b0 <xTaskResumeAll+0x11c>)
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d05e      	beq.n	801009c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ffde:	e02f      	b.n	8010040 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffe0:	4b34      	ldr	r3, [pc, #208]	; (80100b4 <xTaskResumeAll+0x120>)
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3318      	adds	r3, #24
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe fedf 	bl	800edb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3304      	adds	r3, #4
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7fe feda 	bl	800edb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010000:	4b2d      	ldr	r3, [pc, #180]	; (80100b8 <xTaskResumeAll+0x124>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d903      	bls.n	8010010 <xTaskResumeAll+0x7c>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000c:	4a2a      	ldr	r2, [pc, #168]	; (80100b8 <xTaskResumeAll+0x124>)
 801000e:	6013      	str	r3, [r2, #0]
 8010010:	68fb      	ldr	r3, [r7, #12]
 8010012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010014:	4613      	mov	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	4a27      	ldr	r2, [pc, #156]	; (80100bc <xTaskResumeAll+0x128>)
 801001e:	441a      	add	r2, r3
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	3304      	adds	r3, #4
 8010024:	4619      	mov	r1, r3
 8010026:	4610      	mov	r0, r2
 8010028:	f7fe fe65 	bl	800ecf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010030:	4b23      	ldr	r3, [pc, #140]	; (80100c0 <xTaskResumeAll+0x12c>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010036:	429a      	cmp	r2, r3
 8010038:	d302      	bcc.n	8010040 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801003a:	4b22      	ldr	r3, [pc, #136]	; (80100c4 <xTaskResumeAll+0x130>)
 801003c:	2201      	movs	r2, #1
 801003e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010040:	4b1c      	ldr	r3, [pc, #112]	; (80100b4 <xTaskResumeAll+0x120>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1cb      	bne.n	800ffe0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	2b00      	cmp	r3, #0
 801004c:	d001      	beq.n	8010052 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801004e:	f000 fb5f 	bl	8010710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010052:	4b1d      	ldr	r3, [pc, #116]	; (80100c8 <xTaskResumeAll+0x134>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d010      	beq.n	8010080 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801005e:	f000 f847 	bl	80100f0 <xTaskIncrementTick>
 8010062:	4603      	mov	r3, r0
 8010064:	2b00      	cmp	r3, #0
 8010066:	d002      	beq.n	801006e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010068:	4b16      	ldr	r3, [pc, #88]	; (80100c4 <xTaskResumeAll+0x130>)
 801006a:	2201      	movs	r2, #1
 801006c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	3b01      	subs	r3, #1
 8010072:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1f1      	bne.n	801005e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801007a:	4b13      	ldr	r3, [pc, #76]	; (80100c8 <xTaskResumeAll+0x134>)
 801007c:	2200      	movs	r2, #0
 801007e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010080:	4b10      	ldr	r3, [pc, #64]	; (80100c4 <xTaskResumeAll+0x130>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d009      	beq.n	801009c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010088:	2301      	movs	r3, #1
 801008a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801008c:	4b0f      	ldr	r3, [pc, #60]	; (80100cc <xTaskResumeAll+0x138>)
 801008e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010092:	601a      	str	r2, [r3, #0]
 8010094:	f3bf 8f4f 	dsb	sy
 8010098:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801009c:	f001 f8e2 	bl	8011264 <vPortExitCritical>

	return xAlreadyYielded;
 80100a0:	68bb      	ldr	r3, [r7, #8]
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	2000829c 	.word	0x2000829c
 80100b0:	20008274 	.word	0x20008274
 80100b4:	20008234 	.word	0x20008234
 80100b8:	2000827c 	.word	0x2000827c
 80100bc:	20007da4 	.word	0x20007da4
 80100c0:	20007da0 	.word	0x20007da0
 80100c4:	20008288 	.word	0x20008288
 80100c8:	20008284 	.word	0x20008284
 80100cc:	e000ed04 	.word	0xe000ed04

080100d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80100d0:	b480      	push	{r7}
 80100d2:	b083      	sub	sp, #12
 80100d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80100d6:	4b05      	ldr	r3, [pc, #20]	; (80100ec <xTaskGetTickCount+0x1c>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80100dc:	687b      	ldr	r3, [r7, #4]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	370c      	adds	r7, #12
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	20008278 	.word	0x20008278

080100f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80100f0:	b580      	push	{r7, lr}
 80100f2:	b086      	sub	sp, #24
 80100f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80100fa:	4b4f      	ldr	r3, [pc, #316]	; (8010238 <xTaskIncrementTick+0x148>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	f040 808f 	bne.w	8010222 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010104:	4b4d      	ldr	r3, [pc, #308]	; (801023c <xTaskIncrementTick+0x14c>)
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	3301      	adds	r3, #1
 801010a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801010c:	4a4b      	ldr	r2, [pc, #300]	; (801023c <xTaskIncrementTick+0x14c>)
 801010e:	693b      	ldr	r3, [r7, #16]
 8010110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d120      	bne.n	801015a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010118:	4b49      	ldr	r3, [pc, #292]	; (8010240 <xTaskIncrementTick+0x150>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d00a      	beq.n	8010138 <xTaskIncrementTick+0x48>
	__asm volatile
 8010122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010126:	f383 8811 	msr	BASEPRI, r3
 801012a:	f3bf 8f6f 	isb	sy
 801012e:	f3bf 8f4f 	dsb	sy
 8010132:	603b      	str	r3, [r7, #0]
}
 8010134:	bf00      	nop
 8010136:	e7fe      	b.n	8010136 <xTaskIncrementTick+0x46>
 8010138:	4b41      	ldr	r3, [pc, #260]	; (8010240 <xTaskIncrementTick+0x150>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	60fb      	str	r3, [r7, #12]
 801013e:	4b41      	ldr	r3, [pc, #260]	; (8010244 <xTaskIncrementTick+0x154>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	4a3f      	ldr	r2, [pc, #252]	; (8010240 <xTaskIncrementTick+0x150>)
 8010144:	6013      	str	r3, [r2, #0]
 8010146:	4a3f      	ldr	r2, [pc, #252]	; (8010244 <xTaskIncrementTick+0x154>)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	6013      	str	r3, [r2, #0]
 801014c:	4b3e      	ldr	r3, [pc, #248]	; (8010248 <xTaskIncrementTick+0x158>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3301      	adds	r3, #1
 8010152:	4a3d      	ldr	r2, [pc, #244]	; (8010248 <xTaskIncrementTick+0x158>)
 8010154:	6013      	str	r3, [r2, #0]
 8010156:	f000 fadb 	bl	8010710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801015a:	4b3c      	ldr	r3, [pc, #240]	; (801024c <xTaskIncrementTick+0x15c>)
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	693a      	ldr	r2, [r7, #16]
 8010160:	429a      	cmp	r2, r3
 8010162:	d349      	bcc.n	80101f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010164:	4b36      	ldr	r3, [pc, #216]	; (8010240 <xTaskIncrementTick+0x150>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d104      	bne.n	8010178 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801016e:	4b37      	ldr	r3, [pc, #220]	; (801024c <xTaskIncrementTick+0x15c>)
 8010170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010174:	601a      	str	r2, [r3, #0]
					break;
 8010176:	e03f      	b.n	80101f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010178:	4b31      	ldr	r3, [pc, #196]	; (8010240 <xTaskIncrementTick+0x150>)
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010188:	693a      	ldr	r2, [r7, #16]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	429a      	cmp	r2, r3
 801018e:	d203      	bcs.n	8010198 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010190:	4a2e      	ldr	r2, [pc, #184]	; (801024c <xTaskIncrementTick+0x15c>)
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010196:	e02f      	b.n	80101f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	3304      	adds	r3, #4
 801019c:	4618      	mov	r0, r3
 801019e:	f7fe fe07 	bl	800edb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d004      	beq.n	80101b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	3318      	adds	r3, #24
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fe fdfe 	bl	800edb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101b8:	4b25      	ldr	r3, [pc, #148]	; (8010250 <xTaskIncrementTick+0x160>)
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d903      	bls.n	80101c8 <xTaskIncrementTick+0xd8>
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c4:	4a22      	ldr	r2, [pc, #136]	; (8010250 <xTaskIncrementTick+0x160>)
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101cc:	4613      	mov	r3, r2
 80101ce:	009b      	lsls	r3, r3, #2
 80101d0:	4413      	add	r3, r2
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	4a1f      	ldr	r2, [pc, #124]	; (8010254 <xTaskIncrementTick+0x164>)
 80101d6:	441a      	add	r2, r3
 80101d8:	68bb      	ldr	r3, [r7, #8]
 80101da:	3304      	adds	r3, #4
 80101dc:	4619      	mov	r1, r3
 80101de:	4610      	mov	r0, r2
 80101e0:	f7fe fd89 	bl	800ecf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101e8:	4b1b      	ldr	r3, [pc, #108]	; (8010258 <xTaskIncrementTick+0x168>)
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d3b8      	bcc.n	8010164 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80101f2:	2301      	movs	r3, #1
 80101f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80101f6:	e7b5      	b.n	8010164 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80101f8:	4b17      	ldr	r3, [pc, #92]	; (8010258 <xTaskIncrementTick+0x168>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101fe:	4915      	ldr	r1, [pc, #84]	; (8010254 <xTaskIncrementTick+0x164>)
 8010200:	4613      	mov	r3, r2
 8010202:	009b      	lsls	r3, r3, #2
 8010204:	4413      	add	r3, r2
 8010206:	009b      	lsls	r3, r3, #2
 8010208:	440b      	add	r3, r1
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d901      	bls.n	8010214 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8010210:	2301      	movs	r3, #1
 8010212:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010214:	4b11      	ldr	r3, [pc, #68]	; (801025c <xTaskIncrementTick+0x16c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d007      	beq.n	801022c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801021c:	2301      	movs	r3, #1
 801021e:	617b      	str	r3, [r7, #20]
 8010220:	e004      	b.n	801022c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010222:	4b0f      	ldr	r3, [pc, #60]	; (8010260 <xTaskIncrementTick+0x170>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	3301      	adds	r3, #1
 8010228:	4a0d      	ldr	r2, [pc, #52]	; (8010260 <xTaskIncrementTick+0x170>)
 801022a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801022c:	697b      	ldr	r3, [r7, #20]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3718      	adds	r7, #24
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
 8010236:	bf00      	nop
 8010238:	2000829c 	.word	0x2000829c
 801023c:	20008278 	.word	0x20008278
 8010240:	2000822c 	.word	0x2000822c
 8010244:	20008230 	.word	0x20008230
 8010248:	2000828c 	.word	0x2000828c
 801024c:	20008294 	.word	0x20008294
 8010250:	2000827c 	.word	0x2000827c
 8010254:	20007da4 	.word	0x20007da4
 8010258:	20007da0 	.word	0x20007da0
 801025c:	20008288 	.word	0x20008288
 8010260:	20008284 	.word	0x20008284

08010264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010264:	b480      	push	{r7}
 8010266:	b085      	sub	sp, #20
 8010268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801026a:	4b2a      	ldr	r3, [pc, #168]	; (8010314 <vTaskSwitchContext+0xb0>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d003      	beq.n	801027a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010272:	4b29      	ldr	r3, [pc, #164]	; (8010318 <vTaskSwitchContext+0xb4>)
 8010274:	2201      	movs	r2, #1
 8010276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010278:	e046      	b.n	8010308 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801027a:	4b27      	ldr	r3, [pc, #156]	; (8010318 <vTaskSwitchContext+0xb4>)
 801027c:	2200      	movs	r2, #0
 801027e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010280:	4b26      	ldr	r3, [pc, #152]	; (801031c <vTaskSwitchContext+0xb8>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	60fb      	str	r3, [r7, #12]
 8010286:	e010      	b.n	80102aa <vTaskSwitchContext+0x46>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d10a      	bne.n	80102a4 <vTaskSwitchContext+0x40>
	__asm volatile
 801028e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010292:	f383 8811 	msr	BASEPRI, r3
 8010296:	f3bf 8f6f 	isb	sy
 801029a:	f3bf 8f4f 	dsb	sy
 801029e:	607b      	str	r3, [r7, #4]
}
 80102a0:	bf00      	nop
 80102a2:	e7fe      	b.n	80102a2 <vTaskSwitchContext+0x3e>
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3b01      	subs	r3, #1
 80102a8:	60fb      	str	r3, [r7, #12]
 80102aa:	491d      	ldr	r1, [pc, #116]	; (8010320 <vTaskSwitchContext+0xbc>)
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	4613      	mov	r3, r2
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	4413      	add	r3, r2
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	440b      	add	r3, r1
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d0e4      	beq.n	8010288 <vTaskSwitchContext+0x24>
 80102be:	68fa      	ldr	r2, [r7, #12]
 80102c0:	4613      	mov	r3, r2
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	4a15      	ldr	r2, [pc, #84]	; (8010320 <vTaskSwitchContext+0xbc>)
 80102ca:	4413      	add	r3, r2
 80102cc:	60bb      	str	r3, [r7, #8]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	685b      	ldr	r3, [r3, #4]
 80102d2:	685a      	ldr	r2, [r3, #4]
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	605a      	str	r2, [r3, #4]
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	685a      	ldr	r2, [r3, #4]
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	3308      	adds	r3, #8
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d104      	bne.n	80102ee <vTaskSwitchContext+0x8a>
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	685a      	ldr	r2, [r3, #4]
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	605a      	str	r2, [r3, #4]
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	4a0b      	ldr	r2, [pc, #44]	; (8010324 <vTaskSwitchContext+0xc0>)
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	4a08      	ldr	r2, [pc, #32]	; (801031c <vTaskSwitchContext+0xb8>)
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80102fe:	4b09      	ldr	r3, [pc, #36]	; (8010324 <vTaskSwitchContext+0xc0>)
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	3354      	adds	r3, #84	; 0x54
 8010304:	4a08      	ldr	r2, [pc, #32]	; (8010328 <vTaskSwitchContext+0xc4>)
 8010306:	6013      	str	r3, [r2, #0]
}
 8010308:	bf00      	nop
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	2000829c 	.word	0x2000829c
 8010318:	20008288 	.word	0x20008288
 801031c:	2000827c 	.word	0x2000827c
 8010320:	20007da4 	.word	0x20007da4
 8010324:	20007da0 	.word	0x20007da0
 8010328:	200000b8 	.word	0x200000b8

0801032c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10a      	bne.n	8010352 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801033c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010340:	f383 8811 	msr	BASEPRI, r3
 8010344:	f3bf 8f6f 	isb	sy
 8010348:	f3bf 8f4f 	dsb	sy
 801034c:	60fb      	str	r3, [r7, #12]
}
 801034e:	bf00      	nop
 8010350:	e7fe      	b.n	8010350 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010352:	4b07      	ldr	r3, [pc, #28]	; (8010370 <vTaskPlaceOnEventList+0x44>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	3318      	adds	r3, #24
 8010358:	4619      	mov	r1, r3
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7fe fcef 	bl	800ed3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010360:	2101      	movs	r1, #1
 8010362:	6838      	ldr	r0, [r7, #0]
 8010364:	f000 fa80 	bl	8010868 <prvAddCurrentTaskToDelayedList>
}
 8010368:	bf00      	nop
 801036a:	3710      	adds	r7, #16
 801036c:	46bd      	mov	sp, r7
 801036e:	bd80      	pop	{r7, pc}
 8010370:	20007da0 	.word	0x20007da0

08010374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010374:	b580      	push	{r7, lr}
 8010376:	b086      	sub	sp, #24
 8010378:	af00      	add	r7, sp, #0
 801037a:	60f8      	str	r0, [r7, #12]
 801037c:	60b9      	str	r1, [r7, #8]
 801037e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10a      	bne.n	801039c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8010386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801038a:	f383 8811 	msr	BASEPRI, r3
 801038e:	f3bf 8f6f 	isb	sy
 8010392:	f3bf 8f4f 	dsb	sy
 8010396:	617b      	str	r3, [r7, #20]
}
 8010398:	bf00      	nop
 801039a:	e7fe      	b.n	801039a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801039c:	4b0a      	ldr	r3, [pc, #40]	; (80103c8 <vTaskPlaceOnEventListRestricted+0x54>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3318      	adds	r3, #24
 80103a2:	4619      	mov	r1, r3
 80103a4:	68f8      	ldr	r0, [r7, #12]
 80103a6:	f7fe fca6 	bl	800ecf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80103b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80103b6:	6879      	ldr	r1, [r7, #4]
 80103b8:	68b8      	ldr	r0, [r7, #8]
 80103ba:	f000 fa55 	bl	8010868 <prvAddCurrentTaskToDelayedList>
	}
 80103be:	bf00      	nop
 80103c0:	3718      	adds	r7, #24
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20007da0 	.word	0x20007da0

080103cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b086      	sub	sp, #24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	68db      	ldr	r3, [r3, #12]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d10a      	bne.n	80103f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80103e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e6:	f383 8811 	msr	BASEPRI, r3
 80103ea:	f3bf 8f6f 	isb	sy
 80103ee:	f3bf 8f4f 	dsb	sy
 80103f2:	60fb      	str	r3, [r7, #12]
}
 80103f4:	bf00      	nop
 80103f6:	e7fe      	b.n	80103f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	3318      	adds	r3, #24
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7fe fcd7 	bl	800edb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010402:	4b1e      	ldr	r3, [pc, #120]	; (801047c <xTaskRemoveFromEventList+0xb0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d11d      	bne.n	8010446 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	3304      	adds	r3, #4
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe fcce 	bl	800edb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010418:	4b19      	ldr	r3, [pc, #100]	; (8010480 <xTaskRemoveFromEventList+0xb4>)
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	429a      	cmp	r2, r3
 801041e:	d903      	bls.n	8010428 <xTaskRemoveFromEventList+0x5c>
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010424:	4a16      	ldr	r2, [pc, #88]	; (8010480 <xTaskRemoveFromEventList+0xb4>)
 8010426:	6013      	str	r3, [r2, #0]
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801042c:	4613      	mov	r3, r2
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4a13      	ldr	r2, [pc, #76]	; (8010484 <xTaskRemoveFromEventList+0xb8>)
 8010436:	441a      	add	r2, r3
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	3304      	adds	r3, #4
 801043c:	4619      	mov	r1, r3
 801043e:	4610      	mov	r0, r2
 8010440:	f7fe fc59 	bl	800ecf6 <vListInsertEnd>
 8010444:	e005      	b.n	8010452 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	3318      	adds	r3, #24
 801044a:	4619      	mov	r1, r3
 801044c:	480e      	ldr	r0, [pc, #56]	; (8010488 <xTaskRemoveFromEventList+0xbc>)
 801044e:	f7fe fc52 	bl	800ecf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010456:	4b0d      	ldr	r3, [pc, #52]	; (801048c <xTaskRemoveFromEventList+0xc0>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801045c:	429a      	cmp	r2, r3
 801045e:	d905      	bls.n	801046c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010460:	2301      	movs	r3, #1
 8010462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010464:	4b0a      	ldr	r3, [pc, #40]	; (8010490 <xTaskRemoveFromEventList+0xc4>)
 8010466:	2201      	movs	r2, #1
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	e001      	b.n	8010470 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801046c:	2300      	movs	r3, #0
 801046e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010470:	697b      	ldr	r3, [r7, #20]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	2000829c 	.word	0x2000829c
 8010480:	2000827c 	.word	0x2000827c
 8010484:	20007da4 	.word	0x20007da4
 8010488:	20008234 	.word	0x20008234
 801048c:	20007da0 	.word	0x20007da0
 8010490:	20008288 	.word	0x20008288

08010494 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010494:	b480      	push	{r7}
 8010496:	b083      	sub	sp, #12
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801049c:	4b06      	ldr	r3, [pc, #24]	; (80104b8 <vTaskInternalSetTimeOutState+0x24>)
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80104a4:	4b05      	ldr	r3, [pc, #20]	; (80104bc <vTaskInternalSetTimeOutState+0x28>)
 80104a6:	681a      	ldr	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	605a      	str	r2, [r3, #4]
}
 80104ac:	bf00      	nop
 80104ae:	370c      	adds	r7, #12
 80104b0:	46bd      	mov	sp, r7
 80104b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b6:	4770      	bx	lr
 80104b8:	2000828c 	.word	0x2000828c
 80104bc:	20008278 	.word	0x20008278

080104c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b088      	sub	sp, #32
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10a      	bne.n	80104e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80104d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d4:	f383 8811 	msr	BASEPRI, r3
 80104d8:	f3bf 8f6f 	isb	sy
 80104dc:	f3bf 8f4f 	dsb	sy
 80104e0:	613b      	str	r3, [r7, #16]
}
 80104e2:	bf00      	nop
 80104e4:	e7fe      	b.n	80104e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d10a      	bne.n	8010502 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80104ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f0:	f383 8811 	msr	BASEPRI, r3
 80104f4:	f3bf 8f6f 	isb	sy
 80104f8:	f3bf 8f4f 	dsb	sy
 80104fc:	60fb      	str	r3, [r7, #12]
}
 80104fe:	bf00      	nop
 8010500:	e7fe      	b.n	8010500 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010502:	f000 fe7f 	bl	8011204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010506:	4b1d      	ldr	r3, [pc, #116]	; (801057c <xTaskCheckForTimeOut+0xbc>)
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	69ba      	ldr	r2, [r7, #24]
 8010512:	1ad3      	subs	r3, r2, r3
 8010514:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801051e:	d102      	bne.n	8010526 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010520:	2300      	movs	r3, #0
 8010522:	61fb      	str	r3, [r7, #28]
 8010524:	e023      	b.n	801056e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681a      	ldr	r2, [r3, #0]
 801052a:	4b15      	ldr	r3, [pc, #84]	; (8010580 <xTaskCheckForTimeOut+0xc0>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	429a      	cmp	r2, r3
 8010530:	d007      	beq.n	8010542 <xTaskCheckForTimeOut+0x82>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	685b      	ldr	r3, [r3, #4]
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	429a      	cmp	r2, r3
 801053a:	d302      	bcc.n	8010542 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801053c:	2301      	movs	r3, #1
 801053e:	61fb      	str	r3, [r7, #28]
 8010540:	e015      	b.n	801056e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	697a      	ldr	r2, [r7, #20]
 8010548:	429a      	cmp	r2, r3
 801054a:	d20b      	bcs.n	8010564 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	681a      	ldr	r2, [r3, #0]
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	1ad2      	subs	r2, r2, r3
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f7ff ff9b 	bl	8010494 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801055e:	2300      	movs	r3, #0
 8010560:	61fb      	str	r3, [r7, #28]
 8010562:	e004      	b.n	801056e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	2200      	movs	r2, #0
 8010568:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801056a:	2301      	movs	r3, #1
 801056c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801056e:	f000 fe79 	bl	8011264 <vPortExitCritical>

	return xReturn;
 8010572:	69fb      	ldr	r3, [r7, #28]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3720      	adds	r7, #32
 8010578:	46bd      	mov	sp, r7
 801057a:	bd80      	pop	{r7, pc}
 801057c:	20008278 	.word	0x20008278
 8010580:	2000828c 	.word	0x2000828c

08010584 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010584:	b480      	push	{r7}
 8010586:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010588:	4b03      	ldr	r3, [pc, #12]	; (8010598 <vTaskMissedYield+0x14>)
 801058a:	2201      	movs	r2, #1
 801058c:	601a      	str	r2, [r3, #0]
}
 801058e:	bf00      	nop
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	20008288 	.word	0x20008288

0801059c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b082      	sub	sp, #8
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80105a4:	f000 f852 	bl	801064c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80105a8:	4b06      	ldr	r3, [pc, #24]	; (80105c4 <prvIdleTask+0x28>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d9f9      	bls.n	80105a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80105b0:	4b05      	ldr	r3, [pc, #20]	; (80105c8 <prvIdleTask+0x2c>)
 80105b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105b6:	601a      	str	r2, [r3, #0]
 80105b8:	f3bf 8f4f 	dsb	sy
 80105bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80105c0:	e7f0      	b.n	80105a4 <prvIdleTask+0x8>
 80105c2:	bf00      	nop
 80105c4:	20007da4 	.word	0x20007da4
 80105c8:	e000ed04 	.word	0xe000ed04

080105cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105d2:	2300      	movs	r3, #0
 80105d4:	607b      	str	r3, [r7, #4]
 80105d6:	e00c      	b.n	80105f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	4613      	mov	r3, r2
 80105dc:	009b      	lsls	r3, r3, #2
 80105de:	4413      	add	r3, r2
 80105e0:	009b      	lsls	r3, r3, #2
 80105e2:	4a12      	ldr	r2, [pc, #72]	; (801062c <prvInitialiseTaskLists+0x60>)
 80105e4:	4413      	add	r3, r2
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fe fb58 	bl	800ec9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	3301      	adds	r3, #1
 80105f0:	607b      	str	r3, [r7, #4]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2b37      	cmp	r3, #55	; 0x37
 80105f6:	d9ef      	bls.n	80105d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80105f8:	480d      	ldr	r0, [pc, #52]	; (8010630 <prvInitialiseTaskLists+0x64>)
 80105fa:	f7fe fb4f 	bl	800ec9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80105fe:	480d      	ldr	r0, [pc, #52]	; (8010634 <prvInitialiseTaskLists+0x68>)
 8010600:	f7fe fb4c 	bl	800ec9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010604:	480c      	ldr	r0, [pc, #48]	; (8010638 <prvInitialiseTaskLists+0x6c>)
 8010606:	f7fe fb49 	bl	800ec9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801060a:	480c      	ldr	r0, [pc, #48]	; (801063c <prvInitialiseTaskLists+0x70>)
 801060c:	f7fe fb46 	bl	800ec9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010610:	480b      	ldr	r0, [pc, #44]	; (8010640 <prvInitialiseTaskLists+0x74>)
 8010612:	f7fe fb43 	bl	800ec9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010616:	4b0b      	ldr	r3, [pc, #44]	; (8010644 <prvInitialiseTaskLists+0x78>)
 8010618:	4a05      	ldr	r2, [pc, #20]	; (8010630 <prvInitialiseTaskLists+0x64>)
 801061a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801061c:	4b0a      	ldr	r3, [pc, #40]	; (8010648 <prvInitialiseTaskLists+0x7c>)
 801061e:	4a05      	ldr	r2, [pc, #20]	; (8010634 <prvInitialiseTaskLists+0x68>)
 8010620:	601a      	str	r2, [r3, #0]
}
 8010622:	bf00      	nop
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	20007da4 	.word	0x20007da4
 8010630:	20008204 	.word	0x20008204
 8010634:	20008218 	.word	0x20008218
 8010638:	20008234 	.word	0x20008234
 801063c:	20008248 	.word	0x20008248
 8010640:	20008260 	.word	0x20008260
 8010644:	2000822c 	.word	0x2000822c
 8010648:	20008230 	.word	0x20008230

0801064c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010652:	e019      	b.n	8010688 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010654:	f000 fdd6 	bl	8011204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010658:	4b10      	ldr	r3, [pc, #64]	; (801069c <prvCheckTasksWaitingTermination+0x50>)
 801065a:	68db      	ldr	r3, [r3, #12]
 801065c:	68db      	ldr	r3, [r3, #12]
 801065e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	3304      	adds	r3, #4
 8010664:	4618      	mov	r0, r3
 8010666:	f7fe fba3 	bl	800edb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801066a:	4b0d      	ldr	r3, [pc, #52]	; (80106a0 <prvCheckTasksWaitingTermination+0x54>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3b01      	subs	r3, #1
 8010670:	4a0b      	ldr	r2, [pc, #44]	; (80106a0 <prvCheckTasksWaitingTermination+0x54>)
 8010672:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010674:	4b0b      	ldr	r3, [pc, #44]	; (80106a4 <prvCheckTasksWaitingTermination+0x58>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	3b01      	subs	r3, #1
 801067a:	4a0a      	ldr	r2, [pc, #40]	; (80106a4 <prvCheckTasksWaitingTermination+0x58>)
 801067c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801067e:	f000 fdf1 	bl	8011264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f000 f810 	bl	80106a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010688:	4b06      	ldr	r3, [pc, #24]	; (80106a4 <prvCheckTasksWaitingTermination+0x58>)
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1e1      	bne.n	8010654 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010690:	bf00      	nop
 8010692:	bf00      	nop
 8010694:	3708      	adds	r7, #8
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	20008248 	.word	0x20008248
 80106a0:	20008274 	.word	0x20008274
 80106a4:	2000825c 	.word	0x2000825c

080106a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80106a8:	b580      	push	{r7, lr}
 80106aa:	b084      	sub	sp, #16
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	3354      	adds	r3, #84	; 0x54
 80106b4:	4618      	mov	r0, r3
 80106b6:	f001 ff1b 	bl	80124f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d108      	bne.n	80106d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 ff61 	bl	8011590 <vPortFree>
				vPortFree( pxTCB );
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 ff5e 	bl	8011590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80106d4:	e018      	b.n	8010708 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d103      	bne.n	80106e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f000 ff55 	bl	8011590 <vPortFree>
	}
 80106e6:	e00f      	b.n	8010708 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	d00a      	beq.n	8010708 <prvDeleteTCB+0x60>
	__asm volatile
 80106f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f6:	f383 8811 	msr	BASEPRI, r3
 80106fa:	f3bf 8f6f 	isb	sy
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	60fb      	str	r3, [r7, #12]
}
 8010704:	bf00      	nop
 8010706:	e7fe      	b.n	8010706 <prvDeleteTCB+0x5e>
	}
 8010708:	bf00      	nop
 801070a:	3710      	adds	r7, #16
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010710:	b480      	push	{r7}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010716:	4b0c      	ldr	r3, [pc, #48]	; (8010748 <prvResetNextTaskUnblockTime+0x38>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d104      	bne.n	801072a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010720:	4b0a      	ldr	r3, [pc, #40]	; (801074c <prvResetNextTaskUnblockTime+0x3c>)
 8010722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010728:	e008      	b.n	801073c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801072a:	4b07      	ldr	r3, [pc, #28]	; (8010748 <prvResetNextTaskUnblockTime+0x38>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	68db      	ldr	r3, [r3, #12]
 8010732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	685b      	ldr	r3, [r3, #4]
 8010738:	4a04      	ldr	r2, [pc, #16]	; (801074c <prvResetNextTaskUnblockTime+0x3c>)
 801073a:	6013      	str	r3, [r2, #0]
}
 801073c:	bf00      	nop
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr
 8010748:	2000822c 	.word	0x2000822c
 801074c:	20008294 	.word	0x20008294

08010750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010750:	b480      	push	{r7}
 8010752:	b083      	sub	sp, #12
 8010754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010756:	4b0b      	ldr	r3, [pc, #44]	; (8010784 <xTaskGetSchedulerState+0x34>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d102      	bne.n	8010764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801075e:	2301      	movs	r3, #1
 8010760:	607b      	str	r3, [r7, #4]
 8010762:	e008      	b.n	8010776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010764:	4b08      	ldr	r3, [pc, #32]	; (8010788 <xTaskGetSchedulerState+0x38>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801076c:	2302      	movs	r3, #2
 801076e:	607b      	str	r3, [r7, #4]
 8010770:	e001      	b.n	8010776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010772:	2300      	movs	r3, #0
 8010774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010776:	687b      	ldr	r3, [r7, #4]
	}
 8010778:	4618      	mov	r0, r3
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	20008280 	.word	0x20008280
 8010788:	2000829c 	.word	0x2000829c

0801078c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801078c:	b580      	push	{r7, lr}
 801078e:	b086      	sub	sp, #24
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010798:	2300      	movs	r3, #0
 801079a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d056      	beq.n	8010850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80107a2:	4b2e      	ldr	r3, [pc, #184]	; (801085c <xTaskPriorityDisinherit+0xd0>)
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	693a      	ldr	r2, [r7, #16]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	d00a      	beq.n	80107c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	f383 8811 	msr	BASEPRI, r3
 80107b4:	f3bf 8f6f 	isb	sy
 80107b8:	f3bf 8f4f 	dsb	sy
 80107bc:	60fb      	str	r3, [r7, #12]
}
 80107be:	bf00      	nop
 80107c0:	e7fe      	b.n	80107c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d10a      	bne.n	80107e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80107ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107ce:	f383 8811 	msr	BASEPRI, r3
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	f3bf 8f4f 	dsb	sy
 80107da:	60bb      	str	r3, [r7, #8]
}
 80107dc:	bf00      	nop
 80107de:	e7fe      	b.n	80107de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80107e0:	693b      	ldr	r3, [r7, #16]
 80107e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107e4:	1e5a      	subs	r2, r3, #1
 80107e6:	693b      	ldr	r3, [r7, #16]
 80107e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d02c      	beq.n	8010850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d128      	bne.n	8010850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	3304      	adds	r3, #4
 8010802:	4618      	mov	r0, r3
 8010804:	f7fe fad4 	bl	800edb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801080c:	693b      	ldr	r3, [r7, #16]
 801080e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010820:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <xTaskPriorityDisinherit+0xd4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d903      	bls.n	8010830 <xTaskPriorityDisinherit+0xa4>
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082c:	4a0c      	ldr	r2, [pc, #48]	; (8010860 <xTaskPriorityDisinherit+0xd4>)
 801082e:	6013      	str	r3, [r2, #0]
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010834:	4613      	mov	r3, r2
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	4413      	add	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4a09      	ldr	r2, [pc, #36]	; (8010864 <xTaskPriorityDisinherit+0xd8>)
 801083e:	441a      	add	r2, r3
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	3304      	adds	r3, #4
 8010844:	4619      	mov	r1, r3
 8010846:	4610      	mov	r0, r2
 8010848:	f7fe fa55 	bl	800ecf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801084c:	2301      	movs	r3, #1
 801084e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010850:	697b      	ldr	r3, [r7, #20]
	}
 8010852:	4618      	mov	r0, r3
 8010854:	3718      	adds	r7, #24
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}
 801085a:	bf00      	nop
 801085c:	20007da0 	.word	0x20007da0
 8010860:	2000827c 	.word	0x2000827c
 8010864:	20007da4 	.word	0x20007da4

08010868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010872:	4b21      	ldr	r3, [pc, #132]	; (80108f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010878:	4b20      	ldr	r3, [pc, #128]	; (80108fc <prvAddCurrentTaskToDelayedList+0x94>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	3304      	adds	r3, #4
 801087e:	4618      	mov	r0, r3
 8010880:	f7fe fa96 	bl	800edb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801088a:	d10a      	bne.n	80108a2 <prvAddCurrentTaskToDelayedList+0x3a>
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d007      	beq.n	80108a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010892:	4b1a      	ldr	r3, [pc, #104]	; (80108fc <prvAddCurrentTaskToDelayedList+0x94>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	3304      	adds	r3, #4
 8010898:	4619      	mov	r1, r3
 801089a:	4819      	ldr	r0, [pc, #100]	; (8010900 <prvAddCurrentTaskToDelayedList+0x98>)
 801089c:	f7fe fa2b 	bl	800ecf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80108a0:	e026      	b.n	80108f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80108a2:	68fa      	ldr	r2, [r7, #12]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4413      	add	r3, r2
 80108a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80108aa:	4b14      	ldr	r3, [pc, #80]	; (80108fc <prvAddCurrentTaskToDelayedList+0x94>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	68ba      	ldr	r2, [r7, #8]
 80108b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80108b2:	68ba      	ldr	r2, [r7, #8]
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	429a      	cmp	r2, r3
 80108b8:	d209      	bcs.n	80108ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108ba:	4b12      	ldr	r3, [pc, #72]	; (8010904 <prvAddCurrentTaskToDelayedList+0x9c>)
 80108bc:	681a      	ldr	r2, [r3, #0]
 80108be:	4b0f      	ldr	r3, [pc, #60]	; (80108fc <prvAddCurrentTaskToDelayedList+0x94>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	3304      	adds	r3, #4
 80108c4:	4619      	mov	r1, r3
 80108c6:	4610      	mov	r0, r2
 80108c8:	f7fe fa39 	bl	800ed3e <vListInsert>
}
 80108cc:	e010      	b.n	80108f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80108ce:	4b0e      	ldr	r3, [pc, #56]	; (8010908 <prvAddCurrentTaskToDelayedList+0xa0>)
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	4b0a      	ldr	r3, [pc, #40]	; (80108fc <prvAddCurrentTaskToDelayedList+0x94>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	3304      	adds	r3, #4
 80108d8:	4619      	mov	r1, r3
 80108da:	4610      	mov	r0, r2
 80108dc:	f7fe fa2f 	bl	800ed3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80108e0:	4b0a      	ldr	r3, [pc, #40]	; (801090c <prvAddCurrentTaskToDelayedList+0xa4>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d202      	bcs.n	80108f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80108ea:	4a08      	ldr	r2, [pc, #32]	; (801090c <prvAddCurrentTaskToDelayedList+0xa4>)
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	6013      	str	r3, [r2, #0]
}
 80108f0:	bf00      	nop
 80108f2:	3710      	adds	r7, #16
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd80      	pop	{r7, pc}
 80108f8:	20008278 	.word	0x20008278
 80108fc:	20007da0 	.word	0x20007da0
 8010900:	20008260 	.word	0x20008260
 8010904:	20008230 	.word	0x20008230
 8010908:	2000822c 	.word	0x2000822c
 801090c:	20008294 	.word	0x20008294

08010910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b08a      	sub	sp, #40	; 0x28
 8010914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010916:	2300      	movs	r3, #0
 8010918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801091a:	f000 fb07 	bl	8010f2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801091e:	4b1c      	ldr	r3, [pc, #112]	; (8010990 <xTimerCreateTimerTask+0x80>)
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d021      	beq.n	801096a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010926:	2300      	movs	r3, #0
 8010928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801092a:	2300      	movs	r3, #0
 801092c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801092e:	1d3a      	adds	r2, r7, #4
 8010930:	f107 0108 	add.w	r1, r7, #8
 8010934:	f107 030c 	add.w	r3, r7, #12
 8010938:	4618      	mov	r0, r3
 801093a:	f7fe f995 	bl	800ec68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801093e:	6879      	ldr	r1, [r7, #4]
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	68fa      	ldr	r2, [r7, #12]
 8010944:	9202      	str	r2, [sp, #8]
 8010946:	9301      	str	r3, [sp, #4]
 8010948:	2302      	movs	r3, #2
 801094a:	9300      	str	r3, [sp, #0]
 801094c:	2300      	movs	r3, #0
 801094e:	460a      	mov	r2, r1
 8010950:	4910      	ldr	r1, [pc, #64]	; (8010994 <xTimerCreateTimerTask+0x84>)
 8010952:	4811      	ldr	r0, [pc, #68]	; (8010998 <xTimerCreateTimerTask+0x88>)
 8010954:	f7ff f8b4 	bl	800fac0 <xTaskCreateStatic>
 8010958:	4603      	mov	r3, r0
 801095a:	4a10      	ldr	r2, [pc, #64]	; (801099c <xTimerCreateTimerTask+0x8c>)
 801095c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801095e:	4b0f      	ldr	r3, [pc, #60]	; (801099c <xTimerCreateTimerTask+0x8c>)
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010966:	2301      	movs	r3, #1
 8010968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d10a      	bne.n	8010986 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8010970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010974:	f383 8811 	msr	BASEPRI, r3
 8010978:	f3bf 8f6f 	isb	sy
 801097c:	f3bf 8f4f 	dsb	sy
 8010980:	613b      	str	r3, [r7, #16]
}
 8010982:	bf00      	nop
 8010984:	e7fe      	b.n	8010984 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010986:	697b      	ldr	r3, [r7, #20]
}
 8010988:	4618      	mov	r0, r3
 801098a:	3718      	adds	r7, #24
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	200082d0 	.word	0x200082d0
 8010994:	08014ae4 	.word	0x08014ae4
 8010998:	08010ad5 	.word	0x08010ad5
 801099c:	200082d4 	.word	0x200082d4

080109a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b08a      	sub	sp, #40	; 0x28
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	60f8      	str	r0, [r7, #12]
 80109a8:	60b9      	str	r1, [r7, #8]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80109ae:	2300      	movs	r3, #0
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d10a      	bne.n	80109ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80109b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109bc:	f383 8811 	msr	BASEPRI, r3
 80109c0:	f3bf 8f6f 	isb	sy
 80109c4:	f3bf 8f4f 	dsb	sy
 80109c8:	623b      	str	r3, [r7, #32]
}
 80109ca:	bf00      	nop
 80109cc:	e7fe      	b.n	80109cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80109ce:	4b1a      	ldr	r3, [pc, #104]	; (8010a38 <xTimerGenericCommand+0x98>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d02a      	beq.n	8010a2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	2b05      	cmp	r3, #5
 80109e6:	dc18      	bgt.n	8010a1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80109e8:	f7ff feb2 	bl	8010750 <xTaskGetSchedulerState>
 80109ec:	4603      	mov	r3, r0
 80109ee:	2b02      	cmp	r3, #2
 80109f0:	d109      	bne.n	8010a06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80109f2:	4b11      	ldr	r3, [pc, #68]	; (8010a38 <xTimerGenericCommand+0x98>)
 80109f4:	6818      	ldr	r0, [r3, #0]
 80109f6:	f107 0110 	add.w	r1, r7, #16
 80109fa:	2300      	movs	r3, #0
 80109fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109fe:	f7fe fba9 	bl	800f154 <xQueueGenericSend>
 8010a02:	6278      	str	r0, [r7, #36]	; 0x24
 8010a04:	e012      	b.n	8010a2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010a06:	4b0c      	ldr	r3, [pc, #48]	; (8010a38 <xTimerGenericCommand+0x98>)
 8010a08:	6818      	ldr	r0, [r3, #0]
 8010a0a:	f107 0110 	add.w	r1, r7, #16
 8010a0e:	2300      	movs	r3, #0
 8010a10:	2200      	movs	r2, #0
 8010a12:	f7fe fb9f 	bl	800f154 <xQueueGenericSend>
 8010a16:	6278      	str	r0, [r7, #36]	; 0x24
 8010a18:	e008      	b.n	8010a2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010a1a:	4b07      	ldr	r3, [pc, #28]	; (8010a38 <xTimerGenericCommand+0x98>)
 8010a1c:	6818      	ldr	r0, [r3, #0]
 8010a1e:	f107 0110 	add.w	r1, r7, #16
 8010a22:	2300      	movs	r3, #0
 8010a24:	683a      	ldr	r2, [r7, #0]
 8010a26:	f7fe fc93 	bl	800f350 <xQueueGenericSendFromISR>
 8010a2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3728      	adds	r7, #40	; 0x28
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop
 8010a38:	200082d0 	.word	0x200082d0

08010a3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010a46:	4b22      	ldr	r3, [pc, #136]	; (8010ad0 <prvProcessExpiredTimer+0x94>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	68db      	ldr	r3, [r3, #12]
 8010a4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	3304      	adds	r3, #4
 8010a54:	4618      	mov	r0, r3
 8010a56:	f7fe f9ab 	bl	800edb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010a5a:	697b      	ldr	r3, [r7, #20]
 8010a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010a60:	f003 0304 	and.w	r3, r3, #4
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d022      	beq.n	8010aae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	699a      	ldr	r2, [r3, #24]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	18d1      	adds	r1, r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	683a      	ldr	r2, [r7, #0]
 8010a74:	6978      	ldr	r0, [r7, #20]
 8010a76:	f000 f8d1 	bl	8010c1c <prvInsertTimerInActiveList>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d01f      	beq.n	8010ac0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010a80:	2300      	movs	r3, #0
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	2300      	movs	r3, #0
 8010a86:	687a      	ldr	r2, [r7, #4]
 8010a88:	2100      	movs	r1, #0
 8010a8a:	6978      	ldr	r0, [r7, #20]
 8010a8c:	f7ff ff88 	bl	80109a0 <xTimerGenericCommand>
 8010a90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010a92:	693b      	ldr	r3, [r7, #16]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d113      	bne.n	8010ac0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a9c:	f383 8811 	msr	BASEPRI, r3
 8010aa0:	f3bf 8f6f 	isb	sy
 8010aa4:	f3bf 8f4f 	dsb	sy
 8010aa8:	60fb      	str	r3, [r7, #12]
}
 8010aaa:	bf00      	nop
 8010aac:	e7fe      	b.n	8010aac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ab4:	f023 0301 	bic.w	r3, r3, #1
 8010ab8:	b2da      	uxtb	r2, r3
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	6a1b      	ldr	r3, [r3, #32]
 8010ac4:	6978      	ldr	r0, [r7, #20]
 8010ac6:	4798      	blx	r3
}
 8010ac8:	bf00      	nop
 8010aca:	3718      	adds	r7, #24
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd80      	pop	{r7, pc}
 8010ad0:	200082c8 	.word	0x200082c8

08010ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010ad4:	b580      	push	{r7, lr}
 8010ad6:	b084      	sub	sp, #16
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010adc:	f107 0308 	add.w	r3, r7, #8
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f000 f857 	bl	8010b94 <prvGetNextExpireTime>
 8010ae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	4619      	mov	r1, r3
 8010aec:	68f8      	ldr	r0, [r7, #12]
 8010aee:	f000 f803 	bl	8010af8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010af2:	f000 f8d5 	bl	8010ca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010af6:	e7f1      	b.n	8010adc <prvTimerTask+0x8>

08010af8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010b02:	f7ff fa39 	bl	800ff78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010b06:	f107 0308 	add.w	r3, r7, #8
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 f866 	bl	8010bdc <prvSampleTimeNow>
 8010b10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d130      	bne.n	8010b7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d10a      	bne.n	8010b34 <prvProcessTimerOrBlockTask+0x3c>
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d806      	bhi.n	8010b34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010b26:	f7ff fa35 	bl	800ff94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010b2a:	68f9      	ldr	r1, [r7, #12]
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff ff85 	bl	8010a3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010b32:	e024      	b.n	8010b7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d008      	beq.n	8010b4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010b3a:	4b13      	ldr	r3, [pc, #76]	; (8010b88 <prvProcessTimerOrBlockTask+0x90>)
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d101      	bne.n	8010b48 <prvProcessTimerOrBlockTask+0x50>
 8010b44:	2301      	movs	r3, #1
 8010b46:	e000      	b.n	8010b4a <prvProcessTimerOrBlockTask+0x52>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010b4c:	4b0f      	ldr	r3, [pc, #60]	; (8010b8c <prvProcessTimerOrBlockTask+0x94>)
 8010b4e:	6818      	ldr	r0, [r3, #0]
 8010b50:	687a      	ldr	r2, [r7, #4]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	683a      	ldr	r2, [r7, #0]
 8010b58:	4619      	mov	r1, r3
 8010b5a:	f7fe ff7d 	bl	800fa58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010b5e:	f7ff fa19 	bl	800ff94 <xTaskResumeAll>
 8010b62:	4603      	mov	r3, r0
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d10a      	bne.n	8010b7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010b68:	4b09      	ldr	r3, [pc, #36]	; (8010b90 <prvProcessTimerOrBlockTask+0x98>)
 8010b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b6e:	601a      	str	r2, [r3, #0]
 8010b70:	f3bf 8f4f 	dsb	sy
 8010b74:	f3bf 8f6f 	isb	sy
}
 8010b78:	e001      	b.n	8010b7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010b7a:	f7ff fa0b 	bl	800ff94 <xTaskResumeAll>
}
 8010b7e:	bf00      	nop
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	200082cc 	.word	0x200082cc
 8010b8c:	200082d0 	.word	0x200082d0
 8010b90:	e000ed04 	.word	0xe000ed04

08010b94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010b94:	b480      	push	{r7}
 8010b96:	b085      	sub	sp, #20
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010b9c:	4b0e      	ldr	r3, [pc, #56]	; (8010bd8 <prvGetNextExpireTime+0x44>)
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d101      	bne.n	8010baa <prvGetNextExpireTime+0x16>
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	e000      	b.n	8010bac <prvGetNextExpireTime+0x18>
 8010baa:	2200      	movs	r2, #0
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d105      	bne.n	8010bc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010bb8:	4b07      	ldr	r3, [pc, #28]	; (8010bd8 <prvGetNextExpireTime+0x44>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	68db      	ldr	r3, [r3, #12]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	60fb      	str	r3, [r7, #12]
 8010bc2:	e001      	b.n	8010bc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr
 8010bd6:	bf00      	nop
 8010bd8:	200082c8 	.word	0x200082c8

08010bdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010be4:	f7ff fa74 	bl	80100d0 <xTaskGetTickCount>
 8010be8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010bea:	4b0b      	ldr	r3, [pc, #44]	; (8010c18 <prvSampleTimeNow+0x3c>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d205      	bcs.n	8010c00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010bf4:	f000 f936 	bl	8010e64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	601a      	str	r2, [r3, #0]
 8010bfe:	e002      	b.n	8010c06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010c06:	4a04      	ldr	r2, [pc, #16]	; (8010c18 <prvSampleTimeNow+0x3c>)
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3710      	adds	r7, #16
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	200082d8 	.word	0x200082d8

08010c1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b086      	sub	sp, #24
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	60f8      	str	r0, [r7, #12]
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	429a      	cmp	r2, r3
 8010c40:	d812      	bhi.n	8010c68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	683b      	ldr	r3, [r7, #0]
 8010c46:	1ad2      	subs	r2, r2, r3
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	699b      	ldr	r3, [r3, #24]
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d302      	bcc.n	8010c56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010c50:	2301      	movs	r3, #1
 8010c52:	617b      	str	r3, [r7, #20]
 8010c54:	e01b      	b.n	8010c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010c56:	4b10      	ldr	r3, [pc, #64]	; (8010c98 <prvInsertTimerInActiveList+0x7c>)
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	3304      	adds	r3, #4
 8010c5e:	4619      	mov	r1, r3
 8010c60:	4610      	mov	r0, r2
 8010c62:	f7fe f86c 	bl	800ed3e <vListInsert>
 8010c66:	e012      	b.n	8010c8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010c68:	687a      	ldr	r2, [r7, #4]
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	429a      	cmp	r2, r3
 8010c6e:	d206      	bcs.n	8010c7e <prvInsertTimerInActiveList+0x62>
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	683b      	ldr	r3, [r7, #0]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d302      	bcc.n	8010c7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010c78:	2301      	movs	r3, #1
 8010c7a:	617b      	str	r3, [r7, #20]
 8010c7c:	e007      	b.n	8010c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c7e:	4b07      	ldr	r3, [pc, #28]	; (8010c9c <prvInsertTimerInActiveList+0x80>)
 8010c80:	681a      	ldr	r2, [r3, #0]
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	3304      	adds	r3, #4
 8010c86:	4619      	mov	r1, r3
 8010c88:	4610      	mov	r0, r2
 8010c8a:	f7fe f858 	bl	800ed3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010c8e:	697b      	ldr	r3, [r7, #20]
}
 8010c90:	4618      	mov	r0, r3
 8010c92:	3718      	adds	r7, #24
 8010c94:	46bd      	mov	sp, r7
 8010c96:	bd80      	pop	{r7, pc}
 8010c98:	200082cc 	.word	0x200082cc
 8010c9c:	200082c8 	.word	0x200082c8

08010ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b08e      	sub	sp, #56	; 0x38
 8010ca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010ca6:	e0ca      	b.n	8010e3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	da18      	bge.n	8010ce0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010cae:	1d3b      	adds	r3, r7, #4
 8010cb0:	3304      	adds	r3, #4
 8010cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d10a      	bne.n	8010cd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	61fb      	str	r3, [r7, #28]
}
 8010ccc:	bf00      	nop
 8010cce:	e7fe      	b.n	8010cce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cd6:	6850      	ldr	r0, [r2, #4]
 8010cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cda:	6892      	ldr	r2, [r2, #8]
 8010cdc:	4611      	mov	r1, r2
 8010cde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	f2c0 80aa 	blt.w	8010e3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cee:	695b      	ldr	r3, [r3, #20]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d004      	beq.n	8010cfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cf6:	3304      	adds	r3, #4
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7fe f859 	bl	800edb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010cfe:	463b      	mov	r3, r7
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff ff6b 	bl	8010bdc <prvSampleTimeNow>
 8010d06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b09      	cmp	r3, #9
 8010d0c:	f200 8097 	bhi.w	8010e3e <prvProcessReceivedCommands+0x19e>
 8010d10:	a201      	add	r2, pc, #4	; (adr r2, 8010d18 <prvProcessReceivedCommands+0x78>)
 8010d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d16:	bf00      	nop
 8010d18:	08010d41 	.word	0x08010d41
 8010d1c:	08010d41 	.word	0x08010d41
 8010d20:	08010d41 	.word	0x08010d41
 8010d24:	08010db5 	.word	0x08010db5
 8010d28:	08010dc9 	.word	0x08010dc9
 8010d2c:	08010e13 	.word	0x08010e13
 8010d30:	08010d41 	.word	0x08010d41
 8010d34:	08010d41 	.word	0x08010d41
 8010d38:	08010db5 	.word	0x08010db5
 8010d3c:	08010dc9 	.word	0x08010dc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d46:	f043 0301 	orr.w	r3, r3, #1
 8010d4a:	b2da      	uxtb	r2, r3
 8010d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d56:	699b      	ldr	r3, [r3, #24]
 8010d58:	18d1      	adds	r1, r2, r3
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d60:	f7ff ff5c 	bl	8010c1c <prvInsertTimerInActiveList>
 8010d64:	4603      	mov	r3, r0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d069      	beq.n	8010e3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6c:	6a1b      	ldr	r3, [r3, #32]
 8010d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010d78:	f003 0304 	and.w	r3, r3, #4
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d05e      	beq.n	8010e3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010d80:	68ba      	ldr	r2, [r7, #8]
 8010d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	441a      	add	r2, r3
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9300      	str	r3, [sp, #0]
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	2100      	movs	r1, #0
 8010d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d92:	f7ff fe05 	bl	80109a0 <xTimerGenericCommand>
 8010d96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010d98:	6a3b      	ldr	r3, [r7, #32]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d14f      	bne.n	8010e3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	61bb      	str	r3, [r7, #24]
}
 8010db0:	bf00      	nop
 8010db2:	e7fe      	b.n	8010db2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dba:	f023 0301 	bic.w	r3, r3, #1
 8010dbe:	b2da      	uxtb	r2, r3
 8010dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010dc6:	e03a      	b.n	8010e3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010dce:	f043 0301 	orr.w	r3, r3, #1
 8010dd2:	b2da      	uxtb	r2, r3
 8010dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010dda:	68ba      	ldr	r2, [r7, #8]
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010de2:	699b      	ldr	r3, [r3, #24]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10a      	bne.n	8010dfe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dec:	f383 8811 	msr	BASEPRI, r3
 8010df0:	f3bf 8f6f 	isb	sy
 8010df4:	f3bf 8f4f 	dsb	sy
 8010df8:	617b      	str	r3, [r7, #20]
}
 8010dfa:	bf00      	nop
 8010dfc:	e7fe      	b.n	8010dfc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e00:	699a      	ldr	r2, [r3, #24]
 8010e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e04:	18d1      	adds	r1, r2, r3
 8010e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e0c:	f7ff ff06 	bl	8010c1c <prvInsertTimerInActiveList>
					break;
 8010e10:	e015      	b.n	8010e3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e18:	f003 0302 	and.w	r3, r3, #2
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d103      	bne.n	8010e28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e22:	f000 fbb5 	bl	8011590 <vPortFree>
 8010e26:	e00a      	b.n	8010e3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e2e:	f023 0301 	bic.w	r3, r3, #1
 8010e32:	b2da      	uxtb	r2, r3
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010e3a:	e000      	b.n	8010e3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010e3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010e3e:	4b08      	ldr	r3, [pc, #32]	; (8010e60 <prvProcessReceivedCommands+0x1c0>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	1d39      	adds	r1, r7, #4
 8010e44:	2200      	movs	r2, #0
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fe fb1e 	bl	800f488 <xQueueReceive>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f47f af2a 	bne.w	8010ca8 <prvProcessReceivedCommands+0x8>
	}
}
 8010e54:	bf00      	nop
 8010e56:	bf00      	nop
 8010e58:	3730      	adds	r7, #48	; 0x30
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	200082d0 	.word	0x200082d0

08010e64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010e6a:	e048      	b.n	8010efe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010e6c:	4b2d      	ldr	r3, [pc, #180]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e76:	4b2b      	ldr	r3, [pc, #172]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	68db      	ldr	r3, [r3, #12]
 8010e7c:	68db      	ldr	r3, [r3, #12]
 8010e7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	3304      	adds	r3, #4
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fd ff93 	bl	800edb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6a1b      	ldr	r3, [r3, #32]
 8010e8e:	68f8      	ldr	r0, [r7, #12]
 8010e90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010e98:	f003 0304 	and.w	r3, r3, #4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d02e      	beq.n	8010efe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	699b      	ldr	r3, [r3, #24]
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	4413      	add	r3, r2
 8010ea8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010eaa:	68ba      	ldr	r2, [r7, #8]
 8010eac:	693b      	ldr	r3, [r7, #16]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d90e      	bls.n	8010ed0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	68ba      	ldr	r2, [r7, #8]
 8010eb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	68fa      	ldr	r2, [r7, #12]
 8010ebc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010ebe:	4b19      	ldr	r3, [pc, #100]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010ec0:	681a      	ldr	r2, [r3, #0]
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	3304      	adds	r3, #4
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	4610      	mov	r0, r2
 8010eca:	f7fd ff38 	bl	800ed3e <vListInsert>
 8010ece:	e016      	b.n	8010efe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	9300      	str	r3, [sp, #0]
 8010ed4:	2300      	movs	r3, #0
 8010ed6:	693a      	ldr	r2, [r7, #16]
 8010ed8:	2100      	movs	r1, #0
 8010eda:	68f8      	ldr	r0, [r7, #12]
 8010edc:	f7ff fd60 	bl	80109a0 <xTimerGenericCommand>
 8010ee0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10a      	bne.n	8010efe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010eec:	f383 8811 	msr	BASEPRI, r3
 8010ef0:	f3bf 8f6f 	isb	sy
 8010ef4:	f3bf 8f4f 	dsb	sy
 8010ef8:	603b      	str	r3, [r7, #0]
}
 8010efa:	bf00      	nop
 8010efc:	e7fe      	b.n	8010efc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010efe:	4b09      	ldr	r3, [pc, #36]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d1b1      	bne.n	8010e6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010f08:	4b06      	ldr	r3, [pc, #24]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010f0e:	4b06      	ldr	r3, [pc, #24]	; (8010f28 <prvSwitchTimerLists+0xc4>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	4a04      	ldr	r2, [pc, #16]	; (8010f24 <prvSwitchTimerLists+0xc0>)
 8010f14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010f16:	4a04      	ldr	r2, [pc, #16]	; (8010f28 <prvSwitchTimerLists+0xc4>)
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	6013      	str	r3, [r2, #0]
}
 8010f1c:	bf00      	nop
 8010f1e:	3718      	adds	r7, #24
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	200082c8 	.word	0x200082c8
 8010f28:	200082cc 	.word	0x200082cc

08010f2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010f32:	f000 f967 	bl	8011204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010f36:	4b15      	ldr	r3, [pc, #84]	; (8010f8c <prvCheckForValidListAndQueue+0x60>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d120      	bne.n	8010f80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010f3e:	4814      	ldr	r0, [pc, #80]	; (8010f90 <prvCheckForValidListAndQueue+0x64>)
 8010f40:	f7fd feac 	bl	800ec9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010f44:	4813      	ldr	r0, [pc, #76]	; (8010f94 <prvCheckForValidListAndQueue+0x68>)
 8010f46:	f7fd fea9 	bl	800ec9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010f4a:	4b13      	ldr	r3, [pc, #76]	; (8010f98 <prvCheckForValidListAndQueue+0x6c>)
 8010f4c:	4a10      	ldr	r2, [pc, #64]	; (8010f90 <prvCheckForValidListAndQueue+0x64>)
 8010f4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010f50:	4b12      	ldr	r3, [pc, #72]	; (8010f9c <prvCheckForValidListAndQueue+0x70>)
 8010f52:	4a10      	ldr	r2, [pc, #64]	; (8010f94 <prvCheckForValidListAndQueue+0x68>)
 8010f54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010f56:	2300      	movs	r3, #0
 8010f58:	9300      	str	r3, [sp, #0]
 8010f5a:	4b11      	ldr	r3, [pc, #68]	; (8010fa0 <prvCheckForValidListAndQueue+0x74>)
 8010f5c:	4a11      	ldr	r2, [pc, #68]	; (8010fa4 <prvCheckForValidListAndQueue+0x78>)
 8010f5e:	2110      	movs	r1, #16
 8010f60:	200a      	movs	r0, #10
 8010f62:	f7fd ffb7 	bl	800eed4 <xQueueGenericCreateStatic>
 8010f66:	4603      	mov	r3, r0
 8010f68:	4a08      	ldr	r2, [pc, #32]	; (8010f8c <prvCheckForValidListAndQueue+0x60>)
 8010f6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010f6c:	4b07      	ldr	r3, [pc, #28]	; (8010f8c <prvCheckForValidListAndQueue+0x60>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d005      	beq.n	8010f80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010f74:	4b05      	ldr	r3, [pc, #20]	; (8010f8c <prvCheckForValidListAndQueue+0x60>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	490b      	ldr	r1, [pc, #44]	; (8010fa8 <prvCheckForValidListAndQueue+0x7c>)
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fd18 	bl	800f9b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f80:	f000 f970 	bl	8011264 <vPortExitCritical>
}
 8010f84:	bf00      	nop
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}
 8010f8a:	bf00      	nop
 8010f8c:	200082d0 	.word	0x200082d0
 8010f90:	200082a0 	.word	0x200082a0
 8010f94:	200082b4 	.word	0x200082b4
 8010f98:	200082c8 	.word	0x200082c8
 8010f9c:	200082cc 	.word	0x200082cc
 8010fa0:	2000837c 	.word	0x2000837c
 8010fa4:	200082dc 	.word	0x200082dc
 8010fa8:	08014aec 	.word	0x08014aec

08010fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	3b04      	subs	r3, #4
 8010fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	3b04      	subs	r3, #4
 8010fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010fcc:	68bb      	ldr	r3, [r7, #8]
 8010fce:	f023 0201 	bic.w	r2, r3, #1
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	3b04      	subs	r3, #4
 8010fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010fdc:	4a0c      	ldr	r2, [pc, #48]	; (8011010 <pxPortInitialiseStack+0x64>)
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	3b14      	subs	r3, #20
 8010fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3b04      	subs	r3, #4
 8010ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	f06f 0202 	mvn.w	r2, #2
 8010ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	3b20      	subs	r3, #32
 8011000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011002:	68fb      	ldr	r3, [r7, #12]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3714      	adds	r7, #20
 8011008:	46bd      	mov	sp, r7
 801100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100e:	4770      	bx	lr
 8011010:	08011015 	.word	0x08011015

08011014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011014:	b480      	push	{r7}
 8011016:	b085      	sub	sp, #20
 8011018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801101e:	4b12      	ldr	r3, [pc, #72]	; (8011068 <prvTaskExitError+0x54>)
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011026:	d00a      	beq.n	801103e <prvTaskExitError+0x2a>
	__asm volatile
 8011028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801102c:	f383 8811 	msr	BASEPRI, r3
 8011030:	f3bf 8f6f 	isb	sy
 8011034:	f3bf 8f4f 	dsb	sy
 8011038:	60fb      	str	r3, [r7, #12]
}
 801103a:	bf00      	nop
 801103c:	e7fe      	b.n	801103c <prvTaskExitError+0x28>
	__asm volatile
 801103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011042:	f383 8811 	msr	BASEPRI, r3
 8011046:	f3bf 8f6f 	isb	sy
 801104a:	f3bf 8f4f 	dsb	sy
 801104e:	60bb      	str	r3, [r7, #8]
}
 8011050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011052:	bf00      	nop
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d0fc      	beq.n	8011054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801105a:	bf00      	nop
 801105c:	bf00      	nop
 801105e:	3714      	adds	r7, #20
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	200000b4 	.word	0x200000b4
 801106c:	00000000 	.word	0x00000000

08011070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011070:	4b07      	ldr	r3, [pc, #28]	; (8011090 <pxCurrentTCBConst2>)
 8011072:	6819      	ldr	r1, [r3, #0]
 8011074:	6808      	ldr	r0, [r1, #0]
 8011076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107a:	f380 8809 	msr	PSP, r0
 801107e:	f3bf 8f6f 	isb	sy
 8011082:	f04f 0000 	mov.w	r0, #0
 8011086:	f380 8811 	msr	BASEPRI, r0
 801108a:	4770      	bx	lr
 801108c:	f3af 8000 	nop.w

08011090 <pxCurrentTCBConst2>:
 8011090:	20007da0 	.word	0x20007da0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011094:	bf00      	nop
 8011096:	bf00      	nop

08011098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011098:	4808      	ldr	r0, [pc, #32]	; (80110bc <prvPortStartFirstTask+0x24>)
 801109a:	6800      	ldr	r0, [r0, #0]
 801109c:	6800      	ldr	r0, [r0, #0]
 801109e:	f380 8808 	msr	MSP, r0
 80110a2:	f04f 0000 	mov.w	r0, #0
 80110a6:	f380 8814 	msr	CONTROL, r0
 80110aa:	b662      	cpsie	i
 80110ac:	b661      	cpsie	f
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	df00      	svc	0
 80110b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80110ba:	bf00      	nop
 80110bc:	e000ed08 	.word	0xe000ed08

080110c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b086      	sub	sp, #24
 80110c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80110c6:	4b46      	ldr	r3, [pc, #280]	; (80111e0 <xPortStartScheduler+0x120>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	4a46      	ldr	r2, [pc, #280]	; (80111e4 <xPortStartScheduler+0x124>)
 80110cc:	4293      	cmp	r3, r2
 80110ce:	d10a      	bne.n	80110e6 <xPortStartScheduler+0x26>
	__asm volatile
 80110d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d4:	f383 8811 	msr	BASEPRI, r3
 80110d8:	f3bf 8f6f 	isb	sy
 80110dc:	f3bf 8f4f 	dsb	sy
 80110e0:	613b      	str	r3, [r7, #16]
}
 80110e2:	bf00      	nop
 80110e4:	e7fe      	b.n	80110e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80110e6:	4b3e      	ldr	r3, [pc, #248]	; (80111e0 <xPortStartScheduler+0x120>)
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a3f      	ldr	r2, [pc, #252]	; (80111e8 <xPortStartScheduler+0x128>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d10a      	bne.n	8011106 <xPortStartScheduler+0x46>
	__asm volatile
 80110f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f4:	f383 8811 	msr	BASEPRI, r3
 80110f8:	f3bf 8f6f 	isb	sy
 80110fc:	f3bf 8f4f 	dsb	sy
 8011100:	60fb      	str	r3, [r7, #12]
}
 8011102:	bf00      	nop
 8011104:	e7fe      	b.n	8011104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011106:	4b39      	ldr	r3, [pc, #228]	; (80111ec <xPortStartScheduler+0x12c>)
 8011108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	b2db      	uxtb	r3, r3
 8011110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	22ff      	movs	r2, #255	; 0xff
 8011116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	b2db      	uxtb	r3, r3
 801111e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011120:	78fb      	ldrb	r3, [r7, #3]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011128:	b2da      	uxtb	r2, r3
 801112a:	4b31      	ldr	r3, [pc, #196]	; (80111f0 <xPortStartScheduler+0x130>)
 801112c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801112e:	4b31      	ldr	r3, [pc, #196]	; (80111f4 <xPortStartScheduler+0x134>)
 8011130:	2207      	movs	r2, #7
 8011132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011134:	e009      	b.n	801114a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8011136:	4b2f      	ldr	r3, [pc, #188]	; (80111f4 <xPortStartScheduler+0x134>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	3b01      	subs	r3, #1
 801113c:	4a2d      	ldr	r2, [pc, #180]	; (80111f4 <xPortStartScheduler+0x134>)
 801113e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011140:	78fb      	ldrb	r3, [r7, #3]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	b2db      	uxtb	r3, r3
 8011148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801114a:	78fb      	ldrb	r3, [r7, #3]
 801114c:	b2db      	uxtb	r3, r3
 801114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011152:	2b80      	cmp	r3, #128	; 0x80
 8011154:	d0ef      	beq.n	8011136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011156:	4b27      	ldr	r3, [pc, #156]	; (80111f4 <xPortStartScheduler+0x134>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	f1c3 0307 	rsb	r3, r3, #7
 801115e:	2b04      	cmp	r3, #4
 8011160:	d00a      	beq.n	8011178 <xPortStartScheduler+0xb8>
	__asm volatile
 8011162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	60bb      	str	r3, [r7, #8]
}
 8011174:	bf00      	nop
 8011176:	e7fe      	b.n	8011176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011178:	4b1e      	ldr	r3, [pc, #120]	; (80111f4 <xPortStartScheduler+0x134>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	021b      	lsls	r3, r3, #8
 801117e:	4a1d      	ldr	r2, [pc, #116]	; (80111f4 <xPortStartScheduler+0x134>)
 8011180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011182:	4b1c      	ldr	r3, [pc, #112]	; (80111f4 <xPortStartScheduler+0x134>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801118a:	4a1a      	ldr	r2, [pc, #104]	; (80111f4 <xPortStartScheduler+0x134>)
 801118c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	b2da      	uxtb	r2, r3
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011196:	4b18      	ldr	r3, [pc, #96]	; (80111f8 <xPortStartScheduler+0x138>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	4a17      	ldr	r2, [pc, #92]	; (80111f8 <xPortStartScheduler+0x138>)
 801119c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80111a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80111a2:	4b15      	ldr	r3, [pc, #84]	; (80111f8 <xPortStartScheduler+0x138>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	4a14      	ldr	r2, [pc, #80]	; (80111f8 <xPortStartScheduler+0x138>)
 80111a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80111ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80111ae:	f000 f8dd 	bl	801136c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80111b2:	4b12      	ldr	r3, [pc, #72]	; (80111fc <xPortStartScheduler+0x13c>)
 80111b4:	2200      	movs	r2, #0
 80111b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80111b8:	f000 f8fc 	bl	80113b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80111bc:	4b10      	ldr	r3, [pc, #64]	; (8011200 <xPortStartScheduler+0x140>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a0f      	ldr	r2, [pc, #60]	; (8011200 <xPortStartScheduler+0x140>)
 80111c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80111c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80111c8:	f7ff ff66 	bl	8011098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80111cc:	f7ff f84a 	bl	8010264 <vTaskSwitchContext>
	prvTaskExitError();
 80111d0:	f7ff ff20 	bl	8011014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80111d4:	2300      	movs	r3, #0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3718      	adds	r7, #24
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	e000ed00 	.word	0xe000ed00
 80111e4:	410fc271 	.word	0x410fc271
 80111e8:	410fc270 	.word	0x410fc270
 80111ec:	e000e400 	.word	0xe000e400
 80111f0:	200083cc 	.word	0x200083cc
 80111f4:	200083d0 	.word	0x200083d0
 80111f8:	e000ed20 	.word	0xe000ed20
 80111fc:	200000b4 	.word	0x200000b4
 8011200:	e000ef34 	.word	0xe000ef34

08011204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011204:	b480      	push	{r7}
 8011206:	b083      	sub	sp, #12
 8011208:	af00      	add	r7, sp, #0
	__asm volatile
 801120a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801120e:	f383 8811 	msr	BASEPRI, r3
 8011212:	f3bf 8f6f 	isb	sy
 8011216:	f3bf 8f4f 	dsb	sy
 801121a:	607b      	str	r3, [r7, #4]
}
 801121c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801121e:	4b0f      	ldr	r3, [pc, #60]	; (801125c <vPortEnterCritical+0x58>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3301      	adds	r3, #1
 8011224:	4a0d      	ldr	r2, [pc, #52]	; (801125c <vPortEnterCritical+0x58>)
 8011226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011228:	4b0c      	ldr	r3, [pc, #48]	; (801125c <vPortEnterCritical+0x58>)
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d10f      	bne.n	8011250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011230:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <vPortEnterCritical+0x5c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	b2db      	uxtb	r3, r3
 8011236:	2b00      	cmp	r3, #0
 8011238:	d00a      	beq.n	8011250 <vPortEnterCritical+0x4c>
	__asm volatile
 801123a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801123e:	f383 8811 	msr	BASEPRI, r3
 8011242:	f3bf 8f6f 	isb	sy
 8011246:	f3bf 8f4f 	dsb	sy
 801124a:	603b      	str	r3, [r7, #0]
}
 801124c:	bf00      	nop
 801124e:	e7fe      	b.n	801124e <vPortEnterCritical+0x4a>
	}
}
 8011250:	bf00      	nop
 8011252:	370c      	adds	r7, #12
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	200000b4 	.word	0x200000b4
 8011260:	e000ed04 	.word	0xe000ed04

08011264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801126a:	4b12      	ldr	r3, [pc, #72]	; (80112b4 <vPortExitCritical+0x50>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d10a      	bne.n	8011288 <vPortExitCritical+0x24>
	__asm volatile
 8011272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011276:	f383 8811 	msr	BASEPRI, r3
 801127a:	f3bf 8f6f 	isb	sy
 801127e:	f3bf 8f4f 	dsb	sy
 8011282:	607b      	str	r3, [r7, #4]
}
 8011284:	bf00      	nop
 8011286:	e7fe      	b.n	8011286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011288:	4b0a      	ldr	r3, [pc, #40]	; (80112b4 <vPortExitCritical+0x50>)
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	3b01      	subs	r3, #1
 801128e:	4a09      	ldr	r2, [pc, #36]	; (80112b4 <vPortExitCritical+0x50>)
 8011290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011292:	4b08      	ldr	r3, [pc, #32]	; (80112b4 <vPortExitCritical+0x50>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d105      	bne.n	80112a6 <vPortExitCritical+0x42>
 801129a:	2300      	movs	r3, #0
 801129c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	f383 8811 	msr	BASEPRI, r3
}
 80112a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80112a6:	bf00      	nop
 80112a8:	370c      	adds	r7, #12
 80112aa:	46bd      	mov	sp, r7
 80112ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b0:	4770      	bx	lr
 80112b2:	bf00      	nop
 80112b4:	200000b4 	.word	0x200000b4
	...

080112c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80112c0:	f3ef 8009 	mrs	r0, PSP
 80112c4:	f3bf 8f6f 	isb	sy
 80112c8:	4b15      	ldr	r3, [pc, #84]	; (8011320 <pxCurrentTCBConst>)
 80112ca:	681a      	ldr	r2, [r3, #0]
 80112cc:	f01e 0f10 	tst.w	lr, #16
 80112d0:	bf08      	it	eq
 80112d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80112d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112da:	6010      	str	r0, [r2, #0]
 80112dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80112e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80112e4:	f380 8811 	msr	BASEPRI, r0
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	f3bf 8f6f 	isb	sy
 80112f0:	f7fe ffb8 	bl	8010264 <vTaskSwitchContext>
 80112f4:	f04f 0000 	mov.w	r0, #0
 80112f8:	f380 8811 	msr	BASEPRI, r0
 80112fc:	bc09      	pop	{r0, r3}
 80112fe:	6819      	ldr	r1, [r3, #0]
 8011300:	6808      	ldr	r0, [r1, #0]
 8011302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011306:	f01e 0f10 	tst.w	lr, #16
 801130a:	bf08      	it	eq
 801130c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011310:	f380 8809 	msr	PSP, r0
 8011314:	f3bf 8f6f 	isb	sy
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	f3af 8000 	nop.w

08011320 <pxCurrentTCBConst>:
 8011320:	20007da0 	.word	0x20007da0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011324:	bf00      	nop
 8011326:	bf00      	nop

08011328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011328:	b580      	push	{r7, lr}
 801132a:	b082      	sub	sp, #8
 801132c:	af00      	add	r7, sp, #0
	__asm volatile
 801132e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011332:	f383 8811 	msr	BASEPRI, r3
 8011336:	f3bf 8f6f 	isb	sy
 801133a:	f3bf 8f4f 	dsb	sy
 801133e:	607b      	str	r3, [r7, #4]
}
 8011340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011342:	f7fe fed5 	bl	80100f0 <xTaskIncrementTick>
 8011346:	4603      	mov	r3, r0
 8011348:	2b00      	cmp	r3, #0
 801134a:	d003      	beq.n	8011354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801134c:	4b06      	ldr	r3, [pc, #24]	; (8011368 <xPortSysTickHandler+0x40>)
 801134e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011352:	601a      	str	r2, [r3, #0]
 8011354:	2300      	movs	r3, #0
 8011356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	f383 8811 	msr	BASEPRI, r3
}
 801135e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011360:	bf00      	nop
 8011362:	3708      	adds	r7, #8
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	e000ed04 	.word	0xe000ed04

0801136c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801136c:	b480      	push	{r7}
 801136e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011370:	4b0b      	ldr	r3, [pc, #44]	; (80113a0 <vPortSetupTimerInterrupt+0x34>)
 8011372:	2200      	movs	r2, #0
 8011374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011376:	4b0b      	ldr	r3, [pc, #44]	; (80113a4 <vPortSetupTimerInterrupt+0x38>)
 8011378:	2200      	movs	r2, #0
 801137a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801137c:	4b0a      	ldr	r3, [pc, #40]	; (80113a8 <vPortSetupTimerInterrupt+0x3c>)
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	4a0a      	ldr	r2, [pc, #40]	; (80113ac <vPortSetupTimerInterrupt+0x40>)
 8011382:	fba2 2303 	umull	r2, r3, r2, r3
 8011386:	099b      	lsrs	r3, r3, #6
 8011388:	4a09      	ldr	r2, [pc, #36]	; (80113b0 <vPortSetupTimerInterrupt+0x44>)
 801138a:	3b01      	subs	r3, #1
 801138c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801138e:	4b04      	ldr	r3, [pc, #16]	; (80113a0 <vPortSetupTimerInterrupt+0x34>)
 8011390:	2207      	movs	r2, #7
 8011392:	601a      	str	r2, [r3, #0]
}
 8011394:	bf00      	nop
 8011396:	46bd      	mov	sp, r7
 8011398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139c:	4770      	bx	lr
 801139e:	bf00      	nop
 80113a0:	e000e010 	.word	0xe000e010
 80113a4:	e000e018 	.word	0xe000e018
 80113a8:	20000098 	.word	0x20000098
 80113ac:	10624dd3 	.word	0x10624dd3
 80113b0:	e000e014 	.word	0xe000e014

080113b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80113b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80113c4 <vPortEnableVFP+0x10>
 80113b8:	6801      	ldr	r1, [r0, #0]
 80113ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80113be:	6001      	str	r1, [r0, #0]
 80113c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80113c2:	bf00      	nop
 80113c4:	e000ed88 	.word	0xe000ed88

080113c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80113ce:	f3ef 8305 	mrs	r3, IPSR
 80113d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2b0f      	cmp	r3, #15
 80113d8:	d914      	bls.n	8011404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80113da:	4a17      	ldr	r2, [pc, #92]	; (8011438 <vPortValidateInterruptPriority+0x70>)
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	4413      	add	r3, r2
 80113e0:	781b      	ldrb	r3, [r3, #0]
 80113e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80113e4:	4b15      	ldr	r3, [pc, #84]	; (801143c <vPortValidateInterruptPriority+0x74>)
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	7afa      	ldrb	r2, [r7, #11]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d20a      	bcs.n	8011404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80113ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113f2:	f383 8811 	msr	BASEPRI, r3
 80113f6:	f3bf 8f6f 	isb	sy
 80113fa:	f3bf 8f4f 	dsb	sy
 80113fe:	607b      	str	r3, [r7, #4]
}
 8011400:	bf00      	nop
 8011402:	e7fe      	b.n	8011402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011404:	4b0e      	ldr	r3, [pc, #56]	; (8011440 <vPortValidateInterruptPriority+0x78>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801140c:	4b0d      	ldr	r3, [pc, #52]	; (8011444 <vPortValidateInterruptPriority+0x7c>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	429a      	cmp	r2, r3
 8011412:	d90a      	bls.n	801142a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011418:	f383 8811 	msr	BASEPRI, r3
 801141c:	f3bf 8f6f 	isb	sy
 8011420:	f3bf 8f4f 	dsb	sy
 8011424:	603b      	str	r3, [r7, #0]
}
 8011426:	bf00      	nop
 8011428:	e7fe      	b.n	8011428 <vPortValidateInterruptPriority+0x60>
	}
 801142a:	bf00      	nop
 801142c:	3714      	adds	r7, #20
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr
 8011436:	bf00      	nop
 8011438:	e000e3f0 	.word	0xe000e3f0
 801143c:	200083cc 	.word	0x200083cc
 8011440:	e000ed0c 	.word	0xe000ed0c
 8011444:	200083d0 	.word	0x200083d0

08011448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b088      	sub	sp, #32
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011450:	2300      	movs	r3, #0
 8011452:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 8011454:	4b48      	ldr	r3, [pc, #288]	; (8011578 <pvPortMalloc+0x130>)
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d10a      	bne.n	8011472 <pvPortMalloc+0x2a>
	__asm volatile
 801145c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011460:	f383 8811 	msr	BASEPRI, r3
 8011464:	f3bf 8f6f 	isb	sy
 8011468:	f3bf 8f4f 	dsb	sy
 801146c:	60fb      	str	r3, [r7, #12]
}
 801146e:	bf00      	nop
 8011470:	e7fe      	b.n	8011470 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 8011472:	f7fe fd81 	bl	800ff78 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011476:	4b41      	ldr	r3, [pc, #260]	; (801157c <pvPortMalloc+0x134>)
 8011478:	681a      	ldr	r2, [r3, #0]
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	4013      	ands	r3, r2
 801147e:	2b00      	cmp	r3, #0
 8011480:	d172      	bne.n	8011568 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00d      	beq.n	80114a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8011488:	2208      	movs	r2, #8
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	4413      	add	r3, r2
 801148e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	f003 0307 	and.w	r3, r3, #7
 8011496:	2b00      	cmp	r3, #0
 8011498:	d004      	beq.n	80114a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f023 0307 	bic.w	r3, r3, #7
 80114a0:	3308      	adds	r3, #8
 80114a2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d05e      	beq.n	8011568 <pvPortMalloc+0x120>
 80114aa:	4b35      	ldr	r3, [pc, #212]	; (8011580 <pvPortMalloc+0x138>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d859      	bhi.n	8011568 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80114b4:	4b33      	ldr	r3, [pc, #204]	; (8011584 <pvPortMalloc+0x13c>)
 80114b6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 80114b8:	4b32      	ldr	r3, [pc, #200]	; (8011584 <pvPortMalloc+0x13c>)
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114be:	e004      	b.n	80114ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 80114c4:	69fb      	ldr	r3, [r7, #28]
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d903      	bls.n	80114dc <pvPortMalloc+0x94>
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d1f1      	bne.n	80114c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80114dc:	4b26      	ldr	r3, [pc, #152]	; (8011578 <pvPortMalloc+0x130>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	69fa      	ldr	r2, [r7, #28]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d040      	beq.n	8011568 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80114e6:	69bb      	ldr	r3, [r7, #24]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2208      	movs	r2, #8
 80114ec:	4413      	add	r3, r2
 80114ee:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80114f0:	69fb      	ldr	r3, [r7, #28]
 80114f2:	681a      	ldr	r2, [r3, #0]
 80114f4:	69bb      	ldr	r3, [r7, #24]
 80114f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80114f8:	69fb      	ldr	r3, [r7, #28]
 80114fa:	685a      	ldr	r2, [r3, #4]
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	1ad2      	subs	r2, r2, r3
 8011500:	2308      	movs	r3, #8
 8011502:	005b      	lsls	r3, r3, #1
 8011504:	429a      	cmp	r2, r3
 8011506:	d90f      	bls.n	8011528 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011508:	69fa      	ldr	r2, [r7, #28]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4413      	add	r3, r2
 801150e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	685a      	ldr	r2, [r3, #4]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	1ad2      	subs	r2, r2, r3
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	687a      	ldr	r2, [r7, #4]
 8011520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8011522:	6938      	ldr	r0, [r7, #16]
 8011524:	f000 f8a2 	bl	801166c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011528:	4b15      	ldr	r3, [pc, #84]	; (8011580 <pvPortMalloc+0x138>)
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	69fb      	ldr	r3, [r7, #28]
 801152e:	685b      	ldr	r3, [r3, #4]
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	4a13      	ldr	r2, [pc, #76]	; (8011580 <pvPortMalloc+0x138>)
 8011534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011536:	4b12      	ldr	r3, [pc, #72]	; (8011580 <pvPortMalloc+0x138>)
 8011538:	681a      	ldr	r2, [r3, #0]
 801153a:	4b13      	ldr	r3, [pc, #76]	; (8011588 <pvPortMalloc+0x140>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	429a      	cmp	r2, r3
 8011540:	d203      	bcs.n	801154a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011542:	4b0f      	ldr	r3, [pc, #60]	; (8011580 <pvPortMalloc+0x138>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4a10      	ldr	r2, [pc, #64]	; (8011588 <pvPortMalloc+0x140>)
 8011548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801154a:	69fb      	ldr	r3, [r7, #28]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	4b0b      	ldr	r3, [pc, #44]	; (801157c <pvPortMalloc+0x134>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	431a      	orrs	r2, r3
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	2200      	movs	r2, #0
 801155c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801155e:	4b0b      	ldr	r3, [pc, #44]	; (801158c <pvPortMalloc+0x144>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	3301      	adds	r3, #1
 8011564:	4a09      	ldr	r2, [pc, #36]	; (801158c <pvPortMalloc+0x144>)
 8011566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011568:	f7fe fd14 	bl	800ff94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 801156c:	697b      	ldr	r3, [r7, #20]
}
 801156e:	4618      	mov	r0, r3
 8011570:	3720      	adds	r7, #32
 8011572:	46bd      	mov	sp, r7
 8011574:	bd80      	pop	{r7, pc}
 8011576:	bf00      	nop
 8011578:	200083dc 	.word	0x200083dc
 801157c:	200083f0 	.word	0x200083f0
 8011580:	200083e0 	.word	0x200083e0
 8011584:	200083d4 	.word	0x200083d4
 8011588:	200083e4 	.word	0x200083e4
 801158c:	200083e8 	.word	0x200083e8

08011590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d04d      	beq.n	801163e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80115a2:	2308      	movs	r3, #8
 80115a4:	425b      	negs	r3, r3
 80115a6:	697a      	ldr	r2, [r7, #20]
 80115a8:	4413      	add	r3, r2
 80115aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80115ac:	697b      	ldr	r3, [r7, #20]
 80115ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	685a      	ldr	r2, [r3, #4]
 80115b4:	4b24      	ldr	r3, [pc, #144]	; (8011648 <vPortFree+0xb8>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4013      	ands	r3, r2
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10a      	bne.n	80115d4 <vPortFree+0x44>
	__asm volatile
 80115be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115c2:	f383 8811 	msr	BASEPRI, r3
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f3bf 8f4f 	dsb	sy
 80115ce:	60fb      	str	r3, [r7, #12]
}
 80115d0:	bf00      	nop
 80115d2:	e7fe      	b.n	80115d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00a      	beq.n	80115f2 <vPortFree+0x62>
	__asm volatile
 80115dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e0:	f383 8811 	msr	BASEPRI, r3
 80115e4:	f3bf 8f6f 	isb	sy
 80115e8:	f3bf 8f4f 	dsb	sy
 80115ec:	60bb      	str	r3, [r7, #8]
}
 80115ee:	bf00      	nop
 80115f0:	e7fe      	b.n	80115f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <vPortFree+0xb8>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	4013      	ands	r3, r2
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d01e      	beq.n	801163e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011600:	693b      	ldr	r3, [r7, #16]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d11a      	bne.n	801163e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	685a      	ldr	r2, [r3, #4]
 801160c:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <vPortFree+0xb8>)
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	43db      	mvns	r3, r3
 8011612:	401a      	ands	r2, r3
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011618:	f7fe fcae 	bl	800ff78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801161c:	693b      	ldr	r3, [r7, #16]
 801161e:	685a      	ldr	r2, [r3, #4]
 8011620:	4b0a      	ldr	r3, [pc, #40]	; (801164c <vPortFree+0xbc>)
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	4413      	add	r3, r2
 8011626:	4a09      	ldr	r2, [pc, #36]	; (801164c <vPortFree+0xbc>)
 8011628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801162a:	6938      	ldr	r0, [r7, #16]
 801162c:	f000 f81e 	bl	801166c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011630:	4b07      	ldr	r3, [pc, #28]	; (8011650 <vPortFree+0xc0>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	3301      	adds	r3, #1
 8011636:	4a06      	ldr	r2, [pc, #24]	; (8011650 <vPortFree+0xc0>)
 8011638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801163a:	f7fe fcab 	bl	800ff94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801163e:	bf00      	nop
 8011640:	3718      	adds	r7, #24
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	200083f0 	.word	0x200083f0
 801164c:	200083e0 	.word	0x200083e0
 8011650:	200083ec 	.word	0x200083ec

08011654 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8011654:	b480      	push	{r7}
 8011656:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8011658:	4b03      	ldr	r3, [pc, #12]	; (8011668 <xPortGetFreeHeapSize+0x14>)
 801165a:	681b      	ldr	r3, [r3, #0]
}
 801165c:	4618      	mov	r0, r3
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop
 8011668:	200083e0 	.word	0x200083e0

0801166c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801166c:	b480      	push	{r7}
 801166e:	b085      	sub	sp, #20
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011674:	4b28      	ldr	r3, [pc, #160]	; (8011718 <prvInsertBlockIntoFreeList+0xac>)
 8011676:	60fb      	str	r3, [r7, #12]
 8011678:	e002      	b.n	8011680 <prvInsertBlockIntoFreeList+0x14>
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	60fb      	str	r3, [r7, #12]
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	687a      	ldr	r2, [r7, #4]
 8011686:	429a      	cmp	r2, r3
 8011688:	d8f7      	bhi.n	801167a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	685b      	ldr	r3, [r3, #4]
 8011692:	68ba      	ldr	r2, [r7, #8]
 8011694:	4413      	add	r3, r2
 8011696:	687a      	ldr	r2, [r7, #4]
 8011698:	429a      	cmp	r2, r3
 801169a:	d108      	bne.n	80116ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	685a      	ldr	r2, [r3, #4]
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	685b      	ldr	r3, [r3, #4]
 80116a4:	441a      	add	r2, r3
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	685b      	ldr	r3, [r3, #4]
 80116b6:	68ba      	ldr	r2, [r7, #8]
 80116b8:	441a      	add	r2, r3
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	429a      	cmp	r2, r3
 80116c0:	d118      	bne.n	80116f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	4b15      	ldr	r3, [pc, #84]	; (801171c <prvInsertBlockIntoFreeList+0xb0>)
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	429a      	cmp	r2, r3
 80116cc:	d00d      	beq.n	80116ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	685a      	ldr	r2, [r3, #4]
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	441a      	add	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	e008      	b.n	80116fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80116ea:	4b0c      	ldr	r3, [pc, #48]	; (801171c <prvInsertBlockIntoFreeList+0xb0>)
 80116ec:	681a      	ldr	r2, [r3, #0]
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	601a      	str	r2, [r3, #0]
 80116f2:	e003      	b.n	80116fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	681a      	ldr	r2, [r3, #0]
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	429a      	cmp	r2, r3
 8011702:	d002      	beq.n	801170a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801170a:	bf00      	nop
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
 8011716:	bf00      	nop
 8011718:	200083d4 	.word	0x200083d4
 801171c:	200083dc 	.word	0x200083dc

08011720 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 8011720:	b480      	push	{r7}
 8011722:	b08f      	sub	sp, #60	; 0x3c
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 8011728:	2300      	movs	r3, #0
 801172a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 801172c:	2300      	movs	r3, #0
 801172e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 8011734:	4b5a      	ldr	r3, [pc, #360]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d00a      	beq.n	8011752 <vPortDefineHeapRegions+0x32>
	__asm volatile
 801173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011740:	f383 8811 	msr	BASEPRI, r3
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	f3bf 8f4f 	dsb	sy
 801174c:	617b      	str	r3, [r7, #20]
}
 801174e:	bf00      	nop
 8011750:	e7fe      	b.n	8011750 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8011752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011754:	00db      	lsls	r3, r3, #3
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	4413      	add	r3, r2
 801175a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 801175c:	e07d      	b.n	801185a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 801175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011760:	685b      	ldr	r3, [r3, #4]
 8011762:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 8011764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176c:	f003 0307 	and.w	r3, r3, #7
 8011770:	2b00      	cmp	r3, #0
 8011772:	d00e      	beq.n	8011792 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	3307      	adds	r3, #7
 8011778:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 801177a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801177c:	f023 0307 	bic.w	r3, r3, #7
 8011780:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 8011782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	461a      	mov	r2, r3
 8011788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801178a:	1ad3      	subs	r3, r2, r3
 801178c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801178e:	4413      	add	r3, r2
 8011790:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 8011792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011794:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	2b00      	cmp	r3, #0
 801179a:	d106      	bne.n	80117aa <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 801179c:	69fb      	ldr	r3, [r7, #28]
 801179e:	4a41      	ldr	r2, [pc, #260]	; (80118a4 <vPortDefineHeapRegions+0x184>)
 80117a0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 80117a2:	4b40      	ldr	r3, [pc, #256]	; (80118a4 <vPortDefineHeapRegions+0x184>)
 80117a4:	2200      	movs	r2, #0
 80117a6:	605a      	str	r2, [r3, #4]
 80117a8:	e01f      	b.n	80117ea <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 80117aa:	4b3d      	ldr	r3, [pc, #244]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d10a      	bne.n	80117c8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 80117b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	613b      	str	r3, [r7, #16]
}
 80117c4:	bf00      	nop
 80117c6:	e7fe      	b.n	80117c6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 80117c8:	4b35      	ldr	r3, [pc, #212]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	461a      	mov	r2, r3
 80117ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117d0:	4293      	cmp	r3, r2
 80117d2:	d80a      	bhi.n	80117ea <vPortDefineHeapRegions+0xca>
	__asm volatile
 80117d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d8:	f383 8811 	msr	BASEPRI, r3
 80117dc:	f3bf 8f6f 	isb	sy
 80117e0:	f3bf 8f4f 	dsb	sy
 80117e4:	60fb      	str	r3, [r7, #12]
}
 80117e6:	bf00      	nop
 80117e8:	e7fe      	b.n	80117e8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 80117ea:	4b2d      	ldr	r3, [pc, #180]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 80117f0:	69fa      	ldr	r2, [r7, #28]
 80117f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f4:	4413      	add	r3, r2
 80117f6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 80117f8:	2208      	movs	r2, #8
 80117fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117fc:	1a9b      	subs	r3, r3, r2
 80117fe:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	f023 0307 	bic.w	r3, r3, #7
 8011806:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 8011808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801180a:	4a25      	ldr	r2, [pc, #148]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 801180c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 801180e:	4b24      	ldr	r3, [pc, #144]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2200      	movs	r2, #0
 8011814:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 8011816:	4b22      	ldr	r3, [pc, #136]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2200      	movs	r2, #0
 801181c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 8011822:	6a3b      	ldr	r3, [r7, #32]
 8011824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011826:	1ad2      	subs	r2, r2, r3
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 801182c:	4b1c      	ldr	r3, [pc, #112]	; (80118a0 <vPortDefineHeapRegions+0x180>)
 801182e:	681a      	ldr	r2, [r3, #0]
 8011830:	6a3b      	ldr	r3, [r7, #32]
 8011832:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d002      	beq.n	8011840 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 801183a:	69bb      	ldr	r3, [r7, #24]
 801183c:	6a3a      	ldr	r2, [r7, #32]
 801183e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8011840:	6a3b      	ldr	r3, [r7, #32]
 8011842:	685b      	ldr	r3, [r3, #4]
 8011844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011846:	4413      	add	r3, r2
 8011848:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 801184a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184c:	3301      	adds	r3, #1
 801184e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011852:	00db      	lsls	r3, r3, #3
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	4413      	add	r3, r2
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	f47f af7d 	bne.w	801175e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8011864:	4a10      	ldr	r2, [pc, #64]	; (80118a8 <vPortDefineHeapRegions+0x188>)
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 801186a:	4a10      	ldr	r2, [pc, #64]	; (80118ac <vPortDefineHeapRegions+0x18c>)
 801186c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801186e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 8011870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011872:	2b00      	cmp	r3, #0
 8011874:	d10a      	bne.n	801188c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 8011876:	f04f 0350 	mov.w	r3, #80	; 0x50
 801187a:	f383 8811 	msr	BASEPRI, r3
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f3bf 8f4f 	dsb	sy
 8011886:	60bb      	str	r3, [r7, #8]
}
 8011888:	bf00      	nop
 801188a:	e7fe      	b.n	801188a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801188c:	4b08      	ldr	r3, [pc, #32]	; (80118b0 <vPortDefineHeapRegions+0x190>)
 801188e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011892:	601a      	str	r2, [r3, #0]
}
 8011894:	bf00      	nop
 8011896:	373c      	adds	r7, #60	; 0x3c
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	200083dc 	.word	0x200083dc
 80118a4:	200083d4 	.word	0x200083d4
 80118a8:	200083e4 	.word	0x200083e4
 80118ac:	200083e0 	.word	0x200083e0
 80118b0:	200083f0 	.word	0x200083f0

080118b4 <__assert_func>:
 80118b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80118b6:	4614      	mov	r4, r2
 80118b8:	461a      	mov	r2, r3
 80118ba:	4b09      	ldr	r3, [pc, #36]	; (80118e0 <__assert_func+0x2c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	4605      	mov	r5, r0
 80118c0:	68d8      	ldr	r0, [r3, #12]
 80118c2:	b14c      	cbz	r4, 80118d8 <__assert_func+0x24>
 80118c4:	4b07      	ldr	r3, [pc, #28]	; (80118e4 <__assert_func+0x30>)
 80118c6:	9100      	str	r1, [sp, #0]
 80118c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80118cc:	4906      	ldr	r1, [pc, #24]	; (80118e8 <__assert_func+0x34>)
 80118ce:	462b      	mov	r3, r5
 80118d0:	f000 f8ee 	bl	8011ab0 <fiprintf>
 80118d4:	f001 f8c0 	bl	8012a58 <abort>
 80118d8:	4b04      	ldr	r3, [pc, #16]	; (80118ec <__assert_func+0x38>)
 80118da:	461c      	mov	r4, r3
 80118dc:	e7f3      	b.n	80118c6 <__assert_func+0x12>
 80118de:	bf00      	nop
 80118e0:	200000b8 	.word	0x200000b8
 80118e4:	08016da0 	.word	0x08016da0
 80118e8:	08016dad 	.word	0x08016dad
 80118ec:	08016ddb 	.word	0x08016ddb

080118f0 <atol>:
 80118f0:	220a      	movs	r2, #10
 80118f2:	2100      	movs	r1, #0
 80118f4:	f000 bf9a 	b.w	801282c <strtol>

080118f8 <__errno>:
 80118f8:	4b01      	ldr	r3, [pc, #4]	; (8011900 <__errno+0x8>)
 80118fa:	6818      	ldr	r0, [r3, #0]
 80118fc:	4770      	bx	lr
 80118fe:	bf00      	nop
 8011900:	200000b8 	.word	0x200000b8

08011904 <std>:
 8011904:	2300      	movs	r3, #0
 8011906:	b510      	push	{r4, lr}
 8011908:	4604      	mov	r4, r0
 801190a:	e9c0 3300 	strd	r3, r3, [r0]
 801190e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011912:	6083      	str	r3, [r0, #8]
 8011914:	8181      	strh	r1, [r0, #12]
 8011916:	6643      	str	r3, [r0, #100]	; 0x64
 8011918:	81c2      	strh	r2, [r0, #14]
 801191a:	6183      	str	r3, [r0, #24]
 801191c:	4619      	mov	r1, r3
 801191e:	2208      	movs	r2, #8
 8011920:	305c      	adds	r0, #92	; 0x5c
 8011922:	f000 f9e9 	bl	8011cf8 <memset>
 8011926:	4b05      	ldr	r3, [pc, #20]	; (801193c <std+0x38>)
 8011928:	6263      	str	r3, [r4, #36]	; 0x24
 801192a:	4b05      	ldr	r3, [pc, #20]	; (8011940 <std+0x3c>)
 801192c:	62a3      	str	r3, [r4, #40]	; 0x28
 801192e:	4b05      	ldr	r3, [pc, #20]	; (8011944 <std+0x40>)
 8011930:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011932:	4b05      	ldr	r3, [pc, #20]	; (8011948 <std+0x44>)
 8011934:	6224      	str	r4, [r4, #32]
 8011936:	6323      	str	r3, [r4, #48]	; 0x30
 8011938:	bd10      	pop	{r4, pc}
 801193a:	bf00      	nop
 801193c:	08012609 	.word	0x08012609
 8011940:	0801262b 	.word	0x0801262b
 8011944:	08012663 	.word	0x08012663
 8011948:	08012687 	.word	0x08012687

0801194c <_cleanup_r>:
 801194c:	4901      	ldr	r1, [pc, #4]	; (8011954 <_cleanup_r+0x8>)
 801194e:	f000 b8c1 	b.w	8011ad4 <_fwalk_reent>
 8011952:	bf00      	nop
 8011954:	08012b95 	.word	0x08012b95

08011958 <__sfmoreglue>:
 8011958:	b570      	push	{r4, r5, r6, lr}
 801195a:	2268      	movs	r2, #104	; 0x68
 801195c:	1e4d      	subs	r5, r1, #1
 801195e:	4355      	muls	r5, r2
 8011960:	460e      	mov	r6, r1
 8011962:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011966:	f000 fa3b 	bl	8011de0 <_malloc_r>
 801196a:	4604      	mov	r4, r0
 801196c:	b140      	cbz	r0, 8011980 <__sfmoreglue+0x28>
 801196e:	2100      	movs	r1, #0
 8011970:	e9c0 1600 	strd	r1, r6, [r0]
 8011974:	300c      	adds	r0, #12
 8011976:	60a0      	str	r0, [r4, #8]
 8011978:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801197c:	f000 f9bc 	bl	8011cf8 <memset>
 8011980:	4620      	mov	r0, r4
 8011982:	bd70      	pop	{r4, r5, r6, pc}

08011984 <__sfp_lock_acquire>:
 8011984:	4801      	ldr	r0, [pc, #4]	; (801198c <__sfp_lock_acquire+0x8>)
 8011986:	f000 b996 	b.w	8011cb6 <__retarget_lock_acquire_recursive>
 801198a:	bf00      	nop
 801198c:	200083f5 	.word	0x200083f5

08011990 <__sfp_lock_release>:
 8011990:	4801      	ldr	r0, [pc, #4]	; (8011998 <__sfp_lock_release+0x8>)
 8011992:	f000 b991 	b.w	8011cb8 <__retarget_lock_release_recursive>
 8011996:	bf00      	nop
 8011998:	200083f5 	.word	0x200083f5

0801199c <__sinit_lock_acquire>:
 801199c:	4801      	ldr	r0, [pc, #4]	; (80119a4 <__sinit_lock_acquire+0x8>)
 801199e:	f000 b98a 	b.w	8011cb6 <__retarget_lock_acquire_recursive>
 80119a2:	bf00      	nop
 80119a4:	200083f6 	.word	0x200083f6

080119a8 <__sinit_lock_release>:
 80119a8:	4801      	ldr	r0, [pc, #4]	; (80119b0 <__sinit_lock_release+0x8>)
 80119aa:	f000 b985 	b.w	8011cb8 <__retarget_lock_release_recursive>
 80119ae:	bf00      	nop
 80119b0:	200083f6 	.word	0x200083f6

080119b4 <__sinit>:
 80119b4:	b510      	push	{r4, lr}
 80119b6:	4604      	mov	r4, r0
 80119b8:	f7ff fff0 	bl	801199c <__sinit_lock_acquire>
 80119bc:	69a3      	ldr	r3, [r4, #24]
 80119be:	b11b      	cbz	r3, 80119c8 <__sinit+0x14>
 80119c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c4:	f7ff bff0 	b.w	80119a8 <__sinit_lock_release>
 80119c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80119cc:	6523      	str	r3, [r4, #80]	; 0x50
 80119ce:	4b13      	ldr	r3, [pc, #76]	; (8011a1c <__sinit+0x68>)
 80119d0:	4a13      	ldr	r2, [pc, #76]	; (8011a20 <__sinit+0x6c>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80119d6:	42a3      	cmp	r3, r4
 80119d8:	bf04      	itt	eq
 80119da:	2301      	moveq	r3, #1
 80119dc:	61a3      	streq	r3, [r4, #24]
 80119de:	4620      	mov	r0, r4
 80119e0:	f000 f820 	bl	8011a24 <__sfp>
 80119e4:	6060      	str	r0, [r4, #4]
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 f81c 	bl	8011a24 <__sfp>
 80119ec:	60a0      	str	r0, [r4, #8]
 80119ee:	4620      	mov	r0, r4
 80119f0:	f000 f818 	bl	8011a24 <__sfp>
 80119f4:	2200      	movs	r2, #0
 80119f6:	60e0      	str	r0, [r4, #12]
 80119f8:	2104      	movs	r1, #4
 80119fa:	6860      	ldr	r0, [r4, #4]
 80119fc:	f7ff ff82 	bl	8011904 <std>
 8011a00:	68a0      	ldr	r0, [r4, #8]
 8011a02:	2201      	movs	r2, #1
 8011a04:	2109      	movs	r1, #9
 8011a06:	f7ff ff7d 	bl	8011904 <std>
 8011a0a:	68e0      	ldr	r0, [r4, #12]
 8011a0c:	2202      	movs	r2, #2
 8011a0e:	2112      	movs	r1, #18
 8011a10:	f7ff ff78 	bl	8011904 <std>
 8011a14:	2301      	movs	r3, #1
 8011a16:	61a3      	str	r3, [r4, #24]
 8011a18:	e7d2      	b.n	80119c0 <__sinit+0xc>
 8011a1a:	bf00      	nop
 8011a1c:	08016e3c 	.word	0x08016e3c
 8011a20:	0801194d 	.word	0x0801194d

08011a24 <__sfp>:
 8011a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a26:	4607      	mov	r7, r0
 8011a28:	f7ff ffac 	bl	8011984 <__sfp_lock_acquire>
 8011a2c:	4b1e      	ldr	r3, [pc, #120]	; (8011aa8 <__sfp+0x84>)
 8011a2e:	681e      	ldr	r6, [r3, #0]
 8011a30:	69b3      	ldr	r3, [r6, #24]
 8011a32:	b913      	cbnz	r3, 8011a3a <__sfp+0x16>
 8011a34:	4630      	mov	r0, r6
 8011a36:	f7ff ffbd 	bl	80119b4 <__sinit>
 8011a3a:	3648      	adds	r6, #72	; 0x48
 8011a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011a40:	3b01      	subs	r3, #1
 8011a42:	d503      	bpl.n	8011a4c <__sfp+0x28>
 8011a44:	6833      	ldr	r3, [r6, #0]
 8011a46:	b30b      	cbz	r3, 8011a8c <__sfp+0x68>
 8011a48:	6836      	ldr	r6, [r6, #0]
 8011a4a:	e7f7      	b.n	8011a3c <__sfp+0x18>
 8011a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011a50:	b9d5      	cbnz	r5, 8011a88 <__sfp+0x64>
 8011a52:	4b16      	ldr	r3, [pc, #88]	; (8011aac <__sfp+0x88>)
 8011a54:	60e3      	str	r3, [r4, #12]
 8011a56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011a5a:	6665      	str	r5, [r4, #100]	; 0x64
 8011a5c:	f000 f92a 	bl	8011cb4 <__retarget_lock_init_recursive>
 8011a60:	f7ff ff96 	bl	8011990 <__sfp_lock_release>
 8011a64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011a68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011a6c:	6025      	str	r5, [r4, #0]
 8011a6e:	61a5      	str	r5, [r4, #24]
 8011a70:	2208      	movs	r2, #8
 8011a72:	4629      	mov	r1, r5
 8011a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011a78:	f000 f93e 	bl	8011cf8 <memset>
 8011a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011a84:	4620      	mov	r0, r4
 8011a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a88:	3468      	adds	r4, #104	; 0x68
 8011a8a:	e7d9      	b.n	8011a40 <__sfp+0x1c>
 8011a8c:	2104      	movs	r1, #4
 8011a8e:	4638      	mov	r0, r7
 8011a90:	f7ff ff62 	bl	8011958 <__sfmoreglue>
 8011a94:	4604      	mov	r4, r0
 8011a96:	6030      	str	r0, [r6, #0]
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d1d5      	bne.n	8011a48 <__sfp+0x24>
 8011a9c:	f7ff ff78 	bl	8011990 <__sfp_lock_release>
 8011aa0:	230c      	movs	r3, #12
 8011aa2:	603b      	str	r3, [r7, #0]
 8011aa4:	e7ee      	b.n	8011a84 <__sfp+0x60>
 8011aa6:	bf00      	nop
 8011aa8:	08016e3c 	.word	0x08016e3c
 8011aac:	ffff0001 	.word	0xffff0001

08011ab0 <fiprintf>:
 8011ab0:	b40e      	push	{r1, r2, r3}
 8011ab2:	b503      	push	{r0, r1, lr}
 8011ab4:	4601      	mov	r1, r0
 8011ab6:	ab03      	add	r3, sp, #12
 8011ab8:	4805      	ldr	r0, [pc, #20]	; (8011ad0 <fiprintf+0x20>)
 8011aba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011abe:	6800      	ldr	r0, [r0, #0]
 8011ac0:	9301      	str	r3, [sp, #4]
 8011ac2:	f000 fa2b 	bl	8011f1c <_vfiprintf_r>
 8011ac6:	b002      	add	sp, #8
 8011ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011acc:	b003      	add	sp, #12
 8011ace:	4770      	bx	lr
 8011ad0:	200000b8 	.word	0x200000b8

08011ad4 <_fwalk_reent>:
 8011ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ad8:	4606      	mov	r6, r0
 8011ada:	4688      	mov	r8, r1
 8011adc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011ae0:	2700      	movs	r7, #0
 8011ae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011ae6:	f1b9 0901 	subs.w	r9, r9, #1
 8011aea:	d505      	bpl.n	8011af8 <_fwalk_reent+0x24>
 8011aec:	6824      	ldr	r4, [r4, #0]
 8011aee:	2c00      	cmp	r4, #0
 8011af0:	d1f7      	bne.n	8011ae2 <_fwalk_reent+0xe>
 8011af2:	4638      	mov	r0, r7
 8011af4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011af8:	89ab      	ldrh	r3, [r5, #12]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d907      	bls.n	8011b0e <_fwalk_reent+0x3a>
 8011afe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b02:	3301      	adds	r3, #1
 8011b04:	d003      	beq.n	8011b0e <_fwalk_reent+0x3a>
 8011b06:	4629      	mov	r1, r5
 8011b08:	4630      	mov	r0, r6
 8011b0a:	47c0      	blx	r8
 8011b0c:	4307      	orrs	r7, r0
 8011b0e:	3568      	adds	r5, #104	; 0x68
 8011b10:	e7e9      	b.n	8011ae6 <_fwalk_reent+0x12>
	...

08011b14 <gmtime_r>:
 8011b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b18:	e9d0 6700 	ldrd	r6, r7, [r0]
 8011b1c:	460c      	mov	r4, r1
 8011b1e:	4a4f      	ldr	r2, [pc, #316]	; (8011c5c <gmtime_r+0x148>)
 8011b20:	2300      	movs	r3, #0
 8011b22:	4630      	mov	r0, r6
 8011b24:	4639      	mov	r1, r7
 8011b26:	f7ee feb1 	bl	800088c <__aeabi_ldivmod>
 8011b2a:	4639      	mov	r1, r7
 8011b2c:	4605      	mov	r5, r0
 8011b2e:	4a4b      	ldr	r2, [pc, #300]	; (8011c5c <gmtime_r+0x148>)
 8011b30:	4630      	mov	r0, r6
 8011b32:	2300      	movs	r3, #0
 8011b34:	f7ee feaa 	bl	800088c <__aeabi_ldivmod>
 8011b38:	2a00      	cmp	r2, #0
 8011b3a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8011b3e:	bfb7      	itett	lt
 8011b40:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8011b44:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8011b48:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8011b4c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8011b50:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8011b54:	fbb2 f1f0 	udiv	r1, r2, r0
 8011b58:	fb00 2211 	mls	r2, r0, r1, r2
 8011b5c:	203c      	movs	r0, #60	; 0x3c
 8011b5e:	60a1      	str	r1, [r4, #8]
 8011b60:	fbb2 f1f0 	udiv	r1, r2, r0
 8011b64:	fb00 2211 	mls	r2, r0, r1, r2
 8011b68:	6061      	str	r1, [r4, #4]
 8011b6a:	6022      	str	r2, [r4, #0]
 8011b6c:	2107      	movs	r1, #7
 8011b6e:	1cda      	adds	r2, r3, #3
 8011b70:	fb92 f1f1 	sdiv	r1, r2, r1
 8011b74:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8011b78:	1a52      	subs	r2, r2, r1
 8011b7a:	bf48      	it	mi
 8011b7c:	3207      	addmi	r2, #7
 8011b7e:	4d38      	ldr	r5, [pc, #224]	; (8011c60 <gmtime_r+0x14c>)
 8011b80:	4838      	ldr	r0, [pc, #224]	; (8011c64 <gmtime_r+0x150>)
 8011b82:	61a2      	str	r2, [r4, #24]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	bfb7      	itett	lt
 8011b88:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8011b8c:	fb93 f5f5 	sdivge	r5, r3, r5
 8011b90:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8011b94:	fb92 f5f5 	sdivlt	r5, r2, r5
 8011b98:	fb00 3005 	mla	r0, r0, r5, r3
 8011b9c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8011ba0:	fbb0 f2f2 	udiv	r2, r0, r2
 8011ba4:	4402      	add	r2, r0
 8011ba6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8011baa:	fbb0 f1f3 	udiv	r1, r0, r3
 8011bae:	1a52      	subs	r2, r2, r1
 8011bb0:	f240 1c6d 	movw	ip, #365	; 0x16d
 8011bb4:	492c      	ldr	r1, [pc, #176]	; (8011c68 <gmtime_r+0x154>)
 8011bb6:	fbb0 f1f1 	udiv	r1, r0, r1
 8011bba:	2764      	movs	r7, #100	; 0x64
 8011bbc:	1a52      	subs	r2, r2, r1
 8011bbe:	fbb2 f1fc 	udiv	r1, r2, ip
 8011bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bc6:	fbb1 f6f7 	udiv	r6, r1, r7
 8011bca:	1af3      	subs	r3, r6, r3
 8011bcc:	4403      	add	r3, r0
 8011bce:	fb0c 3311 	mls	r3, ip, r1, r3
 8011bd2:	2299      	movs	r2, #153	; 0x99
 8011bd4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8011bd8:	f10e 0e02 	add.w	lr, lr, #2
 8011bdc:	f103 0c01 	add.w	ip, r3, #1
 8011be0:	fbbe f0f2 	udiv	r0, lr, r2
 8011be4:	4342      	muls	r2, r0
 8011be6:	3202      	adds	r2, #2
 8011be8:	f04f 0805 	mov.w	r8, #5
 8011bec:	fbb2 f2f8 	udiv	r2, r2, r8
 8011bf0:	ebac 0c02 	sub.w	ip, ip, r2
 8011bf4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8011bf8:	4596      	cmp	lr, r2
 8011bfa:	bf94      	ite	ls
 8011bfc:	2202      	movls	r2, #2
 8011bfe:	f06f 0209 	mvnhi.w	r2, #9
 8011c02:	4410      	add	r0, r2
 8011c04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c08:	fb02 1505 	mla	r5, r2, r5, r1
 8011c0c:	2801      	cmp	r0, #1
 8011c0e:	bf98      	it	ls
 8011c10:	3501      	addls	r5, #1
 8011c12:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8011c16:	d30d      	bcc.n	8011c34 <gmtime_r+0x120>
 8011c18:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8011c1c:	61e3      	str	r3, [r4, #28]
 8011c1e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8011c22:	2300      	movs	r3, #0
 8011c24:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8011c28:	f8c4 c00c 	str.w	ip, [r4, #12]
 8011c2c:	6223      	str	r3, [r4, #32]
 8011c2e:	4620      	mov	r0, r4
 8011c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c34:	078a      	lsls	r2, r1, #30
 8011c36:	d102      	bne.n	8011c3e <gmtime_r+0x12a>
 8011c38:	fb07 1616 	mls	r6, r7, r6, r1
 8011c3c:	b95e      	cbnz	r6, 8011c56 <gmtime_r+0x142>
 8011c3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c42:	fbb1 f6f2 	udiv	r6, r1, r2
 8011c46:	fb02 1216 	mls	r2, r2, r6, r1
 8011c4a:	fab2 f282 	clz	r2, r2
 8011c4e:	0952      	lsrs	r2, r2, #5
 8011c50:	333b      	adds	r3, #59	; 0x3b
 8011c52:	4413      	add	r3, r2
 8011c54:	e7e2      	b.n	8011c1c <gmtime_r+0x108>
 8011c56:	2201      	movs	r2, #1
 8011c58:	e7fa      	b.n	8011c50 <gmtime_r+0x13c>
 8011c5a:	bf00      	nop
 8011c5c:	00015180 	.word	0x00015180
 8011c60:	00023ab1 	.word	0x00023ab1
 8011c64:	fffdc54f 	.word	0xfffdc54f
 8011c68:	00023ab0 	.word	0x00023ab0

08011c6c <__libc_init_array>:
 8011c6c:	b570      	push	{r4, r5, r6, lr}
 8011c6e:	4d0d      	ldr	r5, [pc, #52]	; (8011ca4 <__libc_init_array+0x38>)
 8011c70:	4c0d      	ldr	r4, [pc, #52]	; (8011ca8 <__libc_init_array+0x3c>)
 8011c72:	1b64      	subs	r4, r4, r5
 8011c74:	10a4      	asrs	r4, r4, #2
 8011c76:	2600      	movs	r6, #0
 8011c78:	42a6      	cmp	r6, r4
 8011c7a:	d109      	bne.n	8011c90 <__libc_init_array+0x24>
 8011c7c:	4d0b      	ldr	r5, [pc, #44]	; (8011cac <__libc_init_array+0x40>)
 8011c7e:	4c0c      	ldr	r4, [pc, #48]	; (8011cb0 <__libc_init_array+0x44>)
 8011c80:	f001 fa6c 	bl	801315c <_init>
 8011c84:	1b64      	subs	r4, r4, r5
 8011c86:	10a4      	asrs	r4, r4, #2
 8011c88:	2600      	movs	r6, #0
 8011c8a:	42a6      	cmp	r6, r4
 8011c8c:	d105      	bne.n	8011c9a <__libc_init_array+0x2e>
 8011c8e:	bd70      	pop	{r4, r5, r6, pc}
 8011c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c94:	4798      	blx	r3
 8011c96:	3601      	adds	r6, #1
 8011c98:	e7ee      	b.n	8011c78 <__libc_init_array+0xc>
 8011c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c9e:	4798      	blx	r3
 8011ca0:	3601      	adds	r6, #1
 8011ca2:	e7f2      	b.n	8011c8a <__libc_init_array+0x1e>
 8011ca4:	08016f7c 	.word	0x08016f7c
 8011ca8:	08016f7c 	.word	0x08016f7c
 8011cac:	08016f7c 	.word	0x08016f7c
 8011cb0:	08016f80 	.word	0x08016f80

08011cb4 <__retarget_lock_init_recursive>:
 8011cb4:	4770      	bx	lr

08011cb6 <__retarget_lock_acquire_recursive>:
 8011cb6:	4770      	bx	lr

08011cb8 <__retarget_lock_release_recursive>:
 8011cb8:	4770      	bx	lr
	...

08011cbc <malloc>:
 8011cbc:	4b02      	ldr	r3, [pc, #8]	; (8011cc8 <malloc+0xc>)
 8011cbe:	4601      	mov	r1, r0
 8011cc0:	6818      	ldr	r0, [r3, #0]
 8011cc2:	f000 b88d 	b.w	8011de0 <_malloc_r>
 8011cc6:	bf00      	nop
 8011cc8:	200000b8 	.word	0x200000b8

08011ccc <free>:
 8011ccc:	4b02      	ldr	r3, [pc, #8]	; (8011cd8 <free+0xc>)
 8011cce:	4601      	mov	r1, r0
 8011cd0:	6818      	ldr	r0, [r3, #0]
 8011cd2:	f000 b819 	b.w	8011d08 <_free_r>
 8011cd6:	bf00      	nop
 8011cd8:	200000b8 	.word	0x200000b8

08011cdc <memcpy>:
 8011cdc:	440a      	add	r2, r1
 8011cde:	4291      	cmp	r1, r2
 8011ce0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011ce4:	d100      	bne.n	8011ce8 <memcpy+0xc>
 8011ce6:	4770      	bx	lr
 8011ce8:	b510      	push	{r4, lr}
 8011cea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cf2:	4291      	cmp	r1, r2
 8011cf4:	d1f9      	bne.n	8011cea <memcpy+0xe>
 8011cf6:	bd10      	pop	{r4, pc}

08011cf8 <memset>:
 8011cf8:	4402      	add	r2, r0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	d100      	bne.n	8011d02 <memset+0xa>
 8011d00:	4770      	bx	lr
 8011d02:	f803 1b01 	strb.w	r1, [r3], #1
 8011d06:	e7f9      	b.n	8011cfc <memset+0x4>

08011d08 <_free_r>:
 8011d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d0a:	2900      	cmp	r1, #0
 8011d0c:	d044      	beq.n	8011d98 <_free_r+0x90>
 8011d0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d12:	9001      	str	r0, [sp, #4]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f1a1 0404 	sub.w	r4, r1, #4
 8011d1a:	bfb8      	it	lt
 8011d1c:	18e4      	addlt	r4, r4, r3
 8011d1e:	f001 f807 	bl	8012d30 <__malloc_lock>
 8011d22:	4a1e      	ldr	r2, [pc, #120]	; (8011d9c <_free_r+0x94>)
 8011d24:	9801      	ldr	r0, [sp, #4]
 8011d26:	6813      	ldr	r3, [r2, #0]
 8011d28:	b933      	cbnz	r3, 8011d38 <_free_r+0x30>
 8011d2a:	6063      	str	r3, [r4, #4]
 8011d2c:	6014      	str	r4, [r2, #0]
 8011d2e:	b003      	add	sp, #12
 8011d30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d34:	f001 b802 	b.w	8012d3c <__malloc_unlock>
 8011d38:	42a3      	cmp	r3, r4
 8011d3a:	d908      	bls.n	8011d4e <_free_r+0x46>
 8011d3c:	6825      	ldr	r5, [r4, #0]
 8011d3e:	1961      	adds	r1, r4, r5
 8011d40:	428b      	cmp	r3, r1
 8011d42:	bf01      	itttt	eq
 8011d44:	6819      	ldreq	r1, [r3, #0]
 8011d46:	685b      	ldreq	r3, [r3, #4]
 8011d48:	1949      	addeq	r1, r1, r5
 8011d4a:	6021      	streq	r1, [r4, #0]
 8011d4c:	e7ed      	b.n	8011d2a <_free_r+0x22>
 8011d4e:	461a      	mov	r2, r3
 8011d50:	685b      	ldr	r3, [r3, #4]
 8011d52:	b10b      	cbz	r3, 8011d58 <_free_r+0x50>
 8011d54:	42a3      	cmp	r3, r4
 8011d56:	d9fa      	bls.n	8011d4e <_free_r+0x46>
 8011d58:	6811      	ldr	r1, [r2, #0]
 8011d5a:	1855      	adds	r5, r2, r1
 8011d5c:	42a5      	cmp	r5, r4
 8011d5e:	d10b      	bne.n	8011d78 <_free_r+0x70>
 8011d60:	6824      	ldr	r4, [r4, #0]
 8011d62:	4421      	add	r1, r4
 8011d64:	1854      	adds	r4, r2, r1
 8011d66:	42a3      	cmp	r3, r4
 8011d68:	6011      	str	r1, [r2, #0]
 8011d6a:	d1e0      	bne.n	8011d2e <_free_r+0x26>
 8011d6c:	681c      	ldr	r4, [r3, #0]
 8011d6e:	685b      	ldr	r3, [r3, #4]
 8011d70:	6053      	str	r3, [r2, #4]
 8011d72:	4421      	add	r1, r4
 8011d74:	6011      	str	r1, [r2, #0]
 8011d76:	e7da      	b.n	8011d2e <_free_r+0x26>
 8011d78:	d902      	bls.n	8011d80 <_free_r+0x78>
 8011d7a:	230c      	movs	r3, #12
 8011d7c:	6003      	str	r3, [r0, #0]
 8011d7e:	e7d6      	b.n	8011d2e <_free_r+0x26>
 8011d80:	6825      	ldr	r5, [r4, #0]
 8011d82:	1961      	adds	r1, r4, r5
 8011d84:	428b      	cmp	r3, r1
 8011d86:	bf04      	itt	eq
 8011d88:	6819      	ldreq	r1, [r3, #0]
 8011d8a:	685b      	ldreq	r3, [r3, #4]
 8011d8c:	6063      	str	r3, [r4, #4]
 8011d8e:	bf04      	itt	eq
 8011d90:	1949      	addeq	r1, r1, r5
 8011d92:	6021      	streq	r1, [r4, #0]
 8011d94:	6054      	str	r4, [r2, #4]
 8011d96:	e7ca      	b.n	8011d2e <_free_r+0x26>
 8011d98:	b003      	add	sp, #12
 8011d9a:	bd30      	pop	{r4, r5, pc}
 8011d9c:	200083f8 	.word	0x200083f8

08011da0 <sbrk_aligned>:
 8011da0:	b570      	push	{r4, r5, r6, lr}
 8011da2:	4e0e      	ldr	r6, [pc, #56]	; (8011ddc <sbrk_aligned+0x3c>)
 8011da4:	460c      	mov	r4, r1
 8011da6:	6831      	ldr	r1, [r6, #0]
 8011da8:	4605      	mov	r5, r0
 8011daa:	b911      	cbnz	r1, 8011db2 <sbrk_aligned+0x12>
 8011dac:	f000 fbfc 	bl	80125a8 <_sbrk_r>
 8011db0:	6030      	str	r0, [r6, #0]
 8011db2:	4621      	mov	r1, r4
 8011db4:	4628      	mov	r0, r5
 8011db6:	f000 fbf7 	bl	80125a8 <_sbrk_r>
 8011dba:	1c43      	adds	r3, r0, #1
 8011dbc:	d00a      	beq.n	8011dd4 <sbrk_aligned+0x34>
 8011dbe:	1cc4      	adds	r4, r0, #3
 8011dc0:	f024 0403 	bic.w	r4, r4, #3
 8011dc4:	42a0      	cmp	r0, r4
 8011dc6:	d007      	beq.n	8011dd8 <sbrk_aligned+0x38>
 8011dc8:	1a21      	subs	r1, r4, r0
 8011dca:	4628      	mov	r0, r5
 8011dcc:	f000 fbec 	bl	80125a8 <_sbrk_r>
 8011dd0:	3001      	adds	r0, #1
 8011dd2:	d101      	bne.n	8011dd8 <sbrk_aligned+0x38>
 8011dd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8011dd8:	4620      	mov	r0, r4
 8011dda:	bd70      	pop	{r4, r5, r6, pc}
 8011ddc:	200083fc 	.word	0x200083fc

08011de0 <_malloc_r>:
 8011de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de4:	1ccd      	adds	r5, r1, #3
 8011de6:	f025 0503 	bic.w	r5, r5, #3
 8011dea:	3508      	adds	r5, #8
 8011dec:	2d0c      	cmp	r5, #12
 8011dee:	bf38      	it	cc
 8011df0:	250c      	movcc	r5, #12
 8011df2:	2d00      	cmp	r5, #0
 8011df4:	4607      	mov	r7, r0
 8011df6:	db01      	blt.n	8011dfc <_malloc_r+0x1c>
 8011df8:	42a9      	cmp	r1, r5
 8011dfa:	d905      	bls.n	8011e08 <_malloc_r+0x28>
 8011dfc:	230c      	movs	r3, #12
 8011dfe:	603b      	str	r3, [r7, #0]
 8011e00:	2600      	movs	r6, #0
 8011e02:	4630      	mov	r0, r6
 8011e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e08:	4e2e      	ldr	r6, [pc, #184]	; (8011ec4 <_malloc_r+0xe4>)
 8011e0a:	f000 ff91 	bl	8012d30 <__malloc_lock>
 8011e0e:	6833      	ldr	r3, [r6, #0]
 8011e10:	461c      	mov	r4, r3
 8011e12:	bb34      	cbnz	r4, 8011e62 <_malloc_r+0x82>
 8011e14:	4629      	mov	r1, r5
 8011e16:	4638      	mov	r0, r7
 8011e18:	f7ff ffc2 	bl	8011da0 <sbrk_aligned>
 8011e1c:	1c43      	adds	r3, r0, #1
 8011e1e:	4604      	mov	r4, r0
 8011e20:	d14d      	bne.n	8011ebe <_malloc_r+0xde>
 8011e22:	6834      	ldr	r4, [r6, #0]
 8011e24:	4626      	mov	r6, r4
 8011e26:	2e00      	cmp	r6, #0
 8011e28:	d140      	bne.n	8011eac <_malloc_r+0xcc>
 8011e2a:	6823      	ldr	r3, [r4, #0]
 8011e2c:	4631      	mov	r1, r6
 8011e2e:	4638      	mov	r0, r7
 8011e30:	eb04 0803 	add.w	r8, r4, r3
 8011e34:	f000 fbb8 	bl	80125a8 <_sbrk_r>
 8011e38:	4580      	cmp	r8, r0
 8011e3a:	d13a      	bne.n	8011eb2 <_malloc_r+0xd2>
 8011e3c:	6821      	ldr	r1, [r4, #0]
 8011e3e:	3503      	adds	r5, #3
 8011e40:	1a6d      	subs	r5, r5, r1
 8011e42:	f025 0503 	bic.w	r5, r5, #3
 8011e46:	3508      	adds	r5, #8
 8011e48:	2d0c      	cmp	r5, #12
 8011e4a:	bf38      	it	cc
 8011e4c:	250c      	movcc	r5, #12
 8011e4e:	4629      	mov	r1, r5
 8011e50:	4638      	mov	r0, r7
 8011e52:	f7ff ffa5 	bl	8011da0 <sbrk_aligned>
 8011e56:	3001      	adds	r0, #1
 8011e58:	d02b      	beq.n	8011eb2 <_malloc_r+0xd2>
 8011e5a:	6823      	ldr	r3, [r4, #0]
 8011e5c:	442b      	add	r3, r5
 8011e5e:	6023      	str	r3, [r4, #0]
 8011e60:	e00e      	b.n	8011e80 <_malloc_r+0xa0>
 8011e62:	6822      	ldr	r2, [r4, #0]
 8011e64:	1b52      	subs	r2, r2, r5
 8011e66:	d41e      	bmi.n	8011ea6 <_malloc_r+0xc6>
 8011e68:	2a0b      	cmp	r2, #11
 8011e6a:	d916      	bls.n	8011e9a <_malloc_r+0xba>
 8011e6c:	1961      	adds	r1, r4, r5
 8011e6e:	42a3      	cmp	r3, r4
 8011e70:	6025      	str	r5, [r4, #0]
 8011e72:	bf18      	it	ne
 8011e74:	6059      	strne	r1, [r3, #4]
 8011e76:	6863      	ldr	r3, [r4, #4]
 8011e78:	bf08      	it	eq
 8011e7a:	6031      	streq	r1, [r6, #0]
 8011e7c:	5162      	str	r2, [r4, r5]
 8011e7e:	604b      	str	r3, [r1, #4]
 8011e80:	4638      	mov	r0, r7
 8011e82:	f104 060b 	add.w	r6, r4, #11
 8011e86:	f000 ff59 	bl	8012d3c <__malloc_unlock>
 8011e8a:	f026 0607 	bic.w	r6, r6, #7
 8011e8e:	1d23      	adds	r3, r4, #4
 8011e90:	1af2      	subs	r2, r6, r3
 8011e92:	d0b6      	beq.n	8011e02 <_malloc_r+0x22>
 8011e94:	1b9b      	subs	r3, r3, r6
 8011e96:	50a3      	str	r3, [r4, r2]
 8011e98:	e7b3      	b.n	8011e02 <_malloc_r+0x22>
 8011e9a:	6862      	ldr	r2, [r4, #4]
 8011e9c:	42a3      	cmp	r3, r4
 8011e9e:	bf0c      	ite	eq
 8011ea0:	6032      	streq	r2, [r6, #0]
 8011ea2:	605a      	strne	r2, [r3, #4]
 8011ea4:	e7ec      	b.n	8011e80 <_malloc_r+0xa0>
 8011ea6:	4623      	mov	r3, r4
 8011ea8:	6864      	ldr	r4, [r4, #4]
 8011eaa:	e7b2      	b.n	8011e12 <_malloc_r+0x32>
 8011eac:	4634      	mov	r4, r6
 8011eae:	6876      	ldr	r6, [r6, #4]
 8011eb0:	e7b9      	b.n	8011e26 <_malloc_r+0x46>
 8011eb2:	230c      	movs	r3, #12
 8011eb4:	603b      	str	r3, [r7, #0]
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	f000 ff40 	bl	8012d3c <__malloc_unlock>
 8011ebc:	e7a1      	b.n	8011e02 <_malloc_r+0x22>
 8011ebe:	6025      	str	r5, [r4, #0]
 8011ec0:	e7de      	b.n	8011e80 <_malloc_r+0xa0>
 8011ec2:	bf00      	nop
 8011ec4:	200083f8 	.word	0x200083f8

08011ec8 <__sfputc_r>:
 8011ec8:	6893      	ldr	r3, [r2, #8]
 8011eca:	3b01      	subs	r3, #1
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	b410      	push	{r4}
 8011ed0:	6093      	str	r3, [r2, #8]
 8011ed2:	da08      	bge.n	8011ee6 <__sfputc_r+0x1e>
 8011ed4:	6994      	ldr	r4, [r2, #24]
 8011ed6:	42a3      	cmp	r3, r4
 8011ed8:	db01      	blt.n	8011ede <__sfputc_r+0x16>
 8011eda:	290a      	cmp	r1, #10
 8011edc:	d103      	bne.n	8011ee6 <__sfputc_r+0x1e>
 8011ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ee2:	f000 bce7 	b.w	80128b4 <__swbuf_r>
 8011ee6:	6813      	ldr	r3, [r2, #0]
 8011ee8:	1c58      	adds	r0, r3, #1
 8011eea:	6010      	str	r0, [r2, #0]
 8011eec:	7019      	strb	r1, [r3, #0]
 8011eee:	4608      	mov	r0, r1
 8011ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <__sfputs_r>:
 8011ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef8:	4606      	mov	r6, r0
 8011efa:	460f      	mov	r7, r1
 8011efc:	4614      	mov	r4, r2
 8011efe:	18d5      	adds	r5, r2, r3
 8011f00:	42ac      	cmp	r4, r5
 8011f02:	d101      	bne.n	8011f08 <__sfputs_r+0x12>
 8011f04:	2000      	movs	r0, #0
 8011f06:	e007      	b.n	8011f18 <__sfputs_r+0x22>
 8011f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f0c:	463a      	mov	r2, r7
 8011f0e:	4630      	mov	r0, r6
 8011f10:	f7ff ffda 	bl	8011ec8 <__sfputc_r>
 8011f14:	1c43      	adds	r3, r0, #1
 8011f16:	d1f3      	bne.n	8011f00 <__sfputs_r+0xa>
 8011f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f1c <_vfiprintf_r>:
 8011f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f20:	460d      	mov	r5, r1
 8011f22:	b09d      	sub	sp, #116	; 0x74
 8011f24:	4614      	mov	r4, r2
 8011f26:	4698      	mov	r8, r3
 8011f28:	4606      	mov	r6, r0
 8011f2a:	b118      	cbz	r0, 8011f34 <_vfiprintf_r+0x18>
 8011f2c:	6983      	ldr	r3, [r0, #24]
 8011f2e:	b90b      	cbnz	r3, 8011f34 <_vfiprintf_r+0x18>
 8011f30:	f7ff fd40 	bl	80119b4 <__sinit>
 8011f34:	4b89      	ldr	r3, [pc, #548]	; (801215c <_vfiprintf_r+0x240>)
 8011f36:	429d      	cmp	r5, r3
 8011f38:	d11b      	bne.n	8011f72 <_vfiprintf_r+0x56>
 8011f3a:	6875      	ldr	r5, [r6, #4]
 8011f3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f3e:	07d9      	lsls	r1, r3, #31
 8011f40:	d405      	bmi.n	8011f4e <_vfiprintf_r+0x32>
 8011f42:	89ab      	ldrh	r3, [r5, #12]
 8011f44:	059a      	lsls	r2, r3, #22
 8011f46:	d402      	bmi.n	8011f4e <_vfiprintf_r+0x32>
 8011f48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f4a:	f7ff feb4 	bl	8011cb6 <__retarget_lock_acquire_recursive>
 8011f4e:	89ab      	ldrh	r3, [r5, #12]
 8011f50:	071b      	lsls	r3, r3, #28
 8011f52:	d501      	bpl.n	8011f58 <_vfiprintf_r+0x3c>
 8011f54:	692b      	ldr	r3, [r5, #16]
 8011f56:	b9eb      	cbnz	r3, 8011f94 <_vfiprintf_r+0x78>
 8011f58:	4629      	mov	r1, r5
 8011f5a:	4630      	mov	r0, r6
 8011f5c:	f000 fd0e 	bl	801297c <__swsetup_r>
 8011f60:	b1c0      	cbz	r0, 8011f94 <_vfiprintf_r+0x78>
 8011f62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f64:	07dc      	lsls	r4, r3, #31
 8011f66:	d50e      	bpl.n	8011f86 <_vfiprintf_r+0x6a>
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f6c:	b01d      	add	sp, #116	; 0x74
 8011f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f72:	4b7b      	ldr	r3, [pc, #492]	; (8012160 <_vfiprintf_r+0x244>)
 8011f74:	429d      	cmp	r5, r3
 8011f76:	d101      	bne.n	8011f7c <_vfiprintf_r+0x60>
 8011f78:	68b5      	ldr	r5, [r6, #8]
 8011f7a:	e7df      	b.n	8011f3c <_vfiprintf_r+0x20>
 8011f7c:	4b79      	ldr	r3, [pc, #484]	; (8012164 <_vfiprintf_r+0x248>)
 8011f7e:	429d      	cmp	r5, r3
 8011f80:	bf08      	it	eq
 8011f82:	68f5      	ldreq	r5, [r6, #12]
 8011f84:	e7da      	b.n	8011f3c <_vfiprintf_r+0x20>
 8011f86:	89ab      	ldrh	r3, [r5, #12]
 8011f88:	0598      	lsls	r0, r3, #22
 8011f8a:	d4ed      	bmi.n	8011f68 <_vfiprintf_r+0x4c>
 8011f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f8e:	f7ff fe93 	bl	8011cb8 <__retarget_lock_release_recursive>
 8011f92:	e7e9      	b.n	8011f68 <_vfiprintf_r+0x4c>
 8011f94:	2300      	movs	r3, #0
 8011f96:	9309      	str	r3, [sp, #36]	; 0x24
 8011f98:	2320      	movs	r3, #32
 8011f9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011f9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fa2:	2330      	movs	r3, #48	; 0x30
 8011fa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012168 <_vfiprintf_r+0x24c>
 8011fa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fac:	f04f 0901 	mov.w	r9, #1
 8011fb0:	4623      	mov	r3, r4
 8011fb2:	469a      	mov	sl, r3
 8011fb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fb8:	b10a      	cbz	r2, 8011fbe <_vfiprintf_r+0xa2>
 8011fba:	2a25      	cmp	r2, #37	; 0x25
 8011fbc:	d1f9      	bne.n	8011fb2 <_vfiprintf_r+0x96>
 8011fbe:	ebba 0b04 	subs.w	fp, sl, r4
 8011fc2:	d00b      	beq.n	8011fdc <_vfiprintf_r+0xc0>
 8011fc4:	465b      	mov	r3, fp
 8011fc6:	4622      	mov	r2, r4
 8011fc8:	4629      	mov	r1, r5
 8011fca:	4630      	mov	r0, r6
 8011fcc:	f7ff ff93 	bl	8011ef6 <__sfputs_r>
 8011fd0:	3001      	adds	r0, #1
 8011fd2:	f000 80aa 	beq.w	801212a <_vfiprintf_r+0x20e>
 8011fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011fd8:	445a      	add	r2, fp
 8011fda:	9209      	str	r2, [sp, #36]	; 0x24
 8011fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f000 80a2 	beq.w	801212a <_vfiprintf_r+0x20e>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011fec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ff0:	f10a 0a01 	add.w	sl, sl, #1
 8011ff4:	9304      	str	r3, [sp, #16]
 8011ff6:	9307      	str	r3, [sp, #28]
 8011ff8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ffc:	931a      	str	r3, [sp, #104]	; 0x68
 8011ffe:	4654      	mov	r4, sl
 8012000:	2205      	movs	r2, #5
 8012002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012006:	4858      	ldr	r0, [pc, #352]	; (8012168 <_vfiprintf_r+0x24c>)
 8012008:	f7ee f8ea 	bl	80001e0 <memchr>
 801200c:	9a04      	ldr	r2, [sp, #16]
 801200e:	b9d8      	cbnz	r0, 8012048 <_vfiprintf_r+0x12c>
 8012010:	06d1      	lsls	r1, r2, #27
 8012012:	bf44      	itt	mi
 8012014:	2320      	movmi	r3, #32
 8012016:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801201a:	0713      	lsls	r3, r2, #28
 801201c:	bf44      	itt	mi
 801201e:	232b      	movmi	r3, #43	; 0x2b
 8012020:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012024:	f89a 3000 	ldrb.w	r3, [sl]
 8012028:	2b2a      	cmp	r3, #42	; 0x2a
 801202a:	d015      	beq.n	8012058 <_vfiprintf_r+0x13c>
 801202c:	9a07      	ldr	r2, [sp, #28]
 801202e:	4654      	mov	r4, sl
 8012030:	2000      	movs	r0, #0
 8012032:	f04f 0c0a 	mov.w	ip, #10
 8012036:	4621      	mov	r1, r4
 8012038:	f811 3b01 	ldrb.w	r3, [r1], #1
 801203c:	3b30      	subs	r3, #48	; 0x30
 801203e:	2b09      	cmp	r3, #9
 8012040:	d94e      	bls.n	80120e0 <_vfiprintf_r+0x1c4>
 8012042:	b1b0      	cbz	r0, 8012072 <_vfiprintf_r+0x156>
 8012044:	9207      	str	r2, [sp, #28]
 8012046:	e014      	b.n	8012072 <_vfiprintf_r+0x156>
 8012048:	eba0 0308 	sub.w	r3, r0, r8
 801204c:	fa09 f303 	lsl.w	r3, r9, r3
 8012050:	4313      	orrs	r3, r2
 8012052:	9304      	str	r3, [sp, #16]
 8012054:	46a2      	mov	sl, r4
 8012056:	e7d2      	b.n	8011ffe <_vfiprintf_r+0xe2>
 8012058:	9b03      	ldr	r3, [sp, #12]
 801205a:	1d19      	adds	r1, r3, #4
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	9103      	str	r1, [sp, #12]
 8012060:	2b00      	cmp	r3, #0
 8012062:	bfbb      	ittet	lt
 8012064:	425b      	neglt	r3, r3
 8012066:	f042 0202 	orrlt.w	r2, r2, #2
 801206a:	9307      	strge	r3, [sp, #28]
 801206c:	9307      	strlt	r3, [sp, #28]
 801206e:	bfb8      	it	lt
 8012070:	9204      	strlt	r2, [sp, #16]
 8012072:	7823      	ldrb	r3, [r4, #0]
 8012074:	2b2e      	cmp	r3, #46	; 0x2e
 8012076:	d10c      	bne.n	8012092 <_vfiprintf_r+0x176>
 8012078:	7863      	ldrb	r3, [r4, #1]
 801207a:	2b2a      	cmp	r3, #42	; 0x2a
 801207c:	d135      	bne.n	80120ea <_vfiprintf_r+0x1ce>
 801207e:	9b03      	ldr	r3, [sp, #12]
 8012080:	1d1a      	adds	r2, r3, #4
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	9203      	str	r2, [sp, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	bfb8      	it	lt
 801208a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801208e:	3402      	adds	r4, #2
 8012090:	9305      	str	r3, [sp, #20]
 8012092:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012178 <_vfiprintf_r+0x25c>
 8012096:	7821      	ldrb	r1, [r4, #0]
 8012098:	2203      	movs	r2, #3
 801209a:	4650      	mov	r0, sl
 801209c:	f7ee f8a0 	bl	80001e0 <memchr>
 80120a0:	b140      	cbz	r0, 80120b4 <_vfiprintf_r+0x198>
 80120a2:	2340      	movs	r3, #64	; 0x40
 80120a4:	eba0 000a 	sub.w	r0, r0, sl
 80120a8:	fa03 f000 	lsl.w	r0, r3, r0
 80120ac:	9b04      	ldr	r3, [sp, #16]
 80120ae:	4303      	orrs	r3, r0
 80120b0:	3401      	adds	r4, #1
 80120b2:	9304      	str	r3, [sp, #16]
 80120b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120b8:	482c      	ldr	r0, [pc, #176]	; (801216c <_vfiprintf_r+0x250>)
 80120ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120be:	2206      	movs	r2, #6
 80120c0:	f7ee f88e 	bl	80001e0 <memchr>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d03f      	beq.n	8012148 <_vfiprintf_r+0x22c>
 80120c8:	4b29      	ldr	r3, [pc, #164]	; (8012170 <_vfiprintf_r+0x254>)
 80120ca:	bb1b      	cbnz	r3, 8012114 <_vfiprintf_r+0x1f8>
 80120cc:	9b03      	ldr	r3, [sp, #12]
 80120ce:	3307      	adds	r3, #7
 80120d0:	f023 0307 	bic.w	r3, r3, #7
 80120d4:	3308      	adds	r3, #8
 80120d6:	9303      	str	r3, [sp, #12]
 80120d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120da:	443b      	add	r3, r7
 80120dc:	9309      	str	r3, [sp, #36]	; 0x24
 80120de:	e767      	b.n	8011fb0 <_vfiprintf_r+0x94>
 80120e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80120e4:	460c      	mov	r4, r1
 80120e6:	2001      	movs	r0, #1
 80120e8:	e7a5      	b.n	8012036 <_vfiprintf_r+0x11a>
 80120ea:	2300      	movs	r3, #0
 80120ec:	3401      	adds	r4, #1
 80120ee:	9305      	str	r3, [sp, #20]
 80120f0:	4619      	mov	r1, r3
 80120f2:	f04f 0c0a 	mov.w	ip, #10
 80120f6:	4620      	mov	r0, r4
 80120f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80120fc:	3a30      	subs	r2, #48	; 0x30
 80120fe:	2a09      	cmp	r2, #9
 8012100:	d903      	bls.n	801210a <_vfiprintf_r+0x1ee>
 8012102:	2b00      	cmp	r3, #0
 8012104:	d0c5      	beq.n	8012092 <_vfiprintf_r+0x176>
 8012106:	9105      	str	r1, [sp, #20]
 8012108:	e7c3      	b.n	8012092 <_vfiprintf_r+0x176>
 801210a:	fb0c 2101 	mla	r1, ip, r1, r2
 801210e:	4604      	mov	r4, r0
 8012110:	2301      	movs	r3, #1
 8012112:	e7f0      	b.n	80120f6 <_vfiprintf_r+0x1da>
 8012114:	ab03      	add	r3, sp, #12
 8012116:	9300      	str	r3, [sp, #0]
 8012118:	462a      	mov	r2, r5
 801211a:	4b16      	ldr	r3, [pc, #88]	; (8012174 <_vfiprintf_r+0x258>)
 801211c:	a904      	add	r1, sp, #16
 801211e:	4630      	mov	r0, r6
 8012120:	f3af 8000 	nop.w
 8012124:	4607      	mov	r7, r0
 8012126:	1c78      	adds	r0, r7, #1
 8012128:	d1d6      	bne.n	80120d8 <_vfiprintf_r+0x1bc>
 801212a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801212c:	07d9      	lsls	r1, r3, #31
 801212e:	d405      	bmi.n	801213c <_vfiprintf_r+0x220>
 8012130:	89ab      	ldrh	r3, [r5, #12]
 8012132:	059a      	lsls	r2, r3, #22
 8012134:	d402      	bmi.n	801213c <_vfiprintf_r+0x220>
 8012136:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012138:	f7ff fdbe 	bl	8011cb8 <__retarget_lock_release_recursive>
 801213c:	89ab      	ldrh	r3, [r5, #12]
 801213e:	065b      	lsls	r3, r3, #25
 8012140:	f53f af12 	bmi.w	8011f68 <_vfiprintf_r+0x4c>
 8012144:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012146:	e711      	b.n	8011f6c <_vfiprintf_r+0x50>
 8012148:	ab03      	add	r3, sp, #12
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	462a      	mov	r2, r5
 801214e:	4b09      	ldr	r3, [pc, #36]	; (8012174 <_vfiprintf_r+0x258>)
 8012150:	a904      	add	r1, sp, #16
 8012152:	4630      	mov	r0, r6
 8012154:	f000 f880 	bl	8012258 <_printf_i>
 8012158:	e7e4      	b.n	8012124 <_vfiprintf_r+0x208>
 801215a:	bf00      	nop
 801215c:	08016dfc 	.word	0x08016dfc
 8012160:	08016e1c 	.word	0x08016e1c
 8012164:	08016ddc 	.word	0x08016ddc
 8012168:	08016e40 	.word	0x08016e40
 801216c:	08016e4a 	.word	0x08016e4a
 8012170:	00000000 	.word	0x00000000
 8012174:	08011ef7 	.word	0x08011ef7
 8012178:	08016e46 	.word	0x08016e46

0801217c <_printf_common>:
 801217c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012180:	4616      	mov	r6, r2
 8012182:	4699      	mov	r9, r3
 8012184:	688a      	ldr	r2, [r1, #8]
 8012186:	690b      	ldr	r3, [r1, #16]
 8012188:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801218c:	4293      	cmp	r3, r2
 801218e:	bfb8      	it	lt
 8012190:	4613      	movlt	r3, r2
 8012192:	6033      	str	r3, [r6, #0]
 8012194:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012198:	4607      	mov	r7, r0
 801219a:	460c      	mov	r4, r1
 801219c:	b10a      	cbz	r2, 80121a2 <_printf_common+0x26>
 801219e:	3301      	adds	r3, #1
 80121a0:	6033      	str	r3, [r6, #0]
 80121a2:	6823      	ldr	r3, [r4, #0]
 80121a4:	0699      	lsls	r1, r3, #26
 80121a6:	bf42      	ittt	mi
 80121a8:	6833      	ldrmi	r3, [r6, #0]
 80121aa:	3302      	addmi	r3, #2
 80121ac:	6033      	strmi	r3, [r6, #0]
 80121ae:	6825      	ldr	r5, [r4, #0]
 80121b0:	f015 0506 	ands.w	r5, r5, #6
 80121b4:	d106      	bne.n	80121c4 <_printf_common+0x48>
 80121b6:	f104 0a19 	add.w	sl, r4, #25
 80121ba:	68e3      	ldr	r3, [r4, #12]
 80121bc:	6832      	ldr	r2, [r6, #0]
 80121be:	1a9b      	subs	r3, r3, r2
 80121c0:	42ab      	cmp	r3, r5
 80121c2:	dc26      	bgt.n	8012212 <_printf_common+0x96>
 80121c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80121c8:	1e13      	subs	r3, r2, #0
 80121ca:	6822      	ldr	r2, [r4, #0]
 80121cc:	bf18      	it	ne
 80121ce:	2301      	movne	r3, #1
 80121d0:	0692      	lsls	r2, r2, #26
 80121d2:	d42b      	bmi.n	801222c <_printf_common+0xb0>
 80121d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80121d8:	4649      	mov	r1, r9
 80121da:	4638      	mov	r0, r7
 80121dc:	47c0      	blx	r8
 80121de:	3001      	adds	r0, #1
 80121e0:	d01e      	beq.n	8012220 <_printf_common+0xa4>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	68e5      	ldr	r5, [r4, #12]
 80121e6:	6832      	ldr	r2, [r6, #0]
 80121e8:	f003 0306 	and.w	r3, r3, #6
 80121ec:	2b04      	cmp	r3, #4
 80121ee:	bf08      	it	eq
 80121f0:	1aad      	subeq	r5, r5, r2
 80121f2:	68a3      	ldr	r3, [r4, #8]
 80121f4:	6922      	ldr	r2, [r4, #16]
 80121f6:	bf0c      	ite	eq
 80121f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80121fc:	2500      	movne	r5, #0
 80121fe:	4293      	cmp	r3, r2
 8012200:	bfc4      	itt	gt
 8012202:	1a9b      	subgt	r3, r3, r2
 8012204:	18ed      	addgt	r5, r5, r3
 8012206:	2600      	movs	r6, #0
 8012208:	341a      	adds	r4, #26
 801220a:	42b5      	cmp	r5, r6
 801220c:	d11a      	bne.n	8012244 <_printf_common+0xc8>
 801220e:	2000      	movs	r0, #0
 8012210:	e008      	b.n	8012224 <_printf_common+0xa8>
 8012212:	2301      	movs	r3, #1
 8012214:	4652      	mov	r2, sl
 8012216:	4649      	mov	r1, r9
 8012218:	4638      	mov	r0, r7
 801221a:	47c0      	blx	r8
 801221c:	3001      	adds	r0, #1
 801221e:	d103      	bne.n	8012228 <_printf_common+0xac>
 8012220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012228:	3501      	adds	r5, #1
 801222a:	e7c6      	b.n	80121ba <_printf_common+0x3e>
 801222c:	18e1      	adds	r1, r4, r3
 801222e:	1c5a      	adds	r2, r3, #1
 8012230:	2030      	movs	r0, #48	; 0x30
 8012232:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012236:	4422      	add	r2, r4
 8012238:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801223c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012240:	3302      	adds	r3, #2
 8012242:	e7c7      	b.n	80121d4 <_printf_common+0x58>
 8012244:	2301      	movs	r3, #1
 8012246:	4622      	mov	r2, r4
 8012248:	4649      	mov	r1, r9
 801224a:	4638      	mov	r0, r7
 801224c:	47c0      	blx	r8
 801224e:	3001      	adds	r0, #1
 8012250:	d0e6      	beq.n	8012220 <_printf_common+0xa4>
 8012252:	3601      	adds	r6, #1
 8012254:	e7d9      	b.n	801220a <_printf_common+0x8e>
	...

08012258 <_printf_i>:
 8012258:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801225c:	7e0f      	ldrb	r7, [r1, #24]
 801225e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012260:	2f78      	cmp	r7, #120	; 0x78
 8012262:	4691      	mov	r9, r2
 8012264:	4680      	mov	r8, r0
 8012266:	460c      	mov	r4, r1
 8012268:	469a      	mov	sl, r3
 801226a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801226e:	d807      	bhi.n	8012280 <_printf_i+0x28>
 8012270:	2f62      	cmp	r7, #98	; 0x62
 8012272:	d80a      	bhi.n	801228a <_printf_i+0x32>
 8012274:	2f00      	cmp	r7, #0
 8012276:	f000 80d8 	beq.w	801242a <_printf_i+0x1d2>
 801227a:	2f58      	cmp	r7, #88	; 0x58
 801227c:	f000 80a3 	beq.w	80123c6 <_printf_i+0x16e>
 8012280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012284:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012288:	e03a      	b.n	8012300 <_printf_i+0xa8>
 801228a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801228e:	2b15      	cmp	r3, #21
 8012290:	d8f6      	bhi.n	8012280 <_printf_i+0x28>
 8012292:	a101      	add	r1, pc, #4	; (adr r1, 8012298 <_printf_i+0x40>)
 8012294:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012298:	080122f1 	.word	0x080122f1
 801229c:	08012305 	.word	0x08012305
 80122a0:	08012281 	.word	0x08012281
 80122a4:	08012281 	.word	0x08012281
 80122a8:	08012281 	.word	0x08012281
 80122ac:	08012281 	.word	0x08012281
 80122b0:	08012305 	.word	0x08012305
 80122b4:	08012281 	.word	0x08012281
 80122b8:	08012281 	.word	0x08012281
 80122bc:	08012281 	.word	0x08012281
 80122c0:	08012281 	.word	0x08012281
 80122c4:	08012411 	.word	0x08012411
 80122c8:	08012335 	.word	0x08012335
 80122cc:	080123f3 	.word	0x080123f3
 80122d0:	08012281 	.word	0x08012281
 80122d4:	08012281 	.word	0x08012281
 80122d8:	08012433 	.word	0x08012433
 80122dc:	08012281 	.word	0x08012281
 80122e0:	08012335 	.word	0x08012335
 80122e4:	08012281 	.word	0x08012281
 80122e8:	08012281 	.word	0x08012281
 80122ec:	080123fb 	.word	0x080123fb
 80122f0:	682b      	ldr	r3, [r5, #0]
 80122f2:	1d1a      	adds	r2, r3, #4
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	602a      	str	r2, [r5, #0]
 80122f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012300:	2301      	movs	r3, #1
 8012302:	e0a3      	b.n	801244c <_printf_i+0x1f4>
 8012304:	6820      	ldr	r0, [r4, #0]
 8012306:	6829      	ldr	r1, [r5, #0]
 8012308:	0606      	lsls	r6, r0, #24
 801230a:	f101 0304 	add.w	r3, r1, #4
 801230e:	d50a      	bpl.n	8012326 <_printf_i+0xce>
 8012310:	680e      	ldr	r6, [r1, #0]
 8012312:	602b      	str	r3, [r5, #0]
 8012314:	2e00      	cmp	r6, #0
 8012316:	da03      	bge.n	8012320 <_printf_i+0xc8>
 8012318:	232d      	movs	r3, #45	; 0x2d
 801231a:	4276      	negs	r6, r6
 801231c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012320:	485e      	ldr	r0, [pc, #376]	; (801249c <_printf_i+0x244>)
 8012322:	230a      	movs	r3, #10
 8012324:	e019      	b.n	801235a <_printf_i+0x102>
 8012326:	680e      	ldr	r6, [r1, #0]
 8012328:	602b      	str	r3, [r5, #0]
 801232a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801232e:	bf18      	it	ne
 8012330:	b236      	sxthne	r6, r6
 8012332:	e7ef      	b.n	8012314 <_printf_i+0xbc>
 8012334:	682b      	ldr	r3, [r5, #0]
 8012336:	6820      	ldr	r0, [r4, #0]
 8012338:	1d19      	adds	r1, r3, #4
 801233a:	6029      	str	r1, [r5, #0]
 801233c:	0601      	lsls	r1, r0, #24
 801233e:	d501      	bpl.n	8012344 <_printf_i+0xec>
 8012340:	681e      	ldr	r6, [r3, #0]
 8012342:	e002      	b.n	801234a <_printf_i+0xf2>
 8012344:	0646      	lsls	r6, r0, #25
 8012346:	d5fb      	bpl.n	8012340 <_printf_i+0xe8>
 8012348:	881e      	ldrh	r6, [r3, #0]
 801234a:	4854      	ldr	r0, [pc, #336]	; (801249c <_printf_i+0x244>)
 801234c:	2f6f      	cmp	r7, #111	; 0x6f
 801234e:	bf0c      	ite	eq
 8012350:	2308      	moveq	r3, #8
 8012352:	230a      	movne	r3, #10
 8012354:	2100      	movs	r1, #0
 8012356:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801235a:	6865      	ldr	r5, [r4, #4]
 801235c:	60a5      	str	r5, [r4, #8]
 801235e:	2d00      	cmp	r5, #0
 8012360:	bfa2      	ittt	ge
 8012362:	6821      	ldrge	r1, [r4, #0]
 8012364:	f021 0104 	bicge.w	r1, r1, #4
 8012368:	6021      	strge	r1, [r4, #0]
 801236a:	b90e      	cbnz	r6, 8012370 <_printf_i+0x118>
 801236c:	2d00      	cmp	r5, #0
 801236e:	d04d      	beq.n	801240c <_printf_i+0x1b4>
 8012370:	4615      	mov	r5, r2
 8012372:	fbb6 f1f3 	udiv	r1, r6, r3
 8012376:	fb03 6711 	mls	r7, r3, r1, r6
 801237a:	5dc7      	ldrb	r7, [r0, r7]
 801237c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012380:	4637      	mov	r7, r6
 8012382:	42bb      	cmp	r3, r7
 8012384:	460e      	mov	r6, r1
 8012386:	d9f4      	bls.n	8012372 <_printf_i+0x11a>
 8012388:	2b08      	cmp	r3, #8
 801238a:	d10b      	bne.n	80123a4 <_printf_i+0x14c>
 801238c:	6823      	ldr	r3, [r4, #0]
 801238e:	07de      	lsls	r6, r3, #31
 8012390:	d508      	bpl.n	80123a4 <_printf_i+0x14c>
 8012392:	6923      	ldr	r3, [r4, #16]
 8012394:	6861      	ldr	r1, [r4, #4]
 8012396:	4299      	cmp	r1, r3
 8012398:	bfde      	ittt	le
 801239a:	2330      	movle	r3, #48	; 0x30
 801239c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80123a4:	1b52      	subs	r2, r2, r5
 80123a6:	6122      	str	r2, [r4, #16]
 80123a8:	f8cd a000 	str.w	sl, [sp]
 80123ac:	464b      	mov	r3, r9
 80123ae:	aa03      	add	r2, sp, #12
 80123b0:	4621      	mov	r1, r4
 80123b2:	4640      	mov	r0, r8
 80123b4:	f7ff fee2 	bl	801217c <_printf_common>
 80123b8:	3001      	adds	r0, #1
 80123ba:	d14c      	bne.n	8012456 <_printf_i+0x1fe>
 80123bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80123c0:	b004      	add	sp, #16
 80123c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123c6:	4835      	ldr	r0, [pc, #212]	; (801249c <_printf_i+0x244>)
 80123c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80123cc:	6829      	ldr	r1, [r5, #0]
 80123ce:	6823      	ldr	r3, [r4, #0]
 80123d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80123d4:	6029      	str	r1, [r5, #0]
 80123d6:	061d      	lsls	r5, r3, #24
 80123d8:	d514      	bpl.n	8012404 <_printf_i+0x1ac>
 80123da:	07df      	lsls	r7, r3, #31
 80123dc:	bf44      	itt	mi
 80123de:	f043 0320 	orrmi.w	r3, r3, #32
 80123e2:	6023      	strmi	r3, [r4, #0]
 80123e4:	b91e      	cbnz	r6, 80123ee <_printf_i+0x196>
 80123e6:	6823      	ldr	r3, [r4, #0]
 80123e8:	f023 0320 	bic.w	r3, r3, #32
 80123ec:	6023      	str	r3, [r4, #0]
 80123ee:	2310      	movs	r3, #16
 80123f0:	e7b0      	b.n	8012354 <_printf_i+0xfc>
 80123f2:	6823      	ldr	r3, [r4, #0]
 80123f4:	f043 0320 	orr.w	r3, r3, #32
 80123f8:	6023      	str	r3, [r4, #0]
 80123fa:	2378      	movs	r3, #120	; 0x78
 80123fc:	4828      	ldr	r0, [pc, #160]	; (80124a0 <_printf_i+0x248>)
 80123fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012402:	e7e3      	b.n	80123cc <_printf_i+0x174>
 8012404:	0659      	lsls	r1, r3, #25
 8012406:	bf48      	it	mi
 8012408:	b2b6      	uxthmi	r6, r6
 801240a:	e7e6      	b.n	80123da <_printf_i+0x182>
 801240c:	4615      	mov	r5, r2
 801240e:	e7bb      	b.n	8012388 <_printf_i+0x130>
 8012410:	682b      	ldr	r3, [r5, #0]
 8012412:	6826      	ldr	r6, [r4, #0]
 8012414:	6961      	ldr	r1, [r4, #20]
 8012416:	1d18      	adds	r0, r3, #4
 8012418:	6028      	str	r0, [r5, #0]
 801241a:	0635      	lsls	r5, r6, #24
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	d501      	bpl.n	8012424 <_printf_i+0x1cc>
 8012420:	6019      	str	r1, [r3, #0]
 8012422:	e002      	b.n	801242a <_printf_i+0x1d2>
 8012424:	0670      	lsls	r0, r6, #25
 8012426:	d5fb      	bpl.n	8012420 <_printf_i+0x1c8>
 8012428:	8019      	strh	r1, [r3, #0]
 801242a:	2300      	movs	r3, #0
 801242c:	6123      	str	r3, [r4, #16]
 801242e:	4615      	mov	r5, r2
 8012430:	e7ba      	b.n	80123a8 <_printf_i+0x150>
 8012432:	682b      	ldr	r3, [r5, #0]
 8012434:	1d1a      	adds	r2, r3, #4
 8012436:	602a      	str	r2, [r5, #0]
 8012438:	681d      	ldr	r5, [r3, #0]
 801243a:	6862      	ldr	r2, [r4, #4]
 801243c:	2100      	movs	r1, #0
 801243e:	4628      	mov	r0, r5
 8012440:	f7ed fece 	bl	80001e0 <memchr>
 8012444:	b108      	cbz	r0, 801244a <_printf_i+0x1f2>
 8012446:	1b40      	subs	r0, r0, r5
 8012448:	6060      	str	r0, [r4, #4]
 801244a:	6863      	ldr	r3, [r4, #4]
 801244c:	6123      	str	r3, [r4, #16]
 801244e:	2300      	movs	r3, #0
 8012450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012454:	e7a8      	b.n	80123a8 <_printf_i+0x150>
 8012456:	6923      	ldr	r3, [r4, #16]
 8012458:	462a      	mov	r2, r5
 801245a:	4649      	mov	r1, r9
 801245c:	4640      	mov	r0, r8
 801245e:	47d0      	blx	sl
 8012460:	3001      	adds	r0, #1
 8012462:	d0ab      	beq.n	80123bc <_printf_i+0x164>
 8012464:	6823      	ldr	r3, [r4, #0]
 8012466:	079b      	lsls	r3, r3, #30
 8012468:	d413      	bmi.n	8012492 <_printf_i+0x23a>
 801246a:	68e0      	ldr	r0, [r4, #12]
 801246c:	9b03      	ldr	r3, [sp, #12]
 801246e:	4298      	cmp	r0, r3
 8012470:	bfb8      	it	lt
 8012472:	4618      	movlt	r0, r3
 8012474:	e7a4      	b.n	80123c0 <_printf_i+0x168>
 8012476:	2301      	movs	r3, #1
 8012478:	4632      	mov	r2, r6
 801247a:	4649      	mov	r1, r9
 801247c:	4640      	mov	r0, r8
 801247e:	47d0      	blx	sl
 8012480:	3001      	adds	r0, #1
 8012482:	d09b      	beq.n	80123bc <_printf_i+0x164>
 8012484:	3501      	adds	r5, #1
 8012486:	68e3      	ldr	r3, [r4, #12]
 8012488:	9903      	ldr	r1, [sp, #12]
 801248a:	1a5b      	subs	r3, r3, r1
 801248c:	42ab      	cmp	r3, r5
 801248e:	dcf2      	bgt.n	8012476 <_printf_i+0x21e>
 8012490:	e7eb      	b.n	801246a <_printf_i+0x212>
 8012492:	2500      	movs	r5, #0
 8012494:	f104 0619 	add.w	r6, r4, #25
 8012498:	e7f5      	b.n	8012486 <_printf_i+0x22e>
 801249a:	bf00      	nop
 801249c:	08016e51 	.word	0x08016e51
 80124a0:	08016e62 	.word	0x08016e62

080124a4 <iprintf>:
 80124a4:	b40f      	push	{r0, r1, r2, r3}
 80124a6:	4b0a      	ldr	r3, [pc, #40]	; (80124d0 <iprintf+0x2c>)
 80124a8:	b513      	push	{r0, r1, r4, lr}
 80124aa:	681c      	ldr	r4, [r3, #0]
 80124ac:	b124      	cbz	r4, 80124b8 <iprintf+0x14>
 80124ae:	69a3      	ldr	r3, [r4, #24]
 80124b0:	b913      	cbnz	r3, 80124b8 <iprintf+0x14>
 80124b2:	4620      	mov	r0, r4
 80124b4:	f7ff fa7e 	bl	80119b4 <__sinit>
 80124b8:	ab05      	add	r3, sp, #20
 80124ba:	9a04      	ldr	r2, [sp, #16]
 80124bc:	68a1      	ldr	r1, [r4, #8]
 80124be:	9301      	str	r3, [sp, #4]
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7ff fd2b 	bl	8011f1c <_vfiprintf_r>
 80124c6:	b002      	add	sp, #8
 80124c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80124cc:	b004      	add	sp, #16
 80124ce:	4770      	bx	lr
 80124d0:	200000b8 	.word	0x200000b8

080124d4 <cleanup_glue>:
 80124d4:	b538      	push	{r3, r4, r5, lr}
 80124d6:	460c      	mov	r4, r1
 80124d8:	6809      	ldr	r1, [r1, #0]
 80124da:	4605      	mov	r5, r0
 80124dc:	b109      	cbz	r1, 80124e2 <cleanup_glue+0xe>
 80124de:	f7ff fff9 	bl	80124d4 <cleanup_glue>
 80124e2:	4621      	mov	r1, r4
 80124e4:	4628      	mov	r0, r5
 80124e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124ea:	f7ff bc0d 	b.w	8011d08 <_free_r>
	...

080124f0 <_reclaim_reent>:
 80124f0:	4b2c      	ldr	r3, [pc, #176]	; (80125a4 <_reclaim_reent+0xb4>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	4283      	cmp	r3, r0
 80124f6:	b570      	push	{r4, r5, r6, lr}
 80124f8:	4604      	mov	r4, r0
 80124fa:	d051      	beq.n	80125a0 <_reclaim_reent+0xb0>
 80124fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80124fe:	b143      	cbz	r3, 8012512 <_reclaim_reent+0x22>
 8012500:	68db      	ldr	r3, [r3, #12]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d14a      	bne.n	801259c <_reclaim_reent+0xac>
 8012506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012508:	6819      	ldr	r1, [r3, #0]
 801250a:	b111      	cbz	r1, 8012512 <_reclaim_reent+0x22>
 801250c:	4620      	mov	r0, r4
 801250e:	f7ff fbfb 	bl	8011d08 <_free_r>
 8012512:	6961      	ldr	r1, [r4, #20]
 8012514:	b111      	cbz	r1, 801251c <_reclaim_reent+0x2c>
 8012516:	4620      	mov	r0, r4
 8012518:	f7ff fbf6 	bl	8011d08 <_free_r>
 801251c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801251e:	b111      	cbz	r1, 8012526 <_reclaim_reent+0x36>
 8012520:	4620      	mov	r0, r4
 8012522:	f7ff fbf1 	bl	8011d08 <_free_r>
 8012526:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012528:	b111      	cbz	r1, 8012530 <_reclaim_reent+0x40>
 801252a:	4620      	mov	r0, r4
 801252c:	f7ff fbec 	bl	8011d08 <_free_r>
 8012530:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012532:	b111      	cbz	r1, 801253a <_reclaim_reent+0x4a>
 8012534:	4620      	mov	r0, r4
 8012536:	f7ff fbe7 	bl	8011d08 <_free_r>
 801253a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801253c:	b111      	cbz	r1, 8012544 <_reclaim_reent+0x54>
 801253e:	4620      	mov	r0, r4
 8012540:	f7ff fbe2 	bl	8011d08 <_free_r>
 8012544:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8012546:	b111      	cbz	r1, 801254e <_reclaim_reent+0x5e>
 8012548:	4620      	mov	r0, r4
 801254a:	f7ff fbdd 	bl	8011d08 <_free_r>
 801254e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8012550:	b111      	cbz	r1, 8012558 <_reclaim_reent+0x68>
 8012552:	4620      	mov	r0, r4
 8012554:	f7ff fbd8 	bl	8011d08 <_free_r>
 8012558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801255a:	b111      	cbz	r1, 8012562 <_reclaim_reent+0x72>
 801255c:	4620      	mov	r0, r4
 801255e:	f7ff fbd3 	bl	8011d08 <_free_r>
 8012562:	69a3      	ldr	r3, [r4, #24]
 8012564:	b1e3      	cbz	r3, 80125a0 <_reclaim_reent+0xb0>
 8012566:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012568:	4620      	mov	r0, r4
 801256a:	4798      	blx	r3
 801256c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801256e:	b1b9      	cbz	r1, 80125a0 <_reclaim_reent+0xb0>
 8012570:	4620      	mov	r0, r4
 8012572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012576:	f7ff bfad 	b.w	80124d4 <cleanup_glue>
 801257a:	5949      	ldr	r1, [r1, r5]
 801257c:	b941      	cbnz	r1, 8012590 <_reclaim_reent+0xa0>
 801257e:	3504      	adds	r5, #4
 8012580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012582:	2d80      	cmp	r5, #128	; 0x80
 8012584:	68d9      	ldr	r1, [r3, #12]
 8012586:	d1f8      	bne.n	801257a <_reclaim_reent+0x8a>
 8012588:	4620      	mov	r0, r4
 801258a:	f7ff fbbd 	bl	8011d08 <_free_r>
 801258e:	e7ba      	b.n	8012506 <_reclaim_reent+0x16>
 8012590:	680e      	ldr	r6, [r1, #0]
 8012592:	4620      	mov	r0, r4
 8012594:	f7ff fbb8 	bl	8011d08 <_free_r>
 8012598:	4631      	mov	r1, r6
 801259a:	e7ef      	b.n	801257c <_reclaim_reent+0x8c>
 801259c:	2500      	movs	r5, #0
 801259e:	e7ef      	b.n	8012580 <_reclaim_reent+0x90>
 80125a0:	bd70      	pop	{r4, r5, r6, pc}
 80125a2:	bf00      	nop
 80125a4:	200000b8 	.word	0x200000b8

080125a8 <_sbrk_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4d06      	ldr	r5, [pc, #24]	; (80125c4 <_sbrk_r+0x1c>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4604      	mov	r4, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	602b      	str	r3, [r5, #0]
 80125b4:	f7f2 fb70 	bl	8004c98 <_sbrk>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_sbrk_r+0x1a>
 80125bc:	682b      	ldr	r3, [r5, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_sbrk_r+0x1a>
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	20008400 	.word	0x20008400

080125c8 <siprintf>:
 80125c8:	b40e      	push	{r1, r2, r3}
 80125ca:	b500      	push	{lr}
 80125cc:	b09c      	sub	sp, #112	; 0x70
 80125ce:	ab1d      	add	r3, sp, #116	; 0x74
 80125d0:	9002      	str	r0, [sp, #8]
 80125d2:	9006      	str	r0, [sp, #24]
 80125d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80125d8:	4809      	ldr	r0, [pc, #36]	; (8012600 <siprintf+0x38>)
 80125da:	9107      	str	r1, [sp, #28]
 80125dc:	9104      	str	r1, [sp, #16]
 80125de:	4909      	ldr	r1, [pc, #36]	; (8012604 <siprintf+0x3c>)
 80125e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80125e4:	9105      	str	r1, [sp, #20]
 80125e6:	6800      	ldr	r0, [r0, #0]
 80125e8:	9301      	str	r3, [sp, #4]
 80125ea:	a902      	add	r1, sp, #8
 80125ec:	f000 fc36 	bl	8012e5c <_svfiprintf_r>
 80125f0:	9b02      	ldr	r3, [sp, #8]
 80125f2:	2200      	movs	r2, #0
 80125f4:	701a      	strb	r2, [r3, #0]
 80125f6:	b01c      	add	sp, #112	; 0x70
 80125f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80125fc:	b003      	add	sp, #12
 80125fe:	4770      	bx	lr
 8012600:	200000b8 	.word	0x200000b8
 8012604:	ffff0208 	.word	0xffff0208

08012608 <__sread>:
 8012608:	b510      	push	{r4, lr}
 801260a:	460c      	mov	r4, r1
 801260c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012610:	f000 fd24 	bl	801305c <_read_r>
 8012614:	2800      	cmp	r0, #0
 8012616:	bfab      	itete	ge
 8012618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801261a:	89a3      	ldrhlt	r3, [r4, #12]
 801261c:	181b      	addge	r3, r3, r0
 801261e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012622:	bfac      	ite	ge
 8012624:	6563      	strge	r3, [r4, #84]	; 0x54
 8012626:	81a3      	strhlt	r3, [r4, #12]
 8012628:	bd10      	pop	{r4, pc}

0801262a <__swrite>:
 801262a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801262e:	461f      	mov	r7, r3
 8012630:	898b      	ldrh	r3, [r1, #12]
 8012632:	05db      	lsls	r3, r3, #23
 8012634:	4605      	mov	r5, r0
 8012636:	460c      	mov	r4, r1
 8012638:	4616      	mov	r6, r2
 801263a:	d505      	bpl.n	8012648 <__swrite+0x1e>
 801263c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012640:	2302      	movs	r3, #2
 8012642:	2200      	movs	r2, #0
 8012644:	f000 fae2 	bl	8012c0c <_lseek_r>
 8012648:	89a3      	ldrh	r3, [r4, #12]
 801264a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801264e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012652:	81a3      	strh	r3, [r4, #12]
 8012654:	4632      	mov	r2, r6
 8012656:	463b      	mov	r3, r7
 8012658:	4628      	mov	r0, r5
 801265a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801265e:	f000 b97b 	b.w	8012958 <_write_r>

08012662 <__sseek>:
 8012662:	b510      	push	{r4, lr}
 8012664:	460c      	mov	r4, r1
 8012666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801266a:	f000 facf 	bl	8012c0c <_lseek_r>
 801266e:	1c43      	adds	r3, r0, #1
 8012670:	89a3      	ldrh	r3, [r4, #12]
 8012672:	bf15      	itete	ne
 8012674:	6560      	strne	r0, [r4, #84]	; 0x54
 8012676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801267a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801267e:	81a3      	strheq	r3, [r4, #12]
 8012680:	bf18      	it	ne
 8012682:	81a3      	strhne	r3, [r4, #12]
 8012684:	bd10      	pop	{r4, pc}

08012686 <__sclose>:
 8012686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801268a:	f000 b9ed 	b.w	8012a68 <_close_r>

0801268e <strcat>:
 801268e:	b510      	push	{r4, lr}
 8012690:	4602      	mov	r2, r0
 8012692:	7814      	ldrb	r4, [r2, #0]
 8012694:	4613      	mov	r3, r2
 8012696:	3201      	adds	r2, #1
 8012698:	2c00      	cmp	r4, #0
 801269a:	d1fa      	bne.n	8012692 <strcat+0x4>
 801269c:	3b01      	subs	r3, #1
 801269e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80126a6:	2a00      	cmp	r2, #0
 80126a8:	d1f9      	bne.n	801269e <strcat+0x10>
 80126aa:	bd10      	pop	{r4, pc}

080126ac <strchr>:
 80126ac:	b2c9      	uxtb	r1, r1
 80126ae:	4603      	mov	r3, r0
 80126b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126b4:	b11a      	cbz	r2, 80126be <strchr+0x12>
 80126b6:	428a      	cmp	r2, r1
 80126b8:	d1f9      	bne.n	80126ae <strchr+0x2>
 80126ba:	4618      	mov	r0, r3
 80126bc:	4770      	bx	lr
 80126be:	2900      	cmp	r1, #0
 80126c0:	bf18      	it	ne
 80126c2:	2300      	movne	r3, #0
 80126c4:	e7f9      	b.n	80126ba <strchr+0xe>

080126c6 <strcpy>:
 80126c6:	4603      	mov	r3, r0
 80126c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80126cc:	f803 2b01 	strb.w	r2, [r3], #1
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	d1f9      	bne.n	80126c8 <strcpy+0x2>
 80126d4:	4770      	bx	lr

080126d6 <strncpy>:
 80126d6:	b510      	push	{r4, lr}
 80126d8:	3901      	subs	r1, #1
 80126da:	4603      	mov	r3, r0
 80126dc:	b132      	cbz	r2, 80126ec <strncpy+0x16>
 80126de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80126e2:	f803 4b01 	strb.w	r4, [r3], #1
 80126e6:	3a01      	subs	r2, #1
 80126e8:	2c00      	cmp	r4, #0
 80126ea:	d1f7      	bne.n	80126dc <strncpy+0x6>
 80126ec:	441a      	add	r2, r3
 80126ee:	2100      	movs	r1, #0
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d100      	bne.n	80126f6 <strncpy+0x20>
 80126f4:	bd10      	pop	{r4, pc}
 80126f6:	f803 1b01 	strb.w	r1, [r3], #1
 80126fa:	e7f9      	b.n	80126f0 <strncpy+0x1a>

080126fc <strstr>:
 80126fc:	780a      	ldrb	r2, [r1, #0]
 80126fe:	b570      	push	{r4, r5, r6, lr}
 8012700:	b96a      	cbnz	r2, 801271e <strstr+0x22>
 8012702:	bd70      	pop	{r4, r5, r6, pc}
 8012704:	429a      	cmp	r2, r3
 8012706:	d109      	bne.n	801271c <strstr+0x20>
 8012708:	460c      	mov	r4, r1
 801270a:	4605      	mov	r5, r0
 801270c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8012710:	2b00      	cmp	r3, #0
 8012712:	d0f6      	beq.n	8012702 <strstr+0x6>
 8012714:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8012718:	429e      	cmp	r6, r3
 801271a:	d0f7      	beq.n	801270c <strstr+0x10>
 801271c:	3001      	adds	r0, #1
 801271e:	7803      	ldrb	r3, [r0, #0]
 8012720:	2b00      	cmp	r3, #0
 8012722:	d1ef      	bne.n	8012704 <strstr+0x8>
 8012724:	4618      	mov	r0, r3
 8012726:	e7ec      	b.n	8012702 <strstr+0x6>

08012728 <_strtol_l.constprop.0>:
 8012728:	2b01      	cmp	r3, #1
 801272a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801272e:	d001      	beq.n	8012734 <_strtol_l.constprop.0+0xc>
 8012730:	2b24      	cmp	r3, #36	; 0x24
 8012732:	d906      	bls.n	8012742 <_strtol_l.constprop.0+0x1a>
 8012734:	f7ff f8e0 	bl	80118f8 <__errno>
 8012738:	2316      	movs	r3, #22
 801273a:	6003      	str	r3, [r0, #0]
 801273c:	2000      	movs	r0, #0
 801273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012742:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8012828 <_strtol_l.constprop.0+0x100>
 8012746:	460d      	mov	r5, r1
 8012748:	462e      	mov	r6, r5
 801274a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801274e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8012752:	f017 0708 	ands.w	r7, r7, #8
 8012756:	d1f7      	bne.n	8012748 <_strtol_l.constprop.0+0x20>
 8012758:	2c2d      	cmp	r4, #45	; 0x2d
 801275a:	d132      	bne.n	80127c2 <_strtol_l.constprop.0+0x9a>
 801275c:	782c      	ldrb	r4, [r5, #0]
 801275e:	2701      	movs	r7, #1
 8012760:	1cb5      	adds	r5, r6, #2
 8012762:	2b00      	cmp	r3, #0
 8012764:	d05b      	beq.n	801281e <_strtol_l.constprop.0+0xf6>
 8012766:	2b10      	cmp	r3, #16
 8012768:	d109      	bne.n	801277e <_strtol_l.constprop.0+0x56>
 801276a:	2c30      	cmp	r4, #48	; 0x30
 801276c:	d107      	bne.n	801277e <_strtol_l.constprop.0+0x56>
 801276e:	782c      	ldrb	r4, [r5, #0]
 8012770:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012774:	2c58      	cmp	r4, #88	; 0x58
 8012776:	d14d      	bne.n	8012814 <_strtol_l.constprop.0+0xec>
 8012778:	786c      	ldrb	r4, [r5, #1]
 801277a:	2310      	movs	r3, #16
 801277c:	3502      	adds	r5, #2
 801277e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012782:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8012786:	f04f 0c00 	mov.w	ip, #0
 801278a:	fbb8 f9f3 	udiv	r9, r8, r3
 801278e:	4666      	mov	r6, ip
 8012790:	fb03 8a19 	mls	sl, r3, r9, r8
 8012794:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8012798:	f1be 0f09 	cmp.w	lr, #9
 801279c:	d816      	bhi.n	80127cc <_strtol_l.constprop.0+0xa4>
 801279e:	4674      	mov	r4, lr
 80127a0:	42a3      	cmp	r3, r4
 80127a2:	dd24      	ble.n	80127ee <_strtol_l.constprop.0+0xc6>
 80127a4:	f1bc 0f00 	cmp.w	ip, #0
 80127a8:	db1e      	blt.n	80127e8 <_strtol_l.constprop.0+0xc0>
 80127aa:	45b1      	cmp	r9, r6
 80127ac:	d31c      	bcc.n	80127e8 <_strtol_l.constprop.0+0xc0>
 80127ae:	d101      	bne.n	80127b4 <_strtol_l.constprop.0+0x8c>
 80127b0:	45a2      	cmp	sl, r4
 80127b2:	db19      	blt.n	80127e8 <_strtol_l.constprop.0+0xc0>
 80127b4:	fb06 4603 	mla	r6, r6, r3, r4
 80127b8:	f04f 0c01 	mov.w	ip, #1
 80127bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80127c0:	e7e8      	b.n	8012794 <_strtol_l.constprop.0+0x6c>
 80127c2:	2c2b      	cmp	r4, #43	; 0x2b
 80127c4:	bf04      	itt	eq
 80127c6:	782c      	ldrbeq	r4, [r5, #0]
 80127c8:	1cb5      	addeq	r5, r6, #2
 80127ca:	e7ca      	b.n	8012762 <_strtol_l.constprop.0+0x3a>
 80127cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80127d0:	f1be 0f19 	cmp.w	lr, #25
 80127d4:	d801      	bhi.n	80127da <_strtol_l.constprop.0+0xb2>
 80127d6:	3c37      	subs	r4, #55	; 0x37
 80127d8:	e7e2      	b.n	80127a0 <_strtol_l.constprop.0+0x78>
 80127da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80127de:	f1be 0f19 	cmp.w	lr, #25
 80127e2:	d804      	bhi.n	80127ee <_strtol_l.constprop.0+0xc6>
 80127e4:	3c57      	subs	r4, #87	; 0x57
 80127e6:	e7db      	b.n	80127a0 <_strtol_l.constprop.0+0x78>
 80127e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80127ec:	e7e6      	b.n	80127bc <_strtol_l.constprop.0+0x94>
 80127ee:	f1bc 0f00 	cmp.w	ip, #0
 80127f2:	da05      	bge.n	8012800 <_strtol_l.constprop.0+0xd8>
 80127f4:	2322      	movs	r3, #34	; 0x22
 80127f6:	6003      	str	r3, [r0, #0]
 80127f8:	4646      	mov	r6, r8
 80127fa:	b942      	cbnz	r2, 801280e <_strtol_l.constprop.0+0xe6>
 80127fc:	4630      	mov	r0, r6
 80127fe:	e79e      	b.n	801273e <_strtol_l.constprop.0+0x16>
 8012800:	b107      	cbz	r7, 8012804 <_strtol_l.constprop.0+0xdc>
 8012802:	4276      	negs	r6, r6
 8012804:	2a00      	cmp	r2, #0
 8012806:	d0f9      	beq.n	80127fc <_strtol_l.constprop.0+0xd4>
 8012808:	f1bc 0f00 	cmp.w	ip, #0
 801280c:	d000      	beq.n	8012810 <_strtol_l.constprop.0+0xe8>
 801280e:	1e69      	subs	r1, r5, #1
 8012810:	6011      	str	r1, [r2, #0]
 8012812:	e7f3      	b.n	80127fc <_strtol_l.constprop.0+0xd4>
 8012814:	2430      	movs	r4, #48	; 0x30
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1b1      	bne.n	801277e <_strtol_l.constprop.0+0x56>
 801281a:	2308      	movs	r3, #8
 801281c:	e7af      	b.n	801277e <_strtol_l.constprop.0+0x56>
 801281e:	2c30      	cmp	r4, #48	; 0x30
 8012820:	d0a5      	beq.n	801276e <_strtol_l.constprop.0+0x46>
 8012822:	230a      	movs	r3, #10
 8012824:	e7ab      	b.n	801277e <_strtol_l.constprop.0+0x56>
 8012826:	bf00      	nop
 8012828:	08016e74 	.word	0x08016e74

0801282c <strtol>:
 801282c:	4613      	mov	r3, r2
 801282e:	460a      	mov	r2, r1
 8012830:	4601      	mov	r1, r0
 8012832:	4802      	ldr	r0, [pc, #8]	; (801283c <strtol+0x10>)
 8012834:	6800      	ldr	r0, [r0, #0]
 8012836:	f7ff bf77 	b.w	8012728 <_strtol_l.constprop.0>
 801283a:	bf00      	nop
 801283c:	200000b8 	.word	0x200000b8

08012840 <_vsniprintf_r>:
 8012840:	b530      	push	{r4, r5, lr}
 8012842:	4614      	mov	r4, r2
 8012844:	2c00      	cmp	r4, #0
 8012846:	b09b      	sub	sp, #108	; 0x6c
 8012848:	4605      	mov	r5, r0
 801284a:	461a      	mov	r2, r3
 801284c:	da05      	bge.n	801285a <_vsniprintf_r+0x1a>
 801284e:	238b      	movs	r3, #139	; 0x8b
 8012850:	6003      	str	r3, [r0, #0]
 8012852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012856:	b01b      	add	sp, #108	; 0x6c
 8012858:	bd30      	pop	{r4, r5, pc}
 801285a:	f44f 7302 	mov.w	r3, #520	; 0x208
 801285e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8012862:	bf14      	ite	ne
 8012864:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012868:	4623      	moveq	r3, r4
 801286a:	9302      	str	r3, [sp, #8]
 801286c:	9305      	str	r3, [sp, #20]
 801286e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012872:	9100      	str	r1, [sp, #0]
 8012874:	9104      	str	r1, [sp, #16]
 8012876:	f8ad 300e 	strh.w	r3, [sp, #14]
 801287a:	4669      	mov	r1, sp
 801287c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801287e:	f000 faed 	bl	8012e5c <_svfiprintf_r>
 8012882:	1c43      	adds	r3, r0, #1
 8012884:	bfbc      	itt	lt
 8012886:	238b      	movlt	r3, #139	; 0x8b
 8012888:	602b      	strlt	r3, [r5, #0]
 801288a:	2c00      	cmp	r4, #0
 801288c:	d0e3      	beq.n	8012856 <_vsniprintf_r+0x16>
 801288e:	9b00      	ldr	r3, [sp, #0]
 8012890:	2200      	movs	r2, #0
 8012892:	701a      	strb	r2, [r3, #0]
 8012894:	e7df      	b.n	8012856 <_vsniprintf_r+0x16>
	...

08012898 <vsniprintf>:
 8012898:	b507      	push	{r0, r1, r2, lr}
 801289a:	9300      	str	r3, [sp, #0]
 801289c:	4613      	mov	r3, r2
 801289e:	460a      	mov	r2, r1
 80128a0:	4601      	mov	r1, r0
 80128a2:	4803      	ldr	r0, [pc, #12]	; (80128b0 <vsniprintf+0x18>)
 80128a4:	6800      	ldr	r0, [r0, #0]
 80128a6:	f7ff ffcb 	bl	8012840 <_vsniprintf_r>
 80128aa:	b003      	add	sp, #12
 80128ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80128b0:	200000b8 	.word	0x200000b8

080128b4 <__swbuf_r>:
 80128b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128b6:	460e      	mov	r6, r1
 80128b8:	4614      	mov	r4, r2
 80128ba:	4605      	mov	r5, r0
 80128bc:	b118      	cbz	r0, 80128c6 <__swbuf_r+0x12>
 80128be:	6983      	ldr	r3, [r0, #24]
 80128c0:	b90b      	cbnz	r3, 80128c6 <__swbuf_r+0x12>
 80128c2:	f7ff f877 	bl	80119b4 <__sinit>
 80128c6:	4b21      	ldr	r3, [pc, #132]	; (801294c <__swbuf_r+0x98>)
 80128c8:	429c      	cmp	r4, r3
 80128ca:	d12b      	bne.n	8012924 <__swbuf_r+0x70>
 80128cc:	686c      	ldr	r4, [r5, #4]
 80128ce:	69a3      	ldr	r3, [r4, #24]
 80128d0:	60a3      	str	r3, [r4, #8]
 80128d2:	89a3      	ldrh	r3, [r4, #12]
 80128d4:	071a      	lsls	r2, r3, #28
 80128d6:	d52f      	bpl.n	8012938 <__swbuf_r+0x84>
 80128d8:	6923      	ldr	r3, [r4, #16]
 80128da:	b36b      	cbz	r3, 8012938 <__swbuf_r+0x84>
 80128dc:	6923      	ldr	r3, [r4, #16]
 80128de:	6820      	ldr	r0, [r4, #0]
 80128e0:	1ac0      	subs	r0, r0, r3
 80128e2:	6963      	ldr	r3, [r4, #20]
 80128e4:	b2f6      	uxtb	r6, r6
 80128e6:	4283      	cmp	r3, r0
 80128e8:	4637      	mov	r7, r6
 80128ea:	dc04      	bgt.n	80128f6 <__swbuf_r+0x42>
 80128ec:	4621      	mov	r1, r4
 80128ee:	4628      	mov	r0, r5
 80128f0:	f000 f950 	bl	8012b94 <_fflush_r>
 80128f4:	bb30      	cbnz	r0, 8012944 <__swbuf_r+0x90>
 80128f6:	68a3      	ldr	r3, [r4, #8]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	60a3      	str	r3, [r4, #8]
 80128fc:	6823      	ldr	r3, [r4, #0]
 80128fe:	1c5a      	adds	r2, r3, #1
 8012900:	6022      	str	r2, [r4, #0]
 8012902:	701e      	strb	r6, [r3, #0]
 8012904:	6963      	ldr	r3, [r4, #20]
 8012906:	3001      	adds	r0, #1
 8012908:	4283      	cmp	r3, r0
 801290a:	d004      	beq.n	8012916 <__swbuf_r+0x62>
 801290c:	89a3      	ldrh	r3, [r4, #12]
 801290e:	07db      	lsls	r3, r3, #31
 8012910:	d506      	bpl.n	8012920 <__swbuf_r+0x6c>
 8012912:	2e0a      	cmp	r6, #10
 8012914:	d104      	bne.n	8012920 <__swbuf_r+0x6c>
 8012916:	4621      	mov	r1, r4
 8012918:	4628      	mov	r0, r5
 801291a:	f000 f93b 	bl	8012b94 <_fflush_r>
 801291e:	b988      	cbnz	r0, 8012944 <__swbuf_r+0x90>
 8012920:	4638      	mov	r0, r7
 8012922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012924:	4b0a      	ldr	r3, [pc, #40]	; (8012950 <__swbuf_r+0x9c>)
 8012926:	429c      	cmp	r4, r3
 8012928:	d101      	bne.n	801292e <__swbuf_r+0x7a>
 801292a:	68ac      	ldr	r4, [r5, #8]
 801292c:	e7cf      	b.n	80128ce <__swbuf_r+0x1a>
 801292e:	4b09      	ldr	r3, [pc, #36]	; (8012954 <__swbuf_r+0xa0>)
 8012930:	429c      	cmp	r4, r3
 8012932:	bf08      	it	eq
 8012934:	68ec      	ldreq	r4, [r5, #12]
 8012936:	e7ca      	b.n	80128ce <__swbuf_r+0x1a>
 8012938:	4621      	mov	r1, r4
 801293a:	4628      	mov	r0, r5
 801293c:	f000 f81e 	bl	801297c <__swsetup_r>
 8012940:	2800      	cmp	r0, #0
 8012942:	d0cb      	beq.n	80128dc <__swbuf_r+0x28>
 8012944:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012948:	e7ea      	b.n	8012920 <__swbuf_r+0x6c>
 801294a:	bf00      	nop
 801294c:	08016dfc 	.word	0x08016dfc
 8012950:	08016e1c 	.word	0x08016e1c
 8012954:	08016ddc 	.word	0x08016ddc

08012958 <_write_r>:
 8012958:	b538      	push	{r3, r4, r5, lr}
 801295a:	4d07      	ldr	r5, [pc, #28]	; (8012978 <_write_r+0x20>)
 801295c:	4604      	mov	r4, r0
 801295e:	4608      	mov	r0, r1
 8012960:	4611      	mov	r1, r2
 8012962:	2200      	movs	r2, #0
 8012964:	602a      	str	r2, [r5, #0]
 8012966:	461a      	mov	r2, r3
 8012968:	f7ef fba6 	bl	80020b8 <_write>
 801296c:	1c43      	adds	r3, r0, #1
 801296e:	d102      	bne.n	8012976 <_write_r+0x1e>
 8012970:	682b      	ldr	r3, [r5, #0]
 8012972:	b103      	cbz	r3, 8012976 <_write_r+0x1e>
 8012974:	6023      	str	r3, [r4, #0]
 8012976:	bd38      	pop	{r3, r4, r5, pc}
 8012978:	20008400 	.word	0x20008400

0801297c <__swsetup_r>:
 801297c:	4b32      	ldr	r3, [pc, #200]	; (8012a48 <__swsetup_r+0xcc>)
 801297e:	b570      	push	{r4, r5, r6, lr}
 8012980:	681d      	ldr	r5, [r3, #0]
 8012982:	4606      	mov	r6, r0
 8012984:	460c      	mov	r4, r1
 8012986:	b125      	cbz	r5, 8012992 <__swsetup_r+0x16>
 8012988:	69ab      	ldr	r3, [r5, #24]
 801298a:	b913      	cbnz	r3, 8012992 <__swsetup_r+0x16>
 801298c:	4628      	mov	r0, r5
 801298e:	f7ff f811 	bl	80119b4 <__sinit>
 8012992:	4b2e      	ldr	r3, [pc, #184]	; (8012a4c <__swsetup_r+0xd0>)
 8012994:	429c      	cmp	r4, r3
 8012996:	d10f      	bne.n	80129b8 <__swsetup_r+0x3c>
 8012998:	686c      	ldr	r4, [r5, #4]
 801299a:	89a3      	ldrh	r3, [r4, #12]
 801299c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80129a0:	0719      	lsls	r1, r3, #28
 80129a2:	d42c      	bmi.n	80129fe <__swsetup_r+0x82>
 80129a4:	06dd      	lsls	r5, r3, #27
 80129a6:	d411      	bmi.n	80129cc <__swsetup_r+0x50>
 80129a8:	2309      	movs	r3, #9
 80129aa:	6033      	str	r3, [r6, #0]
 80129ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80129b0:	81a3      	strh	r3, [r4, #12]
 80129b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129b6:	e03e      	b.n	8012a36 <__swsetup_r+0xba>
 80129b8:	4b25      	ldr	r3, [pc, #148]	; (8012a50 <__swsetup_r+0xd4>)
 80129ba:	429c      	cmp	r4, r3
 80129bc:	d101      	bne.n	80129c2 <__swsetup_r+0x46>
 80129be:	68ac      	ldr	r4, [r5, #8]
 80129c0:	e7eb      	b.n	801299a <__swsetup_r+0x1e>
 80129c2:	4b24      	ldr	r3, [pc, #144]	; (8012a54 <__swsetup_r+0xd8>)
 80129c4:	429c      	cmp	r4, r3
 80129c6:	bf08      	it	eq
 80129c8:	68ec      	ldreq	r4, [r5, #12]
 80129ca:	e7e6      	b.n	801299a <__swsetup_r+0x1e>
 80129cc:	0758      	lsls	r0, r3, #29
 80129ce:	d512      	bpl.n	80129f6 <__swsetup_r+0x7a>
 80129d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80129d2:	b141      	cbz	r1, 80129e6 <__swsetup_r+0x6a>
 80129d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80129d8:	4299      	cmp	r1, r3
 80129da:	d002      	beq.n	80129e2 <__swsetup_r+0x66>
 80129dc:	4630      	mov	r0, r6
 80129de:	f7ff f993 	bl	8011d08 <_free_r>
 80129e2:	2300      	movs	r3, #0
 80129e4:	6363      	str	r3, [r4, #52]	; 0x34
 80129e6:	89a3      	ldrh	r3, [r4, #12]
 80129e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80129ec:	81a3      	strh	r3, [r4, #12]
 80129ee:	2300      	movs	r3, #0
 80129f0:	6063      	str	r3, [r4, #4]
 80129f2:	6923      	ldr	r3, [r4, #16]
 80129f4:	6023      	str	r3, [r4, #0]
 80129f6:	89a3      	ldrh	r3, [r4, #12]
 80129f8:	f043 0308 	orr.w	r3, r3, #8
 80129fc:	81a3      	strh	r3, [r4, #12]
 80129fe:	6923      	ldr	r3, [r4, #16]
 8012a00:	b94b      	cbnz	r3, 8012a16 <__swsetup_r+0x9a>
 8012a02:	89a3      	ldrh	r3, [r4, #12]
 8012a04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a0c:	d003      	beq.n	8012a16 <__swsetup_r+0x9a>
 8012a0e:	4621      	mov	r1, r4
 8012a10:	4630      	mov	r0, r6
 8012a12:	f000 f933 	bl	8012c7c <__smakebuf_r>
 8012a16:	89a0      	ldrh	r0, [r4, #12]
 8012a18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a1c:	f010 0301 	ands.w	r3, r0, #1
 8012a20:	d00a      	beq.n	8012a38 <__swsetup_r+0xbc>
 8012a22:	2300      	movs	r3, #0
 8012a24:	60a3      	str	r3, [r4, #8]
 8012a26:	6963      	ldr	r3, [r4, #20]
 8012a28:	425b      	negs	r3, r3
 8012a2a:	61a3      	str	r3, [r4, #24]
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	b943      	cbnz	r3, 8012a42 <__swsetup_r+0xc6>
 8012a30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012a34:	d1ba      	bne.n	80129ac <__swsetup_r+0x30>
 8012a36:	bd70      	pop	{r4, r5, r6, pc}
 8012a38:	0781      	lsls	r1, r0, #30
 8012a3a:	bf58      	it	pl
 8012a3c:	6963      	ldrpl	r3, [r4, #20]
 8012a3e:	60a3      	str	r3, [r4, #8]
 8012a40:	e7f4      	b.n	8012a2c <__swsetup_r+0xb0>
 8012a42:	2000      	movs	r0, #0
 8012a44:	e7f7      	b.n	8012a36 <__swsetup_r+0xba>
 8012a46:	bf00      	nop
 8012a48:	200000b8 	.word	0x200000b8
 8012a4c:	08016dfc 	.word	0x08016dfc
 8012a50:	08016e1c 	.word	0x08016e1c
 8012a54:	08016ddc 	.word	0x08016ddc

08012a58 <abort>:
 8012a58:	b508      	push	{r3, lr}
 8012a5a:	2006      	movs	r0, #6
 8012a5c:	f000 fb38 	bl	80130d0 <raise>
 8012a60:	2001      	movs	r0, #1
 8012a62:	f7f2 f8bd 	bl	8004be0 <_exit>
	...

08012a68 <_close_r>:
 8012a68:	b538      	push	{r3, r4, r5, lr}
 8012a6a:	4d06      	ldr	r5, [pc, #24]	; (8012a84 <_close_r+0x1c>)
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4604      	mov	r4, r0
 8012a70:	4608      	mov	r0, r1
 8012a72:	602b      	str	r3, [r5, #0]
 8012a74:	f7f2 f8db 	bl	8004c2e <_close>
 8012a78:	1c43      	adds	r3, r0, #1
 8012a7a:	d102      	bne.n	8012a82 <_close_r+0x1a>
 8012a7c:	682b      	ldr	r3, [r5, #0]
 8012a7e:	b103      	cbz	r3, 8012a82 <_close_r+0x1a>
 8012a80:	6023      	str	r3, [r4, #0]
 8012a82:	bd38      	pop	{r3, r4, r5, pc}
 8012a84:	20008400 	.word	0x20008400

08012a88 <__sflush_r>:
 8012a88:	898a      	ldrh	r2, [r1, #12]
 8012a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a8e:	4605      	mov	r5, r0
 8012a90:	0710      	lsls	r0, r2, #28
 8012a92:	460c      	mov	r4, r1
 8012a94:	d458      	bmi.n	8012b48 <__sflush_r+0xc0>
 8012a96:	684b      	ldr	r3, [r1, #4]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	dc05      	bgt.n	8012aa8 <__sflush_r+0x20>
 8012a9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	dc02      	bgt.n	8012aa8 <__sflush_r+0x20>
 8012aa2:	2000      	movs	r0, #0
 8012aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012aaa:	2e00      	cmp	r6, #0
 8012aac:	d0f9      	beq.n	8012aa2 <__sflush_r+0x1a>
 8012aae:	2300      	movs	r3, #0
 8012ab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012ab4:	682f      	ldr	r7, [r5, #0]
 8012ab6:	602b      	str	r3, [r5, #0]
 8012ab8:	d032      	beq.n	8012b20 <__sflush_r+0x98>
 8012aba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012abc:	89a3      	ldrh	r3, [r4, #12]
 8012abe:	075a      	lsls	r2, r3, #29
 8012ac0:	d505      	bpl.n	8012ace <__sflush_r+0x46>
 8012ac2:	6863      	ldr	r3, [r4, #4]
 8012ac4:	1ac0      	subs	r0, r0, r3
 8012ac6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ac8:	b10b      	cbz	r3, 8012ace <__sflush_r+0x46>
 8012aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012acc:	1ac0      	subs	r0, r0, r3
 8012ace:	2300      	movs	r3, #0
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012ad4:	6a21      	ldr	r1, [r4, #32]
 8012ad6:	4628      	mov	r0, r5
 8012ad8:	47b0      	blx	r6
 8012ada:	1c43      	adds	r3, r0, #1
 8012adc:	89a3      	ldrh	r3, [r4, #12]
 8012ade:	d106      	bne.n	8012aee <__sflush_r+0x66>
 8012ae0:	6829      	ldr	r1, [r5, #0]
 8012ae2:	291d      	cmp	r1, #29
 8012ae4:	d82c      	bhi.n	8012b40 <__sflush_r+0xb8>
 8012ae6:	4a2a      	ldr	r2, [pc, #168]	; (8012b90 <__sflush_r+0x108>)
 8012ae8:	40ca      	lsrs	r2, r1
 8012aea:	07d6      	lsls	r6, r2, #31
 8012aec:	d528      	bpl.n	8012b40 <__sflush_r+0xb8>
 8012aee:	2200      	movs	r2, #0
 8012af0:	6062      	str	r2, [r4, #4]
 8012af2:	04d9      	lsls	r1, r3, #19
 8012af4:	6922      	ldr	r2, [r4, #16]
 8012af6:	6022      	str	r2, [r4, #0]
 8012af8:	d504      	bpl.n	8012b04 <__sflush_r+0x7c>
 8012afa:	1c42      	adds	r2, r0, #1
 8012afc:	d101      	bne.n	8012b02 <__sflush_r+0x7a>
 8012afe:	682b      	ldr	r3, [r5, #0]
 8012b00:	b903      	cbnz	r3, 8012b04 <__sflush_r+0x7c>
 8012b02:	6560      	str	r0, [r4, #84]	; 0x54
 8012b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012b06:	602f      	str	r7, [r5, #0]
 8012b08:	2900      	cmp	r1, #0
 8012b0a:	d0ca      	beq.n	8012aa2 <__sflush_r+0x1a>
 8012b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012b10:	4299      	cmp	r1, r3
 8012b12:	d002      	beq.n	8012b1a <__sflush_r+0x92>
 8012b14:	4628      	mov	r0, r5
 8012b16:	f7ff f8f7 	bl	8011d08 <_free_r>
 8012b1a:	2000      	movs	r0, #0
 8012b1c:	6360      	str	r0, [r4, #52]	; 0x34
 8012b1e:	e7c1      	b.n	8012aa4 <__sflush_r+0x1c>
 8012b20:	6a21      	ldr	r1, [r4, #32]
 8012b22:	2301      	movs	r3, #1
 8012b24:	4628      	mov	r0, r5
 8012b26:	47b0      	blx	r6
 8012b28:	1c41      	adds	r1, r0, #1
 8012b2a:	d1c7      	bne.n	8012abc <__sflush_r+0x34>
 8012b2c:	682b      	ldr	r3, [r5, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d0c4      	beq.n	8012abc <__sflush_r+0x34>
 8012b32:	2b1d      	cmp	r3, #29
 8012b34:	d001      	beq.n	8012b3a <__sflush_r+0xb2>
 8012b36:	2b16      	cmp	r3, #22
 8012b38:	d101      	bne.n	8012b3e <__sflush_r+0xb6>
 8012b3a:	602f      	str	r7, [r5, #0]
 8012b3c:	e7b1      	b.n	8012aa2 <__sflush_r+0x1a>
 8012b3e:	89a3      	ldrh	r3, [r4, #12]
 8012b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b44:	81a3      	strh	r3, [r4, #12]
 8012b46:	e7ad      	b.n	8012aa4 <__sflush_r+0x1c>
 8012b48:	690f      	ldr	r7, [r1, #16]
 8012b4a:	2f00      	cmp	r7, #0
 8012b4c:	d0a9      	beq.n	8012aa2 <__sflush_r+0x1a>
 8012b4e:	0793      	lsls	r3, r2, #30
 8012b50:	680e      	ldr	r6, [r1, #0]
 8012b52:	bf08      	it	eq
 8012b54:	694b      	ldreq	r3, [r1, #20]
 8012b56:	600f      	str	r7, [r1, #0]
 8012b58:	bf18      	it	ne
 8012b5a:	2300      	movne	r3, #0
 8012b5c:	eba6 0807 	sub.w	r8, r6, r7
 8012b60:	608b      	str	r3, [r1, #8]
 8012b62:	f1b8 0f00 	cmp.w	r8, #0
 8012b66:	dd9c      	ble.n	8012aa2 <__sflush_r+0x1a>
 8012b68:	6a21      	ldr	r1, [r4, #32]
 8012b6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b6c:	4643      	mov	r3, r8
 8012b6e:	463a      	mov	r2, r7
 8012b70:	4628      	mov	r0, r5
 8012b72:	47b0      	blx	r6
 8012b74:	2800      	cmp	r0, #0
 8012b76:	dc06      	bgt.n	8012b86 <__sflush_r+0xfe>
 8012b78:	89a3      	ldrh	r3, [r4, #12]
 8012b7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b7e:	81a3      	strh	r3, [r4, #12]
 8012b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b84:	e78e      	b.n	8012aa4 <__sflush_r+0x1c>
 8012b86:	4407      	add	r7, r0
 8012b88:	eba8 0800 	sub.w	r8, r8, r0
 8012b8c:	e7e9      	b.n	8012b62 <__sflush_r+0xda>
 8012b8e:	bf00      	nop
 8012b90:	20400001 	.word	0x20400001

08012b94 <_fflush_r>:
 8012b94:	b538      	push	{r3, r4, r5, lr}
 8012b96:	690b      	ldr	r3, [r1, #16]
 8012b98:	4605      	mov	r5, r0
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	b913      	cbnz	r3, 8012ba4 <_fflush_r+0x10>
 8012b9e:	2500      	movs	r5, #0
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	bd38      	pop	{r3, r4, r5, pc}
 8012ba4:	b118      	cbz	r0, 8012bae <_fflush_r+0x1a>
 8012ba6:	6983      	ldr	r3, [r0, #24]
 8012ba8:	b90b      	cbnz	r3, 8012bae <_fflush_r+0x1a>
 8012baa:	f7fe ff03 	bl	80119b4 <__sinit>
 8012bae:	4b14      	ldr	r3, [pc, #80]	; (8012c00 <_fflush_r+0x6c>)
 8012bb0:	429c      	cmp	r4, r3
 8012bb2:	d11b      	bne.n	8012bec <_fflush_r+0x58>
 8012bb4:	686c      	ldr	r4, [r5, #4]
 8012bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d0ef      	beq.n	8012b9e <_fflush_r+0xa>
 8012bbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012bc0:	07d0      	lsls	r0, r2, #31
 8012bc2:	d404      	bmi.n	8012bce <_fflush_r+0x3a>
 8012bc4:	0599      	lsls	r1, r3, #22
 8012bc6:	d402      	bmi.n	8012bce <_fflush_r+0x3a>
 8012bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012bca:	f7ff f874 	bl	8011cb6 <__retarget_lock_acquire_recursive>
 8012bce:	4628      	mov	r0, r5
 8012bd0:	4621      	mov	r1, r4
 8012bd2:	f7ff ff59 	bl	8012a88 <__sflush_r>
 8012bd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012bd8:	07da      	lsls	r2, r3, #31
 8012bda:	4605      	mov	r5, r0
 8012bdc:	d4e0      	bmi.n	8012ba0 <_fflush_r+0xc>
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	059b      	lsls	r3, r3, #22
 8012be2:	d4dd      	bmi.n	8012ba0 <_fflush_r+0xc>
 8012be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012be6:	f7ff f867 	bl	8011cb8 <__retarget_lock_release_recursive>
 8012bea:	e7d9      	b.n	8012ba0 <_fflush_r+0xc>
 8012bec:	4b05      	ldr	r3, [pc, #20]	; (8012c04 <_fflush_r+0x70>)
 8012bee:	429c      	cmp	r4, r3
 8012bf0:	d101      	bne.n	8012bf6 <_fflush_r+0x62>
 8012bf2:	68ac      	ldr	r4, [r5, #8]
 8012bf4:	e7df      	b.n	8012bb6 <_fflush_r+0x22>
 8012bf6:	4b04      	ldr	r3, [pc, #16]	; (8012c08 <_fflush_r+0x74>)
 8012bf8:	429c      	cmp	r4, r3
 8012bfa:	bf08      	it	eq
 8012bfc:	68ec      	ldreq	r4, [r5, #12]
 8012bfe:	e7da      	b.n	8012bb6 <_fflush_r+0x22>
 8012c00:	08016dfc 	.word	0x08016dfc
 8012c04:	08016e1c 	.word	0x08016e1c
 8012c08:	08016ddc 	.word	0x08016ddc

08012c0c <_lseek_r>:
 8012c0c:	b538      	push	{r3, r4, r5, lr}
 8012c0e:	4d07      	ldr	r5, [pc, #28]	; (8012c2c <_lseek_r+0x20>)
 8012c10:	4604      	mov	r4, r0
 8012c12:	4608      	mov	r0, r1
 8012c14:	4611      	mov	r1, r2
 8012c16:	2200      	movs	r2, #0
 8012c18:	602a      	str	r2, [r5, #0]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	f7f2 f82e 	bl	8004c7c <_lseek>
 8012c20:	1c43      	adds	r3, r0, #1
 8012c22:	d102      	bne.n	8012c2a <_lseek_r+0x1e>
 8012c24:	682b      	ldr	r3, [r5, #0]
 8012c26:	b103      	cbz	r3, 8012c2a <_lseek_r+0x1e>
 8012c28:	6023      	str	r3, [r4, #0]
 8012c2a:	bd38      	pop	{r3, r4, r5, pc}
 8012c2c:	20008400 	.word	0x20008400

08012c30 <__swhatbuf_r>:
 8012c30:	b570      	push	{r4, r5, r6, lr}
 8012c32:	460e      	mov	r6, r1
 8012c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c38:	2900      	cmp	r1, #0
 8012c3a:	b096      	sub	sp, #88	; 0x58
 8012c3c:	4614      	mov	r4, r2
 8012c3e:	461d      	mov	r5, r3
 8012c40:	da08      	bge.n	8012c54 <__swhatbuf_r+0x24>
 8012c42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012c46:	2200      	movs	r2, #0
 8012c48:	602a      	str	r2, [r5, #0]
 8012c4a:	061a      	lsls	r2, r3, #24
 8012c4c:	d410      	bmi.n	8012c70 <__swhatbuf_r+0x40>
 8012c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012c52:	e00e      	b.n	8012c72 <__swhatbuf_r+0x42>
 8012c54:	466a      	mov	r2, sp
 8012c56:	f000 fa57 	bl	8013108 <_fstat_r>
 8012c5a:	2800      	cmp	r0, #0
 8012c5c:	dbf1      	blt.n	8012c42 <__swhatbuf_r+0x12>
 8012c5e:	9a01      	ldr	r2, [sp, #4]
 8012c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012c68:	425a      	negs	r2, r3
 8012c6a:	415a      	adcs	r2, r3
 8012c6c:	602a      	str	r2, [r5, #0]
 8012c6e:	e7ee      	b.n	8012c4e <__swhatbuf_r+0x1e>
 8012c70:	2340      	movs	r3, #64	; 0x40
 8012c72:	2000      	movs	r0, #0
 8012c74:	6023      	str	r3, [r4, #0]
 8012c76:	b016      	add	sp, #88	; 0x58
 8012c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08012c7c <__smakebuf_r>:
 8012c7c:	898b      	ldrh	r3, [r1, #12]
 8012c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012c80:	079d      	lsls	r5, r3, #30
 8012c82:	4606      	mov	r6, r0
 8012c84:	460c      	mov	r4, r1
 8012c86:	d507      	bpl.n	8012c98 <__smakebuf_r+0x1c>
 8012c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012c8c:	6023      	str	r3, [r4, #0]
 8012c8e:	6123      	str	r3, [r4, #16]
 8012c90:	2301      	movs	r3, #1
 8012c92:	6163      	str	r3, [r4, #20]
 8012c94:	b002      	add	sp, #8
 8012c96:	bd70      	pop	{r4, r5, r6, pc}
 8012c98:	ab01      	add	r3, sp, #4
 8012c9a:	466a      	mov	r2, sp
 8012c9c:	f7ff ffc8 	bl	8012c30 <__swhatbuf_r>
 8012ca0:	9900      	ldr	r1, [sp, #0]
 8012ca2:	4605      	mov	r5, r0
 8012ca4:	4630      	mov	r0, r6
 8012ca6:	f7ff f89b 	bl	8011de0 <_malloc_r>
 8012caa:	b948      	cbnz	r0, 8012cc0 <__smakebuf_r+0x44>
 8012cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012cb0:	059a      	lsls	r2, r3, #22
 8012cb2:	d4ef      	bmi.n	8012c94 <__smakebuf_r+0x18>
 8012cb4:	f023 0303 	bic.w	r3, r3, #3
 8012cb8:	f043 0302 	orr.w	r3, r3, #2
 8012cbc:	81a3      	strh	r3, [r4, #12]
 8012cbe:	e7e3      	b.n	8012c88 <__smakebuf_r+0xc>
 8012cc0:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <__smakebuf_r+0x7c>)
 8012cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	6020      	str	r0, [r4, #0]
 8012cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ccc:	81a3      	strh	r3, [r4, #12]
 8012cce:	9b00      	ldr	r3, [sp, #0]
 8012cd0:	6163      	str	r3, [r4, #20]
 8012cd2:	9b01      	ldr	r3, [sp, #4]
 8012cd4:	6120      	str	r0, [r4, #16]
 8012cd6:	b15b      	cbz	r3, 8012cf0 <__smakebuf_r+0x74>
 8012cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f000 fa25 	bl	801312c <_isatty_r>
 8012ce2:	b128      	cbz	r0, 8012cf0 <__smakebuf_r+0x74>
 8012ce4:	89a3      	ldrh	r3, [r4, #12]
 8012ce6:	f023 0303 	bic.w	r3, r3, #3
 8012cea:	f043 0301 	orr.w	r3, r3, #1
 8012cee:	81a3      	strh	r3, [r4, #12]
 8012cf0:	89a0      	ldrh	r0, [r4, #12]
 8012cf2:	4305      	orrs	r5, r0
 8012cf4:	81a5      	strh	r5, [r4, #12]
 8012cf6:	e7cd      	b.n	8012c94 <__smakebuf_r+0x18>
 8012cf8:	0801194d 	.word	0x0801194d

08012cfc <memmove>:
 8012cfc:	4288      	cmp	r0, r1
 8012cfe:	b510      	push	{r4, lr}
 8012d00:	eb01 0402 	add.w	r4, r1, r2
 8012d04:	d902      	bls.n	8012d0c <memmove+0x10>
 8012d06:	4284      	cmp	r4, r0
 8012d08:	4623      	mov	r3, r4
 8012d0a:	d807      	bhi.n	8012d1c <memmove+0x20>
 8012d0c:	1e43      	subs	r3, r0, #1
 8012d0e:	42a1      	cmp	r1, r4
 8012d10:	d008      	beq.n	8012d24 <memmove+0x28>
 8012d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012d1a:	e7f8      	b.n	8012d0e <memmove+0x12>
 8012d1c:	4402      	add	r2, r0
 8012d1e:	4601      	mov	r1, r0
 8012d20:	428a      	cmp	r2, r1
 8012d22:	d100      	bne.n	8012d26 <memmove+0x2a>
 8012d24:	bd10      	pop	{r4, pc}
 8012d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012d2e:	e7f7      	b.n	8012d20 <memmove+0x24>

08012d30 <__malloc_lock>:
 8012d30:	4801      	ldr	r0, [pc, #4]	; (8012d38 <__malloc_lock+0x8>)
 8012d32:	f7fe bfc0 	b.w	8011cb6 <__retarget_lock_acquire_recursive>
 8012d36:	bf00      	nop
 8012d38:	200083f4 	.word	0x200083f4

08012d3c <__malloc_unlock>:
 8012d3c:	4801      	ldr	r0, [pc, #4]	; (8012d44 <__malloc_unlock+0x8>)
 8012d3e:	f7fe bfbb 	b.w	8011cb8 <__retarget_lock_release_recursive>
 8012d42:	bf00      	nop
 8012d44:	200083f4 	.word	0x200083f4

08012d48 <_realloc_r>:
 8012d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4c:	4680      	mov	r8, r0
 8012d4e:	4614      	mov	r4, r2
 8012d50:	460e      	mov	r6, r1
 8012d52:	b921      	cbnz	r1, 8012d5e <_realloc_r+0x16>
 8012d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d58:	4611      	mov	r1, r2
 8012d5a:	f7ff b841 	b.w	8011de0 <_malloc_r>
 8012d5e:	b92a      	cbnz	r2, 8012d6c <_realloc_r+0x24>
 8012d60:	f7fe ffd2 	bl	8011d08 <_free_r>
 8012d64:	4625      	mov	r5, r4
 8012d66:	4628      	mov	r0, r5
 8012d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d6c:	f000 f9ee 	bl	801314c <_malloc_usable_size_r>
 8012d70:	4284      	cmp	r4, r0
 8012d72:	4607      	mov	r7, r0
 8012d74:	d802      	bhi.n	8012d7c <_realloc_r+0x34>
 8012d76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012d7a:	d812      	bhi.n	8012da2 <_realloc_r+0x5a>
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	4640      	mov	r0, r8
 8012d80:	f7ff f82e 	bl	8011de0 <_malloc_r>
 8012d84:	4605      	mov	r5, r0
 8012d86:	2800      	cmp	r0, #0
 8012d88:	d0ed      	beq.n	8012d66 <_realloc_r+0x1e>
 8012d8a:	42bc      	cmp	r4, r7
 8012d8c:	4622      	mov	r2, r4
 8012d8e:	4631      	mov	r1, r6
 8012d90:	bf28      	it	cs
 8012d92:	463a      	movcs	r2, r7
 8012d94:	f7fe ffa2 	bl	8011cdc <memcpy>
 8012d98:	4631      	mov	r1, r6
 8012d9a:	4640      	mov	r0, r8
 8012d9c:	f7fe ffb4 	bl	8011d08 <_free_r>
 8012da0:	e7e1      	b.n	8012d66 <_realloc_r+0x1e>
 8012da2:	4635      	mov	r5, r6
 8012da4:	e7df      	b.n	8012d66 <_realloc_r+0x1e>

08012da6 <__ssputs_r>:
 8012da6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012daa:	688e      	ldr	r6, [r1, #8]
 8012dac:	429e      	cmp	r6, r3
 8012dae:	4682      	mov	sl, r0
 8012db0:	460c      	mov	r4, r1
 8012db2:	4690      	mov	r8, r2
 8012db4:	461f      	mov	r7, r3
 8012db6:	d838      	bhi.n	8012e2a <__ssputs_r+0x84>
 8012db8:	898a      	ldrh	r2, [r1, #12]
 8012dba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012dbe:	d032      	beq.n	8012e26 <__ssputs_r+0x80>
 8012dc0:	6825      	ldr	r5, [r4, #0]
 8012dc2:	6909      	ldr	r1, [r1, #16]
 8012dc4:	eba5 0901 	sub.w	r9, r5, r1
 8012dc8:	6965      	ldr	r5, [r4, #20]
 8012dca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012dce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012dd2:	3301      	adds	r3, #1
 8012dd4:	444b      	add	r3, r9
 8012dd6:	106d      	asrs	r5, r5, #1
 8012dd8:	429d      	cmp	r5, r3
 8012dda:	bf38      	it	cc
 8012ddc:	461d      	movcc	r5, r3
 8012dde:	0553      	lsls	r3, r2, #21
 8012de0:	d531      	bpl.n	8012e46 <__ssputs_r+0xa0>
 8012de2:	4629      	mov	r1, r5
 8012de4:	f7fe fffc 	bl	8011de0 <_malloc_r>
 8012de8:	4606      	mov	r6, r0
 8012dea:	b950      	cbnz	r0, 8012e02 <__ssputs_r+0x5c>
 8012dec:	230c      	movs	r3, #12
 8012dee:	f8ca 3000 	str.w	r3, [sl]
 8012df2:	89a3      	ldrh	r3, [r4, #12]
 8012df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012df8:	81a3      	strh	r3, [r4, #12]
 8012dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e02:	6921      	ldr	r1, [r4, #16]
 8012e04:	464a      	mov	r2, r9
 8012e06:	f7fe ff69 	bl	8011cdc <memcpy>
 8012e0a:	89a3      	ldrh	r3, [r4, #12]
 8012e0c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e14:	81a3      	strh	r3, [r4, #12]
 8012e16:	6126      	str	r6, [r4, #16]
 8012e18:	6165      	str	r5, [r4, #20]
 8012e1a:	444e      	add	r6, r9
 8012e1c:	eba5 0509 	sub.w	r5, r5, r9
 8012e20:	6026      	str	r6, [r4, #0]
 8012e22:	60a5      	str	r5, [r4, #8]
 8012e24:	463e      	mov	r6, r7
 8012e26:	42be      	cmp	r6, r7
 8012e28:	d900      	bls.n	8012e2c <__ssputs_r+0x86>
 8012e2a:	463e      	mov	r6, r7
 8012e2c:	6820      	ldr	r0, [r4, #0]
 8012e2e:	4632      	mov	r2, r6
 8012e30:	4641      	mov	r1, r8
 8012e32:	f7ff ff63 	bl	8012cfc <memmove>
 8012e36:	68a3      	ldr	r3, [r4, #8]
 8012e38:	1b9b      	subs	r3, r3, r6
 8012e3a:	60a3      	str	r3, [r4, #8]
 8012e3c:	6823      	ldr	r3, [r4, #0]
 8012e3e:	4433      	add	r3, r6
 8012e40:	6023      	str	r3, [r4, #0]
 8012e42:	2000      	movs	r0, #0
 8012e44:	e7db      	b.n	8012dfe <__ssputs_r+0x58>
 8012e46:	462a      	mov	r2, r5
 8012e48:	f7ff ff7e 	bl	8012d48 <_realloc_r>
 8012e4c:	4606      	mov	r6, r0
 8012e4e:	2800      	cmp	r0, #0
 8012e50:	d1e1      	bne.n	8012e16 <__ssputs_r+0x70>
 8012e52:	6921      	ldr	r1, [r4, #16]
 8012e54:	4650      	mov	r0, sl
 8012e56:	f7fe ff57 	bl	8011d08 <_free_r>
 8012e5a:	e7c7      	b.n	8012dec <__ssputs_r+0x46>

08012e5c <_svfiprintf_r>:
 8012e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e60:	4698      	mov	r8, r3
 8012e62:	898b      	ldrh	r3, [r1, #12]
 8012e64:	061b      	lsls	r3, r3, #24
 8012e66:	b09d      	sub	sp, #116	; 0x74
 8012e68:	4607      	mov	r7, r0
 8012e6a:	460d      	mov	r5, r1
 8012e6c:	4614      	mov	r4, r2
 8012e6e:	d50e      	bpl.n	8012e8e <_svfiprintf_r+0x32>
 8012e70:	690b      	ldr	r3, [r1, #16]
 8012e72:	b963      	cbnz	r3, 8012e8e <_svfiprintf_r+0x32>
 8012e74:	2140      	movs	r1, #64	; 0x40
 8012e76:	f7fe ffb3 	bl	8011de0 <_malloc_r>
 8012e7a:	6028      	str	r0, [r5, #0]
 8012e7c:	6128      	str	r0, [r5, #16]
 8012e7e:	b920      	cbnz	r0, 8012e8a <_svfiprintf_r+0x2e>
 8012e80:	230c      	movs	r3, #12
 8012e82:	603b      	str	r3, [r7, #0]
 8012e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e88:	e0d1      	b.n	801302e <_svfiprintf_r+0x1d2>
 8012e8a:	2340      	movs	r3, #64	; 0x40
 8012e8c:	616b      	str	r3, [r5, #20]
 8012e8e:	2300      	movs	r3, #0
 8012e90:	9309      	str	r3, [sp, #36]	; 0x24
 8012e92:	2320      	movs	r3, #32
 8012e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e9c:	2330      	movs	r3, #48	; 0x30
 8012e9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8013048 <_svfiprintf_r+0x1ec>
 8012ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012ea6:	f04f 0901 	mov.w	r9, #1
 8012eaa:	4623      	mov	r3, r4
 8012eac:	469a      	mov	sl, r3
 8012eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eb2:	b10a      	cbz	r2, 8012eb8 <_svfiprintf_r+0x5c>
 8012eb4:	2a25      	cmp	r2, #37	; 0x25
 8012eb6:	d1f9      	bne.n	8012eac <_svfiprintf_r+0x50>
 8012eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8012ebc:	d00b      	beq.n	8012ed6 <_svfiprintf_r+0x7a>
 8012ebe:	465b      	mov	r3, fp
 8012ec0:	4622      	mov	r2, r4
 8012ec2:	4629      	mov	r1, r5
 8012ec4:	4638      	mov	r0, r7
 8012ec6:	f7ff ff6e 	bl	8012da6 <__ssputs_r>
 8012eca:	3001      	adds	r0, #1
 8012ecc:	f000 80aa 	beq.w	8013024 <_svfiprintf_r+0x1c8>
 8012ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed2:	445a      	add	r2, fp
 8012ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8012ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 80a2 	beq.w	8013024 <_svfiprintf_r+0x1c8>
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012eea:	f10a 0a01 	add.w	sl, sl, #1
 8012eee:	9304      	str	r3, [sp, #16]
 8012ef0:	9307      	str	r3, [sp, #28]
 8012ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8012ef8:	4654      	mov	r4, sl
 8012efa:	2205      	movs	r2, #5
 8012efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f00:	4851      	ldr	r0, [pc, #324]	; (8013048 <_svfiprintf_r+0x1ec>)
 8012f02:	f7ed f96d 	bl	80001e0 <memchr>
 8012f06:	9a04      	ldr	r2, [sp, #16]
 8012f08:	b9d8      	cbnz	r0, 8012f42 <_svfiprintf_r+0xe6>
 8012f0a:	06d0      	lsls	r0, r2, #27
 8012f0c:	bf44      	itt	mi
 8012f0e:	2320      	movmi	r3, #32
 8012f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f14:	0711      	lsls	r1, r2, #28
 8012f16:	bf44      	itt	mi
 8012f18:	232b      	movmi	r3, #43	; 0x2b
 8012f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8012f22:	2b2a      	cmp	r3, #42	; 0x2a
 8012f24:	d015      	beq.n	8012f52 <_svfiprintf_r+0xf6>
 8012f26:	9a07      	ldr	r2, [sp, #28]
 8012f28:	4654      	mov	r4, sl
 8012f2a:	2000      	movs	r0, #0
 8012f2c:	f04f 0c0a 	mov.w	ip, #10
 8012f30:	4621      	mov	r1, r4
 8012f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f36:	3b30      	subs	r3, #48	; 0x30
 8012f38:	2b09      	cmp	r3, #9
 8012f3a:	d94e      	bls.n	8012fda <_svfiprintf_r+0x17e>
 8012f3c:	b1b0      	cbz	r0, 8012f6c <_svfiprintf_r+0x110>
 8012f3e:	9207      	str	r2, [sp, #28]
 8012f40:	e014      	b.n	8012f6c <_svfiprintf_r+0x110>
 8012f42:	eba0 0308 	sub.w	r3, r0, r8
 8012f46:	fa09 f303 	lsl.w	r3, r9, r3
 8012f4a:	4313      	orrs	r3, r2
 8012f4c:	9304      	str	r3, [sp, #16]
 8012f4e:	46a2      	mov	sl, r4
 8012f50:	e7d2      	b.n	8012ef8 <_svfiprintf_r+0x9c>
 8012f52:	9b03      	ldr	r3, [sp, #12]
 8012f54:	1d19      	adds	r1, r3, #4
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	9103      	str	r1, [sp, #12]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	bfbb      	ittet	lt
 8012f5e:	425b      	neglt	r3, r3
 8012f60:	f042 0202 	orrlt.w	r2, r2, #2
 8012f64:	9307      	strge	r3, [sp, #28]
 8012f66:	9307      	strlt	r3, [sp, #28]
 8012f68:	bfb8      	it	lt
 8012f6a:	9204      	strlt	r2, [sp, #16]
 8012f6c:	7823      	ldrb	r3, [r4, #0]
 8012f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8012f70:	d10c      	bne.n	8012f8c <_svfiprintf_r+0x130>
 8012f72:	7863      	ldrb	r3, [r4, #1]
 8012f74:	2b2a      	cmp	r3, #42	; 0x2a
 8012f76:	d135      	bne.n	8012fe4 <_svfiprintf_r+0x188>
 8012f78:	9b03      	ldr	r3, [sp, #12]
 8012f7a:	1d1a      	adds	r2, r3, #4
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	9203      	str	r2, [sp, #12]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	bfb8      	it	lt
 8012f84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012f88:	3402      	adds	r4, #2
 8012f8a:	9305      	str	r3, [sp, #20]
 8012f8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8013058 <_svfiprintf_r+0x1fc>
 8012f90:	7821      	ldrb	r1, [r4, #0]
 8012f92:	2203      	movs	r2, #3
 8012f94:	4650      	mov	r0, sl
 8012f96:	f7ed f923 	bl	80001e0 <memchr>
 8012f9a:	b140      	cbz	r0, 8012fae <_svfiprintf_r+0x152>
 8012f9c:	2340      	movs	r3, #64	; 0x40
 8012f9e:	eba0 000a 	sub.w	r0, r0, sl
 8012fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8012fa6:	9b04      	ldr	r3, [sp, #16]
 8012fa8:	4303      	orrs	r3, r0
 8012faa:	3401      	adds	r4, #1
 8012fac:	9304      	str	r3, [sp, #16]
 8012fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb2:	4826      	ldr	r0, [pc, #152]	; (801304c <_svfiprintf_r+0x1f0>)
 8012fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fb8:	2206      	movs	r2, #6
 8012fba:	f7ed f911 	bl	80001e0 <memchr>
 8012fbe:	2800      	cmp	r0, #0
 8012fc0:	d038      	beq.n	8013034 <_svfiprintf_r+0x1d8>
 8012fc2:	4b23      	ldr	r3, [pc, #140]	; (8013050 <_svfiprintf_r+0x1f4>)
 8012fc4:	bb1b      	cbnz	r3, 801300e <_svfiprintf_r+0x1b2>
 8012fc6:	9b03      	ldr	r3, [sp, #12]
 8012fc8:	3307      	adds	r3, #7
 8012fca:	f023 0307 	bic.w	r3, r3, #7
 8012fce:	3308      	adds	r3, #8
 8012fd0:	9303      	str	r3, [sp, #12]
 8012fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fd4:	4433      	add	r3, r6
 8012fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8012fd8:	e767      	b.n	8012eaa <_svfiprintf_r+0x4e>
 8012fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fde:	460c      	mov	r4, r1
 8012fe0:	2001      	movs	r0, #1
 8012fe2:	e7a5      	b.n	8012f30 <_svfiprintf_r+0xd4>
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	3401      	adds	r4, #1
 8012fe8:	9305      	str	r3, [sp, #20]
 8012fea:	4619      	mov	r1, r3
 8012fec:	f04f 0c0a 	mov.w	ip, #10
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ff6:	3a30      	subs	r2, #48	; 0x30
 8012ff8:	2a09      	cmp	r2, #9
 8012ffa:	d903      	bls.n	8013004 <_svfiprintf_r+0x1a8>
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d0c5      	beq.n	8012f8c <_svfiprintf_r+0x130>
 8013000:	9105      	str	r1, [sp, #20]
 8013002:	e7c3      	b.n	8012f8c <_svfiprintf_r+0x130>
 8013004:	fb0c 2101 	mla	r1, ip, r1, r2
 8013008:	4604      	mov	r4, r0
 801300a:	2301      	movs	r3, #1
 801300c:	e7f0      	b.n	8012ff0 <_svfiprintf_r+0x194>
 801300e:	ab03      	add	r3, sp, #12
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	462a      	mov	r2, r5
 8013014:	4b0f      	ldr	r3, [pc, #60]	; (8013054 <_svfiprintf_r+0x1f8>)
 8013016:	a904      	add	r1, sp, #16
 8013018:	4638      	mov	r0, r7
 801301a:	f3af 8000 	nop.w
 801301e:	1c42      	adds	r2, r0, #1
 8013020:	4606      	mov	r6, r0
 8013022:	d1d6      	bne.n	8012fd2 <_svfiprintf_r+0x176>
 8013024:	89ab      	ldrh	r3, [r5, #12]
 8013026:	065b      	lsls	r3, r3, #25
 8013028:	f53f af2c 	bmi.w	8012e84 <_svfiprintf_r+0x28>
 801302c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801302e:	b01d      	add	sp, #116	; 0x74
 8013030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013034:	ab03      	add	r3, sp, #12
 8013036:	9300      	str	r3, [sp, #0]
 8013038:	462a      	mov	r2, r5
 801303a:	4b06      	ldr	r3, [pc, #24]	; (8013054 <_svfiprintf_r+0x1f8>)
 801303c:	a904      	add	r1, sp, #16
 801303e:	4638      	mov	r0, r7
 8013040:	f7ff f90a 	bl	8012258 <_printf_i>
 8013044:	e7eb      	b.n	801301e <_svfiprintf_r+0x1c2>
 8013046:	bf00      	nop
 8013048:	08016e40 	.word	0x08016e40
 801304c:	08016e4a 	.word	0x08016e4a
 8013050:	00000000 	.word	0x00000000
 8013054:	08012da7 	.word	0x08012da7
 8013058:	08016e46 	.word	0x08016e46

0801305c <_read_r>:
 801305c:	b538      	push	{r3, r4, r5, lr}
 801305e:	4d07      	ldr	r5, [pc, #28]	; (801307c <_read_r+0x20>)
 8013060:	4604      	mov	r4, r0
 8013062:	4608      	mov	r0, r1
 8013064:	4611      	mov	r1, r2
 8013066:	2200      	movs	r2, #0
 8013068:	602a      	str	r2, [r5, #0]
 801306a:	461a      	mov	r2, r3
 801306c:	f7f1 fdc2 	bl	8004bf4 <_read>
 8013070:	1c43      	adds	r3, r0, #1
 8013072:	d102      	bne.n	801307a <_read_r+0x1e>
 8013074:	682b      	ldr	r3, [r5, #0]
 8013076:	b103      	cbz	r3, 801307a <_read_r+0x1e>
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	bd38      	pop	{r3, r4, r5, pc}
 801307c:	20008400 	.word	0x20008400

08013080 <_raise_r>:
 8013080:	291f      	cmp	r1, #31
 8013082:	b538      	push	{r3, r4, r5, lr}
 8013084:	4604      	mov	r4, r0
 8013086:	460d      	mov	r5, r1
 8013088:	d904      	bls.n	8013094 <_raise_r+0x14>
 801308a:	2316      	movs	r3, #22
 801308c:	6003      	str	r3, [r0, #0]
 801308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013092:	bd38      	pop	{r3, r4, r5, pc}
 8013094:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013096:	b112      	cbz	r2, 801309e <_raise_r+0x1e>
 8013098:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801309c:	b94b      	cbnz	r3, 80130b2 <_raise_r+0x32>
 801309e:	4620      	mov	r0, r4
 80130a0:	f000 f830 	bl	8013104 <_getpid_r>
 80130a4:	462a      	mov	r2, r5
 80130a6:	4601      	mov	r1, r0
 80130a8:	4620      	mov	r0, r4
 80130aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130ae:	f000 b817 	b.w	80130e0 <_kill_r>
 80130b2:	2b01      	cmp	r3, #1
 80130b4:	d00a      	beq.n	80130cc <_raise_r+0x4c>
 80130b6:	1c59      	adds	r1, r3, #1
 80130b8:	d103      	bne.n	80130c2 <_raise_r+0x42>
 80130ba:	2316      	movs	r3, #22
 80130bc:	6003      	str	r3, [r0, #0]
 80130be:	2001      	movs	r0, #1
 80130c0:	e7e7      	b.n	8013092 <_raise_r+0x12>
 80130c2:	2400      	movs	r4, #0
 80130c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80130c8:	4628      	mov	r0, r5
 80130ca:	4798      	blx	r3
 80130cc:	2000      	movs	r0, #0
 80130ce:	e7e0      	b.n	8013092 <_raise_r+0x12>

080130d0 <raise>:
 80130d0:	4b02      	ldr	r3, [pc, #8]	; (80130dc <raise+0xc>)
 80130d2:	4601      	mov	r1, r0
 80130d4:	6818      	ldr	r0, [r3, #0]
 80130d6:	f7ff bfd3 	b.w	8013080 <_raise_r>
 80130da:	bf00      	nop
 80130dc:	200000b8 	.word	0x200000b8

080130e0 <_kill_r>:
 80130e0:	b538      	push	{r3, r4, r5, lr}
 80130e2:	4d07      	ldr	r5, [pc, #28]	; (8013100 <_kill_r+0x20>)
 80130e4:	2300      	movs	r3, #0
 80130e6:	4604      	mov	r4, r0
 80130e8:	4608      	mov	r0, r1
 80130ea:	4611      	mov	r1, r2
 80130ec:	602b      	str	r3, [r5, #0]
 80130ee:	f7f1 fd67 	bl	8004bc0 <_kill>
 80130f2:	1c43      	adds	r3, r0, #1
 80130f4:	d102      	bne.n	80130fc <_kill_r+0x1c>
 80130f6:	682b      	ldr	r3, [r5, #0]
 80130f8:	b103      	cbz	r3, 80130fc <_kill_r+0x1c>
 80130fa:	6023      	str	r3, [r4, #0]
 80130fc:	bd38      	pop	{r3, r4, r5, pc}
 80130fe:	bf00      	nop
 8013100:	20008400 	.word	0x20008400

08013104 <_getpid_r>:
 8013104:	f7f1 bd54 	b.w	8004bb0 <_getpid>

08013108 <_fstat_r>:
 8013108:	b538      	push	{r3, r4, r5, lr}
 801310a:	4d07      	ldr	r5, [pc, #28]	; (8013128 <_fstat_r+0x20>)
 801310c:	2300      	movs	r3, #0
 801310e:	4604      	mov	r4, r0
 8013110:	4608      	mov	r0, r1
 8013112:	4611      	mov	r1, r2
 8013114:	602b      	str	r3, [r5, #0]
 8013116:	f7f1 fd96 	bl	8004c46 <_fstat>
 801311a:	1c43      	adds	r3, r0, #1
 801311c:	d102      	bne.n	8013124 <_fstat_r+0x1c>
 801311e:	682b      	ldr	r3, [r5, #0]
 8013120:	b103      	cbz	r3, 8013124 <_fstat_r+0x1c>
 8013122:	6023      	str	r3, [r4, #0]
 8013124:	bd38      	pop	{r3, r4, r5, pc}
 8013126:	bf00      	nop
 8013128:	20008400 	.word	0x20008400

0801312c <_isatty_r>:
 801312c:	b538      	push	{r3, r4, r5, lr}
 801312e:	4d06      	ldr	r5, [pc, #24]	; (8013148 <_isatty_r+0x1c>)
 8013130:	2300      	movs	r3, #0
 8013132:	4604      	mov	r4, r0
 8013134:	4608      	mov	r0, r1
 8013136:	602b      	str	r3, [r5, #0]
 8013138:	f7f1 fd95 	bl	8004c66 <_isatty>
 801313c:	1c43      	adds	r3, r0, #1
 801313e:	d102      	bne.n	8013146 <_isatty_r+0x1a>
 8013140:	682b      	ldr	r3, [r5, #0]
 8013142:	b103      	cbz	r3, 8013146 <_isatty_r+0x1a>
 8013144:	6023      	str	r3, [r4, #0]
 8013146:	bd38      	pop	{r3, r4, r5, pc}
 8013148:	20008400 	.word	0x20008400

0801314c <_malloc_usable_size_r>:
 801314c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013150:	1f18      	subs	r0, r3, #4
 8013152:	2b00      	cmp	r3, #0
 8013154:	bfbc      	itt	lt
 8013156:	580b      	ldrlt	r3, [r1, r0]
 8013158:	18c0      	addlt	r0, r0, r3
 801315a:	4770      	bx	lr

0801315c <_init>:
 801315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801315e:	bf00      	nop
 8013160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013162:	bc08      	pop	{r3}
 8013164:	469e      	mov	lr, r3
 8013166:	4770      	bx	lr

08013168 <_fini>:
 8013168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316a:	bf00      	nop
 801316c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801316e:	bc08      	pop	{r3}
 8013170:	469e      	mov	lr, r3
 8013172:	4770      	bx	lr
