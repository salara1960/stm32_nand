
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c2c  0800dbdc  0800dbdc  0001dbdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011808  08011808  0003011c  2**0
                  CONTENTS
  4 .ARM          00000008  08011808  08011808  00021808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011810  08011810  0003011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011810  08011810  00021810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011814  08011814  00021814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08011818  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003011c  2**0
                  CONTENTS
 10 .bss          0000717c  20000120  20000120  00030120  2**3
                  ALLOC
 11 ._user_heap_stack 00001404  2000729c  2000729c  00030120  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a507  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cca  00000000  00000000  0005a653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e0  00000000  00000000  0005f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007854  00000000  00000000  00061400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002610f  00000000  00000000  00068c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7506  00000000  00000000  0008ed63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176269  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002140  00000000  00000000  001762c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009998  00000000  00000000  00178400  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000120 	.word	0x20000120
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dbc4 	.word	0x0800dbc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000124 	.word	0x20000124
 80001cc:	0800dbc4 	.word	0x0800dbc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <io_nand_init>:
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
}
*/
//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000c30:	b5b0      	push	{r4, r5, r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
    if (HAL_NAND_ECC_Disable(hnand) != HAL_OK) devError |= devNAND;
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f004 feae 	bl	800599a <HAL_NAND_ECC_Disable>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d006      	beq.n	8000c52 <io_nand_init+0x22>
 8000c44:	4b1c      	ldr	r3, [pc, #112]	; (8000cb8 <io_nand_init+0x88>)
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	f043 0320 	orr.w	r3, r3, #32
 8000c4c:	b29a      	uxth	r2, r3
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	; (8000cb8 <io_nand_init+0x88>)
 8000c50:	801a      	strh	r2, [r3, #0]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000c52:	491a      	ldr	r1, [pc, #104]	; (8000cbc <io_nand_init+0x8c>)
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f83b 	bl	8000cd0 <NAND_Read_ID>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d126      	bne.n	8000cae <io_nand_init+0x7e>

    	nandState = HAL_NAND_GetState(hnand);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f004 fec3 	bl	80059ec <HAL_NAND_GetState>
 8000c66:	4603      	mov	r3, r0
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <io_nand_init+0x90>)
 8000c6c:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <io_nand_init+0x94>)
 8000c76:	6810      	ldr	r0, [r2, #0]
 8000c78:	6851      	ldr	r1, [r2, #4]
 8000c7a:	6895      	ldr	r5, [r2, #8]
 8000c7c:	68d4      	ldr	r4, [r2, #12]
 8000c7e:	6018      	str	r0, [r3, #0]
 8000c80:	6059      	str	r1, [r3, #4]
 8000c82:	609d      	str	r5, [r3, #8]
 8000c84:	60dc      	str	r4, [r3, #12]
 8000c86:	6910      	ldr	r0, [r2, #16]
 8000c88:	6951      	ldr	r1, [r2, #20]
 8000c8a:	6118      	str	r0, [r3, #16]
 8000c8c:	6159      	str	r1, [r3, #20]

    	total_pages = chipConf.PlaneSize / chipConf.PageSize;
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <io_nand_init+0x94>)
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <io_nand_init+0x94>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <io_nand_init+0x98>)
 8000c9c:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <io_nand_init+0x94>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <io_nand_init+0x98>)
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	fb02 f303 	mul.w	r3, r2, r3
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <io_nand_init+0x9c>)
 8000cac:	6013      	str	r3, [r2, #0]

    }

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000034c 	.word	0x2000034c
 8000cbc:	20001388 	.word	0x20001388
 8000cc0:	20000081 	.word	0x20000081
 8000cc4:	20001390 	.word	0x20001390
 8000cc8:	20001368 	.word	0x20001368
 8000ccc:	2000136c 	.word	0x2000136c

08000cd0 <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d101      	bne.n	8000cea <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	e059      	b.n	8000d9e <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d152      	bne.n	8000d9c <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d101      	bne.n	8000d04 <NAND_Read_ID+0x34>
 8000d00:	2302      	movs	r3, #2
 8000d02:	e04c      	b.n	8000d9e <NAND_Read_ID+0xce>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2201      	movs	r2, #1
 8000d08:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2202      	movs	r2, #2
 8000d10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000d14:	4b25      	ldr	r3, [pc, #148]	; (8000dac <NAND_Read_ID+0xdc>)
 8000d16:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000d1a:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000d1c:	4b23      	ldr	r3, [pc, #140]	; (8000dac <NAND_Read_ID+0xdc>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	2290      	movs	r2, #144	; 0x90
 8000d26:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d28:	f3bf 8f4f 	dsb	sy
}
 8000d2c:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <NAND_Read_ID+0xdc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d3a:	f3bf 8f4f 	dsb	sy
}
 8000d3e:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d123      	bne.n	8000d90 <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <NAND_Read_ID+0xdc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000d50:	4b16      	ldr	r3, [pc, #88]	; (8000dac <NAND_Read_ID+0xdc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	3310      	adds	r3, #16
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	0c1b      	lsrs	r3, r3, #16
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	0e1b      	lsrs	r3, r3, #24
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e000      	b.n	8000d9e <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20001370 	.word	0x20001370

08000db0 <io_nand_read_8b>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af04      	add	r7, sp, #16
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
 8000dbc:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	68f9      	ldr	r1, [r7, #12]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 fae1 	bl	800138c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000dca:	4b8a      	ldr	r3, [pc, #552]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d101      	bne.n	8000ddc <io_nand_read_8b+0x2c>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e106      	b.n	8000fea <io_nand_read_8b+0x23a>

    __HAL_LOCK(nandPort);
 8000ddc:	4b85      	ldr	r3, [pc, #532]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d101      	bne.n	8000dec <io_nand_read_8b+0x3c>
 8000de8:	2302      	movs	r3, #2
 8000dea:	e0fe      	b.n	8000fea <io_nand_read_8b+0x23a>
 8000dec:	4b81      	ldr	r3, [pc, #516]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2201      	movs	r2, #1
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000df6:	4b7f      	ldr	r3, [pc, #508]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000e00:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <io_nand_read_8b+0x248>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000e06:	8abb      	ldrh	r3, [r7, #20]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	8b3b      	ldrh	r3, [r7, #24]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	8afb      	ldrh	r3, [r7, #22]
 8000e10:	4618      	mov	r0, r3
 8000e12:	4b78      	ldr	r3, [pc, #480]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	fb00 f303 	mul.w	r3, r0, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a75      	ldr	r2, [pc, #468]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000e20:	6812      	ldr	r2, [r2, #0]
 8000e22:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	440b      	add	r3, r1
 8000e2a:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000e2c:	4b73      	ldr	r3, [pc, #460]	; (8000ffc <io_nand_read_8b+0x24c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d90b      	bls.n	8000e4c <io_nand_read_8b+0x9c>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
    	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 8000e34:	8abb      	ldrh	r3, [r7, #20]
 8000e36:	8afa      	ldrh	r2, [r7, #22]
 8000e38:	8b39      	ldrh	r1, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 8000e3a:	9102      	str	r1, [sp, #8]
 8000e3c:	9201      	str	r2, [sp, #4]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	6a3b      	ldr	r3, [r7, #32]
 8000e42:	4a6f      	ldr	r2, [pc, #444]	; (8001000 <io_nand_read_8b+0x250>)
 8000e44:	496f      	ldr	r1, [pc, #444]	; (8001004 <io_nand_read_8b+0x254>)
 8000e46:	2001      	movs	r0, #1
 8000e48:	f001 f998 	bl	800217c <Report>


    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e52:	2200      	movs	r2, #0
 8000e54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e56:	f3bf 8f4f 	dsb	sy
}
 8000e5a:	bf00      	nop
    __DSB();

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000e5c:	4b65      	ldr	r3, [pc, #404]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e66:	d830      	bhi.n	8000eca <io_nand_read_8b+0x11a>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e74:	f3bf 8f4f 	dsb	sy
}
 8000e78:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6a3a      	ldr	r2, [r7, #32]
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e86:	f3bf 8f4f 	dsb	sy
}
 8000e8a:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000e8c:	6a3b      	ldr	r3, [r7, #32]
 8000e8e:	0a1a      	lsrs	r2, r3, #8
 8000e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000e9a:	f3bf 8f4f 	dsb	sy
}
 8000e9e:	bf00      	nop
    	__DSB();
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000ea0:	4b54      	ldr	r3, [pc, #336]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea6:	4a53      	ldr	r2, [pc, #332]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000eac:	fb02 f303 	mul.w	r3, r2, r3
 8000eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb4:	d344      	bcc.n	8000f40 <io_nand_read_8b+0x190>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	0c1a      	lsrs	r2, r3, #16
 8000eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ec4:	f3bf 8f4f 	dsb	sy
}
 8000ec8:	e03a      	b.n	8000f40 <io_nand_read_8b+0x190>
			__DSB();
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed6:	f3bf 8f4f 	dsb	sy
}
 8000eda:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	0a1a      	lsrs	r2, r3, #8
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eea:	f3bf 8f4f 	dsb	sy
}
 8000eee:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef6:	6a3a      	ldr	r2, [r7, #32]
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000efc:	f3bf 8f4f 	dsb	sy
}
 8000f00:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	0a1a      	lsrs	r2, r3, #8
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f10:	f3bf 8f4f 	dsb	sy
}
 8000f14:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	4a35      	ldr	r2, [pc, #212]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2a:	d309      	bcc.n	8000f40 <io_nand_read_8b+0x190>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8000f2c:	6a3b      	ldr	r3, [r7, #32]
 8000f2e:	0c1a      	lsrs	r2, r3, #16
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3a:	f3bf 8f4f 	dsb	sy
}
 8000f3e:	bf00      	nop
    		__DSB();
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8000f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f46:	2230      	movs	r2, #48	; 0x30
 8000f48:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4a:	f3bf 8f4f 	dsb	sy
}
 8000f4e:	bf00      	nop
    __DSB();

    uint32_t tickstart = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d127      	bne.n	8000fb0 <io_nand_read_8b+0x200>
        tickstart = HAL_GetTick();
 8000f60:	f003 fd16 	bl	8004990 <HAL_GetTick>
 8000f64:	61f8      	str	r0, [r7, #28]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8000f66:	e013      	b.n	8000f90 <io_nand_read_8b+0x1e0>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 8000f68:	f003 fd12 	bl	8004990 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f76:	d90b      	bls.n	8000f90 <io_nand_read_8b+0x1e0>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2203      	movs	r2, #3
 8000f7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e02c      	b.n	8000fea <io_nand_read_8b+0x23a>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f004 fd37 	bl	8005a08 <HAL_NAND_Read_Status>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b40      	cmp	r3, #64	; 0x40
 8000f9e:	d1e3      	bne.n	8000f68 <io_nand_read_8b+0x1b8>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000faa:	f3bf 8f4f 	dsb	sy
}
 8000fae:	bf00      	nop
        __DSB();
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fb8:	e008      	b.n	8000fcc <io_nand_read_8b+0x21c>
 8000fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	1c59      	adds	r1, r3, #1
 8000fc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000fc2:	7812      	ldrb	r2, [r2, #0]
 8000fc4:	701a      	strb	r2, [r3, #0]
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	3301      	adds	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d3f2      	bcc.n	8000fba <io_nand_read_8b+0x20a>

    nandPort->State = HAL_NAND_STATE_READY;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 8000fde:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <io_nand_read_8b+0x244>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3730      	adds	r7, #48	; 0x30
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000074 	.word	0x20000074
 8000ff8:	20001370 	.word	0x20001370
 8000ffc:	20000062 	.word	0x20000062
 8001000:	080115c0 	.word	0x080115c0
 8001004:	0800dbdc 	.word	0x0800dbdc

08001008 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t addr, uint8_t *pBuffer, uint32_t size, uint32_t offset)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b090      	sub	sp, #64	; 0x40
 800100c:	af04      	add	r7, sp, #16
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
 8001014:	603b      	str	r3, [r7, #0]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	68f9      	ldr	r1, [r7, #12]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 f9b5 	bl	800138c <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8001022:	4b87      	ldr	r3, [pc, #540]	; (8001240 <io_nand_write_8b+0x238>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d101      	bne.n	8001034 <io_nand_write_8b+0x2c>
 8001030:	2302      	movs	r3, #2
 8001032:	e101      	b.n	8001238 <io_nand_write_8b+0x230>

    __HAL_LOCK(nandPort);
 8001034:	4b82      	ldr	r3, [pc, #520]	; (8001240 <io_nand_write_8b+0x238>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d101      	bne.n	8001044 <io_nand_write_8b+0x3c>
 8001040:	2302      	movs	r3, #2
 8001042:	e0f9      	b.n	8001238 <io_nand_write_8b+0x230>
 8001044:	4b7e      	ldr	r3, [pc, #504]	; (8001240 <io_nand_write_8b+0x238>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2201      	movs	r2, #1
 800104a:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 800104e:	4b7c      	ldr	r3, [pc, #496]	; (8001240 <io_nand_write_8b+0x238>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2202      	movs	r2, #2
 8001054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8001058:	4b7a      	ldr	r3, [pc, #488]	; (8001244 <io_nand_write_8b+0x23c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 800105e:	8abb      	ldrh	r3, [r7, #20]
 8001060:	4619      	mov	r1, r3
 8001062:	8b3b      	ldrh	r3, [r7, #24]
 8001064:	461a      	mov	r2, r3
 8001066:	8afb      	ldrh	r3, [r7, #22]
 8001068:	4618      	mov	r0, r3
 800106a:	4b75      	ldr	r3, [pc, #468]	; (8001240 <io_nand_write_8b+0x238>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001070:	fb00 f303 	mul.w	r3, r0, r3
 8001074:	4413      	add	r3, r2
 8001076:	4a72      	ldr	r2, [pc, #456]	; (8001240 <io_nand_write_8b+0x238>)
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800107c:	fb02 f303 	mul.w	r3, r2, r3
 8001080:	440b      	add	r3, r1
 8001082:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8001084:	4b70      	ldr	r3, [pc, #448]	; (8001248 <io_nand_write_8b+0x240>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d90b      	bls.n	80010a4 <io_nand_write_8b+0x9c>
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
    	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 800108c:	8abb      	ldrh	r3, [r7, #20]
 800108e:	8afa      	ldrh	r2, [r7, #22]
 8001090:	8b39      	ldrh	r1, [r7, #24]
    	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 8001092:	9102      	str	r1, [sp, #8]
 8001094:	9201      	str	r2, [sp, #4]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	4a6c      	ldr	r2, [pc, #432]	; (800124c <io_nand_write_8b+0x244>)
 800109c:	496c      	ldr	r1, [pc, #432]	; (8001250 <io_nand_write_8b+0x248>)
 800109e:	2001      	movs	r0, #1
 80010a0:	f001 f86c 	bl	800217c <Report>

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80010a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010ae:	f3bf 8f4f 	dsb	sy
}
 80010b2:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010be:	f3bf 8f4f 	dsb	sy
}
 80010c2:	bf00      	nop
    __DSB();

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 80010c4:	4b5e      	ldr	r3, [pc, #376]	; (8001240 <io_nand_write_8b+0x238>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010ce:	d830      	bhi.n	8001132 <io_nand_write_8b+0x12a>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d6:	683a      	ldr	r2, [r7, #0]
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010dc:	f3bf 8f4f 	dsb	sy
}
 80010e0:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e8:	6a3a      	ldr	r2, [r7, #32]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010ee:	f3bf 8f4f 	dsb	sy
}
 80010f2:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	0a1a      	lsrs	r2, r3, #8
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001102:	f3bf 8f4f 	dsb	sy
}
 8001106:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8001108:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <io_nand_write_8b+0x238>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800110e:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <io_nand_write_8b+0x238>)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001114:	fb02 f303 	mul.w	r3, r2, r3
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d344      	bcc.n	80011a8 <io_nand_write_8b+0x1a0>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	0c1a      	lsrs	r2, r3, #16
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800112c:	f3bf 8f4f 	dsb	sy
}
 8001130:	e03a      	b.n	80011a8 <io_nand_write_8b+0x1a0>
    		__DSB();
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800113e:	f3bf 8f4f 	dsb	sy
}
 8001142:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	0a1a      	lsrs	r2, r3, #8
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114e:	b2d2      	uxtb	r2, r2
 8001150:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001164:	f3bf 8f4f 	dsb	sy
}
 8001168:	bf00      	nop
    	__DSB();
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800116a:	6a3b      	ldr	r3, [r7, #32]
 800116c:	0a1a      	lsrs	r2, r3, #8
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001178:	f3bf 8f4f 	dsb	sy
}
 800117c:	bf00      	nop
    	__DSB();
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <io_nand_write_8b+0x238>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <io_nand_write_8b+0x238>)
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001192:	d309      	bcc.n	80011a8 <io_nand_write_8b+0x1a0>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001194:	6a3b      	ldr	r3, [r7, #32]
 8001196:	0c1a      	lsrs	r2, r3, #16
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011a2:	f3bf 8f4f 	dsb	sy
}
 80011a6:	bf00      	nop
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80011b0:	e00b      	b.n	80011ca <io_nand_write_8b+0x1c2>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011be:	f3bf 8f4f 	dsb	sy
}
 80011c2:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 80011c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c6:	3301      	adds	r3, #1
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d3ef      	bcc.n	80011b2 <io_nand_write_8b+0x1aa>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d8:	2210      	movs	r2, #16
 80011da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80011dc:	f3bf 8f4f 	dsb	sy
}
 80011e0:	bf00      	nop
    __DSB();

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80011e2:	e016      	b.n	8001212 <io_nand_write_8b+0x20a>
        tickstart = HAL_GetTick();
 80011e4:	f003 fbd4 	bl	8004990 <HAL_GetTick>
 80011e8:	61f8      	str	r0, [r7, #28]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 80011ea:	f003 fbd1 	bl	8004990 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d90b      	bls.n	8001212 <io_nand_write_8b+0x20a>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <io_nand_write_8b+0x238>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2203      	movs	r2, #3
 8001200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 8001204:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <io_nand_write_8b+0x238>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e012      	b.n	8001238 <io_nand_write_8b+0x230>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <io_nand_write_8b+0x238>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f004 fbf6 	bl	8005a08 <HAL_NAND_Read_Status>
 800121c:	4603      	mov	r3, r0
 800121e:	2b40      	cmp	r3, #64	; 0x40
 8001220:	d1e0      	bne.n	80011e4 <io_nand_write_8b+0x1dc>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <io_nand_write_8b+0x238>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <io_nand_write_8b+0x238>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3730      	adds	r7, #48	; 0x30
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000074 	.word	0x20000074
 8001244:	20001370 	.word	0x20001370
 8001248:	20000062 	.word	0x20000062
 800124c:	080115d0 	.word	0x080115d0
 8001250:	0800dbdc 	.word	0x0800dbdc

08001254 <io_nand_erase_block>:
//-----------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 800125c:	4b46      	ldr	r3, [pc, #280]	; (8001378 <io_nand_erase_block+0x124>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d101      	bne.n	800126e <io_nand_erase_block+0x1a>

		return HAL_BUSY;
 800126a:	2302      	movs	r3, #2
 800126c:	e080      	b.n	8001370 <io_nand_erase_block+0x11c>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 800126e:	4b42      	ldr	r3, [pc, #264]	; (8001378 <io_nand_erase_block+0x124>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d178      	bne.n	800136e <io_nand_erase_block+0x11a>

		__HAL_LOCK(nandPort);
 800127c:	4b3e      	ldr	r3, [pc, #248]	; (8001378 <io_nand_erase_block+0x124>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d101      	bne.n	800128c <io_nand_erase_block+0x38>
 8001288:	2302      	movs	r3, #2
 800128a:	e071      	b.n	8001370 <io_nand_erase_block+0x11c>
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <io_nand_erase_block+0x124>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <io_nand_erase_block+0x124>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2202      	movs	r2, #2
 800129c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 80012a0:	4b36      	ldr	r3, [pc, #216]	; (800137c <io_nand_erase_block+0x128>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
		uint32_t nandaddress = ARRAY_ADDRESS(pAddress, nandPort);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	889b      	ldrh	r3, [r3, #4]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	885b      	ldrh	r3, [r3, #2]
 80012b6:	4618      	mov	r0, r3
 80012b8:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <io_nand_erase_block+0x124>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012be:	fb00 f303 	mul.w	r3, r0, r3
 80012c2:	4413      	add	r3, r2
 80012c4:	4a2c      	ldr	r2, [pc, #176]	; (8001378 <io_nand_erase_block+0x124>)
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	440b      	add	r3, r1
 80012d0:	60bb      	str	r3, [r7, #8]


		if (dbg > logOn)
 80012d2:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <io_nand_erase_block+0x12c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d910      	bls.n	80012fc <io_nand_erase_block+0xa8>
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu\r\n",
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	881b      	ldrh	r3, [r3, #0]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu\r\n",
 80012de:	461a      	mov	r2, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	889b      	ldrh	r3, [r3, #4]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu\r\n",
 80012e4:	4619      	mov	r1, r3
					  __func__, nandaddress, pAddress->Page, pAddress->Block, pAddress->Plane);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	885b      	ldrh	r3, [r3, #2]
			Report(1, "[%s] nand_adr:0x%X page:%lu block:%lu plane:%lu\r\n",
 80012ea:	9302      	str	r3, [sp, #8]
 80012ec:	9101      	str	r1, [sp, #4]
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4a24      	ldr	r2, [pc, #144]	; (8001384 <io_nand_erase_block+0x130>)
 80012f4:	4924      	ldr	r1, [pc, #144]	; (8001388 <io_nand_erase_block+0x134>)
 80012f6:	2001      	movs	r0, #1
 80012f8:	f000 ff40 	bl	800217c <Report>

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001302:	2260      	movs	r2, #96	; 0x60
 8001304:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001306:	f3bf 8f4f 	dsb	sy
}
 800130a:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001318:	f3bf 8f4f 	dsb	sy
}
 800131c:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	0a1a      	lsrs	r2, r3, #8
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800132c:	f3bf 8f4f 	dsb	sy
}
 8001330:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	0c1a      	lsrs	r2, r3, #16
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001340:	f3bf 8f4f 	dsb	sy
}
 8001344:	bf00      	nop
		__DSB();
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	22d0      	movs	r2, #208	; 0xd0
 800134e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001350:	f3bf 8f4f 	dsb	sy
}
 8001354:	bf00      	nop
		__DSB();

		nandPort->State = HAL_NAND_STATE_READY;
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <io_nand_erase_block+0x124>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <io_nand_erase_block+0x124>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

		return HAL_ERROR;

	}

	return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <io_nand_erase_block+0x11c>
		return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000074 	.word	0x20000074
 800137c:	20001370 	.word	0x20001370
 8001380:	20000062 	.word	0x20000062
 8001384:	080115e4 	.word	0x080115e4
 8001388:	0800dc10 	.word	0x0800dc10

0800138c <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t addr)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = addr / chipConf.PlaneSize;
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <io_uint32_to_flash_adr+0x7c>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	817b      	strh	r3, [r7, #10]
	a.Block = (addr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <io_uint32_to_flash_adr+0x7c>)
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	fb02 f303 	mul.w	r3, r2, r3
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	1ad2      	subs	r2, r2, r3
 80013b4:	4b14      	ldr	r3, [pc, #80]	; (8001408 <io_uint32_to_flash_adr+0x7c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80013bc:	b29b      	uxth	r3, r3
 80013be:	81bb      	strh	r3, [r7, #12]
	a.Page  = addr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	8979      	ldrh	r1, [r7, #10]
 80013c6:	4b10      	ldr	r3, [pc, #64]	; (8001408 <io_uint32_to_flash_adr+0x7c>)
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	fb11 f303 	smulbb	r3, r1, r3
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	89b9      	ldrh	r1, [r7, #12]
 80013d8:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <io_uint32_to_flash_adr+0x7c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	fb11 f303 	smulbb	r3, r1, r3
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	813b      	strh	r3, [r7, #8]

	return a;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	461a      	mov	r2, r3
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	6010      	str	r0, [r2, #0]
 80013f6:	889b      	ldrh	r3, [r3, #4]
 80013f8:	8093      	strh	r3, [r2, #4]
}
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20001390 	.word	0x20001390

0800140c <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	603b      	str	r3, [r7, #0]

	if (io_nand_read_8b(addr, buffer, size, 0) != HAL_OK) devError |= devNAND;
 800141a:	2300      	movs	r3, #0
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f7ff fcc5 	bl	8000db0 <io_nand_read_8b>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <io_nand_read+0x2e>
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <io_nand_read+0x38>)
 800142e:	881b      	ldrh	r3, [r3, #0]
 8001430:	f043 0320 	orr.w	r3, r3, #32
 8001434:	b29a      	uxth	r2, r3
 8001436:	4b03      	ldr	r3, [pc, #12]	; (8001444 <io_nand_read+0x38>)
 8001438:	801a      	strh	r2, [r3, #0]
	//NAND_AddressTypeDef Address = io_uint32_to_flash_adr(addr);
	//if (NAND_Read_Page_8b(nandPort, &Address, buffer, size, offset) != HAL_OK) devError |= devNAND;

    return 0;
 800143a:	2300      	movs	r3, #0
}
 800143c:	4618      	mov	r0, r3
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000034c 	.word	0x2000034c

08001448 <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t addr, uint8_t *buffer, uint32_t size, uint32_t offset)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
 8001454:	603b      	str	r3, [r7, #0]

	if (io_nand_write_8b(addr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	68b9      	ldr	r1, [r7, #8]
 800145c:	68f8      	ldr	r0, [r7, #12]
 800145e:	f7ff fdd3 	bl	8001008 <io_nand_write_8b>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <io_nand_write+0x2e>
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <io_nand_write+0x38>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b03      	ldr	r3, [pc, #12]	; (8001480 <io_nand_write+0x38>)
 8001474:	801a      	strh	r2, [r3, #0]

	return 0;
 8001476:	2300      	movs	r3, #0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000034c 	.word	0x2000034c

08001484 <io_nand_block_erase>:
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t addr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff7a 	bl	800138c <io_uint32_to_flash_adr>

	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fed9 	bl	8001254 <io_nand_erase_block>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d006      	beq.n	80014b6 <io_nand_block_erase+0x32>
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <io_nand_block_erase+0x3c>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <io_nand_block_erase+0x3c>)
 80014b4:	801a      	strh	r2, [r3, #0]
}
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000034c 	.word	0x2000034c

080014c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80014c8:	f3bf 8f4f 	dsb	sy
}
 80014cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <__NVIC_SystemReset+0x24>)
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80014d6:	4904      	ldr	r1, [pc, #16]	; (80014e8 <__NVIC_SystemReset+0x24>)
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_SystemReset+0x28>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
}
 80014e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <__NVIC_SystemReset+0x20>
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	05fa0004 	.word	0x05fa0004

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f003 fa15 	bl	8004924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f885 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f000 fa31 	bl	8001964 <MX_GPIO_Init>
  MX_DMA_Init();
 8001502:	f000 f9f9 	bl	80018f8 <MX_DMA_Init>
  MX_TIM2_Init();
 8001506:	f000 f981 	bl	800180c <MX_TIM2_Init>
  MX_RTC_Init();
 800150a:	f000 f8e7 	bl	80016dc <MX_RTC_Init>
  MX_FSMC_Init();
 800150e:	f000 facf 	bl	8001ab0 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001512:	f000 f9c7 	bl	80018a4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001516:	f000 f943 	bl	80017a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]
 800151e:	e01e      	b.n	800155e <main+0x6e>
	  HAL_Delay(150);
 8001520:	2096      	movs	r0, #150	; 0x96
 8001522:	f003 fa41 	bl	80049a8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	2180      	movs	r1, #128	; 0x80
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <main+0xe0>)
 800152c:	f004 f8e0 	bl	80056f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001530:	2201      	movs	r2, #1
 8001532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001536:	4827      	ldr	r0, [pc, #156]	; (80015d4 <main+0xe4>)
 8001538:	f004 f8da 	bl	80056f0 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 800153c:	2096      	movs	r0, #150	; 0x96
 800153e:	f003 fa33 	bl	80049a8 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	2180      	movs	r1, #128	; 0x80
 8001546:	4822      	ldr	r0, [pc, #136]	; (80015d0 <main+0xe0>)
 8001548:	f004 f8d2 	bl	80056f0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001552:	4820      	ldr	r0, [pc, #128]	; (80015d4 <main+0xe4>)
 8001554:	f004 f8cc 	bl	80056f0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	3301      	adds	r3, #1
 800155c:	71fb      	strb	r3, [r7, #7]
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d9dd      	bls.n	8001520 <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001564:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <main+0xe8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f006 f85d 	bl	8007628 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 800156e:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <main+0xec>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	491a      	ldr	r1, [pc, #104]	; (80015e0 <main+0xf0>)
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fcd5 	bl	8007f26 <HAL_UART_Receive_IT>

  //set_Date(epoch);

  ST7789_Reset();
 800157c:	f002 fb9a 	bl	8003cb4 <ST7789_Reset>
  ST7789_Init(back_color);
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <main+0xf4>)
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f002 fbaf 	bl	8003ce8 <ST7789_Init>

#if defined(SET_FS_TEST) || defined(SET_NAND_TEST)
  dbg = logDump;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <main+0xf8>)
 800158c:	2202      	movs	r2, #2
 800158e:	701a      	strb	r2, [r3, #0]
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001590:	f007 fe56 	bl	8009240 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001594:	4a15      	ldr	r2, [pc, #84]	; (80015ec <main+0xfc>)
 8001596:	2101      	movs	r1, #1
 8001598:	2001      	movs	r0, #1
 800159a:	f007 ff4a 	bl	8009432 <osSemaphoreNew>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <main+0x100>)
 80015a2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 80015a4:	4a13      	ldr	r2, [pc, #76]	; (80015f4 <main+0x104>)
 80015a6:	2102      	movs	r1, #2
 80015a8:	2010      	movs	r0, #16
 80015aa:	f007 ffcb 	bl	8009544 <osMessageQueueNew>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <main+0x108>)
 80015b2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 80015b4:	4a11      	ldr	r2, [pc, #68]	; (80015fc <main+0x10c>)
 80015b6:	2100      	movs	r1, #0
 80015b8:	4811      	ldr	r0, [pc, #68]	; (8001600 <main+0x110>)
 80015ba:	f007 fe8d 	bl	80092d8 <osThreadNew>
 80015be:	4603      	mov	r3, r0
 80015c0:	4a10      	ldr	r2, [pc, #64]	; (8001604 <main+0x114>)
 80015c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80015c4:	f007 fe62 	bl	800928c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 80015c8:	2001      	movs	r0, #1
 80015ca:	f003 f9ed 	bl	80049a8 <HAL_Delay>
 80015ce:	e7fb      	b.n	80015c8 <main+0xd8>
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	2000006c 	.word	0x2000006c
 80015dc:	20000070 	.word	0x20000070
 80015e0:	20001360 	.word	0x20001360
 80015e4:	20001366 	.word	0x20001366
 80015e8:	20000062 	.word	0x20000062
 80015ec:	08011634 	.word	0x08011634
 80015f0:	20000348 	.word	0x20000348
 80015f4:	0801161c 	.word	0x0801161c
 80015f8:	20000344 	.word	0x20000344
 80015fc:	080115f8 	.word	0x080115f8
 8001600:	08002989 	.word	0x08002989
 8001604:	20000340 	.word	0x20000340

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b094      	sub	sp, #80	; 0x50
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2230      	movs	r2, #48	; 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00b f8ee 	bl	800c7f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	4b28      	ldr	r3, [pc, #160]	; (80016d4 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	4a27      	ldr	r2, [pc, #156]	; (80016d4 <SystemClock_Config+0xcc>)
 8001636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163a:	6413      	str	r3, [r2, #64]	; 0x40
 800163c:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <SystemClock_Config+0xcc>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001648:	2300      	movs	r3, #0
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a21      	ldr	r2, [pc, #132]	; (80016d8 <SystemClock_Config+0xd0>)
 8001652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <SystemClock_Config+0xd0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001660:	607b      	str	r3, [r7, #4]
 8001662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001664:	2301      	movs	r3, #1
 8001666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800166e:	2302      	movs	r3, #2
 8001670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001678:	2308      	movs	r3, #8
 800167a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800167c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001682:	2302      	movs	r3, #2
 8001684:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001686:	2307      	movs	r3, #7
 8001688:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	4618      	mov	r0, r3
 8001690:	f004 f9e0 	bl	8005a54 <HAL_RCC_OscConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800169a:	f002 f96b 	bl	8003974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800169e:	230f      	movs	r3, #15
 80016a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a2:	2302      	movs	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80016aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	2105      	movs	r1, #5
 80016bc:	4618      	mov	r0, r3
 80016be:	f004 fc41 	bl	8005f44 <HAL_RCC_ClockConfig>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016c8:	f002 f954 	bl	8003974 <Error_Handler>
  }
}
 80016cc:	bf00      	nop
 80016ce:	3750      	adds	r7, #80	; 0x50
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40007000 	.word	0x40007000

080016dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016e2:	1d3b      	adds	r3, r7, #4
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80016f0:	2300      	movs	r3, #0
 80016f2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f4:	4b27      	ldr	r3, [pc, #156]	; (8001794 <MX_RTC_Init+0xb8>)
 80016f6:	4a28      	ldr	r2, [pc, #160]	; (8001798 <MX_RTC_Init+0xbc>)
 80016f8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016fa:	4b26      	ldr	r3, [pc, #152]	; (8001794 <MX_RTC_Init+0xb8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <MX_RTC_Init+0xb8>)
 8001702:	227f      	movs	r2, #127	; 0x7f
 8001704:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001706:	4b23      	ldr	r3, [pc, #140]	; (8001794 <MX_RTC_Init+0xb8>)
 8001708:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800170c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800170e:	4b21      	ldr	r3, [pc, #132]	; (8001794 <MX_RTC_Init+0xb8>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_RTC_Init+0xb8>)
 8001716:	2200      	movs	r2, #0
 8001718:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800171a:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_RTC_Init+0xb8>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001720:	481c      	ldr	r0, [pc, #112]	; (8001794 <MX_RTC_Init+0xb8>)
 8001722:	f004 ff43 	bl	80065ac <HAL_RTC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 800172c:	f002 f922 	bl	8003974 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001730:	2315      	movs	r3, #21
 8001732:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001734:	2334      	movs	r3, #52	; 0x34
 8001736:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001738:	230c      	movs	r3, #12
 800173a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2200      	movs	r2, #0
 8001748:	4619      	mov	r1, r3
 800174a:	4812      	ldr	r0, [pc, #72]	; (8001794 <MX_RTC_Init+0xb8>)
 800174c:	f004 ffa4 	bl	8006698 <HAL_RTC_SetTime>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001756:	f002 f90d 	bl	8003974 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800175a:	2301      	movs	r3, #1
 800175c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800175e:	2301      	movs	r3, #1
 8001760:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <MX_RTC_Init+0xb8>)
 8001772:	f005 f889 	bl	8006888 <HAL_RTC_SetDate>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 800177c:	f002 f8fa 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <MX_RTC_Init+0xc0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fbff 	bl	8001f88 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000013c 	.word	0x2000013c
 8001798:	40002800 	.word	0x40002800
 800179c:	20000064 	.word	0x20000064

080017a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_SPI1_Init+0x64>)
 80017a6:	4a18      	ldr	r2, [pc, #96]	; (8001808 <MX_SPI1_Init+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b2:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b8:	4b12      	ldr	r3, [pc, #72]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_SPI1_Init+0x64>)
 80017c0:	2202      	movs	r2, #2
 80017c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_SPI1_Init+0x64>)
 80017cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_SPI1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_SPI1_Init+0x64>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_SPI1_Init+0x64>)
 80017f2:	f005 f9d9 	bl	8006ba8 <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017fc:	f002 f8ba 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000015c 	.word	0x2000015c
 8001808:	40013000 	.word	0x40013000

0800180c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001820:	463b      	mov	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <MX_TIM2_Init+0x94>)
 800182a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800182e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001832:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001836:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b19      	ldr	r3, [pc, #100]	; (80018a0 <MX_TIM2_Init+0x94>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001840:	22f9      	movs	r2, #249	; 0xf9
 8001842:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001846:	2200      	movs	r2, #0
 8001848:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800184a:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_TIM2_Init+0x94>)
 800184c:	2280      	movs	r2, #128	; 0x80
 800184e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001850:	4813      	ldr	r0, [pc, #76]	; (80018a0 <MX_TIM2_Init+0x94>)
 8001852:	f005 fe99 	bl	8007588 <HAL_TIM_Base_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800185c:	f002 f88a 	bl	8003974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4619      	mov	r1, r3
 800186c:	480c      	ldr	r0, [pc, #48]	; (80018a0 <MX_TIM2_Init+0x94>)
 800186e:	f006 f853 	bl	8007918 <HAL_TIM_ConfigClockSource>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001878:	f002 f87c 	bl	8003974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800187c:	2320      	movs	r3, #32
 800187e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_TIM2_Init+0x94>)
 800188a:	f006 fa6f 	bl	8007d6c <HAL_TIMEx_MasterConfigSynchronization>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001894:	f002 f86e 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000214 	.word	0x20000214

080018a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <MX_USART3_UART_Init+0x50>)
 80018ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018b0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80018b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018be:	2200      	movs	r2, #0
 80018c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018ca:	220c      	movs	r2, #12
 80018cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_USART3_UART_Init+0x4c>)
 80018dc:	f006 fad6 	bl	8007e8c <HAL_UART_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018e6:	f002 f845 	bl	8003974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2000025c 	.word	0x2000025c
 80018f4:	40004800 	.word	0x40004800

080018f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_DMA_Init+0x68>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a16      	ldr	r2, [pc, #88]	; (8001960 <MX_DMA_Init+0x68>)
 8001908:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_DMA_Init+0x68>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <MX_DMA_Init+0x68>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <MX_DMA_Init+0x68>)
 8001924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <MX_DMA_Init+0x68>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2105      	movs	r1, #5
 800193a:	200e      	movs	r0, #14
 800193c:	f003 f910 	bl	8004b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001940:	200e      	movs	r0, #14
 8001942:	f003 f929 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2103      	movs	r1, #3
 800194a:	203b      	movs	r0, #59	; 0x3b
 800194c:	f003 f908 	bl	8004b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001950:	203b      	movs	r0, #59	; 0x3b
 8001952:	f003 f921 	bl	8004b98 <HAL_NVIC_EnableIRQ>

}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	; 0x30
 8001968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	61bb      	str	r3, [r7, #24]
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a47      	ldr	r2, [pc, #284]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 8001984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b45      	ldr	r3, [pc, #276]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a40      	ldr	r2, [pc, #256]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b3a      	ldr	r3, [pc, #232]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a39      	ldr	r2, [pc, #228]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019bc:	f043 0310 	orr.w	r3, r3, #16
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a32      	ldr	r2, [pc, #200]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a2b      	ldr	r2, [pc, #172]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b25      	ldr	r3, [pc, #148]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b22      	ldr	r3, [pc, #136]	; (8001aa0 <MX_GPIO_Init+0x13c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0304 	and.w	r3, r3, #4
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	210e      	movs	r1, #14
 8001a26:	481f      	ldr	r0, [pc, #124]	; (8001aa4 <MX_GPIO_Init+0x140>)
 8001a28:	f003 fe62 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a32:	481d      	ldr	r0, [pc, #116]	; (8001aa8 <MX_GPIO_Init+0x144>)
 8001a34:	f003 fe5c 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <MX_GPIO_Init+0x148>)
 8001a3e:	f003 fe57 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 8001a42:	230e      	movs	r3, #14
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a46:	2301      	movs	r3, #1
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	4812      	ldr	r0, [pc, #72]	; (8001aa4 <MX_GPIO_Init+0x140>)
 8001a5a:	f003 fcad 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 8001a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a64:	2301      	movs	r3, #1
 8001a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	480c      	ldr	r0, [pc, #48]	; (8001aa8 <MX_GPIO_Init+0x144>)
 8001a78:	f003 fc9e 	bl	80053b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a80:	2301      	movs	r3, #1
 8001a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a84:	2302      	movs	r3, #2
 8001a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	; (8001aac <MX_GPIO_Init+0x148>)
 8001a94:	f003 fc90 	bl	80053b8 <HAL_GPIO_Init>

}
 8001a98:	bf00      	nop
 8001a9a:	3730      	adds	r7, #48	; 0x30
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40020c00 	.word	0x40020c00
 8001aac:	40020800 	.word	0x40020800

08001ab0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <MX_FSMC_Init+0xd0>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 8001aca:	463b      	mov	r3, r7
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001ad6:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001ad8:	4a2b      	ldr	r2, [pc, #172]	; (8001b88 <MX_FSMC_Init+0xd8>)
 8001ada:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001ade:	2210      	movs	r2, #16
 8001ae0:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001ae2:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 8001afa:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001b00:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b0c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 8001b0e:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b10:	2210      	movs	r2, #16
 8001b12:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;//131072; (in pages)
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 8001b1a:	4b1a      	ldr	r3, [pc, #104]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b20:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 18;//252;
 8001b38:	2312      	movs	r3, #18
 8001b3a:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 12;//252;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 12;//252;
 8001b40:	230c      	movs	r3, #12
 8001b42:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 6;//252;
 8001b44:	2306      	movs	r3, #6
 8001b46:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 18;//252;
 8001b48:	2312      	movs	r3, #18
 8001b4a:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 12;//252;
 8001b4c:	230c      	movs	r3, #12
 8001b4e:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 12;//252;
 8001b50:	230c      	movs	r3, #12
 8001b52:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 6;//252;
 8001b54:	2306      	movs	r3, #6
 8001b56:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 8001b58:	463a      	mov	r2, r7
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4808      	ldr	r0, [pc, #32]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b62:	f003 fdf8 	bl	8005756 <HAL_NAND_Init>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_FSMC_Init+0xc0>
  {
    Error_Handler( );
 8001b6c:	f001 ff02 	bl	8003974 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  	  io_nand_init(&hnand1);
 8001b70:	4804      	ldr	r0, [pc, #16]	; (8001b84 <MX_FSMC_Init+0xd4>)
 8001b72:	f7ff f85d 	bl	8000c30 <io_nand_init>
//nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
//nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/

  /* USER CODE END FSMC_Init 2 */
}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20001384 	.word	0x20001384
 8001b84:	20000300 	.word	0x20000300
 8001b88:	a0000060 	.word	0xa0000060

08001b8c <pageIsEmpty>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <pageIsEmpty+0x5c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	4913      	ldr	r1, [pc, #76]	; (8001bec <pageIsEmpty+0x60>)
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fc33 	bl	800140c <io_nand_read>
	if (!(devError & devNAND)) {
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <pageIsEmpty+0x64>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d115      	bne.n	8001bde <pageIsEmpty+0x52>
		ret = true;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	e00b      	b.n	8001bd4 <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <pageIsEmpty+0x60>)
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2bff      	cmp	r3, #255	; 0xff
 8001bc6:	d002      	beq.n	8001bce <pageIsEmpty+0x42>
				ret = false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
				break;
 8001bcc:	e007      	b.n	8001bde <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <pageIsEmpty+0x5c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d3ee      	bcc.n	8001bbc <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20001390 	.word	0x20001390
 8001bec:	200013a8 	.word	0x200013a8
 8001bf0:	2000034c 	.word	0x2000034c

08001bf4 <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	4904      	ldr	r1, [pc, #16]	; (8001c18 <_write+0x24>)
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 fab8 	bl	800217c <Report>
	return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	0800dd8c 	.word	0x0800dd8c

08001c1c <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dc18      	bgt.n	8001c5c <get_qStat+0x40>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f113 0f06 	cmn.w	r3, #6
 8001c30:	db2a      	blt.n	8001c88 <get_qStat+0x6c>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3306      	adds	r3, #6
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d826      	bhi.n	8001c88 <get_qStat+0x6c>
 8001c3a:	a201      	add	r2, pc, #4	; (adr r2, 8001c40 <get_qStat+0x24>)
 8001c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c40:	08001c81 	.word	0x08001c81
 8001c44:	08001c7d 	.word	0x08001c7d
 8001c48:	08001c79 	.word	0x08001c79
 8001c4c:	08001c75 	.word	0x08001c75
 8001c50:	08001c71 	.word	0x08001c71
 8001c54:	08001c6d 	.word	0x08001c6d
 8001c58:	08001c69 	.word	0x08001c69
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00e      	beq.n	8001c84 <get_qStat+0x68>
 8001c66:	e00f      	b.n	8001c88 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001c68:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <get_qStat+0x7c>)
 8001c6a:	e00e      	b.n	8001c8a <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <get_qStat+0x80>)
 8001c6e:	e00c      	b.n	8001c8a <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <get_qStat+0x84>)
 8001c72:	e00a      	b.n	8001c8a <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <get_qStat+0x88>)
 8001c76:	e008      	b.n	8001c8a <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001c78:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <get_qStat+0x8c>)
 8001c7a:	e006      	b.n	8001c8a <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <get_qStat+0x90>)
 8001c7e:	e004      	b.n	8001c8a <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <get_qStat+0x94>)
 8001c82:	e002      	b.n	8001c8a <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <get_qStat+0x98>)
 8001c86:	e000      	b.n	8001c8a <get_qStat+0x6e>
	}

	return "UnknownError";
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <get_qStat+0x9c>)
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	0800dd94 	.word	0x0800dd94
 8001c9c:	0800dd9c 	.word	0x0800dd9c
 8001ca0:	0800dda4 	.word	0x0800dda4
 8001ca4:	0800ddb4 	.word	0x0800ddb4
 8001ca8:	0800ddc4 	.word	0x0800ddc4
 8001cac:	0800ddd8 	.word	0x0800ddd8
 8001cb0:	0800dde8 	.word	0x0800dde8
 8001cb4:	0800ddf4 	.word	0x0800ddf4
 8001cb8:	0800de08 	.word	0x0800de08

08001cbc <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d00a      	beq.n	8001ce2 <get_logName+0x26>
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	dc0a      	bgt.n	8001ce6 <get_logName+0x2a>
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <get_logName+0x1e>
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d002      	beq.n	8001cde <get_logName+0x22>
 8001cd8:	e005      	b.n	8001ce6 <get_logName+0x2a>
		case logOff:
			return "logOff";
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <get_logName+0x38>)
 8001cdc:	e004      	b.n	8001ce8 <get_logName+0x2c>
		case logOn:
			return "logOn";
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <get_logName+0x3c>)
 8001ce0:	e002      	b.n	8001ce8 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <get_logName+0x40>)
 8001ce4:	e000      	b.n	8001ce8 <get_logName+0x2c>
	}

	return "???";
 8001ce6:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <get_logName+0x44>)
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	0800de18 	.word	0x0800de18
 8001cf8:	0800de20 	.word	0x0800de20
 8001cfc:	0800de28 	.word	0x0800de28
 8001d00:	0800de30 	.word	0x0800de30

08001d04 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8001d10:	2330      	movs	r3, #48	; 0x30
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	2300      	movs	r3, #0
 8001d1a:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <hex2bin+0x28>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <hex2bin+0x2c>
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	e0b2      	b.n	8001e96 <hex2bin+0x192>
    if (len > 8) len = 8;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d901      	bls.n	8001d3a <hex2bin+0x36>
 8001d36:	2308      	movs	r3, #8
 8001d38:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f1c3 0308 	rsb	r3, r3, #8
 8001d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 8001d44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	4413      	add	r3, r2
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	6879      	ldr	r1, [r7, #4]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00a fd42 	bl	800c7dc <memcpy>

    k = j = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001d66:	e090      	b.n	8001e8a <hex2bin+0x186>
        jk = j + 2;
 8001d68:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001d70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d78:	e066      	b.n	8001e48 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 8001d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d7e:	3328      	adds	r3, #40	; 0x28
 8001d80:	443b      	add	r3, r7
 8001d82:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d86:	2b2f      	cmp	r3, #47	; 0x2f
 8001d88:	d918      	bls.n	8001dbc <hex2bin+0xb8>
 8001d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d8e:	3328      	adds	r3, #40	; 0x28
 8001d90:	443b      	add	r3, r7
 8001d92:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d96:	2b39      	cmp	r3, #57	; 0x39
 8001d98:	d810      	bhi.n	8001dbc <hex2bin+0xb8>
 8001d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d9e:	3328      	adds	r3, #40	; 0x28
 8001da0:	443b      	add	r3, r7
 8001da2:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	3a30      	subs	r2, #48	; 0x30
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	3328      	adds	r3, #40	; 0x28
 8001db4:	443b      	add	r3, r7
 8001db6:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001dba:	e040      	b.n	8001e3e <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 8001dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dc0:	3328      	adds	r3, #40	; 0x28
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dc8:	2b60      	cmp	r3, #96	; 0x60
 8001dca:	d918      	bls.n	8001dfe <hex2bin+0xfa>
 8001dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd0:	3328      	adds	r3, #40	; 0x28
 8001dd2:	443b      	add	r3, r7
 8001dd4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001dd8:	2b66      	cmp	r3, #102	; 0x66
 8001dda:	d810      	bhi.n	8001dfe <hex2bin+0xfa>
 8001ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001de0:	3328      	adds	r3, #40	; 0x28
 8001de2:	443b      	add	r3, r7
 8001de4:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	3a57      	subs	r2, #87	; 0x57
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	3328      	adds	r3, #40	; 0x28
 8001df6:	443b      	add	r3, r7
 8001df8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8001dfc:	e01f      	b.n	8001e3e <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 8001dfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e02:	3328      	adds	r3, #40	; 0x28
 8001e04:	443b      	add	r3, r7
 8001e06:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e0a:	2b40      	cmp	r3, #64	; 0x40
 8001e0c:	d917      	bls.n	8001e3e <hex2bin+0x13a>
 8001e0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e12:	3328      	adds	r3, #40	; 0x28
 8001e14:	443b      	add	r3, r7
 8001e16:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001e1a:	2b46      	cmp	r3, #70	; 0x46
 8001e1c:	d80f      	bhi.n	8001e3e <hex2bin+0x13a>
 8001e1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e22:	3328      	adds	r3, #40	; 0x28
 8001e24:	443b      	add	r3, r7
 8001e26:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	3a37      	subs	r2, #55	; 0x37
 8001e34:	b2d2      	uxtb	r2, r2
 8001e36:	3328      	adds	r3, #40	; 0x28
 8001e38:	443b      	add	r3, r7
 8001e3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 8001e3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e42:	3301      	adds	r3, #1
 8001e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001e48:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001e4c:	7ffb      	ldrb	r3, [r7, #31]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d393      	bcc.n	8001d7a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001e52:	7b3b      	ldrb	r3, [r7, #12]
 8001e54:	011a      	lsls	r2, r3, #4
 8001e56:	7b7b      	ldrb	r3, [r7, #13]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001e60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e64:	f1c3 0303 	rsb	r3, r3, #3
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	623b      	str	r3, [r7, #32]
        k++;
 8001e76:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001e80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e84:	3302      	adds	r3, #2
 8001e86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 8001e8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	f67f af6a 	bls.w	8001d68 <hex2bin+0x64>
    }

    return ret;
 8001e94:	6a3b      	ldr	r3, [r7, #32]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3728      	adds	r7, #40	; 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	if (on)
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb6:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <errLedOn+0x34>)
 8001eb8:	f003 fc1a 	bl	80056f0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 8001ebc:	e005      	b.n	8001eca <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ec4:	4803      	ldr	r0, [pc, #12]	; (8001ed4 <errLedOn+0x34>)
 8001ec6:	f003 fc13 	bl	80056f0 <HAL_GPIO_WritePin>
}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	40020c00 	.word	0x40020c00

08001ed8 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
	return secCounter;
 8001edc:	4b03      	ldr	r3, [pc, #12]	; (8001eec <get_secCounter+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000350 	.word	0x20000350

08001ef0 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	secCounter++;
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <inc_secCounter+0x18>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	4a03      	ldr	r2, [pc, #12]	; (8001f08 <inc_secCounter+0x18>)
 8001efc:	6013      	str	r3, [r2, #0]
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	20000350 	.word	0x20000350

08001f0c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
	return msCounter;
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <get_msCounter+0x18>)
 8001f12:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8001f16:	4610      	mov	r0, r2
 8001f18:	4619      	mov	r1, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000358 	.word	0x20000358

08001f28 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
	msCounter++;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <inc_msCounter+0x20>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	1c50      	adds	r0, r2, #1
 8001f34:	f143 0100 	adc.w	r1, r3, #0
 8001f38:	4b03      	ldr	r3, [pc, #12]	; (8001f48 <inc_msCounter+0x20>)
 8001f3a:	e9c3 0100 	strd	r0, r1, [r3]
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	20000358 	.word	0x20000358

08001f4c <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001f54:	f7ff ffc0 	bl	8001ed8 <get_secCounter>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001f6e:	f7ff ffb3 	bl	8001ed8 <get_secCounter>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	bf94      	ite	ls
 8001f7a:	2301      	movls	r3, #1
 8001f7c:	2300      	movhi	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	; 0x50
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	2000      	movs	r0, #0
 8001f94:	460a      	mov	r2, r1
 8001f96:	4603      	mov	r3, r0
 8001f98:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8001f9c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001fa0:	f107 0320 	add.w	r3, r7, #32
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f00a fb3c 	bl	800c624 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8001fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8001fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8001fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8001fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <set_Date+0xb0>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8001fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001fe2:	f107 030c 	add.w	r3, r7, #12
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4814      	ldr	r0, [pc, #80]	; (800203c <set_Date+0xb4>)
 8001fec:	f004 fb54 	bl	8006698 <HAL_RTC_SetTime>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <set_Date+0x7e>
 8001ff6:	4b12      	ldr	r3, [pc, #72]	; (8002040 <set_Date+0xb8>)
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	4b0f      	ldr	r3, [pc, #60]	; (8002040 <set_Date+0xb8>)
 8002002:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002004:	e014      	b.n	8002030 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	2200      	movs	r2, #0
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <set_Date+0xb4>)
 8002010:	f004 fc3a 	bl	8006888 <HAL_RTC_SetDate>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <set_Date+0xa2>
 800201a:	4b09      	ldr	r3, [pc, #36]	; (8002040 <set_Date+0xb8>)
 800201c:	881b      	ldrh	r3, [r3, #0]
 800201e:	f043 0308 	orr.w	r3, r3, #8
 8002022:	b29a      	uxth	r2, r3
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <set_Date+0xb8>)
 8002026:	801a      	strh	r2, [r3, #0]
}
 8002028:	e002      	b.n	8002030 <set_Date+0xa8>
			setDate = true;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <set_Date+0xbc>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3750      	adds	r7, #80	; 0x50
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20001365 	.word	0x20001365
 800203c:	2000013c 	.word	0x2000013c
 8002040:	2000034c 	.word	0x2000034c
 8002044:	20001364 	.word	0x20001364

08002048 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b093      	sub	sp, #76	; 0x4c
 800204c:	af04      	add	r7, sp, #16
 800204e:	6078      	str	r0, [r7, #4]
int ret = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8002054:	4b40      	ldr	r3, [pc, #256]	; (8002158 <sec2str+0x110>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d040      	beq.n	80020e4 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8002062:	f7ff ff39 	bl	8001ed8 <get_secCounter>
 8002066:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	4a3c      	ldr	r2, [pc, #240]	; (800215c <sec2str+0x114>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c1b      	lsrs	r3, r3, #16
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8002074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002076:	4a39      	ldr	r2, [pc, #228]	; (800215c <sec2str+0x114>)
 8002078:	fba2 1203 	umull	r1, r2, r2, r3
 800207c:	0c12      	lsrs	r2, r2, #16
 800207e:	4938      	ldr	r1, [pc, #224]	; (8002160 <sec2str+0x118>)
 8002080:	fb01 f202 	mul.w	r2, r1, r2
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	4a36      	ldr	r2, [pc, #216]	; (8002164 <sec2str+0x11c>)
 800208c:	fba2 2303 	umull	r2, r3, r2, r3
 8002090:	0adb      	lsrs	r3, r3, #11
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8002094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <sec2str+0x11c>)
 8002098:	fba2 1203 	umull	r1, r2, r2, r3
 800209c:	0ad2      	lsrs	r2, r2, #11
 800209e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020a2:	fb01 f202 	mul.w	r2, r1, r2
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 80020aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <sec2str+0x120>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 80020b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b8:	4b2b      	ldr	r3, [pc, #172]	; (8002168 <sec2str+0x120>)
 80020ba:	fba3 1302 	umull	r1, r3, r3, r2
 80020be:	0959      	lsrs	r1, r3, #5
 80020c0:	460b      	mov	r3, r1
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a5b      	subs	r3, r3, r1
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	9301      	str	r3, [sp, #4]
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020d8:	4924      	ldr	r1, [pc, #144]	; (800216c <sec2str+0x124>)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f00a fff4 	bl	800d0c8 <siprintf>
 80020e0:	6378      	str	r0, [r7, #52]	; 0x34
 80020e2:	e034      	b.n	800214e <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2200      	movs	r2, #0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4820      	ldr	r0, [pc, #128]	; (8002170 <sec2str+0x128>)
 80020ee:	f004 fc4f 	bl	8006990 <HAL_RTC_GetDate>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <sec2str+0xc0>
 80020f8:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <sec2str+0x12c>)
 80020fa:	881b      	ldrh	r3, [r3, #0]
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	b29a      	uxth	r2, r3
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <sec2str+0x12c>)
 8002104:	801a      	strh	r2, [r3, #0]
 8002106:	e022      	b.n	800214e <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	4817      	ldr	r0, [pc, #92]	; (8002170 <sec2str+0x128>)
 8002112:	f004 fb5b 	bl	80067cc <HAL_RTC_GetTime>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <sec2str+0xe4>
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <sec2str+0x12c>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	f043 0308 	orr.w	r3, r3, #8
 8002124:	b29a      	uxth	r2, r3
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <sec2str+0x12c>)
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	e010      	b.n	800214e <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 800212c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800212e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002130:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002132:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002134:	7c3b      	ldrb	r3, [r7, #16]
 8002136:	7c7a      	ldrb	r2, [r7, #17]
 8002138:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800213a:	9102      	str	r1, [sp, #8]
 800213c:	9201      	str	r2, [sp, #4]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4623      	mov	r3, r4
 8002142:	4602      	mov	r2, r0
 8002144:	490c      	ldr	r1, [pc, #48]	; (8002178 <sec2str+0x130>)
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f00a ffbe 	bl	800d0c8 <siprintf>
 800214c:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 800214e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002150:	4618      	mov	r0, r3
 8002152:	373c      	adds	r7, #60	; 0x3c
 8002154:	46bd      	mov	sp, r7
 8002156:	bd90      	pop	{r4, r7, pc}
 8002158:	20001364 	.word	0x20001364
 800215c:	c22e4507 	.word	0xc22e4507
 8002160:	00015180 	.word	0x00015180
 8002164:	91a2b3c5 	.word	0x91a2b3c5
 8002168:	88888889 	.word	0x88888889
 800216c:	0800de34 	.word	0x0800de34
 8002170:	2000013c 	.word	0x2000013c
 8002174:	2000034c 	.word	0x2000034c
 8002178:	0800de4c 	.word	0x0800de4c

0800217c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 800217c:	b40e      	push	{r1, r2, r3}
 800217e:	b590      	push	{r4, r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8002188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800218c:	613b      	str	r3, [r7, #16]
int dl = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8002192:	4b27      	ldr	r3, [pc, #156]	; (8002230 <Report+0xb4>)
 8002194:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <Report+0x48>
		dl = sec2str(buf);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ff50 	bl	8002048 <sec2str>
 80021a8:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe f810 	bl	80001d0 <strlen>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a1e      	ldr	r2, [pc, #120]	; (8002234 <Report+0xb8>)
 80021ba:	6810      	ldr	r0, [r2, #0]
 80021bc:	6018      	str	r0, [r3, #0]
		dl += 3;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	3303      	adds	r3, #3
 80021c2:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 80021c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c8:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	18d0      	adds	r0, r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	1ad1      	subs	r1, r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021da:	f00b f8dd 	bl	800d398 <vsniprintf>

	uartRdy = false;
 80021de:	4b16      	ldr	r3, [pc, #88]	; (8002238 <Report+0xbc>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <Report+0xc0>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7fd fff1 	bl	80001d0 <strlen>
 80021ee:	4603      	mov	r3, r0
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	461a      	mov	r2, r3
 80021f4:	68f9      	ldr	r1, [r7, #12]
 80021f6:	4620      	mov	r0, r4
 80021f8:	f005 fec6 	bl	8007f88 <HAL_UART_Transmit_DMA>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <Report+0x94>
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <Report+0xc4>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	b29a      	uxth	r2, r3
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <Report+0xc4>)
 800220e:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002210:	bf00      	nop
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <Report+0xbc>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f8      	bne.n	8002212 <Report+0x96>

	va_end(args);

	return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800222c:	b003      	add	sp, #12
 800222e:	4770      	bx	lr
 8002230:	20000360 	.word	0x20000360
 8002234:	0800de68 	.word	0x0800de68
 8002238:	20000060 	.word	0x20000060
 800223c:	20000070 	.word	0x20000070
 8002240:	2000034c 	.word	0x2000034c

08002244 <showBuf>:
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08e      	sub	sp, #56	; 0x38
 8002248:	af02      	add	r7, sp, #8
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	607b      	str	r3, [r7, #4]
 800224e:	4603      	mov	r3, r0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	460b      	mov	r3, r1
 8002254:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002256:	2320      	movs	r3, #32
 8002258:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d10e      	bne.n	8002286 <showBuf+0x42>
		if (rd) {
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d009      	beq.n	8002282 <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 800226e:	4b4a      	ldr	r3, [pc, #296]	; (8002398 <showBuf+0x154>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	4013      	ands	r3, r2
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 800227a:	4b47      	ldr	r3, [pc, #284]	; (8002398 <showBuf+0x154>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002280:	e001      	b.n	8002286 <showBuf+0x42>
		} else ind = max_ind;
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 8002286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	429a      	cmp	r2, r3
 800228c:	d271      	bcs.n	8002372 <showBuf+0x12e>
		bool done = false;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002294:	2300      	movs	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80022aa:	fb01 f202 	mul.w	r2, r1, r2
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <showBuf+0x76>
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	3301      	adds	r3, #1
 80022b8:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <showBuf+0x158>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
		while (!done) {
 80022c0:	e046      	b.n	8002350 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 80022c2:	4836      	ldr	r0, [pc, #216]	; (800239c <showBuf+0x158>)
 80022c4:	f7fd ff84 	bl	80001d0 <strlen>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a34      	ldr	r2, [pc, #208]	; (800239c <showBuf+0x158>)
 80022cc:	4413      	add	r3, r2
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	4933      	ldr	r1, [pc, #204]	; (80023a0 <showBuf+0x15c>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00a fef8 	bl	800d0c8 <siprintf>
			for (int i = 0; i < step; i++) {
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e01d      	b.n	800231a <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 80022de:	482f      	ldr	r0, [pc, #188]	; (800239c <showBuf+0x158>)
 80022e0:	f7fd ff76 	bl	80001d0 <strlen>
 80022e4:	4603      	mov	r3, r0
 80022e6:	4a2d      	ldr	r2, [pc, #180]	; (800239c <showBuf+0x158>)
 80022e8:	1898      	adds	r0, r3, r2
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	4413      	add	r3, r2
 80022f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022f2:	4413      	add	r3, r2
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	492a      	ldr	r1, [pc, #168]	; (80023a4 <showBuf+0x160>)
 80022fa:	f00a fee5 	bl	800d0c8 <siprintf>
				ix++;
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	3301      	adds	r3, #1
 8002302:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002304:	6a3a      	ldr	r2, [r7, #32]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d103      	bne.n	8002314 <showBuf+0xd0>
					done = true;
 800230c:	2301      	movs	r3, #1
 800230e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002312:	e006      	b.n	8002322 <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	3301      	adds	r3, #1
 8002318:	61bb      	str	r3, [r7, #24]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	429a      	cmp	r2, r3
 8002320:	dbdd      	blt.n	80022de <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 8002322:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <showBuf+0x164>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4619      	mov	r1, r3
 8002328:	481c      	ldr	r0, [pc, #112]	; (800239c <showBuf+0x158>)
 800232a:	f00a ff30 	bl	800d18e <strcat>
			adr += step;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4413      	add	r3, r2
 8002334:	60bb      	str	r3, [r7, #8]
			ind += step;
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233a:	4413      	add	r3, r2
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3b01      	subs	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d102      	bne.n	8002350 <showBuf+0x10c>
 800234a:	2301      	movs	r3, #1
 800234c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1b1      	bne.n	80022c2 <showBuf+0x7e>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <showBuf+0x168>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d014      	beq.n	8002390 <showBuf+0x14c>
 8002366:	4a0d      	ldr	r2, [pc, #52]	; (800239c <showBuf+0x158>)
 8002368:	4911      	ldr	r1, [pc, #68]	; (80023b0 <showBuf+0x16c>)
 800236a:	2000      	movs	r0, #0
 800236c:	f7ff ff06 	bl	800217c <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002370:	e00e      	b.n	8002390 <showBuf+0x14c>
		if (dbg != logOff) Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <showBuf+0x168>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00a      	beq.n	8002390 <showBuf+0x14c>
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <showBuf+0x164>)
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002388:	490a      	ldr	r1, [pc, #40]	; (80023b4 <showBuf+0x170>)
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff fef6 	bl	800217c <Report>
}
 8002390:	bf00      	nop
 8002392:	3730      	adds	r7, #48	; 0x30
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20001390 	.word	0x20001390
 800239c:	200023ac 	.word	0x200023ac
 80023a0:	0800de6c 	.word	0x0800de6c
 80023a4:	0800de74 	.word	0x0800de74
 80023a8:	20000004 	.word	0x20000004
 80023ac:	20000062 	.word	0x20000062
 80023b0:	0800de7c 	.word	0x0800de7c
 80023b4:	0800de80 	.word	0x0800de80

080023b8 <HAL_UART_RxCpltCallback>:
//-------------------------------------------------------------------------------------------
//                        CallBack Functions
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b090      	sub	sp, #64	; 0x40
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4aad      	ldr	r2, [pc, #692]	; (800267c <HAL_UART_RxCpltCallback+0x2c4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	f040 826f 	bne.w	80028aa <HAL_UART_RxCpltCallback+0x4f2>

		rxBuf[ruk++] = (char)rxByte;
 80023cc:	4bac      	ldr	r3, [pc, #688]	; (8002680 <HAL_UART_RxCpltCallback+0x2c8>)
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	b291      	uxth	r1, r2
 80023d4:	4aaa      	ldr	r2, [pc, #680]	; (8002680 <HAL_UART_RxCpltCallback+0x2c8>)
 80023d6:	8011      	strh	r1, [r2, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4baa      	ldr	r3, [pc, #680]	; (8002684 <HAL_UART_RxCpltCallback+0x2cc>)
 80023dc:	7819      	ldrb	r1, [r3, #0]
 80023de:	4baa      	ldr	r3, [pc, #680]	; (8002688 <HAL_UART_RxCpltCallback+0x2d0>)
 80023e0:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 80023e2:	4ba8      	ldr	r3, [pc, #672]	; (8002684 <HAL_UART_RxCpltCallback+0x2cc>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	f040 825a 	bne.w	80028a0 <HAL_UART_RxCpltCallback+0x4e8>
			rxBuf[--ruk] = '\0';
 80023ec:	4ba4      	ldr	r3, [pc, #656]	; (8002680 <HAL_UART_RxCpltCallback+0x2c8>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4ba2      	ldr	r3, [pc, #648]	; (8002680 <HAL_UART_RxCpltCallback+0x2c8>)
 80023f6:	801a      	strh	r2, [r3, #0]
 80023f8:	4ba1      	ldr	r3, [pc, #644]	; (8002680 <HAL_UART_RxCpltCallback+0x2c8>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4ba2      	ldr	r3, [pc, #648]	; (8002688 <HAL_UART_RxCpltCallback+0x2d0>)
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002404:	2300      	movs	r3, #0
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8002408:	2300      	movs	r3, #0
 800240a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 800240e:	4b9f      	ldr	r3, [pc, #636]	; (800268c <HAL_UART_RxCpltCallback+0x2d4>)
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002414:	2300      	movs	r3, #0
 8002416:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
			if (strlen(rxBuf) >= 4) {
 800241e:	489a      	ldr	r0, [pc, #616]	; (8002688 <HAL_UART_RxCpltCallback+0x2d0>)
 8002420:	f7fd fed6 	bl	80001d0 <strlen>
 8002424:	4603      	mov	r3, r0
 8002426:	2b03      	cmp	r3, #3
 8002428:	f240 8210 	bls.w	800284c <HAL_UART_RxCpltCallback+0x494>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 800242c:	2300      	movs	r3, #0
 800242e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002432:	e018      	b.n	8002466 <HAL_UART_RxCpltCallback+0xae>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8002434:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8002438:	4a95      	ldr	r2, [pc, #596]	; (8002690 <HAL_UART_RxCpltCallback+0x2d8>)
 800243a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243e:	4619      	mov	r1, r3
 8002440:	4891      	ldr	r0, [pc, #580]	; (8002688 <HAL_UART_RxCpltCallback+0x2d0>)
 8002442:	f00a fedb 	bl	800d1fc <strstr>
 8002446:	63f8      	str	r0, [r7, #60]	; 0x3c
 8002448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_UART_RxCpltCallback+0xa0>
														  //"erase:"
														  //"check:"
														  //"log:"
														  //"info"
						  	  	  	  	  	  	  	  	  //"help"
						idx = i;
 800244e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8002452:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8002456:	e00a      	b.n	800246e <HAL_UART_RxCpltCallback+0xb6>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002458:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800245c:	b2db      	uxtb	r3, r3
 800245e:	3301      	adds	r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8002466:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 800246a:	2b0a      	cmp	r3, #10
 800246c:	dde2      	ble.n	8002434 <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 800246e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002470:	4a85      	ldr	r2, [pc, #532]	; (8002688 <HAL_UART_RxCpltCallback+0x2d0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	f040 81ea 	bne.w	800284c <HAL_UART_RxCpltCallback+0x494>
 8002478:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 800247c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002480:	f000 81e4 	beq.w	800284c <HAL_UART_RxCpltCallback+0x494>
					nandLen = MAX_LEN_DATA;//256;
 8002484:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_UART_RxCpltCallback+0x2dc>)
 8002486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800248a:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 800248c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002490:	4a7f      	ldr	r2, [pc, #508]	; (8002690 <HAL_UART_RxCpltCallback+0x2d8>)
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fd fe9a 	bl	80001d0 <strlen>
 800249c:	4602      	mov	r2, r0
 800249e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a0:	4413      	add	r3, r2
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
 80024a8:	2300      	movs	r3, #0
 80024aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ac:	2300      	movs	r3, #0
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 80024b0:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 80024b4:	2b0a      	cmp	r3, #10
 80024b6:	f200 81a6 	bhi.w	8002806 <HAL_UART_RxCpltCallback+0x44e>
 80024ba:	a201      	add	r2, pc, #4	; (adr r2, 80024c0 <HAL_UART_RxCpltCallback+0x108>)
 80024bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c0:	080024ed 	.word	0x080024ed
 80024c4:	080024f5 	.word	0x080024f5
 80024c8:	0800254d 	.word	0x0800254d
 80024cc:	080025c9 	.word	0x080025c9
 80024d0:	080025e9 	.word	0x080025e9
 80024d4:	08002755 	.word	0x08002755
 80024d8:	0800278b 	.word	0x0800278b
 80024dc:	080027ad 	.word	0x080027ad
 80024e0:	080024ed 	.word	0x080024ed
 80024e4:	080024ed 	.word	0x080024ed
 80024e8:	080024ed 	.word	0x080024ed
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
							cmd_flag = 1;
 80024ec:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_UART_RxCpltCallback+0x2d4>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
						break;
 80024f2:	e188      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 80024f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024f6:	f7fd fe6b 	bl	80001d0 <strlen>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b09      	cmp	r3, #9
 80024fe:	d802      	bhi.n	8002506 <HAL_UART_RxCpltCallback+0x14e>
								qcmd.attr = 1;
 8002500:	2301      	movs	r3, #1
 8002502:	777b      	strb	r3, [r7, #29]
 8002504:	e01e      	b.n	8002544 <HAL_UART_RxCpltCallback+0x18c>
							} else {
								uki = strchr(uk, ':');
 8002506:	213a      	movs	r1, #58	; 0x3a
 8002508:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800250a:	f00a fe4f 	bl	800d1ac <strchr>
 800250e:	6378      	str	r0, [r7, #52]	; 0x34
								if (uki) {
 8002510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00c      	beq.n	8002530 <HAL_UART_RxCpltCallback+0x178>
									tZone = (uint8_t)atol(uki + 1);
 8002516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002518:	3301      	adds	r3, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f009 ff82 	bl	800c424 <atol>
 8002520:	4603      	mov	r3, r0
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b5c      	ldr	r3, [pc, #368]	; (8002698 <HAL_UART_RxCpltCallback+0x2e0>)
 8002526:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e002      	b.n	8002536 <HAL_UART_RxCpltCallback+0x17e>
								} else {
									tZone = 0;
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <HAL_UART_RxCpltCallback+0x2e0>)
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002536:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002538:	f009 ff74 	bl	800c424 <atol>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_UART_RxCpltCallback+0x2e4>)
 8002542:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002544:	4b51      	ldr	r3, [pc, #324]	; (800268c <HAL_UART_RxCpltCallback+0x2d4>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
						break;
 800254a:	e15c      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 800254c:	213a      	movs	r1, #58	; 0x3a
 800254e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002550:	f00a fe2c 	bl	800d1ac <strchr>
 8002554:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8002556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <HAL_UART_RxCpltCallback+0x1bc>
								nandLen = atol(uki + 1);
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	4618      	mov	r0, r3
 8002562:	f009 ff5f 	bl	800c424 <atol>
 8002566:	4603      	mov	r3, r0
 8002568:	b29a      	uxth	r2, r3
 800256a:	4b4a      	ldr	r3, [pc, #296]	; (8002694 <HAL_UART_RxCpltCallback+0x2dc>)
 800256c:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 800256e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002574:	494a      	ldr	r1, [pc, #296]	; (80026a0 <HAL_UART_RxCpltCallback+0x2e8>)
 8002576:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002578:	f00a fe40 	bl	800d1fc <strstr>
 800257c:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 800257e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00f      	beq.n	80025a4 <HAL_UART_RxCpltCallback+0x1ec>
								uki += 2;
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	3302      	adds	r3, #2
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 800258a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800258c:	f7fd fe20 	bl	80001d0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	4619      	mov	r1, r3
 8002596:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002598:	f7ff fbb4 	bl	8001d04 <hex2bin>
 800259c:	4603      	mov	r3, r0
 800259e:	4a41      	ldr	r2, [pc, #260]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e006      	b.n	80025b2 <HAL_UART_RxCpltCallback+0x1fa>
							} else {
								nandAdr = atol(uk);
 80025a4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025a6:	f009 ff3d 	bl	800c424 <atol>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025b0:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 80025b2:	4b3c      	ldr	r3, [pc, #240]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <HAL_UART_RxCpltCallback+0x2f0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4413      	add	r3, r2
 80025bc:	4a39      	ldr	r2, [pc, #228]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025be:	6013      	str	r3, [r2, #0]
							check = true;
 80025c0:	2301      	movs	r3, #1
 80025c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80025c6:	e11e      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						case cmdNext://"next";
							//if (nandAdr < devAdr) nandAdr = devAdr;
							nandLen = 512;
 80025c8:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_UART_RxCpltCallback+0x2dc>)
 80025ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ce:	801a      	strh	r2, [r3, #0]
							nandAdr += nandLen;
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_UART_RxCpltCallback+0x2dc>)
 80025d2:	881b      	ldrh	r3, [r3, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	4b33      	ldr	r3, [pc, #204]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 80025de:	6013      	str	r3, [r2, #0]
							check = true;
 80025e0:	2301      	movs	r3, #1
 80025e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						break;
 80025e6:	e10e      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 80025ee:	492c      	ldr	r1, [pc, #176]	; (80026a0 <HAL_UART_RxCpltCallback+0x2e8>)
 80025f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80025f2:	f00a fe03 	bl	800d1fc <strstr>
 80025f6:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 80025f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_UART_RxCpltCallback+0x25c>
								if (uki == uk) {
 80025fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002602:	429a      	cmp	r2, r3
 8002604:	d108      	bne.n	8002618 <HAL_UART_RxCpltCallback+0x260>
									uki += 2;
 8002606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002608:	3302      	adds	r3, #2
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 800260c:	2301      	movs	r3, #1
 800260e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002612:	e001      	b.n	8002618 <HAL_UART_RxCpltCallback+0x260>
								}
							} else uki = uk;
 8002614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8002618:	213a      	movs	r1, #58	; 0x3a
 800261a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800261c:	f00a fdc6 	bl	800d1ac <strchr>
 8002620:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80eb 	beq.w	8002800 <HAL_UART_RxCpltCallback+0x448>
								ukb = uke + 1;
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	3301      	adds	r3, #1
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	2210      	movs	r2, #16
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f00a f8dd 	bl	800c7f8 <memset>
								memcpy(tmp, uki, uke - uki);
 800263e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	461a      	mov	r2, r3
 8002646:	f107 030c 	add.w	r3, r7, #12
 800264a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800264c:	4618      	mov	r0, r3
 800264e:	f00a f8c5 	bl	800c7dc <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002652:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002656:	2b00      	cmp	r3, #0
 8002658:	d028      	beq.n	80026ac <HAL_UART_RxCpltCallback+0x2f4>
 800265a:	f107 030c 	add.w	r3, r7, #12
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd fdb6 	bl	80001d0 <strlen>
 8002664:	4603      	mov	r3, r0
 8002666:	b2da      	uxtb	r2, r3
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff fb48 	bl	8001d04 <hex2bin>
 8002674:	4603      	mov	r3, r0
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <HAL_UART_RxCpltCallback+0x2ec>)
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e020      	b.n	80026be <HAL_UART_RxCpltCallback+0x306>
 800267c:	40004800 	.word	0x40004800
 8002680:	20001362 	.word	0x20001362
 8002684:	20001360 	.word	0x20001360
 8002688:	20000b60 	.word	0x20000b60
 800268c:	2000034e 	.word	0x2000034e
 8002690:	20000008 	.word	0x20000008
 8002694:	20001378 	.word	0x20001378
 8002698:	20001365 	.word	0x20001365
 800269c:	20000064 	.word	0x20000064
 80026a0:	0800dea8 	.word	0x0800dea8
 80026a4:	20001374 	.word	0x20001374
 80026a8:	20001370 	.word	0x20001370
								    else nandAdr = atol(tmp);
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	4618      	mov	r0, r3
 80026b2:	f009 feb7 	bl	800c424 <atol>
 80026b6:	4603      	mov	r3, r0
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b7e      	ldr	r3, [pc, #504]	; (80028b4 <HAL_UART_RxCpltCallback+0x4fc>)
 80026bc:	601a      	str	r2, [r3, #0]
								uki = ukb;
 80026be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c0:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 80026c2:	213a      	movs	r1, #58	; 0x3a
 80026c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80026c6:	f00a fd71 	bl	800d1ac <strchr>
 80026ca:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_UART_RxCpltCallback+0x332>
									nandLen = atol(uke + 1);
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	3301      	adds	r3, #1
 80026d6:	4618      	mov	r0, r3
 80026d8:	f009 fea4 	bl	800c424 <atol>
 80026dc:	4603      	mov	r3, r0
 80026de:	b29a      	uxth	r2, r3
 80026e0:	4b75      	ldr	r3, [pc, #468]	; (80028b8 <HAL_UART_RxCpltCallback+0x500>)
 80026e2:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 80026ea:	4974      	ldr	r1, [pc, #464]	; (80028bc <HAL_UART_RxCpltCallback+0x504>)
 80026ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026ee:	f00a fd85 	bl	800d1fc <strstr>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d006      	beq.n	8002706 <HAL_UART_RxCpltCallback+0x34e>
									ukb += 2;
 80026f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fa:	3302      	adds	r3, #2
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002704:	e002      	b.n	800270c <HAL_UART_RxCpltCallback+0x354>
								} else hex = false;
 8002706:	2300      	movs	r3, #0
 8002708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 800270c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00d      	beq.n	8002730 <HAL_UART_RxCpltCallback+0x378>
 8002714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002716:	f7fd fd5b 	bl	80001d0 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	4619      	mov	r1, r3
 8002720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002722:	f7ff faef 	bl	8001d04 <hex2bin>
 8002726:	4603      	mov	r3, r0
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4b65      	ldr	r3, [pc, #404]	; (80028c0 <HAL_UART_RxCpltCallback+0x508>)
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e006      	b.n	800273e <HAL_UART_RxCpltCallback+0x386>
								    else nandByte = (uint8_t)atol(ukb);
 8002730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002732:	f009 fe77 	bl	800c424 <atol>
 8002736:	4603      	mov	r3, r0
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_UART_RxCpltCallback+0x508>)
 800273c:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_UART_RxCpltCallback+0x4fc>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	4b60      	ldr	r3, [pc, #384]	; (80028c4 <HAL_UART_RxCpltCallback+0x50c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4413      	add	r3, r2
 8002748:	4a5a      	ldr	r2, [pc, #360]	; (80028b4 <HAL_UART_RxCpltCallback+0x4fc>)
 800274a:	6013      	str	r3, [r2, #0]
								check = true;
 800274c:	2301      	movs	r3, #1
 800274e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							}
						}
						break;
 8002752:	e055      	b.n	8002800 <HAL_UART_RxCpltCallback+0x448>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002754:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_UART_RxCpltCallback+0x510>)
 8002756:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002758:	f00a fd50 	bl	800d1fc <strstr>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_UART_RxCpltCallback+0x3b0>
								qcmd.attr = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	777b      	strb	r3, [r7, #29]
 8002766:	e00c      	b.n	8002782 <HAL_UART_RxCpltCallback+0x3ca>
							} else {
								uint32_t blk = atol(uk);
 8002768:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800276a:	f009 fe5b 	bl	800c424 <atol>
 800276e:	4603      	mov	r3, r0
 8002770:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002772:	4b56      	ldr	r3, [pc, #344]	; (80028cc <HAL_UART_RxCpltCallback+0x514>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	6a3a      	ldr	r2, [r7, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	d202      	bcs.n	8002782 <HAL_UART_RxCpltCallback+0x3ca>
 800277c:	4a54      	ldr	r2, [pc, #336]	; (80028d0 <HAL_UART_RxCpltCallback+0x518>)
 800277e:	6a3b      	ldr	r3, [r7, #32]
 8002780:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002782:	4b54      	ldr	r3, [pc, #336]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 8002784:	2201      	movs	r2, #1
 8002786:	701a      	strb	r2, [r3, #0]
						break;
 8002788:	e03d      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 800278a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800278c:	f009 fe4a 	bl	800c424 <atol>
 8002790:	4603      	mov	r3, r0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < total_pages) {//128MB / 2K = 65536 - pages
 8002794:	4b50      	ldr	r3, [pc, #320]	; (80028d8 <HAL_UART_RxCpltCallback+0x520>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279a:	429a      	cmp	r2, r3
 800279c:	d232      	bcs.n	8002804 <HAL_UART_RxCpltCallback+0x44c>
								nandPage = page;
 800279e:	4a4f      	ldr	r2, [pc, #316]	; (80028dc <HAL_UART_RxCpltCallback+0x524>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 80027a4:	4b4b      	ldr	r3, [pc, #300]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 80027aa:	e02b      	b.n	8002804 <HAL_UART_RxCpltCallback+0x44c>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 80027ac:	2303      	movs	r3, #3
 80027ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							if (strstr(uk, "off")) {
 80027b2:	494b      	ldr	r1, [pc, #300]	; (80028e0 <HAL_UART_RxCpltCallback+0x528>)
 80027b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027b6:	f00a fd21 	bl	800d1fc <strstr>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_UART_RxCpltCallback+0x410>
								lg = logOff;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80027c6:	e014      	b.n	80027f2 <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "on")) {
 80027c8:	4946      	ldr	r1, [pc, #280]	; (80028e4 <HAL_UART_RxCpltCallback+0x52c>)
 80027ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027cc:	f00a fd16 	bl	800d1fc <strstr>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_UART_RxCpltCallback+0x426>
								lg = logOn;
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80027dc:	e009      	b.n	80027f2 <HAL_UART_RxCpltCallback+0x43a>
							} else if (strstr(uk, "dump")) {
 80027de:	4942      	ldr	r1, [pc, #264]	; (80028e8 <HAL_UART_RxCpltCallback+0x530>)
 80027e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027e2:	f00a fd0b 	bl	800d1fc <strstr>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_UART_RxCpltCallback+0x43a>
								lg = logDump;
 80027ec:	2302      	movs	r3, #2
 80027ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							}
							qcmd.attr = lg;
 80027f2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027f6:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 80027f8:	4b36      	ldr	r3, [pc, #216]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
						}
						break;
 80027fe:	e002      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002800:	bf00      	nop
 8002802:	e000      	b.n	8002806 <HAL_UART_RxCpltCallback+0x44e>
						break;
 8002804:	bf00      	nop
					}
					qcmd.cmd = idx;
 8002806:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800280a:	773b      	strb	r3, [r7, #28]
					if (check) {
 800280c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01b      	beq.n	800284c <HAL_UART_RxCpltCallback+0x494>
						if ((nandAdr + nandLen) >= (total_bytes + devAdr)) {
 8002814:	4b28      	ldr	r3, [pc, #160]	; (80028b8 <HAL_UART_RxCpltCallback+0x500>)
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <HAL_UART_RxCpltCallback+0x4fc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	441a      	add	r2, r3
 8002820:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_UART_RxCpltCallback+0x534>)
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_UART_RxCpltCallback+0x50c>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	440b      	add	r3, r1
 800282a:	429a      	cmp	r2, r3
 800282c:	d30b      	bcc.n	8002846 <HAL_UART_RxCpltCallback+0x48e>
							nandLen = total_bytes - nandAdr - 1;
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_UART_RxCpltCallback+0x534>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <HAL_UART_RxCpltCallback+0x4fc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b29b      	uxth	r3, r3
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	b29b      	uxth	r3, r3
 800283e:	3b01      	subs	r3, #1
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_UART_RxCpltCallback+0x500>)
 8002844:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 8002846:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
					}
					*/
				}

			}
			if (idx == -1) {
 800284c:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002854:	d104      	bne.n	8002860 <HAL_UART_RxCpltCallback+0x4a8>
				qcmd.cmd = cmdErr;
 8002856:	230b      	movs	r3, #11
 8002858:	773b      	strb	r3, [r7, #28]
				cmd_flag = 1;
 800285a:	4b1e      	ldr	r3, [pc, #120]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
			}
			if (cmd_flag) {
 8002860:	4b1c      	ldr	r3, [pc, #112]	; (80028d4 <HAL_UART_RxCpltCallback+0x51c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_UART_RxCpltCallback+0x4dc>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_UART_RxCpltCallback+0x538>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f107 011c 	add.w	r1, r7, #28
 8002870:	2300      	movs	r3, #0
 8002872:	2205      	movs	r2, #5
 8002874:	f006 feda 	bl	800962c <osMessageQueuePut>
 8002878:	4603      	mov	r3, r0
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_UART_RxCpltCallback+0x53c>)
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_UART_RxCpltCallback+0x53c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d006      	beq.n	8002894 <HAL_UART_RxCpltCallback+0x4dc>
 8002886:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <HAL_UART_RxCpltCallback+0x540>)
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800288e:	b29a      	uxth	r2, r3
 8002890:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_UART_RxCpltCallback+0x540>)
 8002892:	801a      	strh	r2, [r3, #0]
			}

			ruk = 0;
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_UART_RxCpltCallback+0x544>)
 8002896:	2200      	movs	r2, #0
 8002898:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <HAL_UART_RxCpltCallback+0x548>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 80028a0:	2201      	movs	r2, #1
 80028a2:	4918      	ldr	r1, [pc, #96]	; (8002904 <HAL_UART_RxCpltCallback+0x54c>)
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 fb3e 	bl	8007f26 <HAL_UART_Receive_IT>
	}
}
 80028aa:	bf00      	nop
 80028ac:	3740      	adds	r7, #64	; 0x40
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20001374 	.word	0x20001374
 80028b8:	20001378 	.word	0x20001378
 80028bc:	0800dea8 	.word	0x0800dea8
 80028c0:	20000080 	.word	0x20000080
 80028c4:	20001370 	.word	0x20001370
 80028c8:	0800deac 	.word	0x0800deac
 80028cc:	20001390 	.word	0x20001390
 80028d0:	2000137c 	.word	0x2000137c
 80028d4:	2000034e 	.word	0x2000034e
 80028d8:	20001368 	.word	0x20001368
 80028dc:	20001380 	.word	0x20001380
 80028e0:	0800deb0 	.word	0x0800deb0
 80028e4:	0800deb4 	.word	0x0800deb4
 80028e8:	0800deb8 	.word	0x0800deb8
 80028ec:	2000136c 	.word	0x2000136c
 80028f0:	20000344 	.word	0x20000344
 80028f4:	200023a8 	.word	0x200023a8
 80028f8:	2000034c 	.word	0x2000034c
 80028fc:	20001362 	.word	0x20001362
 8002900:	20000b60 	.word	0x20000b60
 8002904:	20001360 	.word	0x20001360

08002908 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a05      	ldr	r2, [pc, #20]	; (800292c <HAL_UART_TxCpltCallback+0x24>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d102      	bne.n	8002920 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 800291a:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_UART_TxCpltCallback+0x28>)
 800291c:	2201      	movs	r2, #1
 800291e:	701a      	strb	r2, [r3, #0]
	}
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	40004800 	.word	0x40004800
 8002930:	20000060 	.word	0x20000060

08002934 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a05      	ldr	r2, [pc, #20]	; (8002958 <HAL_SPI_TxCpltCallback+0x24>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d102      	bne.n	800294c <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <HAL_SPI_TxCpltCallback+0x28>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
	}
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40013000 	.word	0x40013000
 800295c:	20000061 	.word	0x20000061

08002960 <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 8002968:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_NAND_ITCallback+0x20>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_NAND_ITCallback+0x20>)
 8002970:	6013      	str	r3, [r2, #0]
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	20001384 	.word	0x20001384
 8002984:	00000000 	.word	0x00000000

08002988 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298a:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 800298e:	af06      	add	r7, sp, #24
 8002990:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002994:	f2a3 4384 	subw	r3, r3, #1156	; 0x484
 8002998:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 800299a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800299e:	f002 f803 	bl	80049a8 <HAL_Delay>
	if (dbg != logOff) {
 80029a2:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <defThread+0x170>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d018      	beq.n	80029dc <defThread+0x54>
		Report(0, "%s", eol);
 80029aa:	4b54      	ldr	r3, [pc, #336]	; (8002afc <defThread+0x174>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4953      	ldr	r1, [pc, #332]	; (8002b00 <defThread+0x178>)
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fbe2 	bl	800217c <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 80029b8:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <defThread+0x17c>)
 80029ba:	681c      	ldr	r4, [r3, #0]
 80029bc:	f009 fc02 	bl	800c1c4 <xPortGetFreeHeapSize>
 80029c0:	4602      	mov	r2, r0
 80029c2:	4b4e      	ldr	r3, [pc, #312]	; (8002afc <defThread+0x174>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	9302      	str	r3, [sp, #8]
 80029c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	9200      	str	r2, [sp, #0]
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <defThread+0x180>)
 80029d2:	4622      	mov	r2, r4
 80029d4:	494d      	ldr	r1, [pc, #308]	; (8002b0c <defThread+0x184>)
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff fbd0 	bl	800217c <Report>
	}

	uint8_t byte = logOff;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
	uint8_t next_block_erase = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
	bool readed = false;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
	char cid[32];
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize ) / 1024;
 80029f4:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <defThread+0x188>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a45      	ldr	r2, [pc, #276]	; (8002b10 <defThread+0x188>)
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	0a9b      	lsrs	r3, r3, #10
 8002a02:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	uint32_t PlaneSizeMB = chipConf.PlaneSize / 1024 / 1024;
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <defThread+0x188>)
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	0d1b      	lsrs	r3, r3, #20
 8002a0c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 8002a10:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <defThread+0x18c>)
 8002a12:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	if (nandState == HAL_NAND_STATE_READY) {
 8002a16:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <defThread+0x190>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	f040 8090 	bne.w	8002b40 <defThread+0x1b8>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 8002a20:	4b3c      	ldr	r3, [pc, #240]	; (8002b14 <defThread+0x18c>)
 8002a22:	785b      	ldrb	r3, [r3, #1]
 8002a24:	22f1      	movs	r2, #241	; 0xf1
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d108      	bne.n	8002a3c <defThread+0xb4>
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <defThread+0x194>)
 8002a2c:	6819      	ldr	r1, [r3, #0]
 8002a2e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002a32:	2220      	movs	r2, #32
 8002a34:	4618      	mov	r0, r3
 8002a36:	f00a fbce 	bl	800d1d6 <strncpy>
 8002a3a:	e006      	b.n	8002a4a <defThread+0xc2>
		                               else strcpy(cid, "UNKNOWN");
 8002a3c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002a40:	4a37      	ldr	r2, [pc, #220]	; (8002b20 <defThread+0x198>)
 8002a42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a46:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 8002a4a:	4b36      	ldr	r3, [pc, #216]	; (8002b24 <defThread+0x19c>)
 8002a4c:	4a36      	ldr	r2, [pc, #216]	; (8002b28 <defThread+0x1a0>)
 8002a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a52:	6018      	str	r0, [r3, #0]
 8002a54:	3304      	adds	r3, #4
 8002a56:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3479 	strb.w	r3, [r7, #1145]	; 0x479
 8002a5e:	e016      	b.n	8002a8e <defThread+0x106>
 8002a60:	4830      	ldr	r0, [pc, #192]	; (8002b24 <defThread+0x19c>)
 8002a62:	f7fd fbb5 	bl	80001d0 <strlen>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4a2e      	ldr	r2, [pc, #184]	; (8002b24 <defThread+0x19c>)
 8002a6a:	1898      	adds	r0, r3, r2
 8002a6c:	f997 3479 	ldrsb.w	r3, [r7, #1145]	; 0x479
 8002a70:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	492c      	ldr	r1, [pc, #176]	; (8002b2c <defThread+0x1a4>)
 8002a7c:	f00a fb24 	bl	800d0c8 <siprintf>
 8002a80:	f997 3479 	ldrsb.w	r3, [r7, #1145]	; 0x479
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3301      	adds	r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	f887 3479 	strb.w	r3, [r7, #1145]	; 0x479
 8002a8e:	f897 3479 	ldrb.w	r3, [r7, #1145]	; 0x479
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d9e4      	bls.n	8002a60 <defThread+0xd8>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8002a96:	4823      	ldr	r0, [pc, #140]	; (8002b24 <defThread+0x19c>)
 8002a98:	f7fd fb9a 	bl	80001d0 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4a21      	ldr	r2, [pc, #132]	; (8002b24 <defThread+0x19c>)
 8002aa0:	1898      	adds	r0, r3, r2
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <defThread+0x18c>)
 8002aa4:	785b      	ldrb	r3, [r3, #1]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002aac:	4920      	ldr	r1, [pc, #128]	; (8002b30 <defThread+0x1a8>)
 8002aae:	f00a fb0b 	bl	800d0c8 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8002ab2:	481c      	ldr	r0, [pc, #112]	; (8002b24 <defThread+0x19c>)
 8002ab4:	f7fd fb8c 	bl	80001d0 <strlen>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <defThread+0x19c>)
 8002abc:	189c      	adds	r4, r3, r2
 8002abe:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <defThread+0x188>)
 8002ac0:	681d      	ldr	r5, [r3, #0]
 8002ac2:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <defThread+0x188>)
 8002ac4:	685e      	ldr	r6, [r3, #4]
 8002ac6:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <defThread+0x188>)
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <defThread+0x188>)
 8002acc:	6912      	ldr	r2, [r2, #16]
 8002ace:	4919      	ldr	r1, [pc, #100]	; (8002b34 <defThread+0x1ac>)
 8002ad0:	6809      	ldr	r1, [r1, #0]
 8002ad2:	4819      	ldr	r0, [pc, #100]	; (8002b38 <defThread+0x1b0>)
 8002ad4:	6800      	ldr	r0, [r0, #0]
 8002ad6:	9005      	str	r0, [sp, #20]
 8002ad8:	9104      	str	r1, [sp, #16]
 8002ada:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8002ade:	9103      	str	r1, [sp, #12]
 8002ae0:	9202      	str	r2, [sp, #8]
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	4633      	mov	r3, r6
 8002aec:	462a      	mov	r2, r5
 8002aee:	4913      	ldr	r1, [pc, #76]	; (8002b3c <defThread+0x1b4>)
 8002af0:	4620      	mov	r0, r4
 8002af2:	f00a fae9 	bl	800d0c8 <siprintf>
 8002af6:	e030      	b.n	8002b5a <defThread+0x1d2>
 8002af8:	20000062 	.word	0x20000062
 8002afc:	20000004 	.word	0x20000004
 8002b00:	0800de7c 	.word	0x0800de7c
 8002b04:	20000000 	.word	0x20000000
 8002b08:	08011644 	.word	0x08011644
 8002b0c:	0800dec0 	.word	0x0800dec0
 8002b10:	20001390 	.word	0x20001390
 8002b14:	20001388 	.word	0x20001388
 8002b18:	20000081 	.word	0x20000081
 8002b1c:	20000084 	.word	0x20000084
 8002b20:	0800df00 	.word	0x0800df00
 8002b24:	200023ac 	.word	0x200023ac
 8002b28:	0800df08 	.word	0x0800df08
 8002b2c:	0800de74 	.word	0x0800de74
 8002b30:	0800df10 	.word	0x0800df10
 8002b34:	20001368 	.word	0x20001368
 8002b38:	2000136c 	.word	0x2000136c
 8002b3c:	0800df28 	.word	0x0800df28
					chipConf.PlaneNbr,
					PlaneSizeMB,
					total_pages, total_bytes);
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002b40:	4bb1      	ldr	r3, [pc, #708]	; (8002e08 <defThread+0x480>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 8002b48:	4ab0      	ldr	r2, [pc, #704]	; (8002e0c <defThread+0x484>)
 8002b4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b4e:	4bae      	ldr	r3, [pc, #696]	; (8002e08 <defThread+0x480>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	49af      	ldr	r1, [pc, #700]	; (8002e10 <defThread+0x488>)
 8002b54:	48af      	ldr	r0, [pc, #700]	; (8002e14 <defThread+0x48c>)
 8002b56:	f00a fab7 	bl	800d0c8 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8002b5a:	4baf      	ldr	r3, [pc, #700]	; (8002e18 <defThread+0x490>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d006      	beq.n	8002b70 <defThread+0x1e8>
 8002b62:	4bae      	ldr	r3, [pc, #696]	; (8002e1c <defThread+0x494>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4aab      	ldr	r2, [pc, #684]	; (8002e14 <defThread+0x48c>)
 8002b68:	49ad      	ldr	r1, [pc, #692]	; (8002e20 <defThread+0x498>)
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	f7ff fb06 	bl	800217c <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	f8a7 3476 	strh.w	r3, [r7, #1142]	; 0x476
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8002b76:	4bab      	ldr	r3, [pc, #684]	; (8002e24 <defThread+0x49c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	785b      	ldrb	r3, [r3, #1]
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	22ef      	movs	r2, #239	; 0xef
 8002b86:	2100      	movs	r1, #0
 8002b88:	2000      	movs	r0, #0
 8002b8a:	f001 f992 	bl	8003eb2 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 8002b8e:	4ba5      	ldr	r3, [pc, #660]	; (8002e24 <defThread+0x49c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	23ef      	movs	r3, #239	; 0xef
 8002ba4:	22ef      	movs	r2, #239	; 0xef
 8002ba6:	2000      	movs	r0, #0
 8002ba8:	f001 f983 	bl	8003eb2 <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8002bac:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8002bb0:	f107 0318 	add.w	r3, r7, #24
 8002bb4:	499c      	ldr	r1, [pc, #624]	; (8002e28 <defThread+0x4a0>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f00a fa86 	bl	800d0c8 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8002bbc:	4b9b      	ldr	r3, [pc, #620]	; (8002e2c <defThread+0x4a4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	23f0      	movs	r3, #240	; 0xf0
 8002bc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fa7a 	bl	80040cc <mkLineCenter>
	sprintf(screen+strlen(screen),
 8002bd8:	f107 0318 	add.w	r3, r7, #24
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd faf7 	bl	80001d0 <strlen>
 8002be2:	4602      	mov	r2, r0
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	1898      	adds	r0, r3, r2
 8002bea:	4b91      	ldr	r3, [pc, #580]	; (8002e30 <defThread+0x4a8>)
 8002bec:	681c      	ldr	r4, [r3, #0]
 8002bee:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <defThread+0x4a8>)
 8002bf0:	685d      	ldr	r5, [r3, #4]
 8002bf2:	4b8f      	ldr	r3, [pc, #572]	; (8002e30 <defThread+0x4a8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	4a8e      	ldr	r2, [pc, #568]	; (8002e30 <defThread+0x4a8>)
 8002bf8:	6912      	ldr	r2, [r2, #16]
 8002bfa:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 8002bfe:	9103      	str	r1, [sp, #12]
 8002c00:	9202      	str	r2, [sp, #8]
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	462b      	mov	r3, r5
 8002c0c:	4622      	mov	r2, r4
 8002c0e:	4989      	ldr	r1, [pc, #548]	; (8002e34 <defThread+0x4ac>)
 8002c10:	f00a fa5a 	bl	800d0c8 <siprintf>
			chipConf.SpareAreaSize,
			BlockSizeKB,
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			PlaneSizeMB);
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 8002c14:	4b88      	ldr	r3, [pc, #544]	; (8002e38 <defThread+0x4b0>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00e      	beq.n	8002c3a <defThread+0x2b2>
 8002c1c:	f107 0318 	add.w	r3, r7, #24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fad5 	bl	80001d0 <strlen>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f107 0318 	add.w	r3, r7, #24
 8002c2c:	4413      	add	r3, r2
 8002c2e:	4a82      	ldr	r2, [pc, #520]	; (8002e38 <defThread+0x4b0>)
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	4982      	ldr	r1, [pc, #520]	; (8002e3c <defThread+0x4b4>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f00a fa47 	bl	800d0c8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 8002c3a:	4b7c      	ldr	r3, [pc, #496]	; (8002e2c <defThread+0x4a4>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	785b      	ldrb	r3, [r3, #1]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fd99 	bl	8000778 <__aeabi_i2d>
 8002c46:	4604      	mov	r4, r0
 8002c48:	460d      	mov	r5, r1
 8002c4a:	4b78      	ldr	r3, [pc, #480]	; (8002e2c <defThread+0x4a4>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	785b      	ldrb	r3, [r3, #1]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fd91 	bl	8000778 <__aeabi_i2d>
 8002c56:	a36a      	add	r3, pc, #424	; (adr r3, 8002e00 <defThread+0x478>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd fb10 	bl	8000280 <__aeabi_dmul>
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd fc3a 	bl	80004e0 <__adddf3>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd fdea 	bl	800084c <__aeabi_d2uiz>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	b298      	uxth	r0, r3
 8002c7c:	4b6b      	ldr	r3, [pc, #428]	; (8002e2c <defThread+0x4a4>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a6f      	ldr	r2, [pc, #444]	; (8002e40 <defThread+0x4b8>)
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	43d2      	mvns	r2, r2
 8002c86:	b292      	uxth	r2, r2
 8002c88:	496d      	ldr	r1, [pc, #436]	; (8002e40 <defThread+0x4b8>)
 8002c8a:	8809      	ldrh	r1, [r1, #0]
 8002c8c:	f107 0418 	add.w	r4, r7, #24
 8002c90:	9102      	str	r1, [sp, #8]
 8002c92:	9201      	str	r2, [sp, #4]
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	9200      	str	r2, [sp, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4622      	mov	r2, r4
 8002c9c:	4601      	mov	r1, r0
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f001 f9be 	bl	8004020 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f000 ff75 	bl	8003b94 <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 344f 	strb.w	r3, [r7, #1103]	; 0x44f
			}
			Report(1, "%s%s", stx, eol);
		}
	#endif
	#ifdef SET_NAND_TEST
		uint32_t page_size = chipConf.PageSize, pg = 0, i;
 8002cb0:	4b5f      	ldr	r3, [pc, #380]	; (8002e30 <defThread+0x4a8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
		Report(0, "----------------------------------------%s", eol);
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <defThread+0x494>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	495f      	ldr	r1, [pc, #380]	; (8002e44 <defThread+0x4bc>)
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff fa58 	bl	800217c <Report>
		bool ok = true;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
		io_nand_block_erase(pg);
 8002cd2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002cd6:	f7fe fbd5 	bl	8001484 <io_nand_block_erase>
		io_nand_read(pg, rdBuf, page_size, 0);
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8002ce0:	4959      	ldr	r1, [pc, #356]	; (8002e48 <defThread+0x4c0>)
 8002ce2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002ce6:	f7fe fb91 	bl	800140c <io_nand_read>
		for (i = 0; i < page_size; i++) {
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002cf0:	e01a      	b.n	8002d28 <defThread+0x3a0>
			if (rdBuf[i] != EMPTY) {
 8002cf2:	4a55      	ldr	r2, [pc, #340]	; (8002e48 <defThread+0x4c0>)
 8002cf4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002cf8:	4413      	add	r3, r2
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2bff      	cmp	r3, #255	; 0xff
 8002cfe:	d00e      	beq.n	8002d1e <defThread+0x396>
				Report(1, "Error erase block #%u at: %d%s", pg, i, eol);
 8002d00:	4b46      	ldr	r3, [pc, #280]	; (8002e1c <defThread+0x494>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002d0a:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002d0e:	494f      	ldr	r1, [pc, #316]	; (8002e4c <defThread+0x4c4>)
 8002d10:	2001      	movs	r0, #1
 8002d12:	f7ff fa33 	bl	800217c <Report>
				ok = false;
 8002d16:	2300      	movs	r3, #0
 8002d18:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
				break;
 8002d1c:	e00a      	b.n	8002d34 <defThread+0x3ac>
		for (i = 0; i < page_size; i++) {
 8002d1e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002d22:	3301      	adds	r3, #1
 8002d24:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002d28:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002d2c:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d3de      	bcc.n	8002cf2 <defThread+0x36a>
			}
		}
		if (ok) Report(1, "Erase block #%u OK%s----------------------------------------%s", pg, eol, eol);
 8002d34:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <defThread+0x3cc>
 8002d3c:	4b37      	ldr	r3, [pc, #220]	; (8002e1c <defThread+0x494>)
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <defThread+0x494>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002d4c:	4940      	ldr	r1, [pc, #256]	; (8002e50 <defThread+0x4c8>)
 8002d4e:	2001      	movs	r0, #1
 8002d50:	f7ff fa14 	bl	800217c <Report>
		//
		NAND_AddressTypeDef nan;
		for (pg = 0 * page_size; pg < 2 * page_size; pg += page_size) {
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8002d5a:	e118      	b.n	8002f8e <defThread+0x606>
			nan = io_uint32_to_flash_adr(pg);
 8002d5c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002d60:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8002d64:	f8d7 1470 	ldr.w	r1, [r7, #1136]	; 0x470
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fb0f 	bl	800138c <io_uint32_to_flash_adr>
			Report(1, "Test address: %u (page:%u block:%u plane:%u)%s", pg, nan.Page, nan.Block, nan.Plane, eol);
 8002d6e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002d72:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002d7e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8002d82:	889b      	ldrh	r3, [r3, #4]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002d8a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8002d8e:	885b      	ldrh	r3, [r3, #2]
 8002d90:	4619      	mov	r1, r3
 8002d92:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <defThread+0x494>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	9101      	str	r1, [sp, #4]
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002da2:	492c      	ldr	r1, [pc, #176]	; (8002e54 <defThread+0x4cc>)
 8002da4:	2001      	movs	r0, #1
 8002da6:	f7ff f9e9 	bl	800217c <Report>
			for (i = 0; i < page_size; i++) rdBuf[i] = i;
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002db0:	e00d      	b.n	8002dce <defThread+0x446>
 8002db2:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002db6:	b2d9      	uxtb	r1, r3
 8002db8:	4a23      	ldr	r2, [pc, #140]	; (8002e48 <defThread+0x4c0>)
 8002dba:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002dbe:	4413      	add	r3, r2
 8002dc0:	460a      	mov	r2, r1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002dce:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002dd2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d3eb      	bcc.n	8002db2 <defThread+0x42a>

			if (!pageIsEmpty(pg)) io_nand_block_erase(pg);
 8002dda:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002dde:	f7fe fed5 	bl	8001b8c <pageIsEmpty>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <defThread+0x46e>
 8002dee:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002df2:	f7fe fb47 	bl	8001484 <io_nand_block_erase>
			for (i = 0; i < page_size; i++) {
 8002df6:	2300      	movs	r3, #0
 8002df8:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002dfc:	e03a      	b.n	8002e74 <defThread+0x4ec>
 8002dfe:	bf00      	nop
 8002e00:	33333333 	.word	0x33333333
 8002e04:	3feb3333 	.word	0x3feb3333
 8002e08:	20000081 	.word	0x20000081
 8002e0c:	20000088 	.word	0x20000088
 8002e10:	0800dfac 	.word	0x0800dfac
 8002e14:	200023ac 	.word	0x200023ac
 8002e18:	20000062 	.word	0x20000062
 8002e1c:	20000004 	.word	0x20000004
 8002e20:	0800dfcc 	.word	0x0800dfcc
 8002e24:	20000078 	.word	0x20000078
 8002e28:	0800dfd4 	.word	0x0800dfd4
 8002e2c:	2000007c 	.word	0x2000007c
 8002e30:	20001390 	.word	0x20001390
 8002e34:	0800dfe0 	.word	0x0800dfe0
 8002e38:	20001384 	.word	0x20001384
 8002e3c:	0800e03c 	.word	0x0800e03c
 8002e40:	20001366 	.word	0x20001366
 8002e44:	0800e04c 	.word	0x0800e04c
 8002e48:	200013a8 	.word	0x200013a8
 8002e4c:	0800e078 	.word	0x0800e078
 8002e50:	0800e098 	.word	0x0800e098
 8002e54:	0800e0d8 	.word	0x0800e0d8
				rdBuf[i] = i;
 8002e58:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002e5c:	b2d9      	uxtb	r1, r3
 8002e5e:	4aa6      	ldr	r2, [pc, #664]	; (80030f8 <defThread+0x770>)
 8002e60:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002e64:	4413      	add	r3, r2
 8002e66:	460a      	mov	r2, r1
 8002e68:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < page_size; i++) {
 8002e6a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002e6e:	3301      	adds	r3, #1
 8002e70:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002e74:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002e78:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d3eb      	bcc.n	8002e58 <defThread+0x4d0>
				//printf("%#x ", buff[i]);
				//if (i % 16 == 0 && i != 0) printf("\r\n");
			}
			io_nand_write(pg, rdBuf, page_size, 0);
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8002e86:	499c      	ldr	r1, [pc, #624]	; (80030f8 <defThread+0x770>)
 8002e88:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002e8c:	f7fe fadc 	bl	8001448 <io_nand_write>
			if (devError & devNAND) Report(1, "Write page:%lu Error%s", pg, eol);
 8002e90:	4b9a      	ldr	r3, [pc, #616]	; (80030fc <defThread+0x774>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <defThread+0x526>
 8002e9c:	4b98      	ldr	r3, [pc, #608]	; (8003100 <defThread+0x778>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002ea4:	4997      	ldr	r1, [pc, #604]	; (8003104 <defThread+0x77c>)
 8002ea6:	2001      	movs	r0, #1
 8002ea8:	f7ff f968 	bl	800217c <Report>
 8002eac:	e007      	b.n	8002ebe <defThread+0x536>
							   else Report(1, "Write page:%lu OK%s", pg, eol);
 8002eae:	4b94      	ldr	r3, [pc, #592]	; (8003100 <defThread+0x778>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002eb6:	4994      	ldr	r1, [pc, #592]	; (8003108 <defThread+0x780>)
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f7ff f95f 	bl	800217c <Report>

			memset(rdBuf, 0, page_size);
 8002ebe:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	488c      	ldr	r0, [pc, #560]	; (80030f8 <defThread+0x770>)
 8002ec6:	f009 fc97 	bl	800c7f8 <memset>
			io_nand_read(pg, rdBuf, page_size, 0);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8002ed0:	4989      	ldr	r1, [pc, #548]	; (80030f8 <defThread+0x770>)
 8002ed2:	f8d7 0470 	ldr.w	r0, [r7, #1136]	; 0x470
 8002ed6:	f7fe fa99 	bl	800140c <io_nand_read>
			if (devError & devNAND) Report(1, "Read page:%lu Error%s", pg, eol);
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <defThread+0x774>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d008      	beq.n	8002ef8 <defThread+0x570>
 8002ee6:	4b86      	ldr	r3, [pc, #536]	; (8003100 <defThread+0x778>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002eee:	4987      	ldr	r1, [pc, #540]	; (800310c <defThread+0x784>)
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f7ff f943 	bl	800217c <Report>
 8002ef6:	e007      	b.n	8002f08 <defThread+0x580>
							   else Report(1, "Read page:%lu OK%s", pg, eol);
 8002ef8:	4b81      	ldr	r3, [pc, #516]	; (8003100 <defThread+0x778>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002f00:	4983      	ldr	r1, [pc, #524]	; (8003110 <defThread+0x788>)
 8002f02:	2001      	movs	r0, #1
 8002f04:	f7ff f93a 	bl	800217c <Report>

			ok = true;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
			for (i = 0; i < page_size; i++) {
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002f14:	e01e      	b.n	8002f54 <defThread+0x5cc>
				if (rdBuf[i] != i % 256) {
 8002f16:	4a78      	ldr	r2, [pc, #480]	; (80030f8 <defThread+0x770>)
 8002f18:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002f1c:	4413      	add	r3, r2
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d00e      	beq.n	8002f4a <defThread+0x5c2>
					Report(1, " Error read page:%lu at addr:%d%s", pg, i, eol);
 8002f2c:	4b74      	ldr	r3, [pc, #464]	; (8003100 <defThread+0x778>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002f36:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002f3a:	4976      	ldr	r1, [pc, #472]	; (8003114 <defThread+0x78c>)
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff f91d 	bl	800217c <Report>
					ok = false;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 346b 	strb.w	r3, [r7, #1131]	; 0x46b
					break;
 8002f48:	e00a      	b.n	8002f60 <defThread+0x5d8>
			for (i = 0; i < page_size; i++) {
 8002f4a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	; 0x46c
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8002f54:	f8d7 246c 	ldr.w	r2, [r7, #1132]	; 0x46c
 8002f58:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d3da      	bcc.n	8002f16 <defThread+0x58e>
				}
				//printf("%#x ", buff[i]);
				//if (i % 16 == 0 && i != 0) printf("\r\n");
			}
			if (ok) Report(1, "Check page:%lu OK...%s----------------------------------------%s", pg, eol, eol);
 8002f60:	f897 346b 	ldrb.w	r3, [r7, #1131]	; 0x46b
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <defThread+0x5f8>
 8002f68:	4b65      	ldr	r3, [pc, #404]	; (8003100 <defThread+0x778>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b64      	ldr	r3, [pc, #400]	; (8003100 <defThread+0x778>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4613      	mov	r3, r2
 8002f74:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002f78:	4967      	ldr	r1, [pc, #412]	; (8003118 <defThread+0x790>)
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f7ff f8fe 	bl	800217c <Report>
		for (pg = 0 * page_size; pg < 2 * page_size; pg += page_size) {
 8002f80:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002f84:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002f88:	4413      	add	r3, r2
 8002f8a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
 8002f8e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	f8d7 2470 	ldr.w	r2, [r7, #1136]	; 0x470
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	f4ff aedf 	bcc.w	8002d5c <defThread+0x3d4>
		}
	#endif
#endif

	bool loop = true;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
	bool led = false;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
	uint32_t tmr = get_tmr(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f7fe ffce 	bl	8001f4c <get_tmr>
 8002fb0:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464

	s_qcmd qcmd = {0};
 8002fb4:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002fb8:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	801a      	strh	r2, [r3, #0]
	uint8_t prio = 0;
 8002fc0:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8002fc4:	f2a3 437d 	subw	r3, r3, #1149	; 0x47d
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
	osStatus_t qs = osOK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

  /* Infinite loop */

	while (loop) {
 8002fd2:	f000 bc51 	b.w	8003878 <defThread+0xef0>

		if (check_tmr(tmr)) {
 8002fd6:	f8d7 0464 	ldr.w	r0, [r7, #1124]	; 0x464
 8002fda:	f7fe ffc4 	bl	8001f66 <check_tmr>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80ad 	beq.w	8003140 <defThread+0x7b8>
			tmr = get_tmr(1);
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	f7fe ffb0 	bl	8001f4c <get_tmr>
 8002fec:	f8c7 0464 	str.w	r0, [r7, #1124]	; 0x464
			//
			sec2str(screen);
 8002ff0:	f107 0318 	add.w	r3, r7, #24
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff f827 	bl	8002048 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002ffa:	4b48      	ldr	r3, [pc, #288]	; (800311c <defThread+0x794>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	23f0      	movs	r3, #240	; 0xf0
 8003004:	fb93 f3f2 	sdiv	r3, r3, r2
 8003008:	b29a      	uxth	r2, r3
 800300a:	f107 0318 	add.w	r3, r7, #24
 800300e:	4611      	mov	r1, r2
 8003010:	4618      	mov	r0, r3
 8003012:	f001 f85b 	bl	80040cc <mkLineCenter>
 8003016:	4601      	mov	r1, r0
 8003018:	4b40      	ldr	r3, [pc, #256]	; (800311c <defThread+0x794>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8003020:	9202      	str	r2, [sp, #8]
 8003022:	221f      	movs	r2, #31
 8003024:	9201      	str	r2, [sp, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	9200      	str	r2, [sp, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	460a      	mov	r2, r1
 800302e:	2100      	movs	r1, #0
 8003030:	2008      	movs	r0, #8
 8003032:	f000 fff5 	bl	8004020 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8003036:	4b31      	ldr	r3, [pc, #196]	; (80030fc <defThread+0x774>)
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	461a      	mov	r2, r3
 800303c:	f107 0318 	add.w	r3, r7, #24
 8003040:	4937      	ldr	r1, [pc, #220]	; (8003120 <defThread+0x798>)
 8003042:	4618      	mov	r0, r3
 8003044:	f00a f840 	bl	800d0c8 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8003048:	4b2c      	ldr	r3, [pc, #176]	; (80030fc <defThread+0x774>)
 800304a:	881b      	ldrh	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <defThread+0x6d2>
 8003050:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003054:	f8a7 3476 	strh.w	r3, [r7, #1142]	; 0x476
 8003058:	e002      	b.n	8003060 <defThread+0x6d8>
 800305a:	2300      	movs	r3, #0
 800305c:	f8a7 3476 	strh.w	r3, [r7, #1142]	; 0x476
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 8003060:	4b2e      	ldr	r3, [pc, #184]	; (800311c <defThread+0x794>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	b29b      	uxth	r3, r3
 8003068:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800306c:	b29c      	uxth	r4, r3
 800306e:	4b2b      	ldr	r3, [pc, #172]	; (800311c <defThread+0x794>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	23f0      	movs	r3, #240	; 0xf0
 8003078:	fb93 f3f2 	sdiv	r3, r3, r2
 800307c:	b29a      	uxth	r2, r3
 800307e:	f107 0318 	add.w	r3, r7, #24
 8003082:	4611      	mov	r1, r2
 8003084:	4618      	mov	r0, r3
 8003086:	f001 f821 	bl	80040cc <mkLineCenter>
 800308a:	4601      	mov	r1, r0
 800308c:	4b23      	ldr	r3, [pc, #140]	; (800311c <defThread+0x794>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003094:	9202      	str	r2, [sp, #8]
 8003096:	f8b7 2476 	ldrh.w	r2, [r7, #1142]	; 0x476
 800309a:	9201      	str	r2, [sp, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	9200      	str	r2, [sp, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	460a      	mov	r2, r1
 80030a4:	4621      	mov	r1, r4
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 ffba 	bl	8004020 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80030ac:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <defThread+0x79c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d019      	beq.n	80030e8 <defThread+0x760>
				if (qs != qStat) {
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <defThread+0x79c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 80030bc:	429a      	cmp	r2, r3
 80030be:	d013      	beq.n	80030e8 <defThread+0x760>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80030c0:	4b19      	ldr	r3, [pc, #100]	; (8003128 <defThread+0x7a0>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00b      	beq.n	80030e0 <defThread+0x758>
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <defThread+0x79c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe fda5 	bl	8001c1c <get_qStat>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <defThread+0x778>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4914      	ldr	r1, [pc, #80]	; (800312c <defThread+0x7a4>)
 80030da:	2001      	movs	r0, #1
 80030dc:	f7ff f84e 	bl	800217c <Report>
					qs = qStat;
 80030e0:	4b10      	ldr	r3, [pc, #64]	; (8003124 <defThread+0x79c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
				}
			}

			if (devError) led = true; else led = false;
 80030e8:	4b04      	ldr	r3, [pc, #16]	; (80030fc <defThread+0x774>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01f      	beq.n	8003130 <defThread+0x7a8>
 80030f0:	2301      	movs	r3, #1
 80030f2:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
 80030f6:	e01e      	b.n	8003136 <defThread+0x7ae>
 80030f8:	200013a8 	.word	0x200013a8
 80030fc:	2000034c 	.word	0x2000034c
 8003100:	20000004 	.word	0x20000004
 8003104:	0800e108 	.word	0x0800e108
 8003108:	0800e120 	.word	0x0800e120
 800310c:	0800e134 	.word	0x0800e134
 8003110:	0800e14c 	.word	0x0800e14c
 8003114:	0800e160 	.word	0x0800e160
 8003118:	0800e184 	.word	0x0800e184
 800311c:	20000078 	.word	0x20000078
 8003120:	0800e1c8 	.word	0x0800e1c8
 8003124:	200023a8 	.word	0x200023a8
 8003128:	20000062 	.word	0x20000062
 800312c:	0800e1d8 	.word	0x0800e1d8
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3469 	strb.w	r3, [r7, #1129]	; 0x469
			errLedOn(led);
 8003136:	f897 3469 	ldrb.w	r3, [r7, #1129]	; 0x469
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe feb0 	bl	8001ea0 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 8003140:	4bae      	ldr	r3, [pc, #696]	; (80033fc <defThread+0xa74>)
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	f107 020b 	add.w	r2, r7, #11
 8003148:	f107 010c 	add.w	r1, r7, #12
 800314c:	2305      	movs	r3, #5
 800314e:	f006 facd 	bl	80096ec <osMessageQueueGet>
 8003152:	4603      	mov	r3, r0
 8003154:	4aaa      	ldr	r2, [pc, #680]	; (8003400 <defThread+0xa78>)
 8003156:	6013      	str	r3, [r2, #0]
 8003158:	4ba9      	ldr	r3, [pc, #676]	; (8003400 <defThread+0xa78>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d028      	beq.n	80031b2 <defThread+0x82a>
			if (qs != qStat) qs = qStat;
 8003160:	4ba7      	ldr	r3, [pc, #668]	; (8003400 <defThread+0xa78>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003168:	429a      	cmp	r2, r3
 800316a:	d003      	beq.n	8003174 <defThread+0x7ec>
 800316c:	4ba4      	ldr	r3, [pc, #656]	; (8003400 <defThread+0xa78>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
			if (qStat != osErrorTimeout) {
 8003174:	4ba2      	ldr	r3, [pc, #648]	; (8003400 <defThread+0xa78>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f113 0f02 	cmn.w	r3, #2
 800317c:	f000 831c 	beq.w	80037b8 <defThread+0xe30>
				devError |= devQUE;
 8003180:	4ba0      	ldr	r3, [pc, #640]	; (8003404 <defThread+0xa7c>)
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003188:	b29a      	uxth	r2, r3
 800318a:	4b9e      	ldr	r3, [pc, #632]	; (8003404 <defThread+0xa7c>)
 800318c:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800318e:	4b9e      	ldr	r3, [pc, #632]	; (8003408 <defThread+0xa80>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 8310 	beq.w	80037b8 <defThread+0xe30>
 8003198:	4b99      	ldr	r3, [pc, #612]	; (8003400 <defThread+0xa78>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fd3d 	bl	8001c1c <get_qStat>
 80031a2:	4602      	mov	r2, r0
 80031a4:	4b99      	ldr	r3, [pc, #612]	; (800340c <defThread+0xa84>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4999      	ldr	r1, [pc, #612]	; (8003410 <defThread+0xa88>)
 80031aa:	2001      	movs	r0, #1
 80031ac:	f7fe ffe6 	bl	800217c <Report>
 80031b0:	e302      	b.n	80037b8 <defThread+0xe30>
			}
		} else {
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 80031b2:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80031b6:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	461a      	mov	r2, r3
 80031be:	4b95      	ldr	r3, [pc, #596]	; (8003414 <defThread+0xa8c>)
 80031c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031c4:	f107 0318 	add.w	r3, r7, #24
 80031c8:	4993      	ldr	r1, [pc, #588]	; (8003418 <defThread+0xa90>)
 80031ca:	4618      	mov	r0, r3
 80031cc:	f009 ff7c 	bl	800d0c8 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 80031d0:	4b92      	ldr	r3, [pc, #584]	; (800341c <defThread+0xa94>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	785b      	ldrb	r3, [r3, #1]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80031e0:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 80031e2:	4b8e      	ldr	r3, [pc, #568]	; (800341c <defThread+0xa94>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	23f0      	movs	r3, #240	; 0xf0
 80031ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	f107 0318 	add.w	r3, r7, #24
 80031f6:	4611      	mov	r1, r2
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 ff67 	bl	80040cc <mkLineCenter>
 80031fe:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <defThread+0xa94>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2200      	movs	r2, #0
 8003206:	9202      	str	r2, [sp, #8]
 8003208:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800320c:	9201      	str	r2, [sp, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	9200      	str	r2, [sp, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	460a      	mov	r2, r1
 8003216:	4621      	mov	r1, r4
 8003218:	2000      	movs	r0, #0
 800321a:	f000 ff01 	bl	8004020 <ST7789_WriteString>
							   *fntKey,
							   CYAN,
							   BLACK);
			//
			if (dbg > logOn)
 800321e:	4b7a      	ldr	r3, [pc, #488]	; (8003408 <defThread+0xa80>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d91e      	bls.n	8003264 <defThread+0x8dc>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 8003226:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800322a:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8003236:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	4618      	mov	r0, r3
 800323e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8003242:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	4b72      	ldr	r3, [pc, #456]	; (8003414 <defThread+0xa8c>)
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	4a6e      	ldr	r2, [pc, #440]	; (800340c <defThread+0xa84>)
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	9201      	str	r2, [sp, #4]
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4603      	mov	r3, r0
 800325a:	460a      	mov	r2, r1
 800325c:	4970      	ldr	r1, [pc, #448]	; (8003420 <defThread+0xa98>)
 800325e:	2001      	movs	r0, #1
 8003260:	f7fe ff8c 	bl	800217c <Report>
			//
			nand_show = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
			switch (qcmd.cmd) {
 800326a:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 800326e:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0b      	cmp	r3, #11
 8003276:	f200 828d 	bhi.w	8003794 <defThread+0xe0c>
 800327a:	a201      	add	r2, pc, #4	; (adr r2, 8003280 <defThread+0x8f8>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	0800332f 	.word	0x0800332f
 8003284:	08003465 	.word	0x08003465
 8003288:	0800350f 	.word	0x0800350f
 800328c:	0800350f 	.word	0x0800350f
 8003290:	0800365b 	.word	0x0800365b
 8003294:	08003561 	.word	0x08003561
 8003298:	080035f3 	.word	0x080035f3
 800329c:	0800349f 	.word	0x0800349f
 80032a0:	08003337 	.word	0x08003337
 80032a4:	08003315 	.word	0x08003315
 80032a8:	080032c1 	.word	0x080032c1
 80032ac:	080032b1 	.word	0x080032b1
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 80032b0:	4b56      	ldr	r3, [pc, #344]	; (800340c <defThread+0xa84>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	495b      	ldr	r1, [pc, #364]	; (8003424 <defThread+0xa9c>)
 80032b8:	2001      	movs	r0, #1
 80032ba:	f7fe ff5f 	bl	800217c <Report>
				break;
 80032be:	e269      	b.n	8003794 <defThread+0xe0c>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 80032c0:	4b52      	ldr	r3, [pc, #328]	; (800340c <defThread+0xa84>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4958      	ldr	r1, [pc, #352]	; (8003428 <defThread+0xaa0>)
 80032c8:	4858      	ldr	r0, [pc, #352]	; (800342c <defThread+0xaa4>)
 80032ca:	f009 fefd 	bl	800d0c8 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 80032ce:	2300      	movs	r3, #0
 80032d0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80032d4:	e014      	b.n	8003300 <defThread+0x978>
 80032d6:	4855      	ldr	r0, [pc, #340]	; (800342c <defThread+0xaa4>)
 80032d8:	f7fc ff7a 	bl	80001d0 <strlen>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a53      	ldr	r2, [pc, #332]	; (800342c <defThread+0xaa4>)
 80032e0:	1898      	adds	r0, r3, r2
 80032e2:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80032e6:	4a52      	ldr	r2, [pc, #328]	; (8003430 <defThread+0xaa8>)
 80032e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <defThread+0xa84>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4950      	ldr	r1, [pc, #320]	; (8003434 <defThread+0xaac>)
 80032f2:	f009 fee9 	bl	800d0c8 <siprintf>
 80032f6:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80032fa:	3301      	adds	r3, #1
 80032fc:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8003300:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8003304:	2b0a      	cmp	r3, #10
 8003306:	d9e6      	bls.n	80032d6 <defThread+0x94e>
					Report(1, "%s", stx);
 8003308:	4a48      	ldr	r2, [pc, #288]	; (800342c <defThread+0xaa4>)
 800330a:	494b      	ldr	r1, [pc, #300]	; (8003438 <defThread+0xab0>)
 800330c:	2001      	movs	r0, #1
 800330e:	f7fe ff35 	bl	800217c <Report>
				break;
 8003312:	e23f      	b.n	8003794 <defThread+0xe0c>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003314:	f008 ff56 	bl	800c1c4 <xPortGetFreeHeapSize>
 8003318:	4602      	mov	r2, r0
 800331a:	4b3c      	ldr	r3, [pc, #240]	; (800340c <defThread+0xa84>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003324:	4945      	ldr	r1, [pc, #276]	; (800343c <defThread+0xab4>)
 8003326:	2001      	movs	r0, #1
 8003328:	f7fe ff28 	bl	800217c <Report>
				break;
 800332c:	e232      	b.n	8003794 <defThread+0xe0c>
				case cmdRestart:
					loop = false;
 800332e:	2300      	movs	r3, #0
 8003330:	f887 346a 	strb.w	r3, [r7, #1130]	; 0x46a
		  		break;
 8003334:	e22e      	b.n	8003794 <defThread+0xe0c>
				case cmdInfo:
					if (dbg != logOff) {
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <defThread+0xa80>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b00      	cmp	r3, #0
 800333c:	f000 821f 	beq.w	800377e <defThread+0xdf6>
						strcpy(stx, "NAND:");
 8003340:	4b3a      	ldr	r3, [pc, #232]	; (800342c <defThread+0xaa4>)
 8003342:	4a3f      	ldr	r2, [pc, #252]	; (8003440 <defThread+0xab8>)
 8003344:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003348:	6018      	str	r0, [r3, #0]
 800334a:	3304      	adds	r3, #4
 800334c:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 800334e:	2300      	movs	r3, #0
 8003350:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8003354:	e016      	b.n	8003384 <defThread+0x9fc>
 8003356:	4835      	ldr	r0, [pc, #212]	; (800342c <defThread+0xaa4>)
 8003358:	f7fc ff3a 	bl	80001d0 <strlen>
 800335c:	4603      	mov	r3, r0
 800335e:	4a33      	ldr	r2, [pc, #204]	; (800342c <defThread+0xaa4>)
 8003360:	1898      	adds	r0, r3, r2
 8003362:	f997 345e 	ldrsb.w	r3, [r7, #1118]	; 0x45e
 8003366:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800336a:	4413      	add	r3, r2
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	4934      	ldr	r1, [pc, #208]	; (8003444 <defThread+0xabc>)
 8003372:	f009 fea9 	bl	800d0c8 <siprintf>
 8003376:	f997 345e 	ldrsb.w	r3, [r7, #1118]	; 0x45e
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f887 345e 	strb.w	r3, [r7, #1118]	; 0x45e
 8003384:	f897 345e 	ldrb.w	r3, [r7, #1118]	; 0x45e
 8003388:	2b04      	cmp	r3, #4
 800338a:	d9e4      	bls.n	8003356 <defThread+0x9ce>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 800338c:	4827      	ldr	r0, [pc, #156]	; (800342c <defThread+0xaa4>)
 800338e:	f7fc ff1f 	bl	80001d0 <strlen>
 8003392:	4603      	mov	r3, r0
 8003394:	4a25      	ldr	r2, [pc, #148]	; (800342c <defThread+0xaa4>)
 8003396:	1898      	adds	r0, r3, r2
 8003398:	4b2b      	ldr	r3, [pc, #172]	; (8003448 <defThread+0xac0>)
 800339a:	785b      	ldrb	r3, [r3, #1]
 800339c:	461a      	mov	r2, r3
 800339e:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 80033a2:	492a      	ldr	r1, [pc, #168]	; (800344c <defThread+0xac4>)
 80033a4:	f009 fe90 	bl	800d0c8 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 80033a8:	4820      	ldr	r0, [pc, #128]	; (800342c <defThread+0xaa4>)
 80033aa:	f7fc ff11 	bl	80001d0 <strlen>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a1e      	ldr	r2, [pc, #120]	; (800342c <defThread+0xaa4>)
 80033b2:	189c      	adds	r4, r3, r2
 80033b4:	4b26      	ldr	r3, [pc, #152]	; (8003450 <defThread+0xac8>)
 80033b6:	681d      	ldr	r5, [r3, #0]
 80033b8:	4b25      	ldr	r3, [pc, #148]	; (8003450 <defThread+0xac8>)
 80033ba:	685e      	ldr	r6, [r3, #4]
 80033bc:	4b24      	ldr	r3, [pc, #144]	; (8003450 <defThread+0xac8>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4a23      	ldr	r2, [pc, #140]	; (8003450 <defThread+0xac8>)
 80033c2:	6912      	ldr	r2, [r2, #16]
 80033c4:	4923      	ldr	r1, [pc, #140]	; (8003454 <defThread+0xacc>)
 80033c6:	6809      	ldr	r1, [r1, #0]
 80033c8:	4823      	ldr	r0, [pc, #140]	; (8003458 <defThread+0xad0>)
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	9005      	str	r0, [sp, #20]
 80033ce:	9104      	str	r1, [sp, #16]
 80033d0:	f8d7 1454 	ldr.w	r1, [r7, #1108]	; 0x454
 80033d4:	9103      	str	r1, [sp, #12]
 80033d6:	9202      	str	r2, [sp, #8]
 80033d8:	9301      	str	r3, [sp, #4]
 80033da:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	4633      	mov	r3, r6
 80033e2:	462a      	mov	r2, r5
 80033e4:	491d      	ldr	r1, [pc, #116]	; (800345c <defThread+0xad4>)
 80033e6:	4620      	mov	r0, r4
 80033e8:	f009 fe6e 	bl	800d0c8 <siprintf>
											BlockSizeKB,
											chipConf.BlockNbr,
											chipConf.PlaneNbr,
											PlaneSizeMB,
											total_pages, total_bytes);
						Report(1, "%s%s", stx, eol);
 80033ec:	4b07      	ldr	r3, [pc, #28]	; (800340c <defThread+0xa84>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0e      	ldr	r2, [pc, #56]	; (800342c <defThread+0xaa4>)
 80033f2:	491b      	ldr	r1, [pc, #108]	; (8003460 <defThread+0xad8>)
 80033f4:	2001      	movs	r0, #1
 80033f6:	f7fe fec1 	bl	800217c <Report>
					}
				break;
 80033fa:	e1c0      	b.n	800377e <defThread+0xdf6>
 80033fc:	20000344 	.word	0x20000344
 8003400:	200023a8 	.word	0x200023a8
 8003404:	2000034c 	.word	0x2000034c
 8003408:	20000062 	.word	0x20000062
 800340c:	20000004 	.word	0x20000004
 8003410:	0800e1d8 	.word	0x0800e1d8
 8003414:	20000034 	.word	0x20000034
 8003418:	0800e1e4 	.word	0x0800e1e4
 800341c:	20000078 	.word	0x20000078
 8003420:	0800e1ec 	.word	0x0800e1ec
 8003424:	0800e204 	.word	0x0800e204
 8003428:	0800e21c 	.word	0x0800e21c
 800342c:	200023ac 	.word	0x200023ac
 8003430:	20000008 	.word	0x20000008
 8003434:	0800e238 	.word	0x0800e238
 8003438:	0800de7c 	.word	0x0800de7c
 800343c:	0800e240 	.word	0x0800e240
 8003440:	0800df08 	.word	0x0800df08
 8003444:	0800de74 	.word	0x0800de74
 8003448:	20001388 	.word	0x20001388
 800344c:	0800df10 	.word	0x0800df10
 8003450:	20001390 	.word	0x20001390
 8003454:	20001368 	.word	0x20001368
 8003458:	2000136c 	.word	0x2000136c
 800345c:	0800df28 	.word	0x0800df28
 8003460:	0800dfcc 	.word	0x0800dfcc
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003464:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8003468:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 800346c:	785b      	ldrb	r3, [r3, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <defThread+0xaf6>
						set_Date(epoch);
 8003472:	4b8a      	ldr	r3, [pc, #552]	; (800369c <defThread+0xd14>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7fe fd86 	bl	8001f88 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 800347c:	e181      	b.n	8003782 <defThread+0xdfa>
						sec2str(stx);
 800347e:	4888      	ldr	r0, [pc, #544]	; (80036a0 <defThread+0xd18>)
 8003480:	f7fe fde2 	bl	8002048 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003484:	4b87      	ldr	r3, [pc, #540]	; (80036a4 <defThread+0xd1c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 817a 	beq.w	8003782 <defThread+0xdfa>
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <defThread+0xd20>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a83      	ldr	r2, [pc, #524]	; (80036a0 <defThread+0xd18>)
 8003494:	4985      	ldr	r1, [pc, #532]	; (80036ac <defThread+0xd24>)
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe fe70 	bl	800217c <Report>
				break;
 800349c:	e171      	b.n	8003782 <defThread+0xdfa>
				case cmdLog:
					if (qcmd.attr < logNone) {
 800349e:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80034a2:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d81e      	bhi.n	80034ea <defThread+0xb62>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 80034ac:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80034b0:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034b4:	785b      	ldrb	r3, [r3, #1]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fe fc00 	bl	8001cbc <get_logName>
 80034bc:	4602      	mov	r2, r0
 80034be:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80034c2:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	4619      	mov	r1, r3
 80034ca:	4b77      	ldr	r3, [pc, #476]	; (80036a8 <defThread+0xd20>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	460b      	mov	r3, r1
 80034d2:	4977      	ldr	r1, [pc, #476]	; (80036b0 <defThread+0xd28>)
 80034d4:	2001      	movs	r0, #1
 80034d6:	f7fe fe51 	bl	800217c <Report>
						dbg = qcmd.attr;
 80034da:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 80034de:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 80034e2:	785a      	ldrb	r2, [r3, #1]
 80034e4:	4b6f      	ldr	r3, [pc, #444]	; (80036a4 <defThread+0xd1c>)
 80034e6:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 80034e8:	e154      	b.n	8003794 <defThread+0xe0c>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 80034ea:	4b6e      	ldr	r3, [pc, #440]	; (80036a4 <defThread+0xd1c>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fe fbe4 	bl	8001cbc <get_logName>
 80034f4:	4602      	mov	r2, r0
 80034f6:	4b6b      	ldr	r3, [pc, #428]	; (80036a4 <defThread+0xd1c>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	4619      	mov	r1, r3
 80034fc:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <defThread+0xd20>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	460b      	mov	r3, r1
 8003504:	496b      	ldr	r1, [pc, #428]	; (80036b4 <defThread+0xd2c>)
 8003506:	2001      	movs	r0, #1
 8003508:	f7fe fe38 	bl	800217c <Report>
				break;
 800350c:	e142      	b.n	8003794 <defThread+0xe0c>
				case cmdRead:
				case cmdNext:
					io_nand_read((nandAdr - devAdr) / chipConf.PageSize, rdBuf, nandLen, 0);
 800350e:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <defThread+0xd30>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	4b6a      	ldr	r3, [pc, #424]	; (80036bc <defThread+0xd34>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	1ad2      	subs	r2, r2, r3
 8003518:	4b69      	ldr	r3, [pc, #420]	; (80036c0 <defThread+0xd38>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003520:	4b68      	ldr	r3, [pc, #416]	; (80036c4 <defThread+0xd3c>)
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	2300      	movs	r3, #0
 8003528:	4967      	ldr	r1, [pc, #412]	; (80036c8 <defThread+0xd40>)
 800352a:	f7fd ff6f 	bl	800140c <io_nand_read>
					if (!(devError & devNAND)) {
 800352e:	4b67      	ldr	r3, [pc, #412]	; (80036cc <defThread+0xd44>)
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 8125 	bne.w	8003786 <defThread+0xdfe>
						if (qcmd.cmd == cmdRead) nand_show = 1;
 800353c:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8003540:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d103      	bne.n	8003552 <defThread+0xbca>
 800354a:	2301      	movs	r3, #1
 800354c:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
 8003550:	e002      	b.n	8003558 <defThread+0xbd0>
										    else nand_show = 2;
 8003552:	2302      	movs	r3, #2
 8003554:	f887 347b 	strb.w	r3, [r7, #1147]	; 0x47b
						readed = true;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 347a 	strb.w	r3, [r7, #1146]	; 0x47a
					}
				break;
 800355e:	e112      	b.n	8003786 <defThread+0xdfe>
				/*case cmdNext:
					if (dbg != logOff) Report(1, "Read next nand adr:0x%X len:%lu%s", nandAdr, nandLen, eol);
					nand_show = 2;
				break;*/
				case cmdErase:
					if (!qcmd.attr) {
 8003560:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8003564:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12e      	bne.n	80035cc <defThread+0xc44>
						uint32_t bk = nandBlk * chipConf.PageSize;
 800356e:	4b54      	ldr	r3, [pc, #336]	; (80036c0 <defThread+0xd38>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a57      	ldr	r2, [pc, #348]	; (80036d0 <defThread+0xd48>)
 8003574:	6812      	ldr	r2, [r2, #0]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
						io_nand_block_erase(bk);
 800357e:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 8003582:	f7fd ff7f 	bl	8001484 <io_nand_block_erase>
						if (dbg != logOff) {
 8003586:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <defThread+0xd1c>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80fd 	beq.w	800378a <defThread+0xe02>
							if (devError & devNAND) {
 8003590:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <defThread+0xd44>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00b      	beq.n	80035b4 <defThread+0xc2c>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk, bk, eol);
 800359c:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <defThread+0xd48>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	4b41      	ldr	r3, [pc, #260]	; (80036a8 <defThread+0xd20>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80035aa:	494a      	ldr	r1, [pc, #296]	; (80036d4 <defThread+0xd4c>)
 80035ac:	2001      	movs	r0, #1
 80035ae:	f7fe fde5 	bl	800217c <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 80035b2:	e0ea      	b.n	800378a <defThread+0xe02>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk, bk, eol);
 80035b4:	4b46      	ldr	r3, [pc, #280]	; (80036d0 <defThread+0xd48>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b3b      	ldr	r3, [pc, #236]	; (80036a8 <defThread+0xd20>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80035c2:	4945      	ldr	r1, [pc, #276]	; (80036d8 <defThread+0xd50>)
 80035c4:	2001      	movs	r0, #1
 80035c6:	f7fe fdd9 	bl	800217c <Report>
				break;
 80035ca:	e0de      	b.n	800378a <defThread+0xe02>
						iBlk = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
						next_block_erase = 1;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
						if (dbg != logOff) Report(1, "Erase chip ");
 80035d8:	4b32      	ldr	r3, [pc, #200]	; (80036a4 <defThread+0xd1c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <defThread+0xc60>
 80035e0:	493e      	ldr	r1, [pc, #248]	; (80036dc <defThread+0xd54>)
 80035e2:	2001      	movs	r0, #1
 80035e4:	f7fe fdca 	bl	800217c <Report>
						stik = HAL_GetTick();
 80035e8:	f001 f9d2 	bl	8004990 <HAL_GetTick>
 80035ec:	f8c7 047c 	str.w	r0, [r7, #1148]	; 0x47c
				break;
 80035f0:	e0cb      	b.n	800378a <defThread+0xe02>
				case cmdCheck:
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 80035f2:	4b33      	ldr	r3, [pc, #204]	; (80036c0 <defThread+0xd38>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <defThread+0xd58>)
 80035f8:	6812      	ldr	r2, [r2, #0]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
					if (!pageIsEmpty(adr)) {
 8003602:	f8d7 0444 	ldr.w	r0, [r7, #1092]	; 0x444
 8003606:	f7fe fac1 	bl	8001b8c <pageIsEmpty>
 800360a:	4603      	mov	r3, r0
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d010      	beq.n	8003638 <defThread+0xcb0>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu Not empty%s", nandPage, adr, eol);
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <defThread+0xd1c>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80b7 	beq.w	800378e <defThread+0xe06>
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <defThread+0xd58>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <defThread+0xd20>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 800362e:	492d      	ldr	r1, [pc, #180]	; (80036e4 <defThread+0xd5c>)
 8003630:	2001      	movs	r0, #1
 8003632:	f7fe fda3 	bl	800217c <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
					}
				}
				break;
 8003636:	e0aa      	b.n	800378e <defThread+0xe06>
						if (dbg != logOff) Report(1, "Page:%lu in addr:%lu is Empty%s", nandPage, adr, eol);
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <defThread+0xd1c>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80a6 	beq.w	800378e <defThread+0xe06>
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <defThread+0xd58>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b18      	ldr	r3, [pc, #96]	; (80036a8 <defThread+0xd20>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8003650:	4925      	ldr	r1, [pc, #148]	; (80036e8 <defThread+0xd60>)
 8003652:	2001      	movs	r0, #1
 8003654:	f7fe fd92 	bl	800217c <Report>
				break;
 8003658:	e099      	b.n	800378e <defThread+0xe06>
				case cmdWrite:
				{
						uint32_t wadr = (nandAdr - devAdr) / chipConf.PageSize;
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <defThread+0xd30>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b17      	ldr	r3, [pc, #92]	; (80036bc <defThread+0xd34>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <defThread+0xd38>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	fbb2 f3f3 	udiv	r3, r2, r3
 800366c:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
						if (!pageIsEmpty(wadr)) {
 8003670:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003674:	f7fe fa8a 	bl	8001b8c <pageIsEmpty>
 8003678:	4603      	mov	r3, r0
 800367a:	f083 0301 	eor.w	r3, r3, #1
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d035      	beq.n	80036f0 <defThread+0xd68>
							io_nand_block_erase(wadr);
 8003684:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003688:	f7fd fefc 	bl	8001484 <io_nand_block_erase>
							sprintf(stx, "Erase nand addr:%lu done", wadr);
 800368c:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <defThread+0xd64>)
 8003692:	4803      	ldr	r0, [pc, #12]	; (80036a0 <defThread+0xd18>)
 8003694:	f009 fd18 	bl	800d0c8 <siprintf>
 8003698:	e030      	b.n	80036fc <defThread+0xd74>
 800369a:	bf00      	nop
 800369c:	20000064 	.word	0x20000064
 80036a0:	200023ac 	.word	0x200023ac
 80036a4:	20000062 	.word	0x20000062
 80036a8:	20000004 	.word	0x20000004
 80036ac:	0800e26c 	.word	0x0800e26c
 80036b0:	0800e288 	.word	0x0800e288
 80036b4:	0800e2a4 	.word	0x0800e2a4
 80036b8:	20001374 	.word	0x20001374
 80036bc:	20001370 	.word	0x20001370
 80036c0:	20001390 	.word	0x20001390
 80036c4:	20001378 	.word	0x20001378
 80036c8:	200013a8 	.word	0x200013a8
 80036cc:	2000034c 	.word	0x2000034c
 80036d0:	2000137c 	.word	0x2000137c
 80036d4:	0800e2c4 	.word	0x0800e2c4
 80036d8:	0800e2ec 	.word	0x0800e2ec
 80036dc:	0800e310 	.word	0x0800e310
 80036e0:	20001380 	.word	0x20001380
 80036e4:	0800e31c 	.word	0x0800e31c
 80036e8:	0800e340 	.word	0x0800e340
 80036ec:	0800e360 	.word	0x0800e360
						} else {
							sprintf(stx, "Addr:%lu is Empty", wadr);
 80036f0:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 80036f4:	4975      	ldr	r1, [pc, #468]	; (80038cc <defThread+0xf44>)
 80036f6:	4876      	ldr	r0, [pc, #472]	; (80038d0 <defThread+0xf48>)
 80036f8:	f009 fce6 	bl	800d0c8 <siprintf>
						}
						if (dbg != logOff) Report(1, "%s%s", stx, eol);
 80036fc:	4b75      	ldr	r3, [pc, #468]	; (80038d4 <defThread+0xf4c>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d006      	beq.n	8003712 <defThread+0xd8a>
 8003704:	4b74      	ldr	r3, [pc, #464]	; (80038d8 <defThread+0xf50>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a71      	ldr	r2, [pc, #452]	; (80038d0 <defThread+0xf48>)
 800370a:	4974      	ldr	r1, [pc, #464]	; (80038dc <defThread+0xf54>)
 800370c:	2001      	movs	r0, #1
 800370e:	f7fe fd35 	bl	800217c <Report>
						memset(wrBuf, EMPTY, chipConf.PageSize);
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <defThread+0xf58>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	21ff      	movs	r1, #255	; 0xff
 800371a:	4872      	ldr	r0, [pc, #456]	; (80038e4 <defThread+0xf5c>)
 800371c:	f009 f86c 	bl	800c7f8 <memset>
						uint32_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
						memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8003726:	4b70      	ldr	r3, [pc, #448]	; (80038e8 <defThread+0xf60>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	4619      	mov	r1, r3
 800372c:	4b6f      	ldr	r3, [pc, #444]	; (80038ec <defThread+0xf64>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	486c      	ldr	r0, [pc, #432]	; (80038e4 <defThread+0xf5c>)
 8003734:	f009 f860 	bl	800c7f8 <memset>
						////showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						//if (NAND_Write_Page_8b(nandPort, &addr, wrBuf, nandLen, ofs) != HAL_OK) devError |= devNAND;
						//if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu (page:%lu blk:%lu)%s",
						//	      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, addr.Page, addr.Block, eol);
						io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003738:	4b6c      	ldr	r3, [pc, #432]	; (80038ec <defThread+0xf64>)
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003742:	4968      	ldr	r1, [pc, #416]	; (80038e4 <defThread+0xf5c>)
 8003744:	f8d7 043c 	ldr.w	r0, [r7, #1084]	; 0x43c
 8003748:	f7fd fe7e 	bl	8001448 <io_nand_write>
						if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%lu%s",
 800374c:	4b61      	ldr	r3, [pc, #388]	; (80038d4 <defThread+0xf4c>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01e      	beq.n	8003792 <defThread+0xe0a>
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <defThread+0xf68>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <defThread+0xf60>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <defThread+0xf64>)
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	4619      	mov	r1, r3
 8003764:	4b5c      	ldr	r3, [pc, #368]	; (80038d8 <defThread+0xf50>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	9302      	str	r3, [sp, #8]
 800376a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	9100      	str	r1, [sp, #0]
 8003772:	4603      	mov	r3, r0
 8003774:	495f      	ldr	r1, [pc, #380]	; (80038f4 <defThread+0xf6c>)
 8003776:	2001      	movs	r0, #1
 8003778:	f7fe fd00 	bl	800217c <Report>
							      	  	  	  	  	  nandAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 800377c:	e009      	b.n	8003792 <defThread+0xe0a>
				break;
 800377e:	bf00      	nop
 8003780:	e008      	b.n	8003794 <defThread+0xe0c>
				break;
 8003782:	bf00      	nop
 8003784:	e006      	b.n	8003794 <defThread+0xe0c>
				break;
 8003786:	bf00      	nop
 8003788:	e004      	b.n	8003794 <defThread+0xe0c>
				break;
 800378a:	bf00      	nop
 800378c:	e002      	b.n	8003794 <defThread+0xe0c>
				break;
 800378e:	bf00      	nop
 8003790:	e000      	b.n	8003794 <defThread+0xe0c>
				break;
 8003792:	bf00      	nop
			}
			if (nand_show) {
 8003794:	f897 347b 	ldrb.w	r3, [r7, #1147]	; 0x47b
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <defThread+0xe30>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 800379c:	4b54      	ldr	r3, [pc, #336]	; (80038f0 <defThread+0xf68>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <defThread+0xf64>)
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	461c      	mov	r4, r3
 80037a6:	f897 147a 	ldrb.w	r1, [r7, #1146]	; 0x47a
 80037aa:	f897 047b 	ldrb.w	r0, [r7, #1147]	; 0x47b
 80037ae:	4b52      	ldr	r3, [pc, #328]	; (80038f8 <defThread+0xf70>)
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	4623      	mov	r3, r4
 80037b4:	f7fe fd46 	bl	8002244 <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 80037b8:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d058      	beq.n	8003872 <defThread+0xeea>
			byte = dbg;
 80037c0:	4b44      	ldr	r3, [pc, #272]	; (80038d4 <defThread+0xf4c>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	f887 345d 	strb.w	r3, [r7, #1117]	; 0x45d
			dbg = logOff;//disable print log !
 80037c8:	4b42      	ldr	r3, [pc, #264]	; (80038d4 <defThread+0xf4c>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 80037ce:	f8d7 0480 	ldr.w	r0, [r7, #1152]	; 0x480
 80037d2:	f7fd fe57 	bl	8001484 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 80037d6:	4a3f      	ldr	r2, [pc, #252]	; (80038d4 <defThread+0xf4c>)
 80037d8:	f897 345d 	ldrb.w	r3, [r7, #1117]	; 0x45d
 80037dc:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 80037de:	4b47      	ldr	r3, [pc, #284]	; (80038fc <defThread+0xf74>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	f003 0320 	and.w	r3, r3, #32
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <defThread+0xe6a>
				next_block_erase = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
 80037f0:	e01c      	b.n	800382c <defThread+0xea4>
			} else {
				if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
 80037f2:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <defThread+0xf58>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	029a      	lsls	r2, r3, #10
 80037f8:	f8d7 3480 	ldr.w	r3, [r7, #1152]	; 0x480
 80037fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8003800:	fb01 f202 	mul.w	r2, r1, r2
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d103      	bne.n	8003812 <defThread+0xe8a>
 800380a:	493d      	ldr	r1, [pc, #244]	; (8003900 <defThread+0xf78>)
 800380c:	2000      	movs	r0, #0
 800380e:	f7fe fcb5 	bl	800217c <Report>
				if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
 8003812:	4b33      	ldr	r3, [pc, #204]	; (80038e0 <defThread+0xf58>)
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	4a32      	ldr	r2, [pc, #200]	; (80038e0 <defThread+0xf58>)
 8003818:	6912      	ldr	r2, [r2, #16]
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003822:	429a      	cmp	r2, r3
 8003824:	d302      	bcc.n	800382c <defThread+0xea4>
 8003826:	2300      	movs	r3, #0
 8003828:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
			}
			iBlk += chipConf.PageSize;
 800382c:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <defThread+0xf58>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 8003834:	4413      	add	r3, r2
 8003836:	f8c7 3480 	str.w	r3, [r7, #1152]	; 0x480
			if (!next_block_erase) {
 800383a:	f897 3487 	ldrb.w	r3, [r7, #1159]	; 0x487
 800383e:	2b00      	cmp	r3, #0
 8003840:	d117      	bne.n	8003872 <defThread+0xeea>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <defThread+0xf4c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d013      	beq.n	8003872 <defThread+0xeea>
 800384a:	f001 f8a1 	bl	8004990 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	f8d7 347c 	ldr.w	r3, [r7, #1148]	; 0x47c
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	4a2b      	ldr	r2, [pc, #172]	; (8003904 <defThread+0xf7c>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	099a      	lsrs	r2, r3, #6
 800385e:	4b1e      	ldr	r3, [pc, #120]	; (80038d8 <defThread+0xf50>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	f8d7 2480 	ldr.w	r2, [r7, #1152]	; 0x480
 800386a:	4927      	ldr	r1, [pc, #156]	; (8003908 <defThread+0xf80>)
 800386c:	2000      	movs	r0, #0
 800386e:	f7fe fc85 	bl	800217c <Report>
			}
		}
		//
		osDelay(5);
 8003872:	2005      	movs	r0, #5
 8003874:	f005 fdc2 	bl	80093fc <osDelay>
	while (loop) {
 8003878:	f897 346a 	ldrb.w	r3, [r7, #1130]	; 0x46a
 800387c:	2b00      	cmp	r3, #0
 800387e:	f47f abaa 	bne.w	8002fd6 <defThread+0x64e>

//	if (wrBuf) free(wrBuf);
//	if (rdBuf) free(rdBuf);

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 8003882:	f897 344f 	ldrb.w	r3, [r7, #1103]	; 0x44f
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <defThread+0xf0c>
 800388a:	f000 ffc7 	bl	800481c <io_fs_unmount>
 800388e:	4603      	mov	r3, r0
 8003890:	4a1e      	ldr	r2, [pc, #120]	; (800390c <defThread+0xf84>)
 8003892:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <defThread+0xf4c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d011      	beq.n	80038c0 <defThread+0xf38>
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <defThread+0xf88>)
 800389e:	681c      	ldr	r4, [r3, #0]
 80038a0:	f008 fc90 	bl	800c1c4 <xPortGetFreeHeapSize>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <defThread+0xf50>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	9302      	str	r3, [sp, #8]
 80038ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80038b0:	9301      	str	r3, [sp, #4]
 80038b2:	9200      	str	r2, [sp, #0]
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <defThread+0xf8c>)
 80038b6:	4622      	mov	r2, r4
 80038b8:	4917      	ldr	r1, [pc, #92]	; (8003918 <defThread+0xf90>)
 80038ba:	2001      	movs	r0, #1
 80038bc:	f7fe fc5e 	bl	800217c <Report>
	osDelay(250);
 80038c0:	20fa      	movs	r0, #250	; 0xfa
 80038c2:	f005 fd9b 	bl	80093fc <osDelay>

	NVIC_SystemReset();
 80038c6:	f7fd fdfd 	bl	80014c4 <__NVIC_SystemReset>
 80038ca:	bf00      	nop
 80038cc:	0800e37c 	.word	0x0800e37c
 80038d0:	200023ac 	.word	0x200023ac
 80038d4:	20000062 	.word	0x20000062
 80038d8:	20000004 	.word	0x20000004
 80038dc:	0800dfcc 	.word	0x0800dfcc
 80038e0:	20001390 	.word	0x20001390
 80038e4:	20001ba8 	.word	0x20001ba8
 80038e8:	20000080 	.word	0x20000080
 80038ec:	20001378 	.word	0x20001378
 80038f0:	20001374 	.word	0x20001374
 80038f4:	0800e390 	.word	0x0800e390
 80038f8:	200013a8 	.word	0x200013a8
 80038fc:	2000034c 	.word	0x2000034c
 8003900:	0800e3c4 	.word	0x0800e3c4
 8003904:	10624dd3 	.word	0x10624dd3
 8003908:	0800e3c8 	.word	0x0800e3c8
 800390c:	20002bac 	.word	0x20002bac
 8003910:	20000000 	.word	0x20000000
 8003914:	08011644 	.word	0x08011644
 8003918:	0800e3e0 	.word	0x0800e3e0

0800391c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a10      	ldr	r2, [pc, #64]	; (800396c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d102      	bne.n	8003934 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800392e:	f001 f81b 	bl	8004968 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8003932:	e016      	b.n	8003962 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393c:	d111      	bne.n	8003962 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 800393e:	f7fe fae5 	bl	8001f0c <get_msCounter>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	f002 0403 	and.w	r4, r2, #3
 800394a:	2500      	movs	r5, #0
 800394c:	1ee3      	subs	r3, r4, #3
 800394e:	432b      	orrs	r3, r5
 8003950:	d105      	bne.n	800395e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8003952:	f7fe facd 	bl	8001ef0 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8003956:	2180      	movs	r1, #128	; 0x80
 8003958:	4805      	ldr	r0, [pc, #20]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800395a:	f001 fee2 	bl	8005722 <HAL_GPIO_TogglePin>
	  inc_msCounter();
 800395e:	f7fe fae3 	bl	8001f28 <inc_msCounter>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bdb0      	pop	{r4, r5, r7, pc}
 800396a:	bf00      	nop
 800396c:	40010000 	.word	0x40010000
 8003970:	40020800 	.word	0x40020800

08003974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <Error_Handler+0x1c>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003980:	b29a      	uxth	r2, r3
 8003982:	4b03      	ldr	r3, [pc, #12]	; (8003990 <Error_Handler+0x1c>)
 8003984:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8003986:	2001      	movs	r0, #1
 8003988:	f7fe fa8a 	bl	8001ea0 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 800398c:	bf00      	nop
 800398e:	bd80      	pop	{r7, pc}
 8003990:	2000034c 	.word	0x2000034c

08003994 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 800399e:	2200      	movs	r2, #0
 80039a0:	2104      	movs	r1, #4
 80039a2:	480c      	ldr	r0, [pc, #48]	; (80039d4 <ST7789_WriteCommand+0x40>)
 80039a4:	f001 fea4 	bl	80056f0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 80039a8:	4b0b      	ldr	r3, [pc, #44]	; (80039d8 <ST7789_WriteCommand+0x44>)
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	2396      	movs	r3, #150	; 0x96
 80039ae:	1df9      	adds	r1, r7, #7
 80039b0:	2201      	movs	r2, #1
 80039b2:	f003 f982 	bl	8006cba <HAL_SPI_Transmit>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <ST7789_WriteCommand+0x36>
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <ST7789_WriteCommand+0x48>)
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	f043 0310 	orr.w	r3, r3, #16
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	4b05      	ldr	r3, [pc, #20]	; (80039dc <ST7789_WriteCommand+0x48>)
 80039c8:	801a      	strh	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40020000 	.word	0x40020000
 80039d8:	20000068 	.word	0x20000068
 80039dc:	2000034c 	.word	0x2000034c

080039e0 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 80039ea:	2200      	movs	r2, #0
 80039ec:	2104      	movs	r1, #4
 80039ee:	480e      	ldr	r0, [pc, #56]	; (8003a28 <ST7789_WriteCommands+0x48>)
 80039f0:	f001 fe7e 	bl	80056f0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <ST7789_WriteCommands+0x4c>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	2196      	movs	r1, #150	; 0x96
 80039fe:	460b      	mov	r3, r1
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f003 f957 	bl	8006cba <HAL_SPI_Transmit>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d006      	beq.n	8003a20 <ST7789_WriteCommands+0x40>
 8003a12:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <ST7789_WriteCommands+0x50>)
 8003a14:	881b      	ldrh	r3, [r3, #0]
 8003a16:	f043 0310 	orr.w	r3, r3, #16
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <ST7789_WriteCommands+0x50>)
 8003a1e:	801a      	strh	r2, [r3, #0]
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	20000068 	.word	0x20000068
 8003a30:	2000034c 	.word	0x2000034c

08003a34 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003a42:	2201      	movs	r2, #1
 8003a44:	2104      	movs	r1, #4
 8003a46:	481f      	ldr	r0, [pc, #124]	; (8003ac4 <ST7789_WriteData+0x90>)
 8003a48:	f001 fe52 	bl	80056f0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8003a4c:	e028      	b.n	8003aa0 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bf28      	it	cs
 8003a58:	4613      	movcs	r3, r2
 8003a5a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003a5c:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <ST7789_WriteData+0x94>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8003a62:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <ST7789_WriteData+0x98>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	89ba      	ldrh	r2, [r7, #12]
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f003 fa62 	bl	8006f34 <HAL_SPI_Transmit_DMA>
 8003a70:	4603      	mov	r3, r0
 8003a72:	461a      	mov	r2, r3
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003a7a:	e002      	b.n	8003a82 <ST7789_WriteData+0x4e>
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f000 ff93 	bl	80049a8 <HAL_Delay>
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <ST7789_WriteData+0x94>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	f083 0301 	eor.w	r3, r3, #1
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f5      	bne.n	8003a7c <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8003a90:	89bb      	ldrh	r3, [r7, #12]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003a98:	89bb      	ldrh	r3, [r7, #12]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1d3      	bne.n	8003a4e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <ST7789_WriteData+0x86>
 8003aac:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <ST7789_WriteData+0x9c>)
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	f043 0310 	orr.w	r3, r3, #16
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <ST7789_WriteData+0x9c>)
 8003ab8:	801a      	strh	r2, [r3, #0]
}
 8003aba:	bf00      	nop
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40020000 	.word	0x40020000
 8003ac8:	20000061 	.word	0x20000061
 8003acc:	20000068 	.word	0x20000068
 8003ad0:	2000034c 	.word	0x2000034c

08003ad4 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2104      	movs	r1, #4
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <ST7789_WriteDataLine+0x64>)
 8003ae8:	f001 fe02 	bl	80056f0 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <ST7789_WriteDataLine+0x68>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003af2:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <ST7789_WriteDataLine+0x6c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	b292      	uxth	r2, r2
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f003 fa19 	bl	8006f34 <HAL_SPI_Transmit_DMA>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003b06:	e002      	b.n	8003b0e <ST7789_WriteDataLine+0x3a>
 8003b08:	2001      	movs	r0, #1
 8003b0a:	f000 ff4d 	bl	80049a8 <HAL_Delay>
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <ST7789_WriteDataLine+0x68>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	f083 0301 	eor.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f5      	bne.n	8003b08 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <ST7789_WriteDataLine+0x5c>
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <ST7789_WriteDataLine+0x70>)
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	f043 0310 	orr.w	r3, r3, #16
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <ST7789_WriteDataLine+0x70>)
 8003b2e:	801a      	strh	r2, [r3, #0]
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40020000 	.word	0x40020000
 8003b3c:	20000061 	.word	0x20000061
 8003b40:	20000068 	.word	0x20000068
 8003b44:	2000034c 	.word	0x2000034c

08003b48 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003b52:	2201      	movs	r2, #1
 8003b54:	2104      	movs	r1, #4
 8003b56:	480c      	ldr	r0, [pc, #48]	; (8003b88 <ST7789_WriteSmallData+0x40>)
 8003b58:	f001 fdca 	bl	80056f0 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <ST7789_WriteSmallData+0x44>)
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	2396      	movs	r3, #150	; 0x96
 8003b62:	1df9      	adds	r1, r7, #7
 8003b64:	2201      	movs	r2, #1
 8003b66:	f003 f8a8 	bl	8006cba <HAL_SPI_Transmit>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <ST7789_WriteSmallData+0x36>
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <ST7789_WriteSmallData+0x48>)
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	4b05      	ldr	r3, [pc, #20]	; (8003b90 <ST7789_WriteSmallData+0x48>)
 8003b7c:	801a      	strh	r2, [r3, #0]
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40020000 	.word	0x40020000
 8003b8c:	20000068 	.word	0x20000068
 8003b90:	2000034c 	.word	0x2000034c

08003b94 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <ipsOn+0x18>
 8003ba4:	2029      	movs	r0, #41	; 0x29
 8003ba6:	f7ff fef5 	bl	8003994 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 8003baa:	e002      	b.n	8003bb2 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 8003bac:	2028      	movs	r0, #40	; 0x28
 8003bae:	f7ff fef1 	bl	8003994 <ST7789_WriteCommand>
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
	...

08003bbc <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8003bc6:	2036      	movs	r0, #54	; 0x36
 8003bc8:	f7ff fee4 	bl	8003994 <ST7789_WriteCommand>
	switch (m) {
 8003bcc:	79fb      	ldrb	r3, [r7, #7]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d81a      	bhi.n	8003c08 <ST7789_SetRotation+0x4c>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <ST7789_SetRotation+0x1c>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bf1 	.word	0x08003bf1
 8003be0:	08003bf9 	.word	0x08003bf9
 8003be4:	08003c01 	.word	0x08003c01
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8003be8:	20c0      	movs	r0, #192	; 0xc0
 8003bea:	f7ff ffad 	bl	8003b48 <ST7789_WriteSmallData>
		break;
 8003bee:	e00c      	b.n	8003c0a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003bf0:	20a0      	movs	r0, #160	; 0xa0
 8003bf2:	f7ff ffa9 	bl	8003b48 <ST7789_WriteSmallData>
		break;
 8003bf6:	e008      	b.n	8003c0a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	f7ff ffa5 	bl	8003b48 <ST7789_WriteSmallData>
		break;
 8003bfe:	e004      	b.n	8003c0a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003c00:	2060      	movs	r0, #96	; 0x60
 8003c02:	f7ff ffa1 	bl	8003b48 <ST7789_WriteSmallData>
		break;
 8003c06:	e000      	b.n	8003c0a <ST7789_SetRotation+0x4e>
	default:
		break;
 8003c08:	bf00      	nop
	}
}
 8003c0a:	bf00      	nop
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b087      	sub	sp, #28
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4604      	mov	r4, r0
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4623      	mov	r3, r4
 8003c24:	80fb      	strh	r3, [r7, #6]
 8003c26:	4603      	mov	r3, r0
 8003c28:	80bb      	strh	r3, [r7, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	807b      	strh	r3, [r7, #2]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003c32:	88fb      	ldrh	r3, [r7, #6]
 8003c34:	82fb      	strh	r3, [r7, #22]
 8003c36:	887b      	ldrh	r3, [r7, #2]
 8003c38:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003c3a:	88bb      	ldrh	r3, [r7, #4]
 8003c3c:	827b      	strh	r3, [r7, #18]
 8003c3e:	883b      	ldrh	r3, [r7, #0]
 8003c40:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003c42:	202a      	movs	r0, #42	; 0x2a
 8003c44:	f7ff fea6 	bl	8003994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003c48:	8afb      	ldrh	r3, [r7, #22]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	733b      	strb	r3, [r7, #12]
 8003c52:	8afb      	ldrh	r3, [r7, #22]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	737b      	strb	r3, [r7, #13]
 8003c58:	8abb      	ldrh	r3, [r7, #20]
 8003c5a:	0a1b      	lsrs	r3, r3, #8
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	73bb      	strb	r3, [r7, #14]
 8003c62:	8abb      	ldrh	r3, [r7, #20]
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003c68:	f107 030c 	add.w	r3, r7, #12
 8003c6c:	2104      	movs	r1, #4
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fee0 	bl	8003a34 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003c74:	202b      	movs	r0, #43	; 0x2b
 8003c76:	f7ff fe8d 	bl	8003994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003c7a:	8a7b      	ldrh	r3, [r7, #18]
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	723b      	strb	r3, [r7, #8]
 8003c84:	8a7b      	ldrh	r3, [r7, #18]
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	727b      	strb	r3, [r7, #9]
 8003c8a:	8a3b      	ldrh	r3, [r7, #16]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	72bb      	strb	r3, [r7, #10]
 8003c94:	8a3b      	ldrh	r3, [r7, #16]
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8003c9a:	f107 0308 	add.w	r3, r7, #8
 8003c9e:	2104      	movs	r1, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fec7 	bl	8003a34 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8003ca6:	202c      	movs	r0, #44	; 0x2c
 8003ca8:	f7ff fe74 	bl	8003994 <ST7789_WriteCommand>
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}

08003cb4 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8003cb8:	2014      	movs	r0, #20
 8003cba:	f000 fe75 	bl	80049a8 <HAL_Delay>
    ST7789_RST_Clr();
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4808      	ldr	r0, [pc, #32]	; (8003ce4 <ST7789_Reset+0x30>)
 8003cc4:	f001 fd14 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8003cc8:	200a      	movs	r0, #10
 8003cca:	f000 fe6d 	bl	80049a8 <HAL_Delay>
    ST7789_RST_Set();
 8003cce:	2201      	movs	r2, #1
 8003cd0:	2102      	movs	r1, #2
 8003cd2:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <ST7789_Reset+0x30>)
 8003cd4:	f001 fd0c 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8003cd8:	2014      	movs	r0, #20
 8003cda:	f000 fe65 	bl	80049a8 <HAL_Delay>
}
 8003cde:	bf00      	nop
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40020000 	.word	0x40020000

08003ce8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b08f      	sub	sp, #60	; 0x3c
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003cf2:	203a      	movs	r0, #58	; 0x3a
 8003cf4:	f7ff fe4e 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003cf8:	2055      	movs	r0, #85	; 0x55
 8003cfa:	f7ff ff25 	bl	8003b48 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003cfe:	20b2      	movs	r0, #178	; 0xb2
 8003d00:	f7ff fe48 	bl	8003994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003d04:	4a3a      	ldr	r2, [pc, #232]	; (8003df0 <ST7789_Init+0x108>)
 8003d06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d0e:	6018      	str	r0, [r3, #0]
 8003d10:	3304      	adds	r3, #4
 8003d12:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d18:	2105      	movs	r1, #5
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff fe8a 	bl	8003a34 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003d20:	2003      	movs	r0, #3
 8003d22:	f7ff ff4b 	bl	8003bbc <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003d26:	20b7      	movs	r0, #183	; 0xb7
 8003d28:	f7ff fe34 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003d2c:	2035      	movs	r0, #53	; 0x35
 8003d2e:	f7ff ff0b 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003d32:	20bb      	movs	r0, #187	; 0xbb
 8003d34:	f7ff fe2e 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003d38:	2019      	movs	r0, #25
 8003d3a:	f7ff ff05 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003d3e:	20c0      	movs	r0, #192	; 0xc0
 8003d40:	f7ff fe28 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003d44:	202c      	movs	r0, #44	; 0x2c
 8003d46:	f7ff feff 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 8003d4a:	20c2      	movs	r0, #194	; 0xc2
 8003d4c:	f7ff fe22 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003d50:	2001      	movs	r0, #1
 8003d52:	f7ff fef9 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003d56:	20ff      	movs	r0, #255	; 0xff
 8003d58:	f7ff fef6 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 8003d5c:	20c3      	movs	r0, #195	; 0xc3
 8003d5e:	f7ff fe19 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003d62:	2012      	movs	r0, #18
 8003d64:	f7ff fef0 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003d68:	20c4      	movs	r0, #196	; 0xc4
 8003d6a:	f7ff fe13 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 8003d6e:	2020      	movs	r0, #32
 8003d70:	f7ff feea 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003d74:	20c6      	movs	r0, #198	; 0xc6
 8003d76:	f7ff fe0d 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 8003d7a:	200f      	movs	r0, #15
 8003d7c:	f7ff fee4 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003d80:	20d0      	movs	r0, #208	; 0xd0
 8003d82:	f7ff fe07 	bl	8003994 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003d86:	20a4      	movs	r0, #164	; 0xa4
 8003d88:	f7ff fede 	bl	8003b48 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 8003d8c:	20a1      	movs	r0, #161	; 0xa1
 8003d8e:	f7ff fedb 	bl	8003b48 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8003d92:	20e0      	movs	r0, #224	; 0xe0
 8003d94:	f7ff fdfe 	bl	8003994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8003d98:	4b16      	ldr	r3, [pc, #88]	; (8003df4 <ST7789_Init+0x10c>)
 8003d9a:	f107 041c 	add.w	r4, r7, #28
 8003d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003da0:	c407      	stmia	r4!, {r0, r1, r2}
 8003da2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	210e      	movs	r1, #14
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fe42 	bl	8003a34 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8003db0:	20e1      	movs	r0, #225	; 0xe1
 8003db2:	f7ff fdef 	bl	8003994 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8003db6:	4b10      	ldr	r3, [pc, #64]	; (8003df8 <ST7789_Init+0x110>)
 8003db8:	f107 040c 	add.w	r4, r7, #12
 8003dbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dbe:	c407      	stmia	r4!, {r0, r1, r2}
 8003dc0:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	210e      	movs	r1, #14
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fe33 	bl	8003a34 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <ST7789_Init+0x114>)
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8003dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dd6:	2104      	movs	r1, #4
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe01 	bl	80039e0 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 8003dde:	88fb      	ldrh	r3, [r7, #6]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 f80d 	bl	8003e00 <ST7789_Fill_Color>
}
 8003de6:	bf00      	nop
 8003de8:	373c      	adds	r7, #60	; 0x3c
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}
 8003dee:	bf00      	nop
 8003df0:	0800e40c 	.word	0x0800e40c
 8003df4:	0800e414 	.word	0x0800e414
 8003df8:	0800e424 	.word	0x0800e424
 8003dfc:	28131121 	.word	0x28131121

08003e00 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b0fc      	sub	sp, #496	; 0x1f0
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4602      	mov	r2, r0
 8003e08:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e0c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e10:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003e12:	23ef      	movs	r3, #239	; 0xef
 8003e14:	22ef      	movs	r2, #239	; 0xef
 8003e16:	2100      	movs	r1, #0
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff fefb 	bl	8003c14 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e2a:	e024      	b.n	8003e76 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 8003e2c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e30:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b21a      	sxth	r2, r3
 8003e3c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003e40:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	021b      	lsls	r3, r3, #8
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e4e:	b21b      	sxth	r3, r3
 8003e50:	4313      	orrs	r3, r2
 8003e52:	b219      	sxth	r1, r3
 8003e54:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003e58:	f107 020c 	add.w	r2, r7, #12
 8003e5c:	4413      	add	r3, r2
 8003e5e:	b28a      	uxth	r2, r1
 8003e60:	801a      	strh	r2, [r3, #0]
		i += 2;
 8003e62:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003e66:	3302      	adds	r3, #2
 8003e68:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003e6c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003e70:	3301      	adds	r3, #1
 8003e72:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e76:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003e7a:	2bef      	cmp	r3, #239	; 0xef
 8003e7c:	d9d6      	bls.n	8003e2c <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e84:	e00b      	b.n	8003e9e <ST7789_Fill_Color+0x9e>
 8003e86:	f107 030c 	add.w	r3, r7, #12
 8003e8a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fe20 	bl	8003ad4 <ST7789_WriteDataLine>
 8003e94:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003e98:	3301      	adds	r3, #1
 8003e9a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003e9e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003ea2:	2bef      	cmp	r3, #239	; 0xef
 8003ea4:	d9ef      	bls.n	8003e86 <ST7789_Fill_Color+0x86>

//#endif
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8003eb2:	b590      	push	{r4, r7, lr}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	4604      	mov	r4, r0
 8003eba:	4608      	mov	r0, r1
 8003ebc:	4611      	mov	r1, r2
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	80fb      	strh	r3, [r7, #6]
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	80bb      	strh	r3, [r7, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	807b      	strh	r3, [r7, #2]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	2bef      	cmp	r3, #239	; 0xef
 8003ed4:	d82b      	bhi.n	8003f2e <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003ed6:	883b      	ldrh	r3, [r7, #0]
 8003ed8:	2bef      	cmp	r3, #239	; 0xef
 8003eda:	d828      	bhi.n	8003f2e <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 8003edc:	8c3b      	ldrh	r3, [r7, #32]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	723b      	strb	r3, [r7, #8]
 8003ee6:	8c3b      	ldrh	r3, [r7, #32]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8003eec:	883b      	ldrh	r3, [r7, #0]
 8003eee:	887a      	ldrh	r2, [r7, #2]
 8003ef0:	88b9      	ldrh	r1, [r7, #4]
 8003ef2:	88f8      	ldrh	r0, [r7, #6]
 8003ef4:	f7ff fe8e 	bl	8003c14 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003ef8:	88bb      	ldrh	r3, [r7, #4]
 8003efa:	81fb      	strh	r3, [r7, #14]
 8003efc:	e012      	b.n	8003f24 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	81bb      	strh	r3, [r7, #12]
 8003f02:	e008      	b.n	8003f16 <ST7789_Fill+0x64>
 8003f04:	f107 0308 	add.w	r3, r7, #8
 8003f08:	2102      	movs	r1, #2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fd92 	bl	8003a34 <ST7789_WriteData>
 8003f10:	89bb      	ldrh	r3, [r7, #12]
 8003f12:	3301      	adds	r3, #1
 8003f14:	81bb      	strh	r3, [r7, #12]
 8003f16:	89ba      	ldrh	r2, [r7, #12]
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d9f2      	bls.n	8003f04 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 8003f1e:	89fb      	ldrh	r3, [r7, #14]
 8003f20:	3301      	adds	r3, #1
 8003f22:	81fb      	strh	r3, [r7, #14]
 8003f24:	89fa      	ldrh	r2, [r7, #14]
 8003f26:	883b      	ldrh	r3, [r7, #0]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d9e8      	bls.n	8003efe <ST7789_Fill+0x4c>
 8003f2c:	e000      	b.n	8003f30 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8003f2e:	bf00      	nop
	}
}
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}

08003f36 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003f36:	b082      	sub	sp, #8
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b089      	sub	sp, #36	; 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f40:	4603      	mov	r3, r0
 8003f42:	80fb      	strh	r3, [r7, #6]
 8003f44:	460b      	mov	r3, r1
 8003f46:	80bb      	strh	r3, [r7, #4]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003f4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	88fb      	ldrh	r3, [r7, #6]
 8003f54:	4413      	add	r3, r2
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29c      	uxth	r4, r3
 8003f5c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	88bb      	ldrh	r3, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	88b9      	ldrh	r1, [r7, #4]
 8003f6e:	88f8      	ldrh	r0, [r7, #6]
 8003f70:	4622      	mov	r2, r4
 8003f72:	f7ff fe4f 	bl	8003c14 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8003f76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f78:	0a1b      	lsrs	r3, r3, #8
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	733b      	strb	r3, [r7, #12]
 8003f80:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003f86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f8a:	0a1b      	lsrs	r3, r3, #8
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	723b      	strb	r3, [r7, #8]
 8003f92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61fb      	str	r3, [r7, #28]
 8003fa2:	e02f      	b.n	8004004 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8003fa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	3b20      	subs	r3, #32
 8003faa:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003fae:	fb01 f303 	mul.w	r3, r1, r3
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	440b      	add	r3, r1
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	881b      	ldrh	r3, [r3, #0]
 8003fbe:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e015      	b.n	8003ff2 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <ST7789_WriteChar+0xa8>
				uk = cdata;
 8003fd6:	f107 030c 	add.w	r3, r7, #12
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e002      	b.n	8003fe4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8003fe4:	2102      	movs	r1, #2
 8003fe6:	6978      	ldr	r0, [r7, #20]
 8003fe8:	f7ff fd24 	bl	8003a34 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d3e3      	bcc.n	8003fc6 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
 8004004:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004008:	461a      	mov	r2, r3
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	4293      	cmp	r3, r2
 800400e:	d3c9      	bcc.n	8003fa4 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8004010:	bf00      	nop
 8004012:	bf00      	nop
 8004014:	3724      	adds	r7, #36	; 0x24
 8004016:	46bd      	mov	sp, r7
 8004018:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800401c:	b002      	add	sp, #8
 800401e:	4770      	bx	lr

08004020 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8004020:	b082      	sub	sp, #8
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af04      	add	r7, sp, #16
 8004028:	603a      	str	r2, [r7, #0]
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	4603      	mov	r3, r0
 800402e:	80fb      	strh	r3, [r7, #6]
 8004030:	460b      	mov	r3, r1
 8004032:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03f      	beq.n	80040ba <ST7789_WriteString+0x9a>

	while (*str) {
 800403a:	e039      	b.n	80040b0 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	7d3a      	ldrb	r2, [r7, #20]
 8004040:	4413      	add	r3, r2
 8004042:	2bef      	cmp	r3, #239	; 0xef
 8004044:	dd13      	ble.n	800406e <ST7789_WriteString+0x4e>
			x = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800404a:	7d7b      	ldrb	r3, [r7, #21]
 800404c:	b29a      	uxth	r2, r3
 800404e:	88bb      	ldrh	r3, [r7, #4]
 8004050:	4413      	add	r3, r2
 8004052:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004054:	88bb      	ldrh	r3, [r7, #4]
 8004056:	7d7a      	ldrb	r2, [r7, #21]
 8004058:	4413      	add	r3, r2
 800405a:	2bef      	cmp	r3, #239	; 0xef
 800405c:	dc2f      	bgt.n	80040be <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b20      	cmp	r3, #32
 8004064:	d103      	bne.n	800406e <ST7789_WriteString+0x4e>
				str++;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	3301      	adds	r3, #1
 800406a:	603b      	str	r3, [r7, #0]
				continue;
 800406c:	e020      	b.n	80040b0 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b0a      	cmp	r3, #10
 8004074:	d012      	beq.n	800409c <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	88b9      	ldrh	r1, [r7, #4]
 800407c:	88f8      	ldrh	r0, [r7, #6]
 800407e:	8c3b      	ldrh	r3, [r7, #32]
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	8bbb      	ldrh	r3, [r7, #28]
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	f7ff ff53 	bl	8003f36 <ST7789_WriteChar>
			x += font.width;
 8004090:	7d3b      	ldrb	r3, [r7, #20]
 8004092:	b29a      	uxth	r2, r3
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	4413      	add	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
 800409a:	e006      	b.n	80040aa <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 800409c:	2300      	movs	r3, #0
 800409e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80040a0:	7d7b      	ldrb	r3, [r7, #21]
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	88bb      	ldrh	r3, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	603b      	str	r3, [r7, #0]
	while (*str) {
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1c1      	bne.n	800403c <ST7789_WriteString+0x1c>
 80040b8:	e002      	b.n	80040c0 <ST7789_WriteString+0xa0>
	if (!str) return;
 80040ba:	bf00      	nop
 80040bc:	e000      	b.n	80040c0 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80040be:	bf00      	nop
	}
}
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040c8:	b002      	add	sp, #8
 80040ca:	4770      	bx	lr

080040cc <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b0a4      	sub	sp, #144	; 0x90
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80040d8:	2300      	movs	r3, #0
 80040da:	60fb      	str	r3, [r7, #12]
 80040dc:	f107 0310 	add.w	r3, r7, #16
 80040e0:	227c      	movs	r2, #124	; 0x7c
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f008 fb87 	bl	800c7f8 <memset>

	memset(st, 0x20, 127);
 80040ea:	f107 030c 	add.w	r3, r7, #12
 80040ee:	227f      	movs	r2, #127	; 0x7f
 80040f0:	2120      	movs	r1, #32
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 fb80 	bl	800c7f8 <memset>
	int8_t k = strlen(str);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7fc f869 	bl	80001d0 <strlen>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8004104:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8004108:	887b      	ldrh	r3, [r7, #2]
 800410a:	429a      	cmp	r2, r3
 800410c:	da25      	bge.n	800415a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 800410e:	887a      	ldrh	r2, [r7, #2]
 8004110:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	0fda      	lsrs	r2, r3, #31
 8004118:	4413      	add	r3, r2
 800411a:	105b      	asrs	r3, r3, #1
 800411c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8004120:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8004124:	f107 020c 	add.w	r2, r7, #12
 8004128:	4413      	add	r3, r2
 800412a:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800412e:	6879      	ldr	r1, [r7, #4]
 8004130:	4618      	mov	r0, r3
 8004132:	f008 fb53 	bl	800c7dc <memcpy>
		st[k + n*2 + 1] = '\0';
 8004136:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800413a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	3301      	adds	r3, #1
 8004144:	3390      	adds	r3, #144	; 0x90
 8004146:	443b      	add	r3, r7
 8004148:	2200      	movs	r2, #0
 800414a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800414e:	f107 030c 	add.w	r3, r7, #12
 8004152:	4619      	mov	r1, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f009 f836 	bl	800d1c6 <strcpy>
	}

	return str;
 800415a:	687b      	ldr	r3, [r7, #4]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3790      	adds	r7, #144	; 0x90
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800416a:	2300      	movs	r3, #0
 800416c:	607b      	str	r3, [r7, #4]
 800416e:	4b1a      	ldr	r3, [pc, #104]	; (80041d8 <HAL_MspInit+0x74>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	4a19      	ldr	r2, [pc, #100]	; (80041d8 <HAL_MspInit+0x74>)
 8004174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004178:	6453      	str	r3, [r2, #68]	; 0x44
 800417a:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <HAL_MspInit+0x74>)
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	607b      	str	r3, [r7, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
 800418a:	4b13      	ldr	r3, [pc, #76]	; (80041d8 <HAL_MspInit+0x74>)
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_MspInit+0x74>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6413      	str	r3, [r2, #64]	; 0x40
 8004196:	4b10      	ldr	r3, [pc, #64]	; (80041d8 <HAL_MspInit+0x74>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	210f      	movs	r1, #15
 80041a6:	f06f 0001 	mvn.w	r0, #1
 80041aa:	f000 fcd9 	bl	8004b60 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2105      	movs	r1, #5
 80041b2:	2005      	movs	r0, #5
 80041b4:	f000 fcd4 	bl	8004b60 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041b8:	2005      	movs	r0, #5
 80041ba:	f000 fced 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2105      	movs	r1, #5
 80041c2:	2005      	movs	r0, #5
 80041c4:	f000 fccc 	bl	8004b60 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041c8:	2005      	movs	r0, #5
 80041ca:	f000 fce5 	bl	8004b98 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041ce:	bf00      	nop
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800

080041dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041e4:	f107 0308 	add.w	r3, r7, #8
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	605a      	str	r2, [r3, #4]
 80041ee:	609a      	str	r2, [r3, #8]
 80041f0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a0c      	ldr	r2, [pc, #48]	; (8004228 <HAL_RTC_MspInit+0x4c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d110      	bne.n	800421e <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80041fc:	2302      	movs	r3, #2
 80041fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <HAL_RTC_MspInit+0x50>)
 8004202:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004204:	f107 0308 	add.w	r3, r7, #8
 8004208:	4618      	mov	r0, r3
 800420a:	f002 f8ed 	bl	80063e8 <HAL_RCCEx_PeriphCLKConfig>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004214:	f7ff fbae 	bl	8003974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RTC_MspInit+0x54>)
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800421e:	bf00      	nop
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40002800 	.word	0x40002800
 800422c:	00190300 	.word	0x00190300
 8004230:	42470e3c 	.word	0x42470e3c

08004234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a39      	ldr	r2, [pc, #228]	; (8004338 <HAL_SPI_MspInit+0x104>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d16b      	bne.n	800432e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <HAL_SPI_MspInit+0x108>)
 800425c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425e:	4a37      	ldr	r2, [pc, #220]	; (800433c <HAL_SPI_MspInit+0x108>)
 8004260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004264:	6453      	str	r3, [r2, #68]	; 0x44
 8004266:	4b35      	ldr	r3, [pc, #212]	; (800433c <HAL_SPI_MspInit+0x108>)
 8004268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	4b31      	ldr	r3, [pc, #196]	; (800433c <HAL_SPI_MspInit+0x108>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	4a30      	ldr	r2, [pc, #192]	; (800433c <HAL_SPI_MspInit+0x108>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6313      	str	r3, [r2, #48]	; 0x30
 8004282:	4b2e      	ldr	r3, [pc, #184]	; (800433c <HAL_SPI_MspInit+0x108>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	60fb      	str	r3, [r7, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800428e:	23a0      	movs	r3, #160	; 0xa0
 8004290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004292:	2302      	movs	r3, #2
 8004294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800429a:	2303      	movs	r3, #3
 800429c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800429e:	2305      	movs	r3, #5
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	4619      	mov	r1, r3
 80042a8:	4825      	ldr	r0, [pc, #148]	; (8004340 <HAL_SPI_MspInit+0x10c>)
 80042aa:	f001 f885 	bl	80053b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042b0:	4a25      	ldr	r2, [pc, #148]	; (8004348 <HAL_SPI_MspInit+0x114>)
 80042b2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80042b4:	4b23      	ldr	r3, [pc, #140]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042b6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80042ba:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042bc:	4b21      	ldr	r3, [pc, #132]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042be:	2240      	movs	r2, #64	; 0x40
 80042c0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ce:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042d0:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042d6:	4b1b      	ldr	r3, [pc, #108]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042d8:	2200      	movs	r2, #0
 80042da:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80042dc:	4b19      	ldr	r3, [pc, #100]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042de:	2200      	movs	r2, #0
 80042e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80042e2:	4b18      	ldr	r3, [pc, #96]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042e8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042ec:	2204      	movs	r2, #4
 80042ee:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042f0:	4b14      	ldr	r3, [pc, #80]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042f2:	2203      	movs	r2, #3
 80042f4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80042f6:	4b13      	ldr	r3, [pc, #76]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80042fc:	4b11      	ldr	r3, [pc, #68]	; (8004344 <HAL_SPI_MspInit+0x110>)
 80042fe:	2200      	movs	r2, #0
 8004300:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004302:	4810      	ldr	r0, [pc, #64]	; (8004344 <HAL_SPI_MspInit+0x110>)
 8004304:	f000 fc56 	bl	8004bb4 <HAL_DMA_Init>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800430e:	f7ff fb31 	bl	8003974 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a0b      	ldr	r2, [pc, #44]	; (8004344 <HAL_SPI_MspInit+0x110>)
 8004316:	649a      	str	r2, [r3, #72]	; 0x48
 8004318:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_SPI_MspInit+0x110>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800431e:	2200      	movs	r2, #0
 8004320:	2102      	movs	r1, #2
 8004322:	2023      	movs	r0, #35	; 0x23
 8004324:	f000 fc1c 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004328:	2023      	movs	r0, #35	; 0x23
 800432a:	f000 fc35 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800432e:	bf00      	nop
 8004330:	3728      	adds	r7, #40	; 0x28
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40013000 	.word	0x40013000
 800433c:	40023800 	.word	0x40023800
 8004340:	40020000 	.word	0x40020000
 8004344:	200001b4 	.word	0x200001b4
 8004348:	40026458 	.word	0x40026458

0800434c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800435c:	d115      	bne.n	800438a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
 8004362:	4b0c      	ldr	r3, [pc, #48]	; (8004394 <HAL_TIM_Base_MspInit+0x48>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	4a0b      	ldr	r2, [pc, #44]	; (8004394 <HAL_TIM_Base_MspInit+0x48>)
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	6413      	str	r3, [r2, #64]	; 0x40
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_TIM_Base_MspInit+0x48>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800437a:	2200      	movs	r2, #0
 800437c:	2101      	movs	r1, #1
 800437e:	201c      	movs	r0, #28
 8004380:	f000 fbee 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004384:	201c      	movs	r0, #28
 8004386:	f000 fc07 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40023800 	.word	0x40023800

08004398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a0:	f107 0314 	add.w	r3, r7, #20
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
 80043a8:	605a      	str	r2, [r3, #4]
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	60da      	str	r2, [r3, #12]
 80043ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a35      	ldr	r2, [pc, #212]	; (800448c <HAL_UART_MspInit+0xf4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d163      	bne.n	8004482 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	4a33      	ldr	r2, [pc, #204]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ca:	4b31      	ldr	r3, [pc, #196]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	4a2c      	ldr	r2, [pc, #176]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043e0:	f043 0302 	orr.w	r3, r3, #2
 80043e4:	6313      	str	r3, [r2, #48]	; 0x30
 80043e6:	4b2a      	ldr	r3, [pc, #168]	; (8004490 <HAL_UART_MspInit+0xf8>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80043f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f8:	2302      	movs	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004400:	2303      	movs	r3, #3
 8004402:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004404:	2307      	movs	r3, #7
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004408:	f107 0314 	add.w	r3, r7, #20
 800440c:	4619      	mov	r1, r3
 800440e:	4821      	ldr	r0, [pc, #132]	; (8004494 <HAL_UART_MspInit+0xfc>)
 8004410:	f000 ffd2 	bl	80053b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004414:	4b20      	ldr	r3, [pc, #128]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004416:	4a21      	ldr	r2, [pc, #132]	; (800449c <HAL_UART_MspInit+0x104>)
 8004418:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800441a:	4b1f      	ldr	r3, [pc, #124]	; (8004498 <HAL_UART_MspInit+0x100>)
 800441c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004420:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004424:	2240      	movs	r2, #64	; 0x40
 8004426:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004428:	4b1b      	ldr	r3, [pc, #108]	; (8004498 <HAL_UART_MspInit+0x100>)
 800442a:	2200      	movs	r2, #0
 800442c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800442e:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004430:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004434:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004436:	4b18      	ldr	r3, [pc, #96]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004438:	2200      	movs	r2, #0
 800443a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800443c:	4b16      	ldr	r3, [pc, #88]	; (8004498 <HAL_UART_MspInit+0x100>)
 800443e:	2200      	movs	r2, #0
 8004440:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004444:	2200      	movs	r2, #0
 8004446:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <HAL_UART_MspInit+0x100>)
 800444a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800444e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004452:	2200      	movs	r2, #0
 8004454:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004456:	4810      	ldr	r0, [pc, #64]	; (8004498 <HAL_UART_MspInit+0x100>)
 8004458:	f000 fbac 	bl	8004bb4 <HAL_DMA_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004462:	f7ff fa87 	bl	8003974 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <HAL_UART_MspInit+0x100>)
 800446a:	635a      	str	r2, [r3, #52]	; 0x34
 800446c:	4a0a      	ldr	r2, [pc, #40]	; (8004498 <HAL_UART_MspInit+0x100>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004472:	2200      	movs	r2, #0
 8004474:	2105      	movs	r1, #5
 8004476:	2027      	movs	r0, #39	; 0x27
 8004478:	f000 fb72 	bl	8004b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800447c:	2027      	movs	r0, #39	; 0x27
 800447e:	f000 fb8b 	bl	8004b98 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004482:	bf00      	nop
 8004484:	3728      	adds	r7, #40	; 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40004800 	.word	0x40004800
 8004490:	40023800 	.word	0x40023800
 8004494:	40020400 	.word	0x40020400
 8004498:	200002a0 	.word	0x200002a0
 800449c:	40026058 	.word	0x40026058

080044a0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	609a      	str	r2, [r3, #8]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80044b4:	4b20      	ldr	r3, [pc, #128]	; (8004538 <HAL_FSMC_MspInit+0x98>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d139      	bne.n	8004530 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80044bc:	4b1e      	ldr	r3, [pc, #120]	; (8004538 <HAL_FSMC_MspInit+0x98>)
 80044be:	2201      	movs	r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80044c2:	2300      	movs	r3, #0
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4b1d      	ldr	r3, [pc, #116]	; (800453c <HAL_FSMC_MspInit+0x9c>)
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	4a1c      	ldr	r2, [pc, #112]	; (800453c <HAL_FSMC_MspInit+0x9c>)
 80044cc:	f043 0301 	orr.w	r3, r3, #1
 80044d0:	6393      	str	r3, [r2, #56]	; 0x38
 80044d2:	4b1a      	ldr	r3, [pc, #104]	; (800453c <HAL_FSMC_MspInit+0x9c>)
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	603b      	str	r3, [r7, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80044de:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80044e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80044f0:	230c      	movs	r3, #12
 80044f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4811      	ldr	r0, [pc, #68]	; (8004540 <HAL_FSMC_MspInit+0xa0>)
 80044fa:	f000 ff5d 	bl	80053b8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 80044fe:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004502:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004510:	230c      	movs	r3, #12
 8004512:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	4619      	mov	r1, r3
 8004518:	480a      	ldr	r0, [pc, #40]	; (8004544 <HAL_FSMC_MspInit+0xa4>)
 800451a:	f000 ff4d 	bl	80053b8 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 800451e:	2200      	movs	r2, #0
 8004520:	2105      	movs	r1, #5
 8004522:	2030      	movs	r0, #48	; 0x30
 8004524:	f000 fb1c 	bl	8004b60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004528:	2030      	movs	r0, #48	; 0x30
 800452a:	f000 fb35 	bl	8004b98 <HAL_NVIC_EnableIRQ>
 800452e:	e000      	b.n	8004532 <HAL_FSMC_MspInit+0x92>
    return;
 8004530:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20002bb0 	.word	0x20002bb0
 800453c:	40023800 	.word	0x40023800
 8004540:	40021000 	.word	0x40021000
 8004544:	40020c00 	.word	0x40020c00

08004548 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004550:	f7ff ffa6 	bl	80044a0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08c      	sub	sp, #48	; 0x30
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800456c:	2200      	movs	r2, #0
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	2019      	movs	r0, #25
 8004572:	f000 faf5 	bl	8004b60 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004576:	2019      	movs	r0, #25
 8004578:	f000 fb0e 	bl	8004b98 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <HAL_InitTick+0xa4>)
 8004582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <HAL_InitTick+0xa4>)
 8004586:	f043 0301 	orr.w	r3, r3, #1
 800458a:	6453      	str	r3, [r2, #68]	; 0x44
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <HAL_InitTick+0xa4>)
 800458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004598:	f107 0210 	add.w	r2, r7, #16
 800459c:	f107 0314 	add.w	r3, r7, #20
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 feee 	bl	8006384 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80045a8:	f001 fed8 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 80045ac:	4603      	mov	r3, r0
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	4a13      	ldr	r2, [pc, #76]	; (8004604 <HAL_InitTick+0xa8>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0c9b      	lsrs	r3, r3, #18
 80045bc:	3b01      	subs	r3, #1
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_InitTick+0xac>)
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <HAL_InitTick+0xb0>)
 80045c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <HAL_InitTick+0xac>)
 80045c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80045cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80045ce:	4a0e      	ldr	r2, [pc, #56]	; (8004608 <HAL_InitTick+0xac>)
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <HAL_InitTick+0xac>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_InitTick+0xac>)
 80045dc:	2200      	movs	r2, #0
 80045de:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80045e0:	4809      	ldr	r0, [pc, #36]	; (8004608 <HAL_InitTick+0xac>)
 80045e2:	f002 ffd1 	bl	8007588 <HAL_TIM_Base_Init>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d104      	bne.n	80045f6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80045ec:	4806      	ldr	r0, [pc, #24]	; (8004608 <HAL_InitTick+0xac>)
 80045ee:	f003 f81b 	bl	8007628 <HAL_TIM_Base_Start_IT>
 80045f2:	4603      	mov	r3, r0
 80045f4:	e000      	b.n	80045f8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3730      	adds	r7, #48	; 0x30
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	431bde83 	.word	0x431bde83
 8004608:	20002bb4 	.word	0x20002bb4
 800460c:	40010000 	.word	0x40010000

08004610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800461e:	b480      	push	{r7}
 8004620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004622:	e7fe      	b.n	8004622 <HardFault_Handler+0x4>

08004624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004628:	e7fe      	b.n	8004628 <MemManage_Handler+0x4>

0800462a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800462a:	b480      	push	{r7}
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800462e:	e7fe      	b.n	800462e <BusFault_Handler+0x4>

08004630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004634:	e7fe      	b.n	8004634 <UsageFault_Handler+0x4>

08004636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004648:	bf00      	nop
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
	...

08004654 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004658:	4802      	ldr	r0, [pc, #8]	; (8004664 <DMA1_Stream3_IRQHandler+0x10>)
 800465a:	f000 fc43 	bl	8004ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800465e:	bf00      	nop
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	200002a0 	.word	0x200002a0

08004668 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800466c:	4802      	ldr	r0, [pc, #8]	; (8004678 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800466e:	f003 f84b 	bl	8007708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	20002bb4 	.word	0x20002bb4

0800467c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004680:	4802      	ldr	r0, [pc, #8]	; (800468c <TIM2_IRQHandler+0x10>)
 8004682:	f003 f841 	bl	8007708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000214 	.word	0x20000214

08004690 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004694:	4802      	ldr	r0, [pc, #8]	; (80046a0 <SPI1_IRQHandler+0x10>)
 8004696:	f002 fd03 	bl	80070a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800469a:	bf00      	nop
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	2000015c 	.word	0x2000015c

080046a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046a8:	4802      	ldr	r0, [pc, #8]	; (80046b4 <USART3_IRQHandler+0x10>)
 80046aa:	f003 fceb 	bl	8008084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046ae:	bf00      	nop
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	2000025c 	.word	0x2000025c

080046b8 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 80046bc:	4802      	ldr	r0, [pc, #8]	; (80046c8 <FSMC_IRQHandler+0x10>)
 80046be:	f001 f898 	bl	80057f2 <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 80046c2:	bf00      	nop
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	20000300 	.word	0x20000300

080046cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80046d0:	4802      	ldr	r0, [pc, #8]	; (80046dc <DMA2_Stream3_IRQHandler+0x10>)
 80046d2:	f000 fc07 	bl	8004ee4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80046d6:	bf00      	nop
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200001b4 	.word	0x200001b4

080046e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ec:	2300      	movs	r3, #0
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	e00a      	b.n	8004708 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046f2:	f3af 8000 	nop.w
 80046f6:	4601      	mov	r1, r0
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	1c5a      	adds	r2, r3, #1
 80046fc:	60ba      	str	r2, [r7, #8]
 80046fe:	b2ca      	uxtb	r2, r1
 8004700:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	3301      	adds	r3, #1
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	dbf0      	blt.n	80046f2 <_read+0x12>
	}

return len;
 8004710:	687b      	ldr	r3, [r7, #4]
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <_close>:
	}
	return len;
}

int _close(int file)
{
 800471a:	b480      	push	{r7}
 800471c:	b083      	sub	sp, #12
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
	return -1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004742:	605a      	str	r2, [r3, #4]
	return 0;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <_isatty>:

int _isatty(int file)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
	return 1;
 800475a:	2301      	movs	r3, #1
}
 800475c:	4618      	mov	r0, r3
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
	return 0;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800478c:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <_sbrk+0x5c>)
 800478e:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <_sbrk+0x60>)
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004798:	4b13      	ldr	r3, [pc, #76]	; (80047e8 <_sbrk+0x64>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d102      	bne.n	80047a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047a0:	4b11      	ldr	r3, [pc, #68]	; (80047e8 <_sbrk+0x64>)
 80047a2:	4a12      	ldr	r2, [pc, #72]	; (80047ec <_sbrk+0x68>)
 80047a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <_sbrk+0x64>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d207      	bcs.n	80047c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047b4:	f007 fe3a 	bl	800c42c <__errno>
 80047b8:	4603      	mov	r3, r0
 80047ba:	220c      	movs	r2, #12
 80047bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c2:	e009      	b.n	80047d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047c4:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <_sbrk+0x64>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <_sbrk+0x64>)
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4413      	add	r3, r2
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <_sbrk+0x64>)
 80047d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047d6:	68fb      	ldr	r3, [r7, #12]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3718      	adds	r7, #24
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	20020000 	.word	0x20020000
 80047e4:	00000c00 	.word	0x00000c00
 80047e8:	20002bfc 	.word	0x20002bfc
 80047ec:	200072a0 	.word	0x200072a0

080047f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <SystemInit+0x28>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	4a07      	ldr	r2, [pc, #28]	; (8004818 <SystemInit+0x28>)
 80047fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004800:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004804:	4b04      	ldr	r3, [pc, #16]	; (8004818 <SystemInit+0x28>)
 8004806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800480a:	609a      	str	r2, [r3, #8]
#endif
}
 800480c:	bf00      	nop
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	e000ed00 	.word	0xe000ed00

0800481c <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 8004820:	4802      	ldr	r0, [pc, #8]	; (800482c <io_fs_unmount+0x10>)
 8004822:	f000 f837 	bl	8004894 <lfs_unmount>
 8004826:	4603      	mov	r3, r0
}
 8004828:	4618      	mov	r0, r3
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20002c00 	.word	0x20002c00

08004830 <lfs_free>:
    return NULL;
#endif
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f007 ffc7 	bl	800c7cc <free>
#else
    (void)p;
#endif
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <lfs_deinit>:
cleanup:
    lfs_deinit(lfs);
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ffe7 	bl	8004830 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	2b00      	cmp	r3, #0
 800486a:	d104      	bne.n	8004876 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ffdd 	bl	8004830 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff ffd3 	bl	8004830 <lfs_free>
    }

    return 0;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <lfs_unmount>:
    lfs_unmount(lfs);
    LFS_TRACE("lfs_mount -> %d", err);
    return err;
}

int lfs_unmount(lfs_t *lfs) {
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	f640 6199 	movw	r1, #3737	; 0xe99
 80048a2:	4809      	ldr	r0, [pc, #36]	; (80048c8 <lfs_unmount+0x34>)
 80048a4:	f008 fb7e 	bl	800cfa4 <iprintf>
    int err = lfs_deinit(lfs);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ffcc 	bl	8004846 <lfs_deinit>
 80048ae:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	f640 619b 	movw	r1, #3739	; 0xe9b
 80048b6:	4805      	ldr	r0, [pc, #20]	; (80048cc <lfs_unmount+0x38>)
 80048b8:	f008 fb74 	bl	800cfa4 <iprintf>
    return err;
 80048bc:	68fb      	ldr	r3, [r7, #12]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	0800f370 	.word	0x0800f370
 80048cc:	0800f390 	.word	0x0800f390

080048d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004908 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80048d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80048d6:	e003      	b.n	80048e0 <LoopCopyDataInit>

080048d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80048d8:	4b0c      	ldr	r3, [pc, #48]	; (800490c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80048da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80048dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80048de:	3104      	adds	r1, #4

080048e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80048e0:	480b      	ldr	r0, [pc, #44]	; (8004910 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80048e2:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80048e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80048e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80048e8:	d3f6      	bcc.n	80048d8 <CopyDataInit>
  ldr  r2, =_sbss
 80048ea:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80048ec:	e002      	b.n	80048f4 <LoopFillZerobss>

080048ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80048ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048f0:	f842 3b04 	str.w	r3, [r2], #4

080048f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048f8:	d3f9      	bcc.n	80048ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80048fa:	f7ff ff79 	bl	80047f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048fe:	f007 ff3d 	bl	800c77c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004902:	f7fc fdf5 	bl	80014f0 <main>
  bx  lr    
 8004906:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004908:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800490c:	08011818 	.word	0x08011818
  ldr  r0, =_sdata
 8004910:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004914:	2000011c 	.word	0x2000011c
  ldr  r2, =_sbss
 8004918:	20000120 	.word	0x20000120
  ldr  r3, = _ebss
 800491c:	2000729c 	.word	0x2000729c

08004920 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004920:	e7fe      	b.n	8004920 <ADC_IRQHandler>
	...

08004924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004928:	4b0e      	ldr	r3, [pc, #56]	; (8004964 <HAL_Init+0x40>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a0d      	ldr	r2, [pc, #52]	; (8004964 <HAL_Init+0x40>)
 800492e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_Init+0x40>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <HAL_Init+0x40>)
 800493a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800493e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004940:	4b08      	ldr	r3, [pc, #32]	; (8004964 <HAL_Init+0x40>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a07      	ldr	r2, [pc, #28]	; (8004964 <HAL_Init+0x40>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800494c:	2003      	movs	r0, #3
 800494e:	f000 f8fc 	bl	8004b4a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004952:	200f      	movs	r0, #15
 8004954:	f7ff fe02 	bl	800455c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004958:	f7ff fc04 	bl	8004164 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40023c00 	.word	0x40023c00

08004968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800496c:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_IncTick+0x20>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	4b06      	ldr	r3, [pc, #24]	; (800498c <HAL_IncTick+0x24>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4413      	add	r3, r2
 8004978:	4a04      	ldr	r2, [pc, #16]	; (800498c <HAL_IncTick+0x24>)
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200000a0 	.word	0x200000a0
 800498c:	20002c78 	.word	0x20002c78

08004990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004990:	b480      	push	{r7}
 8004992:	af00      	add	r7, sp, #0
  return uwTick;
 8004994:	4b03      	ldr	r3, [pc, #12]	; (80049a4 <HAL_GetTick+0x14>)
 8004996:	681b      	ldr	r3, [r3, #0]
}
 8004998:	4618      	mov	r0, r3
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20002c78 	.word	0x20002c78

080049a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049b0:	f7ff ffee 	bl	8004990 <HAL_GetTick>
 80049b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c0:	d005      	beq.n	80049ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049c2:	4b0a      	ldr	r3, [pc, #40]	; (80049ec <HAL_Delay+0x44>)
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80049ce:	bf00      	nop
 80049d0:	f7ff ffde 	bl	8004990 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d8f7      	bhi.n	80049d0 <HAL_Delay+0x28>
  {
  }
}
 80049e0:	bf00      	nop
 80049e2:	bf00      	nop
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200000a0 	.word	0x200000a0

080049f0 <__NVIC_SetPriorityGrouping>:
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a22:	4a04      	ldr	r2, [pc, #16]	; (8004a34 <__NVIC_SetPriorityGrouping+0x44>)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	60d3      	str	r3, [r2, #12]
}
 8004a28:	bf00      	nop
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	e000ed00 	.word	0xe000ed00

08004a38 <__NVIC_GetPriorityGrouping>:
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <__NVIC_GetPriorityGrouping+0x18>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	0a1b      	lsrs	r3, r3, #8
 8004a42:	f003 0307 	and.w	r3, r3, #7
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00

08004a54 <__NVIC_EnableIRQ>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db0b      	blt.n	8004a7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a66:	79fb      	ldrb	r3, [r7, #7]
 8004a68:	f003 021f 	and.w	r2, r3, #31
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <__NVIC_EnableIRQ+0x38>)
 8004a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2001      	movs	r0, #1
 8004a76:	fa00 f202 	lsl.w	r2, r0, r2
 8004a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <__NVIC_SetPriority>:
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	6039      	str	r1, [r7, #0]
 8004a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0a      	blt.n	8004aba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	490c      	ldr	r1, [pc, #48]	; (8004adc <__NVIC_SetPriority+0x4c>)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ab8:	e00a      	b.n	8004ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	4908      	ldr	r1, [pc, #32]	; (8004ae0 <__NVIC_SetPriority+0x50>)
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	3b04      	subs	r3, #4
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	440b      	add	r3, r1
 8004ace:	761a      	strb	r2, [r3, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000e100 	.word	0xe000e100
 8004ae0:	e000ed00 	.word	0xe000ed00

08004ae4 <NVIC_EncodePriority>:
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b089      	sub	sp, #36	; 0x24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f1c3 0307 	rsb	r3, r3, #7
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	bf28      	it	cs
 8004b02:	2304      	movcs	r3, #4
 8004b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3304      	adds	r3, #4
 8004b0a:	2b06      	cmp	r3, #6
 8004b0c:	d902      	bls.n	8004b14 <NVIC_EncodePriority+0x30>
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	3b03      	subs	r3, #3
 8004b12:	e000      	b.n	8004b16 <NVIC_EncodePriority+0x32>
 8004b14:	2300      	movs	r3, #0
 8004b16:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	401a      	ands	r2, r3
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	fa01 f303 	lsl.w	r3, r1, r3
 8004b36:	43d9      	mvns	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b3c:	4313      	orrs	r3, r2
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3724      	adds	r7, #36	; 0x24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff ff4c 	bl	80049f0 <__NVIC_SetPriorityGrouping>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b72:	f7ff ff61 	bl	8004a38 <__NVIC_GetPriorityGrouping>
 8004b76:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	f7ff ffb1 	bl	8004ae4 <NVIC_EncodePriority>
 8004b82:	4602      	mov	r2, r0
 8004b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff ff80 	bl	8004a90 <__NVIC_SetPriority>
}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff ff54 	bl	8004a54 <__NVIC_EnableIRQ>
}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004bc0:	f7ff fee6 	bl	8004990 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e099      	b.n	8004d04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 0201 	bic.w	r2, r2, #1
 8004bee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bf0:	e00f      	b.n	8004c12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004bf2:	f7ff fecd 	bl	8004990 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b05      	cmp	r3, #5
 8004bfe:	d908      	bls.n	8004c12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2220      	movs	r2, #32
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e078      	b.n	8004d04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e8      	bne.n	8004bf2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	4b38      	ldr	r3, [pc, #224]	; (8004d0c <HAL_DMA_Init+0x158>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d107      	bne.n	8004c7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	4313      	orrs	r3, r2
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d117      	bne.n	8004cd6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00e      	beq.n	8004cd6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fb01 	bl	80052c0 <DMA_CheckFifoParam>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d008      	beq.n	8004cd6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2240      	movs	r2, #64	; 0x40
 8004cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e016      	b.n	8004d04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fab8 	bl	8005254 <DMA_CalcBaseAndBitshift>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cec:	223f      	movs	r2, #63	; 0x3f
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	f010803f 	.word	0xf010803f

08004d10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_DMA_Start_IT+0x26>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e040      	b.n	8004db8 <HAL_DMA_Start_IT+0xa8>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d12f      	bne.n	8004daa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fa4a 	bl	80051f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	223f      	movs	r2, #63	; 0x3f
 8004d6a:	409a      	lsls	r2, r3
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0216 	orr.w	r2, r2, #22
 8004d7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]
 8004da8:	e005      	b.n	8004db6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004dce:	f7ff fddf 	bl	8004990 <HAL_GetTick>
 8004dd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d008      	beq.n	8004df2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2280      	movs	r2, #128	; 0x80
 8004de4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e052      	b.n	8004e98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0216 	bic.w	r2, r2, #22
 8004e00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <HAL_DMA_Abort+0x62>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d007      	beq.n	8004e32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0208 	bic.w	r2, r2, #8
 8004e30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f022 0201 	bic.w	r2, r2, #1
 8004e40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e42:	e013      	b.n	8004e6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e44:	f7ff fda4 	bl	8004990 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b05      	cmp	r3, #5
 8004e50:	d90c      	bls.n	8004e6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e015      	b.n	8004e98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e4      	bne.n	8004e44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	223f      	movs	r2, #63	; 0x3f
 8004e80:	409a      	lsls	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d004      	beq.n	8004ebe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2280      	movs	r2, #128	; 0x80
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e00c      	b.n	8004ed8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2205      	movs	r2, #5
 8004ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ef0:	4b8e      	ldr	r3, [pc, #568]	; (800512c <HAL_DMA_IRQHandler+0x248>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a8e      	ldr	r2, [pc, #568]	; (8005130 <HAL_DMA_IRQHandler+0x24c>)
 8004ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8004efa:	0a9b      	lsrs	r3, r3, #10
 8004efc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f0e:	2208      	movs	r2, #8
 8004f10:	409a      	lsls	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4013      	ands	r3, r2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d01a      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0204 	bic.w	r2, r2, #4
 8004f36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f48:	f043 0201 	orr.w	r2, r3, #1
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	2201      	movs	r2, #1
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d012      	beq.n	8004f86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00b      	beq.n	8004f86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f72:	2201      	movs	r2, #1
 8004f74:	409a      	lsls	r2, r3
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	f043 0202 	orr.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4013      	ands	r3, r2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d012      	beq.n	8004fbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00b      	beq.n	8004fbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa8:	2204      	movs	r2, #4
 8004faa:	409a      	lsls	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb4:	f043 0204 	orr.w	r2, r3, #4
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d043      	beq.n	8005054 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d03c      	beq.n	8005054 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	2210      	movs	r2, #16
 8004fe0:	409a      	lsls	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d018      	beq.n	8005026 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d108      	bne.n	8005014 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d024      	beq.n	8005054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	4798      	blx	r3
 8005012:	e01f      	b.n	8005054 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01b      	beq.n	8005054 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	4798      	blx	r3
 8005024:	e016      	b.n	8005054 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005030:	2b00      	cmp	r3, #0
 8005032:	d107      	bne.n	8005044 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0208 	bic.w	r2, r2, #8
 8005042:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005058:	2220      	movs	r2, #32
 800505a:	409a      	lsls	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4013      	ands	r3, r2
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 808f 	beq.w	8005184 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0310 	and.w	r3, r3, #16
 8005070:	2b00      	cmp	r3, #0
 8005072:	f000 8087 	beq.w	8005184 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507a:	2220      	movs	r2, #32
 800507c:	409a      	lsls	r2, r3
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b05      	cmp	r3, #5
 800508c:	d136      	bne.n	80050fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 0216 	bic.w	r2, r2, #22
 800509c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695a      	ldr	r2, [r3, #20]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d103      	bne.n	80050be <HAL_DMA_IRQHandler+0x1da>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0208 	bic.w	r2, r2, #8
 80050cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	223f      	movs	r2, #63	; 0x3f
 80050d4:	409a      	lsls	r2, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d07e      	beq.n	80051f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	4798      	blx	r3
        }
        return;
 80050fa:	e079      	b.n	80051f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d01d      	beq.n	8005146 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511c:	2b00      	cmp	r3, #0
 800511e:	d031      	beq.n	8005184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
 8005128:	e02c      	b.n	8005184 <HAL_DMA_IRQHandler+0x2a0>
 800512a:	bf00      	nop
 800512c:	20000098 	.word	0x20000098
 8005130:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d023      	beq.n	8005184 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
 8005144:	e01e      	b.n	8005184 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10f      	bne.n	8005174 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0210 	bic.w	r2, r2, #16
 8005162:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005188:	2b00      	cmp	r3, #0
 800518a:	d032      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d022      	beq.n	80051de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2205      	movs	r2, #5
 800519c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f022 0201 	bic.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	3301      	adds	r3, #1
 80051b4:	60bb      	str	r3, [r7, #8]
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d307      	bcc.n	80051cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f2      	bne.n	80051b0 <HAL_DMA_IRQHandler+0x2cc>
 80051ca:	e000      	b.n	80051ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3
 80051ee:	e000      	b.n	80051f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80051f0:	bf00      	nop
    }
  }
}
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005214:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b40      	cmp	r3, #64	; 0x40
 8005224:	d108      	bne.n	8005238 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005236:	e007      	b.n	8005248 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
}
 8005248:	bf00      	nop
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	3b10      	subs	r3, #16
 8005264:	4a14      	ldr	r2, [pc, #80]	; (80052b8 <DMA_CalcBaseAndBitshift+0x64>)
 8005266:	fba2 2303 	umull	r2, r3, r2, r3
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800526e:	4a13      	ldr	r2, [pc, #76]	; (80052bc <DMA_CalcBaseAndBitshift+0x68>)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d909      	bls.n	8005296 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800528a:	f023 0303 	bic.w	r3, r3, #3
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	659a      	str	r2, [r3, #88]	; 0x58
 8005294:	e007      	b.n	80052a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	aaaaaaab 	.word	0xaaaaaaab
 80052bc:	08011668 	.word	0x08011668

080052c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d11f      	bne.n	800531a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d856      	bhi.n	800538e <DMA_CheckFifoParam+0xce>
 80052e0:	a201      	add	r2, pc, #4	; (adr r2, 80052e8 <DMA_CheckFifoParam+0x28>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	080052f9 	.word	0x080052f9
 80052ec:	0800530b 	.word	0x0800530b
 80052f0:	080052f9 	.word	0x080052f9
 80052f4:	0800538f 	.word	0x0800538f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d046      	beq.n	8005392 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005308:	e043      	b.n	8005392 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005312:	d140      	bne.n	8005396 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005318:	e03d      	b.n	8005396 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005322:	d121      	bne.n	8005368 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d837      	bhi.n	800539a <DMA_CheckFifoParam+0xda>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <DMA_CheckFifoParam+0x70>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	08005347 	.word	0x08005347
 8005338:	08005341 	.word	0x08005341
 800533c:	08005359 	.word	0x08005359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	73fb      	strb	r3, [r7, #15]
      break;
 8005344:	e030      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d025      	beq.n	800539e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005356:	e022      	b.n	800539e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005360:	d11f      	bne.n	80053a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005366:	e01c      	b.n	80053a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d903      	bls.n	8005376 <DMA_CheckFifoParam+0xb6>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d003      	beq.n	800537c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005374:	e018      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
      break;
 800537a:	e015      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00e      	beq.n	80053a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
      break;
 800538c:	e00b      	b.n	80053a6 <DMA_CheckFifoParam+0xe6>
      break;
 800538e:	bf00      	nop
 8005390:	e00a      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005392:	bf00      	nop
 8005394:	e008      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 8005396:	bf00      	nop
 8005398:	e006      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 800539a:	bf00      	nop
 800539c:	e004      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <DMA_CheckFifoParam+0xe8>
      break;
 80053a6:	bf00      	nop
    }
  } 
  
  return status; 
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop

080053b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b089      	sub	sp, #36	; 0x24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053ca:	2300      	movs	r3, #0
 80053cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ce:	2300      	movs	r3, #0
 80053d0:	61fb      	str	r3, [r7, #28]
 80053d2:	e16b      	b.n	80056ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053d4:	2201      	movs	r2, #1
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	4013      	ands	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	f040 815a 	bne.w	80056a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f003 0303 	and.w	r3, r3, #3
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d005      	beq.n	800540a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005406:	2b02      	cmp	r3, #2
 8005408:	d130      	bne.n	800546c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	2203      	movs	r2, #3
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43db      	mvns	r3, r3
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	4013      	ands	r3, r2
 8005420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	4313      	orrs	r3, r2
 8005432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005440:	2201      	movs	r2, #1
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	fa02 f303 	lsl.w	r3, r2, r3
 8005448:	43db      	mvns	r3, r3
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	4013      	ands	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 0201 	and.w	r2, r3, #1
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	4313      	orrs	r3, r2
 8005464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	f003 0303 	and.w	r3, r3, #3
 8005474:	2b03      	cmp	r3, #3
 8005476:	d017      	beq.n	80054a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	005b      	lsls	r3, r3, #1
 8005482:	2203      	movs	r2, #3
 8005484:	fa02 f303 	lsl.w	r3, r2, r3
 8005488:	43db      	mvns	r3, r3
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	4013      	ands	r3, r2
 800548e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	fa02 f303 	lsl.w	r3, r2, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d123      	bne.n	80054fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	08da      	lsrs	r2, r3, #3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3208      	adds	r2, #8
 80054bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	220f      	movs	r2, #15
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	08da      	lsrs	r2, r3, #3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3208      	adds	r2, #8
 80054f6:	69b9      	ldr	r1, [r7, #24]
 80054f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	2203      	movs	r2, #3
 8005508:	fa02 f303 	lsl.w	r3, r2, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	4013      	ands	r3, r2
 8005512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	f003 0203 	and.w	r2, r3, #3
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 80b4 	beq.w	80056a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800553e:	2300      	movs	r3, #0
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	4b60      	ldr	r3, [pc, #384]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005546:	4a5f      	ldr	r2, [pc, #380]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800554c:	6453      	str	r3, [r2, #68]	; 0x44
 800554e:	4b5d      	ldr	r3, [pc, #372]	; (80056c4 <HAL_GPIO_Init+0x30c>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800555a:	4a5b      	ldr	r2, [pc, #364]	; (80056c8 <HAL_GPIO_Init+0x310>)
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	089b      	lsrs	r3, r3, #2
 8005560:	3302      	adds	r3, #2
 8005562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	220f      	movs	r2, #15
 8005572:	fa02 f303 	lsl.w	r3, r2, r3
 8005576:	43db      	mvns	r3, r3
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	4013      	ands	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a52      	ldr	r2, [pc, #328]	; (80056cc <HAL_GPIO_Init+0x314>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d02b      	beq.n	80055de <HAL_GPIO_Init+0x226>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a51      	ldr	r2, [pc, #324]	; (80056d0 <HAL_GPIO_Init+0x318>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d025      	beq.n	80055da <HAL_GPIO_Init+0x222>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a50      	ldr	r2, [pc, #320]	; (80056d4 <HAL_GPIO_Init+0x31c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01f      	beq.n	80055d6 <HAL_GPIO_Init+0x21e>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a4f      	ldr	r2, [pc, #316]	; (80056d8 <HAL_GPIO_Init+0x320>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d019      	beq.n	80055d2 <HAL_GPIO_Init+0x21a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a4e      	ldr	r2, [pc, #312]	; (80056dc <HAL_GPIO_Init+0x324>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d013      	beq.n	80055ce <HAL_GPIO_Init+0x216>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a4d      	ldr	r2, [pc, #308]	; (80056e0 <HAL_GPIO_Init+0x328>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d00d      	beq.n	80055ca <HAL_GPIO_Init+0x212>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a4c      	ldr	r2, [pc, #304]	; (80056e4 <HAL_GPIO_Init+0x32c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d007      	beq.n	80055c6 <HAL_GPIO_Init+0x20e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a4b      	ldr	r2, [pc, #300]	; (80056e8 <HAL_GPIO_Init+0x330>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_GPIO_Init+0x20a>
 80055be:	2307      	movs	r3, #7
 80055c0:	e00e      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055c2:	2308      	movs	r3, #8
 80055c4:	e00c      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055c6:	2306      	movs	r3, #6
 80055c8:	e00a      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055ca:	2305      	movs	r3, #5
 80055cc:	e008      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055ce:	2304      	movs	r3, #4
 80055d0:	e006      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055d2:	2303      	movs	r3, #3
 80055d4:	e004      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e002      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <HAL_GPIO_Init+0x228>
 80055de:	2300      	movs	r3, #0
 80055e0:	69fa      	ldr	r2, [r7, #28]
 80055e2:	f002 0203 	and.w	r2, r2, #3
 80055e6:	0092      	lsls	r2, r2, #2
 80055e8:	4093      	lsls	r3, r2
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055f0:	4935      	ldr	r1, [pc, #212]	; (80056c8 <HAL_GPIO_Init+0x310>)
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	089b      	lsrs	r3, r3, #2
 80055f6:	3302      	adds	r3, #2
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	43db      	mvns	r3, r3
 8005608:	69ba      	ldr	r2, [r7, #24]
 800560a:	4013      	ands	r3, r2
 800560c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800561a:	69ba      	ldr	r2, [r7, #24]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005622:	4a32      	ldr	r2, [pc, #200]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005628:	4b30      	ldr	r3, [pc, #192]	; (80056ec <HAL_GPIO_Init+0x334>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	43db      	mvns	r3, r3
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	4013      	ands	r3, r2
 8005636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800564c:	4a27      	ldr	r2, [pc, #156]	; (80056ec <HAL_GPIO_Init+0x334>)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005652:	4b26      	ldr	r3, [pc, #152]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	43db      	mvns	r3, r3
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	4013      	ands	r3, r2
 8005660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005676:	4a1d      	ldr	r2, [pc, #116]	; (80056ec <HAL_GPIO_Init+0x334>)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_GPIO_Init+0x334>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	43db      	mvns	r3, r3
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	4013      	ands	r3, r2
 800568a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80056a0:	4a12      	ldr	r2, [pc, #72]	; (80056ec <HAL_GPIO_Init+0x334>)
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	61fb      	str	r3, [r7, #28]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	f67f ae90 	bls.w	80053d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80056b4:	bf00      	nop
 80056b6:	bf00      	nop
 80056b8:	3724      	adds	r7, #36	; 0x24
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40023800 	.word	0x40023800
 80056c8:	40013800 	.word	0x40013800
 80056cc:	40020000 	.word	0x40020000
 80056d0:	40020400 	.word	0x40020400
 80056d4:	40020800 	.word	0x40020800
 80056d8:	40020c00 	.word	0x40020c00
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40021400 	.word	0x40021400
 80056e4:	40021800 	.word	0x40021800
 80056e8:	40021c00 	.word	0x40021c00
 80056ec:	40013c00 	.word	0x40013c00

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800570c:	e003      	b.n	8005716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005722:	b480      	push	{r7}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005734:	887a      	ldrh	r2, [r7, #2]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4013      	ands	r3, r2
 800573a:	041a      	lsls	r2, r3, #16
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	43d9      	mvns	r1, r3
 8005740:	887b      	ldrh	r3, [r7, #2]
 8005742:	400b      	ands	r3, r1
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	619a      	str	r2, [r3, #24]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e03e      	b.n	80057ea <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f7fe fee1 	bl	8004548 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f003 fc3f 	bl	8009014 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6818      	ldr	r0, [r3, #0]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	461a      	mov	r2, r3
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	f003 fc83 	bl	80090ac <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	f003 fcb0 	bl	8009116 <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b10      	cmp	r3, #16
 80057bc:	d108      	bne.n	80057d0 <HAL_NAND_Init+0x7a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f042 0204 	orr.w	r2, r2, #4
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e007      	b.n	80057e0 <HAL_NAND_Init+0x8a>
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6a1a      	ldr	r2, [r3, #32]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0204 	orr.w	r2, r2, #4
 80057de:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d10a      	bne.n	8005818 <HAL_NAND_IRQHandler+0x26>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f003 0301 	and.w	r3, r3, #1
 800580c:	2b01      	cmp	r3, #1
 800580e:	bf0c      	ite	eq
 8005810:	2301      	moveq	r3, #1
 8005812:	2300      	movne	r3, #0
 8005814:	b2db      	uxtb	r3, r3
 8005816:	e009      	b.n	800582c <HAL_NAND_IRQHandler+0x3a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b01      	cmp	r3, #1
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d017      	beq.n	8005860 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7fd f895 	bl	8002960 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b10      	cmp	r3, #16
 800583c:	d108      	bne.n	8005850 <HAL_NAND_IRQHandler+0x5e>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0201 	bic.w	r2, r2, #1
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	e007      	b.n	8005860 <HAL_NAND_IRQHandler+0x6e>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	2b10      	cmp	r3, #16
 8005866:	d10a      	bne.n	800587e <HAL_NAND_IRQHandler+0x8c>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b02      	cmp	r3, #2
 8005874:	bf0c      	ite	eq
 8005876:	2301      	moveq	r3, #1
 8005878:	2300      	movne	r3, #0
 800587a:	b2db      	uxtb	r3, r3
 800587c:	e009      	b.n	8005892 <HAL_NAND_IRQHandler+0xa0>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b02      	cmp	r3, #2
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d017      	beq.n	80058c6 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fd f862 	bl	8002960 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d108      	bne.n	80058b6 <HAL_NAND_IRQHandler+0xc4>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f022 0202 	bic.w	r2, r2, #2
 80058b2:	605a      	str	r2, [r3, #4]
 80058b4:	e007      	b.n	80058c6 <HAL_NAND_IRQHandler+0xd4>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0202 	bic.w	r2, r2, #2
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b10      	cmp	r3, #16
 80058cc:	d10a      	bne.n	80058e4 <HAL_NAND_IRQHandler+0xf2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b04      	cmp	r3, #4
 80058da:	bf0c      	ite	eq
 80058dc:	2301      	moveq	r3, #1
 80058de:	2300      	movne	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	e009      	b.n	80058f8 <HAL_NAND_IRQHandler+0x106>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	f003 0304 	and.w	r3, r3, #4
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf0c      	ite	eq
 80058f2:	2301      	moveq	r3, #1
 80058f4:	2300      	movne	r3, #0
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d017      	beq.n	800592c <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fd f82f 	bl	8002960 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	2b10      	cmp	r3, #16
 8005908:	d108      	bne.n	800591c <HAL_NAND_IRQHandler+0x12a>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 0204 	bic.w	r2, r2, #4
 8005918:	605a      	str	r2, [r3, #4]
 800591a:	e007      	b.n	800592c <HAL_NAND_IRQHandler+0x13a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0204 	bic.w	r2, r2, #4
 800592a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	2b10      	cmp	r3, #16
 8005932:	d10a      	bne.n	800594a <HAL_NAND_IRQHandler+0x158>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	bf0c      	ite	eq
 8005942:	2301      	moveq	r3, #1
 8005944:	2300      	movne	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e009      	b.n	800595e <HAL_NAND_IRQHandler+0x16c>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	bf0c      	ite	eq
 8005958:	2301      	moveq	r3, #1
 800595a:	2300      	movne	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d017      	beq.n	8005992 <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fc fffc 	bl	8002960 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b10      	cmp	r3, #16
 800596e:	d108      	bne.n	8005982 <HAL_NAND_IRQHandler+0x190>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8005980:	e007      	b.n	8005992 <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005990:	625a      	str	r2, [r3, #36]	; 0x24
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NAND_ECC_Disable>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_ECC_Disable(NAND_HandleTypeDef *hnand)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d101      	bne.n	80059b2 <HAL_NAND_ECC_Disable+0x18>
  {
    return HAL_BUSY;
 80059ae:	2302      	movs	r3, #2
 80059b0:	e018      	b.n	80059e4 <HAL_NAND_ECC_Disable+0x4a>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d111      	bne.n	80059e2 <HAL_NAND_ECC_Disable+0x48>
  {
    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2202      	movs	r2, #2
 80059c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable ECC feature */
    (void)FMC_NAND_ECC_Disable(hnand->Instance, hnand->Init.NandBank);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f003 fbd5 	bl	8009180 <FSMC_NAND_ECC_Disable>

    /* Update the NAND state */
    hnand->State = HAL_NAND_STATE_READY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	e000      	b.n	80059e4 <HAL_NAND_ECC_Disable+0x4a>
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059fa:	b2db      	uxtb	r3, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005a10:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005a14:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	2270      	movs	r2, #112	; 0x70
 8005a1e:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d001      	beq.n	8005a36 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e007      	b.n	8005a46 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005a40:	2340      	movs	r3, #64	; 0x40
 8005a42:	e000      	b.n	8005a46 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005a44:	2300      	movs	r3, #0
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr
	...

08005a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e267      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d075      	beq.n	8005b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a72:	4b88      	ldr	r3, [pc, #544]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d00c      	beq.n	8005a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a7e:	4b85      	ldr	r3, [pc, #532]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a86:	2b08      	cmp	r3, #8
 8005a88:	d112      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a8a:	4b82      	ldr	r3, [pc, #520]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a96:	d10b      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a98:	4b7e      	ldr	r3, [pc, #504]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d05b      	beq.n	8005b5c <HAL_RCC_OscConfig+0x108>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d157      	bne.n	8005b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e242      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d106      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x74>
 8005aba:	4b76      	ldr	r3, [pc, #472]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a75      	ldr	r2, [pc, #468]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	e01d      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ad0:	d10c      	bne.n	8005aec <HAL_RCC_OscConfig+0x98>
 8005ad2:	4b70      	ldr	r3, [pc, #448]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a6f      	ldr	r2, [pc, #444]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005adc:	6013      	str	r3, [r2, #0]
 8005ade:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6c      	ldr	r2, [pc, #432]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0xb0>
 8005aec:	4b69      	ldr	r3, [pc, #420]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a68      	ldr	r2, [pc, #416]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af6:	6013      	str	r3, [r2, #0]
 8005af8:	4b66      	ldr	r3, [pc, #408]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a65      	ldr	r2, [pc, #404]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b0c:	f7fe ff40 	bl	8004990 <HAL_GetTick>
 8005b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b12:	e008      	b.n	8005b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b14:	f7fe ff3c 	bl	8004990 <HAL_GetTick>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	2b64      	cmp	r3, #100	; 0x64
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e207      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b26:	4b5b      	ldr	r3, [pc, #364]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f0      	beq.n	8005b14 <HAL_RCC_OscConfig+0xc0>
 8005b32:	e014      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b34:	f7fe ff2c 	bl	8004990 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b3a:	e008      	b.n	8005b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b3c:	f7fe ff28 	bl	8004990 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	2b64      	cmp	r3, #100	; 0x64
 8005b48:	d901      	bls.n	8005b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e1f3      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4e:	4b51      	ldr	r3, [pc, #324]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1f0      	bne.n	8005b3c <HAL_RCC_OscConfig+0xe8>
 8005b5a:	e000      	b.n	8005b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d063      	beq.n	8005c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00b      	beq.n	8005b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b76:	4b47      	ldr	r3, [pc, #284]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b7e:	2b08      	cmp	r3, #8
 8005b80:	d11c      	bne.n	8005bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b82:	4b44      	ldr	r3, [pc, #272]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d116      	bne.n	8005bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b8e:	4b41      	ldr	r3, [pc, #260]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x152>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d001      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e1c7      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ba6:	4b3b      	ldr	r3, [pc, #236]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	4937      	ldr	r1, [pc, #220]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bba:	e03a      	b.n	8005c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d020      	beq.n	8005c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bc4:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <HAL_RCC_OscConfig+0x244>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fe fee1 	bl	8004990 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd2:	f7fe fedd 	bl	8004990 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e1a8      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be4:	4b2b      	ldr	r3, [pc, #172]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4925      	ldr	r1, [pc, #148]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c00:	4313      	orrs	r3, r2
 8005c02:	600b      	str	r3, [r1, #0]
 8005c04:	e015      	b.n	8005c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c06:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <HAL_RCC_OscConfig+0x244>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe fec0 	bl	8004990 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe febc 	bl	8004990 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e187      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c26:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d036      	beq.n	8005cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d016      	beq.n	8005c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c46:	4b15      	ldr	r3, [pc, #84]	; (8005c9c <HAL_RCC_OscConfig+0x248>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fe fea0 	bl	8004990 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c52:	e008      	b.n	8005c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c54:	f7fe fe9c 	bl	8004990 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d901      	bls.n	8005c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e167      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c66:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <HAL_RCC_OscConfig+0x240>)
 8005c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d0f0      	beq.n	8005c54 <HAL_RCC_OscConfig+0x200>
 8005c72:	e01b      	b.n	8005cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c74:	4b09      	ldr	r3, [pc, #36]	; (8005c9c <HAL_RCC_OscConfig+0x248>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c7a:	f7fe fe89 	bl	8004990 <HAL_GetTick>
 8005c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c80:	e00e      	b.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c82:	f7fe fe85 	bl	8004990 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d907      	bls.n	8005ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	e150      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
 8005c94:	40023800 	.word	0x40023800
 8005c98:	42470000 	.word	0x42470000
 8005c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ca0:	4b88      	ldr	r3, [pc, #544]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1ea      	bne.n	8005c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0304 	and.w	r3, r3, #4
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8097 	beq.w	8005de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cbe:	4b81      	ldr	r3, [pc, #516]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10f      	bne.n	8005cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cda:	4b7a      	ldr	r3, [pc, #488]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce2:	60bb      	str	r3, [r7, #8]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cea:	4b77      	ldr	r3, [pc, #476]	; (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d118      	bne.n	8005d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cf6:	4b74      	ldr	r3, [pc, #464]	; (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a73      	ldr	r2, [pc, #460]	; (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d02:	f7fe fe45 	bl	8004990 <HAL_GetTick>
 8005d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d08:	e008      	b.n	8005d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fe fe41 	bl	8004990 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d901      	bls.n	8005d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e10c      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1c:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <HAL_RCC_OscConfig+0x474>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0f0      	beq.n	8005d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d106      	bne.n	8005d3e <HAL_RCC_OscConfig+0x2ea>
 8005d30:	4b64      	ldr	r3, [pc, #400]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d34:	4a63      	ldr	r2, [pc, #396]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3c:	e01c      	b.n	8005d78 <HAL_RCC_OscConfig+0x324>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d10c      	bne.n	8005d60 <HAL_RCC_OscConfig+0x30c>
 8005d46:	4b5f      	ldr	r3, [pc, #380]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4a5e      	ldr	r2, [pc, #376]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	6713      	str	r3, [r2, #112]	; 0x70
 8005d52:	4b5c      	ldr	r3, [pc, #368]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a5b      	ldr	r2, [pc, #364]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d58:	f043 0301 	orr.w	r3, r3, #1
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d5e:	e00b      	b.n	8005d78 <HAL_RCC_OscConfig+0x324>
 8005d60:	4b58      	ldr	r3, [pc, #352]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d64:	4a57      	ldr	r2, [pc, #348]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d66:	f023 0301 	bic.w	r3, r3, #1
 8005d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d6c:	4b55      	ldr	r3, [pc, #340]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d70:	4a54      	ldr	r2, [pc, #336]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005d72:	f023 0304 	bic.w	r3, r3, #4
 8005d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d015      	beq.n	8005dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fe fe06 	bl	8004990 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d88:	f7fe fe02 	bl	8004990 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e0cb      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d9e:	4b49      	ldr	r3, [pc, #292]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da2:	f003 0302 	and.w	r3, r3, #2
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d0ee      	beq.n	8005d88 <HAL_RCC_OscConfig+0x334>
 8005daa:	e014      	b.n	8005dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dac:	f7fe fdf0 	bl	8004990 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005db4:	f7fe fdec 	bl	8004990 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e0b5      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dca:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ee      	bne.n	8005db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d105      	bne.n	8005de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ddc:	4b39      	ldr	r3, [pc, #228]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de0:	4a38      	ldr	r2, [pc, #224]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80a1 	beq.w	8005f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005df2:	4b34      	ldr	r3, [pc, #208]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d05c      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d141      	bne.n	8005e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e06:	4b31      	ldr	r3, [pc, #196]	; (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e0c:	f7fe fdc0 	bl	8004990 <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e14:	f7fe fdbc 	bl	8004990 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d901      	bls.n	8005e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e087      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e26:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f0      	bne.n	8005e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	69da      	ldr	r2, [r3, #28]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	019b      	lsls	r3, r3, #6
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	041b      	lsls	r3, r3, #16
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	491b      	ldr	r1, [pc, #108]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e5c:	4b1b      	ldr	r3, [pc, #108]	; (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e5e:	2201      	movs	r2, #1
 8005e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e62:	f7fe fd95 	bl	8004990 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e68:	e008      	b.n	8005e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e6a:	f7fe fd91 	bl	8004990 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d901      	bls.n	8005e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e05c      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e7c:	4b11      	ldr	r3, [pc, #68]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0f0      	beq.n	8005e6a <HAL_RCC_OscConfig+0x416>
 8005e88:	e054      	b.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e8a:	4b10      	ldr	r3, [pc, #64]	; (8005ecc <HAL_RCC_OscConfig+0x478>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e90:	f7fe fd7e 	bl	8004990 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e98:	f7fe fd7a 	bl	8004990 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e045      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eaa:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_RCC_OscConfig+0x470>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1f0      	bne.n	8005e98 <HAL_RCC_OscConfig+0x444>
 8005eb6:	e03d      	b.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d107      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e038      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
 8005ec4:	40023800 	.word	0x40023800
 8005ec8:	40007000 	.word	0x40007000
 8005ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ed0:	4b1b      	ldr	r3, [pc, #108]	; (8005f40 <HAL_RCC_OscConfig+0x4ec>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d028      	beq.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d121      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d11a      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f00:	4013      	ands	r3, r2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d111      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	085b      	lsrs	r3, r3, #1
 8005f18:	3b01      	subs	r3, #1
 8005f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d001      	beq.n	8005f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800

08005f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b084      	sub	sp, #16
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e0cc      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f58:	4b68      	ldr	r3, [pc, #416]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d90c      	bls.n	8005f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f66:	4b65      	ldr	r3, [pc, #404]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6e:	4b63      	ldr	r3, [pc, #396]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0307 	and.w	r3, r3, #7
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d001      	beq.n	8005f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0b8      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d020      	beq.n	8005fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0304 	and.w	r3, r3, #4
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f98:	4b59      	ldr	r3, [pc, #356]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	4a58      	ldr	r2, [pc, #352]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d005      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fb0:	4b53      	ldr	r3, [pc, #332]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	4a52      	ldr	r2, [pc, #328]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fbc:	4b50      	ldr	r3, [pc, #320]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	494d      	ldr	r1, [pc, #308]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d044      	beq.n	8006064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fe2:	4b47      	ldr	r3, [pc, #284]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d119      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e07f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d003      	beq.n	8006002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d107      	bne.n	8006012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006002:	4b3f      	ldr	r3, [pc, #252]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d109      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e06f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006012:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e067      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006022:	4b37      	ldr	r3, [pc, #220]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f023 0203 	bic.w	r2, r3, #3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	4934      	ldr	r1, [pc, #208]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	4313      	orrs	r3, r2
 8006032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006034:	f7fe fcac 	bl	8004990 <HAL_GetTick>
 8006038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800603a:	e00a      	b.n	8006052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800603c:	f7fe fca8 	bl	8004990 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e04f      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006052:	4b2b      	ldr	r3, [pc, #172]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 020c 	and.w	r2, r3, #12
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	429a      	cmp	r2, r3
 8006062:	d1eb      	bne.n	800603c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006064:	4b25      	ldr	r3, [pc, #148]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	683a      	ldr	r2, [r7, #0]
 800606e:	429a      	cmp	r2, r3
 8006070:	d20c      	bcs.n	800608c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006072:	4b22      	ldr	r3, [pc, #136]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800607a:	4b20      	ldr	r3, [pc, #128]	; (80060fc <HAL_RCC_ClockConfig+0x1b8>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d001      	beq.n	800608c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e032      	b.n	80060f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006098:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	4916      	ldr	r1, [pc, #88]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060b6:	4b12      	ldr	r3, [pc, #72]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	490e      	ldr	r1, [pc, #56]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ca:	f000 f821 	bl	8006110 <HAL_RCC_GetSysClockFreq>
 80060ce:	4602      	mov	r2, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	; (8006100 <HAL_RCC_ClockConfig+0x1bc>)
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	091b      	lsrs	r3, r3, #4
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	490a      	ldr	r1, [pc, #40]	; (8006104 <HAL_RCC_ClockConfig+0x1c0>)
 80060dc:	5ccb      	ldrb	r3, [r1, r3]
 80060de:	fa22 f303 	lsr.w	r3, r2, r3
 80060e2:	4a09      	ldr	r2, [pc, #36]	; (8006108 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060e6:	4b09      	ldr	r3, [pc, #36]	; (800610c <HAL_RCC_ClockConfig+0x1c8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fa36 	bl	800455c <HAL_InitTick>

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3710      	adds	r7, #16
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40023c00 	.word	0x40023c00
 8006100:	40023800 	.word	0x40023800
 8006104:	08011650 	.word	0x08011650
 8006108:	20000098 	.word	0x20000098
 800610c:	2000009c 	.word	0x2000009c

08006110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006114:	b094      	sub	sp, #80	; 0x50
 8006116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006118:	2300      	movs	r3, #0
 800611a:	647b      	str	r3, [r7, #68]	; 0x44
 800611c:	2300      	movs	r3, #0
 800611e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006120:	2300      	movs	r3, #0
 8006122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006124:	2300      	movs	r3, #0
 8006126:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006128:	4b79      	ldr	r3, [pc, #484]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f003 030c 	and.w	r3, r3, #12
 8006130:	2b08      	cmp	r3, #8
 8006132:	d00d      	beq.n	8006150 <HAL_RCC_GetSysClockFreq+0x40>
 8006134:	2b08      	cmp	r3, #8
 8006136:	f200 80e1 	bhi.w	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <HAL_RCC_GetSysClockFreq+0x34>
 800613e:	2b04      	cmp	r3, #4
 8006140:	d003      	beq.n	800614a <HAL_RCC_GetSysClockFreq+0x3a>
 8006142:	e0db      	b.n	80062fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006144:	4b73      	ldr	r3, [pc, #460]	; (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 8006146:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006148:	e0db      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800614a:	4b73      	ldr	r3, [pc, #460]	; (8006318 <HAL_RCC_GetSysClockFreq+0x208>)
 800614c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800614e:	e0d8      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006150:	4b6f      	ldr	r3, [pc, #444]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006158:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800615a:	4b6d      	ldr	r3, [pc, #436]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d063      	beq.n	800622e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006166:	4b6a      	ldr	r3, [pc, #424]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	099b      	lsrs	r3, r3, #6
 800616c:	2200      	movs	r2, #0
 800616e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006170:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006178:	633b      	str	r3, [r7, #48]	; 0x30
 800617a:	2300      	movs	r3, #0
 800617c:	637b      	str	r3, [r7, #52]	; 0x34
 800617e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	f04f 0000 	mov.w	r0, #0
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	0159      	lsls	r1, r3, #5
 8006190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006194:	0150      	lsls	r0, r2, #5
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4621      	mov	r1, r4
 800619c:	1a51      	subs	r1, r2, r1
 800619e:	6139      	str	r1, [r7, #16]
 80061a0:	4629      	mov	r1, r5
 80061a2:	eb63 0301 	sbc.w	r3, r3, r1
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061b4:	4659      	mov	r1, fp
 80061b6:	018b      	lsls	r3, r1, #6
 80061b8:	4651      	mov	r1, sl
 80061ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061be:	4651      	mov	r1, sl
 80061c0:	018a      	lsls	r2, r1, #6
 80061c2:	4651      	mov	r1, sl
 80061c4:	ebb2 0801 	subs.w	r8, r2, r1
 80061c8:	4659      	mov	r1, fp
 80061ca:	eb63 0901 	sbc.w	r9, r3, r1
 80061ce:	f04f 0200 	mov.w	r2, #0
 80061d2:	f04f 0300 	mov.w	r3, #0
 80061d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061e2:	4690      	mov	r8, r2
 80061e4:	4699      	mov	r9, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	eb18 0303 	adds.w	r3, r8, r3
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	462b      	mov	r3, r5
 80061f0:	eb49 0303 	adc.w	r3, r9, r3
 80061f4:	60fb      	str	r3, [r7, #12]
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006202:	4629      	mov	r1, r5
 8006204:	024b      	lsls	r3, r1, #9
 8006206:	4621      	mov	r1, r4
 8006208:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800620c:	4621      	mov	r1, r4
 800620e:	024a      	lsls	r2, r1, #9
 8006210:	4610      	mov	r0, r2
 8006212:	4619      	mov	r1, r3
 8006214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006216:	2200      	movs	r2, #0
 8006218:	62bb      	str	r3, [r7, #40]	; 0x28
 800621a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800621c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006220:	f7fa fb84 	bl	800092c <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4613      	mov	r3, r2
 800622a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800622c:	e058      	b.n	80062e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800622e:	4b38      	ldr	r3, [pc, #224]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	099b      	lsrs	r3, r3, #6
 8006234:	2200      	movs	r2, #0
 8006236:	4618      	mov	r0, r3
 8006238:	4611      	mov	r1, r2
 800623a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800623e:	623b      	str	r3, [r7, #32]
 8006240:	2300      	movs	r3, #0
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
 8006244:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006248:	4642      	mov	r2, r8
 800624a:	464b      	mov	r3, r9
 800624c:	f04f 0000 	mov.w	r0, #0
 8006250:	f04f 0100 	mov.w	r1, #0
 8006254:	0159      	lsls	r1, r3, #5
 8006256:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800625a:	0150      	lsls	r0, r2, #5
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4641      	mov	r1, r8
 8006262:	ebb2 0a01 	subs.w	sl, r2, r1
 8006266:	4649      	mov	r1, r9
 8006268:	eb63 0b01 	sbc.w	fp, r3, r1
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006278:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800627c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006280:	ebb2 040a 	subs.w	r4, r2, sl
 8006284:	eb63 050b 	sbc.w	r5, r3, fp
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	00eb      	lsls	r3, r5, #3
 8006292:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006296:	00e2      	lsls	r2, r4, #3
 8006298:	4614      	mov	r4, r2
 800629a:	461d      	mov	r5, r3
 800629c:	4643      	mov	r3, r8
 800629e:	18e3      	adds	r3, r4, r3
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	464b      	mov	r3, r9
 80062a4:	eb45 0303 	adc.w	r3, r5, r3
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	f04f 0300 	mov.w	r3, #0
 80062b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062b6:	4629      	mov	r1, r5
 80062b8:	028b      	lsls	r3, r1, #10
 80062ba:	4621      	mov	r1, r4
 80062bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062c0:	4621      	mov	r1, r4
 80062c2:	028a      	lsls	r2, r1, #10
 80062c4:	4610      	mov	r0, r2
 80062c6:	4619      	mov	r1, r3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062ca:	2200      	movs	r2, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	61fa      	str	r2, [r7, #28]
 80062d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062d4:	f7fa fb2a 	bl	800092c <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4613      	mov	r3, r2
 80062de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062e0:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <HAL_RCC_GetSysClockFreq+0x200>)
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	0c1b      	lsrs	r3, r3, #16
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	3301      	adds	r3, #1
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80062f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80062fa:	e002      	b.n	8006302 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062fc:	4b05      	ldr	r3, [pc, #20]	; (8006314 <HAL_RCC_GetSysClockFreq+0x204>)
 80062fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006302:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006304:	4618      	mov	r0, r3
 8006306:	3750      	adds	r7, #80	; 0x50
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	40023800 	.word	0x40023800
 8006314:	00f42400 	.word	0x00f42400
 8006318:	007a1200 	.word	0x007a1200

0800631c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006320:	4b03      	ldr	r3, [pc, #12]	; (8006330 <HAL_RCC_GetHCLKFreq+0x14>)
 8006322:	681b      	ldr	r3, [r3, #0]
}
 8006324:	4618      	mov	r0, r3
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000098 	.word	0x20000098

08006334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006338:	f7ff fff0 	bl	800631c <HAL_RCC_GetHCLKFreq>
 800633c:	4602      	mov	r2, r0
 800633e:	4b05      	ldr	r3, [pc, #20]	; (8006354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	0a9b      	lsrs	r3, r3, #10
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	4903      	ldr	r1, [pc, #12]	; (8006358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800634a:	5ccb      	ldrb	r3, [r1, r3]
 800634c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006350:	4618      	mov	r0, r3
 8006352:	bd80      	pop	{r7, pc}
 8006354:	40023800 	.word	0x40023800
 8006358:	08011660 	.word	0x08011660

0800635c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006360:	f7ff ffdc 	bl	800631c <HAL_RCC_GetHCLKFreq>
 8006364:	4602      	mov	r2, r0
 8006366:	4b05      	ldr	r3, [pc, #20]	; (800637c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	0b5b      	lsrs	r3, r3, #13
 800636c:	f003 0307 	and.w	r3, r3, #7
 8006370:	4903      	ldr	r1, [pc, #12]	; (8006380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006372:	5ccb      	ldrb	r3, [r1, r3]
 8006374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	bd80      	pop	{r7, pc}
 800637c:	40023800 	.word	0x40023800
 8006380:	08011660 	.word	0x08011660

08006384 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	220f      	movs	r2, #15
 8006392:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006394:	4b12      	ldr	r3, [pc, #72]	; (80063e0 <HAL_RCC_GetClockConfig+0x5c>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0203 	and.w	r2, r3, #3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063a0:	4b0f      	ldr	r3, [pc, #60]	; (80063e0 <HAL_RCC_GetClockConfig+0x5c>)
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <HAL_RCC_GetClockConfig+0x5c>)
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063b8:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <HAL_RCC_GetClockConfig+0x5c>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	08db      	lsrs	r3, r3, #3
 80063be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063c6:	4b07      	ldr	r3, [pc, #28]	; (80063e4 <HAL_RCC_GetClockConfig+0x60>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0207 	and.w	r2, r3, #7
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	601a      	str	r2, [r3, #0]
}
 80063d2:	bf00      	nop
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40023800 	.word	0x40023800
 80063e4:	40023c00 	.word	0x40023c00

080063e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	2b00      	cmp	r3, #0
 8006402:	d105      	bne.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800640c:	2b00      	cmp	r3, #0
 800640e:	d035      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006410:	4b62      	ldr	r3, [pc, #392]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006416:	f7fe fabb 	bl	8004990 <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800641e:	f7fe fab7 	bl	8004990 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e0b0      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006430:	4b5b      	ldr	r3, [pc, #364]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f0      	bne.n	800641e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	019a      	lsls	r2, r3, #6
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	071b      	lsls	r3, r3, #28
 8006448:	4955      	ldr	r1, [pc, #340]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800644a:	4313      	orrs	r3, r2
 800644c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006450:	4b52      	ldr	r3, [pc, #328]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006452:	2201      	movs	r2, #1
 8006454:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006456:	f7fe fa9b 	bl	8004990 <HAL_GetTick>
 800645a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800645c:	e008      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800645e:	f7fe fa97 	bl	8004990 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d901      	bls.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	e090      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d0f0      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0302 	and.w	r3, r3, #2
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 8083 	beq.w	8006590 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800648a:	2300      	movs	r3, #0
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4b44      	ldr	r3, [pc, #272]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	4a43      	ldr	r2, [pc, #268]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006498:	6413      	str	r3, [r2, #64]	; 0x40
 800649a:	4b41      	ldr	r3, [pc, #260]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064a6:	4b3f      	ldr	r3, [pc, #252]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a3e      	ldr	r2, [pc, #248]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064b2:	f7fe fa6d 	bl	8004990 <HAL_GetTick>
 80064b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064b8:	e008      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064ba:	f7fe fa69 	bl	8004990 <HAL_GetTick>
 80064be:	4602      	mov	r2, r0
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d901      	bls.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e062      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064cc:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d0f0      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80064d8:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d02f      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d028      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80064f6:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006500:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006502:	2201      	movs	r2, #1
 8006504:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006506:	4b28      	ldr	r3, [pc, #160]	; (80065a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800650c:	4a24      	ldr	r2, [pc, #144]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006512:	4b23      	ldr	r3, [pc, #140]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b01      	cmp	r3, #1
 800651c:	d114      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800651e:	f7fe fa37 	bl	8004990 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006524:	e00a      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006526:	f7fe fa33 	bl	8004990 <HAL_GetTick>
 800652a:	4602      	mov	r2, r0
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	1ad3      	subs	r3, r2, r3
 8006530:	f241 3288 	movw	r2, #5000	; 0x1388
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e02a      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800653c:	4b18      	ldr	r3, [pc, #96]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0ee      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	68db      	ldr	r3, [r3, #12]
 800654c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006550:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006554:	d10d      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006556:	4b12      	ldr	r3, [pc, #72]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800656a:	490d      	ldr	r1, [pc, #52]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800656c:	4313      	orrs	r3, r2
 800656e:	608b      	str	r3, [r1, #8]
 8006570:	e005      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006572:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	4a0a      	ldr	r2, [pc, #40]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006578:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800657c:	6093      	str	r3, [r2, #8]
 800657e:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006580:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800658a:	4905      	ldr	r1, [pc, #20]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800658c:	4313      	orrs	r3, r2
 800658e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006590:	2300      	movs	r3, #0
}
 8006592:	4618      	mov	r0, r3
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	42470068 	.word	0x42470068
 80065a0:	40023800 	.word	0x40023800
 80065a4:	40007000 	.word	0x40007000
 80065a8:	42470e40 	.word	0x42470e40

080065ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e066      	b.n	8006690 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	7f5b      	ldrb	r3, [r3, #29]
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fd fe02 	bl	80041dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2202      	movs	r2, #2
 80065dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	22ca      	movs	r2, #202	; 0xca
 80065e4:	625a      	str	r2, [r3, #36]	; 0x24
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2253      	movs	r2, #83	; 0x53
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa45 	bl	8006a7e <RTC_EnterInitMode>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d12c      	bne.n	8006658 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6812      	ldr	r2, [r2, #0]
 8006608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800660c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006610:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6899      	ldr	r1, [r3, #8]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	691b      	ldr	r3, [r3, #16]
 8006620:	431a      	orrs	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68d2      	ldr	r2, [r2, #12]
 8006638:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6919      	ldr	r1, [r3, #16]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	041a      	lsls	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fa4c 	bl	8006aec <RTC_ExitInitMode>
 8006654:	4603      	mov	r3, r0
 8006656:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d113      	bne.n	8006686 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800666c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	22ff      	movs	r2, #255	; 0xff
 800668c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800668e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3710      	adds	r7, #16
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	7f1b      	ldrb	r3, [r3, #28]
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_RTC_SetTime+0x1c>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e087      	b.n	80067c4 <HAL_RTC_SetTime+0x12c>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2202      	movs	r2, #2
 80066be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d126      	bne.n	8006714 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d102      	bne.n	80066da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2200      	movs	r2, #0
 80066d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 fa29 	bl	8006b36 <RTC_ByteToBcd2>
 80066e4:	4603      	mov	r3, r0
 80066e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	785b      	ldrb	r3, [r3, #1]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fa22 	bl	8006b36 <RTC_ByteToBcd2>
 80066f2:	4603      	mov	r3, r0
 80066f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80066f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	789b      	ldrb	r3, [r3, #2]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 fa1a 	bl	8006b36 <RTC_ByteToBcd2>
 8006702:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006704:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	78db      	ldrb	r3, [r3, #3]
 800670c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	e018      	b.n	8006746 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d102      	bne.n	8006728 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2200      	movs	r2, #0
 8006726:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006734:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800673a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	78db      	ldrb	r3, [r3, #3]
 8006740:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006742:	4313      	orrs	r3, r2
 8006744:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	22ca      	movs	r2, #202	; 0xca
 800674c:	625a      	str	r2, [r3, #36]	; 0x24
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2253      	movs	r2, #83	; 0x53
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f991 	bl	8006a7e <RTC_EnterInitMode>
 800675c:	4603      	mov	r3, r0
 800675e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d120      	bne.n	80067a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006770:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006774:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689a      	ldr	r2, [r3, #8]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006784:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6899      	ldr	r1, [r3, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f9a4 	bl	8006aec <RTC_ExitInitMode>
 80067a4:	4603      	mov	r3, r0
 80067a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067a8:	7cfb      	ldrb	r3, [r7, #19]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d102      	bne.n	80067b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	22ff      	movs	r2, #255	; 0xff
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	771a      	strb	r2, [r3, #28]

  return status;
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd90      	pop	{r4, r7, pc}

080067cc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006802:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b2db      	uxtb	r3, r3
 800680a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800680e:	b2da      	uxtb	r2, r3
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	0a1b      	lsrs	r3, r3, #8
 8006818:	b2db      	uxtb	r3, r3
 800681a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800681e:	b2da      	uxtb	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	b2db      	uxtb	r3, r3
 8006828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800682c:	b2da      	uxtb	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	0d9b      	lsrs	r3, r3, #22
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 0301 	and.w	r3, r3, #1
 800683c:	b2da      	uxtb	r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11a      	bne.n	800687e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	4618      	mov	r0, r3
 800684e:	f000 f98f 	bl	8006b70 <RTC_Bcd2ToByte>
 8006852:	4603      	mov	r3, r0
 8006854:	461a      	mov	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f986 	bl	8006b70 <RTC_Bcd2ToByte>
 8006864:	4603      	mov	r3, r0
 8006866:	461a      	mov	r2, r3
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	789b      	ldrb	r3, [r3, #2]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 f97d 	bl	8006b70 <RTC_Bcd2ToByte>
 8006876:	4603      	mov	r3, r0
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006888:	b590      	push	{r4, r7, lr}
 800688a:	b087      	sub	sp, #28
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	7f1b      	ldrb	r3, [r3, #28]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d101      	bne.n	80068a4 <HAL_RTC_SetDate+0x1c>
 80068a0:	2302      	movs	r3, #2
 80068a2:	e071      	b.n	8006988 <HAL_RTC_SetDate+0x100>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2201      	movs	r2, #1
 80068a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2202      	movs	r2, #2
 80068ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10e      	bne.n	80068d4 <HAL_RTC_SetDate+0x4c>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d008      	beq.n	80068d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	785b      	ldrb	r3, [r3, #1]
 80068c6:	f023 0310 	bic.w	r3, r3, #16
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	330a      	adds	r3, #10
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d11c      	bne.n	8006914 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	78db      	ldrb	r3, [r3, #3]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 f929 	bl	8006b36 <RTC_ByteToBcd2>
 80068e4:	4603      	mov	r3, r0
 80068e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 f922 	bl	8006b36 <RTC_ByteToBcd2>
 80068f2:	4603      	mov	r3, r0
 80068f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80068f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	789b      	ldrb	r3, [r3, #2]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 f91a 	bl	8006b36 <RTC_ByteToBcd2>
 8006902:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006904:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800690e:	4313      	orrs	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e00e      	b.n	8006932 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	78db      	ldrb	r3, [r3, #3]
 8006918:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006920:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006926:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800692e:	4313      	orrs	r3, r2
 8006930:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	22ca      	movs	r2, #202	; 0xca
 8006938:	625a      	str	r2, [r3, #36]	; 0x24
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2253      	movs	r2, #83	; 0x53
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f89b 	bl	8006a7e <RTC_EnterInitMode>
 8006948:	4603      	mov	r3, r0
 800694a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800694c:	7cfb      	ldrb	r3, [r7, #19]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d10c      	bne.n	800696c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800695c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006960:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f000 f8c2 	bl	8006aec <RTC_ExitInitMode>
 8006968:	4603      	mov	r3, r0
 800696a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800696c:	7cfb      	ldrb	r3, [r7, #19]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	771a      	strb	r2, [r3, #28]

  return status;
 8006986:	7cfb      	ldrb	r3, [r7, #19]
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}

08006990 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	0c1b      	lsrs	r3, r3, #16
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	0a1b      	lsrs	r3, r3, #8
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f003 031f 	and.w	r3, r3, #31
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	0b5b      	lsrs	r3, r3, #13
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d11a      	bne.n	8006a24 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	78db      	ldrb	r3, [r3, #3]
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f8bc 	bl	8006b70 <RTC_Bcd2ToByte>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f000 f8b3 	bl	8006b70 <RTC_Bcd2ToByte>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	789b      	ldrb	r3, [r3, #2]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 f8aa 	bl	8006b70 <RTC_Bcd2ToByte>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68da      	ldr	r2, [r3, #12]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a48:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a4a:	f7fd ffa1 	bl	8004990 <HAL_GetTick>
 8006a4e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a50:	e009      	b.n	8006a66 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a52:	f7fd ff9d 	bl	8004990 <HAL_GetTick>
 8006a56:	4602      	mov	r2, r0
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a60:	d901      	bls.n	8006a66 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e007      	b.n	8006a76 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0ee      	beq.n	8006a52 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b084      	sub	sp, #16
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d122      	bne.n	8006ae2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006aaa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006aac:	f7fd ff70 	bl	8004990 <HAL_GetTick>
 8006ab0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ab2:	e00c      	b.n	8006ace <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ab4:	f7fd ff6c 	bl	8004990 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ac2:	d904      	bls.n	8006ace <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2204      	movs	r2, #4
 8006ac8:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d102      	bne.n	8006ae2 <RTC_EnterInitMode+0x64>
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d1e8      	bne.n	8006ab4 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b06:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10a      	bne.n	8006b2c <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff ff89 	bl	8006a2e <HAL_RTC_WaitForSynchro>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2204      	movs	r2, #4
 8006b26:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006b44:	e005      	b.n	8006b52 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	3b0a      	subs	r3, #10
 8006b50:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b52:	79fb      	ldrb	r3, [r7, #7]
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	d8f6      	bhi.n	8006b46 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006b58:	7bfb      	ldrb	r3, [r7, #15]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	79fb      	ldrb	r3, [r7, #7]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	b2db      	uxtb	r3, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	091b      	lsrs	r3, r3, #4
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	461a      	mov	r2, r3
 8006b86:	0092      	lsls	r2, r2, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
 8006b98:	4413      	add	r3, r2
 8006b9a:	b2db      	uxtb	r3, r3
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e07b      	b.n	8006cb2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d108      	bne.n	8006bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bca:	d009      	beq.n	8006be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	61da      	str	r2, [r3, #28]
 8006bd2:	e005      	b.n	8006be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d106      	bne.n	8006c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7fd fb1a 	bl	8004234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c64:	ea42 0103 	orr.w	r1, r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699b      	ldr	r3, [r3, #24]
 8006c7c:	0c1b      	lsrs	r3, r3, #16
 8006c7e:	f003 0104 	and.w	r1, r3, #4
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f003 0210 	and.w	r2, r3, #16
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69da      	ldr	r2, [r3, #28]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ca0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3708      	adds	r7, #8
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b088      	sub	sp, #32
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	603b      	str	r3, [r7, #0]
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_SPI_Transmit+0x22>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e126      	b.n	8006f2a <HAL_SPI_Transmit+0x270>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce4:	f7fd fe54 	bl	8004990 <HAL_GetTick>
 8006ce8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d002      	beq.n	8006d00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cfe:	e10b      	b.n	8006f18 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <HAL_SPI_Transmit+0x52>
 8006d06:	88fb      	ldrh	r3, [r7, #6]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d102      	bne.n	8006d12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d10:	e102      	b.n	8006f18 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2203      	movs	r2, #3
 8006d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	88fa      	ldrh	r2, [r7, #6]
 8006d2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	88fa      	ldrh	r2, [r7, #6]
 8006d30:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d10f      	bne.n	8006d7a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d68:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d78:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d84:	2b40      	cmp	r3, #64	; 0x40
 8006d86:	d007      	beq.n	8006d98 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d96:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006da0:	d14b      	bne.n	8006e3a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Transmit+0xf6>
 8006daa:	8afb      	ldrh	r3, [r7, #22]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d13e      	bne.n	8006e2e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db4:	881a      	ldrh	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc0:	1c9a      	adds	r2, r3, #2
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dd4:	e02b      	b.n	8006e2e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0302 	and.w	r3, r3, #2
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d112      	bne.n	8006e0a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de8:	881a      	ldrh	r2, [r3, #0]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	1c9a      	adds	r2, r3, #2
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	3b01      	subs	r3, #1
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e08:	e011      	b.n	8006e2e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e0a:	f7fd fdc1 	bl	8004990 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d803      	bhi.n	8006e22 <HAL_SPI_Transmit+0x168>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e20:	d102      	bne.n	8006e28 <HAL_SPI_Transmit+0x16e>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d102      	bne.n	8006e2e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e2c:	e074      	b.n	8006f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1ce      	bne.n	8006dd6 <HAL_SPI_Transmit+0x11c>
 8006e38:	e04c      	b.n	8006ed4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <HAL_SPI_Transmit+0x18e>
 8006e42:	8afb      	ldrh	r3, [r7, #22]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d140      	bne.n	8006eca <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	330c      	adds	r3, #12
 8006e52:	7812      	ldrb	r2, [r2, #0]
 8006e54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	3b01      	subs	r3, #1
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e6e:	e02c      	b.n	8006eca <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d113      	bne.n	8006ea6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	330c      	adds	r3, #12
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ea4:	e011      	b.n	8006eca <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ea6:	f7fd fd73 	bl	8004990 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	683a      	ldr	r2, [r7, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d803      	bhi.n	8006ebe <HAL_SPI_Transmit+0x204>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ebc:	d102      	bne.n	8006ec4 <HAL_SPI_Transmit+0x20a>
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ec8:	e026      	b.n	8006f18 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1cd      	bne.n	8006e70 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fb13 	bl	8007504 <SPI_EndRxTxTransaction>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	613b      	str	r3, [r7, #16]
 8006f06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e000      	b.n	8006f18 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f28:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
	...

08006f34 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d101      	bne.n	8006f54 <HAL_SPI_Transmit_DMA+0x20>
 8006f50:	2302      	movs	r3, #2
 8006f52:	e09b      	b.n	800708c <HAL_SPI_Transmit_DMA+0x158>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d002      	beq.n	8006f6e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f6c:	e089      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <HAL_SPI_Transmit_DMA+0x46>
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f7e:	e080      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2203      	movs	r2, #3
 8006f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	88fa      	ldrh	r2, [r7, #6]
 8006f98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	88fa      	ldrh	r2, [r7, #6]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fd6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006fe6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <HAL_SPI_Transmit_DMA+0x160>)
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <HAL_SPI_Transmit_DMA+0x164>)
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <HAL_SPI_Transmit_DMA+0x168>)
 8006ffe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007004:	2200      	movs	r2, #0
 8007006:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	4619      	mov	r1, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	330c      	adds	r3, #12
 8007018:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007020:	f7fd fe76 	bl	8004d10 <HAL_DMA_Start_IT>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800702e:	f043 0210 	orr.w	r2, r3, #16
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8007042:	e01e      	b.n	8007082 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d007      	beq.n	8007062 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007060:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f042 0220 	orr.w	r2, r2, #32
 8007070:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f042 0202 	orr.w	r2, r2, #2
 8007080:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800708a:	7dfb      	ldrb	r3, [r7, #23]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	08007371 	.word	0x08007371
 8007098:	080072c9 	.word	0x080072c9
 800709c:	0800738d 	.word	0x0800738d

080070a0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b088      	sub	sp, #32
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	099b      	lsrs	r3, r3, #6
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10f      	bne.n	80070e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	099b      	lsrs	r3, r3, #6
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	4798      	blx	r3
    return;
 80070e2:	e0d7      	b.n	8007294 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f003 0301 	and.w	r3, r3, #1
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_SPI_IRQHandler+0x66>
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	09db      	lsrs	r3, r3, #7
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	4798      	blx	r3
    return;
 8007104:	e0c6      	b.n	8007294 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10c      	bne.n	800712c <HAL_SPI_IRQHandler+0x8c>
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	099b      	lsrs	r3, r3, #6
 8007116:	f003 0301 	and.w	r3, r3, #1
 800711a:	2b00      	cmp	r3, #0
 800711c:	d106      	bne.n	800712c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	0a1b      	lsrs	r3, r3, #8
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	f000 80b4 	beq.w	8007294 <HAL_SPI_IRQHandler+0x1f4>
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80ad 	beq.w	8007294 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	099b      	lsrs	r3, r3, #6
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d023      	beq.n	800718e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b03      	cmp	r3, #3
 8007150:	d011      	beq.n	8007176 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	e00b      	b.n	800718e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	613b      	str	r3, [r7, #16]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	693b      	ldr	r3, [r7, #16]
        return;
 800718c:	e082      	b.n	8007294 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	095b      	lsrs	r3, r3, #5
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d014      	beq.n	80071c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	0a1b      	lsrs	r3, r3, #8
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00c      	beq.n	80071ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	f043 0208 	orr.w	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80071dc:	2300      	movs	r3, #0
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d04f      	beq.n	8007292 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007200:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_SPI_IRQHandler+0x17e>
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d034      	beq.n	8007288 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0203 	bic.w	r2, r2, #3
 800722c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	2b00      	cmp	r3, #0
 8007234:	d011      	beq.n	800725a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <HAL_SPI_IRQHandler+0x1fc>)
 800723c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd fe2c 	bl	8004ea0 <HAL_DMA_Abort_IT>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725e:	2b00      	cmp	r3, #0
 8007260:	d016      	beq.n	8007290 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007266:	4a0d      	ldr	r2, [pc, #52]	; (800729c <HAL_SPI_IRQHandler+0x1fc>)
 8007268:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726e:	4618      	mov	r0, r3
 8007270:	f7fd fe16 	bl	8004ea0 <HAL_DMA_Abort_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007286:	e003      	b.n	8007290 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f813 	bl	80072b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800728e:	e000      	b.n	8007292 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8007290:	bf00      	nop
    return;
 8007292:	bf00      	nop
  }
}
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	080073cd 	.word	0x080073cd

080072a0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80072bc:	bf00      	nop
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr

080072c8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d6:	f7fd fb5b 	bl	8004990 <HAL_GetTick>
 80072da:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ea:	d03b      	beq.n	8007364 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0220 	bic.w	r2, r2, #32
 80072fa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 0202 	bic.w	r2, r2, #2
 800730a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	2164      	movs	r1, #100	; 0x64
 8007310:	6978      	ldr	r0, [r7, #20]
 8007312:	f000 f8f7 	bl	8007504 <SPI_EndRxTxTransaction>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d005      	beq.n	8007328 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007320:	f043 0220 	orr.w	r2, r3, #32
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10a      	bne.n	8007346 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007330:	2300      	movs	r3, #0
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2200      	movs	r2, #0
 800734a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2201      	movs	r2, #1
 8007350:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800735c:	6978      	ldr	r0, [r7, #20]
 800735e:	f7ff ffa9 	bl	80072b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007362:	e002      	b.n	800736a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007364:	6978      	ldr	r0, [r7, #20]
 8007366:	f7fb fae5 	bl	8002934 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	f7ff ff8e 	bl	80072a0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0203 	bic.w	r2, r2, #3
 80073a8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ae:	f043 0210 	orr.w	r2, r3, #16
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff ff78 	bl	80072b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073c4:	bf00      	nop
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff ff64 	bl	80072b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007404:	f7fd fac4 	bl	8004990 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4413      	add	r3, r2
 8007412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007414:	f7fd fabc 	bl	8004990 <HAL_GetTick>
 8007418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800741a:	4b39      	ldr	r3, [pc, #228]	; (8007500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	015b      	lsls	r3, r3, #5
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742a:	e054      	b.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007432:	d050      	beq.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007434:	f7fd faac 	bl	8004990 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	429a      	cmp	r2, r3
 8007442:	d902      	bls.n	800744a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d13d      	bne.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007462:	d111      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d004      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007476:	d107      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007490:	d10f      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e017      	b.n	80074f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d19b      	bne.n	800742c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000098 	.word	0x20000098

08007504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <SPI_EndRxTxTransaction+0x7c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <SPI_EndRxTxTransaction+0x80>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0d5b      	lsrs	r3, r3, #21
 800751c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007520:	fb02 f303 	mul.w	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d112      	bne.n	8007556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff ff5a 	bl	80073f4 <SPI_WaitFlagStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e00f      	b.n	8007576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d0f2      	beq.n	8007556 <SPI_EndRxTxTransaction+0x52>
 8007570:	e000      	b.n	8007574 <SPI_EndRxTxTransaction+0x70>
        break;
 8007572:	bf00      	nop
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000098 	.word	0x20000098
 8007584:	165e9f81 	.word	0x165e9f81

08007588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e041      	b.n	800761e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fc fecc 	bl	800434c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f000 fa96 	bl	8007af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e04e      	b.n	80076de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a23      	ldr	r2, [pc, #140]	; (80076ec <HAL_TIM_Base_Start_IT+0xc4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d022      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d01d      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d018      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1e      	ldr	r2, [pc, #120]	; (80076f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1c      	ldr	r2, [pc, #112]	; (80076f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00e      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1b      	ldr	r2, [pc, #108]	; (80076fc <HAL_TIM_Base_Start_IT+0xd4>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d009      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a19      	ldr	r2, [pc, #100]	; (8007700 <HAL_TIM_Base_Start_IT+0xd8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d004      	beq.n	80076a8 <HAL_TIM_Base_Start_IT+0x80>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a18      	ldr	r2, [pc, #96]	; (8007704 <HAL_TIM_Base_Start_IT+0xdc>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d111      	bne.n	80076cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b06      	cmp	r3, #6
 80076b8:	d010      	beq.n	80076dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f042 0201 	orr.w	r2, r2, #1
 80076c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ca:	e007      	b.n	80076dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40000400 	.word	0x40000400
 80076f4:	40000800 	.word	0x40000800
 80076f8:	40000c00 	.word	0x40000c00
 80076fc:	40010400 	.word	0x40010400
 8007700:	40014000 	.word	0x40014000
 8007704:	40001800 	.word	0x40001800

08007708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b02      	cmp	r3, #2
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0202 	mvn.w	r2, #2
 8007734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9b5 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9a7 	bl	8007aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9b8 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b04      	cmp	r3, #4
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0204 	mvn.w	r2, #4
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f98b 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f97d 	bl	8007aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f98e 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0208 	mvn.w	r2, #8
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2204      	movs	r2, #4
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f961 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f953 	bl	8007aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f964 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b10      	cmp	r3, #16
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b10      	cmp	r3, #16
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0210 	mvn.w	r2, #16
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2208      	movs	r2, #8
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f937 	bl	8007aba <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f929 	bl	8007aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f93a 	bl	8007ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b01      	cmp	r3, #1
 800786c:	d10e      	bne.n	800788c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	d107      	bne.n	800788c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0201 	mvn.w	r2, #1
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fc f848 	bl	800391c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d10e      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d107      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fae0 	bl	8007e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f8ff 	bl	8007ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0220 	mvn.w	r2, #32
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 faaa 	bl	8007e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792c:	2b01      	cmp	r3, #1
 800792e:	d101      	bne.n	8007934 <HAL_TIM_ConfigClockSource+0x1c>
 8007930:	2302      	movs	r3, #2
 8007932:	e0b4      	b.n	8007a9e <HAL_TIM_ConfigClockSource+0x186>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2202      	movs	r2, #2
 8007940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800795a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796c:	d03e      	beq.n	80079ec <HAL_TIM_ConfigClockSource+0xd4>
 800796e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007972:	f200 8087 	bhi.w	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 8007976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797a:	f000 8086 	beq.w	8007a8a <HAL_TIM_ConfigClockSource+0x172>
 800797e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007982:	d87f      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 8007984:	2b70      	cmp	r3, #112	; 0x70
 8007986:	d01a      	beq.n	80079be <HAL_TIM_ConfigClockSource+0xa6>
 8007988:	2b70      	cmp	r3, #112	; 0x70
 800798a:	d87b      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 800798c:	2b60      	cmp	r3, #96	; 0x60
 800798e:	d050      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0x11a>
 8007990:	2b60      	cmp	r3, #96	; 0x60
 8007992:	d877      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 8007994:	2b50      	cmp	r3, #80	; 0x50
 8007996:	d03c      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0xfa>
 8007998:	2b50      	cmp	r3, #80	; 0x50
 800799a:	d873      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 800799c:	2b40      	cmp	r3, #64	; 0x40
 800799e:	d058      	beq.n	8007a52 <HAL_TIM_ConfigClockSource+0x13a>
 80079a0:	2b40      	cmp	r3, #64	; 0x40
 80079a2:	d86f      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 80079a4:	2b30      	cmp	r3, #48	; 0x30
 80079a6:	d064      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x15a>
 80079a8:	2b30      	cmp	r3, #48	; 0x30
 80079aa:	d86b      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 80079ac:	2b20      	cmp	r3, #32
 80079ae:	d060      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x15a>
 80079b0:	2b20      	cmp	r3, #32
 80079b2:	d867      	bhi.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d05c      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x15a>
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d05a      	beq.n	8007a72 <HAL_TIM_ConfigClockSource+0x15a>
 80079bc:	e062      	b.n	8007a84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6818      	ldr	r0, [r3, #0]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6899      	ldr	r1, [r3, #8]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	f000 f9ad 	bl	8007d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	609a      	str	r2, [r3, #8]
      break;
 80079ea:	e04f      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	6899      	ldr	r1, [r3, #8]
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	685a      	ldr	r2, [r3, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	f000 f996 	bl	8007d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689a      	ldr	r2, [r3, #8]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a0e:	609a      	str	r2, [r3, #8]
      break;
 8007a10:	e03c      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6818      	ldr	r0, [r3, #0]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6859      	ldr	r1, [r3, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f000 f90a 	bl	8007c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2150      	movs	r1, #80	; 0x50
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f963 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007a30:	e02c      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	6859      	ldr	r1, [r3, #4]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	f000 f929 	bl	8007c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2160      	movs	r1, #96	; 0x60
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f953 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007a50:	e01c      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6818      	ldr	r0, [r3, #0]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6859      	ldr	r1, [r3, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	f000 f8ea 	bl	8007c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2140      	movs	r1, #64	; 0x40
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 f943 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007a70:	e00c      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	f000 f93a 	bl	8007cf6 <TIM_ITRx_SetConfig>
      break;
 8007a82:	e003      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	73fb      	strb	r3, [r7, #15]
      break;
 8007a88:	e000      	b.n	8007a8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
	...

08007af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a40      	ldr	r2, [pc, #256]	; (8007c0c <TIM_Base_SetConfig+0x114>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d013      	beq.n	8007b38 <TIM_Base_SetConfig+0x40>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b16:	d00f      	beq.n	8007b38 <TIM_Base_SetConfig+0x40>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a3d      	ldr	r2, [pc, #244]	; (8007c10 <TIM_Base_SetConfig+0x118>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00b      	beq.n	8007b38 <TIM_Base_SetConfig+0x40>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a3c      	ldr	r2, [pc, #240]	; (8007c14 <TIM_Base_SetConfig+0x11c>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d007      	beq.n	8007b38 <TIM_Base_SetConfig+0x40>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	4a3b      	ldr	r2, [pc, #236]	; (8007c18 <TIM_Base_SetConfig+0x120>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d003      	beq.n	8007b38 <TIM_Base_SetConfig+0x40>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	4a3a      	ldr	r2, [pc, #232]	; (8007c1c <TIM_Base_SetConfig+0x124>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d108      	bne.n	8007b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a2f      	ldr	r2, [pc, #188]	; (8007c0c <TIM_Base_SetConfig+0x114>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d02b      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b58:	d027      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a2c      	ldr	r2, [pc, #176]	; (8007c10 <TIM_Base_SetConfig+0x118>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d023      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <TIM_Base_SetConfig+0x11c>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01f      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a2a      	ldr	r2, [pc, #168]	; (8007c18 <TIM_Base_SetConfig+0x120>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d01b      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a29      	ldr	r2, [pc, #164]	; (8007c1c <TIM_Base_SetConfig+0x124>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d017      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a28      	ldr	r2, [pc, #160]	; (8007c20 <TIM_Base_SetConfig+0x128>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d013      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <TIM_Base_SetConfig+0x12c>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d00f      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a26      	ldr	r2, [pc, #152]	; (8007c28 <TIM_Base_SetConfig+0x130>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d00b      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	4a25      	ldr	r2, [pc, #148]	; (8007c2c <TIM_Base_SetConfig+0x134>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d007      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a24      	ldr	r2, [pc, #144]	; (8007c30 <TIM_Base_SetConfig+0x138>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d003      	beq.n	8007baa <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	4a23      	ldr	r2, [pc, #140]	; (8007c34 <TIM_Base_SetConfig+0x13c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d108      	bne.n	8007bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a0a      	ldr	r2, [pc, #40]	; (8007c0c <TIM_Base_SetConfig+0x114>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d003      	beq.n	8007bf0 <TIM_Base_SetConfig+0xf8>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a0c      	ldr	r2, [pc, #48]	; (8007c1c <TIM_Base_SetConfig+0x124>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d103      	bne.n	8007bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	615a      	str	r2, [r3, #20]
}
 8007bfe:	bf00      	nop
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40000400 	.word	0x40000400
 8007c14:	40000800 	.word	0x40000800
 8007c18:	40000c00 	.word	0x40000c00
 8007c1c:	40010400 	.word	0x40010400
 8007c20:	40014000 	.word	0x40014000
 8007c24:	40014400 	.word	0x40014400
 8007c28:	40014800 	.word	0x40014800
 8007c2c:	40001800 	.word	0x40001800
 8007c30:	40001c00 	.word	0x40001c00
 8007c34:	40002000 	.word	0x40002000

08007c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b087      	sub	sp, #28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6a1b      	ldr	r3, [r3, #32]
 8007c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0201 	bic.w	r2, r3, #1
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	011b      	lsls	r3, r3, #4
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	f023 030a 	bic.w	r3, r3, #10
 8007c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c76:	697a      	ldr	r2, [r7, #20]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr

08007c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c96:	b480      	push	{r7}
 8007c98:	b087      	sub	sp, #28
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	60f8      	str	r0, [r7, #12]
 8007c9e:	60b9      	str	r1, [r7, #8]
 8007ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	f023 0210 	bic.w	r2, r3, #16
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	031b      	lsls	r3, r3, #12
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	011b      	lsls	r3, r3, #4
 8007cd8:	693a      	ldr	r2, [r7, #16]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	621a      	str	r2, [r3, #32]
}
 8007cea:	bf00      	nop
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d0e:	683a      	ldr	r2, [r7, #0]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f043 0307 	orr.w	r3, r3, #7
 8007d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	609a      	str	r2, [r3, #8]
}
 8007d20:	bf00      	nop
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	021a      	lsls	r2, r3, #8
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	609a      	str	r2, [r3, #8]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d101      	bne.n	8007d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e05a      	b.n	8007e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68fa      	ldr	r2, [r7, #12]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a21      	ldr	r2, [pc, #132]	; (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d022      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d01d      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a1d      	ldr	r2, [pc, #116]	; (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d018      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a1b      	ldr	r2, [pc, #108]	; (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d013      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a1a      	ldr	r2, [pc, #104]	; (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00e      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a18      	ldr	r2, [pc, #96]	; (8007e58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d009      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	; (8007e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d004      	beq.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a15      	ldr	r2, [pc, #84]	; (8007e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d10c      	bne.n	8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40001800 	.word	0x40001800

08007e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d101      	bne.n	8007e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e03f      	b.n	8007f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d106      	bne.n	8007eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fc fa70 	bl	8004398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2224      	movs	r2, #36	; 0x24
 8007ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fe2b 	bl	8008b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	695a      	ldr	r2, [r3, #20]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68da      	ldr	r2, [r3, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	60f8      	str	r0, [r7, #12]
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	4613      	mov	r3, r2
 8007f32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b20      	cmp	r3, #32
 8007f3e:	d11d      	bne.n	8007f7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d002      	beq.n	8007f4c <HAL_UART_Receive_IT+0x26>
 8007f46:	88fb      	ldrh	r3, [r7, #6]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	e016      	b.n	8007f7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d101      	bne.n	8007f5e <HAL_UART_Receive_IT+0x38>
 8007f5a:	2302      	movs	r3, #2
 8007f5c:	e00f      	b.n	8007f7e <HAL_UART_Receive_IT+0x58>
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f6c:	88fb      	ldrh	r3, [r7, #6]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	68b9      	ldr	r1, [r7, #8]
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fbd9 	bl	800872a <UART_Start_Receive_IT>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	e000      	b.n	8007f7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08c      	sub	sp, #48	; 0x30
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	4613      	mov	r3, r2
 8007f94:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	2b20      	cmp	r3, #32
 8007fa0:	d165      	bne.n	800806e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <HAL_UART_Transmit_DMA+0x26>
 8007fa8:	88fb      	ldrh	r3, [r7, #6]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e05e      	b.n	8008070 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d101      	bne.n	8007fc0 <HAL_UART_Transmit_DMA+0x38>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	e057      	b.n	8008070 <HAL_UART_Transmit_DMA+0xe8>
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	88fa      	ldrh	r2, [r7, #6]
 8007fd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2221      	movs	r2, #33	; 0x21
 8007fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fec:	4a22      	ldr	r2, [pc, #136]	; (8008078 <HAL_UART_Transmit_DMA+0xf0>)
 8007fee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff4:	4a21      	ldr	r2, [pc, #132]	; (800807c <HAL_UART_Transmit_DMA+0xf4>)
 8007ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffc:	4a20      	ldr	r2, [pc, #128]	; (8008080 <HAL_UART_Transmit_DMA+0xf8>)
 8007ffe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008004:	2200      	movs	r2, #0
 8008006:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008008:	f107 0308 	add.w	r3, r7, #8
 800800c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008014:	6819      	ldr	r1, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3304      	adds	r3, #4
 800801c:	461a      	mov	r2, r3
 800801e:	88fb      	ldrh	r3, [r7, #6]
 8008020:	f7fc fe76 	bl	8004d10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800802c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3314      	adds	r3, #20
 800803c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	e853 3f00 	ldrex	r3, [r3]
 8008044:	617b      	str	r3, [r7, #20]
   return(result);
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800804c:	62bb      	str	r3, [r7, #40]	; 0x28
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3314      	adds	r3, #20
 8008054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008056:	627a      	str	r2, [r7, #36]	; 0x24
 8008058:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805a:	6a39      	ldr	r1, [r7, #32]
 800805c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800805e:	e841 2300 	strex	r3, r2, [r1]
 8008062:	61fb      	str	r3, [r7, #28]
   return(result);
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1e5      	bne.n	8008036 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	e000      	b.n	8008070 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800806e:	2302      	movs	r3, #2
  }
}
 8008070:	4618      	mov	r0, r3
 8008072:	3730      	adds	r7, #48	; 0x30
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	080085e1 	.word	0x080085e1
 800807c:	0800867b 	.word	0x0800867b
 8008080:	08008697 	.word	0x08008697

08008084 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b0ba      	sub	sp, #232	; 0xe8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68db      	ldr	r3, [r3, #12]
 800809c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d10f      	bne.n	80080ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ce:	f003 0320 	and.w	r3, r3, #32
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d009      	beq.n	80080ea <HAL_UART_IRQHandler+0x66>
 80080d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080da:	f003 0320 	and.w	r3, r3, #32
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fc66 	bl	80089b4 <UART_Receive_IT>
      return;
 80080e8:	e256      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80080ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80de 	beq.w	80082b0 <HAL_UART_IRQHandler+0x22c>
 80080f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080f8:	f003 0301 	and.w	r3, r3, #1
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d106      	bne.n	800810e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008104:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 80d1 	beq.w	80082b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800810e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00b      	beq.n	8008132 <HAL_UART_IRQHandler+0xae>
 800811a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812a:	f043 0201 	orr.w	r2, r3, #1
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008136:	f003 0304 	and.w	r3, r3, #4
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_UART_IRQHandler+0xd2>
 800813e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f043 0202 	orr.w	r2, r3, #2
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00b      	beq.n	800817a <HAL_UART_IRQHandler+0xf6>
 8008162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008166:	f003 0301 	and.w	r3, r3, #1
 800816a:	2b00      	cmp	r3, #0
 800816c:	d005      	beq.n	800817a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	f043 0204 	orr.w	r2, r3, #4
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800817a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d011      	beq.n	80081aa <HAL_UART_IRQHandler+0x126>
 8008186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d105      	bne.n	800819e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	2b00      	cmp	r3, #0
 800819c:	d005      	beq.n	80081aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f043 0208 	orr.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 81ed 	beq.w	800858e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081b8:	f003 0320 	and.w	r3, r3, #32
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d008      	beq.n	80081d2 <HAL_UART_IRQHandler+0x14e>
 80081c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c4:	f003 0320 	and.w	r3, r3, #32
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbf1 	bl	80089b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	bf0c      	ite	eq
 80081e0:	2301      	moveq	r3, #1
 80081e2:	2300      	movne	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d103      	bne.n	80081fe <HAL_UART_IRQHandler+0x17a>
 80081f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d04f      	beq.n	800829e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 faf9 	bl	80087f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d141      	bne.n	8008296 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008220:	e853 3f00 	ldrex	r3, [r3]
 8008224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008228:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800822c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008230:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3314      	adds	r3, #20
 800823a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800823e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800824a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800824e:	e841 2300 	strex	r3, r2, [r1]
 8008252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008256:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1d9      	bne.n	8008212 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008262:	2b00      	cmp	r3, #0
 8008264:	d013      	beq.n	800828e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	4a7d      	ldr	r2, [pc, #500]	; (8008460 <HAL_UART_IRQHandler+0x3dc>)
 800826c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	4618      	mov	r0, r3
 8008274:	f7fc fe14 	bl	8004ea0 <HAL_DMA_Abort_IT>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d016      	beq.n	80082ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008288:	4610      	mov	r0, r2
 800828a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	e00e      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f990 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008294:	e00a      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f98c 	bl	80085b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800829c:	e006      	b.n	80082ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f988 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082aa:	e170      	b.n	800858e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ac:	bf00      	nop
    return;
 80082ae:	e16e      	b.n	800858e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	f040 814a 	bne.w	800854e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082be:	f003 0310 	and.w	r3, r3, #16
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f000 8143 	beq.w	800854e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 813c 	beq.w	800854e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082d6:	2300      	movs	r3, #0
 80082d8:	60bb      	str	r3, [r7, #8]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f6:	2b40      	cmp	r3, #64	; 0x40
 80082f8:	f040 80b4 	bne.w	8008464 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008308:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 8140 	beq.w	8008592 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008316:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800831a:	429a      	cmp	r2, r3
 800831c:	f080 8139 	bcs.w	8008592 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008326:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	69db      	ldr	r3, [r3, #28]
 800832e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008332:	f000 8088 	beq.w	8008446 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800834c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008354:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008362:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008366:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800836e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800837a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1d9      	bne.n	8008336 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3314      	adds	r3, #20
 8008388:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800838c:	e853 3f00 	ldrex	r3, [r3]
 8008390:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008394:	f023 0301 	bic.w	r3, r3, #1
 8008398:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	3314      	adds	r3, #20
 80083a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083b2:	e841 2300 	strex	r3, r2, [r1]
 80083b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d1e1      	bne.n	8008382 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3314      	adds	r3, #20
 80083c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c8:	e853 3f00 	ldrex	r3, [r3]
 80083cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80083e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80083e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80083ea:	e841 2300 	strex	r3, r2, [r1]
 80083ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80083f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1e3      	bne.n	80083be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2220      	movs	r2, #32
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	330c      	adds	r3, #12
 800840a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800840c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840e:	e853 3f00 	ldrex	r3, [r3]
 8008412:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008416:	f023 0310 	bic.w	r3, r3, #16
 800841a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	330c      	adds	r3, #12
 8008424:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008428:	65ba      	str	r2, [r7, #88]	; 0x58
 800842a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800842e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008430:	e841 2300 	strex	r3, r2, [r1]
 8008434:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1e3      	bne.n	8008404 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008440:	4618      	mov	r0, r3
 8008442:	f7fc fcbd 	bl	8004dc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800844e:	b29b      	uxth	r3, r3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	b29b      	uxth	r3, r3
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f8b6 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800845c:	e099      	b.n	8008592 <HAL_UART_IRQHandler+0x50e>
 800845e:	bf00      	nop
 8008460:	080088bd 	.word	0x080088bd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800846c:	b29b      	uxth	r3, r3
 800846e:	1ad3      	subs	r3, r2, r3
 8008470:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008478:	b29b      	uxth	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 808b 	beq.w	8008596 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008480:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8086 	beq.w	8008596 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	330c      	adds	r3, #12
 8008490:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800849a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	330c      	adds	r3, #12
 80084aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084ae:	647a      	str	r2, [r7, #68]	; 0x44
 80084b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e3      	bne.n	800848a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3314      	adds	r3, #20
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	623b      	str	r3, [r7, #32]
   return(result);
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80084e6:	633a      	str	r2, [r7, #48]	; 0x30
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e3      	bne.n	80084c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2220      	movs	r2, #32
 80084fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	e853 3f00 	ldrex	r3, [r3]
 8008516:	60fb      	str	r3, [r7, #12]
   return(result);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0310 	bic.w	r3, r3, #16
 800851e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	330c      	adds	r3, #12
 8008528:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800852c:	61fa      	str	r2, [r7, #28]
 800852e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	69b9      	ldr	r1, [r7, #24]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	617b      	str	r3, [r7, #20]
   return(result);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e3      	bne.n	8008508 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 f83e 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800854c:	e023      	b.n	8008596 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800854e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_UART_IRQHandler+0x4ea>
 800855a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008562:	2b00      	cmp	r3, #0
 8008564:	d003      	beq.n	800856e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f9bc 	bl	80088e4 <UART_Transmit_IT>
    return;
 800856c:	e014      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800856e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00e      	beq.n	8008598 <HAL_UART_IRQHandler+0x514>
 800857a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d008      	beq.n	8008598 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f9fc 	bl	8008984 <UART_EndTransmit_IT>
    return;
 800858c:	e004      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
    return;
 800858e:	bf00      	nop
 8008590:	e002      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
      return;
 8008592:	bf00      	nop
 8008594:	e000      	b.n	8008598 <HAL_UART_IRQHandler+0x514>
      return;
 8008596:	bf00      	nop
  }
}
 8008598:	37e8      	adds	r7, #232	; 0xe8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop

080085a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085bc:	bf00      	nop
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b090      	sub	sp, #64	; 0x40
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d137      	bne.n	800866c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80085fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085fe:	2200      	movs	r2, #0
 8008600:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3314      	adds	r3, #20
 8008608:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	e853 3f00 	ldrex	r3, [r3]
 8008610:	623b      	str	r3, [r7, #32]
   return(result);
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008618:	63bb      	str	r3, [r7, #56]	; 0x38
 800861a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3314      	adds	r3, #20
 8008620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008622:	633a      	str	r2, [r7, #48]	; 0x30
 8008624:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800862a:	e841 2300 	strex	r3, r2, [r1]
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1e5      	bne.n	8008602 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008636:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	330c      	adds	r3, #12
 800863c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	e853 3f00 	ldrex	r3, [r3]
 8008644:	60fb      	str	r3, [r7, #12]
   return(result);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	330c      	adds	r3, #12
 8008654:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008656:	61fa      	str	r2, [r7, #28]
 8008658:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800865a:	69b9      	ldr	r1, [r7, #24]
 800865c:	69fa      	ldr	r2, [r7, #28]
 800865e:	e841 2300 	strex	r3, r2, [r1]
 8008662:	617b      	str	r3, [r7, #20]
   return(result);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1e5      	bne.n	8008636 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800866a:	e002      	b.n	8008672 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800866c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800866e:	f7fa f94b 	bl	8002908 <HAL_UART_TxCpltCallback>
}
 8008672:	bf00      	nop
 8008674:	3740      	adds	r7, #64	; 0x40
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f7ff ff89 	bl	80085a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b084      	sub	sp, #16
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	bf0c      	ite	eq
 80086b6:	2301      	moveq	r3, #1
 80086b8:	2300      	movne	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b21      	cmp	r3, #33	; 0x21
 80086c8:	d108      	bne.n	80086dc <UART_DMAError+0x46>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d005      	beq.n	80086dc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	2200      	movs	r2, #0
 80086d4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80086d6:	68b8      	ldr	r0, [r7, #8]
 80086d8:	f000 f865 	bl	80087a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	bf0c      	ite	eq
 80086ea:	2301      	moveq	r3, #1
 80086ec:	2300      	movne	r3, #0
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b22      	cmp	r3, #34	; 0x22
 80086fc:	d108      	bne.n	8008710 <UART_DMAError+0x7a>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d005      	beq.n	8008710 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	2200      	movs	r2, #0
 8008708:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800870a:	68b8      	ldr	r0, [r7, #8]
 800870c:	f000 f873 	bl	80087f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008714:	f043 0210 	orr.w	r2, r3, #16
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800871c:	68b8      	ldr	r0, [r7, #8]
 800871e:	f7ff ff49 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008722:	bf00      	nop
 8008724:	3710      	adds	r7, #16
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800872a:	b480      	push	{r7}
 800872c:	b085      	sub	sp, #20
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	4613      	mov	r3, r2
 8008736:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	68ba      	ldr	r2, [r7, #8]
 800873c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	88fa      	ldrh	r2, [r7, #6]
 8008742:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2222      	movs	r2, #34	; 0x22
 8008754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d007      	beq.n	8008778 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68da      	ldr	r2, [r3, #12]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008776:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0201 	orr.w	r2, r2, #1
 8008786:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0220 	orr.w	r2, r2, #32
 8008796:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3714      	adds	r7, #20
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b089      	sub	sp, #36	; 0x24
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	330c      	adds	r3, #12
 80087b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087c4:	61fb      	str	r3, [r7, #28]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	330c      	adds	r3, #12
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	61ba      	str	r2, [r7, #24]
 80087d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	6979      	ldr	r1, [r7, #20]
 80087d4:	69ba      	ldr	r2, [r7, #24]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	613b      	str	r3, [r7, #16]
   return(result);
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80087ea:	bf00      	nop
 80087ec:	3724      	adds	r7, #36	; 0x24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f6:	b480      	push	{r7}
 80087f8:	b095      	sub	sp, #84	; 0x54
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	e853 3f00 	ldrex	r3, [r3]
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008814:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	330c      	adds	r3, #12
 800881c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800881e:	643a      	str	r2, [r7, #64]	; 0x40
 8008820:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008822:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008826:	e841 2300 	strex	r3, r2, [r1]
 800882a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800882c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882e:	2b00      	cmp	r3, #0
 8008830:	d1e5      	bne.n	80087fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3314      	adds	r3, #20
 8008838:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	e853 3f00 	ldrex	r3, [r3]
 8008840:	61fb      	str	r3, [r7, #28]
   return(result);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	f023 0301 	bic.w	r3, r3, #1
 8008848:	64bb      	str	r3, [r7, #72]	; 0x48
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3314      	adds	r3, #20
 8008850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008852:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800885a:	e841 2300 	strex	r3, r2, [r1]
 800885e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1e5      	bne.n	8008832 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	2b01      	cmp	r3, #1
 800886c:	d119      	bne.n	80088a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	60bb      	str	r3, [r7, #8]
   return(result);
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	f023 0310 	bic.w	r3, r3, #16
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	330c      	adds	r3, #12
 800888c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800888e:	61ba      	str	r2, [r7, #24]
 8008890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6979      	ldr	r1, [r7, #20]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	613b      	str	r3, [r7, #16]
   return(result);
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e5      	bne.n	800886e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088b0:	bf00      	nop
 80088b2:	3754      	adds	r7, #84	; 0x54
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff fe6c 	bl	80085b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b21      	cmp	r3, #33	; 0x21
 80088f6:	d13e      	bne.n	8008976 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008900:	d114      	bne.n	800892c <UART_Transmit_IT+0x48>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	691b      	ldr	r3, [r3, #16]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d110      	bne.n	800892c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	881b      	ldrh	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	1c9a      	adds	r2, r3, #2
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]
 800892a:	e008      	b.n	800893e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	1c59      	adds	r1, r3, #1
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6211      	str	r1, [r2, #32]
 8008936:	781a      	ldrb	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29b      	uxth	r3, r3
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	4619      	mov	r1, r3
 800894c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10f      	bne.n	8008972 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68da      	ldr	r2, [r3, #12]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008960:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008970:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	e000      	b.n	8008978 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008976:	2302      	movs	r3, #2
  }
}
 8008978:	4618      	mov	r0, r3
 800897a:	3714      	adds	r7, #20
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800899a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f7f9 ffaf 	bl	8002908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08c      	sub	sp, #48	; 0x30
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b22      	cmp	r3, #34	; 0x22
 80089c6:	f040 80ab 	bne.w	8008b20 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089d2:	d117      	bne.n	8008a04 <UART_Receive_IT+0x50>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d113      	bne.n	8008a04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fc:	1c9a      	adds	r2, r3, #2
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	629a      	str	r2, [r3, #40]	; 0x28
 8008a02:	e026      	b.n	8008a52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a16:	d007      	beq.n	8008a28 <UART_Receive_IT+0x74>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d10a      	bne.n	8008a36 <UART_Receive_IT+0x82>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d106      	bne.n	8008a36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	701a      	strb	r2, [r3, #0]
 8008a34:	e008      	b.n	8008a48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	3b01      	subs	r3, #1
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d15a      	bne.n	8008b1c <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68da      	ldr	r2, [r3, #12]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0220 	bic.w	r2, r2, #32
 8008a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695a      	ldr	r2, [r3, #20]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0201 	bic.w	r2, r2, #1
 8008a94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2220      	movs	r2, #32
 8008a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d135      	bne.n	8008b12 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	330c      	adds	r3, #12
 8008ab2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	613b      	str	r3, [r7, #16]
   return(result);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f023 0310 	bic.w	r3, r3, #16
 8008ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	330c      	adds	r3, #12
 8008aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008acc:	623a      	str	r2, [r7, #32]
 8008ace:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	69f9      	ldr	r1, [r7, #28]
 8008ad2:	6a3a      	ldr	r2, [r7, #32]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e5      	bne.n	8008aac <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 0310 	and.w	r3, r3, #16
 8008aea:	2b10      	cmp	r3, #16
 8008aec:	d10a      	bne.n	8008b04 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aee:	2300      	movs	r3, #0
 8008af0:	60fb      	str	r3, [r7, #12]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f7ff fd5c 	bl	80085c8 <HAL_UARTEx_RxEventCallback>
 8008b10:	e002      	b.n	8008b18 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7f9 fc50 	bl	80023b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	e002      	b.n	8008b22 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e000      	b.n	8008b22 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008b20:	2302      	movs	r3, #2
  }
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3730      	adds	r7, #48	; 0x30
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
	...

08008b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b30:	b0c0      	sub	sp, #256	; 0x100
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b48:	68d9      	ldr	r1, [r3, #12]
 8008b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	ea40 0301 	orr.w	r3, r0, r1
 8008b54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	431a      	orrs	r2, r3
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	431a      	orrs	r2, r3
 8008b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b84:	f021 010c 	bic.w	r1, r1, #12
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b92:	430b      	orrs	r3, r1
 8008b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba6:	6999      	ldr	r1, [r3, #24]
 8008ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	ea40 0301 	orr.w	r3, r0, r1
 8008bb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	4b8f      	ldr	r3, [pc, #572]	; (8008df8 <UART_SetConfig+0x2cc>)
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d005      	beq.n	8008bcc <UART_SetConfig+0xa0>
 8008bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	4b8d      	ldr	r3, [pc, #564]	; (8008dfc <UART_SetConfig+0x2d0>)
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d104      	bne.n	8008bd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008bcc:	f7fd fbc6 	bl	800635c <HAL_RCC_GetPCLK2Freq>
 8008bd0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008bd4:	e003      	b.n	8008bde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bd6:	f7fd fbad 	bl	8006334 <HAL_RCC_GetPCLK1Freq>
 8008bda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008be2:	69db      	ldr	r3, [r3, #28]
 8008be4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be8:	f040 810c 	bne.w	8008e04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008bf6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008bfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008bfe:	4622      	mov	r2, r4
 8008c00:	462b      	mov	r3, r5
 8008c02:	1891      	adds	r1, r2, r2
 8008c04:	65b9      	str	r1, [r7, #88]	; 0x58
 8008c06:	415b      	adcs	r3, r3
 8008c08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008c0e:	4621      	mov	r1, r4
 8008c10:	eb12 0801 	adds.w	r8, r2, r1
 8008c14:	4629      	mov	r1, r5
 8008c16:	eb43 0901 	adc.w	r9, r3, r1
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c2e:	4690      	mov	r8, r2
 8008c30:	4699      	mov	r9, r3
 8008c32:	4623      	mov	r3, r4
 8008c34:	eb18 0303 	adds.w	r3, r8, r3
 8008c38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	eb49 0303 	adc.w	r3, r9, r3
 8008c42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008c56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	18db      	adds	r3, r3, r3
 8008c5e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c60:	4613      	mov	r3, r2
 8008c62:	eb42 0303 	adc.w	r3, r2, r3
 8008c66:	657b      	str	r3, [r7, #84]	; 0x54
 8008c68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008c6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008c70:	f7f7 fe5c 	bl	800092c <__aeabi_uldivmod>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4b61      	ldr	r3, [pc, #388]	; (8008e00 <UART_SetConfig+0x2d4>)
 8008c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	011c      	lsls	r4, r3, #4
 8008c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	1891      	adds	r1, r2, r2
 8008c9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c9c:	415b      	adcs	r3, r3
 8008c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ca0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	eb12 0a01 	adds.w	sl, r2, r1
 8008caa:	4649      	mov	r1, r9
 8008cac:	eb43 0b01 	adc.w	fp, r3, r1
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008cbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008cc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008cc4:	4692      	mov	sl, r2
 8008cc6:	469b      	mov	fp, r3
 8008cc8:	4643      	mov	r3, r8
 8008cca:	eb1a 0303 	adds.w	r3, sl, r3
 8008cce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	eb4b 0303 	adc.w	r3, fp, r3
 8008cd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008ce8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008cec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	18db      	adds	r3, r3, r3
 8008cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	eb42 0303 	adc.w	r3, r2, r3
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8008cfe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008d02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008d06:	f7f7 fe11 	bl	800092c <__aeabi_uldivmod>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	4b3b      	ldr	r3, [pc, #236]	; (8008e00 <UART_SetConfig+0x2d4>)
 8008d12:	fba3 2301 	umull	r2, r3, r3, r1
 8008d16:	095b      	lsrs	r3, r3, #5
 8008d18:	2264      	movs	r2, #100	; 0x64
 8008d1a:	fb02 f303 	mul.w	r3, r2, r3
 8008d1e:	1acb      	subs	r3, r1, r3
 8008d20:	00db      	lsls	r3, r3, #3
 8008d22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008d26:	4b36      	ldr	r3, [pc, #216]	; (8008e00 <UART_SetConfig+0x2d4>)
 8008d28:	fba3 2302 	umull	r2, r3, r3, r2
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008d34:	441c      	add	r4, r3
 8008d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008d44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008d48:	4642      	mov	r2, r8
 8008d4a:	464b      	mov	r3, r9
 8008d4c:	1891      	adds	r1, r2, r2
 8008d4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008d50:	415b      	adcs	r3, r3
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008d58:	4641      	mov	r1, r8
 8008d5a:	1851      	adds	r1, r2, r1
 8008d5c:	6339      	str	r1, [r7, #48]	; 0x30
 8008d5e:	4649      	mov	r1, r9
 8008d60:	414b      	adcs	r3, r1
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
 8008d64:	f04f 0200 	mov.w	r2, #0
 8008d68:	f04f 0300 	mov.w	r3, #0
 8008d6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008d70:	4659      	mov	r1, fp
 8008d72:	00cb      	lsls	r3, r1, #3
 8008d74:	4651      	mov	r1, sl
 8008d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d7a:	4651      	mov	r1, sl
 8008d7c:	00ca      	lsls	r2, r1, #3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	4619      	mov	r1, r3
 8008d82:	4603      	mov	r3, r0
 8008d84:	4642      	mov	r2, r8
 8008d86:	189b      	adds	r3, r3, r2
 8008d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d8c:	464b      	mov	r3, r9
 8008d8e:	460a      	mov	r2, r1
 8008d90:	eb42 0303 	adc.w	r3, r2, r3
 8008d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008da4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008da8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008dac:	460b      	mov	r3, r1
 8008dae:	18db      	adds	r3, r3, r3
 8008db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008db2:	4613      	mov	r3, r2
 8008db4:	eb42 0303 	adc.w	r3, r2, r3
 8008db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008dbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008dc2:	f7f7 fdb3 	bl	800092c <__aeabi_uldivmod>
 8008dc6:	4602      	mov	r2, r0
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <UART_SetConfig+0x2d4>)
 8008dcc:	fba3 1302 	umull	r1, r3, r3, r2
 8008dd0:	095b      	lsrs	r3, r3, #5
 8008dd2:	2164      	movs	r1, #100	; 0x64
 8008dd4:	fb01 f303 	mul.w	r3, r1, r3
 8008dd8:	1ad3      	subs	r3, r2, r3
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	3332      	adds	r3, #50	; 0x32
 8008dde:	4a08      	ldr	r2, [pc, #32]	; (8008e00 <UART_SetConfig+0x2d4>)
 8008de0:	fba2 2303 	umull	r2, r3, r2, r3
 8008de4:	095b      	lsrs	r3, r3, #5
 8008de6:	f003 0207 	and.w	r2, r3, #7
 8008dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4422      	add	r2, r4
 8008df2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008df4:	e105      	b.n	8009002 <UART_SetConfig+0x4d6>
 8008df6:	bf00      	nop
 8008df8:	40011000 	.word	0x40011000
 8008dfc:	40011400 	.word	0x40011400
 8008e00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008e0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008e12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008e16:	4642      	mov	r2, r8
 8008e18:	464b      	mov	r3, r9
 8008e1a:	1891      	adds	r1, r2, r2
 8008e1c:	6239      	str	r1, [r7, #32]
 8008e1e:	415b      	adcs	r3, r3
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
 8008e22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e26:	4641      	mov	r1, r8
 8008e28:	1854      	adds	r4, r2, r1
 8008e2a:	4649      	mov	r1, r9
 8008e2c:	eb43 0501 	adc.w	r5, r3, r1
 8008e30:	f04f 0200 	mov.w	r2, #0
 8008e34:	f04f 0300 	mov.w	r3, #0
 8008e38:	00eb      	lsls	r3, r5, #3
 8008e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e3e:	00e2      	lsls	r2, r4, #3
 8008e40:	4614      	mov	r4, r2
 8008e42:	461d      	mov	r5, r3
 8008e44:	4643      	mov	r3, r8
 8008e46:	18e3      	adds	r3, r4, r3
 8008e48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008e4c:	464b      	mov	r3, r9
 8008e4e:	eb45 0303 	adc.w	r3, r5, r3
 8008e52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008e62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008e72:	4629      	mov	r1, r5
 8008e74:	008b      	lsls	r3, r1, #2
 8008e76:	4621      	mov	r1, r4
 8008e78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e7c:	4621      	mov	r1, r4
 8008e7e:	008a      	lsls	r2, r1, #2
 8008e80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e84:	f7f7 fd52 	bl	800092c <__aeabi_uldivmod>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	460b      	mov	r3, r1
 8008e8c:	4b60      	ldr	r3, [pc, #384]	; (8009010 <UART_SetConfig+0x4e4>)
 8008e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8008e92:	095b      	lsrs	r3, r3, #5
 8008e94:	011c      	lsls	r4, r3, #4
 8008e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ea0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008ea4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	464b      	mov	r3, r9
 8008eac:	1891      	adds	r1, r2, r2
 8008eae:	61b9      	str	r1, [r7, #24]
 8008eb0:	415b      	adcs	r3, r3
 8008eb2:	61fb      	str	r3, [r7, #28]
 8008eb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008eb8:	4641      	mov	r1, r8
 8008eba:	1851      	adds	r1, r2, r1
 8008ebc:	6139      	str	r1, [r7, #16]
 8008ebe:	4649      	mov	r1, r9
 8008ec0:	414b      	adcs	r3, r1
 8008ec2:	617b      	str	r3, [r7, #20]
 8008ec4:	f04f 0200 	mov.w	r2, #0
 8008ec8:	f04f 0300 	mov.w	r3, #0
 8008ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008ed0:	4659      	mov	r1, fp
 8008ed2:	00cb      	lsls	r3, r1, #3
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eda:	4651      	mov	r1, sl
 8008edc:	00ca      	lsls	r2, r1, #3
 8008ede:	4610      	mov	r0, r2
 8008ee0:	4619      	mov	r1, r3
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	4642      	mov	r2, r8
 8008ee6:	189b      	adds	r3, r3, r2
 8008ee8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eec:	464b      	mov	r3, r9
 8008eee:	460a      	mov	r2, r1
 8008ef0:	eb42 0303 	adc.w	r3, r2, r3
 8008ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008f10:	4649      	mov	r1, r9
 8008f12:	008b      	lsls	r3, r1, #2
 8008f14:	4641      	mov	r1, r8
 8008f16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f1a:	4641      	mov	r1, r8
 8008f1c:	008a      	lsls	r2, r1, #2
 8008f1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008f22:	f7f7 fd03 	bl	800092c <__aeabi_uldivmod>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4b39      	ldr	r3, [pc, #228]	; (8009010 <UART_SetConfig+0x4e4>)
 8008f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8008f30:	095b      	lsrs	r3, r3, #5
 8008f32:	2164      	movs	r1, #100	; 0x64
 8008f34:	fb01 f303 	mul.w	r3, r1, r3
 8008f38:	1ad3      	subs	r3, r2, r3
 8008f3a:	011b      	lsls	r3, r3, #4
 8008f3c:	3332      	adds	r3, #50	; 0x32
 8008f3e:	4a34      	ldr	r2, [pc, #208]	; (8009010 <UART_SetConfig+0x4e4>)
 8008f40:	fba2 2303 	umull	r2, r3, r2, r3
 8008f44:	095b      	lsrs	r3, r3, #5
 8008f46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f4a:	441c      	add	r4, r3
 8008f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f50:	2200      	movs	r2, #0
 8008f52:	673b      	str	r3, [r7, #112]	; 0x70
 8008f54:	677a      	str	r2, [r7, #116]	; 0x74
 8008f56:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008f5a:	4642      	mov	r2, r8
 8008f5c:	464b      	mov	r3, r9
 8008f5e:	1891      	adds	r1, r2, r2
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	415b      	adcs	r3, r3
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f6a:	4641      	mov	r1, r8
 8008f6c:	1851      	adds	r1, r2, r1
 8008f6e:	6039      	str	r1, [r7, #0]
 8008f70:	4649      	mov	r1, r9
 8008f72:	414b      	adcs	r3, r1
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	f04f 0200 	mov.w	r2, #0
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f82:	4659      	mov	r1, fp
 8008f84:	00cb      	lsls	r3, r1, #3
 8008f86:	4651      	mov	r1, sl
 8008f88:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f8c:	4651      	mov	r1, sl
 8008f8e:	00ca      	lsls	r2, r1, #3
 8008f90:	4610      	mov	r0, r2
 8008f92:	4619      	mov	r1, r3
 8008f94:	4603      	mov	r3, r0
 8008f96:	4642      	mov	r2, r8
 8008f98:	189b      	adds	r3, r3, r2
 8008f9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f9c:	464b      	mov	r3, r9
 8008f9e:	460a      	mov	r2, r1
 8008fa0:	eb42 0303 	adc.w	r3, r2, r3
 8008fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	663b      	str	r3, [r7, #96]	; 0x60
 8008fb0:	667a      	str	r2, [r7, #100]	; 0x64
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	f04f 0300 	mov.w	r3, #0
 8008fba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	008b      	lsls	r3, r1, #2
 8008fc2:	4641      	mov	r1, r8
 8008fc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fc8:	4641      	mov	r1, r8
 8008fca:	008a      	lsls	r2, r1, #2
 8008fcc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008fd0:	f7f7 fcac 	bl	800092c <__aeabi_uldivmod>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4b0d      	ldr	r3, [pc, #52]	; (8009010 <UART_SetConfig+0x4e4>)
 8008fda:	fba3 1302 	umull	r1, r3, r3, r2
 8008fde:	095b      	lsrs	r3, r3, #5
 8008fe0:	2164      	movs	r1, #100	; 0x64
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	011b      	lsls	r3, r3, #4
 8008fea:	3332      	adds	r3, #50	; 0x32
 8008fec:	4a08      	ldr	r2, [pc, #32]	; (8009010 <UART_SetConfig+0x4e4>)
 8008fee:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff2:	095b      	lsrs	r3, r3, #5
 8008ff4:	f003 020f 	and.w	r2, r3, #15
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4422      	add	r2, r4
 8009000:	609a      	str	r2, [r3, #8]
}
 8009002:	bf00      	nop
 8009004:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009008:	46bd      	mov	sp, r7
 800900a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800900e:	bf00      	nop
 8009010:	51eb851f 	.word	0x51eb851f

08009014 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b10      	cmp	r3, #16
 8009024:	d11c      	bne.n	8009060 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <FSMC_NAND_Init+0x94>)
 800902c:	4013      	ands	r3, r2
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	6851      	ldr	r1, [r2, #4]
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	6892      	ldr	r2, [r2, #8]
 8009036:	4311      	orrs	r1, r2
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	68d2      	ldr	r2, [r2, #12]
 800903c:	4311      	orrs	r1, r2
 800903e:	683a      	ldr	r2, [r7, #0]
 8009040:	6912      	ldr	r2, [r2, #16]
 8009042:	4311      	orrs	r1, r2
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	6952      	ldr	r2, [r2, #20]
 8009048:	0252      	lsls	r2, r2, #9
 800904a:	4311      	orrs	r1, r2
 800904c:	683a      	ldr	r2, [r7, #0]
 800904e:	6992      	ldr	r2, [r2, #24]
 8009050:	0352      	lsls	r2, r2, #13
 8009052:	430a      	orrs	r2, r1
 8009054:	4313      	orrs	r3, r2
 8009056:	f043 0208 	orr.w	r2, r3, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	e01b      	b.n	8009098 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1a      	ldr	r2, [r3, #32]
 8009064:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <FSMC_NAND_Init+0x94>)
 8009066:	4013      	ands	r3, r2
 8009068:	683a      	ldr	r2, [r7, #0]
 800906a:	6851      	ldr	r1, [r2, #4]
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	6892      	ldr	r2, [r2, #8]
 8009070:	4311      	orrs	r1, r2
 8009072:	683a      	ldr	r2, [r7, #0]
 8009074:	68d2      	ldr	r2, [r2, #12]
 8009076:	4311      	orrs	r1, r2
 8009078:	683a      	ldr	r2, [r7, #0]
 800907a:	6912      	ldr	r2, [r2, #16]
 800907c:	4311      	orrs	r1, r2
 800907e:	683a      	ldr	r2, [r7, #0]
 8009080:	6952      	ldr	r2, [r2, #20]
 8009082:	0252      	lsls	r2, r2, #9
 8009084:	4311      	orrs	r1, r2
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	6992      	ldr	r2, [r2, #24]
 800908a:	0352      	lsls	r2, r2, #13
 800908c:	430a      	orrs	r2, r1
 800908e:	4313      	orrs	r3, r2
 8009090:	f043 0208 	orr.w	r2, r3, #8
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	370c      	adds	r7, #12
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	fff00181 	.word	0xfff00181

080090ac <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	60f8      	str	r0, [r7, #12]
 80090b4:	60b9      	str	r1, [r7, #8]
 80090b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b10      	cmp	r3, #16
 80090bc:	d112      	bne.n	80090e4 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	021b      	lsls	r3, r3, #8
 80090cc:	431a      	orrs	r2, r3
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	431a      	orrs	r2, r3
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	609a      	str	r2, [r3, #8]
 80090e2:	e011      	b.n	8009108 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	021b      	lsls	r3, r3, #8
 80090f2:	431a      	orrs	r2, r3
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	041b      	lsls	r3, r3, #16
 80090fa:	431a      	orrs	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	68db      	ldr	r3, [r3, #12]
 8009100:	061b      	lsls	r3, r3, #24
 8009102:	431a      	orrs	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr

08009116 <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8009116:	b480      	push	{r7}
 8009118:	b085      	sub	sp, #20
 800911a:	af00      	add	r7, sp, #0
 800911c:	60f8      	str	r0, [r7, #12]
 800911e:	60b9      	str	r1, [r7, #8]
 8009120:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2b10      	cmp	r3, #16
 8009126:	d112      	bne.n	800914e <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	021b      	lsls	r3, r3, #8
 8009136:	431a      	orrs	r2, r3
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	431a      	orrs	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	061b      	lsls	r3, r3, #24
 8009146:	431a      	orrs	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	60da      	str	r2, [r3, #12]
 800914c:	e011      	b.n	8009172 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	021b      	lsls	r3, r3, #8
 800915c:	431a      	orrs	r2, r3
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	041b      	lsls	r3, r3, #16
 8009164:	431a      	orrs	r2, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	061b      	lsls	r3, r3, #24
 800916c:	431a      	orrs	r2, r3
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <FSMC_NAND_ECC_Disable>:
  * @param  Device Pointer to NAND device instance
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_ECC_Disable(FSMC_NAND_TypeDef *Device, uint32_t Bank)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_NAND_DEVICE(Device));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Disable ECC feature */
  if (Bank == FSMC_NAND_BANK2)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	2b10      	cmp	r3, #16
 800918e:	d106      	bne.n	800919e <FSMC_NAND_ECC_Disable+0x1e>
  {
    CLEAR_BIT(Device->PCR2, FSMC_PCR2_ECCEN);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e005      	b.n	80091aa <FSMC_NAND_ECC_Disable+0x2a>
  }
  else
  {
    CLEAR_BIT(Device->PCR3, FSMC_PCR2_ECCEN);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	621a      	str	r2, [r3, #32]
  }

  return HAL_OK;
 80091aa:	2300      	movs	r3, #0
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <__NVIC_SetPriority>:
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	4603      	mov	r3, r0
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	db0a      	blt.n	80091e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	490c      	ldr	r1, [pc, #48]	; (8009204 <__NVIC_SetPriority+0x4c>)
 80091d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d6:	0112      	lsls	r2, r2, #4
 80091d8:	b2d2      	uxtb	r2, r2
 80091da:	440b      	add	r3, r1
 80091dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80091e0:	e00a      	b.n	80091f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	4908      	ldr	r1, [pc, #32]	; (8009208 <__NVIC_SetPriority+0x50>)
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	3b04      	subs	r3, #4
 80091f0:	0112      	lsls	r2, r2, #4
 80091f2:	b2d2      	uxtb	r2, r2
 80091f4:	440b      	add	r3, r1
 80091f6:	761a      	strb	r2, [r3, #24]
}
 80091f8:	bf00      	nop
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	e000e100 	.word	0xe000e100
 8009208:	e000ed00 	.word	0xe000ed00

0800920c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800920c:	b580      	push	{r7, lr}
 800920e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <SysTick_Handler+0x1c>)
 8009212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009214:	f002 f856 	bl	800b2c4 <xTaskGetSchedulerState>
 8009218:	4603      	mov	r3, r0
 800921a:	2b01      	cmp	r3, #1
 800921c:	d001      	beq.n	8009222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800921e:	f002 fe3b 	bl	800be98 <xPortSysTickHandler>
  }
}
 8009222:	bf00      	nop
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	e000e010 	.word	0xe000e010

0800922c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009230:	2100      	movs	r1, #0
 8009232:	f06f 0004 	mvn.w	r0, #4
 8009236:	f7ff ffbf 	bl	80091b8 <__NVIC_SetPriority>
#endif
}
 800923a:	bf00      	nop
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009246:	f3ef 8305 	mrs	r3, IPSR
 800924a:	603b      	str	r3, [r7, #0]
  return(result);
 800924c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800924e:	2b00      	cmp	r3, #0
 8009250:	d003      	beq.n	800925a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009252:	f06f 0305 	mvn.w	r3, #5
 8009256:	607b      	str	r3, [r7, #4]
 8009258:	e00f      	b.n	800927a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800925a:	4b0a      	ldr	r3, [pc, #40]	; (8009284 <osKernelInitialize+0x44>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d108      	bne.n	8009274 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8009262:	4809      	ldr	r0, [pc, #36]	; (8009288 <osKernelInitialize+0x48>)
 8009264:	f003 f814 	bl	800c290 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8009268:	4b06      	ldr	r3, [pc, #24]	; (8009284 <osKernelInitialize+0x44>)
 800926a:	2201      	movs	r2, #1
 800926c:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800926e:	2300      	movs	r3, #0
 8009270:	607b      	str	r3, [r7, #4]
 8009272:	e002      	b.n	800927a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8009274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009278:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800927a:	687b      	ldr	r3, [r7, #4]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	20002c7c 	.word	0x20002c7c
 8009288:	200000a4 	.word	0x200000a4

0800928c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009292:	f3ef 8305 	mrs	r3, IPSR
 8009296:	603b      	str	r3, [r7, #0]
  return(result);
 8009298:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800929e:	f06f 0305 	mvn.w	r3, #5
 80092a2:	607b      	str	r3, [r7, #4]
 80092a4:	e010      	b.n	80092c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092a6:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <osKernelStart+0x48>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d109      	bne.n	80092c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092ae:	f7ff ffbd 	bl	800922c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <osKernelStart+0x48>)
 80092b4:	2202      	movs	r2, #2
 80092b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092b8:	f001 fba8 	bl	800aa0c <vTaskStartScheduler>
      stat = osOK;
 80092bc:	2300      	movs	r3, #0
 80092be:	607b      	str	r3, [r7, #4]
 80092c0:	e002      	b.n	80092c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092c8:	687b      	ldr	r3, [r7, #4]
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20002c7c 	.word	0x20002c7c

080092d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80092d8:	b580      	push	{r7, lr}
 80092da:	b08e      	sub	sp, #56	; 0x38
 80092dc:	af04      	add	r7, sp, #16
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092e8:	f3ef 8305 	mrs	r3, IPSR
 80092ec:	617b      	str	r3, [r7, #20]
  return(result);
 80092ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d17e      	bne.n	80093f2 <osThreadNew+0x11a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d07b      	beq.n	80093f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092fa:	2380      	movs	r3, #128	; 0x80
 80092fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092fe:	2318      	movs	r3, #24
 8009300:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009306:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800930a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d045      	beq.n	800939e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <osThreadNew+0x48>
        name = attr->name;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699b      	ldr	r3, [r3, #24]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	699b      	ldr	r3, [r3, #24]
 800932c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800932e:	69fb      	ldr	r3, [r7, #28]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d008      	beq.n	8009346 <osThreadNew+0x6e>
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	2b38      	cmp	r3, #56	; 0x38
 8009338:	d805      	bhi.n	8009346 <osThreadNew+0x6e>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <osThreadNew+0x72>
        return (NULL);
 8009346:	2300      	movs	r3, #0
 8009348:	e054      	b.n	80093f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	089b      	lsrs	r3, r3, #2
 8009358:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00e      	beq.n	8009380 <osThreadNew+0xa8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	2bbb      	cmp	r3, #187	; 0xbb
 8009368:	d90a      	bls.n	8009380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800936e:	2b00      	cmp	r3, #0
 8009370:	d006      	beq.n	8009380 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <osThreadNew+0xa8>
        mem = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	61bb      	str	r3, [r7, #24]
 800937e:	e010      	b.n	80093a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10c      	bne.n	80093a2 <osThreadNew+0xca>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <osThreadNew+0xca>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d104      	bne.n	80093a2 <osThreadNew+0xca>
          mem = 0;
 8009398:	2300      	movs	r3, #0
 800939a:	61bb      	str	r3, [r7, #24]
 800939c:	e001      	b.n	80093a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d110      	bne.n	80093ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093b0:	9202      	str	r2, [sp, #8]
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	69fb      	ldr	r3, [r7, #28]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	6a3a      	ldr	r2, [r7, #32]
 80093bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f001 f938 	bl	800a634 <xTaskCreateStatic>
 80093c4:	4603      	mov	r3, r0
 80093c6:	613b      	str	r3, [r7, #16]
 80093c8:	e013      	b.n	80093f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d110      	bne.n	80093f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	f107 0310 	add.w	r3, r7, #16
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	69fb      	ldr	r3, [r7, #28]
 80093dc:	9300      	str	r3, [sp, #0]
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 f983 	bl	800a6ee <xTaskCreate>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b01      	cmp	r3, #1
 80093ec:	d001      	beq.n	80093f2 <osThreadNew+0x11a>
            hTask = NULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093f2:	693b      	ldr	r3, [r7, #16]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3728      	adds	r7, #40	; 0x28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009404:	f3ef 8305 	mrs	r3, IPSR
 8009408:	60bb      	str	r3, [r7, #8]
  return(result);
 800940a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800940c:	2b00      	cmp	r3, #0
 800940e:	d003      	beq.n	8009418 <osDelay+0x1c>
    stat = osErrorISR;
 8009410:	f06f 0305 	mvn.w	r3, #5
 8009414:	60fb      	str	r3, [r7, #12]
 8009416:	e007      	b.n	8009428 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009418:	2300      	movs	r3, #0
 800941a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f001 fabe 	bl	800a9a4 <vTaskDelay>
    }
  }

  return (stat);
 8009428:	68fb      	ldr	r3, [r7, #12]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009432:	b580      	push	{r7, lr}
 8009434:	b08a      	sub	sp, #40	; 0x28
 8009436:	af02      	add	r7, sp, #8
 8009438:	60f8      	str	r0, [r7, #12]
 800943a:	60b9      	str	r1, [r7, #8]
 800943c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800943e:	2300      	movs	r3, #0
 8009440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009442:	f3ef 8305 	mrs	r3, IPSR
 8009446:	613b      	str	r3, [r7, #16]
  return(result);
 8009448:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800944a:	2b00      	cmp	r3, #0
 800944c:	d175      	bne.n	800953a <osSemaphoreNew+0x108>
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d072      	beq.n	800953a <osSemaphoreNew+0x108>
 8009454:	68ba      	ldr	r2, [r7, #8]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	429a      	cmp	r2, r3
 800945a:	d86e      	bhi.n	800953a <osSemaphoreNew+0x108>
    mem = -1;
 800945c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009460:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d015      	beq.n	8009494 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d006      	beq.n	800947e <osSemaphoreNew+0x4c>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	2b4f      	cmp	r3, #79	; 0x4f
 8009476:	d902      	bls.n	800947e <osSemaphoreNew+0x4c>
        mem = 1;
 8009478:	2301      	movs	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
 800947c:	e00c      	b.n	8009498 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d108      	bne.n	8009498 <osSemaphoreNew+0x66>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d104      	bne.n	8009498 <osSemaphoreNew+0x66>
          mem = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	e001      	b.n	8009498 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800949e:	d04c      	beq.n	800953a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d128      	bne.n	80094f8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	d10a      	bne.n	80094c2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	2203      	movs	r2, #3
 80094b2:	9200      	str	r2, [sp, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	2001      	movs	r0, #1
 80094ba:	f000 fac5 	bl	8009a48 <xQueueGenericCreateStatic>
 80094be:	61f8      	str	r0, [r7, #28]
 80094c0:	e005      	b.n	80094ce <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80094c2:	2203      	movs	r2, #3
 80094c4:	2100      	movs	r1, #0
 80094c6:	2001      	movs	r0, #1
 80094c8:	f000 fb36 	bl	8009b38 <xQueueGenericCreate>
 80094cc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d022      	beq.n	800951a <osSemaphoreNew+0xe8>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01f      	beq.n	800951a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80094da:	2300      	movs	r3, #0
 80094dc:	2200      	movs	r2, #0
 80094de:	2100      	movs	r1, #0
 80094e0:	69f8      	ldr	r0, [r7, #28]
 80094e2:	f000 fbf1 	bl	8009cc8 <xQueueGenericSend>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d016      	beq.n	800951a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80094ec:	69f8      	ldr	r0, [r7, #28]
 80094ee:	f000 fee5 	bl	800a2bc <vQueueDelete>
            hSemaphore = NULL;
 80094f2:	2300      	movs	r3, #0
 80094f4:	61fb      	str	r3, [r7, #28]
 80094f6:	e010      	b.n	800951a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80094f8:	69bb      	ldr	r3, [r7, #24]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d108      	bne.n	8009510 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	461a      	mov	r2, r3
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	68f8      	ldr	r0, [r7, #12]
 8009508:	f000 fb73 	bl	8009bf2 <xQueueCreateCountingSemaphoreStatic>
 800950c:	61f8      	str	r0, [r7, #28]
 800950e:	e004      	b.n	800951a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009510:	68b9      	ldr	r1, [r7, #8]
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 fba4 	bl	8009c60 <xQueueCreateCountingSemaphore>
 8009518:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800951a:	69fb      	ldr	r3, [r7, #28]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d003      	beq.n	800952e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	e001      	b.n	8009532 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009532:	6979      	ldr	r1, [r7, #20]
 8009534:	69f8      	ldr	r0, [r7, #28]
 8009536:	f000 fff5 	bl	800a524 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800953a:	69fb      	ldr	r3, [r7, #28]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009544:	b580      	push	{r7, lr}
 8009546:	b08a      	sub	sp, #40	; 0x28
 8009548:	af02      	add	r7, sp, #8
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009554:	f3ef 8305 	mrs	r3, IPSR
 8009558:	613b      	str	r3, [r7, #16]
  return(result);
 800955a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800955c:	2b00      	cmp	r3, #0
 800955e:	d15f      	bne.n	8009620 <osMessageQueueNew+0xdc>
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d05c      	beq.n	8009620 <osMessageQueueNew+0xdc>
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d059      	beq.n	8009620 <osMessageQueueNew+0xdc>
    mem = -1;
 800956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009570:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d029      	beq.n	80095cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d012      	beq.n	80095a6 <osMessageQueueNew+0x62>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	2b4f      	cmp	r3, #79	; 0x4f
 8009586:	d90e      	bls.n	80095a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	695a      	ldr	r2, [r3, #20]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	429a      	cmp	r2, r3
 800959e:	d302      	bcc.n	80095a6 <osMessageQueueNew+0x62>
        mem = 1;
 80095a0:	2301      	movs	r3, #1
 80095a2:	61bb      	str	r3, [r7, #24]
 80095a4:	e014      	b.n	80095d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d110      	bne.n	80095d0 <osMessageQueueNew+0x8c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10c      	bne.n	80095d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d108      	bne.n	80095d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80095c6:	2300      	movs	r3, #0
 80095c8:	61bb      	str	r3, [r7, #24]
 80095ca:	e001      	b.n	80095d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80095d0:	69bb      	ldr	r3, [r7, #24]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d10b      	bne.n	80095ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691a      	ldr	r2, [r3, #16]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	2100      	movs	r1, #0
 80095e0:	9100      	str	r1, [sp, #0]
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fa2f 	bl	8009a48 <xQueueGenericCreateStatic>
 80095ea:	61f8      	str	r0, [r7, #28]
 80095ec:	e008      	b.n	8009600 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d105      	bne.n	8009600 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80095f4:	2200      	movs	r2, #0
 80095f6:	68b9      	ldr	r1, [r7, #8]
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 fa9d 	bl	8009b38 <xQueueGenericCreate>
 80095fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00c      	beq.n	8009620 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <osMessageQueueNew+0xd0>
        name = attr->name;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e001      	b.n	8009618 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009614:	2300      	movs	r3, #0
 8009616:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009618:	6979      	ldr	r1, [r7, #20]
 800961a:	69f8      	ldr	r0, [r7, #28]
 800961c:	f000 ff82 	bl	800a524 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009620:	69fb      	ldr	r3, [r7, #28]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3720      	adds	r7, #32
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
	...

0800962c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800962c:	b580      	push	{r7, lr}
 800962e:	b088      	sub	sp, #32
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4613      	mov	r3, r2
 800963a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009640:	2300      	movs	r3, #0
 8009642:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009644:	f3ef 8305 	mrs	r3, IPSR
 8009648:	617b      	str	r3, [r7, #20]
  return(result);
 800964a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800964c:	2b00      	cmp	r3, #0
 800964e:	d028      	beq.n	80096a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <osMessageQueuePut+0x36>
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <osMessageQueuePut+0x36>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d003      	beq.n	800966a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8009662:	f06f 0303 	mvn.w	r3, #3
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	e038      	b.n	80096dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800966a:	2300      	movs	r3, #0
 800966c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800966e:	f107 0210 	add.w	r2, r7, #16
 8009672:	2300      	movs	r3, #0
 8009674:	68b9      	ldr	r1, [r7, #8]
 8009676:	69b8      	ldr	r0, [r7, #24]
 8009678:	f000 fc24 	bl	8009ec4 <xQueueGenericSendFromISR>
 800967c:	4603      	mov	r3, r0
 800967e:	2b01      	cmp	r3, #1
 8009680:	d003      	beq.n	800968a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8009682:	f06f 0302 	mvn.w	r3, #2
 8009686:	61fb      	str	r3, [r7, #28]
 8009688:	e028      	b.n	80096dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d025      	beq.n	80096dc <osMessageQueuePut+0xb0>
 8009690:	4b15      	ldr	r3, [pc, #84]	; (80096e8 <osMessageQueuePut+0xbc>)
 8009692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	f3bf 8f6f 	isb	sy
 80096a0:	e01c      	b.n	80096dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80096a2:	69bb      	ldr	r3, [r7, #24]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d002      	beq.n	80096ae <osMessageQueuePut+0x82>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d103      	bne.n	80096b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80096ae:	f06f 0303 	mvn.w	r3, #3
 80096b2:	61fb      	str	r3, [r7, #28]
 80096b4:	e012      	b.n	80096dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80096b6:	2300      	movs	r3, #0
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	68b9      	ldr	r1, [r7, #8]
 80096bc:	69b8      	ldr	r0, [r7, #24]
 80096be:	f000 fb03 	bl	8009cc8 <xQueueGenericSend>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d009      	beq.n	80096dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80096ce:	f06f 0301 	mvn.w	r3, #1
 80096d2:	61fb      	str	r3, [r7, #28]
 80096d4:	e002      	b.n	80096dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80096d6:	f06f 0302 	mvn.w	r3, #2
 80096da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80096dc:	69fb      	ldr	r3, [r7, #28]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3720      	adds	r7, #32
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b088      	sub	sp, #32
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
 80096f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096fe:	2300      	movs	r3, #0
 8009700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009702:	f3ef 8305 	mrs	r3, IPSR
 8009706:	617b      	str	r3, [r7, #20]
  return(result);
 8009708:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800970a:	2b00      	cmp	r3, #0
 800970c:	d028      	beq.n	8009760 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800970e:	69bb      	ldr	r3, [r7, #24]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <osMessageQueueGet+0x34>
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d002      	beq.n	8009720 <osMessageQueueGet+0x34>
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d003      	beq.n	8009728 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009720:	f06f 0303 	mvn.w	r3, #3
 8009724:	61fb      	str	r3, [r7, #28]
 8009726:	e037      	b.n	8009798 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800972c:	f107 0310 	add.w	r3, r7, #16
 8009730:	461a      	mov	r2, r3
 8009732:	68b9      	ldr	r1, [r7, #8]
 8009734:	69b8      	ldr	r0, [r7, #24]
 8009736:	f000 fd41 	bl	800a1bc <xQueueReceiveFromISR>
 800973a:	4603      	mov	r3, r0
 800973c:	2b01      	cmp	r3, #1
 800973e:	d003      	beq.n	8009748 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009740:	f06f 0302 	mvn.w	r3, #2
 8009744:	61fb      	str	r3, [r7, #28]
 8009746:	e027      	b.n	8009798 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d024      	beq.n	8009798 <osMessageQueueGet+0xac>
 800974e:	4b15      	ldr	r3, [pc, #84]	; (80097a4 <osMessageQueueGet+0xb8>)
 8009750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009754:	601a      	str	r2, [r3, #0]
 8009756:	f3bf 8f4f 	dsb	sy
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	e01b      	b.n	8009798 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d002      	beq.n	800976c <osMessageQueueGet+0x80>
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d103      	bne.n	8009774 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800976c:	f06f 0303 	mvn.w	r3, #3
 8009770:	61fb      	str	r3, [r7, #28]
 8009772:	e011      	b.n	8009798 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	69b8      	ldr	r0, [r7, #24]
 800977a:	f000 fc3f 	bl	8009ffc <xQueueReceive>
 800977e:	4603      	mov	r3, r0
 8009780:	2b01      	cmp	r3, #1
 8009782:	d009      	beq.n	8009798 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800978a:	f06f 0301 	mvn.w	r3, #1
 800978e:	61fb      	str	r3, [r7, #28]
 8009790:	e002      	b.n	8009798 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8009792:	f06f 0302 	mvn.w	r3, #2
 8009796:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009798:	69fb      	ldr	r3, [r7, #28]
}
 800979a:	4618      	mov	r0, r3
 800979c:	3720      	adds	r7, #32
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	e000ed04 	.word	0xe000ed04

080097a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80097a8:	b480      	push	{r7}
 80097aa:	b085      	sub	sp, #20
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4a07      	ldr	r2, [pc, #28]	; (80097d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80097b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	4a06      	ldr	r2, [pc, #24]	; (80097d8 <vApplicationGetIdleTaskMemory+0x30>)
 80097be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2280      	movs	r2, #128	; 0x80
 80097c4:	601a      	str	r2, [r3, #0]
}
 80097c6:	bf00      	nop
 80097c8:	3714      	adds	r7, #20
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	20006480 	.word	0x20006480
 80097d8:	2000653c 	.word	0x2000653c

080097dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4a07      	ldr	r2, [pc, #28]	; (8009808 <vApplicationGetTimerTaskMemory+0x2c>)
 80097ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	4a06      	ldr	r2, [pc, #24]	; (800980c <vApplicationGetTimerTaskMemory+0x30>)
 80097f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097fa:	601a      	str	r2, [r3, #0]
}
 80097fc:	bf00      	nop
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	2000673c 	.word	0x2000673c
 800980c:	200067f8 	.word	0x200067f8

08009810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f103 0208 	add.w	r2, r3, #8
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f103 0208 	add.w	r2, r3, #8
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f103 0208 	add.w	r2, r3, #8
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009844:	bf00      	nop
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800985e:	bf00      	nop
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	683a      	ldr	r2, [r7, #0]
 800988e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	683a      	ldr	r2, [r7, #0]
 8009894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	601a      	str	r2, [r3, #0]
}
 80098a6:	bf00      	nop
 80098a8:	3714      	adds	r7, #20
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098b2:	b480      	push	{r7}
 80098b4:	b085      	sub	sp, #20
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c8:	d103      	bne.n	80098d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e00c      	b.n	80098ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3308      	adds	r3, #8
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e002      	b.n	80098e0 <vListInsert+0x2e>
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d2f6      	bcs.n	80098da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	683a      	ldr	r2, [r7, #0]
 80098fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	683a      	ldr	r2, [r7, #0]
 8009906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	1c5a      	adds	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	601a      	str	r2, [r3, #0]
}
 8009918:	bf00      	nop
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	6892      	ldr	r2, [r2, #8]
 800993a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6852      	ldr	r2, [r2, #4]
 8009944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	429a      	cmp	r2, r3
 800994e:	d103      	bne.n	8009958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689a      	ldr	r2, [r3, #8]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	1e5a      	subs	r2, r3, #1
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
}
 800996c:	4618      	mov	r0, r3
 800996e:	3714      	adds	r7, #20
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099a2:	f002 f9e7 	bl	800bd74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ae:	68f9      	ldr	r1, [r7, #12]
 80099b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099b2:	fb01 f303 	mul.w	r3, r1, r3
 80099b6:	441a      	add	r2, r3
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681a      	ldr	r2, [r3, #0]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	3b01      	subs	r3, #1
 80099d4:	68f9      	ldr	r1, [r7, #12]
 80099d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80099d8:	fb01 f303 	mul.w	r3, r1, r3
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	22ff      	movs	r2, #255	; 0xff
 80099e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	22ff      	movs	r2, #255	; 0xff
 80099ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d114      	bne.n	8009a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01a      	beq.n	8009a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	3310      	adds	r3, #16
 8009a04:	4618      	mov	r0, r3
 8009a06:	f001 fa9b 	bl	800af40 <xTaskRemoveFromEventList>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d012      	beq.n	8009a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a10:	4b0c      	ldr	r3, [pc, #48]	; (8009a44 <xQueueGenericReset+0xcc>)
 8009a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	e009      	b.n	8009a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fef2 	bl	8009810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	3324      	adds	r3, #36	; 0x24
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7ff feed 	bl	8009810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a36:	f002 f9cd 	bl	800bdd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a3a:	2301      	movs	r3, #1
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	e000ed04 	.word	0xe000ed04

08009a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08e      	sub	sp, #56	; 0x38
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10a      	bne.n	8009a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <xQueueGenericCreateStatic+0x52>
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <xQueueGenericCreateStatic+0x56>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	e000      	b.n	8009aa0 <xQueueGenericCreateStatic+0x58>
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d10a      	bne.n	8009aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	623b      	str	r3, [r7, #32]
}
 8009ab6:	bf00      	nop
 8009ab8:	e7fe      	b.n	8009ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d102      	bne.n	8009ac6 <xQueueGenericCreateStatic+0x7e>
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d101      	bne.n	8009aca <xQueueGenericCreateStatic+0x82>
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e000      	b.n	8009acc <xQueueGenericCreateStatic+0x84>
 8009aca:	2300      	movs	r3, #0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10a      	bne.n	8009ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad4:	f383 8811 	msr	BASEPRI, r3
 8009ad8:	f3bf 8f6f 	isb	sy
 8009adc:	f3bf 8f4f 	dsb	sy
 8009ae0:	61fb      	str	r3, [r7, #28]
}
 8009ae2:	bf00      	nop
 8009ae4:	e7fe      	b.n	8009ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009ae6:	2350      	movs	r3, #80	; 0x50
 8009ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2b50      	cmp	r3, #80	; 0x50
 8009aee:	d00a      	beq.n	8009b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af4:	f383 8811 	msr	BASEPRI, r3
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	f3bf 8f4f 	dsb	sy
 8009b00:	61bb      	str	r3, [r7, #24]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00d      	beq.n	8009b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b14:	2201      	movs	r2, #1
 8009b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	4613      	mov	r3, r2
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	68f8      	ldr	r0, [r7, #12]
 8009b2a:	f000 f83f 	bl	8009bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3730      	adds	r7, #48	; 0x30
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08a      	sub	sp, #40	; 0x28
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	4613      	mov	r3, r2
 8009b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b50:	f383 8811 	msr	BASEPRI, r3
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	f3bf 8f4f 	dsb	sy
 8009b5c:	613b      	str	r3, [r7, #16]
}
 8009b5e:	bf00      	nop
 8009b60:	e7fe      	b.n	8009b60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	fb02 f303 	mul.w	r3, r2, r3
 8009b6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	3350      	adds	r3, #80	; 0x50
 8009b70:	4618      	mov	r0, r3
 8009b72:	f002 fa21 	bl	800bfb8 <pvPortMalloc>
 8009b76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d011      	beq.n	8009ba2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	3350      	adds	r3, #80	; 0x50
 8009b86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b90:	79fa      	ldrb	r2, [r7, #7]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	4613      	mov	r3, r2
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f805 	bl	8009bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3720      	adds	r7, #32
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
 8009bb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d103      	bne.n	8009bc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	601a      	str	r2, [r3, #0]
 8009bc6:	e002      	b.n	8009bce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009bda:	2101      	movs	r1, #1
 8009bdc:	69b8      	ldr	r0, [r7, #24]
 8009bde:	f7ff fecb 	bl	8009978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	78fa      	ldrb	r2, [r7, #3]
 8009be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}

08009bf2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009bf2:	b580      	push	{r7, lr}
 8009bf4:	b08a      	sub	sp, #40	; 0x28
 8009bf6:	af02      	add	r7, sp, #8
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	61bb      	str	r3, [r7, #24]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d90a      	bls.n	8009c38 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	617b      	str	r3, [r7, #20]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c38:	2302      	movs	r3, #2
 8009c3a:	9300      	str	r3, [sp, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	2100      	movs	r1, #0
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f7ff ff00 	bl	8009a48 <xQueueGenericCreateStatic>
 8009c48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c56:	69fb      	ldr	r3, [r7, #28]
	}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3720      	adds	r7, #32
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d10a      	bne.n	8009c86 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c74:	f383 8811 	msr	BASEPRI, r3
 8009c78:	f3bf 8f6f 	isb	sy
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	613b      	str	r3, [r7, #16]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d90a      	bls.n	8009ca4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c92:	f383 8811 	msr	BASEPRI, r3
 8009c96:	f3bf 8f6f 	isb	sy
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	60fb      	str	r3, [r7, #12]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ca4:	2202      	movs	r2, #2
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f7ff ff45 	bl	8009b38 <xQueueGenericCreate>
 8009cae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d002      	beq.n	8009cbc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009cbc:	697b      	ldr	r3, [r7, #20]
	}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
	...

08009cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b08e      	sub	sp, #56	; 0x38
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d10a      	bne.n	8009cfa <xQueueGenericSend+0x32>
	__asm volatile
 8009ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce8:	f383 8811 	msr	BASEPRI, r3
 8009cec:	f3bf 8f6f 	isb	sy
 8009cf0:	f3bf 8f4f 	dsb	sy
 8009cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cf6:	bf00      	nop
 8009cf8:	e7fe      	b.n	8009cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <xQueueGenericSend+0x40>
 8009d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d101      	bne.n	8009d0c <xQueueGenericSend+0x44>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e000      	b.n	8009d0e <xQueueGenericSend+0x46>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <xQueueGenericSend+0x60>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b02      	cmp	r3, #2
 8009d2c:	d103      	bne.n	8009d36 <xQueueGenericSend+0x6e>
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d101      	bne.n	8009d3a <xQueueGenericSend+0x72>
 8009d36:	2301      	movs	r3, #1
 8009d38:	e000      	b.n	8009d3c <xQueueGenericSend+0x74>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10a      	bne.n	8009d56 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	623b      	str	r3, [r7, #32]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d56:	f001 fab5 	bl	800b2c4 <xTaskGetSchedulerState>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d102      	bne.n	8009d66 <xQueueGenericSend+0x9e>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d101      	bne.n	8009d6a <xQueueGenericSend+0xa2>
 8009d66:	2301      	movs	r3, #1
 8009d68:	e000      	b.n	8009d6c <xQueueGenericSend+0xa4>
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d10a      	bne.n	8009d86 <xQueueGenericSend+0xbe>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	61fb      	str	r3, [r7, #28]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d86:	f001 fff5 	bl	800bd74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d92:	429a      	cmp	r2, r3
 8009d94:	d302      	bcc.n	8009d9c <xQueueGenericSend+0xd4>
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b02      	cmp	r3, #2
 8009d9a:	d129      	bne.n	8009df0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d9c:	683a      	ldr	r2, [r7, #0]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009da2:	f000 faae 	bl	800a302 <prvCopyDataToQueue>
 8009da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d010      	beq.n	8009dd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db2:	3324      	adds	r3, #36	; 0x24
 8009db4:	4618      	mov	r0, r3
 8009db6:	f001 f8c3 	bl	800af40 <xTaskRemoveFromEventList>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d013      	beq.n	8009de8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009dc0:	4b3f      	ldr	r3, [pc, #252]	; (8009ec0 <xQueueGenericSend+0x1f8>)
 8009dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	e00a      	b.n	8009de8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d007      	beq.n	8009de8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009dd8:	4b39      	ldr	r3, [pc, #228]	; (8009ec0 <xQueueGenericSend+0x1f8>)
 8009dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dde:	601a      	str	r2, [r3, #0]
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009de8:	f001 fff4 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 8009dec:	2301      	movs	r3, #1
 8009dee:	e063      	b.n	8009eb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d103      	bne.n	8009dfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009df6:	f001 ffed 	bl	800bdd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e05c      	b.n	8009eb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e04:	f107 0314 	add.w	r3, r7, #20
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f001 f8fd 	bl	800b008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e0e:	2301      	movs	r3, #1
 8009e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e12:	f001 ffdf 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e16:	f000 fe69 	bl	800aaec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e1a:	f001 ffab 	bl	800bd74 <vPortEnterCritical>
 8009e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e24:	b25b      	sxtb	r3, r3
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2a:	d103      	bne.n	8009e34 <xQueueGenericSend+0x16c>
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e3a:	b25b      	sxtb	r3, r3
 8009e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e40:	d103      	bne.n	8009e4a <xQueueGenericSend+0x182>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e4a:	f001 ffc3 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e4e:	1d3a      	adds	r2, r7, #4
 8009e50:	f107 0314 	add.w	r3, r7, #20
 8009e54:	4611      	mov	r1, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f001 f8ec 	bl	800b034 <xTaskCheckForTimeOut>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d124      	bne.n	8009eac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e64:	f000 fb45 	bl	800a4f2 <prvIsQueueFull>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d018      	beq.n	8009ea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	3310      	adds	r3, #16
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f001 f812 	bl	800aea0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e7e:	f000 fad0 	bl	800a422 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e82:	f000 fe41 	bl	800ab08 <xTaskResumeAll>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f47f af7c 	bne.w	8009d86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ec0 <xQueueGenericSend+0x1f8>)
 8009e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e94:	601a      	str	r2, [r3, #0]
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	e772      	b.n	8009d86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ea2:	f000 fabe 	bl	800a422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ea6:	f000 fe2f 	bl	800ab08 <xTaskResumeAll>
 8009eaa:	e76c      	b.n	8009d86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eae:	f000 fab8 	bl	800a422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009eb2:	f000 fe29 	bl	800ab08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3738      	adds	r7, #56	; 0x38
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b090      	sub	sp, #64	; 0x40
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d10a      	bne.n	8009ef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d103      	bne.n	8009f00 <xQueueGenericSendFromISR+0x3c>
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <xQueueGenericSendFromISR+0x40>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <xQueueGenericSendFromISR+0x42>
 8009f04:	2300      	movs	r3, #0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d10a      	bne.n	8009f20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSendFromISR+0x6a>
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <xQueueGenericSendFromISR+0x6e>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <xQueueGenericSendFromISR+0x70>
 8009f32:	2300      	movs	r3, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	623b      	str	r3, [r7, #32]
}
 8009f4a:	bf00      	nop
 8009f4c:	e7fe      	b.n	8009f4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f4e:	f001 fff3 	bl	800bf38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009f52:	f3ef 8211 	mrs	r2, BASEPRI
 8009f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5a:	f383 8811 	msr	BASEPRI, r3
 8009f5e:	f3bf 8f6f 	isb	sy
 8009f62:	f3bf 8f4f 	dsb	sy
 8009f66:	61fa      	str	r2, [r7, #28]
 8009f68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009f6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d302      	bcc.n	8009f80 <xQueueGenericSendFromISR+0xbc>
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d12f      	bne.n	8009fe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	68b9      	ldr	r1, [r7, #8]
 8009f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f96:	f000 f9b4 	bl	800a302 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa2:	d112      	bne.n	8009fca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d016      	beq.n	8009fda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fae:	3324      	adds	r3, #36	; 0x24
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f000 ffc5 	bl	800af40 <xTaskRemoveFromEventList>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00e      	beq.n	8009fda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	e007      	b.n	8009fda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fce:	3301      	adds	r3, #1
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	b25a      	sxtb	r2, r3
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fda:	2301      	movs	r3, #1
 8009fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009fde:	e001      	b.n	8009fe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009fee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3740      	adds	r7, #64	; 0x40
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08c      	sub	sp, #48	; 0x30
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a008:	2300      	movs	r3, #0
 800a00a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10a      	bne.n	800a02c <xQueueReceive+0x30>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	f383 8811 	msr	BASEPRI, r3
 800a01e:	f3bf 8f6f 	isb	sy
 800a022:	f3bf 8f4f 	dsb	sy
 800a026:	623b      	str	r3, [r7, #32]
}
 800a028:	bf00      	nop
 800a02a:	e7fe      	b.n	800a02a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d103      	bne.n	800a03a <xQueueReceive+0x3e>
 800a032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <xQueueReceive+0x42>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e000      	b.n	800a040 <xQueueReceive+0x44>
 800a03e:	2300      	movs	r3, #0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xQueueReceive+0x5e>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	61fb      	str	r3, [r7, #28]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a05a:	f001 f933 	bl	800b2c4 <xTaskGetSchedulerState>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <xQueueReceive+0x6e>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d101      	bne.n	800a06e <xQueueReceive+0x72>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueReceive+0x74>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10a      	bne.n	800a08a <xQueueReceive+0x8e>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	61bb      	str	r3, [r7, #24]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a08a:	f001 fe73 	bl	800bd74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a092:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	d01f      	beq.n	800a0da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a09a:	68b9      	ldr	r1, [r7, #8]
 800a09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a09e:	f000 f99a 	bl	800a3d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	1e5a      	subs	r2, r3, #1
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00f      	beq.n	800a0d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	3310      	adds	r3, #16
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 ff42 	bl	800af40 <xTaskRemoveFromEventList>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d007      	beq.n	800a0d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0c2:	4b3d      	ldr	r3, [pc, #244]	; (800a1b8 <xQueueReceive+0x1bc>)
 800a0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0d2:	f001 fe7f 	bl	800bdd4 <vPortExitCritical>
				return pdPASS;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e069      	b.n	800a1ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d103      	bne.n	800a0e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0e0:	f001 fe78 	bl	800bdd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	e062      	b.n	800a1ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d106      	bne.n	800a0fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 ff88 	bl	800b008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a0fc:	f001 fe6a 	bl	800bdd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a100:	f000 fcf4 	bl	800aaec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a104:	f001 fe36 	bl	800bd74 <vPortEnterCritical>
 800a108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a10a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a10e:	b25b      	sxtb	r3, r3
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a114:	d103      	bne.n	800a11e <xQueueReceive+0x122>
 800a116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a124:	b25b      	sxtb	r3, r3
 800a126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a12a:	d103      	bne.n	800a134 <xQueueReceive+0x138>
 800a12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a134:	f001 fe4e 	bl	800bdd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a138:	1d3a      	adds	r2, r7, #4
 800a13a:	f107 0310 	add.w	r3, r7, #16
 800a13e:	4611      	mov	r1, r2
 800a140:	4618      	mov	r0, r3
 800a142:	f000 ff77 	bl	800b034 <xTaskCheckForTimeOut>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d123      	bne.n	800a194 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a14c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a14e:	f000 f9ba 	bl	800a4c6 <prvIsQueueEmpty>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d017      	beq.n	800a188 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a15a:	3324      	adds	r3, #36	; 0x24
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	4611      	mov	r1, r2
 800a160:	4618      	mov	r0, r3
 800a162:	f000 fe9d 	bl	800aea0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a168:	f000 f95b 	bl	800a422 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a16c:	f000 fccc 	bl	800ab08 <xTaskResumeAll>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d189      	bne.n	800a08a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a176:	4b10      	ldr	r3, [pc, #64]	; (800a1b8 <xQueueReceive+0x1bc>)
 800a178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	e780      	b.n	800a08a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a18a:	f000 f94a 	bl	800a422 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a18e:	f000 fcbb 	bl	800ab08 <xTaskResumeAll>
 800a192:	e77a      	b.n	800a08a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a196:	f000 f944 	bl	800a422 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a19a:	f000 fcb5 	bl	800ab08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a19e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a0:	f000 f991 	bl	800a4c6 <prvIsQueueEmpty>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f43f af6f 	beq.w	800a08a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3730      	adds	r7, #48	; 0x30
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	e000ed04 	.word	0xe000ed04

0800a1bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b08e      	sub	sp, #56	; 0x38
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10a      	bne.n	800a1e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	623b      	str	r3, [r7, #32]
}
 800a1e4:	bf00      	nop
 800a1e6:	e7fe      	b.n	800a1e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d103      	bne.n	800a1f6 <xQueueReceiveFromISR+0x3a>
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d101      	bne.n	800a1fa <xQueueReceiveFromISR+0x3e>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <xQueueReceiveFromISR+0x40>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10a      	bne.n	800a216 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	f383 8811 	msr	BASEPRI, r3
 800a208:	f3bf 8f6f 	isb	sy
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	61fb      	str	r3, [r7, #28]
}
 800a212:	bf00      	nop
 800a214:	e7fe      	b.n	800a214 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a216:	f001 fe8f 	bl	800bf38 <vPortValidateInterruptPriority>
	__asm volatile
 800a21a:	f3ef 8211 	mrs	r2, BASEPRI
 800a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a222:	f383 8811 	msr	BASEPRI, r3
 800a226:	f3bf 8f6f 	isb	sy
 800a22a:	f3bf 8f4f 	dsb	sy
 800a22e:	61ba      	str	r2, [r7, #24]
 800a230:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a232:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a234:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a23a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d02f      	beq.n	800a2a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a250:	f000 f8c1 	bl	800a3d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a256:	1e5a      	subs	r2, r3, #1
 800a258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a264:	d112      	bne.n	800a28c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d016      	beq.n	800a29c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a270:	3310      	adds	r3, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fe64 	bl	800af40 <xTaskRemoveFromEventList>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00e      	beq.n	800a29c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2201      	movs	r2, #1
 800a288:	601a      	str	r2, [r3, #0]
 800a28a:	e007      	b.n	800a29c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a290:	3301      	adds	r3, #1
 800a292:	b2db      	uxtb	r3, r3
 800a294:	b25a      	sxtb	r2, r3
 800a296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a29c:	2301      	movs	r3, #1
 800a29e:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a0:	e001      	b.n	800a2a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	f383 8811 	msr	BASEPRI, r3
}
 800a2b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3738      	adds	r7, #56	; 0x38
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d10a      	bne.n	800a2e4 <vQueueDelete+0x28>
	__asm volatile
 800a2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d2:	f383 8811 	msr	BASEPRI, r3
 800a2d6:	f3bf 8f6f 	isb	sy
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	60bb      	str	r3, [r7, #8]
}
 800a2e0:	bf00      	nop
 800a2e2:	e7fe      	b.n	800a2e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 f947 	bl	800a578 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d102      	bne.n	800a2fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f001 ff03 	bl	800c100 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a2fa:	bf00      	nop
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b086      	sub	sp, #24
 800a306:	af00      	add	r7, sp, #0
 800a308:	60f8      	str	r0, [r7, #12]
 800a30a:	60b9      	str	r1, [r7, #8]
 800a30c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a316:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10d      	bne.n	800a33c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d14d      	bne.n	800a3c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f000 ffe7 	bl	800b300 <xTaskPriorityDisinherit>
 800a332:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	609a      	str	r2, [r3, #8]
 800a33a:	e043      	b.n	800a3c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d119      	bne.n	800a376 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6858      	ldr	r0, [r3, #4]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34a:	461a      	mov	r2, r3
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	f002 fa45 	bl	800c7dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	685a      	ldr	r2, [r3, #4]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	441a      	add	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d32b      	bcc.n	800a3c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681a      	ldr	r2, [r3, #0]
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	605a      	str	r2, [r3, #4]
 800a374:	e026      	b.n	800a3c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	68d8      	ldr	r0, [r3, #12]
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	461a      	mov	r2, r3
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	f002 fa2b 	bl	800c7dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	68da      	ldr	r2, [r3, #12]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38e:	425b      	negs	r3, r3
 800a390:	441a      	add	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d207      	bcs.n	800a3b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3aa:	425b      	negs	r3, r3
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b02      	cmp	r3, #2
 800a3b6:	d105      	bne.n	800a3c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d002      	beq.n	800a3c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a3cc:	697b      	ldr	r3, [r7, #20]
}
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	3718      	adds	r7, #24
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}

0800a3d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a3d6:	b580      	push	{r7, lr}
 800a3d8:	b082      	sub	sp, #8
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	6078      	str	r0, [r7, #4]
 800a3de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d018      	beq.n	800a41a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	68da      	ldr	r2, [r3, #12]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f0:	441a      	add	r2, r3
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68da      	ldr	r2, [r3, #12]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	689b      	ldr	r3, [r3, #8]
 800a3fe:	429a      	cmp	r2, r3
 800a400:	d303      	bcc.n	800a40a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68d9      	ldr	r1, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a412:	461a      	mov	r2, r3
 800a414:	6838      	ldr	r0, [r7, #0]
 800a416:	f002 f9e1 	bl	800c7dc <memcpy>
	}
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a42a:	f001 fca3 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a434:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a436:	e011      	b.n	800a45c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d012      	beq.n	800a466 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3324      	adds	r3, #36	; 0x24
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fd7b 	bl	800af40 <xTaskRemoveFromEventList>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a450:	f000 fe52 	bl	800b0f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a454:	7bfb      	ldrb	r3, [r7, #15]
 800a456:	3b01      	subs	r3, #1
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	dce9      	bgt.n	800a438 <prvUnlockQueue+0x16>
 800a464:	e000      	b.n	800a468 <prvUnlockQueue+0x46>
					break;
 800a466:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	22ff      	movs	r2, #255	; 0xff
 800a46c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a470:	f001 fcb0 	bl	800bdd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a474:	f001 fc7e 	bl	800bd74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a47e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a480:	e011      	b.n	800a4a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d012      	beq.n	800a4b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3310      	adds	r3, #16
 800a48e:	4618      	mov	r0, r3
 800a490:	f000 fd56 	bl	800af40 <xTaskRemoveFromEventList>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a49a:	f000 fe2d 	bl	800b0f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a49e:	7bbb      	ldrb	r3, [r7, #14]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	dce9      	bgt.n	800a482 <prvUnlockQueue+0x60>
 800a4ae:	e000      	b.n	800a4b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	22ff      	movs	r2, #255	; 0xff
 800a4b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4ba:	f001 fc8b 	bl	800bdd4 <vPortExitCritical>
}
 800a4be:	bf00      	nop
 800a4c0:	3710      	adds	r7, #16
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}

0800a4c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b084      	sub	sp, #16
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4ce:	f001 fc51 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d102      	bne.n	800a4e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	60fb      	str	r3, [r7, #12]
 800a4de:	e001      	b.n	800a4e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4e4:	f001 fc76 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4fa:	f001 fc3b 	bl	800bd74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a506:	429a      	cmp	r2, r3
 800a508:	d102      	bne.n	800a510 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a50a:	2301      	movs	r3, #1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	e001      	b.n	800a514 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a510:	2300      	movs	r3, #0
 800a512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a514:	f001 fc5e 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800a518:	68fb      	ldr	r3, [r7, #12]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a52e:	2300      	movs	r3, #0
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e014      	b.n	800a55e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a534:	4a0f      	ldr	r2, [pc, #60]	; (800a574 <vQueueAddToRegistry+0x50>)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10b      	bne.n	800a558 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a540:	490c      	ldr	r1, [pc, #48]	; (800a574 <vQueueAddToRegistry+0x50>)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a54a:	4a0a      	ldr	r2, [pc, #40]	; (800a574 <vQueueAddToRegistry+0x50>)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	00db      	lsls	r3, r3, #3
 800a550:	4413      	add	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a556:	e006      	b.n	800a566 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	3301      	adds	r3, #1
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b07      	cmp	r3, #7
 800a562:	d9e7      	bls.n	800a534 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20006bf8 	.word	0x20006bf8

0800a578 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a580:	2300      	movs	r3, #0
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e016      	b.n	800a5b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a586:	4a10      	ldr	r2, [pc, #64]	; (800a5c8 <vQueueUnregisterQueue+0x50>)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	00db      	lsls	r3, r3, #3
 800a58c:	4413      	add	r3, r2
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	429a      	cmp	r2, r3
 800a594:	d10b      	bne.n	800a5ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a596:	4a0c      	ldr	r2, [pc, #48]	; (800a5c8 <vQueueUnregisterQueue+0x50>)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2100      	movs	r1, #0
 800a59c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a5a0:	4a09      	ldr	r2, [pc, #36]	; (800a5c8 <vQueueUnregisterQueue+0x50>)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	00db      	lsls	r3, r3, #3
 800a5a6:	4413      	add	r3, r2
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	605a      	str	r2, [r3, #4]
				break;
 800a5ac:	e006      	b.n	800a5bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b07      	cmp	r3, #7
 800a5b8:	d9e5      	bls.n	800a586 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	3714      	adds	r7, #20
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr
 800a5c8:	20006bf8 	.word	0x20006bf8

0800a5cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	60f8      	str	r0, [r7, #12]
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5dc:	f001 fbca 	bl	800bd74 <vPortEnterCritical>
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5e6:	b25b      	sxtb	r3, r3
 800a5e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5ec:	d103      	bne.n	800a5f6 <vQueueWaitForMessageRestricted+0x2a>
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5fc:	b25b      	sxtb	r3, r3
 800a5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a602:	d103      	bne.n	800a60c <vQueueWaitForMessageRestricted+0x40>
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	2200      	movs	r2, #0
 800a608:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a60c:	f001 fbe2 	bl	800bdd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	2b00      	cmp	r3, #0
 800a616:	d106      	bne.n	800a626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3324      	adds	r3, #36	; 0x24
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	4618      	mov	r0, r3
 800a622:	f000 fc61 	bl	800aee8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a626:	6978      	ldr	r0, [r7, #20]
 800a628:	f7ff fefb 	bl	800a422 <prvUnlockQueue>
	}
 800a62c:	bf00      	nop
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08e      	sub	sp, #56	; 0x38
 800a638:	af04      	add	r7, sp, #16
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a644:	2b00      	cmp	r3, #0
 800a646:	d10a      	bne.n	800a65e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	623b      	str	r3, [r7, #32]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xTaskCreateStatic+0x46>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	61fb      	str	r3, [r7, #28]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a67a:	23bc      	movs	r3, #188	; 0xbc
 800a67c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a67e:	693b      	ldr	r3, [r7, #16]
 800a680:	2bbc      	cmp	r3, #188	; 0xbc
 800a682:	d00a      	beq.n	800a69a <xTaskCreateStatic+0x66>
	__asm volatile
 800a684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a688:	f383 8811 	msr	BASEPRI, r3
 800a68c:	f3bf 8f6f 	isb	sy
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	61bb      	str	r3, [r7, #24]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a69a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a69c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d01e      	beq.n	800a6e0 <xTaskCreateStatic+0xac>
 800a6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01b      	beq.n	800a6e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9303      	str	r3, [sp, #12]
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	9302      	str	r3, [sp, #8]
 800a6c2:	f107 0314 	add.w	r3, r7, #20
 800a6c6:	9301      	str	r3, [sp, #4]
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	687a      	ldr	r2, [r7, #4]
 800a6d0:	68b9      	ldr	r1, [r7, #8]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f850 	bl	800a778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6da:	f000 f8f3 	bl	800a8c4 <prvAddNewTaskToReadyList>
 800a6de:	e001      	b.n	800a6e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6e4:	697b      	ldr	r3, [r7, #20]
	}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	3728      	adds	r7, #40	; 0x28
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}

0800a6ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6ee:	b580      	push	{r7, lr}
 800a6f0:	b08c      	sub	sp, #48	; 0x30
 800a6f2:	af04      	add	r7, sp, #16
 800a6f4:	60f8      	str	r0, [r7, #12]
 800a6f6:	60b9      	str	r1, [r7, #8]
 800a6f8:	603b      	str	r3, [r7, #0]
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6fe:	88fb      	ldrh	r3, [r7, #6]
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4618      	mov	r0, r3
 800a704:	f001 fc58 	bl	800bfb8 <pvPortMalloc>
 800a708:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00e      	beq.n	800a72e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a710:	20bc      	movs	r0, #188	; 0xbc
 800a712:	f001 fc51 	bl	800bfb8 <pvPortMalloc>
 800a716:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	631a      	str	r2, [r3, #48]	; 0x30
 800a724:	e005      	b.n	800a732 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a726:	6978      	ldr	r0, [r7, #20]
 800a728:	f001 fcea 	bl	800c100 <vPortFree>
 800a72c:	e001      	b.n	800a732 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a72e:	2300      	movs	r3, #0
 800a730:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d017      	beq.n	800a768 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a740:	88fa      	ldrh	r2, [r7, #6]
 800a742:	2300      	movs	r3, #0
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	9302      	str	r3, [sp, #8]
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f80e 	bl	800a778 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a75c:	69f8      	ldr	r0, [r7, #28]
 800a75e:	f000 f8b1 	bl	800a8c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a762:	2301      	movs	r3, #1
 800a764:	61bb      	str	r3, [r7, #24]
 800a766:	e002      	b.n	800a76e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a76c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a76e:	69bb      	ldr	r3, [r7, #24]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	461a      	mov	r2, r3
 800a790:	21a5      	movs	r1, #165	; 0xa5
 800a792:	f002 f831 	bl	800c7f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	4413      	add	r3, r2
 800a7a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a7a8:	69bb      	ldr	r3, [r7, #24]
 800a7aa:	f023 0307 	bic.w	r3, r3, #7
 800a7ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	f003 0307 	and.w	r3, r3, #7
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	617b      	str	r3, [r7, #20]
}
 800a7cc:	bf00      	nop
 800a7ce:	e7fe      	b.n	800a7ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d01f      	beq.n	800a816 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61fb      	str	r3, [r7, #28]
 800a7da:	e012      	b.n	800a802 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	7819      	ldrb	r1, [r3, #0]
 800a7e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	3334      	adds	r3, #52	; 0x34
 800a7ec:	460a      	mov	r2, r1
 800a7ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	4413      	add	r3, r2
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d006      	beq.n	800a80a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	3301      	adds	r3, #1
 800a800:	61fb      	str	r3, [r7, #28]
 800a802:	69fb      	ldr	r3, [r7, #28]
 800a804:	2b0f      	cmp	r3, #15
 800a806:	d9e9      	bls.n	800a7dc <prvInitialiseNewTask+0x64>
 800a808:	e000      	b.n	800a80c <prvInitialiseNewTask+0x94>
			{
				break;
 800a80a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a814:	e003      	b.n	800a81e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	2b37      	cmp	r3, #55	; 0x37
 800a822:	d901      	bls.n	800a828 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a824:	2337      	movs	r3, #55	; 0x37
 800a826:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a82c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a832:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a836:	2200      	movs	r2, #0
 800a838:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83c:	3304      	adds	r3, #4
 800a83e:	4618      	mov	r0, r3
 800a840:	f7ff f806 	bl	8009850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	3318      	adds	r3, #24
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff f801 	bl	8009850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a856:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a862:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2200      	movs	r2, #0
 800a868:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	3354      	adds	r3, #84	; 0x54
 800a878:	2260      	movs	r2, #96	; 0x60
 800a87a:	2100      	movs	r1, #0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 ffbb 	bl	800c7f8 <memset>
 800a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a884:	4a0c      	ldr	r2, [pc, #48]	; (800a8b8 <prvInitialiseNewTask+0x140>)
 800a886:	659a      	str	r2, [r3, #88]	; 0x58
 800a888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88a:	4a0c      	ldr	r2, [pc, #48]	; (800a8bc <prvInitialiseNewTask+0x144>)
 800a88c:	65da      	str	r2, [r3, #92]	; 0x5c
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	4a0b      	ldr	r2, [pc, #44]	; (800a8c0 <prvInitialiseNewTask+0x148>)
 800a892:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	68f9      	ldr	r1, [r7, #12]
 800a898:	69b8      	ldr	r0, [r7, #24]
 800a89a:	f001 f941 	bl	800bb20 <pxPortInitialiseStack>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d002      	beq.n	800a8b0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8ae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a8b0:	bf00      	nop
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	08011690 	.word	0x08011690
 800a8bc:	080116b0 	.word	0x080116b0
 800a8c0:	08011670 	.word	0x08011670

0800a8c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a8cc:	f001 fa52 	bl	800bd74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a8d0:	4b2d      	ldr	r3, [pc, #180]	; (800a988 <prvAddNewTaskToReadyList+0xc4>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	4a2c      	ldr	r2, [pc, #176]	; (800a988 <prvAddNewTaskToReadyList+0xc4>)
 800a8d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8da:	4b2c      	ldr	r3, [pc, #176]	; (800a98c <prvAddNewTaskToReadyList+0xc8>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	; (800a98c <prvAddNewTaskToReadyList+0xc8>)
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8e8:	4b27      	ldr	r3, [pc, #156]	; (800a988 <prvAddNewTaskToReadyList+0xc4>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	d110      	bne.n	800a912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8f0:	f000 fc26 	bl	800b140 <prvInitialiseTaskLists>
 800a8f4:	e00d      	b.n	800a912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8f6:	4b26      	ldr	r3, [pc, #152]	; (800a990 <prvAddNewTaskToReadyList+0xcc>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d109      	bne.n	800a912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8fe:	4b23      	ldr	r3, [pc, #140]	; (800a98c <prvAddNewTaskToReadyList+0xc8>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a908:	429a      	cmp	r2, r3
 800a90a:	d802      	bhi.n	800a912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a90c:	4a1f      	ldr	r2, [pc, #124]	; (800a98c <prvAddNewTaskToReadyList+0xc8>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a912:	4b20      	ldr	r3, [pc, #128]	; (800a994 <prvAddNewTaskToReadyList+0xd0>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	3301      	adds	r3, #1
 800a918:	4a1e      	ldr	r2, [pc, #120]	; (800a994 <prvAddNewTaskToReadyList+0xd0>)
 800a91a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a91c:	4b1d      	ldr	r3, [pc, #116]	; (800a994 <prvAddNewTaskToReadyList+0xd0>)
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a928:	4b1b      	ldr	r3, [pc, #108]	; (800a998 <prvAddNewTaskToReadyList+0xd4>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d903      	bls.n	800a938 <prvAddNewTaskToReadyList+0x74>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	4a18      	ldr	r2, [pc, #96]	; (800a998 <prvAddNewTaskToReadyList+0xd4>)
 800a936:	6013      	str	r3, [r2, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	4a15      	ldr	r2, [pc, #84]	; (800a99c <prvAddNewTaskToReadyList+0xd8>)
 800a946:	441a      	add	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	3304      	adds	r3, #4
 800a94c:	4619      	mov	r1, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	f7fe ff8b 	bl	800986a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a954:	f001 fa3e 	bl	800bdd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a958:	4b0d      	ldr	r3, [pc, #52]	; (800a990 <prvAddNewTaskToReadyList+0xcc>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00e      	beq.n	800a97e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a960:	4b0a      	ldr	r3, [pc, #40]	; (800a98c <prvAddNewTaskToReadyList+0xc8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96a:	429a      	cmp	r2, r3
 800a96c:	d207      	bcs.n	800a97e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a96e:	4b0c      	ldr	r3, [pc, #48]	; (800a9a0 <prvAddNewTaskToReadyList+0xdc>)
 800a970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a974:	601a      	str	r2, [r3, #0]
 800a976:	f3bf 8f4f 	dsb	sy
 800a97a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a97e:	bf00      	nop
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	2000710c 	.word	0x2000710c
 800a98c:	20006c38 	.word	0x20006c38
 800a990:	20007118 	.word	0x20007118
 800a994:	20007128 	.word	0x20007128
 800a998:	20007114 	.word	0x20007114
 800a99c:	20006c3c 	.word	0x20006c3c
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d017      	beq.n	800a9e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9b6:	4b13      	ldr	r3, [pc, #76]	; (800aa04 <vTaskDelay+0x60>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00a      	beq.n	800a9d4 <vTaskDelay+0x30>
	__asm volatile
 800a9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c2:	f383 8811 	msr	BASEPRI, r3
 800a9c6:	f3bf 8f6f 	isb	sy
 800a9ca:	f3bf 8f4f 	dsb	sy
 800a9ce:	60bb      	str	r3, [r7, #8]
}
 800a9d0:	bf00      	nop
 800a9d2:	e7fe      	b.n	800a9d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a9d4:	f000 f88a 	bl	800aaec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9d8:	2100      	movs	r1, #0
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 fcfe 	bl	800b3dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9e0:	f000 f892 	bl	800ab08 <xTaskResumeAll>
 800a9e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d107      	bne.n	800a9fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a9ec:	4b06      	ldr	r3, [pc, #24]	; (800aa08 <vTaskDelay+0x64>)
 800a9ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	f3bf 8f4f 	dsb	sy
 800a9f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9fc:	bf00      	nop
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	20007134 	.word	0x20007134
 800aa08:	e000ed04 	.word	0xe000ed04

0800aa0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b08a      	sub	sp, #40	; 0x28
 800aa10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aa12:	2300      	movs	r3, #0
 800aa14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aa16:	2300      	movs	r3, #0
 800aa18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aa1a:	463a      	mov	r2, r7
 800aa1c:	1d39      	adds	r1, r7, #4
 800aa1e:	f107 0308 	add.w	r3, r7, #8
 800aa22:	4618      	mov	r0, r3
 800aa24:	f7fe fec0 	bl	80097a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aa28:	6839      	ldr	r1, [r7, #0]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	9202      	str	r2, [sp, #8]
 800aa30:	9301      	str	r3, [sp, #4]
 800aa32:	2300      	movs	r3, #0
 800aa34:	9300      	str	r3, [sp, #0]
 800aa36:	2300      	movs	r3, #0
 800aa38:	460a      	mov	r2, r1
 800aa3a:	4924      	ldr	r1, [pc, #144]	; (800aacc <vTaskStartScheduler+0xc0>)
 800aa3c:	4824      	ldr	r0, [pc, #144]	; (800aad0 <vTaskStartScheduler+0xc4>)
 800aa3e:	f7ff fdf9 	bl	800a634 <xTaskCreateStatic>
 800aa42:	4603      	mov	r3, r0
 800aa44:	4a23      	ldr	r2, [pc, #140]	; (800aad4 <vTaskStartScheduler+0xc8>)
 800aa46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa48:	4b22      	ldr	r3, [pc, #136]	; (800aad4 <vTaskStartScheduler+0xc8>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa50:	2301      	movs	r3, #1
 800aa52:	617b      	str	r3, [r7, #20]
 800aa54:	e001      	b.n	800aa5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa56:	2300      	movs	r3, #0
 800aa58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	2b01      	cmp	r3, #1
 800aa5e:	d102      	bne.n	800aa66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa60:	f000 fd10 	bl	800b484 <xTimerCreateTimerTask>
 800aa64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d11b      	bne.n	800aaa4 <vTaskStartScheduler+0x98>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	613b      	str	r3, [r7, #16]
}
 800aa7e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800aa80:	4b15      	ldr	r3, [pc, #84]	; (800aad8 <vTaskStartScheduler+0xcc>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3354      	adds	r3, #84	; 0x54
 800aa86:	4a15      	ldr	r2, [pc, #84]	; (800aadc <vTaskStartScheduler+0xd0>)
 800aa88:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa8a:	4b15      	ldr	r3, [pc, #84]	; (800aae0 <vTaskStartScheduler+0xd4>)
 800aa8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa92:	4b14      	ldr	r3, [pc, #80]	; (800aae4 <vTaskStartScheduler+0xd8>)
 800aa94:	2201      	movs	r2, #1
 800aa96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa98:	4b13      	ldr	r3, [pc, #76]	; (800aae8 <vTaskStartScheduler+0xdc>)
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa9e:	f001 f8c7 	bl	800bc30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aaa2:	e00e      	b.n	800aac2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaaa:	d10a      	bne.n	800aac2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	60fb      	str	r3, [r7, #12]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <vTaskStartScheduler+0xb4>
}
 800aac2:	bf00      	nop
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}
 800aaca:	bf00      	nop
 800aacc:	0800f4f0 	.word	0x0800f4f0
 800aad0:	0800b111 	.word	0x0800b111
 800aad4:	20007130 	.word	0x20007130
 800aad8:	20006c38 	.word	0x20006c38
 800aadc:	200000b8 	.word	0x200000b8
 800aae0:	2000712c 	.word	0x2000712c
 800aae4:	20007118 	.word	0x20007118
 800aae8:	20007110 	.word	0x20007110

0800aaec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aaec:	b480      	push	{r7}
 800aaee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aaf0:	4b04      	ldr	r3, [pc, #16]	; (800ab04 <vTaskSuspendAll+0x18>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	4a03      	ldr	r2, [pc, #12]	; (800ab04 <vTaskSuspendAll+0x18>)
 800aaf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aafa:	bf00      	nop
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	20007134 	.word	0x20007134

0800ab08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ab12:	2300      	movs	r3, #0
 800ab14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ab16:	4b42      	ldr	r3, [pc, #264]	; (800ac20 <xTaskResumeAll+0x118>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10a      	bne.n	800ab34 <xTaskResumeAll+0x2c>
	__asm volatile
 800ab1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab22:	f383 8811 	msr	BASEPRI, r3
 800ab26:	f3bf 8f6f 	isb	sy
 800ab2a:	f3bf 8f4f 	dsb	sy
 800ab2e:	603b      	str	r3, [r7, #0]
}
 800ab30:	bf00      	nop
 800ab32:	e7fe      	b.n	800ab32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ab34:	f001 f91e 	bl	800bd74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab38:	4b39      	ldr	r3, [pc, #228]	; (800ac20 <xTaskResumeAll+0x118>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	4a38      	ldr	r2, [pc, #224]	; (800ac20 <xTaskResumeAll+0x118>)
 800ab40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab42:	4b37      	ldr	r3, [pc, #220]	; (800ac20 <xTaskResumeAll+0x118>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d162      	bne.n	800ac10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab4a:	4b36      	ldr	r3, [pc, #216]	; (800ac24 <xTaskResumeAll+0x11c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d05e      	beq.n	800ac10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab52:	e02f      	b.n	800abb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab54:	4b34      	ldr	r3, [pc, #208]	; (800ac28 <xTaskResumeAll+0x120>)
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3318      	adds	r3, #24
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fe fedf 	bl	8009924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe feda 	bl	8009924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab74:	4b2d      	ldr	r3, [pc, #180]	; (800ac2c <xTaskResumeAll+0x124>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d903      	bls.n	800ab84 <xTaskResumeAll+0x7c>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	4a2a      	ldr	r2, [pc, #168]	; (800ac2c <xTaskResumeAll+0x124>)
 800ab82:	6013      	str	r3, [r2, #0]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab88:	4613      	mov	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4413      	add	r3, r2
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	4a27      	ldr	r2, [pc, #156]	; (800ac30 <xTaskResumeAll+0x128>)
 800ab92:	441a      	add	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	3304      	adds	r3, #4
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f7fe fe65 	bl	800986a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba4:	4b23      	ldr	r3, [pc, #140]	; (800ac34 <xTaskResumeAll+0x12c>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abaa:	429a      	cmp	r2, r3
 800abac:	d302      	bcc.n	800abb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800abae:	4b22      	ldr	r3, [pc, #136]	; (800ac38 <xTaskResumeAll+0x130>)
 800abb0:	2201      	movs	r2, #1
 800abb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800abb4:	4b1c      	ldr	r3, [pc, #112]	; (800ac28 <xTaskResumeAll+0x120>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1cb      	bne.n	800ab54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800abc2:	f000 fb5f 	bl	800b284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800abc6:	4b1d      	ldr	r3, [pc, #116]	; (800ac3c <xTaskResumeAll+0x134>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d010      	beq.n	800abf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800abd2:	f000 f847 	bl	800ac64 <xTaskIncrementTick>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d002      	beq.n	800abe2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800abdc:	4b16      	ldr	r3, [pc, #88]	; (800ac38 <xTaskResumeAll+0x130>)
 800abde:	2201      	movs	r2, #1
 800abe0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	3b01      	subs	r3, #1
 800abe6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d1f1      	bne.n	800abd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800abee:	4b13      	ldr	r3, [pc, #76]	; (800ac3c <xTaskResumeAll+0x134>)
 800abf0:	2200      	movs	r2, #0
 800abf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abf4:	4b10      	ldr	r3, [pc, #64]	; (800ac38 <xTaskResumeAll+0x130>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d009      	beq.n	800ac10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abfc:	2301      	movs	r3, #1
 800abfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ac00:	4b0f      	ldr	r3, [pc, #60]	; (800ac40 <xTaskResumeAll+0x138>)
 800ac02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac06:	601a      	str	r2, [r3, #0]
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac10:	f001 f8e0 	bl	800bdd4 <vPortExitCritical>

	return xAlreadyYielded;
 800ac14:	68bb      	ldr	r3, [r7, #8]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20007134 	.word	0x20007134
 800ac24:	2000710c 	.word	0x2000710c
 800ac28:	200070cc 	.word	0x200070cc
 800ac2c:	20007114 	.word	0x20007114
 800ac30:	20006c3c 	.word	0x20006c3c
 800ac34:	20006c38 	.word	0x20006c38
 800ac38:	20007120 	.word	0x20007120
 800ac3c:	2000711c 	.word	0x2000711c
 800ac40:	e000ed04 	.word	0xe000ed04

0800ac44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac4a:	4b05      	ldr	r3, [pc, #20]	; (800ac60 <xTaskGetTickCount+0x1c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac50:	687b      	ldr	r3, [r7, #4]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	20007110 	.word	0x20007110

0800ac64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac6e:	4b4f      	ldr	r3, [pc, #316]	; (800adac <xTaskIncrementTick+0x148>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 808f 	bne.w	800ad96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac78:	4b4d      	ldr	r3, [pc, #308]	; (800adb0 <xTaskIncrementTick+0x14c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac80:	4a4b      	ldr	r2, [pc, #300]	; (800adb0 <xTaskIncrementTick+0x14c>)
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d120      	bne.n	800acce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac8c:	4b49      	ldr	r3, [pc, #292]	; (800adb4 <xTaskIncrementTick+0x150>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <xTaskIncrementTick+0x48>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	603b      	str	r3, [r7, #0]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <xTaskIncrementTick+0x46>
 800acac:	4b41      	ldr	r3, [pc, #260]	; (800adb4 <xTaskIncrementTick+0x150>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]
 800acb2:	4b41      	ldr	r3, [pc, #260]	; (800adb8 <xTaskIncrementTick+0x154>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a3f      	ldr	r2, [pc, #252]	; (800adb4 <xTaskIncrementTick+0x150>)
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	4a3f      	ldr	r2, [pc, #252]	; (800adb8 <xTaskIncrementTick+0x154>)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	6013      	str	r3, [r2, #0]
 800acc0:	4b3e      	ldr	r3, [pc, #248]	; (800adbc <xTaskIncrementTick+0x158>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3301      	adds	r3, #1
 800acc6:	4a3d      	ldr	r2, [pc, #244]	; (800adbc <xTaskIncrementTick+0x158>)
 800acc8:	6013      	str	r3, [r2, #0]
 800acca:	f000 fadb 	bl	800b284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acce:	4b3c      	ldr	r3, [pc, #240]	; (800adc0 <xTaskIncrementTick+0x15c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	693a      	ldr	r2, [r7, #16]
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d349      	bcc.n	800ad6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acd8:	4b36      	ldr	r3, [pc, #216]	; (800adb4 <xTaskIncrementTick+0x150>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d104      	bne.n	800acec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace2:	4b37      	ldr	r3, [pc, #220]	; (800adc0 <xTaskIncrementTick+0x15c>)
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ace8:	601a      	str	r2, [r3, #0]
					break;
 800acea:	e03f      	b.n	800ad6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acec:	4b31      	ldr	r3, [pc, #196]	; (800adb4 <xTaskIncrementTick+0x150>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800acfc:	693a      	ldr	r2, [r7, #16]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d203      	bcs.n	800ad0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ad04:	4a2e      	ldr	r2, [pc, #184]	; (800adc0 <xTaskIncrementTick+0x15c>)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ad0a:	e02f      	b.n	800ad6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fe07 	bl	8009924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d004      	beq.n	800ad28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	3318      	adds	r3, #24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fdfe 	bl	8009924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2c:	4b25      	ldr	r3, [pc, #148]	; (800adc4 <xTaskIncrementTick+0x160>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d903      	bls.n	800ad3c <xTaskIncrementTick+0xd8>
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	4a22      	ldr	r2, [pc, #136]	; (800adc4 <xTaskIncrementTick+0x160>)
 800ad3a:	6013      	str	r3, [r2, #0]
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	009b      	lsls	r3, r3, #2
 800ad48:	4a1f      	ldr	r2, [pc, #124]	; (800adc8 <xTaskIncrementTick+0x164>)
 800ad4a:	441a      	add	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	3304      	adds	r3, #4
 800ad50:	4619      	mov	r1, r3
 800ad52:	4610      	mov	r0, r2
 800ad54:	f7fe fd89 	bl	800986a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad5c:	4b1b      	ldr	r3, [pc, #108]	; (800adcc <xTaskIncrementTick+0x168>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d3b8      	bcc.n	800acd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ad66:	2301      	movs	r3, #1
 800ad68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad6a:	e7b5      	b.n	800acd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad6c:	4b17      	ldr	r3, [pc, #92]	; (800adcc <xTaskIncrementTick+0x168>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad72:	4915      	ldr	r1, [pc, #84]	; (800adc8 <xTaskIncrementTick+0x164>)
 800ad74:	4613      	mov	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	440b      	add	r3, r1
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d901      	bls.n	800ad88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800ad84:	2301      	movs	r3, #1
 800ad86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad88:	4b11      	ldr	r3, [pc, #68]	; (800add0 <xTaskIncrementTick+0x16c>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ad90:	2301      	movs	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	e004      	b.n	800ada0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <xTaskIncrementTick+0x170>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	4a0d      	ldr	r2, [pc, #52]	; (800add4 <xTaskIncrementTick+0x170>)
 800ad9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ada0:	697b      	ldr	r3, [r7, #20]
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20007134 	.word	0x20007134
 800adb0:	20007110 	.word	0x20007110
 800adb4:	200070c4 	.word	0x200070c4
 800adb8:	200070c8 	.word	0x200070c8
 800adbc:	20007124 	.word	0x20007124
 800adc0:	2000712c 	.word	0x2000712c
 800adc4:	20007114 	.word	0x20007114
 800adc8:	20006c3c 	.word	0x20006c3c
 800adcc:	20006c38 	.word	0x20006c38
 800add0:	20007120 	.word	0x20007120
 800add4:	2000711c 	.word	0x2000711c

0800add8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adde:	4b2a      	ldr	r3, [pc, #168]	; (800ae88 <vTaskSwitchContext+0xb0>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d003      	beq.n	800adee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ade6:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <vTaskSwitchContext+0xb4>)
 800ade8:	2201      	movs	r2, #1
 800adea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800adec:	e046      	b.n	800ae7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800adee:	4b27      	ldr	r3, [pc, #156]	; (800ae8c <vTaskSwitchContext+0xb4>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adf4:	4b26      	ldr	r3, [pc, #152]	; (800ae90 <vTaskSwitchContext+0xb8>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e010      	b.n	800ae1e <vTaskSwitchContext+0x46>
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10a      	bne.n	800ae18 <vTaskSwitchContext+0x40>
	__asm volatile
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	607b      	str	r3, [r7, #4]
}
 800ae14:	bf00      	nop
 800ae16:	e7fe      	b.n	800ae16 <vTaskSwitchContext+0x3e>
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	491d      	ldr	r1, [pc, #116]	; (800ae94 <vTaskSwitchContext+0xbc>)
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4613      	mov	r3, r2
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	4413      	add	r3, r2
 800ae28:	009b      	lsls	r3, r3, #2
 800ae2a:	440b      	add	r3, r1
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d0e4      	beq.n	800adfc <vTaskSwitchContext+0x24>
 800ae32:	68fa      	ldr	r2, [r7, #12]
 800ae34:	4613      	mov	r3, r2
 800ae36:	009b      	lsls	r3, r3, #2
 800ae38:	4413      	add	r3, r2
 800ae3a:	009b      	lsls	r3, r3, #2
 800ae3c:	4a15      	ldr	r2, [pc, #84]	; (800ae94 <vTaskSwitchContext+0xbc>)
 800ae3e:	4413      	add	r3, r2
 800ae40:	60bb      	str	r3, [r7, #8]
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	685a      	ldr	r2, [r3, #4]
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	605a      	str	r2, [r3, #4]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	3308      	adds	r3, #8
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d104      	bne.n	800ae62 <vTaskSwitchContext+0x8a>
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	685b      	ldr	r3, [r3, #4]
 800ae5c:	685a      	ldr	r2, [r3, #4]
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	605a      	str	r2, [r3, #4]
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	4a0b      	ldr	r2, [pc, #44]	; (800ae98 <vTaskSwitchContext+0xc0>)
 800ae6a:	6013      	str	r3, [r2, #0]
 800ae6c:	4a08      	ldr	r2, [pc, #32]	; (800ae90 <vTaskSwitchContext+0xb8>)
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae72:	4b09      	ldr	r3, [pc, #36]	; (800ae98 <vTaskSwitchContext+0xc0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3354      	adds	r3, #84	; 0x54
 800ae78:	4a08      	ldr	r2, [pc, #32]	; (800ae9c <vTaskSwitchContext+0xc4>)
 800ae7a:	6013      	str	r3, [r2, #0]
}
 800ae7c:	bf00      	nop
 800ae7e:	3714      	adds	r7, #20
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr
 800ae88:	20007134 	.word	0x20007134
 800ae8c:	20007120 	.word	0x20007120
 800ae90:	20007114 	.word	0x20007114
 800ae94:	20006c3c 	.word	0x20006c3c
 800ae98:	20006c38 	.word	0x20006c38
 800ae9c:	200000b8 	.word	0x200000b8

0800aea0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b084      	sub	sp, #16
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	60fb      	str	r3, [r7, #12]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aec6:	4b07      	ldr	r3, [pc, #28]	; (800aee4 <vTaskPlaceOnEventList+0x44>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3318      	adds	r3, #24
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe fcef 	bl	80098b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aed4:	2101      	movs	r1, #1
 800aed6:	6838      	ldr	r0, [r7, #0]
 800aed8:	f000 fa80 	bl	800b3dc <prvAddCurrentTaskToDelayedList>
}
 800aedc:	bf00      	nop
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20006c38 	.word	0x20006c38

0800aee8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b086      	sub	sp, #24
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60f8      	str	r0, [r7, #12]
 800aef0:	60b9      	str	r1, [r7, #8]
 800aef2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10a      	bne.n	800af10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	617b      	str	r3, [r7, #20]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af10:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <vTaskPlaceOnEventListRestricted+0x54>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3318      	adds	r3, #24
 800af16:	4619      	mov	r1, r3
 800af18:	68f8      	ldr	r0, [r7, #12]
 800af1a:	f7fe fca6 	bl	800986a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d002      	beq.n	800af2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800af24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af2a:	6879      	ldr	r1, [r7, #4]
 800af2c:	68b8      	ldr	r0, [r7, #8]
 800af2e:	f000 fa55 	bl	800b3dc <prvAddCurrentTaskToDelayedList>
	}
 800af32:	bf00      	nop
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}
 800af3a:	bf00      	nop
 800af3c:	20006c38 	.word	0x20006c38

0800af40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	68db      	ldr	r3, [r3, #12]
 800af4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10a      	bne.n	800af6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800af56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5a:	f383 8811 	msr	BASEPRI, r3
 800af5e:	f3bf 8f6f 	isb	sy
 800af62:	f3bf 8f4f 	dsb	sy
 800af66:	60fb      	str	r3, [r7, #12]
}
 800af68:	bf00      	nop
 800af6a:	e7fe      	b.n	800af6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	3318      	adds	r3, #24
 800af70:	4618      	mov	r0, r3
 800af72:	f7fe fcd7 	bl	8009924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af76:	4b1e      	ldr	r3, [pc, #120]	; (800aff0 <xTaskRemoveFromEventList+0xb0>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11d      	bne.n	800afba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	3304      	adds	r3, #4
 800af82:	4618      	mov	r0, r3
 800af84:	f7fe fcce 	bl	8009924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af8c:	4b19      	ldr	r3, [pc, #100]	; (800aff4 <xTaskRemoveFromEventList+0xb4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	429a      	cmp	r2, r3
 800af92:	d903      	bls.n	800af9c <xTaskRemoveFromEventList+0x5c>
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	4a16      	ldr	r2, [pc, #88]	; (800aff4 <xTaskRemoveFromEventList+0xb4>)
 800af9a:	6013      	str	r3, [r2, #0]
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afa0:	4613      	mov	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	009b      	lsls	r3, r3, #2
 800afa8:	4a13      	ldr	r2, [pc, #76]	; (800aff8 <xTaskRemoveFromEventList+0xb8>)
 800afaa:	441a      	add	r2, r3
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	3304      	adds	r3, #4
 800afb0:	4619      	mov	r1, r3
 800afb2:	4610      	mov	r0, r2
 800afb4:	f7fe fc59 	bl	800986a <vListInsertEnd>
 800afb8:	e005      	b.n	800afc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	3318      	adds	r3, #24
 800afbe:	4619      	mov	r1, r3
 800afc0:	480e      	ldr	r0, [pc, #56]	; (800affc <xTaskRemoveFromEventList+0xbc>)
 800afc2:	f7fe fc52 	bl	800986a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <xTaskRemoveFromEventList+0xc0>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d905      	bls.n	800afe0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800afd4:	2301      	movs	r3, #1
 800afd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <xTaskRemoveFromEventList+0xc4>)
 800afda:	2201      	movs	r2, #1
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	e001      	b.n	800afe4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800afe4:	697b      	ldr	r3, [r7, #20]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	20007134 	.word	0x20007134
 800aff4:	20007114 	.word	0x20007114
 800aff8:	20006c3c 	.word	0x20006c3c
 800affc:	200070cc 	.word	0x200070cc
 800b000:	20006c38 	.word	0x20006c38
 800b004:	20007120 	.word	0x20007120

0800b008 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b010:	4b06      	ldr	r3, [pc, #24]	; (800b02c <vTaskInternalSetTimeOutState+0x24>)
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b018:	4b05      	ldr	r3, [pc, #20]	; (800b030 <vTaskInternalSetTimeOutState+0x28>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	605a      	str	r2, [r3, #4]
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	20007124 	.word	0x20007124
 800b030:	20007110 	.word	0x20007110

0800b034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b048:	f383 8811 	msr	BASEPRI, r3
 800b04c:	f3bf 8f6f 	isb	sy
 800b050:	f3bf 8f4f 	dsb	sy
 800b054:	613b      	str	r3, [r7, #16]
}
 800b056:	bf00      	nop
 800b058:	e7fe      	b.n	800b058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10a      	bne.n	800b076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	60fb      	str	r3, [r7, #12]
}
 800b072:	bf00      	nop
 800b074:	e7fe      	b.n	800b074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b076:	f000 fe7d 	bl	800bd74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b07a:	4b1d      	ldr	r3, [pc, #116]	; (800b0f0 <xTaskCheckForTimeOut+0xbc>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	69ba      	ldr	r2, [r7, #24]
 800b086:	1ad3      	subs	r3, r2, r3
 800b088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b092:	d102      	bne.n	800b09a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b094:	2300      	movs	r3, #0
 800b096:	61fb      	str	r3, [r7, #28]
 800b098:	e023      	b.n	800b0e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681a      	ldr	r2, [r3, #0]
 800b09e:	4b15      	ldr	r3, [pc, #84]	; (800b0f4 <xTaskCheckForTimeOut+0xc0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d007      	beq.n	800b0b6 <xTaskCheckForTimeOut+0x82>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	69ba      	ldr	r2, [r7, #24]
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d302      	bcc.n	800b0b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	61fb      	str	r3, [r7, #28]
 800b0b4:	e015      	b.n	800b0e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	697a      	ldr	r2, [r7, #20]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d20b      	bcs.n	800b0d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	1ad2      	subs	r2, r2, r3
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff9b 	bl	800b008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
 800b0d6:	e004      	b.n	800b0e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b0e2:	f000 fe77 	bl	800bdd4 <vPortExitCritical>

	return xReturn;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20007110 	.word	0x20007110
 800b0f4:	20007124 	.word	0x20007124

0800b0f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b0fc:	4b03      	ldr	r3, [pc, #12]	; (800b10c <vTaskMissedYield+0x14>)
 800b0fe:	2201      	movs	r2, #1
 800b100:	601a      	str	r2, [r3, #0]
}
 800b102:	bf00      	nop
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	20007120 	.word	0x20007120

0800b110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b118:	f000 f852 	bl	800b1c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b11c:	4b06      	ldr	r3, [pc, #24]	; (800b138 <prvIdleTask+0x28>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d9f9      	bls.n	800b118 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b124:	4b05      	ldr	r3, [pc, #20]	; (800b13c <prvIdleTask+0x2c>)
 800b126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	f3bf 8f4f 	dsb	sy
 800b130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b134:	e7f0      	b.n	800b118 <prvIdleTask+0x8>
 800b136:	bf00      	nop
 800b138:	20006c3c 	.word	0x20006c3c
 800b13c:	e000ed04 	.word	0xe000ed04

0800b140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b146:	2300      	movs	r3, #0
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	e00c      	b.n	800b166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	4a12      	ldr	r2, [pc, #72]	; (800b1a0 <prvInitialiseTaskLists+0x60>)
 800b158:	4413      	add	r3, r2
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7fe fb58 	bl	8009810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	3301      	adds	r3, #1
 800b164:	607b      	str	r3, [r7, #4]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2b37      	cmp	r3, #55	; 0x37
 800b16a:	d9ef      	bls.n	800b14c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b16c:	480d      	ldr	r0, [pc, #52]	; (800b1a4 <prvInitialiseTaskLists+0x64>)
 800b16e:	f7fe fb4f 	bl	8009810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b172:	480d      	ldr	r0, [pc, #52]	; (800b1a8 <prvInitialiseTaskLists+0x68>)
 800b174:	f7fe fb4c 	bl	8009810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b178:	480c      	ldr	r0, [pc, #48]	; (800b1ac <prvInitialiseTaskLists+0x6c>)
 800b17a:	f7fe fb49 	bl	8009810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b17e:	480c      	ldr	r0, [pc, #48]	; (800b1b0 <prvInitialiseTaskLists+0x70>)
 800b180:	f7fe fb46 	bl	8009810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b184:	480b      	ldr	r0, [pc, #44]	; (800b1b4 <prvInitialiseTaskLists+0x74>)
 800b186:	f7fe fb43 	bl	8009810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b18a:	4b0b      	ldr	r3, [pc, #44]	; (800b1b8 <prvInitialiseTaskLists+0x78>)
 800b18c:	4a05      	ldr	r2, [pc, #20]	; (800b1a4 <prvInitialiseTaskLists+0x64>)
 800b18e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b190:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <prvInitialiseTaskLists+0x7c>)
 800b192:	4a05      	ldr	r2, [pc, #20]	; (800b1a8 <prvInitialiseTaskLists+0x68>)
 800b194:	601a      	str	r2, [r3, #0]
}
 800b196:	bf00      	nop
 800b198:	3708      	adds	r7, #8
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	20006c3c 	.word	0x20006c3c
 800b1a4:	2000709c 	.word	0x2000709c
 800b1a8:	200070b0 	.word	0x200070b0
 800b1ac:	200070cc 	.word	0x200070cc
 800b1b0:	200070e0 	.word	0x200070e0
 800b1b4:	200070f8 	.word	0x200070f8
 800b1b8:	200070c4 	.word	0x200070c4
 800b1bc:	200070c8 	.word	0x200070c8

0800b1c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b082      	sub	sp, #8
 800b1c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1c6:	e019      	b.n	800b1fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b1c8:	f000 fdd4 	bl	800bd74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1cc:	4b10      	ldr	r3, [pc, #64]	; (800b210 <prvCheckTasksWaitingTermination+0x50>)
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3304      	adds	r3, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fe fba3 	bl	8009924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b1de:	4b0d      	ldr	r3, [pc, #52]	; (800b214 <prvCheckTasksWaitingTermination+0x54>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	4a0b      	ldr	r2, [pc, #44]	; (800b214 <prvCheckTasksWaitingTermination+0x54>)
 800b1e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b1e8:	4b0b      	ldr	r3, [pc, #44]	; (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	4a0a      	ldr	r2, [pc, #40]	; (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b1f2:	f000 fdef 	bl	800bdd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f810 	bl	800b21c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b1fc:	4b06      	ldr	r3, [pc, #24]	; (800b218 <prvCheckTasksWaitingTermination+0x58>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d1e1      	bne.n	800b1c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	200070e0 	.word	0x200070e0
 800b214:	2000710c 	.word	0x2000710c
 800b218:	200070f4 	.word	0x200070f4

0800b21c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3354      	adds	r3, #84	; 0x54
 800b228:	4618      	mov	r0, r3
 800b22a:	f001 fee1 	bl	800cff0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b234:	2b00      	cmp	r3, #0
 800b236:	d108      	bne.n	800b24a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 ff5f 	bl	800c100 <vPortFree>
				vPortFree( pxTCB );
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 ff5c 	bl	800c100 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b248:	e018      	b.n	800b27c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b250:	2b01      	cmp	r3, #1
 800b252:	d103      	bne.n	800b25c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 ff53 	bl	800c100 <vPortFree>
	}
 800b25a:	e00f      	b.n	800b27c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b262:	2b02      	cmp	r3, #2
 800b264:	d00a      	beq.n	800b27c <prvDeleteTCB+0x60>
	__asm volatile
 800b266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b26a:	f383 8811 	msr	BASEPRI, r3
 800b26e:	f3bf 8f6f 	isb	sy
 800b272:	f3bf 8f4f 	dsb	sy
 800b276:	60fb      	str	r3, [r7, #12]
}
 800b278:	bf00      	nop
 800b27a:	e7fe      	b.n	800b27a <prvDeleteTCB+0x5e>
	}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b28a:	4b0c      	ldr	r3, [pc, #48]	; (800b2bc <prvResetNextTaskUnblockTime+0x38>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d104      	bne.n	800b29e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b294:	4b0a      	ldr	r3, [pc, #40]	; (800b2c0 <prvResetNextTaskUnblockTime+0x3c>)
 800b296:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b29a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b29c:	e008      	b.n	800b2b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29e:	4b07      	ldr	r3, [pc, #28]	; (800b2bc <prvResetNextTaskUnblockTime+0x38>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4a04      	ldr	r2, [pc, #16]	; (800b2c0 <prvResetNextTaskUnblockTime+0x3c>)
 800b2ae:	6013      	str	r3, [r2, #0]
}
 800b2b0:	bf00      	nop
 800b2b2:	370c      	adds	r7, #12
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	200070c4 	.word	0x200070c4
 800b2c0:	2000712c 	.word	0x2000712c

0800b2c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b2ca:	4b0b      	ldr	r3, [pc, #44]	; (800b2f8 <xTaskGetSchedulerState+0x34>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d102      	bne.n	800b2d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	607b      	str	r3, [r7, #4]
 800b2d6:	e008      	b.n	800b2ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d8:	4b08      	ldr	r3, [pc, #32]	; (800b2fc <xTaskGetSchedulerState+0x38>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b2e0:	2302      	movs	r3, #2
 800b2e2:	607b      	str	r3, [r7, #4]
 800b2e4:	e001      	b.n	800b2ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b2ea:	687b      	ldr	r3, [r7, #4]
	}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr
 800b2f8:	20007118 	.word	0x20007118
 800b2fc:	20007134 	.word	0x20007134

0800b300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d056      	beq.n	800b3c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b316:	4b2e      	ldr	r3, [pc, #184]	; (800b3d0 <xTaskPriorityDisinherit+0xd0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	693a      	ldr	r2, [r7, #16]
 800b31c:	429a      	cmp	r2, r3
 800b31e:	d00a      	beq.n	800b336 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	60fb      	str	r3, [r7, #12]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10a      	bne.n	800b354 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	60bb      	str	r3, [r7, #8]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b358:	1e5a      	subs	r2, r3, #1
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	429a      	cmp	r2, r3
 800b368:	d02c      	beq.n	800b3c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d128      	bne.n	800b3c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	3304      	adds	r3, #4
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fad4 	bl	8009924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b388:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b394:	4b0f      	ldr	r3, [pc, #60]	; (800b3d4 <xTaskPriorityDisinherit+0xd4>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d903      	bls.n	800b3a4 <xTaskPriorityDisinherit+0xa4>
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	4a0c      	ldr	r2, [pc, #48]	; (800b3d4 <xTaskPriorityDisinherit+0xd4>)
 800b3a2:	6013      	str	r3, [r2, #0]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	4413      	add	r3, r2
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4a09      	ldr	r2, [pc, #36]	; (800b3d8 <xTaskPriorityDisinherit+0xd8>)
 800b3b2:	441a      	add	r2, r3
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	3304      	adds	r3, #4
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4610      	mov	r0, r2
 800b3bc:	f7fe fa55 	bl	800986a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b3c4:	697b      	ldr	r3, [r7, #20]
	}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3718      	adds	r7, #24
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}
 800b3ce:	bf00      	nop
 800b3d0:	20006c38 	.word	0x20006c38
 800b3d4:	20007114 	.word	0x20007114
 800b3d8:	20006c3c 	.word	0x20006c3c

0800b3dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b3e6:	4b21      	ldr	r3, [pc, #132]	; (800b46c <prvAddCurrentTaskToDelayedList+0x90>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3ec:	4b20      	ldr	r3, [pc, #128]	; (800b470 <prvAddCurrentTaskToDelayedList+0x94>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fa96 	bl	8009924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3fe:	d10a      	bne.n	800b416 <prvAddCurrentTaskToDelayedList+0x3a>
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d007      	beq.n	800b416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <prvAddCurrentTaskToDelayedList+0x94>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	3304      	adds	r3, #4
 800b40c:	4619      	mov	r1, r3
 800b40e:	4819      	ldr	r0, [pc, #100]	; (800b474 <prvAddCurrentTaskToDelayedList+0x98>)
 800b410:	f7fe fa2b 	bl	800986a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b414:	e026      	b.n	800b464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4413      	add	r3, r2
 800b41c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b41e:	4b14      	ldr	r3, [pc, #80]	; (800b470 <prvAddCurrentTaskToDelayedList+0x94>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b426:	68ba      	ldr	r2, [r7, #8]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d209      	bcs.n	800b442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b42e:	4b12      	ldr	r3, [pc, #72]	; (800b478 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <prvAddCurrentTaskToDelayedList+0x94>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3304      	adds	r3, #4
 800b438:	4619      	mov	r1, r3
 800b43a:	4610      	mov	r0, r2
 800b43c:	f7fe fa39 	bl	80098b2 <vListInsert>
}
 800b440:	e010      	b.n	800b464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b442:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	4b0a      	ldr	r3, [pc, #40]	; (800b470 <prvAddCurrentTaskToDelayedList+0x94>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3304      	adds	r3, #4
 800b44c:	4619      	mov	r1, r3
 800b44e:	4610      	mov	r0, r2
 800b450:	f7fe fa2f 	bl	80098b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b454:	4b0a      	ldr	r3, [pc, #40]	; (800b480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d202      	bcs.n	800b464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b45e:	4a08      	ldr	r2, [pc, #32]	; (800b480 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	6013      	str	r3, [r2, #0]
}
 800b464:	bf00      	nop
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}
 800b46c:	20007110 	.word	0x20007110
 800b470:	20006c38 	.word	0x20006c38
 800b474:	200070f8 	.word	0x200070f8
 800b478:	200070c8 	.word	0x200070c8
 800b47c:	200070c4 	.word	0x200070c4
 800b480:	2000712c 	.word	0x2000712c

0800b484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08a      	sub	sp, #40	; 0x28
 800b488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b48a:	2300      	movs	r3, #0
 800b48c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b48e:	f000 fb07 	bl	800baa0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b492:	4b1c      	ldr	r3, [pc, #112]	; (800b504 <xTimerCreateTimerTask+0x80>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d021      	beq.n	800b4de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b49a:	2300      	movs	r3, #0
 800b49c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b4a2:	1d3a      	adds	r2, r7, #4
 800b4a4:	f107 0108 	add.w	r1, r7, #8
 800b4a8:	f107 030c 	add.w	r3, r7, #12
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7fe f995 	bl	80097dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b4b2:	6879      	ldr	r1, [r7, #4]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	9202      	str	r2, [sp, #8]
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	2302      	movs	r3, #2
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	460a      	mov	r2, r1
 800b4c4:	4910      	ldr	r1, [pc, #64]	; (800b508 <xTimerCreateTimerTask+0x84>)
 800b4c6:	4811      	ldr	r0, [pc, #68]	; (800b50c <xTimerCreateTimerTask+0x88>)
 800b4c8:	f7ff f8b4 	bl	800a634 <xTaskCreateStatic>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	4a10      	ldr	r2, [pc, #64]	; (800b510 <xTimerCreateTimerTask+0x8c>)
 800b4d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	; (800b510 <xTimerCreateTimerTask+0x8c>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d10a      	bne.n	800b4fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4e8:	f383 8811 	msr	BASEPRI, r3
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	f3bf 8f4f 	dsb	sy
 800b4f4:	613b      	str	r3, [r7, #16]
}
 800b4f6:	bf00      	nop
 800b4f8:	e7fe      	b.n	800b4f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b4fa:	697b      	ldr	r3, [r7, #20]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3718      	adds	r7, #24
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}
 800b504:	20007168 	.word	0x20007168
 800b508:	0800f4f8 	.word	0x0800f4f8
 800b50c:	0800b649 	.word	0x0800b649
 800b510:	2000716c 	.word	0x2000716c

0800b514 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b08a      	sub	sp, #40	; 0x28
 800b518:	af00      	add	r7, sp, #0
 800b51a:	60f8      	str	r0, [r7, #12]
 800b51c:	60b9      	str	r1, [r7, #8]
 800b51e:	607a      	str	r2, [r7, #4]
 800b520:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b522:	2300      	movs	r3, #0
 800b524:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b530:	f383 8811 	msr	BASEPRI, r3
 800b534:	f3bf 8f6f 	isb	sy
 800b538:	f3bf 8f4f 	dsb	sy
 800b53c:	623b      	str	r3, [r7, #32]
}
 800b53e:	bf00      	nop
 800b540:	e7fe      	b.n	800b540 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b542:	4b1a      	ldr	r3, [pc, #104]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d02a      	beq.n	800b5a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	2b05      	cmp	r3, #5
 800b55a:	dc18      	bgt.n	800b58e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b55c:	f7ff feb2 	bl	800b2c4 <xTaskGetSchedulerState>
 800b560:	4603      	mov	r3, r0
 800b562:	2b02      	cmp	r3, #2
 800b564:	d109      	bne.n	800b57a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b566:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	f107 0110 	add.w	r1, r7, #16
 800b56e:	2300      	movs	r3, #0
 800b570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b572:	f7fe fba9 	bl	8009cc8 <xQueueGenericSend>
 800b576:	6278      	str	r0, [r7, #36]	; 0x24
 800b578:	e012      	b.n	800b5a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b57a:	4b0c      	ldr	r3, [pc, #48]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b57c:	6818      	ldr	r0, [r3, #0]
 800b57e:	f107 0110 	add.w	r1, r7, #16
 800b582:	2300      	movs	r3, #0
 800b584:	2200      	movs	r2, #0
 800b586:	f7fe fb9f 	bl	8009cc8 <xQueueGenericSend>
 800b58a:	6278      	str	r0, [r7, #36]	; 0x24
 800b58c:	e008      	b.n	800b5a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <xTimerGenericCommand+0x98>)
 800b590:	6818      	ldr	r0, [r3, #0]
 800b592:	f107 0110 	add.w	r1, r7, #16
 800b596:	2300      	movs	r3, #0
 800b598:	683a      	ldr	r2, [r7, #0]
 800b59a:	f7fe fc93 	bl	8009ec4 <xQueueGenericSendFromISR>
 800b59e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3728      	adds	r7, #40	; 0x28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20007168 	.word	0x20007168

0800b5b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b088      	sub	sp, #32
 800b5b4:	af02      	add	r7, sp, #8
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ba:	4b22      	ldr	r3, [pc, #136]	; (800b644 <prvProcessExpiredTimer+0x94>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f7fe f9ab 	bl	8009924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5d4:	f003 0304 	and.w	r3, r3, #4
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d022      	beq.n	800b622 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	699a      	ldr	r2, [r3, #24]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	18d1      	adds	r1, r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	683a      	ldr	r2, [r7, #0]
 800b5e8:	6978      	ldr	r0, [r7, #20]
 800b5ea:	f000 f8d1 	bl	800b790 <prvInsertTimerInActiveList>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d01f      	beq.n	800b634 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	6978      	ldr	r0, [r7, #20]
 800b600:	f7ff ff88 	bl	800b514 <xTimerGenericCommand>
 800b604:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d113      	bne.n	800b634 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	60fb      	str	r3, [r7, #12]
}
 800b61e:	bf00      	nop
 800b620:	e7fe      	b.n	800b620 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b628:	f023 0301 	bic.w	r3, r3, #1
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b634:	697b      	ldr	r3, [r7, #20]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	6978      	ldr	r0, [r7, #20]
 800b63a:	4798      	blx	r3
}
 800b63c:	bf00      	nop
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20007160 	.word	0x20007160

0800b648 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b650:	f107 0308 	add.w	r3, r7, #8
 800b654:	4618      	mov	r0, r3
 800b656:	f000 f857 	bl	800b708 <prvGetNextExpireTime>
 800b65a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	4619      	mov	r1, r3
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f803 	bl	800b66c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b666:	f000 f8d5 	bl	800b814 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b66a:	e7f1      	b.n	800b650 <prvTimerTask+0x8>

0800b66c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b676:	f7ff fa39 	bl	800aaec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b67a:	f107 0308 	add.w	r3, r7, #8
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 f866 	bl	800b750 <prvSampleTimeNow>
 800b684:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d130      	bne.n	800b6ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10a      	bne.n	800b6a8 <prvProcessTimerOrBlockTask+0x3c>
 800b692:	687a      	ldr	r2, [r7, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	d806      	bhi.n	800b6a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b69a:	f7ff fa35 	bl	800ab08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b69e:	68f9      	ldr	r1, [r7, #12]
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f7ff ff85 	bl	800b5b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b6a6:	e024      	b.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d008      	beq.n	800b6c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b6ae:	4b13      	ldr	r3, [pc, #76]	; (800b6fc <prvProcessTimerOrBlockTask+0x90>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d101      	bne.n	800b6bc <prvProcessTimerOrBlockTask+0x50>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e000      	b.n	800b6be <prvProcessTimerOrBlockTask+0x52>
 800b6bc:	2300      	movs	r3, #0
 800b6be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b6c0:	4b0f      	ldr	r3, [pc, #60]	; (800b700 <prvProcessTimerOrBlockTask+0x94>)
 800b6c2:	6818      	ldr	r0, [r3, #0]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	683a      	ldr	r2, [r7, #0]
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	f7fe ff7d 	bl	800a5cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b6d2:	f7ff fa19 	bl	800ab08 <xTaskResumeAll>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d10a      	bne.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b6dc:	4b09      	ldr	r3, [pc, #36]	; (800b704 <prvProcessTimerOrBlockTask+0x98>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
}
 800b6ec:	e001      	b.n	800b6f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b6ee:	f7ff fa0b 	bl	800ab08 <xTaskResumeAll>
}
 800b6f2:	bf00      	nop
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20007164 	.word	0x20007164
 800b700:	20007168 	.word	0x20007168
 800b704:	e000ed04 	.word	0xe000ed04

0800b708 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b710:	4b0e      	ldr	r3, [pc, #56]	; (800b74c <prvGetNextExpireTime+0x44>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <prvGetNextExpireTime+0x16>
 800b71a:	2201      	movs	r2, #1
 800b71c:	e000      	b.n	800b720 <prvGetNextExpireTime+0x18>
 800b71e:	2200      	movs	r2, #0
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d105      	bne.n	800b738 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b72c:	4b07      	ldr	r3, [pc, #28]	; (800b74c <prvGetNextExpireTime+0x44>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e001      	b.n	800b73c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b73c:	68fb      	ldr	r3, [r7, #12]
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	20007160 	.word	0x20007160

0800b750 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b758:	f7ff fa74 	bl	800ac44 <xTaskGetTickCount>
 800b75c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b75e:	4b0b      	ldr	r3, [pc, #44]	; (800b78c <prvSampleTimeNow+0x3c>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	d205      	bcs.n	800b774 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b768:	f000 f936 	bl	800b9d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2201      	movs	r2, #1
 800b770:	601a      	str	r2, [r3, #0]
 800b772:	e002      	b.n	800b77a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b77a:	4a04      	ldr	r2, [pc, #16]	; (800b78c <prvSampleTimeNow+0x3c>)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b780:	68fb      	ldr	r3, [r7, #12]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	20007170 	.word	0x20007170

0800b790 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d812      	bhi.n	800b7dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7b6:	687a      	ldr	r2, [r7, #4]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	1ad2      	subs	r2, r2, r3
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d302      	bcc.n	800b7ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b7c4:	2301      	movs	r3, #1
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e01b      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b7ca:	4b10      	ldr	r3, [pc, #64]	; (800b80c <prvInsertTimerInActiveList+0x7c>)
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7fe f86c 	bl	80098b2 <vListInsert>
 800b7da:	e012      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b7dc:	687a      	ldr	r2, [r7, #4]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d206      	bcs.n	800b7f2 <prvInsertTimerInActiveList+0x62>
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d302      	bcc.n	800b7f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	617b      	str	r3, [r7, #20]
 800b7f0:	e007      	b.n	800b802 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b7f2:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvInsertTimerInActiveList+0x80>)
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	f7fe f858 	bl	80098b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b802:	697b      	ldr	r3, [r7, #20]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3718      	adds	r7, #24
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20007164 	.word	0x20007164
 800b810:	20007160 	.word	0x20007160

0800b814 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b08e      	sub	sp, #56	; 0x38
 800b818:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b81a:	e0ca      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da18      	bge.n	800b854 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b822:	1d3b      	adds	r3, r7, #4
 800b824:	3304      	adds	r3, #4
 800b826:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d10a      	bne.n	800b844 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b82e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b832:	f383 8811 	msr	BASEPRI, r3
 800b836:	f3bf 8f6f 	isb	sy
 800b83a:	f3bf 8f4f 	dsb	sy
 800b83e:	61fb      	str	r3, [r7, #28]
}
 800b840:	bf00      	nop
 800b842:	e7fe      	b.n	800b842 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84a:	6850      	ldr	r0, [r2, #4]
 800b84c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b84e:	6892      	ldr	r2, [r2, #8]
 800b850:	4611      	mov	r1, r2
 800b852:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	f2c0 80aa 	blt.w	800b9b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d004      	beq.n	800b872 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b86a:	3304      	adds	r3, #4
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fe f859 	bl	8009924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b872:	463b      	mov	r3, r7
 800b874:	4618      	mov	r0, r3
 800b876:	f7ff ff6b 	bl	800b750 <prvSampleTimeNow>
 800b87a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b09      	cmp	r3, #9
 800b880:	f200 8097 	bhi.w	800b9b2 <prvProcessReceivedCommands+0x19e>
 800b884:	a201      	add	r2, pc, #4	; (adr r2, 800b88c <prvProcessReceivedCommands+0x78>)
 800b886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b88a:	bf00      	nop
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8b5 	.word	0x0800b8b5
 800b894:	0800b8b5 	.word	0x0800b8b5
 800b898:	0800b929 	.word	0x0800b929
 800b89c:	0800b93d 	.word	0x0800b93d
 800b8a0:	0800b987 	.word	0x0800b987
 800b8a4:	0800b8b5 	.word	0x0800b8b5
 800b8a8:	0800b8b5 	.word	0x0800b8b5
 800b8ac:	0800b929 	.word	0x0800b929
 800b8b0:	0800b93d 	.word	0x0800b93d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ba:	f043 0301 	orr.w	r3, r3, #1
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	18d1      	adds	r1, r2, r3
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8d4:	f7ff ff5c 	bl	800b790 <prvInsertTimerInActiveList>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d069      	beq.n	800b9b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8ec:	f003 0304 	and.w	r3, r3, #4
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d05e      	beq.n	800b9b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b8f4:	68ba      	ldr	r2, [r7, #8]
 800b8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	441a      	add	r2, r3
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	2300      	movs	r3, #0
 800b902:	2100      	movs	r1, #0
 800b904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b906:	f7ff fe05 	bl	800b514 <xTimerGenericCommand>
 800b90a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d14f      	bne.n	800b9b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b916:	f383 8811 	msr	BASEPRI, r3
 800b91a:	f3bf 8f6f 	isb	sy
 800b91e:	f3bf 8f4f 	dsb	sy
 800b922:	61bb      	str	r3, [r7, #24]
}
 800b924:	bf00      	nop
 800b926:	e7fe      	b.n	800b926 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b92e:	f023 0301 	bic.w	r3, r3, #1
 800b932:	b2da      	uxtb	r2, r3
 800b934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b936:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b93a:	e03a      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b93c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b942:	f043 0301 	orr.w	r3, r3, #1
 800b946:	b2da      	uxtb	r2, r3
 800b948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b952:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	617b      	str	r3, [r7, #20]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	18d1      	adds	r1, r2, r3
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b97e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b980:	f7ff ff06 	bl	800b790 <prvInsertTimerInActiveList>
					break;
 800b984:	e015      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d103      	bne.n	800b99c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b996:	f000 fbb3 	bl	800c100 <vPortFree>
 800b99a:	e00a      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a2:	f023 0301 	bic.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b9ae:	e000      	b.n	800b9b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b9b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b9b2:	4b08      	ldr	r3, [pc, #32]	; (800b9d4 <prvProcessReceivedCommands+0x1c0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	1d39      	adds	r1, r7, #4
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe fb1e 	bl	8009ffc <xQueueReceive>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f47f af2a 	bne.w	800b81c <prvProcessReceivedCommands+0x8>
	}
}
 800b9c8:	bf00      	nop
 800b9ca:	bf00      	nop
 800b9cc:	3730      	adds	r7, #48	; 0x30
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}
 800b9d2:	bf00      	nop
 800b9d4:	20007168 	.word	0x20007168

0800b9d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b088      	sub	sp, #32
 800b9dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9de:	e048      	b.n	800ba72 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b9e0:	4b2d      	ldr	r3, [pc, #180]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ea:	4b2b      	ldr	r3, [pc, #172]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fd ff93 	bl	8009924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba0c:	f003 0304 	and.w	r3, r3, #4
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d02e      	beq.n	800ba72 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	693a      	ldr	r2, [r7, #16]
 800ba1a:	4413      	add	r3, r2
 800ba1c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d90e      	bls.n	800ba44 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba32:	4b19      	ldr	r3, [pc, #100]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	4610      	mov	r0, r2
 800ba3e:	f7fd ff38 	bl	80098b2 <vListInsert>
 800ba42:	e016      	b.n	800ba72 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba44:	2300      	movs	r3, #0
 800ba46:	9300      	str	r3, [sp, #0]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	693a      	ldr	r2, [r7, #16]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f7ff fd60 	bl	800b514 <xTimerGenericCommand>
 800ba54:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	603b      	str	r3, [r7, #0]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba72:	4b09      	ldr	r3, [pc, #36]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d1b1      	bne.n	800b9e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ba7c:	4b06      	ldr	r3, [pc, #24]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ba82:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <prvSwitchTimerLists+0xc4>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a04      	ldr	r2, [pc, #16]	; (800ba98 <prvSwitchTimerLists+0xc0>)
 800ba88:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba8a:	4a04      	ldr	r2, [pc, #16]	; (800ba9c <prvSwitchTimerLists+0xc4>)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	6013      	str	r3, [r2, #0]
}
 800ba90:	bf00      	nop
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20007160 	.word	0x20007160
 800ba9c:	20007164 	.word	0x20007164

0800baa0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800baa6:	f000 f965 	bl	800bd74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800baaa:	4b15      	ldr	r3, [pc, #84]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d120      	bne.n	800baf4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bab2:	4814      	ldr	r0, [pc, #80]	; (800bb04 <prvCheckForValidListAndQueue+0x64>)
 800bab4:	f7fd feac 	bl	8009810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bab8:	4813      	ldr	r0, [pc, #76]	; (800bb08 <prvCheckForValidListAndQueue+0x68>)
 800baba:	f7fd fea9 	bl	8009810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800babe:	4b13      	ldr	r3, [pc, #76]	; (800bb0c <prvCheckForValidListAndQueue+0x6c>)
 800bac0:	4a10      	ldr	r2, [pc, #64]	; (800bb04 <prvCheckForValidListAndQueue+0x64>)
 800bac2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bac4:	4b12      	ldr	r3, [pc, #72]	; (800bb10 <prvCheckForValidListAndQueue+0x70>)
 800bac6:	4a10      	ldr	r2, [pc, #64]	; (800bb08 <prvCheckForValidListAndQueue+0x68>)
 800bac8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800baca:	2300      	movs	r3, #0
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	4b11      	ldr	r3, [pc, #68]	; (800bb14 <prvCheckForValidListAndQueue+0x74>)
 800bad0:	4a11      	ldr	r2, [pc, #68]	; (800bb18 <prvCheckForValidListAndQueue+0x78>)
 800bad2:	2110      	movs	r1, #16
 800bad4:	200a      	movs	r0, #10
 800bad6:	f7fd ffb7 	bl	8009a48 <xQueueGenericCreateStatic>
 800bada:	4603      	mov	r3, r0
 800badc:	4a08      	ldr	r2, [pc, #32]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800bade:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bae8:	4b05      	ldr	r3, [pc, #20]	; (800bb00 <prvCheckForValidListAndQueue+0x60>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	490b      	ldr	r1, [pc, #44]	; (800bb1c <prvCheckForValidListAndQueue+0x7c>)
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fd18 	bl	800a524 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baf4:	f000 f96e 	bl	800bdd4 <vPortExitCritical>
}
 800baf8:	bf00      	nop
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20007168 	.word	0x20007168
 800bb04:	20007138 	.word	0x20007138
 800bb08:	2000714c 	.word	0x2000714c
 800bb0c:	20007160 	.word	0x20007160
 800bb10:	20007164 	.word	0x20007164
 800bb14:	20007214 	.word	0x20007214
 800bb18:	20007174 	.word	0x20007174
 800bb1c:	0800f500 	.word	0x0800f500

0800bb20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb20:	b480      	push	{r7}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3b04      	subs	r3, #4
 800bb30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3b04      	subs	r3, #4
 800bb3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f023 0201 	bic.w	r2, r3, #1
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3b04      	subs	r3, #4
 800bb4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bb50:	4a0c      	ldr	r2, [pc, #48]	; (800bb84 <pxPortInitialiseStack+0x64>)
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3b14      	subs	r3, #20
 800bb5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	3b04      	subs	r3, #4
 800bb66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f06f 0202 	mvn.w	r2, #2
 800bb6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3b20      	subs	r3, #32
 800bb74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bb76:	68fb      	ldr	r3, [r7, #12]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3714      	adds	r7, #20
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	0800bb89 	.word	0x0800bb89

0800bb88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb92:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <prvTaskExitError+0x54>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb9a:	d00a      	beq.n	800bbb2 <prvTaskExitError+0x2a>
	__asm volatile
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	60fb      	str	r3, [r7, #12]
}
 800bbae:	bf00      	nop
 800bbb0:	e7fe      	b.n	800bbb0 <prvTaskExitError+0x28>
	__asm volatile
 800bbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	60bb      	str	r3, [r7, #8]
}
 800bbc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bbc6:	bf00      	nop
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d0fc      	beq.n	800bbc8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bbce:	bf00      	nop
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	200000b4 	.word	0x200000b4

0800bbe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bbe0:	4b07      	ldr	r3, [pc, #28]	; (800bc00 <pxCurrentTCBConst2>)
 800bbe2:	6819      	ldr	r1, [r3, #0]
 800bbe4:	6808      	ldr	r0, [r1, #0]
 800bbe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbea:	f380 8809 	msr	PSP, r0
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f04f 0000 	mov.w	r0, #0
 800bbf6:	f380 8811 	msr	BASEPRI, r0
 800bbfa:	4770      	bx	lr
 800bbfc:	f3af 8000 	nop.w

0800bc00 <pxCurrentTCBConst2>:
 800bc00:	20006c38 	.word	0x20006c38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc04:	bf00      	nop
 800bc06:	bf00      	nop

0800bc08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc08:	4808      	ldr	r0, [pc, #32]	; (800bc2c <prvPortStartFirstTask+0x24>)
 800bc0a:	6800      	ldr	r0, [r0, #0]
 800bc0c:	6800      	ldr	r0, [r0, #0]
 800bc0e:	f380 8808 	msr	MSP, r0
 800bc12:	f04f 0000 	mov.w	r0, #0
 800bc16:	f380 8814 	msr	CONTROL, r0
 800bc1a:	b662      	cpsie	i
 800bc1c:	b661      	cpsie	f
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	f3bf 8f6f 	isb	sy
 800bc26:	df00      	svc	0
 800bc28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc2a:	bf00      	nop
 800bc2c:	e000ed08 	.word	0xe000ed08

0800bc30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b086      	sub	sp, #24
 800bc34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc36:	4b46      	ldr	r3, [pc, #280]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a46      	ldr	r2, [pc, #280]	; (800bd54 <xPortStartScheduler+0x124>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d10a      	bne.n	800bc56 <xPortStartScheduler+0x26>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	613b      	str	r3, [r7, #16]
}
 800bc52:	bf00      	nop
 800bc54:	e7fe      	b.n	800bc54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bc56:	4b3e      	ldr	r3, [pc, #248]	; (800bd50 <xPortStartScheduler+0x120>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a3f      	ldr	r2, [pc, #252]	; (800bd58 <xPortStartScheduler+0x128>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d10a      	bne.n	800bc76 <xPortStartScheduler+0x46>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	60fb      	str	r3, [r7, #12]
}
 800bc72:	bf00      	nop
 800bc74:	e7fe      	b.n	800bc74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bc76:	4b39      	ldr	r3, [pc, #228]	; (800bd5c <xPortStartScheduler+0x12c>)
 800bc78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	22ff      	movs	r2, #255	; 0xff
 800bc86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	b2db      	uxtb	r3, r3
 800bc8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc90:	78fb      	ldrb	r3, [r7, #3]
 800bc92:	b2db      	uxtb	r3, r3
 800bc94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	4b31      	ldr	r3, [pc, #196]	; (800bd60 <xPortStartScheduler+0x130>)
 800bc9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc9e:	4b31      	ldr	r3, [pc, #196]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca0:	2207      	movs	r2, #7
 800bca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bca4:	e009      	b.n	800bcba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bca6:	4b2f      	ldr	r3, [pc, #188]	; (800bd64 <xPortStartScheduler+0x134>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	4a2d      	ldr	r2, [pc, #180]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcc2:	2b80      	cmp	r3, #128	; 0x80
 800bcc4:	d0ef      	beq.n	800bca6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bcc6:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f1c3 0307 	rsb	r3, r3, #7
 800bcce:	2b04      	cmp	r3, #4
 800bcd0:	d00a      	beq.n	800bce8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd6:	f383 8811 	msr	BASEPRI, r3
 800bcda:	f3bf 8f6f 	isb	sy
 800bcde:	f3bf 8f4f 	dsb	sy
 800bce2:	60bb      	str	r3, [r7, #8]
}
 800bce4:	bf00      	nop
 800bce6:	e7fe      	b.n	800bce6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bce8:	4b1e      	ldr	r3, [pc, #120]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	021b      	lsls	r3, r3, #8
 800bcee:	4a1d      	ldr	r2, [pc, #116]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bcf2:	4b1c      	ldr	r3, [pc, #112]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bcfa:	4a1a      	ldr	r2, [pc, #104]	; (800bd64 <xPortStartScheduler+0x134>)
 800bcfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd06:	4b18      	ldr	r3, [pc, #96]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a17      	ldr	r2, [pc, #92]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd12:	4b15      	ldr	r3, [pc, #84]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	4a14      	ldr	r2, [pc, #80]	; (800bd68 <xPortStartScheduler+0x138>)
 800bd18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd1e:	f000 f8dd 	bl	800bedc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd22:	4b12      	ldr	r3, [pc, #72]	; (800bd6c <xPortStartScheduler+0x13c>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd28:	f000 f8fc 	bl	800bf24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd2c:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a0f      	ldr	r2, [pc, #60]	; (800bd70 <xPortStartScheduler+0x140>)
 800bd32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd38:	f7ff ff66 	bl	800bc08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd3c:	f7ff f84c 	bl	800add8 <vTaskSwitchContext>
	prvTaskExitError();
 800bd40:	f7ff ff22 	bl	800bb88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3718      	adds	r7, #24
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	e000ed00 	.word	0xe000ed00
 800bd54:	410fc271 	.word	0x410fc271
 800bd58:	410fc270 	.word	0x410fc270
 800bd5c:	e000e400 	.word	0xe000e400
 800bd60:	20007264 	.word	0x20007264
 800bd64:	20007268 	.word	0x20007268
 800bd68:	e000ed20 	.word	0xe000ed20
 800bd6c:	200000b4 	.word	0x200000b4
 800bd70:	e000ef34 	.word	0xe000ef34

0800bd74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	607b      	str	r3, [r7, #4]
}
 800bd8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd8e:	4b0f      	ldr	r3, [pc, #60]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a0d      	ldr	r2, [pc, #52]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd98:	4b0c      	ldr	r3, [pc, #48]	; (800bdcc <vPortEnterCritical+0x58>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d10f      	bne.n	800bdc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bda0:	4b0b      	ldr	r3, [pc, #44]	; (800bdd0 <vPortEnterCritical+0x5c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	b2db      	uxtb	r3, r3
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d00a      	beq.n	800bdc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdae:	f383 8811 	msr	BASEPRI, r3
 800bdb2:	f3bf 8f6f 	isb	sy
 800bdb6:	f3bf 8f4f 	dsb	sy
 800bdba:	603b      	str	r3, [r7, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	e7fe      	b.n	800bdbe <vPortEnterCritical+0x4a>
	}
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr
 800bdcc:	200000b4 	.word	0x200000b4
 800bdd0:	e000ed04 	.word	0xe000ed04

0800bdd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bdda:	4b12      	ldr	r3, [pc, #72]	; (800be24 <vPortExitCritical+0x50>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d10a      	bne.n	800bdf8 <vPortExitCritical+0x24>
	__asm volatile
 800bde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bde6:	f383 8811 	msr	BASEPRI, r3
 800bdea:	f3bf 8f6f 	isb	sy
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	607b      	str	r3, [r7, #4]
}
 800bdf4:	bf00      	nop
 800bdf6:	e7fe      	b.n	800bdf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	; (800be24 <vPortExitCritical+0x50>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	3b01      	subs	r3, #1
 800bdfe:	4a09      	ldr	r2, [pc, #36]	; (800be24 <vPortExitCritical+0x50>)
 800be00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be02:	4b08      	ldr	r3, [pc, #32]	; (800be24 <vPortExitCritical+0x50>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d105      	bne.n	800be16 <vPortExitCritical+0x42>
 800be0a:	2300      	movs	r3, #0
 800be0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f383 8811 	msr	BASEPRI, r3
}
 800be14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be16:	bf00      	nop
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	200000b4 	.word	0x200000b4
	...

0800be30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be30:	f3ef 8009 	mrs	r0, PSP
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	4b15      	ldr	r3, [pc, #84]	; (800be90 <pxCurrentTCBConst>)
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	f01e 0f10 	tst.w	lr, #16
 800be40:	bf08      	it	eq
 800be42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800be46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be4a:	6010      	str	r0, [r2, #0]
 800be4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800be50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800be54:	f380 8811 	msr	BASEPRI, r0
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f7fe ffba 	bl	800add8 <vTaskSwitchContext>
 800be64:	f04f 0000 	mov.w	r0, #0
 800be68:	f380 8811 	msr	BASEPRI, r0
 800be6c:	bc09      	pop	{r0, r3}
 800be6e:	6819      	ldr	r1, [r3, #0]
 800be70:	6808      	ldr	r0, [r1, #0]
 800be72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be76:	f01e 0f10 	tst.w	lr, #16
 800be7a:	bf08      	it	eq
 800be7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be80:	f380 8809 	msr	PSP, r0
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w

0800be90 <pxCurrentTCBConst>:
 800be90:	20006c38 	.word	0x20006c38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be94:	bf00      	nop
 800be96:	bf00      	nop

0800be98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	607b      	str	r3, [r7, #4]
}
 800beb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800beb2:	f7fe fed7 	bl	800ac64 <xTaskIncrementTick>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bebc:	4b06      	ldr	r3, [pc, #24]	; (800bed8 <xPortSysTickHandler+0x40>)
 800bebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	2300      	movs	r3, #0
 800bec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	f383 8811 	msr	BASEPRI, r3
}
 800bece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed04 	.word	0xe000ed04

0800bedc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bee0:	4b0b      	ldr	r3, [pc, #44]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bee6:	4b0b      	ldr	r3, [pc, #44]	; (800bf14 <vPortSetupTimerInterrupt+0x38>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800beec:	4b0a      	ldr	r3, [pc, #40]	; (800bf18 <vPortSetupTimerInterrupt+0x3c>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	4a0a      	ldr	r2, [pc, #40]	; (800bf1c <vPortSetupTimerInterrupt+0x40>)
 800bef2:	fba2 2303 	umull	r2, r3, r2, r3
 800bef6:	099b      	lsrs	r3, r3, #6
 800bef8:	4a09      	ldr	r2, [pc, #36]	; (800bf20 <vPortSetupTimerInterrupt+0x44>)
 800befa:	3b01      	subs	r3, #1
 800befc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <vPortSetupTimerInterrupt+0x34>)
 800bf00:	2207      	movs	r2, #7
 800bf02:	601a      	str	r2, [r3, #0]
}
 800bf04:	bf00      	nop
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	e000e010 	.word	0xe000e010
 800bf14:	e000e018 	.word	0xe000e018
 800bf18:	20000098 	.word	0x20000098
 800bf1c:	10624dd3 	.word	0x10624dd3
 800bf20:	e000e014 	.word	0xe000e014

0800bf24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf34 <vPortEnableVFP+0x10>
 800bf28:	6801      	ldr	r1, [r0, #0]
 800bf2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf2e:	6001      	str	r1, [r0, #0]
 800bf30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf32:	bf00      	nop
 800bf34:	e000ed88 	.word	0xe000ed88

0800bf38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf3e:	f3ef 8305 	mrs	r3, IPSR
 800bf42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	d914      	bls.n	800bf74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bf4a:	4a17      	ldr	r2, [pc, #92]	; (800bfa8 <vPortValidateInterruptPriority+0x70>)
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bf54:	4b15      	ldr	r3, [pc, #84]	; (800bfac <vPortValidateInterruptPriority+0x74>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	7afa      	ldrb	r2, [r7, #11]
 800bf5a:	429a      	cmp	r2, r3
 800bf5c:	d20a      	bcs.n	800bf74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf62:	f383 8811 	msr	BASEPRI, r3
 800bf66:	f3bf 8f6f 	isb	sy
 800bf6a:	f3bf 8f4f 	dsb	sy
 800bf6e:	607b      	str	r3, [r7, #4]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bf74:	4b0e      	ldr	r3, [pc, #56]	; (800bfb0 <vPortValidateInterruptPriority+0x78>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bf7c:	4b0d      	ldr	r3, [pc, #52]	; (800bfb4 <vPortValidateInterruptPriority+0x7c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d90a      	bls.n	800bf9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf88:	f383 8811 	msr	BASEPRI, r3
 800bf8c:	f3bf 8f6f 	isb	sy
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	603b      	str	r3, [r7, #0]
}
 800bf96:	bf00      	nop
 800bf98:	e7fe      	b.n	800bf98 <vPortValidateInterruptPriority+0x60>
	}
 800bf9a:	bf00      	nop
 800bf9c:	3714      	adds	r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr
 800bfa6:	bf00      	nop
 800bfa8:	e000e3f0 	.word	0xe000e3f0
 800bfac:	20007264 	.word	0x20007264
 800bfb0:	e000ed0c 	.word	0xe000ed0c
 800bfb4:	20007268 	.word	0x20007268

0800bfb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800bfc4:	4b48      	ldr	r3, [pc, #288]	; (800c0e8 <pvPortMalloc+0x130>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d10a      	bne.n	800bfe2 <pvPortMalloc+0x2a>
	__asm volatile
 800bfcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd0:	f383 8811 	msr	BASEPRI, r3
 800bfd4:	f3bf 8f6f 	isb	sy
 800bfd8:	f3bf 8f4f 	dsb	sy
 800bfdc:	60fb      	str	r3, [r7, #12]
}
 800bfde:	bf00      	nop
 800bfe0:	e7fe      	b.n	800bfe0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800bfe2:	f7fe fd83 	bl	800aaec <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bfe6:	4b41      	ldr	r3, [pc, #260]	; (800c0ec <pvPortMalloc+0x134>)
 800bfe8:	681a      	ldr	r2, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4013      	ands	r3, r2
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d172      	bne.n	800c0d8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00d      	beq.n	800c014 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800bff8:	2208      	movs	r2, #8
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4413      	add	r3, r2
 800bffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f003 0307 	and.w	r3, r3, #7
 800c006:	2b00      	cmp	r3, #0
 800c008:	d004      	beq.n	800c014 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f023 0307 	bic.w	r3, r3, #7
 800c010:	3308      	adds	r3, #8
 800c012:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d05e      	beq.n	800c0d8 <pvPortMalloc+0x120>
 800c01a:	4b35      	ldr	r3, [pc, #212]	; (800c0f0 <pvPortMalloc+0x138>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	429a      	cmp	r2, r3
 800c022:	d859      	bhi.n	800c0d8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c024:	4b33      	ldr	r3, [pc, #204]	; (800c0f4 <pvPortMalloc+0x13c>)
 800c026:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800c028:	4b32      	ldr	r3, [pc, #200]	; (800c0f4 <pvPortMalloc+0x13c>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c02e:	e004      	b.n	800c03a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c034:	69fb      	ldr	r3, [r7, #28]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	429a      	cmp	r2, r3
 800c042:	d903      	bls.n	800c04c <pvPortMalloc+0x94>
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f1      	bne.n	800c030 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c04c:	4b26      	ldr	r3, [pc, #152]	; (800c0e8 <pvPortMalloc+0x130>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	429a      	cmp	r2, r3
 800c054:	d040      	beq.n	800c0d8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2208      	movs	r2, #8
 800c05c:	4413      	add	r3, r2
 800c05e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c060:	69fb      	ldr	r3, [r7, #28]
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	685a      	ldr	r2, [r3, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	2308      	movs	r3, #8
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	429a      	cmp	r2, r3
 800c076:	d90f      	bls.n	800c098 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c078:	69fa      	ldr	r2, [r7, #28]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	4413      	add	r3, r2
 800c07e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c080:	69fb      	ldr	r3, [r7, #28]
 800c082:	685a      	ldr	r2, [r3, #4]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	1ad2      	subs	r2, r2, r3
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800c092:	6938      	ldr	r0, [r7, #16]
 800c094:	f000 f8a2 	bl	800c1dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c098:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <pvPortMalloc+0x138>)
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	4a13      	ldr	r2, [pc, #76]	; (800c0f0 <pvPortMalloc+0x138>)
 800c0a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c0a6:	4b12      	ldr	r3, [pc, #72]	; (800c0f0 <pvPortMalloc+0x138>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	4b13      	ldr	r3, [pc, #76]	; (800c0f8 <pvPortMalloc+0x140>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d203      	bcs.n	800c0ba <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <pvPortMalloc+0x138>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a10      	ldr	r2, [pc, #64]	; (800c0f8 <pvPortMalloc+0x140>)
 800c0b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	685a      	ldr	r2, [r3, #4]
 800c0be:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <pvPortMalloc+0x134>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c0ce:	4b0b      	ldr	r3, [pc, #44]	; (800c0fc <pvPortMalloc+0x144>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	4a09      	ldr	r2, [pc, #36]	; (800c0fc <pvPortMalloc+0x144>)
 800c0d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0d8:	f7fe fd16 	bl	800ab08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800c0dc:	697b      	ldr	r3, [r7, #20]
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3720      	adds	r7, #32
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	20007274 	.word	0x20007274
 800c0ec:	20007288 	.word	0x20007288
 800c0f0:	20007278 	.word	0x20007278
 800c0f4:	2000726c 	.word	0x2000726c
 800c0f8:	2000727c 	.word	0x2000727c
 800c0fc:	20007280 	.word	0x20007280

0800c100 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b086      	sub	sp, #24
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d04d      	beq.n	800c1ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c112:	2308      	movs	r3, #8
 800c114:	425b      	negs	r3, r3
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	4413      	add	r3, r2
 800c11a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	685a      	ldr	r2, [r3, #4]
 800c124:	4b24      	ldr	r3, [pc, #144]	; (800c1b8 <vPortFree+0xb8>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4013      	ands	r3, r2
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10a      	bne.n	800c144 <vPortFree+0x44>
	__asm volatile
 800c12e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c132:	f383 8811 	msr	BASEPRI, r3
 800c136:	f3bf 8f6f 	isb	sy
 800c13a:	f3bf 8f4f 	dsb	sy
 800c13e:	60fb      	str	r3, [r7, #12]
}
 800c140:	bf00      	nop
 800c142:	e7fe      	b.n	800c142 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d00a      	beq.n	800c162 <vPortFree+0x62>
	__asm volatile
 800c14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	60bb      	str	r3, [r7, #8]
}
 800c15e:	bf00      	nop
 800c160:	e7fe      	b.n	800c160 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	685a      	ldr	r2, [r3, #4]
 800c166:	4b14      	ldr	r3, [pc, #80]	; (800c1b8 <vPortFree+0xb8>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4013      	ands	r3, r2
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d01e      	beq.n	800c1ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d11a      	bne.n	800c1ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	4b0e      	ldr	r3, [pc, #56]	; (800c1b8 <vPortFree+0xb8>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	43db      	mvns	r3, r3
 800c182:	401a      	ands	r2, r3
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c188:	f7fe fcb0 	bl	800aaec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	685a      	ldr	r2, [r3, #4]
 800c190:	4b0a      	ldr	r3, [pc, #40]	; (800c1bc <vPortFree+0xbc>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4413      	add	r3, r2
 800c196:	4a09      	ldr	r2, [pc, #36]	; (800c1bc <vPortFree+0xbc>)
 800c198:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c19a:	6938      	ldr	r0, [r7, #16]
 800c19c:	f000 f81e 	bl	800c1dc <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c1a0:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <vPortFree+0xc0>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	3301      	adds	r3, #1
 800c1a6:	4a06      	ldr	r2, [pc, #24]	; (800c1c0 <vPortFree+0xc0>)
 800c1a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c1aa:	f7fe fcad 	bl	800ab08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c1ae:	bf00      	nop
 800c1b0:	3718      	adds	r7, #24
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}
 800c1b6:	bf00      	nop
 800c1b8:	20007288 	.word	0x20007288
 800c1bc:	20007278 	.word	0x20007278
 800c1c0:	20007284 	.word	0x20007284

0800c1c4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800c1c8:	4b03      	ldr	r3, [pc, #12]	; (800c1d8 <xPortGetFreeHeapSize+0x14>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	20007278 	.word	0x20007278

0800c1dc <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1e4:	4b28      	ldr	r3, [pc, #160]	; (800c288 <prvInsertBlockIntoFreeList+0xac>)
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e002      	b.n	800c1f0 <prvInsertBlockIntoFreeList+0x14>
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d8f7      	bhi.n	800c1ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	4413      	add	r3, r2
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d108      	bne.n	800c21e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685a      	ldr	r2, [r3, #4]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	441a      	add	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	685b      	ldr	r3, [r3, #4]
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	441a      	add	r2, r3
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d118      	bne.n	800c264 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681a      	ldr	r2, [r3, #0]
 800c236:	4b15      	ldr	r3, [pc, #84]	; (800c28c <prvInsertBlockIntoFreeList+0xb0>)
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d00d      	beq.n	800c25a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685a      	ldr	r2, [r3, #4]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	441a      	add	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	e008      	b.n	800c26c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c25a:	4b0c      	ldr	r3, [pc, #48]	; (800c28c <prvInsertBlockIntoFreeList+0xb0>)
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	601a      	str	r2, [r3, #0]
 800c262:	e003      	b.n	800c26c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	429a      	cmp	r2, r3
 800c272:	d002      	beq.n	800c27a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	687a      	ldr	r2, [r7, #4]
 800c278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c27a:	bf00      	nop
 800c27c:	3714      	adds	r7, #20
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	2000726c 	.word	0x2000726c
 800c28c:	20007274 	.word	0x20007274

0800c290 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800c290:	b480      	push	{r7}
 800c292:	b08f      	sub	sp, #60	; 0x3c
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800c298:	2300      	movs	r3, #0
 800c29a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800c29c:	2300      	movs	r3, #0
 800c29e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800c2a4:	4b5a      	ldr	r3, [pc, #360]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00a      	beq.n	800c2c2 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	f383 8811 	msr	BASEPRI, r3
 800c2b4:	f3bf 8f6f 	isb	sy
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	617b      	str	r3, [r7, #20]
}
 800c2be:	bf00      	nop
 800c2c0:	e7fe      	b.n	800c2c0 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	00db      	lsls	r3, r3, #3
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	4413      	add	r3, r2
 800c2ca:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800c2cc:	e07d      	b.n	800c3ca <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2dc:	f003 0307 	and.w	r3, r3, #7
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d00e      	beq.n	800c302 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e6:	3307      	adds	r3, #7
 800c2e8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ec:	f023 0307 	bic.w	r3, r3, #7
 800c2f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2fe:	4413      	add	r3, r2
 800c300:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800c306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800c30c:	69fb      	ldr	r3, [r7, #28]
 800c30e:	4a41      	ldr	r2, [pc, #260]	; (800c414 <vPortDefineHeapRegions+0x184>)
 800c310:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800c312:	4b40      	ldr	r3, [pc, #256]	; (800c414 <vPortDefineHeapRegions+0x184>)
 800c314:	2200      	movs	r2, #0
 800c316:	605a      	str	r2, [r3, #4]
 800c318:	e01f      	b.n	800c35a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800c31a:	4b3d      	ldr	r3, [pc, #244]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d10a      	bne.n	800c338 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800c322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c326:	f383 8811 	msr	BASEPRI, r3
 800c32a:	f3bf 8f6f 	isb	sy
 800c32e:	f3bf 8f4f 	dsb	sy
 800c332:	613b      	str	r3, [r7, #16]
}
 800c334:	bf00      	nop
 800c336:	e7fe      	b.n	800c336 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800c338:	4b35      	ldr	r3, [pc, #212]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	461a      	mov	r2, r3
 800c33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c340:	4293      	cmp	r3, r2
 800c342:	d80a      	bhi.n	800c35a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	f383 8811 	msr	BASEPRI, r3
 800c34c:	f3bf 8f6f 	isb	sy
 800c350:	f3bf 8f4f 	dsb	sy
 800c354:	60fb      	str	r3, [r7, #12]
}
 800c356:	bf00      	nop
 800c358:	e7fe      	b.n	800c358 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800c35a:	4b2d      	ldr	r3, [pc, #180]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800c360:	69fa      	ldr	r2, [r7, #28]
 800c362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c364:	4413      	add	r3, r2
 800c366:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800c368:	2208      	movs	r2, #8
 800c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800c370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c372:	f023 0307 	bic.w	r3, r3, #7
 800c376:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	4a25      	ldr	r2, [pc, #148]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c37c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800c37e:	4b24      	ldr	r3, [pc, #144]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	2200      	movs	r2, #0
 800c384:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800c386:	4b22      	ldr	r3, [pc, #136]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800c392:	6a3b      	ldr	r3, [r7, #32]
 800c394:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c396:	1ad2      	subs	r2, r2, r3
 800c398:	6a3b      	ldr	r3, [r7, #32]
 800c39a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800c39c:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <vPortDefineHeapRegions+0x180>)
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d002      	beq.n	800c3b0 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	6a3a      	ldr	r2, [r7, #32]
 800c3ae:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800c3b0:	6a3b      	ldr	r3, [r7, #32]
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b6:	4413      	add	r3, r2
 800c3b8:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800c3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3bc:	3301      	adds	r3, #1
 800c3be:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	00db      	lsls	r3, r3, #3
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	4413      	add	r3, r2
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	f47f af7d 	bne.w	800c2ce <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800c3d4:	4a10      	ldr	r2, [pc, #64]	; (800c418 <vPortDefineHeapRegions+0x188>)
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800c3da:	4a10      	ldr	r2, [pc, #64]	; (800c41c <vPortDefineHeapRegions+0x18c>)
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800c3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10a      	bne.n	800c3fc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800c3e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ea:	f383 8811 	msr	BASEPRI, r3
 800c3ee:	f3bf 8f6f 	isb	sy
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	60bb      	str	r3, [r7, #8]
}
 800c3f8:	bf00      	nop
 800c3fa:	e7fe      	b.n	800c3fa <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c3fc:	4b08      	ldr	r3, [pc, #32]	; (800c420 <vPortDefineHeapRegions+0x190>)
 800c3fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c402:	601a      	str	r2, [r3, #0]
}
 800c404:	bf00      	nop
 800c406:	373c      	adds	r7, #60	; 0x3c
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr
 800c410:	20007274 	.word	0x20007274
 800c414:	2000726c 	.word	0x2000726c
 800c418:	2000727c 	.word	0x2000727c
 800c41c:	20007278 	.word	0x20007278
 800c420:	20007288 	.word	0x20007288

0800c424 <atol>:
 800c424:	220a      	movs	r2, #10
 800c426:	2100      	movs	r1, #0
 800c428:	f000 bf80 	b.w	800d32c <strtol>

0800c42c <__errno>:
 800c42c:	4b01      	ldr	r3, [pc, #4]	; (800c434 <__errno+0x8>)
 800c42e:	6818      	ldr	r0, [r3, #0]
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	200000b8 	.word	0x200000b8

0800c438 <std>:
 800c438:	2300      	movs	r3, #0
 800c43a:	b510      	push	{r4, lr}
 800c43c:	4604      	mov	r4, r0
 800c43e:	e9c0 3300 	strd	r3, r3, [r0]
 800c442:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c446:	6083      	str	r3, [r0, #8]
 800c448:	8181      	strh	r1, [r0, #12]
 800c44a:	6643      	str	r3, [r0, #100]	; 0x64
 800c44c:	81c2      	strh	r2, [r0, #14]
 800c44e:	6183      	str	r3, [r0, #24]
 800c450:	4619      	mov	r1, r3
 800c452:	2208      	movs	r2, #8
 800c454:	305c      	adds	r0, #92	; 0x5c
 800c456:	f000 f9cf 	bl	800c7f8 <memset>
 800c45a:	4b05      	ldr	r3, [pc, #20]	; (800c470 <std+0x38>)
 800c45c:	6263      	str	r3, [r4, #36]	; 0x24
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <std+0x3c>)
 800c460:	62a3      	str	r3, [r4, #40]	; 0x28
 800c462:	4b05      	ldr	r3, [pc, #20]	; (800c478 <std+0x40>)
 800c464:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c466:	4b05      	ldr	r3, [pc, #20]	; (800c47c <std+0x44>)
 800c468:	6224      	str	r4, [r4, #32]
 800c46a:	6323      	str	r3, [r4, #48]	; 0x30
 800c46c:	bd10      	pop	{r4, pc}
 800c46e:	bf00      	nop
 800c470:	0800d109 	.word	0x0800d109
 800c474:	0800d12b 	.word	0x0800d12b
 800c478:	0800d163 	.word	0x0800d163
 800c47c:	0800d187 	.word	0x0800d187

0800c480 <_cleanup_r>:
 800c480:	4901      	ldr	r1, [pc, #4]	; (800c488 <_cleanup_r+0x8>)
 800c482:	f000 b8af 	b.w	800c5e4 <_fwalk_reent>
 800c486:	bf00      	nop
 800c488:	0800d685 	.word	0x0800d685

0800c48c <__sfmoreglue>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	2268      	movs	r2, #104	; 0x68
 800c490:	1e4d      	subs	r5, r1, #1
 800c492:	4355      	muls	r5, r2
 800c494:	460e      	mov	r6, r1
 800c496:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c49a:	f000 fa21 	bl	800c8e0 <_malloc_r>
 800c49e:	4604      	mov	r4, r0
 800c4a0:	b140      	cbz	r0, 800c4b4 <__sfmoreglue+0x28>
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	e9c0 1600 	strd	r1, r6, [r0]
 800c4a8:	300c      	adds	r0, #12
 800c4aa:	60a0      	str	r0, [r4, #8]
 800c4ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c4b0:	f000 f9a2 	bl	800c7f8 <memset>
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}

0800c4b8 <__sfp_lock_acquire>:
 800c4b8:	4801      	ldr	r0, [pc, #4]	; (800c4c0 <__sfp_lock_acquire+0x8>)
 800c4ba:	f000 b984 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800c4be:	bf00      	nop
 800c4c0:	2000728d 	.word	0x2000728d

0800c4c4 <__sfp_lock_release>:
 800c4c4:	4801      	ldr	r0, [pc, #4]	; (800c4cc <__sfp_lock_release+0x8>)
 800c4c6:	f000 b97f 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800c4ca:	bf00      	nop
 800c4cc:	2000728d 	.word	0x2000728d

0800c4d0 <__sinit_lock_acquire>:
 800c4d0:	4801      	ldr	r0, [pc, #4]	; (800c4d8 <__sinit_lock_acquire+0x8>)
 800c4d2:	f000 b978 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800c4d6:	bf00      	nop
 800c4d8:	2000728e 	.word	0x2000728e

0800c4dc <__sinit_lock_release>:
 800c4dc:	4801      	ldr	r0, [pc, #4]	; (800c4e4 <__sinit_lock_release+0x8>)
 800c4de:	f000 b973 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800c4e2:	bf00      	nop
 800c4e4:	2000728e 	.word	0x2000728e

0800c4e8 <__sinit>:
 800c4e8:	b510      	push	{r4, lr}
 800c4ea:	4604      	mov	r4, r0
 800c4ec:	f7ff fff0 	bl	800c4d0 <__sinit_lock_acquire>
 800c4f0:	69a3      	ldr	r3, [r4, #24]
 800c4f2:	b11b      	cbz	r3, 800c4fc <__sinit+0x14>
 800c4f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4f8:	f7ff bff0 	b.w	800c4dc <__sinit_lock_release>
 800c4fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c500:	6523      	str	r3, [r4, #80]	; 0x50
 800c502:	4b13      	ldr	r3, [pc, #76]	; (800c550 <__sinit+0x68>)
 800c504:	4a13      	ldr	r2, [pc, #76]	; (800c554 <__sinit+0x6c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	62a2      	str	r2, [r4, #40]	; 0x28
 800c50a:	42a3      	cmp	r3, r4
 800c50c:	bf04      	itt	eq
 800c50e:	2301      	moveq	r3, #1
 800c510:	61a3      	streq	r3, [r4, #24]
 800c512:	4620      	mov	r0, r4
 800c514:	f000 f820 	bl	800c558 <__sfp>
 800c518:	6060      	str	r0, [r4, #4]
 800c51a:	4620      	mov	r0, r4
 800c51c:	f000 f81c 	bl	800c558 <__sfp>
 800c520:	60a0      	str	r0, [r4, #8]
 800c522:	4620      	mov	r0, r4
 800c524:	f000 f818 	bl	800c558 <__sfp>
 800c528:	2200      	movs	r2, #0
 800c52a:	60e0      	str	r0, [r4, #12]
 800c52c:	2104      	movs	r1, #4
 800c52e:	6860      	ldr	r0, [r4, #4]
 800c530:	f7ff ff82 	bl	800c438 <std>
 800c534:	68a0      	ldr	r0, [r4, #8]
 800c536:	2201      	movs	r2, #1
 800c538:	2109      	movs	r1, #9
 800c53a:	f7ff ff7d 	bl	800c438 <std>
 800c53e:	68e0      	ldr	r0, [r4, #12]
 800c540:	2202      	movs	r2, #2
 800c542:	2112      	movs	r1, #18
 800c544:	f7ff ff78 	bl	800c438 <std>
 800c548:	2301      	movs	r3, #1
 800c54a:	61a3      	str	r3, [r4, #24]
 800c54c:	e7d2      	b.n	800c4f4 <__sinit+0xc>
 800c54e:	bf00      	nop
 800c550:	080116d0 	.word	0x080116d0
 800c554:	0800c481 	.word	0x0800c481

0800c558 <__sfp>:
 800c558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c55a:	4607      	mov	r7, r0
 800c55c:	f7ff ffac 	bl	800c4b8 <__sfp_lock_acquire>
 800c560:	4b1e      	ldr	r3, [pc, #120]	; (800c5dc <__sfp+0x84>)
 800c562:	681e      	ldr	r6, [r3, #0]
 800c564:	69b3      	ldr	r3, [r6, #24]
 800c566:	b913      	cbnz	r3, 800c56e <__sfp+0x16>
 800c568:	4630      	mov	r0, r6
 800c56a:	f7ff ffbd 	bl	800c4e8 <__sinit>
 800c56e:	3648      	adds	r6, #72	; 0x48
 800c570:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c574:	3b01      	subs	r3, #1
 800c576:	d503      	bpl.n	800c580 <__sfp+0x28>
 800c578:	6833      	ldr	r3, [r6, #0]
 800c57a:	b30b      	cbz	r3, 800c5c0 <__sfp+0x68>
 800c57c:	6836      	ldr	r6, [r6, #0]
 800c57e:	e7f7      	b.n	800c570 <__sfp+0x18>
 800c580:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c584:	b9d5      	cbnz	r5, 800c5bc <__sfp+0x64>
 800c586:	4b16      	ldr	r3, [pc, #88]	; (800c5e0 <__sfp+0x88>)
 800c588:	60e3      	str	r3, [r4, #12]
 800c58a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c58e:	6665      	str	r5, [r4, #100]	; 0x64
 800c590:	f000 f918 	bl	800c7c4 <__retarget_lock_init_recursive>
 800c594:	f7ff ff96 	bl	800c4c4 <__sfp_lock_release>
 800c598:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c59c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5a0:	6025      	str	r5, [r4, #0]
 800c5a2:	61a5      	str	r5, [r4, #24]
 800c5a4:	2208      	movs	r2, #8
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c5ac:	f000 f924 	bl	800c7f8 <memset>
 800c5b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c5b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5bc:	3468      	adds	r4, #104	; 0x68
 800c5be:	e7d9      	b.n	800c574 <__sfp+0x1c>
 800c5c0:	2104      	movs	r1, #4
 800c5c2:	4638      	mov	r0, r7
 800c5c4:	f7ff ff62 	bl	800c48c <__sfmoreglue>
 800c5c8:	4604      	mov	r4, r0
 800c5ca:	6030      	str	r0, [r6, #0]
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d1d5      	bne.n	800c57c <__sfp+0x24>
 800c5d0:	f7ff ff78 	bl	800c4c4 <__sfp_lock_release>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	e7ee      	b.n	800c5b8 <__sfp+0x60>
 800c5da:	bf00      	nop
 800c5dc:	080116d0 	.word	0x080116d0
 800c5e0:	ffff0001 	.word	0xffff0001

0800c5e4 <_fwalk_reent>:
 800c5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5e8:	4606      	mov	r6, r0
 800c5ea:	4688      	mov	r8, r1
 800c5ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c5f0:	2700      	movs	r7, #0
 800c5f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c5f6:	f1b9 0901 	subs.w	r9, r9, #1
 800c5fa:	d505      	bpl.n	800c608 <_fwalk_reent+0x24>
 800c5fc:	6824      	ldr	r4, [r4, #0]
 800c5fe:	2c00      	cmp	r4, #0
 800c600:	d1f7      	bne.n	800c5f2 <_fwalk_reent+0xe>
 800c602:	4638      	mov	r0, r7
 800c604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c608:	89ab      	ldrh	r3, [r5, #12]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d907      	bls.n	800c61e <_fwalk_reent+0x3a>
 800c60e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c612:	3301      	adds	r3, #1
 800c614:	d003      	beq.n	800c61e <_fwalk_reent+0x3a>
 800c616:	4629      	mov	r1, r5
 800c618:	4630      	mov	r0, r6
 800c61a:	47c0      	blx	r8
 800c61c:	4307      	orrs	r7, r0
 800c61e:	3568      	adds	r5, #104	; 0x68
 800c620:	e7e9      	b.n	800c5f6 <_fwalk_reent+0x12>
	...

0800c624 <gmtime_r>:
 800c624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c628:	e9d0 6700 	ldrd	r6, r7, [r0]
 800c62c:	460c      	mov	r4, r1
 800c62e:	4a4f      	ldr	r2, [pc, #316]	; (800c76c <gmtime_r+0x148>)
 800c630:	2300      	movs	r3, #0
 800c632:	4630      	mov	r0, r6
 800c634:	4639      	mov	r1, r7
 800c636:	f7f4 f929 	bl	800088c <__aeabi_ldivmod>
 800c63a:	4639      	mov	r1, r7
 800c63c:	4605      	mov	r5, r0
 800c63e:	4a4b      	ldr	r2, [pc, #300]	; (800c76c <gmtime_r+0x148>)
 800c640:	4630      	mov	r0, r6
 800c642:	2300      	movs	r3, #0
 800c644:	f7f4 f922 	bl	800088c <__aeabi_ldivmod>
 800c648:	2a00      	cmp	r2, #0
 800c64a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800c64e:	bfb7      	itett	lt
 800c650:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800c654:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800c658:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800c65c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800c660:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800c664:	fbb2 f1f0 	udiv	r1, r2, r0
 800c668:	fb00 2211 	mls	r2, r0, r1, r2
 800c66c:	203c      	movs	r0, #60	; 0x3c
 800c66e:	60a1      	str	r1, [r4, #8]
 800c670:	fbb2 f1f0 	udiv	r1, r2, r0
 800c674:	fb00 2211 	mls	r2, r0, r1, r2
 800c678:	6061      	str	r1, [r4, #4]
 800c67a:	6022      	str	r2, [r4, #0]
 800c67c:	2107      	movs	r1, #7
 800c67e:	1cda      	adds	r2, r3, #3
 800c680:	fb92 f1f1 	sdiv	r1, r2, r1
 800c684:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800c688:	1a52      	subs	r2, r2, r1
 800c68a:	bf48      	it	mi
 800c68c:	3207      	addmi	r2, #7
 800c68e:	4d38      	ldr	r5, [pc, #224]	; (800c770 <gmtime_r+0x14c>)
 800c690:	4838      	ldr	r0, [pc, #224]	; (800c774 <gmtime_r+0x150>)
 800c692:	61a2      	str	r2, [r4, #24]
 800c694:	2b00      	cmp	r3, #0
 800c696:	bfb7      	itett	lt
 800c698:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800c69c:	fb93 f5f5 	sdivge	r5, r3, r5
 800c6a0:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800c6a4:	fb92 f5f5 	sdivlt	r5, r2, r5
 800c6a8:	fb00 3005 	mla	r0, r0, r5, r3
 800c6ac:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800c6b0:	fbb0 f2f2 	udiv	r2, r0, r2
 800c6b4:	4402      	add	r2, r0
 800c6b6:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800c6ba:	fbb0 f1f3 	udiv	r1, r0, r3
 800c6be:	1a52      	subs	r2, r2, r1
 800c6c0:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c6c4:	492c      	ldr	r1, [pc, #176]	; (800c778 <gmtime_r+0x154>)
 800c6c6:	fbb0 f1f1 	udiv	r1, r0, r1
 800c6ca:	2764      	movs	r7, #100	; 0x64
 800c6cc:	1a52      	subs	r2, r2, r1
 800c6ce:	fbb2 f1fc 	udiv	r1, r2, ip
 800c6d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6d6:	fbb1 f6f7 	udiv	r6, r1, r7
 800c6da:	1af3      	subs	r3, r6, r3
 800c6dc:	4403      	add	r3, r0
 800c6de:	fb0c 3311 	mls	r3, ip, r1, r3
 800c6e2:	2299      	movs	r2, #153	; 0x99
 800c6e4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800c6e8:	f10e 0e02 	add.w	lr, lr, #2
 800c6ec:	f103 0c01 	add.w	ip, r3, #1
 800c6f0:	fbbe f0f2 	udiv	r0, lr, r2
 800c6f4:	4342      	muls	r2, r0
 800c6f6:	3202      	adds	r2, #2
 800c6f8:	f04f 0805 	mov.w	r8, #5
 800c6fc:	fbb2 f2f8 	udiv	r2, r2, r8
 800c700:	ebac 0c02 	sub.w	ip, ip, r2
 800c704:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800c708:	4596      	cmp	lr, r2
 800c70a:	bf94      	ite	ls
 800c70c:	2202      	movls	r2, #2
 800c70e:	f06f 0209 	mvnhi.w	r2, #9
 800c712:	4410      	add	r0, r2
 800c714:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c718:	fb02 1505 	mla	r5, r2, r5, r1
 800c71c:	2801      	cmp	r0, #1
 800c71e:	bf98      	it	ls
 800c720:	3501      	addls	r5, #1
 800c722:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800c726:	d30d      	bcc.n	800c744 <gmtime_r+0x120>
 800c728:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c72c:	61e3      	str	r3, [r4, #28]
 800c72e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800c732:	2300      	movs	r3, #0
 800c734:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800c738:	f8c4 c00c 	str.w	ip, [r4, #12]
 800c73c:	6223      	str	r3, [r4, #32]
 800c73e:	4620      	mov	r0, r4
 800c740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c744:	078a      	lsls	r2, r1, #30
 800c746:	d102      	bne.n	800c74e <gmtime_r+0x12a>
 800c748:	fb07 1616 	mls	r6, r7, r6, r1
 800c74c:	b95e      	cbnz	r6, 800c766 <gmtime_r+0x142>
 800c74e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c752:	fbb1 f6f2 	udiv	r6, r1, r2
 800c756:	fb02 1216 	mls	r2, r2, r6, r1
 800c75a:	fab2 f282 	clz	r2, r2
 800c75e:	0952      	lsrs	r2, r2, #5
 800c760:	333b      	adds	r3, #59	; 0x3b
 800c762:	4413      	add	r3, r2
 800c764:	e7e2      	b.n	800c72c <gmtime_r+0x108>
 800c766:	2201      	movs	r2, #1
 800c768:	e7fa      	b.n	800c760 <gmtime_r+0x13c>
 800c76a:	bf00      	nop
 800c76c:	00015180 	.word	0x00015180
 800c770:	00023ab1 	.word	0x00023ab1
 800c774:	fffdc54f 	.word	0xfffdc54f
 800c778:	00023ab0 	.word	0x00023ab0

0800c77c <__libc_init_array>:
 800c77c:	b570      	push	{r4, r5, r6, lr}
 800c77e:	4d0d      	ldr	r5, [pc, #52]	; (800c7b4 <__libc_init_array+0x38>)
 800c780:	4c0d      	ldr	r4, [pc, #52]	; (800c7b8 <__libc_init_array+0x3c>)
 800c782:	1b64      	subs	r4, r4, r5
 800c784:	10a4      	asrs	r4, r4, #2
 800c786:	2600      	movs	r6, #0
 800c788:	42a6      	cmp	r6, r4
 800c78a:	d109      	bne.n	800c7a0 <__libc_init_array+0x24>
 800c78c:	4d0b      	ldr	r5, [pc, #44]	; (800c7bc <__libc_init_array+0x40>)
 800c78e:	4c0c      	ldr	r4, [pc, #48]	; (800c7c0 <__libc_init_array+0x44>)
 800c790:	f001 fa18 	bl	800dbc4 <_init>
 800c794:	1b64      	subs	r4, r4, r5
 800c796:	10a4      	asrs	r4, r4, #2
 800c798:	2600      	movs	r6, #0
 800c79a:	42a6      	cmp	r6, r4
 800c79c:	d105      	bne.n	800c7aa <__libc_init_array+0x2e>
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7a4:	4798      	blx	r3
 800c7a6:	3601      	adds	r6, #1
 800c7a8:	e7ee      	b.n	800c788 <__libc_init_array+0xc>
 800c7aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ae:	4798      	blx	r3
 800c7b0:	3601      	adds	r6, #1
 800c7b2:	e7f2      	b.n	800c79a <__libc_init_array+0x1e>
 800c7b4:	08011810 	.word	0x08011810
 800c7b8:	08011810 	.word	0x08011810
 800c7bc:	08011810 	.word	0x08011810
 800c7c0:	08011814 	.word	0x08011814

0800c7c4 <__retarget_lock_init_recursive>:
 800c7c4:	4770      	bx	lr

0800c7c6 <__retarget_lock_acquire_recursive>:
 800c7c6:	4770      	bx	lr

0800c7c8 <__retarget_lock_release_recursive>:
 800c7c8:	4770      	bx	lr
	...

0800c7cc <free>:
 800c7cc:	4b02      	ldr	r3, [pc, #8]	; (800c7d8 <free+0xc>)
 800c7ce:	4601      	mov	r1, r0
 800c7d0:	6818      	ldr	r0, [r3, #0]
 800c7d2:	f000 b819 	b.w	800c808 <_free_r>
 800c7d6:	bf00      	nop
 800c7d8:	200000b8 	.word	0x200000b8

0800c7dc <memcpy>:
 800c7dc:	440a      	add	r2, r1
 800c7de:	4291      	cmp	r1, r2
 800c7e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c7e4:	d100      	bne.n	800c7e8 <memcpy+0xc>
 800c7e6:	4770      	bx	lr
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c7f2:	4291      	cmp	r1, r2
 800c7f4:	d1f9      	bne.n	800c7ea <memcpy+0xe>
 800c7f6:	bd10      	pop	{r4, pc}

0800c7f8 <memset>:
 800c7f8:	4402      	add	r2, r0
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d100      	bne.n	800c802 <memset+0xa>
 800c800:	4770      	bx	lr
 800c802:	f803 1b01 	strb.w	r1, [r3], #1
 800c806:	e7f9      	b.n	800c7fc <memset+0x4>

0800c808 <_free_r>:
 800c808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c80a:	2900      	cmp	r1, #0
 800c80c:	d044      	beq.n	800c898 <_free_r+0x90>
 800c80e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c812:	9001      	str	r0, [sp, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f1a1 0404 	sub.w	r4, r1, #4
 800c81a:	bfb8      	it	lt
 800c81c:	18e4      	addlt	r4, r4, r3
 800c81e:	f000 ffff 	bl	800d820 <__malloc_lock>
 800c822:	4a1e      	ldr	r2, [pc, #120]	; (800c89c <_free_r+0x94>)
 800c824:	9801      	ldr	r0, [sp, #4]
 800c826:	6813      	ldr	r3, [r2, #0]
 800c828:	b933      	cbnz	r3, 800c838 <_free_r+0x30>
 800c82a:	6063      	str	r3, [r4, #4]
 800c82c:	6014      	str	r4, [r2, #0]
 800c82e:	b003      	add	sp, #12
 800c830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c834:	f000 bffa 	b.w	800d82c <__malloc_unlock>
 800c838:	42a3      	cmp	r3, r4
 800c83a:	d908      	bls.n	800c84e <_free_r+0x46>
 800c83c:	6825      	ldr	r5, [r4, #0]
 800c83e:	1961      	adds	r1, r4, r5
 800c840:	428b      	cmp	r3, r1
 800c842:	bf01      	itttt	eq
 800c844:	6819      	ldreq	r1, [r3, #0]
 800c846:	685b      	ldreq	r3, [r3, #4]
 800c848:	1949      	addeq	r1, r1, r5
 800c84a:	6021      	streq	r1, [r4, #0]
 800c84c:	e7ed      	b.n	800c82a <_free_r+0x22>
 800c84e:	461a      	mov	r2, r3
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	b10b      	cbz	r3, 800c858 <_free_r+0x50>
 800c854:	42a3      	cmp	r3, r4
 800c856:	d9fa      	bls.n	800c84e <_free_r+0x46>
 800c858:	6811      	ldr	r1, [r2, #0]
 800c85a:	1855      	adds	r5, r2, r1
 800c85c:	42a5      	cmp	r5, r4
 800c85e:	d10b      	bne.n	800c878 <_free_r+0x70>
 800c860:	6824      	ldr	r4, [r4, #0]
 800c862:	4421      	add	r1, r4
 800c864:	1854      	adds	r4, r2, r1
 800c866:	42a3      	cmp	r3, r4
 800c868:	6011      	str	r1, [r2, #0]
 800c86a:	d1e0      	bne.n	800c82e <_free_r+0x26>
 800c86c:	681c      	ldr	r4, [r3, #0]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	6053      	str	r3, [r2, #4]
 800c872:	4421      	add	r1, r4
 800c874:	6011      	str	r1, [r2, #0]
 800c876:	e7da      	b.n	800c82e <_free_r+0x26>
 800c878:	d902      	bls.n	800c880 <_free_r+0x78>
 800c87a:	230c      	movs	r3, #12
 800c87c:	6003      	str	r3, [r0, #0]
 800c87e:	e7d6      	b.n	800c82e <_free_r+0x26>
 800c880:	6825      	ldr	r5, [r4, #0]
 800c882:	1961      	adds	r1, r4, r5
 800c884:	428b      	cmp	r3, r1
 800c886:	bf04      	itt	eq
 800c888:	6819      	ldreq	r1, [r3, #0]
 800c88a:	685b      	ldreq	r3, [r3, #4]
 800c88c:	6063      	str	r3, [r4, #4]
 800c88e:	bf04      	itt	eq
 800c890:	1949      	addeq	r1, r1, r5
 800c892:	6021      	streq	r1, [r4, #0]
 800c894:	6054      	str	r4, [r2, #4]
 800c896:	e7ca      	b.n	800c82e <_free_r+0x26>
 800c898:	b003      	add	sp, #12
 800c89a:	bd30      	pop	{r4, r5, pc}
 800c89c:	20007290 	.word	0x20007290

0800c8a0 <sbrk_aligned>:
 800c8a0:	b570      	push	{r4, r5, r6, lr}
 800c8a2:	4e0e      	ldr	r6, [pc, #56]	; (800c8dc <sbrk_aligned+0x3c>)
 800c8a4:	460c      	mov	r4, r1
 800c8a6:	6831      	ldr	r1, [r6, #0]
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	b911      	cbnz	r1, 800c8b2 <sbrk_aligned+0x12>
 800c8ac:	f000 fbfc 	bl	800d0a8 <_sbrk_r>
 800c8b0:	6030      	str	r0, [r6, #0]
 800c8b2:	4621      	mov	r1, r4
 800c8b4:	4628      	mov	r0, r5
 800c8b6:	f000 fbf7 	bl	800d0a8 <_sbrk_r>
 800c8ba:	1c43      	adds	r3, r0, #1
 800c8bc:	d00a      	beq.n	800c8d4 <sbrk_aligned+0x34>
 800c8be:	1cc4      	adds	r4, r0, #3
 800c8c0:	f024 0403 	bic.w	r4, r4, #3
 800c8c4:	42a0      	cmp	r0, r4
 800c8c6:	d007      	beq.n	800c8d8 <sbrk_aligned+0x38>
 800c8c8:	1a21      	subs	r1, r4, r0
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	f000 fbec 	bl	800d0a8 <_sbrk_r>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d101      	bne.n	800c8d8 <sbrk_aligned+0x38>
 800c8d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c8d8:	4620      	mov	r0, r4
 800c8da:	bd70      	pop	{r4, r5, r6, pc}
 800c8dc:	20007294 	.word	0x20007294

0800c8e0 <_malloc_r>:
 800c8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8e4:	1ccd      	adds	r5, r1, #3
 800c8e6:	f025 0503 	bic.w	r5, r5, #3
 800c8ea:	3508      	adds	r5, #8
 800c8ec:	2d0c      	cmp	r5, #12
 800c8ee:	bf38      	it	cc
 800c8f0:	250c      	movcc	r5, #12
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	db01      	blt.n	800c8fc <_malloc_r+0x1c>
 800c8f8:	42a9      	cmp	r1, r5
 800c8fa:	d905      	bls.n	800c908 <_malloc_r+0x28>
 800c8fc:	230c      	movs	r3, #12
 800c8fe:	603b      	str	r3, [r7, #0]
 800c900:	2600      	movs	r6, #0
 800c902:	4630      	mov	r0, r6
 800c904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c908:	4e2e      	ldr	r6, [pc, #184]	; (800c9c4 <_malloc_r+0xe4>)
 800c90a:	f000 ff89 	bl	800d820 <__malloc_lock>
 800c90e:	6833      	ldr	r3, [r6, #0]
 800c910:	461c      	mov	r4, r3
 800c912:	bb34      	cbnz	r4, 800c962 <_malloc_r+0x82>
 800c914:	4629      	mov	r1, r5
 800c916:	4638      	mov	r0, r7
 800c918:	f7ff ffc2 	bl	800c8a0 <sbrk_aligned>
 800c91c:	1c43      	adds	r3, r0, #1
 800c91e:	4604      	mov	r4, r0
 800c920:	d14d      	bne.n	800c9be <_malloc_r+0xde>
 800c922:	6834      	ldr	r4, [r6, #0]
 800c924:	4626      	mov	r6, r4
 800c926:	2e00      	cmp	r6, #0
 800c928:	d140      	bne.n	800c9ac <_malloc_r+0xcc>
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	4631      	mov	r1, r6
 800c92e:	4638      	mov	r0, r7
 800c930:	eb04 0803 	add.w	r8, r4, r3
 800c934:	f000 fbb8 	bl	800d0a8 <_sbrk_r>
 800c938:	4580      	cmp	r8, r0
 800c93a:	d13a      	bne.n	800c9b2 <_malloc_r+0xd2>
 800c93c:	6821      	ldr	r1, [r4, #0]
 800c93e:	3503      	adds	r5, #3
 800c940:	1a6d      	subs	r5, r5, r1
 800c942:	f025 0503 	bic.w	r5, r5, #3
 800c946:	3508      	adds	r5, #8
 800c948:	2d0c      	cmp	r5, #12
 800c94a:	bf38      	it	cc
 800c94c:	250c      	movcc	r5, #12
 800c94e:	4629      	mov	r1, r5
 800c950:	4638      	mov	r0, r7
 800c952:	f7ff ffa5 	bl	800c8a0 <sbrk_aligned>
 800c956:	3001      	adds	r0, #1
 800c958:	d02b      	beq.n	800c9b2 <_malloc_r+0xd2>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	442b      	add	r3, r5
 800c95e:	6023      	str	r3, [r4, #0]
 800c960:	e00e      	b.n	800c980 <_malloc_r+0xa0>
 800c962:	6822      	ldr	r2, [r4, #0]
 800c964:	1b52      	subs	r2, r2, r5
 800c966:	d41e      	bmi.n	800c9a6 <_malloc_r+0xc6>
 800c968:	2a0b      	cmp	r2, #11
 800c96a:	d916      	bls.n	800c99a <_malloc_r+0xba>
 800c96c:	1961      	adds	r1, r4, r5
 800c96e:	42a3      	cmp	r3, r4
 800c970:	6025      	str	r5, [r4, #0]
 800c972:	bf18      	it	ne
 800c974:	6059      	strne	r1, [r3, #4]
 800c976:	6863      	ldr	r3, [r4, #4]
 800c978:	bf08      	it	eq
 800c97a:	6031      	streq	r1, [r6, #0]
 800c97c:	5162      	str	r2, [r4, r5]
 800c97e:	604b      	str	r3, [r1, #4]
 800c980:	4638      	mov	r0, r7
 800c982:	f104 060b 	add.w	r6, r4, #11
 800c986:	f000 ff51 	bl	800d82c <__malloc_unlock>
 800c98a:	f026 0607 	bic.w	r6, r6, #7
 800c98e:	1d23      	adds	r3, r4, #4
 800c990:	1af2      	subs	r2, r6, r3
 800c992:	d0b6      	beq.n	800c902 <_malloc_r+0x22>
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	50a3      	str	r3, [r4, r2]
 800c998:	e7b3      	b.n	800c902 <_malloc_r+0x22>
 800c99a:	6862      	ldr	r2, [r4, #4]
 800c99c:	42a3      	cmp	r3, r4
 800c99e:	bf0c      	ite	eq
 800c9a0:	6032      	streq	r2, [r6, #0]
 800c9a2:	605a      	strne	r2, [r3, #4]
 800c9a4:	e7ec      	b.n	800c980 <_malloc_r+0xa0>
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	6864      	ldr	r4, [r4, #4]
 800c9aa:	e7b2      	b.n	800c912 <_malloc_r+0x32>
 800c9ac:	4634      	mov	r4, r6
 800c9ae:	6876      	ldr	r6, [r6, #4]
 800c9b0:	e7b9      	b.n	800c926 <_malloc_r+0x46>
 800c9b2:	230c      	movs	r3, #12
 800c9b4:	603b      	str	r3, [r7, #0]
 800c9b6:	4638      	mov	r0, r7
 800c9b8:	f000 ff38 	bl	800d82c <__malloc_unlock>
 800c9bc:	e7a1      	b.n	800c902 <_malloc_r+0x22>
 800c9be:	6025      	str	r5, [r4, #0]
 800c9c0:	e7de      	b.n	800c980 <_malloc_r+0xa0>
 800c9c2:	bf00      	nop
 800c9c4:	20007290 	.word	0x20007290

0800c9c8 <__sfputc_r>:
 800c9c8:	6893      	ldr	r3, [r2, #8]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	b410      	push	{r4}
 800c9d0:	6093      	str	r3, [r2, #8]
 800c9d2:	da08      	bge.n	800c9e6 <__sfputc_r+0x1e>
 800c9d4:	6994      	ldr	r4, [r2, #24]
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	db01      	blt.n	800c9de <__sfputc_r+0x16>
 800c9da:	290a      	cmp	r1, #10
 800c9dc:	d103      	bne.n	800c9e6 <__sfputc_r+0x1e>
 800c9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e2:	f000 bce7 	b.w	800d3b4 <__swbuf_r>
 800c9e6:	6813      	ldr	r3, [r2, #0]
 800c9e8:	1c58      	adds	r0, r3, #1
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	7019      	strb	r1, [r3, #0]
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <__sfputs_r>:
 800c9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	4614      	mov	r4, r2
 800c9fe:	18d5      	adds	r5, r2, r3
 800ca00:	42ac      	cmp	r4, r5
 800ca02:	d101      	bne.n	800ca08 <__sfputs_r+0x12>
 800ca04:	2000      	movs	r0, #0
 800ca06:	e007      	b.n	800ca18 <__sfputs_r+0x22>
 800ca08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0c:	463a      	mov	r2, r7
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff ffda 	bl	800c9c8 <__sfputc_r>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d1f3      	bne.n	800ca00 <__sfputs_r+0xa>
 800ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca1c <_vfiprintf_r>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	460d      	mov	r5, r1
 800ca22:	b09d      	sub	sp, #116	; 0x74
 800ca24:	4614      	mov	r4, r2
 800ca26:	4698      	mov	r8, r3
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b118      	cbz	r0, 800ca34 <_vfiprintf_r+0x18>
 800ca2c:	6983      	ldr	r3, [r0, #24]
 800ca2e:	b90b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x18>
 800ca30:	f7ff fd5a 	bl	800c4e8 <__sinit>
 800ca34:	4b89      	ldr	r3, [pc, #548]	; (800cc5c <_vfiprintf_r+0x240>)
 800ca36:	429d      	cmp	r5, r3
 800ca38:	d11b      	bne.n	800ca72 <_vfiprintf_r+0x56>
 800ca3a:	6875      	ldr	r5, [r6, #4]
 800ca3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca3e:	07d9      	lsls	r1, r3, #31
 800ca40:	d405      	bmi.n	800ca4e <_vfiprintf_r+0x32>
 800ca42:	89ab      	ldrh	r3, [r5, #12]
 800ca44:	059a      	lsls	r2, r3, #22
 800ca46:	d402      	bmi.n	800ca4e <_vfiprintf_r+0x32>
 800ca48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca4a:	f7ff febc 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800ca4e:	89ab      	ldrh	r3, [r5, #12]
 800ca50:	071b      	lsls	r3, r3, #28
 800ca52:	d501      	bpl.n	800ca58 <_vfiprintf_r+0x3c>
 800ca54:	692b      	ldr	r3, [r5, #16]
 800ca56:	b9eb      	cbnz	r3, 800ca94 <_vfiprintf_r+0x78>
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f000 fd0e 	bl	800d47c <__swsetup_r>
 800ca60:	b1c0      	cbz	r0, 800ca94 <_vfiprintf_r+0x78>
 800ca62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca64:	07dc      	lsls	r4, r3, #31
 800ca66:	d50e      	bpl.n	800ca86 <_vfiprintf_r+0x6a>
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca6c:	b01d      	add	sp, #116	; 0x74
 800ca6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca72:	4b7b      	ldr	r3, [pc, #492]	; (800cc60 <_vfiprintf_r+0x244>)
 800ca74:	429d      	cmp	r5, r3
 800ca76:	d101      	bne.n	800ca7c <_vfiprintf_r+0x60>
 800ca78:	68b5      	ldr	r5, [r6, #8]
 800ca7a:	e7df      	b.n	800ca3c <_vfiprintf_r+0x20>
 800ca7c:	4b79      	ldr	r3, [pc, #484]	; (800cc64 <_vfiprintf_r+0x248>)
 800ca7e:	429d      	cmp	r5, r3
 800ca80:	bf08      	it	eq
 800ca82:	68f5      	ldreq	r5, [r6, #12]
 800ca84:	e7da      	b.n	800ca3c <_vfiprintf_r+0x20>
 800ca86:	89ab      	ldrh	r3, [r5, #12]
 800ca88:	0598      	lsls	r0, r3, #22
 800ca8a:	d4ed      	bmi.n	800ca68 <_vfiprintf_r+0x4c>
 800ca8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca8e:	f7ff fe9b 	bl	800c7c8 <__retarget_lock_release_recursive>
 800ca92:	e7e9      	b.n	800ca68 <_vfiprintf_r+0x4c>
 800ca94:	2300      	movs	r3, #0
 800ca96:	9309      	str	r3, [sp, #36]	; 0x24
 800ca98:	2320      	movs	r3, #32
 800ca9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800caa2:	2330      	movs	r3, #48	; 0x30
 800caa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc68 <_vfiprintf_r+0x24c>
 800caa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caac:	f04f 0901 	mov.w	r9, #1
 800cab0:	4623      	mov	r3, r4
 800cab2:	469a      	mov	sl, r3
 800cab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab8:	b10a      	cbz	r2, 800cabe <_vfiprintf_r+0xa2>
 800caba:	2a25      	cmp	r2, #37	; 0x25
 800cabc:	d1f9      	bne.n	800cab2 <_vfiprintf_r+0x96>
 800cabe:	ebba 0b04 	subs.w	fp, sl, r4
 800cac2:	d00b      	beq.n	800cadc <_vfiprintf_r+0xc0>
 800cac4:	465b      	mov	r3, fp
 800cac6:	4622      	mov	r2, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	4630      	mov	r0, r6
 800cacc:	f7ff ff93 	bl	800c9f6 <__sfputs_r>
 800cad0:	3001      	adds	r0, #1
 800cad2:	f000 80aa 	beq.w	800cc2a <_vfiprintf_r+0x20e>
 800cad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad8:	445a      	add	r2, fp
 800cada:	9209      	str	r2, [sp, #36]	; 0x24
 800cadc:	f89a 3000 	ldrb.w	r3, [sl]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f000 80a2 	beq.w	800cc2a <_vfiprintf_r+0x20e>
 800cae6:	2300      	movs	r3, #0
 800cae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800caec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caf0:	f10a 0a01 	add.w	sl, sl, #1
 800caf4:	9304      	str	r3, [sp, #16]
 800caf6:	9307      	str	r3, [sp, #28]
 800caf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cafc:	931a      	str	r3, [sp, #104]	; 0x68
 800cafe:	4654      	mov	r4, sl
 800cb00:	2205      	movs	r2, #5
 800cb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb06:	4858      	ldr	r0, [pc, #352]	; (800cc68 <_vfiprintf_r+0x24c>)
 800cb08:	f7f3 fb6a 	bl	80001e0 <memchr>
 800cb0c:	9a04      	ldr	r2, [sp, #16]
 800cb0e:	b9d8      	cbnz	r0, 800cb48 <_vfiprintf_r+0x12c>
 800cb10:	06d1      	lsls	r1, r2, #27
 800cb12:	bf44      	itt	mi
 800cb14:	2320      	movmi	r3, #32
 800cb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1a:	0713      	lsls	r3, r2, #28
 800cb1c:	bf44      	itt	mi
 800cb1e:	232b      	movmi	r3, #43	; 0x2b
 800cb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb24:	f89a 3000 	ldrb.w	r3, [sl]
 800cb28:	2b2a      	cmp	r3, #42	; 0x2a
 800cb2a:	d015      	beq.n	800cb58 <_vfiprintf_r+0x13c>
 800cb2c:	9a07      	ldr	r2, [sp, #28]
 800cb2e:	4654      	mov	r4, sl
 800cb30:	2000      	movs	r0, #0
 800cb32:	f04f 0c0a 	mov.w	ip, #10
 800cb36:	4621      	mov	r1, r4
 800cb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb3c:	3b30      	subs	r3, #48	; 0x30
 800cb3e:	2b09      	cmp	r3, #9
 800cb40:	d94e      	bls.n	800cbe0 <_vfiprintf_r+0x1c4>
 800cb42:	b1b0      	cbz	r0, 800cb72 <_vfiprintf_r+0x156>
 800cb44:	9207      	str	r2, [sp, #28]
 800cb46:	e014      	b.n	800cb72 <_vfiprintf_r+0x156>
 800cb48:	eba0 0308 	sub.w	r3, r0, r8
 800cb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800cb50:	4313      	orrs	r3, r2
 800cb52:	9304      	str	r3, [sp, #16]
 800cb54:	46a2      	mov	sl, r4
 800cb56:	e7d2      	b.n	800cafe <_vfiprintf_r+0xe2>
 800cb58:	9b03      	ldr	r3, [sp, #12]
 800cb5a:	1d19      	adds	r1, r3, #4
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	9103      	str	r1, [sp, #12]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	bfbb      	ittet	lt
 800cb64:	425b      	neglt	r3, r3
 800cb66:	f042 0202 	orrlt.w	r2, r2, #2
 800cb6a:	9307      	strge	r3, [sp, #28]
 800cb6c:	9307      	strlt	r3, [sp, #28]
 800cb6e:	bfb8      	it	lt
 800cb70:	9204      	strlt	r2, [sp, #16]
 800cb72:	7823      	ldrb	r3, [r4, #0]
 800cb74:	2b2e      	cmp	r3, #46	; 0x2e
 800cb76:	d10c      	bne.n	800cb92 <_vfiprintf_r+0x176>
 800cb78:	7863      	ldrb	r3, [r4, #1]
 800cb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800cb7c:	d135      	bne.n	800cbea <_vfiprintf_r+0x1ce>
 800cb7e:	9b03      	ldr	r3, [sp, #12]
 800cb80:	1d1a      	adds	r2, r3, #4
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	9203      	str	r2, [sp, #12]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	bfb8      	it	lt
 800cb8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb8e:	3402      	adds	r4, #2
 800cb90:	9305      	str	r3, [sp, #20]
 800cb92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc78 <_vfiprintf_r+0x25c>
 800cb96:	7821      	ldrb	r1, [r4, #0]
 800cb98:	2203      	movs	r2, #3
 800cb9a:	4650      	mov	r0, sl
 800cb9c:	f7f3 fb20 	bl	80001e0 <memchr>
 800cba0:	b140      	cbz	r0, 800cbb4 <_vfiprintf_r+0x198>
 800cba2:	2340      	movs	r3, #64	; 0x40
 800cba4:	eba0 000a 	sub.w	r0, r0, sl
 800cba8:	fa03 f000 	lsl.w	r0, r3, r0
 800cbac:	9b04      	ldr	r3, [sp, #16]
 800cbae:	4303      	orrs	r3, r0
 800cbb0:	3401      	adds	r4, #1
 800cbb2:	9304      	str	r3, [sp, #16]
 800cbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb8:	482c      	ldr	r0, [pc, #176]	; (800cc6c <_vfiprintf_r+0x250>)
 800cbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbbe:	2206      	movs	r2, #6
 800cbc0:	f7f3 fb0e 	bl	80001e0 <memchr>
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d03f      	beq.n	800cc48 <_vfiprintf_r+0x22c>
 800cbc8:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <_vfiprintf_r+0x254>)
 800cbca:	bb1b      	cbnz	r3, 800cc14 <_vfiprintf_r+0x1f8>
 800cbcc:	9b03      	ldr	r3, [sp, #12]
 800cbce:	3307      	adds	r3, #7
 800cbd0:	f023 0307 	bic.w	r3, r3, #7
 800cbd4:	3308      	adds	r3, #8
 800cbd6:	9303      	str	r3, [sp, #12]
 800cbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbda:	443b      	add	r3, r7
 800cbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbde:	e767      	b.n	800cab0 <_vfiprintf_r+0x94>
 800cbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbe4:	460c      	mov	r4, r1
 800cbe6:	2001      	movs	r0, #1
 800cbe8:	e7a5      	b.n	800cb36 <_vfiprintf_r+0x11a>
 800cbea:	2300      	movs	r3, #0
 800cbec:	3401      	adds	r4, #1
 800cbee:	9305      	str	r3, [sp, #20]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f04f 0c0a 	mov.w	ip, #10
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbfc:	3a30      	subs	r2, #48	; 0x30
 800cbfe:	2a09      	cmp	r2, #9
 800cc00:	d903      	bls.n	800cc0a <_vfiprintf_r+0x1ee>
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d0c5      	beq.n	800cb92 <_vfiprintf_r+0x176>
 800cc06:	9105      	str	r1, [sp, #20]
 800cc08:	e7c3      	b.n	800cb92 <_vfiprintf_r+0x176>
 800cc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc0e:	4604      	mov	r4, r0
 800cc10:	2301      	movs	r3, #1
 800cc12:	e7f0      	b.n	800cbf6 <_vfiprintf_r+0x1da>
 800cc14:	ab03      	add	r3, sp, #12
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	462a      	mov	r2, r5
 800cc1a:	4b16      	ldr	r3, [pc, #88]	; (800cc74 <_vfiprintf_r+0x258>)
 800cc1c:	a904      	add	r1, sp, #16
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f3af 8000 	nop.w
 800cc24:	4607      	mov	r7, r0
 800cc26:	1c78      	adds	r0, r7, #1
 800cc28:	d1d6      	bne.n	800cbd8 <_vfiprintf_r+0x1bc>
 800cc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc2c:	07d9      	lsls	r1, r3, #31
 800cc2e:	d405      	bmi.n	800cc3c <_vfiprintf_r+0x220>
 800cc30:	89ab      	ldrh	r3, [r5, #12]
 800cc32:	059a      	lsls	r2, r3, #22
 800cc34:	d402      	bmi.n	800cc3c <_vfiprintf_r+0x220>
 800cc36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc38:	f7ff fdc6 	bl	800c7c8 <__retarget_lock_release_recursive>
 800cc3c:	89ab      	ldrh	r3, [r5, #12]
 800cc3e:	065b      	lsls	r3, r3, #25
 800cc40:	f53f af12 	bmi.w	800ca68 <_vfiprintf_r+0x4c>
 800cc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc46:	e711      	b.n	800ca6c <_vfiprintf_r+0x50>
 800cc48:	ab03      	add	r3, sp, #12
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4b09      	ldr	r3, [pc, #36]	; (800cc74 <_vfiprintf_r+0x258>)
 800cc50:	a904      	add	r1, sp, #16
 800cc52:	4630      	mov	r0, r6
 800cc54:	f000 f880 	bl	800cd58 <_printf_i>
 800cc58:	e7e4      	b.n	800cc24 <_vfiprintf_r+0x208>
 800cc5a:	bf00      	nop
 800cc5c:	08011690 	.word	0x08011690
 800cc60:	080116b0 	.word	0x080116b0
 800cc64:	08011670 	.word	0x08011670
 800cc68:	080116d4 	.word	0x080116d4
 800cc6c:	080116de 	.word	0x080116de
 800cc70:	00000000 	.word	0x00000000
 800cc74:	0800c9f7 	.word	0x0800c9f7
 800cc78:	080116da 	.word	0x080116da

0800cc7c <_printf_common>:
 800cc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc80:	4616      	mov	r6, r2
 800cc82:	4699      	mov	r9, r3
 800cc84:	688a      	ldr	r2, [r1, #8]
 800cc86:	690b      	ldr	r3, [r1, #16]
 800cc88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	bfb8      	it	lt
 800cc90:	4613      	movlt	r3, r2
 800cc92:	6033      	str	r3, [r6, #0]
 800cc94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc98:	4607      	mov	r7, r0
 800cc9a:	460c      	mov	r4, r1
 800cc9c:	b10a      	cbz	r2, 800cca2 <_printf_common+0x26>
 800cc9e:	3301      	adds	r3, #1
 800cca0:	6033      	str	r3, [r6, #0]
 800cca2:	6823      	ldr	r3, [r4, #0]
 800cca4:	0699      	lsls	r1, r3, #26
 800cca6:	bf42      	ittt	mi
 800cca8:	6833      	ldrmi	r3, [r6, #0]
 800ccaa:	3302      	addmi	r3, #2
 800ccac:	6033      	strmi	r3, [r6, #0]
 800ccae:	6825      	ldr	r5, [r4, #0]
 800ccb0:	f015 0506 	ands.w	r5, r5, #6
 800ccb4:	d106      	bne.n	800ccc4 <_printf_common+0x48>
 800ccb6:	f104 0a19 	add.w	sl, r4, #25
 800ccba:	68e3      	ldr	r3, [r4, #12]
 800ccbc:	6832      	ldr	r2, [r6, #0]
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	42ab      	cmp	r3, r5
 800ccc2:	dc26      	bgt.n	800cd12 <_printf_common+0x96>
 800ccc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ccc8:	1e13      	subs	r3, r2, #0
 800ccca:	6822      	ldr	r2, [r4, #0]
 800cccc:	bf18      	it	ne
 800ccce:	2301      	movne	r3, #1
 800ccd0:	0692      	lsls	r2, r2, #26
 800ccd2:	d42b      	bmi.n	800cd2c <_printf_common+0xb0>
 800ccd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccd8:	4649      	mov	r1, r9
 800ccda:	4638      	mov	r0, r7
 800ccdc:	47c0      	blx	r8
 800ccde:	3001      	adds	r0, #1
 800cce0:	d01e      	beq.n	800cd20 <_printf_common+0xa4>
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	68e5      	ldr	r5, [r4, #12]
 800cce6:	6832      	ldr	r2, [r6, #0]
 800cce8:	f003 0306 	and.w	r3, r3, #6
 800ccec:	2b04      	cmp	r3, #4
 800ccee:	bf08      	it	eq
 800ccf0:	1aad      	subeq	r5, r5, r2
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	6922      	ldr	r2, [r4, #16]
 800ccf6:	bf0c      	ite	eq
 800ccf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccfc:	2500      	movne	r5, #0
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	bfc4      	itt	gt
 800cd02:	1a9b      	subgt	r3, r3, r2
 800cd04:	18ed      	addgt	r5, r5, r3
 800cd06:	2600      	movs	r6, #0
 800cd08:	341a      	adds	r4, #26
 800cd0a:	42b5      	cmp	r5, r6
 800cd0c:	d11a      	bne.n	800cd44 <_printf_common+0xc8>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e008      	b.n	800cd24 <_printf_common+0xa8>
 800cd12:	2301      	movs	r3, #1
 800cd14:	4652      	mov	r2, sl
 800cd16:	4649      	mov	r1, r9
 800cd18:	4638      	mov	r0, r7
 800cd1a:	47c0      	blx	r8
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d103      	bne.n	800cd28 <_printf_common+0xac>
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	3501      	adds	r5, #1
 800cd2a:	e7c6      	b.n	800ccba <_printf_common+0x3e>
 800cd2c:	18e1      	adds	r1, r4, r3
 800cd2e:	1c5a      	adds	r2, r3, #1
 800cd30:	2030      	movs	r0, #48	; 0x30
 800cd32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd36:	4422      	add	r2, r4
 800cd38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd40:	3302      	adds	r3, #2
 800cd42:	e7c7      	b.n	800ccd4 <_printf_common+0x58>
 800cd44:	2301      	movs	r3, #1
 800cd46:	4622      	mov	r2, r4
 800cd48:	4649      	mov	r1, r9
 800cd4a:	4638      	mov	r0, r7
 800cd4c:	47c0      	blx	r8
 800cd4e:	3001      	adds	r0, #1
 800cd50:	d0e6      	beq.n	800cd20 <_printf_common+0xa4>
 800cd52:	3601      	adds	r6, #1
 800cd54:	e7d9      	b.n	800cd0a <_printf_common+0x8e>
	...

0800cd58 <_printf_i>:
 800cd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd5c:	7e0f      	ldrb	r7, [r1, #24]
 800cd5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd60:	2f78      	cmp	r7, #120	; 0x78
 800cd62:	4691      	mov	r9, r2
 800cd64:	4680      	mov	r8, r0
 800cd66:	460c      	mov	r4, r1
 800cd68:	469a      	mov	sl, r3
 800cd6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd6e:	d807      	bhi.n	800cd80 <_printf_i+0x28>
 800cd70:	2f62      	cmp	r7, #98	; 0x62
 800cd72:	d80a      	bhi.n	800cd8a <_printf_i+0x32>
 800cd74:	2f00      	cmp	r7, #0
 800cd76:	f000 80d8 	beq.w	800cf2a <_printf_i+0x1d2>
 800cd7a:	2f58      	cmp	r7, #88	; 0x58
 800cd7c:	f000 80a3 	beq.w	800cec6 <_printf_i+0x16e>
 800cd80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd88:	e03a      	b.n	800ce00 <_printf_i+0xa8>
 800cd8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd8e:	2b15      	cmp	r3, #21
 800cd90:	d8f6      	bhi.n	800cd80 <_printf_i+0x28>
 800cd92:	a101      	add	r1, pc, #4	; (adr r1, 800cd98 <_printf_i+0x40>)
 800cd94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd98:	0800cdf1 	.word	0x0800cdf1
 800cd9c:	0800ce05 	.word	0x0800ce05
 800cda0:	0800cd81 	.word	0x0800cd81
 800cda4:	0800cd81 	.word	0x0800cd81
 800cda8:	0800cd81 	.word	0x0800cd81
 800cdac:	0800cd81 	.word	0x0800cd81
 800cdb0:	0800ce05 	.word	0x0800ce05
 800cdb4:	0800cd81 	.word	0x0800cd81
 800cdb8:	0800cd81 	.word	0x0800cd81
 800cdbc:	0800cd81 	.word	0x0800cd81
 800cdc0:	0800cd81 	.word	0x0800cd81
 800cdc4:	0800cf11 	.word	0x0800cf11
 800cdc8:	0800ce35 	.word	0x0800ce35
 800cdcc:	0800cef3 	.word	0x0800cef3
 800cdd0:	0800cd81 	.word	0x0800cd81
 800cdd4:	0800cd81 	.word	0x0800cd81
 800cdd8:	0800cf33 	.word	0x0800cf33
 800cddc:	0800cd81 	.word	0x0800cd81
 800cde0:	0800ce35 	.word	0x0800ce35
 800cde4:	0800cd81 	.word	0x0800cd81
 800cde8:	0800cd81 	.word	0x0800cd81
 800cdec:	0800cefb 	.word	0x0800cefb
 800cdf0:	682b      	ldr	r3, [r5, #0]
 800cdf2:	1d1a      	adds	r2, r3, #4
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	602a      	str	r2, [r5, #0]
 800cdf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce00:	2301      	movs	r3, #1
 800ce02:	e0a3      	b.n	800cf4c <_printf_i+0x1f4>
 800ce04:	6820      	ldr	r0, [r4, #0]
 800ce06:	6829      	ldr	r1, [r5, #0]
 800ce08:	0606      	lsls	r6, r0, #24
 800ce0a:	f101 0304 	add.w	r3, r1, #4
 800ce0e:	d50a      	bpl.n	800ce26 <_printf_i+0xce>
 800ce10:	680e      	ldr	r6, [r1, #0]
 800ce12:	602b      	str	r3, [r5, #0]
 800ce14:	2e00      	cmp	r6, #0
 800ce16:	da03      	bge.n	800ce20 <_printf_i+0xc8>
 800ce18:	232d      	movs	r3, #45	; 0x2d
 800ce1a:	4276      	negs	r6, r6
 800ce1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce20:	485e      	ldr	r0, [pc, #376]	; (800cf9c <_printf_i+0x244>)
 800ce22:	230a      	movs	r3, #10
 800ce24:	e019      	b.n	800ce5a <_printf_i+0x102>
 800ce26:	680e      	ldr	r6, [r1, #0]
 800ce28:	602b      	str	r3, [r5, #0]
 800ce2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ce2e:	bf18      	it	ne
 800ce30:	b236      	sxthne	r6, r6
 800ce32:	e7ef      	b.n	800ce14 <_printf_i+0xbc>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	6820      	ldr	r0, [r4, #0]
 800ce38:	1d19      	adds	r1, r3, #4
 800ce3a:	6029      	str	r1, [r5, #0]
 800ce3c:	0601      	lsls	r1, r0, #24
 800ce3e:	d501      	bpl.n	800ce44 <_printf_i+0xec>
 800ce40:	681e      	ldr	r6, [r3, #0]
 800ce42:	e002      	b.n	800ce4a <_printf_i+0xf2>
 800ce44:	0646      	lsls	r6, r0, #25
 800ce46:	d5fb      	bpl.n	800ce40 <_printf_i+0xe8>
 800ce48:	881e      	ldrh	r6, [r3, #0]
 800ce4a:	4854      	ldr	r0, [pc, #336]	; (800cf9c <_printf_i+0x244>)
 800ce4c:	2f6f      	cmp	r7, #111	; 0x6f
 800ce4e:	bf0c      	ite	eq
 800ce50:	2308      	moveq	r3, #8
 800ce52:	230a      	movne	r3, #10
 800ce54:	2100      	movs	r1, #0
 800ce56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce5a:	6865      	ldr	r5, [r4, #4]
 800ce5c:	60a5      	str	r5, [r4, #8]
 800ce5e:	2d00      	cmp	r5, #0
 800ce60:	bfa2      	ittt	ge
 800ce62:	6821      	ldrge	r1, [r4, #0]
 800ce64:	f021 0104 	bicge.w	r1, r1, #4
 800ce68:	6021      	strge	r1, [r4, #0]
 800ce6a:	b90e      	cbnz	r6, 800ce70 <_printf_i+0x118>
 800ce6c:	2d00      	cmp	r5, #0
 800ce6e:	d04d      	beq.n	800cf0c <_printf_i+0x1b4>
 800ce70:	4615      	mov	r5, r2
 800ce72:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce76:	fb03 6711 	mls	r7, r3, r1, r6
 800ce7a:	5dc7      	ldrb	r7, [r0, r7]
 800ce7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce80:	4637      	mov	r7, r6
 800ce82:	42bb      	cmp	r3, r7
 800ce84:	460e      	mov	r6, r1
 800ce86:	d9f4      	bls.n	800ce72 <_printf_i+0x11a>
 800ce88:	2b08      	cmp	r3, #8
 800ce8a:	d10b      	bne.n	800cea4 <_printf_i+0x14c>
 800ce8c:	6823      	ldr	r3, [r4, #0]
 800ce8e:	07de      	lsls	r6, r3, #31
 800ce90:	d508      	bpl.n	800cea4 <_printf_i+0x14c>
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	6861      	ldr	r1, [r4, #4]
 800ce96:	4299      	cmp	r1, r3
 800ce98:	bfde      	ittt	le
 800ce9a:	2330      	movle	r3, #48	; 0x30
 800ce9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cea0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cea4:	1b52      	subs	r2, r2, r5
 800cea6:	6122      	str	r2, [r4, #16]
 800cea8:	f8cd a000 	str.w	sl, [sp]
 800ceac:	464b      	mov	r3, r9
 800ceae:	aa03      	add	r2, sp, #12
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	4640      	mov	r0, r8
 800ceb4:	f7ff fee2 	bl	800cc7c <_printf_common>
 800ceb8:	3001      	adds	r0, #1
 800ceba:	d14c      	bne.n	800cf56 <_printf_i+0x1fe>
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cec0:	b004      	add	sp, #16
 800cec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec6:	4835      	ldr	r0, [pc, #212]	; (800cf9c <_printf_i+0x244>)
 800cec8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cecc:	6829      	ldr	r1, [r5, #0]
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	f851 6b04 	ldr.w	r6, [r1], #4
 800ced4:	6029      	str	r1, [r5, #0]
 800ced6:	061d      	lsls	r5, r3, #24
 800ced8:	d514      	bpl.n	800cf04 <_printf_i+0x1ac>
 800ceda:	07df      	lsls	r7, r3, #31
 800cedc:	bf44      	itt	mi
 800cede:	f043 0320 	orrmi.w	r3, r3, #32
 800cee2:	6023      	strmi	r3, [r4, #0]
 800cee4:	b91e      	cbnz	r6, 800ceee <_printf_i+0x196>
 800cee6:	6823      	ldr	r3, [r4, #0]
 800cee8:	f023 0320 	bic.w	r3, r3, #32
 800ceec:	6023      	str	r3, [r4, #0]
 800ceee:	2310      	movs	r3, #16
 800cef0:	e7b0      	b.n	800ce54 <_printf_i+0xfc>
 800cef2:	6823      	ldr	r3, [r4, #0]
 800cef4:	f043 0320 	orr.w	r3, r3, #32
 800cef8:	6023      	str	r3, [r4, #0]
 800cefa:	2378      	movs	r3, #120	; 0x78
 800cefc:	4828      	ldr	r0, [pc, #160]	; (800cfa0 <_printf_i+0x248>)
 800cefe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf02:	e7e3      	b.n	800cecc <_printf_i+0x174>
 800cf04:	0659      	lsls	r1, r3, #25
 800cf06:	bf48      	it	mi
 800cf08:	b2b6      	uxthmi	r6, r6
 800cf0a:	e7e6      	b.n	800ceda <_printf_i+0x182>
 800cf0c:	4615      	mov	r5, r2
 800cf0e:	e7bb      	b.n	800ce88 <_printf_i+0x130>
 800cf10:	682b      	ldr	r3, [r5, #0]
 800cf12:	6826      	ldr	r6, [r4, #0]
 800cf14:	6961      	ldr	r1, [r4, #20]
 800cf16:	1d18      	adds	r0, r3, #4
 800cf18:	6028      	str	r0, [r5, #0]
 800cf1a:	0635      	lsls	r5, r6, #24
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	d501      	bpl.n	800cf24 <_printf_i+0x1cc>
 800cf20:	6019      	str	r1, [r3, #0]
 800cf22:	e002      	b.n	800cf2a <_printf_i+0x1d2>
 800cf24:	0670      	lsls	r0, r6, #25
 800cf26:	d5fb      	bpl.n	800cf20 <_printf_i+0x1c8>
 800cf28:	8019      	strh	r1, [r3, #0]
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	6123      	str	r3, [r4, #16]
 800cf2e:	4615      	mov	r5, r2
 800cf30:	e7ba      	b.n	800cea8 <_printf_i+0x150>
 800cf32:	682b      	ldr	r3, [r5, #0]
 800cf34:	1d1a      	adds	r2, r3, #4
 800cf36:	602a      	str	r2, [r5, #0]
 800cf38:	681d      	ldr	r5, [r3, #0]
 800cf3a:	6862      	ldr	r2, [r4, #4]
 800cf3c:	2100      	movs	r1, #0
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f7f3 f94e 	bl	80001e0 <memchr>
 800cf44:	b108      	cbz	r0, 800cf4a <_printf_i+0x1f2>
 800cf46:	1b40      	subs	r0, r0, r5
 800cf48:	6060      	str	r0, [r4, #4]
 800cf4a:	6863      	ldr	r3, [r4, #4]
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	2300      	movs	r3, #0
 800cf50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf54:	e7a8      	b.n	800cea8 <_printf_i+0x150>
 800cf56:	6923      	ldr	r3, [r4, #16]
 800cf58:	462a      	mov	r2, r5
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	47d0      	blx	sl
 800cf60:	3001      	adds	r0, #1
 800cf62:	d0ab      	beq.n	800cebc <_printf_i+0x164>
 800cf64:	6823      	ldr	r3, [r4, #0]
 800cf66:	079b      	lsls	r3, r3, #30
 800cf68:	d413      	bmi.n	800cf92 <_printf_i+0x23a>
 800cf6a:	68e0      	ldr	r0, [r4, #12]
 800cf6c:	9b03      	ldr	r3, [sp, #12]
 800cf6e:	4298      	cmp	r0, r3
 800cf70:	bfb8      	it	lt
 800cf72:	4618      	movlt	r0, r3
 800cf74:	e7a4      	b.n	800cec0 <_printf_i+0x168>
 800cf76:	2301      	movs	r3, #1
 800cf78:	4632      	mov	r2, r6
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	4640      	mov	r0, r8
 800cf7e:	47d0      	blx	sl
 800cf80:	3001      	adds	r0, #1
 800cf82:	d09b      	beq.n	800cebc <_printf_i+0x164>
 800cf84:	3501      	adds	r5, #1
 800cf86:	68e3      	ldr	r3, [r4, #12]
 800cf88:	9903      	ldr	r1, [sp, #12]
 800cf8a:	1a5b      	subs	r3, r3, r1
 800cf8c:	42ab      	cmp	r3, r5
 800cf8e:	dcf2      	bgt.n	800cf76 <_printf_i+0x21e>
 800cf90:	e7eb      	b.n	800cf6a <_printf_i+0x212>
 800cf92:	2500      	movs	r5, #0
 800cf94:	f104 0619 	add.w	r6, r4, #25
 800cf98:	e7f5      	b.n	800cf86 <_printf_i+0x22e>
 800cf9a:	bf00      	nop
 800cf9c:	080116e5 	.word	0x080116e5
 800cfa0:	080116f6 	.word	0x080116f6

0800cfa4 <iprintf>:
 800cfa4:	b40f      	push	{r0, r1, r2, r3}
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <iprintf+0x2c>)
 800cfa8:	b513      	push	{r0, r1, r4, lr}
 800cfaa:	681c      	ldr	r4, [r3, #0]
 800cfac:	b124      	cbz	r4, 800cfb8 <iprintf+0x14>
 800cfae:	69a3      	ldr	r3, [r4, #24]
 800cfb0:	b913      	cbnz	r3, 800cfb8 <iprintf+0x14>
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f7ff fa98 	bl	800c4e8 <__sinit>
 800cfb8:	ab05      	add	r3, sp, #20
 800cfba:	9a04      	ldr	r2, [sp, #16]
 800cfbc:	68a1      	ldr	r1, [r4, #8]
 800cfbe:	9301      	str	r3, [sp, #4]
 800cfc0:	4620      	mov	r0, r4
 800cfc2:	f7ff fd2b 	bl	800ca1c <_vfiprintf_r>
 800cfc6:	b002      	add	sp, #8
 800cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfcc:	b004      	add	sp, #16
 800cfce:	4770      	bx	lr
 800cfd0:	200000b8 	.word	0x200000b8

0800cfd4 <cleanup_glue>:
 800cfd4:	b538      	push	{r3, r4, r5, lr}
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	6809      	ldr	r1, [r1, #0]
 800cfda:	4605      	mov	r5, r0
 800cfdc:	b109      	cbz	r1, 800cfe2 <cleanup_glue+0xe>
 800cfde:	f7ff fff9 	bl	800cfd4 <cleanup_glue>
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	4628      	mov	r0, r5
 800cfe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfea:	f7ff bc0d 	b.w	800c808 <_free_r>
	...

0800cff0 <_reclaim_reent>:
 800cff0:	4b2c      	ldr	r3, [pc, #176]	; (800d0a4 <_reclaim_reent+0xb4>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4283      	cmp	r3, r0
 800cff6:	b570      	push	{r4, r5, r6, lr}
 800cff8:	4604      	mov	r4, r0
 800cffa:	d051      	beq.n	800d0a0 <_reclaim_reent+0xb0>
 800cffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cffe:	b143      	cbz	r3, 800d012 <_reclaim_reent+0x22>
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d14a      	bne.n	800d09c <_reclaim_reent+0xac>
 800d006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d008:	6819      	ldr	r1, [r3, #0]
 800d00a:	b111      	cbz	r1, 800d012 <_reclaim_reent+0x22>
 800d00c:	4620      	mov	r0, r4
 800d00e:	f7ff fbfb 	bl	800c808 <_free_r>
 800d012:	6961      	ldr	r1, [r4, #20]
 800d014:	b111      	cbz	r1, 800d01c <_reclaim_reent+0x2c>
 800d016:	4620      	mov	r0, r4
 800d018:	f7ff fbf6 	bl	800c808 <_free_r>
 800d01c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d01e:	b111      	cbz	r1, 800d026 <_reclaim_reent+0x36>
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fbf1 	bl	800c808 <_free_r>
 800d026:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d028:	b111      	cbz	r1, 800d030 <_reclaim_reent+0x40>
 800d02a:	4620      	mov	r0, r4
 800d02c:	f7ff fbec 	bl	800c808 <_free_r>
 800d030:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d032:	b111      	cbz	r1, 800d03a <_reclaim_reent+0x4a>
 800d034:	4620      	mov	r0, r4
 800d036:	f7ff fbe7 	bl	800c808 <_free_r>
 800d03a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d03c:	b111      	cbz	r1, 800d044 <_reclaim_reent+0x54>
 800d03e:	4620      	mov	r0, r4
 800d040:	f7ff fbe2 	bl	800c808 <_free_r>
 800d044:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d046:	b111      	cbz	r1, 800d04e <_reclaim_reent+0x5e>
 800d048:	4620      	mov	r0, r4
 800d04a:	f7ff fbdd 	bl	800c808 <_free_r>
 800d04e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d050:	b111      	cbz	r1, 800d058 <_reclaim_reent+0x68>
 800d052:	4620      	mov	r0, r4
 800d054:	f7ff fbd8 	bl	800c808 <_free_r>
 800d058:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d05a:	b111      	cbz	r1, 800d062 <_reclaim_reent+0x72>
 800d05c:	4620      	mov	r0, r4
 800d05e:	f7ff fbd3 	bl	800c808 <_free_r>
 800d062:	69a3      	ldr	r3, [r4, #24]
 800d064:	b1e3      	cbz	r3, 800d0a0 <_reclaim_reent+0xb0>
 800d066:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d068:	4620      	mov	r0, r4
 800d06a:	4798      	blx	r3
 800d06c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d06e:	b1b9      	cbz	r1, 800d0a0 <_reclaim_reent+0xb0>
 800d070:	4620      	mov	r0, r4
 800d072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d076:	f7ff bfad 	b.w	800cfd4 <cleanup_glue>
 800d07a:	5949      	ldr	r1, [r1, r5]
 800d07c:	b941      	cbnz	r1, 800d090 <_reclaim_reent+0xa0>
 800d07e:	3504      	adds	r5, #4
 800d080:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d082:	2d80      	cmp	r5, #128	; 0x80
 800d084:	68d9      	ldr	r1, [r3, #12]
 800d086:	d1f8      	bne.n	800d07a <_reclaim_reent+0x8a>
 800d088:	4620      	mov	r0, r4
 800d08a:	f7ff fbbd 	bl	800c808 <_free_r>
 800d08e:	e7ba      	b.n	800d006 <_reclaim_reent+0x16>
 800d090:	680e      	ldr	r6, [r1, #0]
 800d092:	4620      	mov	r0, r4
 800d094:	f7ff fbb8 	bl	800c808 <_free_r>
 800d098:	4631      	mov	r1, r6
 800d09a:	e7ef      	b.n	800d07c <_reclaim_reent+0x8c>
 800d09c:	2500      	movs	r5, #0
 800d09e:	e7ef      	b.n	800d080 <_reclaim_reent+0x90>
 800d0a0:	bd70      	pop	{r4, r5, r6, pc}
 800d0a2:	bf00      	nop
 800d0a4:	200000b8 	.word	0x200000b8

0800d0a8 <_sbrk_r>:
 800d0a8:	b538      	push	{r3, r4, r5, lr}
 800d0aa:	4d06      	ldr	r5, [pc, #24]	; (800d0c4 <_sbrk_r+0x1c>)
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4604      	mov	r4, r0
 800d0b0:	4608      	mov	r0, r1
 800d0b2:	602b      	str	r3, [r5, #0]
 800d0b4:	f7f7 fb66 	bl	8004784 <_sbrk>
 800d0b8:	1c43      	adds	r3, r0, #1
 800d0ba:	d102      	bne.n	800d0c2 <_sbrk_r+0x1a>
 800d0bc:	682b      	ldr	r3, [r5, #0]
 800d0be:	b103      	cbz	r3, 800d0c2 <_sbrk_r+0x1a>
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	bd38      	pop	{r3, r4, r5, pc}
 800d0c4:	20007298 	.word	0x20007298

0800d0c8 <siprintf>:
 800d0c8:	b40e      	push	{r1, r2, r3}
 800d0ca:	b500      	push	{lr}
 800d0cc:	b09c      	sub	sp, #112	; 0x70
 800d0ce:	ab1d      	add	r3, sp, #116	; 0x74
 800d0d0:	9002      	str	r0, [sp, #8]
 800d0d2:	9006      	str	r0, [sp, #24]
 800d0d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0d8:	4809      	ldr	r0, [pc, #36]	; (800d100 <siprintf+0x38>)
 800d0da:	9107      	str	r1, [sp, #28]
 800d0dc:	9104      	str	r1, [sp, #16]
 800d0de:	4909      	ldr	r1, [pc, #36]	; (800d104 <siprintf+0x3c>)
 800d0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0e4:	9105      	str	r1, [sp, #20]
 800d0e6:	6800      	ldr	r0, [r0, #0]
 800d0e8:	9301      	str	r3, [sp, #4]
 800d0ea:	a902      	add	r1, sp, #8
 800d0ec:	f000 fc2e 	bl	800d94c <_svfiprintf_r>
 800d0f0:	9b02      	ldr	r3, [sp, #8]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	701a      	strb	r2, [r3, #0]
 800d0f6:	b01c      	add	sp, #112	; 0x70
 800d0f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0fc:	b003      	add	sp, #12
 800d0fe:	4770      	bx	lr
 800d100:	200000b8 	.word	0x200000b8
 800d104:	ffff0208 	.word	0xffff0208

0800d108 <__sread>:
 800d108:	b510      	push	{r4, lr}
 800d10a:	460c      	mov	r4, r1
 800d10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d110:	f000 fd1c 	bl	800db4c <_read_r>
 800d114:	2800      	cmp	r0, #0
 800d116:	bfab      	itete	ge
 800d118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d11a:	89a3      	ldrhlt	r3, [r4, #12]
 800d11c:	181b      	addge	r3, r3, r0
 800d11e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d122:	bfac      	ite	ge
 800d124:	6563      	strge	r3, [r4, #84]	; 0x54
 800d126:	81a3      	strhlt	r3, [r4, #12]
 800d128:	bd10      	pop	{r4, pc}

0800d12a <__swrite>:
 800d12a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d12e:	461f      	mov	r7, r3
 800d130:	898b      	ldrh	r3, [r1, #12]
 800d132:	05db      	lsls	r3, r3, #23
 800d134:	4605      	mov	r5, r0
 800d136:	460c      	mov	r4, r1
 800d138:	4616      	mov	r6, r2
 800d13a:	d505      	bpl.n	800d148 <__swrite+0x1e>
 800d13c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d140:	2302      	movs	r3, #2
 800d142:	2200      	movs	r2, #0
 800d144:	f000 fada 	bl	800d6fc <_lseek_r>
 800d148:	89a3      	ldrh	r3, [r4, #12]
 800d14a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d14e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	4632      	mov	r2, r6
 800d156:	463b      	mov	r3, r7
 800d158:	4628      	mov	r0, r5
 800d15a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d15e:	f000 b97b 	b.w	800d458 <_write_r>

0800d162 <__sseek>:
 800d162:	b510      	push	{r4, lr}
 800d164:	460c      	mov	r4, r1
 800d166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d16a:	f000 fac7 	bl	800d6fc <_lseek_r>
 800d16e:	1c43      	adds	r3, r0, #1
 800d170:	89a3      	ldrh	r3, [r4, #12]
 800d172:	bf15      	itete	ne
 800d174:	6560      	strne	r0, [r4, #84]	; 0x54
 800d176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d17a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d17e:	81a3      	strheq	r3, [r4, #12]
 800d180:	bf18      	it	ne
 800d182:	81a3      	strhne	r3, [r4, #12]
 800d184:	bd10      	pop	{r4, pc}

0800d186 <__sclose>:
 800d186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d18a:	f000 b9e5 	b.w	800d558 <_close_r>

0800d18e <strcat>:
 800d18e:	b510      	push	{r4, lr}
 800d190:	4602      	mov	r2, r0
 800d192:	7814      	ldrb	r4, [r2, #0]
 800d194:	4613      	mov	r3, r2
 800d196:	3201      	adds	r2, #1
 800d198:	2c00      	cmp	r4, #0
 800d19a:	d1fa      	bne.n	800d192 <strcat+0x4>
 800d19c:	3b01      	subs	r3, #1
 800d19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d1f9      	bne.n	800d19e <strcat+0x10>
 800d1aa:	bd10      	pop	{r4, pc}

0800d1ac <strchr>:
 800d1ac:	b2c9      	uxtb	r1, r1
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1b4:	b11a      	cbz	r2, 800d1be <strchr+0x12>
 800d1b6:	428a      	cmp	r2, r1
 800d1b8:	d1f9      	bne.n	800d1ae <strchr+0x2>
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	4770      	bx	lr
 800d1be:	2900      	cmp	r1, #0
 800d1c0:	bf18      	it	ne
 800d1c2:	2300      	movne	r3, #0
 800d1c4:	e7f9      	b.n	800d1ba <strchr+0xe>

0800d1c6 <strcpy>:
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1cc:	f803 2b01 	strb.w	r2, [r3], #1
 800d1d0:	2a00      	cmp	r2, #0
 800d1d2:	d1f9      	bne.n	800d1c8 <strcpy+0x2>
 800d1d4:	4770      	bx	lr

0800d1d6 <strncpy>:
 800d1d6:	b510      	push	{r4, lr}
 800d1d8:	3901      	subs	r1, #1
 800d1da:	4603      	mov	r3, r0
 800d1dc:	b132      	cbz	r2, 800d1ec <strncpy+0x16>
 800d1de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d1e2:	f803 4b01 	strb.w	r4, [r3], #1
 800d1e6:	3a01      	subs	r2, #1
 800d1e8:	2c00      	cmp	r4, #0
 800d1ea:	d1f7      	bne.n	800d1dc <strncpy+0x6>
 800d1ec:	441a      	add	r2, r3
 800d1ee:	2100      	movs	r1, #0
 800d1f0:	4293      	cmp	r3, r2
 800d1f2:	d100      	bne.n	800d1f6 <strncpy+0x20>
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1fa:	e7f9      	b.n	800d1f0 <strncpy+0x1a>

0800d1fc <strstr>:
 800d1fc:	780a      	ldrb	r2, [r1, #0]
 800d1fe:	b570      	push	{r4, r5, r6, lr}
 800d200:	b96a      	cbnz	r2, 800d21e <strstr+0x22>
 800d202:	bd70      	pop	{r4, r5, r6, pc}
 800d204:	429a      	cmp	r2, r3
 800d206:	d109      	bne.n	800d21c <strstr+0x20>
 800d208:	460c      	mov	r4, r1
 800d20a:	4605      	mov	r5, r0
 800d20c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d210:	2b00      	cmp	r3, #0
 800d212:	d0f6      	beq.n	800d202 <strstr+0x6>
 800d214:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d218:	429e      	cmp	r6, r3
 800d21a:	d0f7      	beq.n	800d20c <strstr+0x10>
 800d21c:	3001      	adds	r0, #1
 800d21e:	7803      	ldrb	r3, [r0, #0]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d1ef      	bne.n	800d204 <strstr+0x8>
 800d224:	4618      	mov	r0, r3
 800d226:	e7ec      	b.n	800d202 <strstr+0x6>

0800d228 <_strtol_l.constprop.0>:
 800d228:	2b01      	cmp	r3, #1
 800d22a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d22e:	d001      	beq.n	800d234 <_strtol_l.constprop.0+0xc>
 800d230:	2b24      	cmp	r3, #36	; 0x24
 800d232:	d906      	bls.n	800d242 <_strtol_l.constprop.0+0x1a>
 800d234:	f7ff f8fa 	bl	800c42c <__errno>
 800d238:	2316      	movs	r3, #22
 800d23a:	6003      	str	r3, [r0, #0]
 800d23c:	2000      	movs	r0, #0
 800d23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d242:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d328 <_strtol_l.constprop.0+0x100>
 800d246:	460d      	mov	r5, r1
 800d248:	462e      	mov	r6, r5
 800d24a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d24e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d252:	f017 0708 	ands.w	r7, r7, #8
 800d256:	d1f7      	bne.n	800d248 <_strtol_l.constprop.0+0x20>
 800d258:	2c2d      	cmp	r4, #45	; 0x2d
 800d25a:	d132      	bne.n	800d2c2 <_strtol_l.constprop.0+0x9a>
 800d25c:	782c      	ldrb	r4, [r5, #0]
 800d25e:	2701      	movs	r7, #1
 800d260:	1cb5      	adds	r5, r6, #2
 800d262:	2b00      	cmp	r3, #0
 800d264:	d05b      	beq.n	800d31e <_strtol_l.constprop.0+0xf6>
 800d266:	2b10      	cmp	r3, #16
 800d268:	d109      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d26a:	2c30      	cmp	r4, #48	; 0x30
 800d26c:	d107      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d26e:	782c      	ldrb	r4, [r5, #0]
 800d270:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d274:	2c58      	cmp	r4, #88	; 0x58
 800d276:	d14d      	bne.n	800d314 <_strtol_l.constprop.0+0xec>
 800d278:	786c      	ldrb	r4, [r5, #1]
 800d27a:	2310      	movs	r3, #16
 800d27c:	3502      	adds	r5, #2
 800d27e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d282:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d286:	f04f 0c00 	mov.w	ip, #0
 800d28a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d28e:	4666      	mov	r6, ip
 800d290:	fb03 8a19 	mls	sl, r3, r9, r8
 800d294:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d298:	f1be 0f09 	cmp.w	lr, #9
 800d29c:	d816      	bhi.n	800d2cc <_strtol_l.constprop.0+0xa4>
 800d29e:	4674      	mov	r4, lr
 800d2a0:	42a3      	cmp	r3, r4
 800d2a2:	dd24      	ble.n	800d2ee <_strtol_l.constprop.0+0xc6>
 800d2a4:	f1bc 0f00 	cmp.w	ip, #0
 800d2a8:	db1e      	blt.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2aa:	45b1      	cmp	r9, r6
 800d2ac:	d31c      	bcc.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2ae:	d101      	bne.n	800d2b4 <_strtol_l.constprop.0+0x8c>
 800d2b0:	45a2      	cmp	sl, r4
 800d2b2:	db19      	blt.n	800d2e8 <_strtol_l.constprop.0+0xc0>
 800d2b4:	fb06 4603 	mla	r6, r6, r3, r4
 800d2b8:	f04f 0c01 	mov.w	ip, #1
 800d2bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d2c0:	e7e8      	b.n	800d294 <_strtol_l.constprop.0+0x6c>
 800d2c2:	2c2b      	cmp	r4, #43	; 0x2b
 800d2c4:	bf04      	itt	eq
 800d2c6:	782c      	ldrbeq	r4, [r5, #0]
 800d2c8:	1cb5      	addeq	r5, r6, #2
 800d2ca:	e7ca      	b.n	800d262 <_strtol_l.constprop.0+0x3a>
 800d2cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d2d0:	f1be 0f19 	cmp.w	lr, #25
 800d2d4:	d801      	bhi.n	800d2da <_strtol_l.constprop.0+0xb2>
 800d2d6:	3c37      	subs	r4, #55	; 0x37
 800d2d8:	e7e2      	b.n	800d2a0 <_strtol_l.constprop.0+0x78>
 800d2da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d2de:	f1be 0f19 	cmp.w	lr, #25
 800d2e2:	d804      	bhi.n	800d2ee <_strtol_l.constprop.0+0xc6>
 800d2e4:	3c57      	subs	r4, #87	; 0x57
 800d2e6:	e7db      	b.n	800d2a0 <_strtol_l.constprop.0+0x78>
 800d2e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800d2ec:	e7e6      	b.n	800d2bc <_strtol_l.constprop.0+0x94>
 800d2ee:	f1bc 0f00 	cmp.w	ip, #0
 800d2f2:	da05      	bge.n	800d300 <_strtol_l.constprop.0+0xd8>
 800d2f4:	2322      	movs	r3, #34	; 0x22
 800d2f6:	6003      	str	r3, [r0, #0]
 800d2f8:	4646      	mov	r6, r8
 800d2fa:	b942      	cbnz	r2, 800d30e <_strtol_l.constprop.0+0xe6>
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	e79e      	b.n	800d23e <_strtol_l.constprop.0+0x16>
 800d300:	b107      	cbz	r7, 800d304 <_strtol_l.constprop.0+0xdc>
 800d302:	4276      	negs	r6, r6
 800d304:	2a00      	cmp	r2, #0
 800d306:	d0f9      	beq.n	800d2fc <_strtol_l.constprop.0+0xd4>
 800d308:	f1bc 0f00 	cmp.w	ip, #0
 800d30c:	d000      	beq.n	800d310 <_strtol_l.constprop.0+0xe8>
 800d30e:	1e69      	subs	r1, r5, #1
 800d310:	6011      	str	r1, [r2, #0]
 800d312:	e7f3      	b.n	800d2fc <_strtol_l.constprop.0+0xd4>
 800d314:	2430      	movs	r4, #48	; 0x30
 800d316:	2b00      	cmp	r3, #0
 800d318:	d1b1      	bne.n	800d27e <_strtol_l.constprop.0+0x56>
 800d31a:	2308      	movs	r3, #8
 800d31c:	e7af      	b.n	800d27e <_strtol_l.constprop.0+0x56>
 800d31e:	2c30      	cmp	r4, #48	; 0x30
 800d320:	d0a5      	beq.n	800d26e <_strtol_l.constprop.0+0x46>
 800d322:	230a      	movs	r3, #10
 800d324:	e7ab      	b.n	800d27e <_strtol_l.constprop.0+0x56>
 800d326:	bf00      	nop
 800d328:	08011708 	.word	0x08011708

0800d32c <strtol>:
 800d32c:	4613      	mov	r3, r2
 800d32e:	460a      	mov	r2, r1
 800d330:	4601      	mov	r1, r0
 800d332:	4802      	ldr	r0, [pc, #8]	; (800d33c <strtol+0x10>)
 800d334:	6800      	ldr	r0, [r0, #0]
 800d336:	f7ff bf77 	b.w	800d228 <_strtol_l.constprop.0>
 800d33a:	bf00      	nop
 800d33c:	200000b8 	.word	0x200000b8

0800d340 <_vsniprintf_r>:
 800d340:	b530      	push	{r4, r5, lr}
 800d342:	4614      	mov	r4, r2
 800d344:	2c00      	cmp	r4, #0
 800d346:	b09b      	sub	sp, #108	; 0x6c
 800d348:	4605      	mov	r5, r0
 800d34a:	461a      	mov	r2, r3
 800d34c:	da05      	bge.n	800d35a <_vsniprintf_r+0x1a>
 800d34e:	238b      	movs	r3, #139	; 0x8b
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d356:	b01b      	add	sp, #108	; 0x6c
 800d358:	bd30      	pop	{r4, r5, pc}
 800d35a:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d35e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d362:	bf14      	ite	ne
 800d364:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d368:	4623      	moveq	r3, r4
 800d36a:	9302      	str	r3, [sp, #8]
 800d36c:	9305      	str	r3, [sp, #20]
 800d36e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d372:	9100      	str	r1, [sp, #0]
 800d374:	9104      	str	r1, [sp, #16]
 800d376:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d37a:	4669      	mov	r1, sp
 800d37c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d37e:	f000 fae5 	bl	800d94c <_svfiprintf_r>
 800d382:	1c43      	adds	r3, r0, #1
 800d384:	bfbc      	itt	lt
 800d386:	238b      	movlt	r3, #139	; 0x8b
 800d388:	602b      	strlt	r3, [r5, #0]
 800d38a:	2c00      	cmp	r4, #0
 800d38c:	d0e3      	beq.n	800d356 <_vsniprintf_r+0x16>
 800d38e:	9b00      	ldr	r3, [sp, #0]
 800d390:	2200      	movs	r2, #0
 800d392:	701a      	strb	r2, [r3, #0]
 800d394:	e7df      	b.n	800d356 <_vsniprintf_r+0x16>
	...

0800d398 <vsniprintf>:
 800d398:	b507      	push	{r0, r1, r2, lr}
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	4613      	mov	r3, r2
 800d39e:	460a      	mov	r2, r1
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	4803      	ldr	r0, [pc, #12]	; (800d3b0 <vsniprintf+0x18>)
 800d3a4:	6800      	ldr	r0, [r0, #0]
 800d3a6:	f7ff ffcb 	bl	800d340 <_vsniprintf_r>
 800d3aa:	b003      	add	sp, #12
 800d3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800d3b0:	200000b8 	.word	0x200000b8

0800d3b4 <__swbuf_r>:
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b6:	460e      	mov	r6, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	b118      	cbz	r0, 800d3c6 <__swbuf_r+0x12>
 800d3be:	6983      	ldr	r3, [r0, #24]
 800d3c0:	b90b      	cbnz	r3, 800d3c6 <__swbuf_r+0x12>
 800d3c2:	f7ff f891 	bl	800c4e8 <__sinit>
 800d3c6:	4b21      	ldr	r3, [pc, #132]	; (800d44c <__swbuf_r+0x98>)
 800d3c8:	429c      	cmp	r4, r3
 800d3ca:	d12b      	bne.n	800d424 <__swbuf_r+0x70>
 800d3cc:	686c      	ldr	r4, [r5, #4]
 800d3ce:	69a3      	ldr	r3, [r4, #24]
 800d3d0:	60a3      	str	r3, [r4, #8]
 800d3d2:	89a3      	ldrh	r3, [r4, #12]
 800d3d4:	071a      	lsls	r2, r3, #28
 800d3d6:	d52f      	bpl.n	800d438 <__swbuf_r+0x84>
 800d3d8:	6923      	ldr	r3, [r4, #16]
 800d3da:	b36b      	cbz	r3, 800d438 <__swbuf_r+0x84>
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	6820      	ldr	r0, [r4, #0]
 800d3e0:	1ac0      	subs	r0, r0, r3
 800d3e2:	6963      	ldr	r3, [r4, #20]
 800d3e4:	b2f6      	uxtb	r6, r6
 800d3e6:	4283      	cmp	r3, r0
 800d3e8:	4637      	mov	r7, r6
 800d3ea:	dc04      	bgt.n	800d3f6 <__swbuf_r+0x42>
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f000 f948 	bl	800d684 <_fflush_r>
 800d3f4:	bb30      	cbnz	r0, 800d444 <__swbuf_r+0x90>
 800d3f6:	68a3      	ldr	r3, [r4, #8]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	60a3      	str	r3, [r4, #8]
 800d3fc:	6823      	ldr	r3, [r4, #0]
 800d3fe:	1c5a      	adds	r2, r3, #1
 800d400:	6022      	str	r2, [r4, #0]
 800d402:	701e      	strb	r6, [r3, #0]
 800d404:	6963      	ldr	r3, [r4, #20]
 800d406:	3001      	adds	r0, #1
 800d408:	4283      	cmp	r3, r0
 800d40a:	d004      	beq.n	800d416 <__swbuf_r+0x62>
 800d40c:	89a3      	ldrh	r3, [r4, #12]
 800d40e:	07db      	lsls	r3, r3, #31
 800d410:	d506      	bpl.n	800d420 <__swbuf_r+0x6c>
 800d412:	2e0a      	cmp	r6, #10
 800d414:	d104      	bne.n	800d420 <__swbuf_r+0x6c>
 800d416:	4621      	mov	r1, r4
 800d418:	4628      	mov	r0, r5
 800d41a:	f000 f933 	bl	800d684 <_fflush_r>
 800d41e:	b988      	cbnz	r0, 800d444 <__swbuf_r+0x90>
 800d420:	4638      	mov	r0, r7
 800d422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d424:	4b0a      	ldr	r3, [pc, #40]	; (800d450 <__swbuf_r+0x9c>)
 800d426:	429c      	cmp	r4, r3
 800d428:	d101      	bne.n	800d42e <__swbuf_r+0x7a>
 800d42a:	68ac      	ldr	r4, [r5, #8]
 800d42c:	e7cf      	b.n	800d3ce <__swbuf_r+0x1a>
 800d42e:	4b09      	ldr	r3, [pc, #36]	; (800d454 <__swbuf_r+0xa0>)
 800d430:	429c      	cmp	r4, r3
 800d432:	bf08      	it	eq
 800d434:	68ec      	ldreq	r4, [r5, #12]
 800d436:	e7ca      	b.n	800d3ce <__swbuf_r+0x1a>
 800d438:	4621      	mov	r1, r4
 800d43a:	4628      	mov	r0, r5
 800d43c:	f000 f81e 	bl	800d47c <__swsetup_r>
 800d440:	2800      	cmp	r0, #0
 800d442:	d0cb      	beq.n	800d3dc <__swbuf_r+0x28>
 800d444:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d448:	e7ea      	b.n	800d420 <__swbuf_r+0x6c>
 800d44a:	bf00      	nop
 800d44c:	08011690 	.word	0x08011690
 800d450:	080116b0 	.word	0x080116b0
 800d454:	08011670 	.word	0x08011670

0800d458 <_write_r>:
 800d458:	b538      	push	{r3, r4, r5, lr}
 800d45a:	4d07      	ldr	r5, [pc, #28]	; (800d478 <_write_r+0x20>)
 800d45c:	4604      	mov	r4, r0
 800d45e:	4608      	mov	r0, r1
 800d460:	4611      	mov	r1, r2
 800d462:	2200      	movs	r2, #0
 800d464:	602a      	str	r2, [r5, #0]
 800d466:	461a      	mov	r2, r3
 800d468:	f7f4 fbc4 	bl	8001bf4 <_write>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_write_r+0x1e>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_write_r+0x1e>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20007298 	.word	0x20007298

0800d47c <__swsetup_r>:
 800d47c:	4b32      	ldr	r3, [pc, #200]	; (800d548 <__swsetup_r+0xcc>)
 800d47e:	b570      	push	{r4, r5, r6, lr}
 800d480:	681d      	ldr	r5, [r3, #0]
 800d482:	4606      	mov	r6, r0
 800d484:	460c      	mov	r4, r1
 800d486:	b125      	cbz	r5, 800d492 <__swsetup_r+0x16>
 800d488:	69ab      	ldr	r3, [r5, #24]
 800d48a:	b913      	cbnz	r3, 800d492 <__swsetup_r+0x16>
 800d48c:	4628      	mov	r0, r5
 800d48e:	f7ff f82b 	bl	800c4e8 <__sinit>
 800d492:	4b2e      	ldr	r3, [pc, #184]	; (800d54c <__swsetup_r+0xd0>)
 800d494:	429c      	cmp	r4, r3
 800d496:	d10f      	bne.n	800d4b8 <__swsetup_r+0x3c>
 800d498:	686c      	ldr	r4, [r5, #4]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4a0:	0719      	lsls	r1, r3, #28
 800d4a2:	d42c      	bmi.n	800d4fe <__swsetup_r+0x82>
 800d4a4:	06dd      	lsls	r5, r3, #27
 800d4a6:	d411      	bmi.n	800d4cc <__swsetup_r+0x50>
 800d4a8:	2309      	movs	r3, #9
 800d4aa:	6033      	str	r3, [r6, #0]
 800d4ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d4b0:	81a3      	strh	r3, [r4, #12]
 800d4b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d4b6:	e03e      	b.n	800d536 <__swsetup_r+0xba>
 800d4b8:	4b25      	ldr	r3, [pc, #148]	; (800d550 <__swsetup_r+0xd4>)
 800d4ba:	429c      	cmp	r4, r3
 800d4bc:	d101      	bne.n	800d4c2 <__swsetup_r+0x46>
 800d4be:	68ac      	ldr	r4, [r5, #8]
 800d4c0:	e7eb      	b.n	800d49a <__swsetup_r+0x1e>
 800d4c2:	4b24      	ldr	r3, [pc, #144]	; (800d554 <__swsetup_r+0xd8>)
 800d4c4:	429c      	cmp	r4, r3
 800d4c6:	bf08      	it	eq
 800d4c8:	68ec      	ldreq	r4, [r5, #12]
 800d4ca:	e7e6      	b.n	800d49a <__swsetup_r+0x1e>
 800d4cc:	0758      	lsls	r0, r3, #29
 800d4ce:	d512      	bpl.n	800d4f6 <__swsetup_r+0x7a>
 800d4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4d2:	b141      	cbz	r1, 800d4e6 <__swsetup_r+0x6a>
 800d4d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4d8:	4299      	cmp	r1, r3
 800d4da:	d002      	beq.n	800d4e2 <__swsetup_r+0x66>
 800d4dc:	4630      	mov	r0, r6
 800d4de:	f7ff f993 	bl	800c808 <_free_r>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	6363      	str	r3, [r4, #52]	; 0x34
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4ec:	81a3      	strh	r3, [r4, #12]
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	6063      	str	r3, [r4, #4]
 800d4f2:	6923      	ldr	r3, [r4, #16]
 800d4f4:	6023      	str	r3, [r4, #0]
 800d4f6:	89a3      	ldrh	r3, [r4, #12]
 800d4f8:	f043 0308 	orr.w	r3, r3, #8
 800d4fc:	81a3      	strh	r3, [r4, #12]
 800d4fe:	6923      	ldr	r3, [r4, #16]
 800d500:	b94b      	cbnz	r3, 800d516 <__swsetup_r+0x9a>
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d508:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d50c:	d003      	beq.n	800d516 <__swsetup_r+0x9a>
 800d50e:	4621      	mov	r1, r4
 800d510:	4630      	mov	r0, r6
 800d512:	f000 f92b 	bl	800d76c <__smakebuf_r>
 800d516:	89a0      	ldrh	r0, [r4, #12]
 800d518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51c:	f010 0301 	ands.w	r3, r0, #1
 800d520:	d00a      	beq.n	800d538 <__swsetup_r+0xbc>
 800d522:	2300      	movs	r3, #0
 800d524:	60a3      	str	r3, [r4, #8]
 800d526:	6963      	ldr	r3, [r4, #20]
 800d528:	425b      	negs	r3, r3
 800d52a:	61a3      	str	r3, [r4, #24]
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	b943      	cbnz	r3, 800d542 <__swsetup_r+0xc6>
 800d530:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d534:	d1ba      	bne.n	800d4ac <__swsetup_r+0x30>
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	0781      	lsls	r1, r0, #30
 800d53a:	bf58      	it	pl
 800d53c:	6963      	ldrpl	r3, [r4, #20]
 800d53e:	60a3      	str	r3, [r4, #8]
 800d540:	e7f4      	b.n	800d52c <__swsetup_r+0xb0>
 800d542:	2000      	movs	r0, #0
 800d544:	e7f7      	b.n	800d536 <__swsetup_r+0xba>
 800d546:	bf00      	nop
 800d548:	200000b8 	.word	0x200000b8
 800d54c:	08011690 	.word	0x08011690
 800d550:	080116b0 	.word	0x080116b0
 800d554:	08011670 	.word	0x08011670

0800d558 <_close_r>:
 800d558:	b538      	push	{r3, r4, r5, lr}
 800d55a:	4d06      	ldr	r5, [pc, #24]	; (800d574 <_close_r+0x1c>)
 800d55c:	2300      	movs	r3, #0
 800d55e:	4604      	mov	r4, r0
 800d560:	4608      	mov	r0, r1
 800d562:	602b      	str	r3, [r5, #0]
 800d564:	f7f7 f8d9 	bl	800471a <_close>
 800d568:	1c43      	adds	r3, r0, #1
 800d56a:	d102      	bne.n	800d572 <_close_r+0x1a>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b103      	cbz	r3, 800d572 <_close_r+0x1a>
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	bd38      	pop	{r3, r4, r5, pc}
 800d574:	20007298 	.word	0x20007298

0800d578 <__sflush_r>:
 800d578:	898a      	ldrh	r2, [r1, #12]
 800d57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57e:	4605      	mov	r5, r0
 800d580:	0710      	lsls	r0, r2, #28
 800d582:	460c      	mov	r4, r1
 800d584:	d458      	bmi.n	800d638 <__sflush_r+0xc0>
 800d586:	684b      	ldr	r3, [r1, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dc05      	bgt.n	800d598 <__sflush_r+0x20>
 800d58c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d58e:	2b00      	cmp	r3, #0
 800d590:	dc02      	bgt.n	800d598 <__sflush_r+0x20>
 800d592:	2000      	movs	r0, #0
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d59a:	2e00      	cmp	r6, #0
 800d59c:	d0f9      	beq.n	800d592 <__sflush_r+0x1a>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d5a4:	682f      	ldr	r7, [r5, #0]
 800d5a6:	602b      	str	r3, [r5, #0]
 800d5a8:	d032      	beq.n	800d610 <__sflush_r+0x98>
 800d5aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d5ac:	89a3      	ldrh	r3, [r4, #12]
 800d5ae:	075a      	lsls	r2, r3, #29
 800d5b0:	d505      	bpl.n	800d5be <__sflush_r+0x46>
 800d5b2:	6863      	ldr	r3, [r4, #4]
 800d5b4:	1ac0      	subs	r0, r0, r3
 800d5b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d5b8:	b10b      	cbz	r3, 800d5be <__sflush_r+0x46>
 800d5ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d5bc:	1ac0      	subs	r0, r0, r3
 800d5be:	2300      	movs	r3, #0
 800d5c0:	4602      	mov	r2, r0
 800d5c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d5c4:	6a21      	ldr	r1, [r4, #32]
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	47b0      	blx	r6
 800d5ca:	1c43      	adds	r3, r0, #1
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	d106      	bne.n	800d5de <__sflush_r+0x66>
 800d5d0:	6829      	ldr	r1, [r5, #0]
 800d5d2:	291d      	cmp	r1, #29
 800d5d4:	d82c      	bhi.n	800d630 <__sflush_r+0xb8>
 800d5d6:	4a2a      	ldr	r2, [pc, #168]	; (800d680 <__sflush_r+0x108>)
 800d5d8:	40ca      	lsrs	r2, r1
 800d5da:	07d6      	lsls	r6, r2, #31
 800d5dc:	d528      	bpl.n	800d630 <__sflush_r+0xb8>
 800d5de:	2200      	movs	r2, #0
 800d5e0:	6062      	str	r2, [r4, #4]
 800d5e2:	04d9      	lsls	r1, r3, #19
 800d5e4:	6922      	ldr	r2, [r4, #16]
 800d5e6:	6022      	str	r2, [r4, #0]
 800d5e8:	d504      	bpl.n	800d5f4 <__sflush_r+0x7c>
 800d5ea:	1c42      	adds	r2, r0, #1
 800d5ec:	d101      	bne.n	800d5f2 <__sflush_r+0x7a>
 800d5ee:	682b      	ldr	r3, [r5, #0]
 800d5f0:	b903      	cbnz	r3, 800d5f4 <__sflush_r+0x7c>
 800d5f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d5f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5f6:	602f      	str	r7, [r5, #0]
 800d5f8:	2900      	cmp	r1, #0
 800d5fa:	d0ca      	beq.n	800d592 <__sflush_r+0x1a>
 800d5fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d600:	4299      	cmp	r1, r3
 800d602:	d002      	beq.n	800d60a <__sflush_r+0x92>
 800d604:	4628      	mov	r0, r5
 800d606:	f7ff f8ff 	bl	800c808 <_free_r>
 800d60a:	2000      	movs	r0, #0
 800d60c:	6360      	str	r0, [r4, #52]	; 0x34
 800d60e:	e7c1      	b.n	800d594 <__sflush_r+0x1c>
 800d610:	6a21      	ldr	r1, [r4, #32]
 800d612:	2301      	movs	r3, #1
 800d614:	4628      	mov	r0, r5
 800d616:	47b0      	blx	r6
 800d618:	1c41      	adds	r1, r0, #1
 800d61a:	d1c7      	bne.n	800d5ac <__sflush_r+0x34>
 800d61c:	682b      	ldr	r3, [r5, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d0c4      	beq.n	800d5ac <__sflush_r+0x34>
 800d622:	2b1d      	cmp	r3, #29
 800d624:	d001      	beq.n	800d62a <__sflush_r+0xb2>
 800d626:	2b16      	cmp	r3, #22
 800d628:	d101      	bne.n	800d62e <__sflush_r+0xb6>
 800d62a:	602f      	str	r7, [r5, #0]
 800d62c:	e7b1      	b.n	800d592 <__sflush_r+0x1a>
 800d62e:	89a3      	ldrh	r3, [r4, #12]
 800d630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	e7ad      	b.n	800d594 <__sflush_r+0x1c>
 800d638:	690f      	ldr	r7, [r1, #16]
 800d63a:	2f00      	cmp	r7, #0
 800d63c:	d0a9      	beq.n	800d592 <__sflush_r+0x1a>
 800d63e:	0793      	lsls	r3, r2, #30
 800d640:	680e      	ldr	r6, [r1, #0]
 800d642:	bf08      	it	eq
 800d644:	694b      	ldreq	r3, [r1, #20]
 800d646:	600f      	str	r7, [r1, #0]
 800d648:	bf18      	it	ne
 800d64a:	2300      	movne	r3, #0
 800d64c:	eba6 0807 	sub.w	r8, r6, r7
 800d650:	608b      	str	r3, [r1, #8]
 800d652:	f1b8 0f00 	cmp.w	r8, #0
 800d656:	dd9c      	ble.n	800d592 <__sflush_r+0x1a>
 800d658:	6a21      	ldr	r1, [r4, #32]
 800d65a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d65c:	4643      	mov	r3, r8
 800d65e:	463a      	mov	r2, r7
 800d660:	4628      	mov	r0, r5
 800d662:	47b0      	blx	r6
 800d664:	2800      	cmp	r0, #0
 800d666:	dc06      	bgt.n	800d676 <__sflush_r+0xfe>
 800d668:	89a3      	ldrh	r3, [r4, #12]
 800d66a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d66e:	81a3      	strh	r3, [r4, #12]
 800d670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d674:	e78e      	b.n	800d594 <__sflush_r+0x1c>
 800d676:	4407      	add	r7, r0
 800d678:	eba8 0800 	sub.w	r8, r8, r0
 800d67c:	e7e9      	b.n	800d652 <__sflush_r+0xda>
 800d67e:	bf00      	nop
 800d680:	20400001 	.word	0x20400001

0800d684 <_fflush_r>:
 800d684:	b538      	push	{r3, r4, r5, lr}
 800d686:	690b      	ldr	r3, [r1, #16]
 800d688:	4605      	mov	r5, r0
 800d68a:	460c      	mov	r4, r1
 800d68c:	b913      	cbnz	r3, 800d694 <_fflush_r+0x10>
 800d68e:	2500      	movs	r5, #0
 800d690:	4628      	mov	r0, r5
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	b118      	cbz	r0, 800d69e <_fflush_r+0x1a>
 800d696:	6983      	ldr	r3, [r0, #24]
 800d698:	b90b      	cbnz	r3, 800d69e <_fflush_r+0x1a>
 800d69a:	f7fe ff25 	bl	800c4e8 <__sinit>
 800d69e:	4b14      	ldr	r3, [pc, #80]	; (800d6f0 <_fflush_r+0x6c>)
 800d6a0:	429c      	cmp	r4, r3
 800d6a2:	d11b      	bne.n	800d6dc <_fflush_r+0x58>
 800d6a4:	686c      	ldr	r4, [r5, #4]
 800d6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0ef      	beq.n	800d68e <_fflush_r+0xa>
 800d6ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d6b0:	07d0      	lsls	r0, r2, #31
 800d6b2:	d404      	bmi.n	800d6be <_fflush_r+0x3a>
 800d6b4:	0599      	lsls	r1, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_fflush_r+0x3a>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6ba:	f7ff f884 	bl	800c7c6 <__retarget_lock_acquire_recursive>
 800d6be:	4628      	mov	r0, r5
 800d6c0:	4621      	mov	r1, r4
 800d6c2:	f7ff ff59 	bl	800d578 <__sflush_r>
 800d6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d6c8:	07da      	lsls	r2, r3, #31
 800d6ca:	4605      	mov	r5, r0
 800d6cc:	d4e0      	bmi.n	800d690 <_fflush_r+0xc>
 800d6ce:	89a3      	ldrh	r3, [r4, #12]
 800d6d0:	059b      	lsls	r3, r3, #22
 800d6d2:	d4dd      	bmi.n	800d690 <_fflush_r+0xc>
 800d6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d6d6:	f7ff f877 	bl	800c7c8 <__retarget_lock_release_recursive>
 800d6da:	e7d9      	b.n	800d690 <_fflush_r+0xc>
 800d6dc:	4b05      	ldr	r3, [pc, #20]	; (800d6f4 <_fflush_r+0x70>)
 800d6de:	429c      	cmp	r4, r3
 800d6e0:	d101      	bne.n	800d6e6 <_fflush_r+0x62>
 800d6e2:	68ac      	ldr	r4, [r5, #8]
 800d6e4:	e7df      	b.n	800d6a6 <_fflush_r+0x22>
 800d6e6:	4b04      	ldr	r3, [pc, #16]	; (800d6f8 <_fflush_r+0x74>)
 800d6e8:	429c      	cmp	r4, r3
 800d6ea:	bf08      	it	eq
 800d6ec:	68ec      	ldreq	r4, [r5, #12]
 800d6ee:	e7da      	b.n	800d6a6 <_fflush_r+0x22>
 800d6f0:	08011690 	.word	0x08011690
 800d6f4:	080116b0 	.word	0x080116b0
 800d6f8:	08011670 	.word	0x08011670

0800d6fc <_lseek_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_lseek_r+0x20>)
 800d700:	4604      	mov	r4, r0
 800d702:	4608      	mov	r0, r1
 800d704:	4611      	mov	r1, r2
 800d706:	2200      	movs	r2, #0
 800d708:	602a      	str	r2, [r5, #0]
 800d70a:	461a      	mov	r2, r3
 800d70c:	f7f7 f82c 	bl	8004768 <_lseek>
 800d710:	1c43      	adds	r3, r0, #1
 800d712:	d102      	bne.n	800d71a <_lseek_r+0x1e>
 800d714:	682b      	ldr	r3, [r5, #0]
 800d716:	b103      	cbz	r3, 800d71a <_lseek_r+0x1e>
 800d718:	6023      	str	r3, [r4, #0]
 800d71a:	bd38      	pop	{r3, r4, r5, pc}
 800d71c:	20007298 	.word	0x20007298

0800d720 <__swhatbuf_r>:
 800d720:	b570      	push	{r4, r5, r6, lr}
 800d722:	460e      	mov	r6, r1
 800d724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d728:	2900      	cmp	r1, #0
 800d72a:	b096      	sub	sp, #88	; 0x58
 800d72c:	4614      	mov	r4, r2
 800d72e:	461d      	mov	r5, r3
 800d730:	da08      	bge.n	800d744 <__swhatbuf_r+0x24>
 800d732:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d736:	2200      	movs	r2, #0
 800d738:	602a      	str	r2, [r5, #0]
 800d73a:	061a      	lsls	r2, r3, #24
 800d73c:	d410      	bmi.n	800d760 <__swhatbuf_r+0x40>
 800d73e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d742:	e00e      	b.n	800d762 <__swhatbuf_r+0x42>
 800d744:	466a      	mov	r2, sp
 800d746:	f000 fa13 	bl	800db70 <_fstat_r>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	dbf1      	blt.n	800d732 <__swhatbuf_r+0x12>
 800d74e:	9a01      	ldr	r2, [sp, #4]
 800d750:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d754:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d758:	425a      	negs	r2, r3
 800d75a:	415a      	adcs	r2, r3
 800d75c:	602a      	str	r2, [r5, #0]
 800d75e:	e7ee      	b.n	800d73e <__swhatbuf_r+0x1e>
 800d760:	2340      	movs	r3, #64	; 0x40
 800d762:	2000      	movs	r0, #0
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	b016      	add	sp, #88	; 0x58
 800d768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d76c <__smakebuf_r>:
 800d76c:	898b      	ldrh	r3, [r1, #12]
 800d76e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d770:	079d      	lsls	r5, r3, #30
 800d772:	4606      	mov	r6, r0
 800d774:	460c      	mov	r4, r1
 800d776:	d507      	bpl.n	800d788 <__smakebuf_r+0x1c>
 800d778:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d77c:	6023      	str	r3, [r4, #0]
 800d77e:	6123      	str	r3, [r4, #16]
 800d780:	2301      	movs	r3, #1
 800d782:	6163      	str	r3, [r4, #20]
 800d784:	b002      	add	sp, #8
 800d786:	bd70      	pop	{r4, r5, r6, pc}
 800d788:	ab01      	add	r3, sp, #4
 800d78a:	466a      	mov	r2, sp
 800d78c:	f7ff ffc8 	bl	800d720 <__swhatbuf_r>
 800d790:	9900      	ldr	r1, [sp, #0]
 800d792:	4605      	mov	r5, r0
 800d794:	4630      	mov	r0, r6
 800d796:	f7ff f8a3 	bl	800c8e0 <_malloc_r>
 800d79a:	b948      	cbnz	r0, 800d7b0 <__smakebuf_r+0x44>
 800d79c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a0:	059a      	lsls	r2, r3, #22
 800d7a2:	d4ef      	bmi.n	800d784 <__smakebuf_r+0x18>
 800d7a4:	f023 0303 	bic.w	r3, r3, #3
 800d7a8:	f043 0302 	orr.w	r3, r3, #2
 800d7ac:	81a3      	strh	r3, [r4, #12]
 800d7ae:	e7e3      	b.n	800d778 <__smakebuf_r+0xc>
 800d7b0:	4b0d      	ldr	r3, [pc, #52]	; (800d7e8 <__smakebuf_r+0x7c>)
 800d7b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7b4:	89a3      	ldrh	r3, [r4, #12]
 800d7b6:	6020      	str	r0, [r4, #0]
 800d7b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7bc:	81a3      	strh	r3, [r4, #12]
 800d7be:	9b00      	ldr	r3, [sp, #0]
 800d7c0:	6163      	str	r3, [r4, #20]
 800d7c2:	9b01      	ldr	r3, [sp, #4]
 800d7c4:	6120      	str	r0, [r4, #16]
 800d7c6:	b15b      	cbz	r3, 800d7e0 <__smakebuf_r+0x74>
 800d7c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f000 f9e1 	bl	800db94 <_isatty_r>
 800d7d2:	b128      	cbz	r0, 800d7e0 <__smakebuf_r+0x74>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	f023 0303 	bic.w	r3, r3, #3
 800d7da:	f043 0301 	orr.w	r3, r3, #1
 800d7de:	81a3      	strh	r3, [r4, #12]
 800d7e0:	89a0      	ldrh	r0, [r4, #12]
 800d7e2:	4305      	orrs	r5, r0
 800d7e4:	81a5      	strh	r5, [r4, #12]
 800d7e6:	e7cd      	b.n	800d784 <__smakebuf_r+0x18>
 800d7e8:	0800c481 	.word	0x0800c481

0800d7ec <memmove>:
 800d7ec:	4288      	cmp	r0, r1
 800d7ee:	b510      	push	{r4, lr}
 800d7f0:	eb01 0402 	add.w	r4, r1, r2
 800d7f4:	d902      	bls.n	800d7fc <memmove+0x10>
 800d7f6:	4284      	cmp	r4, r0
 800d7f8:	4623      	mov	r3, r4
 800d7fa:	d807      	bhi.n	800d80c <memmove+0x20>
 800d7fc:	1e43      	subs	r3, r0, #1
 800d7fe:	42a1      	cmp	r1, r4
 800d800:	d008      	beq.n	800d814 <memmove+0x28>
 800d802:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d806:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d80a:	e7f8      	b.n	800d7fe <memmove+0x12>
 800d80c:	4402      	add	r2, r0
 800d80e:	4601      	mov	r1, r0
 800d810:	428a      	cmp	r2, r1
 800d812:	d100      	bne.n	800d816 <memmove+0x2a>
 800d814:	bd10      	pop	{r4, pc}
 800d816:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d81a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d81e:	e7f7      	b.n	800d810 <memmove+0x24>

0800d820 <__malloc_lock>:
 800d820:	4801      	ldr	r0, [pc, #4]	; (800d828 <__malloc_lock+0x8>)
 800d822:	f7fe bfd0 	b.w	800c7c6 <__retarget_lock_acquire_recursive>
 800d826:	bf00      	nop
 800d828:	2000728c 	.word	0x2000728c

0800d82c <__malloc_unlock>:
 800d82c:	4801      	ldr	r0, [pc, #4]	; (800d834 <__malloc_unlock+0x8>)
 800d82e:	f7fe bfcb 	b.w	800c7c8 <__retarget_lock_release_recursive>
 800d832:	bf00      	nop
 800d834:	2000728c 	.word	0x2000728c

0800d838 <_realloc_r>:
 800d838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d83c:	4680      	mov	r8, r0
 800d83e:	4614      	mov	r4, r2
 800d840:	460e      	mov	r6, r1
 800d842:	b921      	cbnz	r1, 800d84e <_realloc_r+0x16>
 800d844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d848:	4611      	mov	r1, r2
 800d84a:	f7ff b849 	b.w	800c8e0 <_malloc_r>
 800d84e:	b92a      	cbnz	r2, 800d85c <_realloc_r+0x24>
 800d850:	f7fe ffda 	bl	800c808 <_free_r>
 800d854:	4625      	mov	r5, r4
 800d856:	4628      	mov	r0, r5
 800d858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d85c:	f000 f9aa 	bl	800dbb4 <_malloc_usable_size_r>
 800d860:	4284      	cmp	r4, r0
 800d862:	4607      	mov	r7, r0
 800d864:	d802      	bhi.n	800d86c <_realloc_r+0x34>
 800d866:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d86a:	d812      	bhi.n	800d892 <_realloc_r+0x5a>
 800d86c:	4621      	mov	r1, r4
 800d86e:	4640      	mov	r0, r8
 800d870:	f7ff f836 	bl	800c8e0 <_malloc_r>
 800d874:	4605      	mov	r5, r0
 800d876:	2800      	cmp	r0, #0
 800d878:	d0ed      	beq.n	800d856 <_realloc_r+0x1e>
 800d87a:	42bc      	cmp	r4, r7
 800d87c:	4622      	mov	r2, r4
 800d87e:	4631      	mov	r1, r6
 800d880:	bf28      	it	cs
 800d882:	463a      	movcs	r2, r7
 800d884:	f7fe ffaa 	bl	800c7dc <memcpy>
 800d888:	4631      	mov	r1, r6
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7fe ffbc 	bl	800c808 <_free_r>
 800d890:	e7e1      	b.n	800d856 <_realloc_r+0x1e>
 800d892:	4635      	mov	r5, r6
 800d894:	e7df      	b.n	800d856 <_realloc_r+0x1e>

0800d896 <__ssputs_r>:
 800d896:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d89a:	688e      	ldr	r6, [r1, #8]
 800d89c:	429e      	cmp	r6, r3
 800d89e:	4682      	mov	sl, r0
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	4690      	mov	r8, r2
 800d8a4:	461f      	mov	r7, r3
 800d8a6:	d838      	bhi.n	800d91a <__ssputs_r+0x84>
 800d8a8:	898a      	ldrh	r2, [r1, #12]
 800d8aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8ae:	d032      	beq.n	800d916 <__ssputs_r+0x80>
 800d8b0:	6825      	ldr	r5, [r4, #0]
 800d8b2:	6909      	ldr	r1, [r1, #16]
 800d8b4:	eba5 0901 	sub.w	r9, r5, r1
 800d8b8:	6965      	ldr	r5, [r4, #20]
 800d8ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	444b      	add	r3, r9
 800d8c6:	106d      	asrs	r5, r5, #1
 800d8c8:	429d      	cmp	r5, r3
 800d8ca:	bf38      	it	cc
 800d8cc:	461d      	movcc	r5, r3
 800d8ce:	0553      	lsls	r3, r2, #21
 800d8d0:	d531      	bpl.n	800d936 <__ssputs_r+0xa0>
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7ff f804 	bl	800c8e0 <_malloc_r>
 800d8d8:	4606      	mov	r6, r0
 800d8da:	b950      	cbnz	r0, 800d8f2 <__ssputs_r+0x5c>
 800d8dc:	230c      	movs	r3, #12
 800d8de:	f8ca 3000 	str.w	r3, [sl]
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f2:	6921      	ldr	r1, [r4, #16]
 800d8f4:	464a      	mov	r2, r9
 800d8f6:	f7fe ff71 	bl	800c7dc <memcpy>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d904:	81a3      	strh	r3, [r4, #12]
 800d906:	6126      	str	r6, [r4, #16]
 800d908:	6165      	str	r5, [r4, #20]
 800d90a:	444e      	add	r6, r9
 800d90c:	eba5 0509 	sub.w	r5, r5, r9
 800d910:	6026      	str	r6, [r4, #0]
 800d912:	60a5      	str	r5, [r4, #8]
 800d914:	463e      	mov	r6, r7
 800d916:	42be      	cmp	r6, r7
 800d918:	d900      	bls.n	800d91c <__ssputs_r+0x86>
 800d91a:	463e      	mov	r6, r7
 800d91c:	6820      	ldr	r0, [r4, #0]
 800d91e:	4632      	mov	r2, r6
 800d920:	4641      	mov	r1, r8
 800d922:	f7ff ff63 	bl	800d7ec <memmove>
 800d926:	68a3      	ldr	r3, [r4, #8]
 800d928:	1b9b      	subs	r3, r3, r6
 800d92a:	60a3      	str	r3, [r4, #8]
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	4433      	add	r3, r6
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	2000      	movs	r0, #0
 800d934:	e7db      	b.n	800d8ee <__ssputs_r+0x58>
 800d936:	462a      	mov	r2, r5
 800d938:	f7ff ff7e 	bl	800d838 <_realloc_r>
 800d93c:	4606      	mov	r6, r0
 800d93e:	2800      	cmp	r0, #0
 800d940:	d1e1      	bne.n	800d906 <__ssputs_r+0x70>
 800d942:	6921      	ldr	r1, [r4, #16]
 800d944:	4650      	mov	r0, sl
 800d946:	f7fe ff5f 	bl	800c808 <_free_r>
 800d94a:	e7c7      	b.n	800d8dc <__ssputs_r+0x46>

0800d94c <_svfiprintf_r>:
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d950:	4698      	mov	r8, r3
 800d952:	898b      	ldrh	r3, [r1, #12]
 800d954:	061b      	lsls	r3, r3, #24
 800d956:	b09d      	sub	sp, #116	; 0x74
 800d958:	4607      	mov	r7, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	4614      	mov	r4, r2
 800d95e:	d50e      	bpl.n	800d97e <_svfiprintf_r+0x32>
 800d960:	690b      	ldr	r3, [r1, #16]
 800d962:	b963      	cbnz	r3, 800d97e <_svfiprintf_r+0x32>
 800d964:	2140      	movs	r1, #64	; 0x40
 800d966:	f7fe ffbb 	bl	800c8e0 <_malloc_r>
 800d96a:	6028      	str	r0, [r5, #0]
 800d96c:	6128      	str	r0, [r5, #16]
 800d96e:	b920      	cbnz	r0, 800d97a <_svfiprintf_r+0x2e>
 800d970:	230c      	movs	r3, #12
 800d972:	603b      	str	r3, [r7, #0]
 800d974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d978:	e0d1      	b.n	800db1e <_svfiprintf_r+0x1d2>
 800d97a:	2340      	movs	r3, #64	; 0x40
 800d97c:	616b      	str	r3, [r5, #20]
 800d97e:	2300      	movs	r3, #0
 800d980:	9309      	str	r3, [sp, #36]	; 0x24
 800d982:	2320      	movs	r3, #32
 800d984:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d988:	f8cd 800c 	str.w	r8, [sp, #12]
 800d98c:	2330      	movs	r3, #48	; 0x30
 800d98e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800db38 <_svfiprintf_r+0x1ec>
 800d992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d996:	f04f 0901 	mov.w	r9, #1
 800d99a:	4623      	mov	r3, r4
 800d99c:	469a      	mov	sl, r3
 800d99e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9a2:	b10a      	cbz	r2, 800d9a8 <_svfiprintf_r+0x5c>
 800d9a4:	2a25      	cmp	r2, #37	; 0x25
 800d9a6:	d1f9      	bne.n	800d99c <_svfiprintf_r+0x50>
 800d9a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d9ac:	d00b      	beq.n	800d9c6 <_svfiprintf_r+0x7a>
 800d9ae:	465b      	mov	r3, fp
 800d9b0:	4622      	mov	r2, r4
 800d9b2:	4629      	mov	r1, r5
 800d9b4:	4638      	mov	r0, r7
 800d9b6:	f7ff ff6e 	bl	800d896 <__ssputs_r>
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	f000 80aa 	beq.w	800db14 <_svfiprintf_r+0x1c8>
 800d9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9c2:	445a      	add	r2, fp
 800d9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f000 80a2 	beq.w	800db14 <_svfiprintf_r+0x1c8>
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d9da:	f10a 0a01 	add.w	sl, sl, #1
 800d9de:	9304      	str	r3, [sp, #16]
 800d9e0:	9307      	str	r3, [sp, #28]
 800d9e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d9e8:	4654      	mov	r4, sl
 800d9ea:	2205      	movs	r2, #5
 800d9ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f0:	4851      	ldr	r0, [pc, #324]	; (800db38 <_svfiprintf_r+0x1ec>)
 800d9f2:	f7f2 fbf5 	bl	80001e0 <memchr>
 800d9f6:	9a04      	ldr	r2, [sp, #16]
 800d9f8:	b9d8      	cbnz	r0, 800da32 <_svfiprintf_r+0xe6>
 800d9fa:	06d0      	lsls	r0, r2, #27
 800d9fc:	bf44      	itt	mi
 800d9fe:	2320      	movmi	r3, #32
 800da00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da04:	0711      	lsls	r1, r2, #28
 800da06:	bf44      	itt	mi
 800da08:	232b      	movmi	r3, #43	; 0x2b
 800da0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da0e:	f89a 3000 	ldrb.w	r3, [sl]
 800da12:	2b2a      	cmp	r3, #42	; 0x2a
 800da14:	d015      	beq.n	800da42 <_svfiprintf_r+0xf6>
 800da16:	9a07      	ldr	r2, [sp, #28]
 800da18:	4654      	mov	r4, sl
 800da1a:	2000      	movs	r0, #0
 800da1c:	f04f 0c0a 	mov.w	ip, #10
 800da20:	4621      	mov	r1, r4
 800da22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da26:	3b30      	subs	r3, #48	; 0x30
 800da28:	2b09      	cmp	r3, #9
 800da2a:	d94e      	bls.n	800daca <_svfiprintf_r+0x17e>
 800da2c:	b1b0      	cbz	r0, 800da5c <_svfiprintf_r+0x110>
 800da2e:	9207      	str	r2, [sp, #28]
 800da30:	e014      	b.n	800da5c <_svfiprintf_r+0x110>
 800da32:	eba0 0308 	sub.w	r3, r0, r8
 800da36:	fa09 f303 	lsl.w	r3, r9, r3
 800da3a:	4313      	orrs	r3, r2
 800da3c:	9304      	str	r3, [sp, #16]
 800da3e:	46a2      	mov	sl, r4
 800da40:	e7d2      	b.n	800d9e8 <_svfiprintf_r+0x9c>
 800da42:	9b03      	ldr	r3, [sp, #12]
 800da44:	1d19      	adds	r1, r3, #4
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	9103      	str	r1, [sp, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	bfbb      	ittet	lt
 800da4e:	425b      	neglt	r3, r3
 800da50:	f042 0202 	orrlt.w	r2, r2, #2
 800da54:	9307      	strge	r3, [sp, #28]
 800da56:	9307      	strlt	r3, [sp, #28]
 800da58:	bfb8      	it	lt
 800da5a:	9204      	strlt	r2, [sp, #16]
 800da5c:	7823      	ldrb	r3, [r4, #0]
 800da5e:	2b2e      	cmp	r3, #46	; 0x2e
 800da60:	d10c      	bne.n	800da7c <_svfiprintf_r+0x130>
 800da62:	7863      	ldrb	r3, [r4, #1]
 800da64:	2b2a      	cmp	r3, #42	; 0x2a
 800da66:	d135      	bne.n	800dad4 <_svfiprintf_r+0x188>
 800da68:	9b03      	ldr	r3, [sp, #12]
 800da6a:	1d1a      	adds	r2, r3, #4
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	9203      	str	r2, [sp, #12]
 800da70:	2b00      	cmp	r3, #0
 800da72:	bfb8      	it	lt
 800da74:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800da78:	3402      	adds	r4, #2
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db48 <_svfiprintf_r+0x1fc>
 800da80:	7821      	ldrb	r1, [r4, #0]
 800da82:	2203      	movs	r2, #3
 800da84:	4650      	mov	r0, sl
 800da86:	f7f2 fbab 	bl	80001e0 <memchr>
 800da8a:	b140      	cbz	r0, 800da9e <_svfiprintf_r+0x152>
 800da8c:	2340      	movs	r3, #64	; 0x40
 800da8e:	eba0 000a 	sub.w	r0, r0, sl
 800da92:	fa03 f000 	lsl.w	r0, r3, r0
 800da96:	9b04      	ldr	r3, [sp, #16]
 800da98:	4303      	orrs	r3, r0
 800da9a:	3401      	adds	r4, #1
 800da9c:	9304      	str	r3, [sp, #16]
 800da9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daa2:	4826      	ldr	r0, [pc, #152]	; (800db3c <_svfiprintf_r+0x1f0>)
 800daa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800daa8:	2206      	movs	r2, #6
 800daaa:	f7f2 fb99 	bl	80001e0 <memchr>
 800daae:	2800      	cmp	r0, #0
 800dab0:	d038      	beq.n	800db24 <_svfiprintf_r+0x1d8>
 800dab2:	4b23      	ldr	r3, [pc, #140]	; (800db40 <_svfiprintf_r+0x1f4>)
 800dab4:	bb1b      	cbnz	r3, 800dafe <_svfiprintf_r+0x1b2>
 800dab6:	9b03      	ldr	r3, [sp, #12]
 800dab8:	3307      	adds	r3, #7
 800daba:	f023 0307 	bic.w	r3, r3, #7
 800dabe:	3308      	adds	r3, #8
 800dac0:	9303      	str	r3, [sp, #12]
 800dac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dac4:	4433      	add	r3, r6
 800dac6:	9309      	str	r3, [sp, #36]	; 0x24
 800dac8:	e767      	b.n	800d99a <_svfiprintf_r+0x4e>
 800daca:	fb0c 3202 	mla	r2, ip, r2, r3
 800dace:	460c      	mov	r4, r1
 800dad0:	2001      	movs	r0, #1
 800dad2:	e7a5      	b.n	800da20 <_svfiprintf_r+0xd4>
 800dad4:	2300      	movs	r3, #0
 800dad6:	3401      	adds	r4, #1
 800dad8:	9305      	str	r3, [sp, #20]
 800dada:	4619      	mov	r1, r3
 800dadc:	f04f 0c0a 	mov.w	ip, #10
 800dae0:	4620      	mov	r0, r4
 800dae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dae6:	3a30      	subs	r2, #48	; 0x30
 800dae8:	2a09      	cmp	r2, #9
 800daea:	d903      	bls.n	800daf4 <_svfiprintf_r+0x1a8>
 800daec:	2b00      	cmp	r3, #0
 800daee:	d0c5      	beq.n	800da7c <_svfiprintf_r+0x130>
 800daf0:	9105      	str	r1, [sp, #20]
 800daf2:	e7c3      	b.n	800da7c <_svfiprintf_r+0x130>
 800daf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800daf8:	4604      	mov	r4, r0
 800dafa:	2301      	movs	r3, #1
 800dafc:	e7f0      	b.n	800dae0 <_svfiprintf_r+0x194>
 800dafe:	ab03      	add	r3, sp, #12
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	462a      	mov	r2, r5
 800db04:	4b0f      	ldr	r3, [pc, #60]	; (800db44 <_svfiprintf_r+0x1f8>)
 800db06:	a904      	add	r1, sp, #16
 800db08:	4638      	mov	r0, r7
 800db0a:	f3af 8000 	nop.w
 800db0e:	1c42      	adds	r2, r0, #1
 800db10:	4606      	mov	r6, r0
 800db12:	d1d6      	bne.n	800dac2 <_svfiprintf_r+0x176>
 800db14:	89ab      	ldrh	r3, [r5, #12]
 800db16:	065b      	lsls	r3, r3, #25
 800db18:	f53f af2c 	bmi.w	800d974 <_svfiprintf_r+0x28>
 800db1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db1e:	b01d      	add	sp, #116	; 0x74
 800db20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db24:	ab03      	add	r3, sp, #12
 800db26:	9300      	str	r3, [sp, #0]
 800db28:	462a      	mov	r2, r5
 800db2a:	4b06      	ldr	r3, [pc, #24]	; (800db44 <_svfiprintf_r+0x1f8>)
 800db2c:	a904      	add	r1, sp, #16
 800db2e:	4638      	mov	r0, r7
 800db30:	f7ff f912 	bl	800cd58 <_printf_i>
 800db34:	e7eb      	b.n	800db0e <_svfiprintf_r+0x1c2>
 800db36:	bf00      	nop
 800db38:	080116d4 	.word	0x080116d4
 800db3c:	080116de 	.word	0x080116de
 800db40:	00000000 	.word	0x00000000
 800db44:	0800d897 	.word	0x0800d897
 800db48:	080116da 	.word	0x080116da

0800db4c <_read_r>:
 800db4c:	b538      	push	{r3, r4, r5, lr}
 800db4e:	4d07      	ldr	r5, [pc, #28]	; (800db6c <_read_r+0x20>)
 800db50:	4604      	mov	r4, r0
 800db52:	4608      	mov	r0, r1
 800db54:	4611      	mov	r1, r2
 800db56:	2200      	movs	r2, #0
 800db58:	602a      	str	r2, [r5, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	f7f6 fdc0 	bl	80046e0 <_read>
 800db60:	1c43      	adds	r3, r0, #1
 800db62:	d102      	bne.n	800db6a <_read_r+0x1e>
 800db64:	682b      	ldr	r3, [r5, #0]
 800db66:	b103      	cbz	r3, 800db6a <_read_r+0x1e>
 800db68:	6023      	str	r3, [r4, #0]
 800db6a:	bd38      	pop	{r3, r4, r5, pc}
 800db6c:	20007298 	.word	0x20007298

0800db70 <_fstat_r>:
 800db70:	b538      	push	{r3, r4, r5, lr}
 800db72:	4d07      	ldr	r5, [pc, #28]	; (800db90 <_fstat_r+0x20>)
 800db74:	2300      	movs	r3, #0
 800db76:	4604      	mov	r4, r0
 800db78:	4608      	mov	r0, r1
 800db7a:	4611      	mov	r1, r2
 800db7c:	602b      	str	r3, [r5, #0]
 800db7e:	f7f6 fdd8 	bl	8004732 <_fstat>
 800db82:	1c43      	adds	r3, r0, #1
 800db84:	d102      	bne.n	800db8c <_fstat_r+0x1c>
 800db86:	682b      	ldr	r3, [r5, #0]
 800db88:	b103      	cbz	r3, 800db8c <_fstat_r+0x1c>
 800db8a:	6023      	str	r3, [r4, #0]
 800db8c:	bd38      	pop	{r3, r4, r5, pc}
 800db8e:	bf00      	nop
 800db90:	20007298 	.word	0x20007298

0800db94 <_isatty_r>:
 800db94:	b538      	push	{r3, r4, r5, lr}
 800db96:	4d06      	ldr	r5, [pc, #24]	; (800dbb0 <_isatty_r+0x1c>)
 800db98:	2300      	movs	r3, #0
 800db9a:	4604      	mov	r4, r0
 800db9c:	4608      	mov	r0, r1
 800db9e:	602b      	str	r3, [r5, #0]
 800dba0:	f7f6 fdd7 	bl	8004752 <_isatty>
 800dba4:	1c43      	adds	r3, r0, #1
 800dba6:	d102      	bne.n	800dbae <_isatty_r+0x1a>
 800dba8:	682b      	ldr	r3, [r5, #0]
 800dbaa:	b103      	cbz	r3, 800dbae <_isatty_r+0x1a>
 800dbac:	6023      	str	r3, [r4, #0]
 800dbae:	bd38      	pop	{r3, r4, r5, pc}
 800dbb0:	20007298 	.word	0x20007298

0800dbb4 <_malloc_usable_size_r>:
 800dbb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb8:	1f18      	subs	r0, r3, #4
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	bfbc      	itt	lt
 800dbbe:	580b      	ldrlt	r3, [r1, r0]
 800dbc0:	18c0      	addlt	r0, r0, r3
 800dbc2:	4770      	bx	lr

0800dbc4 <_init>:
 800dbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbc6:	bf00      	nop
 800dbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbca:	bc08      	pop	{r3}
 800dbcc:	469e      	mov	lr, r3
 800dbce:	4770      	bx	lr

0800dbd0 <_fini>:
 800dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd2:	bf00      	nop
 800dbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd6:	bc08      	pop	{r3}
 800dbd8:	469e      	mov	lr, r3
 800dbda:	4770      	bx	lr
