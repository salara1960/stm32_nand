
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010004  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b68  08010194  08010194  00020194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013cfc  08013cfc  0003013c  2**0
                  CONTENTS
  4 .ARM          00000008  08013cfc  08013cfc  00023cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d04  08013d04  0003013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d04  08013d04  00023d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d08  08013d08  00023d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08013d0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003013c  2**0
                  CONTENTS
 10 .bss          00007bb4  20000140  20000140  00030140  2**3
                  ALLOC
 11 ._user_heap_stack 00002804  20007cf4  20007cf4  00030140  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003013c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002dbfc  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fb9  00000000  00000000  0005dd68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023f0  00000000  00000000  00062d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007d16  00000000  00000000  00065118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ab82  00000000  00000000  0006ce2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9cb5  00000000  00000000  000979b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00181665  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 00002470  00000000  00000000  001816b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000a7f8  00000000  00000000  00183b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000140 	.word	0x20000140
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801017c 	.word	0x0801017c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000144 	.word	0x20000144
 80001cc:	0801017c 	.word	0x0801017c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <tmpPrint>:
	uint8_t tmpBuf[32] = {0};
	uint8_t tmpLen = 0;
	char tmpChar[256];

	void tmpPrint(const char *func, uint8_t *buf, uint8_t len)
	{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	71fb      	strb	r3, [r7, #7]
		strcpy(tmpChar, "to_nand:");
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <tmpPrint+0x5c>)
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <tmpPrint+0x60>)
 8000c42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c44:	c303      	stmia	r3!, {r0, r1}
 8000c46:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < len; i++) sprintf(tmpChar+strlen(tmpChar), " %02X", *(uint8_t *)(buf + i));
 8000c48:	2300      	movs	r3, #0
 8000c4a:	75fb      	strb	r3, [r7, #23]
 8000c4c:	e010      	b.n	8000c70 <tmpPrint+0x40>
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <tmpPrint+0x5c>)
 8000c50:	f7ff fabe 	bl	80001d0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <tmpPrint+0x5c>)
 8000c58:	1898      	adds	r0, r3, r2
 8000c5a:	7dfb      	ldrb	r3, [r7, #23]
 8000c5c:	68ba      	ldr	r2, [r7, #8]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	490b      	ldr	r1, [pc, #44]	; (8000c94 <tmpPrint+0x64>)
 8000c66:	f00e fcf7 	bl	800f658 <siprintf>
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	75fb      	strb	r3, [r7, #23]
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d3ea      	bcc.n	8000c4e <tmpPrint+0x1e>
		Report(0, "\t\t%s\r\n", tmpChar);
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <tmpPrint+0x5c>)
 8000c7a:	4907      	ldr	r1, [pc, #28]	; (8000c98 <tmpPrint+0x68>)
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f001 fead 	bl	80029dc <Report>
	}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000180 	.word	0x20000180
 8000c90:	08010194 	.word	0x08010194
 8000c94:	080101a0 	.word	0x080101a0
 8000c98:	080101a8 	.word	0x080101a8

08000c9c <io_nand_init>:
#endif


//-------------------------------------------------------------------------------------------
void io_nand_init(NAND_HandleTypeDef *hnand)
{
 8000c9c:	b5b0      	push	{r4, r5, r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    if (HAL_NAND_RegisterCallback(hnand, HAL_NAND_IT_CB_ID, HAL_NAND_ITCallback) == HAL_ERROR) devError |= devNAND;
#endif

    if (NAND_Read_ID(hnand, &nandID) == HAL_OK) {//read ID information from chip
 8000ca4:	491c      	ldr	r1, [pc, #112]	; (8000d18 <io_nand_init+0x7c>)
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f840 	bl	8000d2c <NAND_Read_ID>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d12e      	bne.n	8000d10 <io_nand_init+0x74>

    	nandState = HAL_NAND_GetState(hnand);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f007 f97f 	bl	8007fb6 <HAL_NAND_GetState>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	461a      	mov	r2, r3
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <io_nand_init+0x80>)
 8000cbe:	701a      	strb	r2, [r3, #0]

    	memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand->Config, sizeof(s_chipConf));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <io_nand_init+0x84>)
 8000cc8:	6810      	ldr	r0, [r2, #0]
 8000cca:	6851      	ldr	r1, [r2, #4]
 8000ccc:	6895      	ldr	r5, [r2, #8]
 8000cce:	68d4      	ldr	r4, [r2, #12]
 8000cd0:	6018      	str	r0, [r3, #0]
 8000cd2:	6059      	str	r1, [r3, #4]
 8000cd4:	609d      	str	r5, [r3, #8]
 8000cd6:	60dc      	str	r4, [r3, #12]
 8000cd8:	6910      	ldr	r0, [r2, #16]
 8000cda:	6951      	ldr	r1, [r2, #20]
 8000cdc:	6118      	str	r0, [r3, #16]
 8000cde:	6159      	str	r1, [r3, #20]
    	chipConf.PlaneSize *= chipConf.BlockNbr;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <io_nand_init+0x84>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <io_nand_init+0x84>)
 8000ce6:	68d2      	ldr	r2, [r2, #12]
 8000ce8:	fb02 f303 	mul.w	r3, r2, r3
 8000cec:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <io_nand_init+0x84>)
 8000cee:	6153      	str	r3, [r2, #20]

    	total_pages = chipConf.BlockSize * chipConf.BlockNbr;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <io_nand_init+0x84>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <io_nand_init+0x84>)
 8000cf6:	68d2      	ldr	r2, [r2, #12]
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <io_nand_init+0x88>)
 8000cfe:	6013      	str	r3, [r2, #0]
    	total_bytes = total_pages * chipConf.PageSize;//chipConf.PlaneSize;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <io_nand_init+0x84>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <io_nand_init+0x88>)
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	fb02 f303 	mul.w	r3, r2, r3
 8000d0c:	4a06      	ldr	r2, [pc, #24]	; (8000d28 <io_nand_init+0x8c>)
 8000d0e:	6013      	str	r3, [r2, #0]

    }

}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bdb0      	pop	{r4, r5, r7, pc}
 8000d18:	200015e0 	.word	0x200015e0
 8000d1c:	200000a1 	.word	0x200000a1
 8000d20:	200015e8 	.word	0x200015e8
 8000d24:	200015c0 	.word	0x200015c0
 8000d28:	200015c4 	.word	0x200015c4

08000d2c <NAND_Read_ID>:
{
	return chipConf.PlaneSize;
}
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d101      	bne.n	8000d46 <NAND_Read_ID+0x1a>

		return HAL_BUSY;
 8000d42:	2302      	movs	r3, #2
 8000d44:	e059      	b.n	8000dfa <NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d152      	bne.n	8000df8 <NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	d101      	bne.n	8000d60 <NAND_Read_ID+0x34>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e04c      	b.n	8000dfa <NAND_Read_ID+0xce>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
	    hnand->State = HAL_NAND_STATE_BUSY;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 8000d70:	4b25      	ldr	r3, [pc, #148]	; (8000e08 <NAND_Read_ID+0xdc>)
 8000d72:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000d76:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 8000d78:	4b23      	ldr	r3, [pc, #140]	; (8000e08 <NAND_Read_ID+0xdc>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	2290      	movs	r2, #144	; 0x90
 8000d82:	701a      	strb	r2, [r3, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d84:	f3bf 8f4f 	dsb	sy
}
 8000d88:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <NAND_Read_ID+0xdc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d96:	f3bf 8f4f 	dsb	sy
}
 8000d9a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d123      	bne.n	8000dec <NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <NAND_Read_ID+0xdc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <NAND_Read_ID+0xdc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	3310      	adds	r3, #16
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	0c1b      	lsrs	r3, r3, #16
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	0e1b      	lsrs	r3, r3, #24
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	711a      	strb	r2, [r3, #4]


	    	hnand->State = HAL_NAND_STATE_READY;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e000      	b.n	8000dfa <NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3714      	adds	r7, #20
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200015c8 	.word	0x200015c8

08000e0c <io_nand_read_8b>:
		return NAND_BUSY;
	}
}
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_8b (uint32_t adr, uint8_t *pBuffer, uint32_t size, uint16_t offset)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b090      	sub	sp, #64	; 0x40
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	807b      	strh	r3, [r7, #2]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 8000e1a:	f107 0310 	add.w	r3, r7, #16
 8000e1e:	68f9      	ldr	r1, [r7, #12]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fe87 	bl	8001b34 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 8000e26:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d101      	bne.n	8000e38 <io_nand_read_8b+0x2c>
 8000e34:	2302      	movs	r3, #2
 8000e36:	e1e4      	b.n	8001202 <io_nand_read_8b+0x3f6>

    __HAL_LOCK(nandPort);
 8000e38:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d101      	bne.n	8000e48 <io_nand_read_8b+0x3c>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e1dc      	b.n	8001202 <io_nand_read_8b+0x3f6>
 8000e48:	4b63      	ldr	r3, [pc, #396]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8000e52:	4b61      	ldr	r3, [pc, #388]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8000e5c:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <io_nand_read_8b+0x1d0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8000e62:	8a3b      	ldrh	r3, [r7, #16]
 8000e64:	4619      	mov	r1, r3
 8000e66:	8abb      	ldrh	r3, [r7, #20]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	8a7b      	ldrh	r3, [r7, #18]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	4b5a      	ldr	r3, [pc, #360]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e74:	fb00 f303 	mul.w	r3, r0, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a57      	ldr	r2, [pc, #348]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000e7c:	6812      	ldr	r2, [r2, #0]
 8000e7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	440b      	add	r3, r1
 8000e86:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <io_nand_read_8b+0x1d4>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d910      	bls.n	8000eb2 <io_nand_read_8b+0xa6>
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000e90:	8a3b      	ldrh	r3, [r7, #16]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000e92:	461a      	mov	r2, r3
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000e94:	8a7b      	ldrh	r3, [r7, #18]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000e96:	4619      	mov	r1, r3
        	    		      __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 8000e98:	8abb      	ldrh	r3, [r7, #20]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	9303      	str	r3, [sp, #12]
 8000ea0:	9002      	str	r0, [sp, #8]
 8000ea2:	9101      	str	r1, [sp, #4]
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	4a4e      	ldr	r2, [pc, #312]	; (8000fe4 <io_nand_read_8b+0x1d8>)
 8000eaa:	494f      	ldr	r1, [pc, #316]	; (8000fe8 <io_nand_read_8b+0x1dc>)
 8000eac:	2001      	movs	r0, #1
 8000eae:	f001 fd95 	bl	80029dc <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2100      	movs	r1, #0
 8000eba:	484c      	ldr	r0, [pc, #304]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000ebc:	f00d ff64 	bl	800ed88 <memset>
    tmpLen = 0;
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed0:	f3bf 8f4f 	dsb	sy
}
 8000ed4:	bf00      	nop
    __DSB();

    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 8000ed6:	7ffb      	ldrb	r3, [r7, #31]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d009      	beq.n	8000ef0 <io_nand_read_8b+0xe4>
 8000edc:	4b44      	ldr	r3, [pc, #272]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	1c5a      	adds	r2, r3, #1
 8000ee2:	b2d1      	uxtb	r1, r2
 8000ee4:	4a42      	ldr	r2, [pc, #264]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000ee6:	7011      	strb	r1, [r2, #0]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b40      	ldr	r3, [pc, #256]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]

    // Cards with page size <= 512 bytes
    if ((nandPort->Config.PageSize) <= 512U) {
 8000ef0:	4b39      	ldr	r3, [pc, #228]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000efa:	d87b      	bhi.n	8000ff4 <io_nand_read_8b+0x1e8>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);;
 8000f0e:	7ffb      	ldrb	r3, [r7, #31]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00a      	beq.n	8000f2a <io_nand_read_8b+0x11e>
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	b2d1      	uxtb	r1, r2
 8000f1c:	4a34      	ldr	r2, [pc, #208]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f1e:	7011      	strb	r1, [r2, #0]
 8000f20:	461a      	mov	r2, r3
 8000f22:	887b      	ldrh	r3, [r7, #2]
 8000f24:	b2d9      	uxtb	r1, r3
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000f28:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	b2d2      	uxtb	r2, r2
 8000f34:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f36:	f3bf 8f4f 	dsb	sy
}
 8000f3a:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8000f3c:	7ffb      	ldrb	r3, [r7, #31]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00a      	beq.n	8000f58 <io_nand_read_8b+0x14c>
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	1c5a      	adds	r2, r3, #1
 8000f48:	b2d1      	uxtb	r1, r2
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f4c:	7011      	strb	r1, [r2, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	b2d9      	uxtb	r1, r3
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000f56:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	0a1a      	lsrs	r2, r3, #8
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f66:	f3bf 8f4f 	dsb	sy
}
 8000f6a:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8000f6c:	7ffb      	ldrb	r3, [r7, #31]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d00b      	beq.n	8000f8a <io_nand_read_8b+0x17e>
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	0a19      	lsrs	r1, r3, #8
 8000f76:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	1c5a      	adds	r2, r3, #1
 8000f7c:	b2d0      	uxtb	r0, r2
 8000f7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000f80:	7010      	strb	r0, [r2, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	b2c9      	uxtb	r1, r1
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000f88:	5499      	strb	r1, [r3, r2]
        if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f90:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <io_nand_read_8b+0x1cc>)
 8000f92:	6812      	ldr	r2, [r2, #0]
 8000f94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f9e:	f0c0 80af 	bcc.w	8001100 <io_nand_read_8b+0x2f4>
			*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8000fa2:	6a3b      	ldr	r3, [r7, #32]
 8000fa4:	0c1a      	lsrs	r2, r3, #16
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fb0:	f3bf 8f4f 	dsb	sy
}
 8000fb4:	bf00      	nop
			__DSB();
			if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8000fb6:	7ffb      	ldrb	r3, [r7, #31]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a1 	beq.w	8001100 <io_nand_read_8b+0x2f4>
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	0c19      	lsrs	r1, r3, #16
 8000fc2:	4b0b      	ldr	r3, [pc, #44]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	b2d0      	uxtb	r0, r2
 8000fca:	4a09      	ldr	r2, [pc, #36]	; (8000ff0 <io_nand_read_8b+0x1e4>)
 8000fcc:	7010      	strb	r0, [r2, #0]
 8000fce:	461a      	mov	r2, r3
 8000fd0:	b2c9      	uxtb	r1, r1
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <io_nand_read_8b+0x1e0>)
 8000fd4:	5499      	strb	r1, [r3, r2]
 8000fd6:	e093      	b.n	8001100 <io_nand_read_8b+0x2f4>
 8000fd8:	20000094 	.word	0x20000094
 8000fdc:	200015c8 	.word	0x200015c8
 8000fe0:	20000082 	.word	0x20000082
 8000fe4:	08013ab4 	.word	0x08013ab4
 8000fe8:	080101b0 	.word	0x080101b0
 8000fec:	2000015c 	.word	0x2000015c
 8000ff0:	2000017c 	.word	0x2000017c
        }
    } else {// (hnand->Config.PageSize) > 512
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001000:	f3bf 8f4f 	dsb	sy
}
 8001004:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001006:	7ffb      	ldrb	r3, [r7, #31]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d00a      	beq.n	8001022 <io_nand_read_8b+0x216>
 800100c:	4b7f      	ldr	r3, [pc, #508]	; (800120c <io_nand_read_8b+0x400>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	b2d1      	uxtb	r1, r2
 8001014:	4a7d      	ldr	r2, [pc, #500]	; (800120c <io_nand_read_8b+0x400>)
 8001016:	7011      	strb	r1, [r2, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	887b      	ldrh	r3, [r7, #2]
 800101c:	b2d9      	uxtb	r1, r3
 800101e:	4b7c      	ldr	r3, [pc, #496]	; (8001210 <io_nand_read_8b+0x404>)
 8001020:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001022:	887b      	ldrh	r3, [r7, #2]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29a      	uxth	r2, r3
 8001028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
}
 8001036:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 8001038:	7ffb      	ldrb	r3, [r7, #31]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d00c      	beq.n	8001058 <io_nand_read_8b+0x24c>
 800103e:	887b      	ldrh	r3, [r7, #2]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b299      	uxth	r1, r3
 8001044:	4b71      	ldr	r3, [pc, #452]	; (800120c <io_nand_read_8b+0x400>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	b2d0      	uxtb	r0, r2
 800104c:	4a6f      	ldr	r2, [pc, #444]	; (800120c <io_nand_read_8b+0x400>)
 800104e:	7010      	strb	r0, [r2, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	b2c9      	uxtb	r1, r1
 8001054:	4b6e      	ldr	r3, [pc, #440]	; (8001210 <io_nand_read_8b+0x404>)
 8001056:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800105a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105e:	6a3a      	ldr	r2, [r7, #32]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001064:	f3bf 8f4f 	dsb	sy
}
 8001068:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 800106a:	7ffb      	ldrb	r3, [r7, #31]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00a      	beq.n	8001086 <io_nand_read_8b+0x27a>
 8001070:	4b66      	ldr	r3, [pc, #408]	; (800120c <io_nand_read_8b+0x400>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	1c5a      	adds	r2, r3, #1
 8001076:	b2d1      	uxtb	r1, r2
 8001078:	4a64      	ldr	r2, [pc, #400]	; (800120c <io_nand_read_8b+0x400>)
 800107a:	7011      	strb	r1, [r2, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	6a3b      	ldr	r3, [r7, #32]
 8001080:	b2d9      	uxtb	r1, r3
 8001082:	4b63      	ldr	r3, [pc, #396]	; (8001210 <io_nand_read_8b+0x404>)
 8001084:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	0a1a      	lsrs	r2, r3, #8
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001094:	f3bf 8f4f 	dsb	sy
}
 8001098:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 800109a:	7ffb      	ldrb	r3, [r7, #31]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <io_nand_read_8b+0x2ac>
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	0a19      	lsrs	r1, r3, #8
 80010a4:	4b59      	ldr	r3, [pc, #356]	; (800120c <io_nand_read_8b+0x400>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	1c5a      	adds	r2, r3, #1
 80010aa:	b2d0      	uxtb	r0, r2
 80010ac:	4a57      	ldr	r2, [pc, #348]	; (800120c <io_nand_read_8b+0x400>)
 80010ae:	7010      	strb	r0, [r2, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	b2c9      	uxtb	r1, r1
 80010b4:	4b56      	ldr	r3, [pc, #344]	; (8001210 <io_nand_read_8b+0x404>)
 80010b6:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80010b8:	4b56      	ldr	r3, [pc, #344]	; (8001214 <io_nand_read_8b+0x408>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	4a55      	ldr	r2, [pc, #340]	; (8001214 <io_nand_read_8b+0x408>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010cc:	d318      	bcc.n	8001100 <io_nand_read_8b+0x2f4>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80010ce:	6a3b      	ldr	r3, [r7, #32]
 80010d0:	0c1a      	lsrs	r2, r3, #16
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d8:	b2d2      	uxtb	r2, r2
 80010da:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80010dc:	f3bf 8f4f 	dsb	sy
}
 80010e0:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80010e2:	7ffb      	ldrb	r3, [r7, #31]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00b      	beq.n	8001100 <io_nand_read_8b+0x2f4>
 80010e8:	6a3b      	ldr	r3, [r7, #32]
 80010ea:	0c19      	lsrs	r1, r3, #16
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <io_nand_read_8b+0x400>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	b2d0      	uxtb	r0, r2
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <io_nand_read_8b+0x400>)
 80010f6:	7010      	strb	r0, [r2, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	b2c9      	uxtb	r1, r1
 80010fc:	4b44      	ldr	r3, [pc, #272]	; (8001210 <io_nand_read_8b+0x404>)
 80010fe:	5499      	strb	r1, [r3, r2]
    	}
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800110a:	f3bf 8f4f 	dsb	sy
}
 800110e:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_TRUE1;
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <io_nand_read_8b+0x31e>
 8001116:	4b3d      	ldr	r3, [pc, #244]	; (800120c <io_nand_read_8b+0x400>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	b2d1      	uxtb	r1, r2
 800111e:	4a3b      	ldr	r2, [pc, #236]	; (800120c <io_nand_read_8b+0x400>)
 8001120:	7011      	strb	r1, [r2, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <io_nand_read_8b+0x404>)
 8001126:	2130      	movs	r1, #48	; 0x30
 8001128:	5499      	strb	r1, [r3, r2]


    uint32_t tickstart = 0U;
 800112a:	2300      	movs	r3, #0
 800112c:	61bb      	str	r3, [r7, #24]
    // Check if an extra command is needed for reading pages
    if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <io_nand_read_8b+0x408>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001136:	2b01      	cmp	r3, #1
 8001138:	d134      	bne.n	80011a4 <io_nand_read_8b+0x398>
        tickstart = HAL_GetTick();
 800113a:	f004 f909 	bl	8005350 <HAL_GetTick>
 800113e:	61b8      	str	r0, [r7, #24]
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001140:	e013      	b.n	800116a <io_nand_read_8b+0x35e>
            if((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 8001142:	f004 f905 	bl	8005350 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d90b      	bls.n	800116a <io_nand_read_8b+0x35e>
            	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 8001152:	4b30      	ldr	r3, [pc, #192]	; (8001214 <io_nand_read_8b+0x408>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2203      	movs	r2, #3
 8001158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            	__HAL_UNLOCK(nandPort);
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <io_nand_read_8b+0x408>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
            	return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e04b      	b.n	8001202 <io_nand_read_8b+0x3f6>
        while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 800116a:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <io_nand_read_8b+0x408>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f006 ff2f 	bl	8007fd2 <HAL_NAND_Read_Status>
 8001174:	4603      	mov	r3, r0
 8001176:	2b40      	cmp	r3, #64	; 0x40
 8001178:	d1e3      	bne.n	8001142 <io_nand_read_8b+0x336>
            }
        }

        // Go back to read mode
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001184:	f3bf 8f4f 	dsb	sy
}
 8001188:	bf00      	nop
        __DSB();
        if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d009      	beq.n	80011a4 <io_nand_read_8b+0x398>
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <io_nand_read_8b+0x400>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	b2d1      	uxtb	r1, r2
 8001198:	4a1c      	ldr	r2, [pc, #112]	; (800120c <io_nand_read_8b+0x400>)
 800119a:	7011      	strb	r1, [r2, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <io_nand_read_8b+0x404>)
 80011a0:	2100      	movs	r1, #0
 80011a2:	5499      	strb	r1, [r3, r2]
    }

    // Get Data into Buffer
    uint8_t *buff = pBuffer;
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) *buff++ = *(uint8_t *)deviceaddress;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ac:	e008      	b.n	80011c0 <io_nand_read_8b+0x3b4>
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b2:	1c59      	adds	r1, r3, #1
 80011b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80011b6:	7812      	ldrb	r2, [r2, #0]
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011bc:	3301      	adds	r3, #1
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
 80011c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3f2      	bcc.n	80011ae <io_nand_read_8b+0x3a2>

    nandPort->State = HAL_NAND_STATE_READY;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <io_nand_read_8b+0x408>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <io_nand_read_8b+0x408>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag & (dbg > logOn)) tmpPrint(__func__, tmpBuf, tmpLen);
 80011dc:	7ffb      	ldrb	r3, [r7, #31]
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <io_nand_read_8b+0x40c>)
 80011e0:	7812      	ldrb	r2, [r2, #0]
 80011e2:	2a01      	cmp	r2, #1
 80011e4:	bf8c      	ite	hi
 80011e6:	2201      	movhi	r2, #1
 80011e8:	2200      	movls	r2, #0
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <io_nand_read_8b+0x3f4>
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <io_nand_read_8b+0x400>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	4905      	ldr	r1, [pc, #20]	; (8001210 <io_nand_read_8b+0x404>)
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <io_nand_read_8b+0x410>)
 80011fc:	f7ff fd18 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3730      	adds	r7, #48	; 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000017c 	.word	0x2000017c
 8001210:	2000015c 	.word	0x2000015c
 8001214:	20000094 	.word	0x20000094
 8001218:	20000082 	.word	0x20000082
 800121c:	08013ab4 	.word	0x08013ab4

08001220 <io_nand_write_8b>:
//-----------------------------------------------------------------------------
uint32_t io_nand_write_8b(uint32_t adr, uint8_t *pBuffer, uint32_t size, uint16_t offset)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b090      	sub	sp, #64	; 0x40
 8001224:	af04      	add	r7, sp, #16
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	807b      	strh	r3, [r7, #2]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	68f9      	ldr	r1, [r7, #12]
 8001234:	4618      	mov	r0, r3
 8001236:	f000 fc7d 	bl	8001b34 <io_uint32_to_flash_adr>


    if (nandPort->State == HAL_NAND_STATE_BUSY) return HAL_BUSY;
 800123a:	4b77      	ldr	r3, [pc, #476]	; (8001418 <io_nand_write_8b+0x1f8>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d101      	bne.n	800124c <io_nand_write_8b+0x2c>
 8001248:	2302      	movs	r3, #2
 800124a:	e1e0      	b.n	800160e <io_nand_write_8b+0x3ee>

    __HAL_LOCK(nandPort);
 800124c:	4b72      	ldr	r3, [pc, #456]	; (8001418 <io_nand_write_8b+0x1f8>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <io_nand_write_8b+0x3c>
 8001258:	2302      	movs	r3, #2
 800125a:	e1d8      	b.n	800160e <io_nand_write_8b+0x3ee>
 800125c:	4b6e      	ldr	r3, [pc, #440]	; (8001418 <io_nand_write_8b+0x1f8>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2020 	strb.w	r2, [r3, #32]
    nandPort->State = HAL_NAND_STATE_BUSY;
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <io_nand_write_8b+0x1f8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    uint32_t deviceaddress = devAdr;
 8001270:	4b6a      	ldr	r3, [pc, #424]	; (800141c <io_nand_write_8b+0x1fc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8001276:	8a3b      	ldrh	r3, [r7, #16]
 8001278:	4619      	mov	r1, r3
 800127a:	8abb      	ldrh	r3, [r7, #20]
 800127c:	461a      	mov	r2, r3
 800127e:	8a7b      	ldrh	r3, [r7, #18]
 8001280:	4618      	mov	r0, r3
 8001282:	4b65      	ldr	r3, [pc, #404]	; (8001418 <io_nand_write_8b+0x1f8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001288:	fb00 f303 	mul.w	r3, r0, r3
 800128c:	4413      	add	r3, r2
 800128e:	4a62      	ldr	r2, [pc, #392]	; (8001418 <io_nand_write_8b+0x1f8>)
 8001290:	6812      	ldr	r2, [r2, #0]
 8001292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001294:	fb02 f303 	mul.w	r3, r2, r3
 8001298:	440b      	add	r3, r1
 800129a:	623b      	str	r3, [r7, #32]

    if (dbg > logOn)
 800129c:	4b60      	ldr	r3, [pc, #384]	; (8001420 <io_nand_write_8b+0x200>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d910      	bls.n	80012c6 <io_nand_write_8b+0xa6>
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012a4:	8a3b      	ldrh	r3, [r7, #16]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 80012a6:	461a      	mov	r2, r3
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012a8:	8a7b      	ldrh	r3, [r7, #18]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 80012aa:	4619      	mov	r1, r3
        	    	          __func__, nandaddress, Address.Page, Address.Plane, Address.Block, offset);
 80012ac:	8abb      	ldrh	r3, [r7, #20]
        	    	Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu offset:%u\r\n",
 80012ae:	4618      	mov	r0, r3
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	9303      	str	r3, [sp, #12]
 80012b4:	9002      	str	r0, [sp, #8]
 80012b6:	9101      	str	r1, [sp, #4]
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	6a3b      	ldr	r3, [r7, #32]
 80012bc:	4a59      	ldr	r2, [pc, #356]	; (8001424 <io_nand_write_8b+0x204>)
 80012be:	495a      	ldr	r1, [pc, #360]	; (8001428 <io_nand_write_8b+0x208>)
 80012c0:	2001      	movs	r0, #1
 80012c2:	f001 fb8b 	bl	80029dc <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	77fb      	strb	r3, [r7, #31]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 80012ca:	2220      	movs	r2, #32
 80012cc:	2100      	movs	r1, #0
 80012ce:	4857      	ldr	r0, [pc, #348]	; (800142c <io_nand_write_8b+0x20c>)
 80012d0:	f00d fd5a 	bl	800ed88 <memset>
    tmpLen = 0;
 80012d4:	4b56      	ldr	r3, [pc, #344]	; (8001430 <io_nand_write_8b+0x210>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

    /* Send write page command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80012e4:	f3bf 8f4f 	dsb	sy
}
 80012e8:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_AREA_A;
 80012ea:	7ffb      	ldrb	r3, [r7, #31]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <io_nand_write_8b+0xe4>
 80012f0:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <io_nand_write_8b+0x210>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	b2d1      	uxtb	r1, r2
 80012f8:	4a4d      	ldr	r2, [pc, #308]	; (8001430 <io_nand_write_8b+0x210>)
 80012fa:	7011      	strb	r1, [r2, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b4b      	ldr	r3, [pc, #300]	; (800142c <io_nand_write_8b+0x20c>)
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 8001304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800130a:	2280      	movs	r2, #128	; 0x80
 800130c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE0;
 8001314:	7ffb      	ldrb	r3, [r7, #31]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d009      	beq.n	800132e <io_nand_write_8b+0x10e>
 800131a:	4b45      	ldr	r3, [pc, #276]	; (8001430 <io_nand_write_8b+0x210>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	b2d1      	uxtb	r1, r2
 8001322:	4a43      	ldr	r2, [pc, #268]	; (8001430 <io_nand_write_8b+0x210>)
 8001324:	7011      	strb	r1, [r2, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <io_nand_write_8b+0x20c>)
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	5499      	strb	r1, [r3, r2]

    /* Cards with page size <= 512 bytes */
    if (nandPort->Config.PageSize <= 512U) {
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <io_nand_write_8b+0x1f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001338:	d87c      	bhi.n	8001434 <io_nand_write_8b+0x214>
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	887a      	ldrh	r2, [r7, #2]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001346:	f3bf 8f4f 	dsb	sy
}
 800134a:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 800134c:	7ffb      	ldrb	r3, [r7, #31]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d00a      	beq.n	8001368 <io_nand_write_8b+0x148>
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <io_nand_write_8b+0x210>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	b2d1      	uxtb	r1, r2
 800135a:	4a35      	ldr	r2, [pc, #212]	; (8001430 <io_nand_write_8b+0x210>)
 800135c:	7011      	strb	r1, [r2, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	b2d9      	uxtb	r1, r3
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <io_nand_write_8b+0x20c>)
 8001366:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136e:	6a3a      	ldr	r2, [r7, #32]
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001374:	f3bf 8f4f 	dsb	sy
}
 8001378:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 800137a:	7ffb      	ldrb	r3, [r7, #31]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00a      	beq.n	8001396 <io_nand_write_8b+0x176>
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <io_nand_write_8b+0x210>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	1c5a      	adds	r2, r3, #1
 8001386:	b2d1      	uxtb	r1, r2
 8001388:	4a29      	ldr	r2, [pc, #164]	; (8001430 <io_nand_write_8b+0x210>)
 800138a:	7011      	strb	r1, [r2, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	b2d9      	uxtb	r1, r3
 8001392:	4b26      	ldr	r3, [pc, #152]	; (800142c <io_nand_write_8b+0x20c>)
 8001394:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	0a1a      	lsrs	r2, r3, #8
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013a4:	f3bf 8f4f 	dsb	sy
}
 80013a8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80013aa:	7ffb      	ldrb	r3, [r7, #31]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00b      	beq.n	80013c8 <io_nand_write_8b+0x1a8>
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	0a19      	lsrs	r1, r3, #8
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <io_nand_write_8b+0x210>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	b2d0      	uxtb	r0, r2
 80013bc:	4a1c      	ldr	r2, [pc, #112]	; (8001430 <io_nand_write_8b+0x210>)
 80013be:	7010      	strb	r0, [r2, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	b2c9      	uxtb	r1, r1
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <io_nand_write_8b+0x20c>)
 80013c6:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <io_nand_write_8b+0x1f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ce:	4a12      	ldr	r2, [pc, #72]	; (8001418 <io_nand_write_8b+0x1f8>)
 80013d0:	6812      	ldr	r2, [r2, #0]
 80013d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013dc:	f0c0 80b0 	bcc.w	8001540 <io_nand_write_8b+0x320>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80013e0:	6a3b      	ldr	r3, [r7, #32]
 80013e2:	0c1a      	lsrs	r2, r3, #16
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013ee:	f3bf 8f4f 	dsb	sy
}
 80013f2:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 80013f4:	7ffb      	ldrb	r3, [r7, #31]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 80a2 	beq.w	8001540 <io_nand_write_8b+0x320>
 80013fc:	6a3b      	ldr	r3, [r7, #32]
 80013fe:	0c19      	lsrs	r1, r3, #16
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <io_nand_write_8b+0x210>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	1c5a      	adds	r2, r3, #1
 8001406:	b2d0      	uxtb	r0, r2
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <io_nand_write_8b+0x210>)
 800140a:	7010      	strb	r0, [r2, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	b2c9      	uxtb	r1, r1
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <io_nand_write_8b+0x20c>)
 8001412:	5499      	strb	r1, [r3, r2]
 8001414:	e094      	b.n	8001540 <io_nand_write_8b+0x320>
 8001416:	bf00      	nop
 8001418:	20000094 	.word	0x20000094
 800141c:	200015c8 	.word	0x200015c8
 8001420:	20000082 	.word	0x20000082
 8001424:	08013ac4 	.word	0x08013ac4
 8001428:	080101b0 	.word	0x080101b0
 800142c:	2000015c 	.word	0x2000015c
 8001430:	2000017c 	.word	0x2000017c
        }
    } else {/* (hnand->Config.PageSize) > 512 */
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(offset);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143a:	887a      	ldrh	r2, [r7, #2]
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001440:	f3bf 8f4f 	dsb	sy
}
 8001444:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_1ST_CYCLE(offset);
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00a      	beq.n	8001462 <io_nand_write_8b+0x242>
 800144c:	4b72      	ldr	r3, [pc, #456]	; (8001618 <io_nand_write_8b+0x3f8>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	1c5a      	adds	r2, r3, #1
 8001452:	b2d1      	uxtb	r1, r2
 8001454:	4a70      	ldr	r2, [pc, #448]	; (8001618 <io_nand_write_8b+0x3f8>)
 8001456:	7011      	strb	r1, [r2, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	b2d9      	uxtb	r1, r3
 800145e:	4b6f      	ldr	r3, [pc, #444]	; (800161c <io_nand_write_8b+0x3fc>)
 8001460:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(offset);
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	0a1b      	lsrs	r3, r3, #8
 8001466:	b29a      	uxth	r2, r3
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001472:	f3bf 8f4f 	dsb	sy
}
 8001476:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = COLUMN_2ND_CYCLE(offset);
 8001478:	7ffb      	ldrb	r3, [r7, #31]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <io_nand_write_8b+0x278>
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	b299      	uxth	r1, r3
 8001484:	4b64      	ldr	r3, [pc, #400]	; (8001618 <io_nand_write_8b+0x3f8>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	1c5a      	adds	r2, r3, #1
 800148a:	b2d0      	uxtb	r0, r2
 800148c:	4a62      	ldr	r2, [pc, #392]	; (8001618 <io_nand_write_8b+0x3f8>)
 800148e:	7010      	strb	r0, [r2, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	b2c9      	uxtb	r1, r1
 8001494:	4b61      	ldr	r3, [pc, #388]	; (800161c <io_nand_write_8b+0x3fc>)
 8001496:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800149e:	6a3a      	ldr	r2, [r7, #32]
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014a4:	f3bf 8f4f 	dsb	sy
}
 80014a8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 80014aa:	7ffb      	ldrb	r3, [r7, #31]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d00a      	beq.n	80014c6 <io_nand_write_8b+0x2a6>
 80014b0:	4b59      	ldr	r3, [pc, #356]	; (8001618 <io_nand_write_8b+0x3f8>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	1c5a      	adds	r2, r3, #1
 80014b6:	b2d1      	uxtb	r1, r2
 80014b8:	4a57      	ldr	r2, [pc, #348]	; (8001618 <io_nand_write_8b+0x3f8>)
 80014ba:	7011      	strb	r1, [r2, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	b2d9      	uxtb	r1, r3
 80014c2:	4b56      	ldr	r3, [pc, #344]	; (800161c <io_nand_write_8b+0x3fc>)
 80014c4:	5499      	strb	r1, [r3, r2]
    	*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	0a1a      	lsrs	r2, r3, #8
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80014d4:	f3bf 8f4f 	dsb	sy
}
 80014d8:	bf00      	nop
    	__DSB();
    	if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 80014da:	7ffb      	ldrb	r3, [r7, #31]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <io_nand_write_8b+0x2d8>
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	0a19      	lsrs	r1, r3, #8
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <io_nand_write_8b+0x3f8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	1c5a      	adds	r2, r3, #1
 80014ea:	b2d0      	uxtb	r0, r2
 80014ec:	4a4a      	ldr	r2, [pc, #296]	; (8001618 <io_nand_write_8b+0x3f8>)
 80014ee:	7010      	strb	r0, [r2, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	b2c9      	uxtb	r1, r1
 80014f4:	4b49      	ldr	r3, [pc, #292]	; (800161c <io_nand_write_8b+0x3fc>)
 80014f6:	5499      	strb	r1, [r3, r2]
    	if ((nandPort->Config.BlockSize * nandPort->Config.BlockNbr) > 65535U) {
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <io_nand_write_8b+0x400>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	4a48      	ldr	r2, [pc, #288]	; (8001620 <io_nand_write_8b+0x400>)
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001504:	fb02 f303 	mul.w	r3, r2, r3
 8001508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150c:	d318      	bcc.n	8001540 <io_nand_write_8b+0x320>
    		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800150e:	6a3b      	ldr	r3, [r7, #32]
 8001510:	0c1a      	lsrs	r2, r3, #16
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
    		__DSB();
    		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001522:	7ffb      	ldrb	r3, [r7, #31]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <io_nand_write_8b+0x320>
 8001528:	6a3b      	ldr	r3, [r7, #32]
 800152a:	0c19      	lsrs	r1, r3, #16
 800152c:	4b3a      	ldr	r3, [pc, #232]	; (8001618 <io_nand_write_8b+0x3f8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	b2d0      	uxtb	r0, r2
 8001534:	4a38      	ldr	r2, [pc, #224]	; (8001618 <io_nand_write_8b+0x3f8>)
 8001536:	7010      	strb	r0, [r2, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	b2c9      	uxtb	r1, r1
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <io_nand_write_8b+0x3fc>)
 800153e:	5499      	strb	r1, [r3, r2]
        }
    }


    /* Write data to memory */
    uint8_t *buff = pBuffer;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (uint32_t index = 0; index < size; index++) {
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
 8001548:	e00b      	b.n	8001562 <io_nand_write_8b+0x342>
    	*(__IO uint8_t *)deviceaddress = *buff++;
 800154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001556:	f3bf 8f4f 	dsb	sy
}
 800155a:	bf00      	nop
    for (uint32_t index = 0; index < size; index++) {
 800155c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155e:	3301      	adds	r3, #1
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
 8001562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	429a      	cmp	r2, r3
 8001568:	d3ef      	bcc.n	800154a <io_nand_write_8b+0x32a>
    	__DSB();
    }

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001570:	2210      	movs	r2, #16
 8001572:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001574:	f3bf 8f4f 	dsb	sy
}
 8001578:	bf00      	nop
    __DSB();
    if (tflag) tmpBuf[tmpLen++] = NAND_CMD_WRITE_TRUE1;
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d021      	beq.n	80015c4 <io_nand_write_8b+0x3a4>
 8001580:	4b25      	ldr	r3, [pc, #148]	; (8001618 <io_nand_write_8b+0x3f8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	b2d1      	uxtb	r1, r2
 8001588:	4a23      	ldr	r2, [pc, #140]	; (8001618 <io_nand_write_8b+0x3f8>)
 800158a:	7011      	strb	r1, [r2, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <io_nand_write_8b+0x3fc>)
 8001590:	2110      	movs	r1, #16
 8001592:	5499      	strb	r1, [r3, r2]

    /* Read status until NAND is ready */
    uint32_t tickstart;
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001594:	e016      	b.n	80015c4 <io_nand_write_8b+0x3a4>
        tickstart = HAL_GetTick();
 8001596:	f003 fedb 	bl	8005350 <HAL_GetTick>
 800159a:	61b8      	str	r0, [r7, #24]
        if ((HAL_GetTick() - tickstart ) > NAND_WRITE_TIMEOUT) {
 800159c:	f003 fed8 	bl	8005350 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015aa:	d90b      	bls.n	80015c4 <io_nand_write_8b+0x3a4>
        	nandPort->State = HAL_NAND_STATE_ERROR;// Update the NAND controller state
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <io_nand_write_8b+0x400>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        	__HAL_UNLOCK(nandPort);
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <io_nand_write_8b+0x400>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2020 	strb.w	r2, [r3, #32]
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e024      	b.n	800160e <io_nand_write_8b+0x3ee>
    while(HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 80015c4:	4b16      	ldr	r3, [pc, #88]	; (8001620 <io_nand_write_8b+0x400>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f006 fd02 	bl	8007fd2 <HAL_NAND_Read_Status>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d1e0      	bne.n	8001596 <io_nand_write_8b+0x376>
        }
    }

    nandPort->State = HAL_NAND_STATE_READY;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <io_nand_write_8b+0x400>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    __HAL_UNLOCK(nandPort);
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <io_nand_write_8b+0x400>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2020 	strb.w	r2, [r3, #32]

    if (tflag & (dbg > logOn)) tmpPrint(__func__, tmpBuf, tmpLen);
 80015e8:	7ffb      	ldrb	r3, [r7, #31]
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <io_nand_write_8b+0x404>)
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	2a01      	cmp	r2, #1
 80015f0:	bf8c      	ite	hi
 80015f2:	2201      	movhi	r2, #1
 80015f4:	2200      	movls	r2, #0
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <io_nand_write_8b+0x3ec>
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <io_nand_write_8b+0x3f8>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4905      	ldr	r1, [pc, #20]	; (800161c <io_nand_write_8b+0x3fc>)
 8001606:	4808      	ldr	r0, [pc, #32]	; (8001628 <io_nand_write_8b+0x408>)
 8001608:	f7ff fb12 	bl	8000c30 <tmpPrint>

    return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	2000017c 	.word	0x2000017c
 800161c:	2000015c 	.word	0x2000015c
 8001620:	20000094 	.word	0x20000094
 8001624:	20000082 	.word	0x20000082
 8001628:	08013ac4 	.word	0x08013ac4

0800162c <io_nand_erase_block>:
//-----------------------------------------------------------------------------
//HAL_StatusTypeDef io_nand_erase_block(NAND_AddressTypeDef *pAddress)
HAL_StatusTypeDef io_nand_erase_block(uint32_t adr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af04      	add	r7, sp, #16
 8001632:	6078      	str	r0, [r7, #4]
NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 8001634:	f107 0308 	add.w	r3, r7, #8
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fa7a 	bl	8001b34 <io_uint32_to_flash_adr>

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001640:	4b72      	ldr	r3, [pc, #456]	; (800180c <io_nand_erase_block+0x1e0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d101      	bne.n	8001652 <io_nand_erase_block+0x26>

		return HAL_BUSY;
 800164e:	2302      	movs	r3, #2
 8001650:	e0d7      	b.n	8001802 <io_nand_erase_block+0x1d6>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001652:	4b6e      	ldr	r3, [pc, #440]	; (800180c <io_nand_erase_block+0x1e0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	f040 80cd 	bne.w	80017fc <io_nand_erase_block+0x1d0>

		__HAL_LOCK(nandPort);
 8001662:	4b6a      	ldr	r3, [pc, #424]	; (800180c <io_nand_erase_block+0x1e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <io_nand_erase_block+0x46>
 800166e:	2302      	movs	r3, #2
 8001670:	e0c7      	b.n	8001802 <io_nand_erase_block+0x1d6>
 8001672:	4b66      	ldr	r3, [pc, #408]	; (800180c <io_nand_erase_block+0x1e0>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 800167c:	4b63      	ldr	r3, [pc, #396]	; (800180c <io_nand_erase_block+0x1e0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		uint32_t deviceaddress = devAdr;
 8001686:	4b62      	ldr	r3, [pc, #392]	; (8001810 <io_nand_erase_block+0x1e4>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 800168c:	893b      	ldrh	r3, [r7, #8]
 800168e:	4619      	mov	r1, r3
 8001690:	89bb      	ldrh	r3, [r7, #12]
 8001692:	461a      	mov	r2, r3
 8001694:	897b      	ldrh	r3, [r7, #10]
 8001696:	4618      	mov	r0, r3
 8001698:	4b5c      	ldr	r3, [pc, #368]	; (800180c <io_nand_erase_block+0x1e0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	fb00 f303 	mul.w	r3, r0, r3
 80016a2:	4413      	add	r3, r2
 80016a4:	4a59      	ldr	r2, [pc, #356]	; (800180c <io_nand_erase_block+0x1e0>)
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016aa:	fb02 f303 	mul.w	r3, r2, r3
 80016ae:	440b      	add	r3, r1
 80016b0:	613b      	str	r3, [r7, #16]


		if (dbg > logOn)
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <io_nand_erase_block+0x1e8>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d90b      	bls.n	80016d2 <io_nand_erase_block+0xa6>
					Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
							  __func__, nandaddress, Address.Page, Address.Plane, Address.Block);
 80016ba:	893b      	ldrh	r3, [r7, #8]
 80016bc:	897a      	ldrh	r2, [r7, #10]
 80016be:	89b9      	ldrh	r1, [r7, #12]
					Report(1, "[%s] nand_adr:0x%X page:%lu plane:%lu block:%lu\r\n",
 80016c0:	9102      	str	r1, [sp, #8]
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4a53      	ldr	r2, [pc, #332]	; (8001818 <io_nand_erase_block+0x1ec>)
 80016ca:	4954      	ldr	r1, [pc, #336]	; (800181c <io_nand_erase_block+0x1f0>)
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 f985 	bl	80029dc <Report>

#ifdef SET_NAND_CMD
    bool tflag = true;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
    memset(tmpBuf, 0, sizeof(tmpBuf));
 80016d6:	2220      	movs	r2, #32
 80016d8:	2100      	movs	r1, #0
 80016da:	4851      	ldr	r0, [pc, #324]	; (8001820 <io_nand_erase_block+0x1f4>)
 80016dc:	f00d fb54 	bl	800ed88 <memset>
    tmpLen = 0;
 80016e0:	4b50      	ldr	r3, [pc, #320]	; (8001824 <io_nand_erase_block+0x1f8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	701a      	strb	r2, [r3, #0]
#else
    bool tflag = false;
#endif

		/* Send Erase block command sequence */
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	2260      	movs	r2, #96	; 0x60
 80016ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016f0:	f3bf 8f4f 	dsb	sy
}
 80016f4:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE0;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <io_nand_erase_block+0xe4>
 80016fc:	4b49      	ldr	r3, [pc, #292]	; (8001824 <io_nand_erase_block+0x1f8>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	b2d1      	uxtb	r1, r2
 8001704:	4a47      	ldr	r2, [pc, #284]	; (8001824 <io_nand_erase_block+0x1f8>)
 8001706:	7011      	strb	r1, [r2, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b45      	ldr	r3, [pc, #276]	; (8001820 <io_nand_erase_block+0x1f4>)
 800170c:	2160      	movs	r1, #96	; 0x60
 800170e:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800171c:	f3bf 8f4f 	dsb	sy
}
 8001720:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_1ST_CYCLE(nandaddress);
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d00a      	beq.n	800173e <io_nand_erase_block+0x112>
 8001728:	4b3e      	ldr	r3, [pc, #248]	; (8001824 <io_nand_erase_block+0x1f8>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	b2d1      	uxtb	r1, r2
 8001730:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <io_nand_erase_block+0x1f8>)
 8001732:	7011      	strb	r1, [r2, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	b2d9      	uxtb	r1, r3
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <io_nand_erase_block+0x1f4>)
 800173c:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	0a1a      	lsrs	r2, r3, #8
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800174c:	f3bf 8f4f 	dsb	sy
}
 8001750:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_2ND_CYCLE(nandaddress);
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00b      	beq.n	8001770 <io_nand_erase_block+0x144>
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	0a19      	lsrs	r1, r3, #8
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <io_nand_erase_block+0x1f8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	b2d0      	uxtb	r0, r2
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <io_nand_erase_block+0x1f8>)
 8001766:	7010      	strb	r0, [r2, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	b2c9      	uxtb	r1, r1
 800176c:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <io_nand_erase_block+0x1f4>)
 800176e:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	0c1a      	lsrs	r2, r3, #16
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800177e:	f3bf 8f4f 	dsb	sy
}
 8001782:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = ADDR_3RD_CYCLE(nandaddress);
 8001784:	7bfb      	ldrb	r3, [r7, #15]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <io_nand_erase_block+0x176>
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	0c19      	lsrs	r1, r3, #16
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <io_nand_erase_block+0x1f8>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	b2d0      	uxtb	r0, r2
 8001796:	4a23      	ldr	r2, [pc, #140]	; (8001824 <io_nand_erase_block+0x1f8>)
 8001798:	7010      	strb	r0, [r2, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	b2c9      	uxtb	r1, r1
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <io_nand_erase_block+0x1f4>)
 80017a0:	5499      	strb	r1, [r3, r2]
		*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	22d0      	movs	r2, #208	; 0xd0
 80017aa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ac:	f3bf 8f4f 	dsb	sy
}
 80017b0:	bf00      	nop
		__DSB();
		if (tflag) tmpBuf[tmpLen++] = NAND_CMD_ERASE1;
 80017b2:	7bfb      	ldrb	r3, [r7, #15]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d009      	beq.n	80017cc <io_nand_erase_block+0x1a0>
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <io_nand_erase_block+0x1f8>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	b2d1      	uxtb	r1, r2
 80017c0:	4a18      	ldr	r2, [pc, #96]	; (8001824 <io_nand_erase_block+0x1f8>)
 80017c2:	7011      	strb	r1, [r2, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b16      	ldr	r3, [pc, #88]	; (8001820 <io_nand_erase_block+0x1f4>)
 80017c8:	21d0      	movs	r1, #208	; 0xd0
 80017ca:	5499      	strb	r1, [r3, r2]

		nandPort->State = HAL_NAND_STATE_READY;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <io_nand_erase_block+0x1e0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <io_nand_erase_block+0x1e0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

		if (tflag & dbg) tmpPrint(__func__, tmpBuf, tmpLen);
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <io_nand_erase_block+0x1e8>)
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d009      	beq.n	8001800 <io_nand_erase_block+0x1d4>
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <io_nand_erase_block+0x1f8>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	490b      	ldr	r1, [pc, #44]	; (8001820 <io_nand_erase_block+0x1f4>)
 80017f4:	4808      	ldr	r0, [pc, #32]	; (8001818 <io_nand_erase_block+0x1ec>)
 80017f6:	f7ff fa1b 	bl	8000c30 <tmpPrint>
 80017fa:	e001      	b.n	8001800 <io_nand_erase_block+0x1d4>

	} else {

		return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <io_nand_erase_block+0x1d6>

	}

	return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000094 	.word	0x20000094
 8001810:	200015c8 	.word	0x200015c8
 8001814:	20000082 	.word	0x20000082
 8001818:	08013ad8 	.word	0x08013ad8
 800181c:	080101ec 	.word	0x080101ec
 8001820:	2000015c 	.word	0x2000015c
 8001824:	2000017c 	.word	0x2000017c

08001828 <io_nand_read_spare_8b>:
//-----------------------------------------------------------------------------------------
HAL_StatusTypeDef io_nand_read_spare_8b(uint32_t adr, uint8_t *pBuffer, uint32_t NumSpareAreaToRead)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001834:	4ba1      	ldr	r3, [pc, #644]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d101      	bne.n	8001846 <io_nand_read_spare_8b+0x1e>
		return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
 8001844:	e16f      	b.n	8001b26 <io_nand_read_spare_8b+0x2fe>
	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 8001846:	4b9d      	ldr	r3, [pc, #628]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b01      	cmp	r3, #1
 8001852:	f040 8167 	bne.w	8001b24 <io_nand_read_spare_8b+0x2fc>
		__HAL_LOCK(nandPort);
 8001856:	4b99      	ldr	r3, [pc, #612]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <io_nand_read_spare_8b+0x3e>
 8001862:	2302      	movs	r3, #2
 8001864:	e15f      	b.n	8001b26 <io_nand_read_spare_8b+0x2fe>
 8001866:	4b95      	ldr	r3, [pc, #596]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 8001870:	4b92      	ldr	r3, [pc, #584]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2202      	movs	r2, #2
 8001876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef Address = io_uint32_to_flash_adr(adr);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	68f9      	ldr	r1, [r7, #12]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f957 	bl	8001b34 <io_uint32_to_flash_adr>

		//uint32_t numsparearearead = 0U;
		uint32_t nbspare = NumSpareAreaToRead;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t deviceaddress = devAdr;
 800188a:	4b8d      	ldr	r3, [pc, #564]	; (8001ac0 <io_nand_read_spare_8b+0x298>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t nandaddress = ARRAY_ADDRESS(&Address, nandPort);
 8001890:	8abb      	ldrh	r3, [r7, #20]
 8001892:	4619      	mov	r1, r3
 8001894:	8b3b      	ldrh	r3, [r7, #24]
 8001896:	461a      	mov	r2, r3
 8001898:	8afb      	ldrh	r3, [r7, #22]
 800189a:	4618      	mov	r0, r3
 800189c:	4b87      	ldr	r3, [pc, #540]	; (8001abc <io_nand_read_spare_8b+0x294>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a2:	fb00 f303 	mul.w	r3, r0, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	4a84      	ldr	r2, [pc, #528]	; (8001abc <io_nand_read_spare_8b+0x294>)
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	440b      	add	r3, r1
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Column in page address */
		uint32_t columnaddress = COLUMN_ADDRESS(nandPort);
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <io_nand_read_spare_8b+0x294>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018bc:	623b      	str	r3, [r7, #32]

		/* Spare area(s) read loop */
		while ((nbspare != 0U) && (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)))) {
 80018be:	e116      	b.n	8001aee <io_nand_read_spare_8b+0x2c6>
			if ((nandPort->Config.PageSize) <= 512U) {
 80018c0:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <io_nand_read_spare_8b+0x294>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ca:	d852      	bhi.n	8001972 <io_nand_read_spare_8b+0x14a>
				/* Send read spare area command sequence */
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_C;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	2250      	movs	r2, #80	; 0x50
 80018d4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018d6:	f3bf 8f4f 	dsb	sy
}
 80018da:	bf00      	nop
				__DSB();

				if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) <= 65535U) {
 80018dc:	4b77      	ldr	r3, [pc, #476]	; (8001abc <io_nand_read_spare_8b+0x294>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	4a76      	ldr	r2, [pc, #472]	; (8001abc <io_nand_read_spare_8b+0x294>)
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80018e8:	fb02 f303 	mul.w	r3, r2, r3
 80018ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f0:	d21a      	bcs.n	8001928 <io_nand_read_spare_8b+0x100>
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800190e:	f3bf 8f4f 	dsb	sy
}
 8001912:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001916:	0a1a      	lsrs	r2, r3, #8
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001922:	f3bf 8f4f 	dsb	sy
}
 8001926:	e08d      	b.n	8001a44 <io_nand_read_spare_8b+0x21c>
					__DSB();
				} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001932:	f3bf 8f4f 	dsb	sy
}
 8001936:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001944:	f3bf 8f4f 	dsb	sy
}
 8001948:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800194a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800194c:	0a1a      	lsrs	r2, r3, #8
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001954:	b2d2      	uxtb	r2, r2
 8001956:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001958:	f3bf 8f4f 	dsb	sy
}
 800195c:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001960:	0c1a      	lsrs	r2, r3, #16
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800196c:	f3bf 8f4f 	dsb	sy
}
 8001970:	e068      	b.n	8001a44 <io_nand_read_spare_8b+0x21c>
					__DSB();
				}
			} else {/* (hnand->Config.PageSize) > 512 */
				/* Send read spare area command sequence */
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800197c:	f3bf 8f4f 	dsb	sy
}
 8001980:	bf00      	nop
				__DSB();

				if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) <= 65535U) {
 8001982:	4b4e      	ldr	r3, [pc, #312]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <io_nand_read_spare_8b+0x294>)
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800198e:	fb02 f303 	mul.w	r3, r2, r3
 8001992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001996:	d225      	bcs.n	80019e4 <io_nand_read_spare_8b+0x1bc>
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800199e:	6a3a      	ldr	r2, [r7, #32]
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	0a1a      	lsrs	r2, r3, #8
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019b4:	b2d2      	uxtb	r2, r2
 80019b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ca:	f3bf 8f4f 	dsb	sy
}
 80019ce:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80019d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019d2:	0a1a      	lsrs	r2, r3, #8
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019de:	f3bf 8f4f 	dsb	sy
}
 80019e2:	e02f      	b.n	8001a44 <io_nand_read_spare_8b+0x21c>
					__DSB();
				} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_1ST_CYCLE(columnaddress);
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f0:	f3bf 8f4f 	dsb	sy
}
 80019f4:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = COLUMN_2ND_CYCLE(columnaddress);
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	0a1a      	lsrs	r2, r3, #8
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a04:	f3bf 8f4f 	dsb	sy
}
 8001a08:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a16:	f3bf 8f4f 	dsb	sy
}
 8001a1a:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1e:	0a1a      	lsrs	r2, r3, #8
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a2a:	f3bf 8f4f 	dsb	sy
}
 8001a2e:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8001a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a32:	0c1a      	lsrs	r2, r3, #16
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a3e:	f3bf 8f4f 	dsb	sy
}
 8001a42:	bf00      	nop
					__DSB();
				}
			}

			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_TRUE1;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a4a:	2230      	movs	r2, #48	; 0x30
 8001a4c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a4e:	f3bf 8f4f 	dsb	sy
}
 8001a52:	bf00      	nop
			__DSB();

			if (nandPort->Config.ExtraCommandEnable == ENABLE) {
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d127      	bne.n	8001ab0 <io_nand_read_spare_8b+0x288>
				uint32_t tickstart = HAL_GetTick();
 8001a60:	f003 fc76 	bl	8005350 <HAL_GetTick>
 8001a64:	61f8      	str	r0, [r7, #28]
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001a66:	e013      	b.n	8001a90 <io_nand_read_spare_8b+0x268>
					if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT) {
 8001a68:	f003 fc72 	bl	8005350 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a76:	d90b      	bls.n	8001a90 <io_nand_read_spare_8b+0x268>
						nandPort->State = HAL_NAND_STATE_ERROR;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
						__HAL_UNLOCK(nandPort);
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2020 	strb.w	r2, [r3, #32]
						return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e04a      	b.n	8001b26 <io_nand_read_spare_8b+0x2fe>
				while (HAL_NAND_Read_Status(nandPort) != NAND_READY) {
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <io_nand_read_spare_8b+0x294>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fa9c 	bl	8007fd2 <HAL_NAND_Read_Status>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b40      	cmp	r3, #64	; 0x40
 8001a9e:	d1e3      	bne.n	8001a68 <io_nand_read_spare_8b+0x240>
					}
				}

				/* Go back to read mode */
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001aaa:	f3bf 8f4f 	dsb	sy
}
 8001aae:	bf00      	nop
				__DSB();
			}

			/* Get Data into Buffer */
			uint8_t *buff = pBuffer;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
			for (uint32_t index = 0U; index < nandPort->Config.SpareAreaSize; index++) {
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ab8:	e00d      	b.n	8001ad6 <io_nand_read_spare_8b+0x2ae>
 8001aba:	bf00      	nop
 8001abc:	20000094 	.word	0x20000094
 8001ac0:	200015c8 	.word	0x200015c8
				*buff++ = *(uint8_t *)deviceaddress;
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac8:	1c59      	adds	r1, r3, #1
 8001aca:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	701a      	strb	r2, [r3, #0]
			for (uint32_t index = 0U; index < nandPort->Config.SpareAreaSize; index++) {
 8001ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ad6:	4b16      	ldr	r3, [pc, #88]	; (8001b30 <io_nand_read_spare_8b+0x308>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d3f0      	bcc.n	8001ac4 <io_nand_read_spare_8b+0x29c>
			}

			//numsparearearead++;
			nbspare--;
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
			nandaddress = (uint32_t)(nandaddress + 1U);
 8001ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aea:	3301      	adds	r3, #1
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
		while ((nbspare != 0U) && (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)))) {
 8001aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d00b      	beq.n	8001b0c <io_nand_read_spare_8b+0x2e4>
 8001af4:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <io_nand_read_spare_8b+0x308>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <io_nand_read_spare_8b+0x308>)
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b00:	fb02 f303 	mul.w	r3, r2, r3
 8001b04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b06:	429a      	cmp	r2, r3
 8001b08:	f4ff aeda 	bcc.w	80018c0 <io_nand_read_spare_8b+0x98>
		}//while


		nandPort->State = HAL_NAND_STATE_READY;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <io_nand_read_spare_8b+0x308>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <io_nand_read_spare_8b+0x308>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2020 	strb.w	r2, [r3, #32]
	} else {
		return HAL_ERROR;
	}

	return HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	e000      	b.n	8001b26 <io_nand_read_spare_8b+0x2fe>
		return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3738      	adds	r7, #56	; 0x38
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000094 	.word	0x20000094

08001b34 <io_uint32_to_flash_adr>:
{
	return  ((adr->Plane * chipConf.PlaneSize) + (adr->Block * chipConf.BlockSize) + adr->Page);
}
//-----------------------------------------------------------------------------------------
NAND_AddressTypeDef io_uint32_to_flash_adr(uint32_t adr)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
NAND_AddressTypeDef a;

	a.Plane = adr / chipConf.PlaneSize;
 8001b3e:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <io_uint32_to_flash_adr+0x7c>)
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	817b      	strh	r3, [r7, #10]
	a.Block = (adr - a.Plane * chipConf.PlaneSize) / chipConf.BlockSize;
 8001b4c:	897b      	ldrh	r3, [r7, #10]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <io_uint32_to_flash_adr+0x7c>)
 8001b52:	695b      	ldr	r3, [r3, #20]
 8001b54:	fb02 f303 	mul.w	r3, r2, r3
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	1ad2      	subs	r2, r2, r3
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <io_uint32_to_flash_adr+0x7c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	81bb      	strh	r3, [r7, #12]
	a.Page  = adr - (a.Plane * chipConf.PlaneSize) - (a.Block * chipConf.BlockSize);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	8979      	ldrh	r1, [r7, #10]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <io_uint32_to_flash_adr+0x7c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	fb11 f303 	smulbb	r3, r1, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	89b9      	ldrh	r1, [r7, #12]
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <io_uint32_to_flash_adr+0x7c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	fb11 f303 	smulbb	r3, r1, r3
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	813b      	strh	r3, [r7, #8]

	return a;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	461a      	mov	r2, r3
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	6818      	ldr	r0, [r3, #0]
 8001b9c:	6010      	str	r0, [r2, #0]
 8001b9e:	889b      	ldrh	r3, [r3, #4]
 8001ba0:	8093      	strh	r3, [r2, #4]
}
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	200015e8 	.word	0x200015e8

08001bb4 <io_nand_read>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read(uint32_t adr, uint8_t *buffer, uint32_t size, uint16_t offset)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	807b      	strh	r3, [r7, #2]

	if (io_nand_read_8b(adr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f7ff f91f 	bl	8000e0c <io_nand_read_8b>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d006      	beq.n	8001be2 <io_nand_read+0x2e>
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <io_nand_read+0x38>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	f043 0320 	orr.w	r3, r3, #32
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <io_nand_read+0x38>)
 8001be0:	801a      	strh	r2, [r3, #0]

    return 0;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200005a4 	.word	0x200005a4

08001bf0 <io_nand_read_spare>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_read_spare(uint32_t adr, uint8_t *buffer, uint32_t count)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	if (io_nand_read_spare_8b(adr, buffer, 1) != HAL_OK) devError |= devNAND;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	68b9      	ldr	r1, [r7, #8]
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fe11 	bl	8001828 <io_nand_read_spare_8b>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <io_nand_read_spare+0x2a>
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <io_nand_read_spare+0x34>)
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	f043 0320 	orr.w	r3, r3, #32
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <io_nand_read_spare+0x34>)
 8001c18:	801a      	strh	r2, [r3, #0]

	return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200005a4 	.word	0x200005a4

08001c28 <io_nand_write>:
//-----------------------------------------------------------------------------------------
uint32_t io_nand_write(uint32_t adr, uint8_t *buffer, uint32_t size, uint16_t offset)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	807b      	strh	r3, [r7, #2]

	if (io_nand_write_8b(adr, buffer, size, offset) != HAL_OK) devError |= devNAND;
 8001c36:	887b      	ldrh	r3, [r7, #2]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	68b9      	ldr	r1, [r7, #8]
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff faef 	bl	8001220 <io_nand_write_8b>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d006      	beq.n	8001c56 <io_nand_write+0x2e>
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <io_nand_write+0x38>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	f043 0320 	orr.w	r3, r3, #32
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	4b03      	ldr	r3, [pc, #12]	; (8001c60 <io_nand_write+0x38>)
 8001c54:	801a      	strh	r2, [r3, #0]

	return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200005a4 	.word	0x200005a4

08001c64 <io_nand_block_erase>:

	return 0;
}
//-----------------------------------------------------------------------------------------
void io_nand_block_erase(uint32_t adr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
//NAND_AddressTypeDef nans = io_uint32_to_flash_adr(addr);

//	if (io_nand_erase_block(&nans) != HAL_OK) devError |= devNAND;

	if (io_nand_erase_block(adr) != HAL_OK) devError |= devNAND;
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fcdd 	bl	800162c <io_nand_erase_block>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d006      	beq.n	8001c86 <io_nand_block_erase+0x22>
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <io_nand_block_erase+0x2c>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	f043 0320 	orr.w	r3, r3, #32
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <io_nand_block_erase+0x2c>)
 8001c84:	801a      	strh	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200005a4 	.word	0x200005a4

08001c94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001c98:	f3bf 8f4f 	dsb	sy
}
 8001c9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <__NVIC_SystemReset+0x24>)
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ca6:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <__NVIC_SystemReset+0x24>)
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_SystemReset+0x28>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001cae:	f3bf 8f4f 	dsb	sy
}
 8001cb2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <__NVIC_SystemReset+0x20>
 8001cb8:	e000ed00 	.word	0xe000ed00
 8001cbc:	05fa0004 	.word	0x05fa0004

08001cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc6:	f003 fb0d 	bl	80052e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cca:	f000 f88f 	bl	8001dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cce:	f000 fa79 	bl	80021c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cd2:	f000 fa31 	bl	8002138 <MX_DMA_Init>
  MX_TIM2_Init();
 8001cd6:	f000 f9b9 	bl	800204c <MX_TIM2_Init>
  MX_RTC_Init();
 8001cda:	f000 f91f 	bl	8001f1c <MX_RTC_Init>
  MX_FSMC_Init();
 8001cde:	f000 fb17 	bl	8002310 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8001ce2:	f000 f9ff 	bl	80020e4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001ce6:	f000 f97b 	bl	8001fe0 <MX_SPI1_Init>
  MX_I2C1_Init();
 8001cea:	f000 f8e9 	bl	8001ec0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  for (uint8_t i = 0; i < 4; i++) {
 8001cee:	2300      	movs	r3, #0
 8001cf0:	71fb      	strb	r3, [r7, #7]
 8001cf2:	e01e      	b.n	8001d32 <main+0x72>
	  HAL_Delay(150);
 8001cf4:	2096      	movs	r0, #150	; 0x96
 8001cf6:	f003 fb37 	bl	8005368 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	482c      	ldr	r0, [pc, #176]	; (8001db0 <main+0xf0>)
 8001d00:	f004 f9e4 	bl	80060cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0a:	482a      	ldr	r0, [pc, #168]	; (8001db4 <main+0xf4>)
 8001d0c:	f004 f9de 	bl	80060cc <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8001d10:	2096      	movs	r0, #150	; 0x96
 8001d12:	f003 fb29 	bl	8005368 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	4825      	ldr	r0, [pc, #148]	; (8001db0 <main+0xf0>)
 8001d1c:	f004 f9d6 	bl	80060cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d26:	4823      	ldr	r0, [pc, #140]	; (8001db4 <main+0xf4>)
 8001d28:	f004 f9d0 	bl	80060cc <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d9dd      	bls.n	8001cf4 <main+0x34>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <main+0xf8>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 ff57 	bl	8009bf0 <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8001d42:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <main+0xfc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	491d      	ldr	r1, [pc, #116]	; (8001dc0 <main+0x100>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f008 fbcf 	bl	800a4ee <HAL_UART_Receive_IT>

  set_Date(epoch);
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <main+0x104>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 fd47 	bl	80027e8 <set_Date>

  ST7789_Reset();
 8001d5a:	f002 fb83 	bl	8004464 <ST7789_Reset>
  ST7789_Init(back_color);
 8001d5e:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <main+0x108>)
 8001d60:	881b      	ldrh	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f002 fb98 	bl	8004498 <ST7789_Init>

//#if defined(SET_FS_TEST) || defined(SET_NAND_TEST)
  dbg = logDump;
 8001d68:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <main+0x10c>)
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	701a      	strb	r2, [r3, #0]
#endif

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d6e:	f009 fd2f 	bl	800b7d0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <main+0x110>)
 8001d74:	2101      	movs	r1, #1
 8001d76:	2001      	movs	r0, #1
 8001d78:	f009 fe23 	bl	800b9c2 <osSemaphoreNew>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	4a15      	ldr	r2, [pc, #84]	; (8001dd4 <main+0x114>)
 8001d80:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(uint16_t), &myQue_attributes);
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <main+0x118>)
 8001d84:	2102      	movs	r1, #2
 8001d86:	2010      	movs	r0, #16
 8001d88:	f009 fea4 	bl	800bad4 <osMessageQueueNew>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <main+0x11c>)
 8001d90:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <main+0x120>)
 8001d94:	2100      	movs	r1, #0
 8001d96:	4813      	ldr	r0, [pc, #76]	; (8001de4 <main+0x124>)
 8001d98:	f009 fd66 	bl	800b868 <osThreadNew>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <main+0x128>)
 8001da0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001da2:	f009 fd3b 	bl	800b81c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8001da6:	2001      	movs	r0, #1
 8001da8:	f003 fade 	bl	8005368 <HAL_Delay>
 8001dac:	e7fb      	b.n	8001da6 <main+0xe6>
 8001dae:	bf00      	nop
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	2000008c 	.word	0x2000008c
 8001dbc:	20000090 	.word	0x20000090
 8001dc0:	200015b8 	.word	0x200015b8
 8001dc4:	20000084 	.word	0x20000084
 8001dc8:	200015be 	.word	0x200015be
 8001dcc:	20000082 	.word	0x20000082
 8001dd0:	08013b28 	.word	0x08013b28
 8001dd4:	200005a0 	.word	0x200005a0
 8001dd8:	08013b10 	.word	0x08013b10
 8001ddc:	2000059c 	.word	0x2000059c
 8001de0:	08013aec 	.word	0x08013aec
 8001de4:	080031f1 	.word	0x080031f1
 8001de8:	20000598 	.word	0x20000598

08001dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b094      	sub	sp, #80	; 0x50
 8001df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df2:	f107 0320 	add.w	r3, r7, #32
 8001df6:	2230      	movs	r2, #48	; 0x30
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f00c ffc4 	bl	800ed88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	4a27      	ldr	r2, [pc, #156]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e20:	4b25      	ldr	r3, [pc, #148]	; (8001eb8 <SystemClock_Config+0xcc>)
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
 8001e30:	4b22      	ldr	r3, [pc, #136]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <SystemClock_Config+0xd0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e44:	607b      	str	r3, [r7, #4]
 8001e46:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e52:	2302      	movs	r3, #2
 8001e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e60:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e64:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e6a:	2307      	movs	r3, #7
 8001e6c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4618      	mov	r0, r3
 8001e74:	f006 f8d2 	bl	800801c <HAL_RCC_OscConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e7e:	f002 f94f 	bl	8004120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e82:	230f      	movs	r3, #15
 8001e84:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e86:	2302      	movs	r3, #2
 8001e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001e8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	2105      	movs	r1, #5
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f006 fb33 	bl	800850c <HAL_RCC_ClockConfig>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001eac:	f002 f938 	bl	8004120 <Error_Handler>
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	3750      	adds	r7, #80	; 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40007000 	.word	0x40007000

08001ec0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ec6:	4a13      	ldr	r2, [pc, #76]	; (8001f14 <MX_I2C1_Init+0x54>)
 8001ec8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eca:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ecc:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <MX_I2C1_Init+0x58>)
 8001ece:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed6:	4b0e      	ldr	r3, [pc, #56]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ede:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_I2C1_Init+0x50>)
 8001efe:	f004 f919 	bl	8006134 <HAL_I2C_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f08:	f002 f90a 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000280 	.word	0x20000280
 8001f14:	40005400 	.word	0x40005400
 8001f18:	000186a0 	.word	0x000186a0

08001f1c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001f22:	1d3b      	adds	r3, r7, #4
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f36:	4a28      	ldr	r2, [pc, #160]	; (8001fd8 <MX_RTC_Init+0xbc>)
 8001f38:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f3a:	4b26      	ldr	r3, [pc, #152]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f42:	227f      	movs	r2, #127	; 0x7f
 8001f44:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8001f46:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f48:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001f4c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f4e:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f60:	481c      	ldr	r0, [pc, #112]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f62:	f006 fe07 	bl	8008b74 <HAL_RTC_Init>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8001f6c:	f002 f8d8 	bl	8004120 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8001f70:	2315      	movs	r3, #21
 8001f72:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8001f74:	2334      	movs	r3, #52	; 0x34
 8001f76:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8001f78:	230c      	movs	r3, #12
 8001f7a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	2200      	movs	r2, #0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001f8c:	f006 fe68 	bl	8008c60 <HAL_RTC_SetTime>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8001f96:	f002 f8c3 	bl	8004120 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001faa:	463b      	mov	r3, r7
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4808      	ldr	r0, [pc, #32]	; (8001fd4 <MX_RTC_Init+0xb8>)
 8001fb2:	f006 ff4d 	bl	8008e50 <HAL_RTC_SetDate>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001fbc:	f002 f8b0 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  set_Date(epoch);
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <MX_RTC_Init+0xc0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fc0f 	bl	80027e8 <set_Date>

  /* USER CODE END RTC_Init 2 */

}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000394 	.word	0x20000394
 8001fd8:	40002800 	.word	0x40002800
 8001fdc:	20000084 	.word	0x20000084

08001fe0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <MX_SPI1_Init+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001fea:	4b16      	ldr	r3, [pc, #88]	; (8002044 <MX_SPI1_Init+0x64>)
 8001fec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ff2:	4b14      	ldr	r3, [pc, #80]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <MX_SPI1_Init+0x64>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001ffe:	4b11      	ldr	r3, [pc, #68]	; (8002044 <MX_SPI1_Init+0x64>)
 8002000:	2202      	movs	r2, #2
 8002002:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002004:	4b0f      	ldr	r3, [pc, #60]	; (8002044 <MX_SPI1_Init+0x64>)
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <MX_SPI1_Init+0x64>)
 800200c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002010:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002012:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <MX_SPI1_Init+0x64>)
 8002014:	2200      	movs	r2, #0
 8002016:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002018:	4b0a      	ldr	r3, [pc, #40]	; (8002044 <MX_SPI1_Init+0x64>)
 800201a:	2200      	movs	r2, #0
 800201c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <MX_SPI1_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002024:	4b07      	ldr	r3, [pc, #28]	; (8002044 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800202a:	4b06      	ldr	r3, [pc, #24]	; (8002044 <MX_SPI1_Init+0x64>)
 800202c:	220a      	movs	r2, #10
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <MX_SPI1_Init+0x64>)
 8002032:	f007 f89d 	bl	8009170 <HAL_SPI_Init>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800203c:	f002 f870 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200003b4 	.word	0x200003b4
 8002048:	40013000 	.word	0x40013000

0800204c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002052:	f107 0308 	add.w	r3, r7, #8
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	463b      	mov	r3, r7
 8002062:	2200      	movs	r2, #0
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002068:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <MX_TIM2_Init+0x94>)
 800206a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8002070:	4b1b      	ldr	r3, [pc, #108]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002072:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <MX_TIM2_Init+0x94>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002080:	22f9      	movs	r2, #249	; 0xf9
 8002082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002084:	4b16      	ldr	r3, [pc, #88]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <MX_TIM2_Init+0x94>)
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002090:	4813      	ldr	r0, [pc, #76]	; (80020e0 <MX_TIM2_Init+0x94>)
 8002092:	f007 fd5d 	bl	8009b50 <HAL_TIM_Base_Init>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800209c:	f002 f840 	bl	8004120 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a6:	f107 0308 	add.w	r3, r7, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	480c      	ldr	r0, [pc, #48]	; (80020e0 <MX_TIM2_Init+0x94>)
 80020ae:	f007 ff17 	bl	8009ee0 <HAL_TIM_ConfigClockSource>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020b8:	f002 f832 	bl	8004120 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80020bc:	2320      	movs	r3, #32
 80020be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c0:	2300      	movs	r3, #0
 80020c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <MX_TIM2_Init+0x94>)
 80020ca:	f008 f933 	bl	800a334 <HAL_TIMEx_MasterConfigSynchronization>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80020d4:	f002 f824 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	2000046c 	.word	0x2000046c

080020e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <MX_USART3_UART_Init+0x50>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 80020f0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80020f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800211a:	4805      	ldr	r0, [pc, #20]	; (8002130 <MX_USART3_UART_Init+0x4c>)
 800211c:	f008 f99a 	bl	800a454 <HAL_UART_Init>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002126:	f001 fffb 	bl	8004120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200004b4 	.word	0x200004b4
 8002134:	40004800 	.word	0x40004800

08002138 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_DMA_Init+0x88>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <MX_DMA_Init+0x88>)
 8002148:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <MX_DMA_Init+0x88>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002156:	607b      	str	r3, [r7, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	603b      	str	r3, [r7, #0]
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <MX_DMA_Init+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <MX_DMA_Init+0x88>)
 8002164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <MX_DMA_Init+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002176:	2200      	movs	r2, #0
 8002178:	2105      	movs	r1, #5
 800217a:	200b      	movs	r0, #11
 800217c:	f003 f9d0 	bl	8005520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002180:	200b      	movs	r0, #11
 8002182:	f003 f9e9 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2105      	movs	r1, #5
 800218a:	200e      	movs	r0, #14
 800218c:	f003 f9c8 	bl	8005520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002190:	200e      	movs	r0, #14
 8002192:	f003 f9e1 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2105      	movs	r1, #5
 800219a:	2011      	movs	r0, #17
 800219c:	f003 f9c0 	bl	8005520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80021a0:	2011      	movs	r0, #17
 80021a2:	f003 f9d9 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2103      	movs	r1, #3
 80021aa:	203b      	movs	r0, #59	; 0x3b
 80021ac:	f003 f9b8 	bl	8005520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021b0:	203b      	movs	r0, #59	; 0x3b
 80021b2:	f003 f9d1 	bl	8005558 <HAL_NVIC_EnableIRQ>

}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800

080021c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08c      	sub	sp, #48	; 0x30
 80021c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	2200      	movs	r2, #0
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	609a      	str	r2, [r3, #8]
 80021d6:	60da      	str	r2, [r3, #12]
 80021d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	4b48      	ldr	r3, [pc, #288]	; (8002300 <MX_GPIO_Init+0x13c>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a47      	ldr	r2, [pc, #284]	; (8002300 <MX_GPIO_Init+0x13c>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b45      	ldr	r3, [pc, #276]	; (8002300 <MX_GPIO_Init+0x13c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	4b41      	ldr	r3, [pc, #260]	; (8002300 <MX_GPIO_Init+0x13c>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a40      	ldr	r2, [pc, #256]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b3a      	ldr	r3, [pc, #232]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	4a39      	ldr	r2, [pc, #228]	; (8002300 <MX_GPIO_Init+0x13c>)
 800221c:	f043 0310 	orr.w	r3, r3, #16
 8002220:	6313      	str	r3, [r2, #48]	; 0x30
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b33      	ldr	r3, [pc, #204]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	4a32      	ldr	r2, [pc, #200]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6313      	str	r3, [r2, #48]	; 0x30
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b2c      	ldr	r3, [pc, #176]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	4a2b      	ldr	r2, [pc, #172]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6313      	str	r3, [r2, #48]	; 0x30
 800225a:	4b29      	ldr	r3, [pc, #164]	; (8002300 <MX_GPIO_Init+0x13c>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <MX_GPIO_Init+0x13c>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a24      	ldr	r2, [pc, #144]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002270:	f043 0304 	orr.w	r3, r3, #4
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b22      	ldr	r3, [pc, #136]	; (8002300 <MX_GPIO_Init+0x13c>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8002282:	2201      	movs	r2, #1
 8002284:	210e      	movs	r1, #14
 8002286:	481f      	ldr	r0, [pc, #124]	; (8002304 <MX_GPIO_Init+0x140>)
 8002288:	f003 ff20 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800228c:	2201      	movs	r2, #1
 800228e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <MX_GPIO_Init+0x144>)
 8002294:	f003 ff1a 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8002298:	2200      	movs	r2, #0
 800229a:	2180      	movs	r1, #128	; 0x80
 800229c:	481b      	ldr	r0, [pc, #108]	; (800230c <MX_GPIO_Init+0x148>)
 800229e:	f003 ff15 	bl	80060cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80022a2:	230e      	movs	r3, #14
 80022a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022aa:	2301      	movs	r3, #1
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	4812      	ldr	r0, [pc, #72]	; (8002304 <MX_GPIO_Init+0x140>)
 80022ba:	f003 fd6b 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80022be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022cc:	2302      	movs	r3, #2
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80022d0:	f107 031c 	add.w	r3, r7, #28
 80022d4:	4619      	mov	r1, r3
 80022d6:	480c      	ldr	r0, [pc, #48]	; (8002308 <MX_GPIO_Init+0x144>)
 80022d8:	f003 fd5c 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e0:	2301      	movs	r3, #1
 80022e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022e4:	2302      	movs	r3, #2
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80022e8:	2301      	movs	r3, #1
 80022ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	4619      	mov	r1, r3
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <MX_GPIO_Init+0x148>)
 80022f4:	f003 fd4e 	bl	8005d94 <HAL_GPIO_Init>

}
 80022f8:	bf00      	nop
 80022fa:	3730      	adds	r7, #48	; 0x30
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40023800 	.word	0x40023800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020c00 	.word	0x40020c00
 800230c:	40020800 	.word	0x40020800

08002310 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8002316:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <MX_FSMC_Init+0xd0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
//	#define NAND_DEVICE MY_NAND_DEVICE// 0x70000000L
//#endif

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800232a:	463b      	mov	r3, r7
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
*/
  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8002336:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002338:	4a2b      	ldr	r2, [pc, #172]	; (80023e8 <MX_FSMC_Init+0xd8>)
 800233a:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800233e:	2210      	movs	r2, #16
 8002340:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8002342:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002344:	2202      	movs	r2, #2
 8002346:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8002348:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800234a:	2200      	movs	r2, #0
 800234c:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_ENABLE;//DISABLE;
 800234e:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_512BYTE;
 8002354:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235a:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 1;
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002364:	2201      	movs	r2, #1
 8002366:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8002368:	4b1e      	ldr	r3, [pc, #120]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800236a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800236e:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 64;
 8002370:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 64;
 8002376:	4b1b      	ldr	r3, [pc, #108]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002378:	2240      	movs	r2, #64	; 0x40
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800237c:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800237e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002382:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8002384:	4b17      	ldr	r3, [pc, #92]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002386:	2201      	movs	r2, #1
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 1024;
 800238a:	4b16      	ldr	r3, [pc, #88]	; (80023e4 <MX_FSMC_Init+0xd4>)
 800238c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002390:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8002392:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <MX_FSMC_Init+0xd4>)
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 2;
 800239a:	2302      	movs	r3, #2
 800239c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 3;
 800239e:	2303      	movs	r3, #3
 80023a0:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 2;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 2;
 80023aa:	2302      	movs	r3, #2
 80023ac:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 3;
 80023ae:	2303      	movs	r3, #3
 80023b0:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 2;
 80023b2:	2302      	movs	r3, #2
 80023b4:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 1;
 80023b6:	2301      	movs	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80023ba:	463a      	mov	r2, r7
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4619      	mov	r1, r3
 80023c2:	4808      	ldr	r0, [pc, #32]	; (80023e4 <MX_FSMC_Init+0xd4>)
 80023c4:	f005 fcd5 	bl	8007d72 <HAL_NAND_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80023ce:	f001 fea7 	bl	8004120 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  	  io_nand_init(&hnand1);
 80023d2:	4804      	ldr	r0, [pc, #16]	; (80023e4 <MX_FSMC_Init+0xd4>)
 80023d4:	f7fe fc62 	bl	8000c9c <io_nand_init>
//nand->cfg.plane_number  = hwnand->Config.PlaneNbr;  // Number of plane (1 K9GAG08U0E )
//nand->cfg.plane_size    = hwnand->Config.PlaneSize * nand->cfg.block_number; // Plane size (In Page)
*/

  /* USER CODE END FSMC_Init 2 */
}
 80023d8:	bf00      	nop
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	200015dc 	.word	0x200015dc
 80023e4:	20000558 	.word	0x20000558
 80023e8:	a0000060 	.word	0xa0000060

080023ec <pageIsEmpty>:
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
bool ret = false;
 80023f4:	2300      	movs	r3, #0
 80023f6:	73fb      	strb	r3, [r7, #15]

	io_nand_read(page, rdBuf, chipConf.PageSize, 0)	;
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <pageIsEmpty+0x5c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2300      	movs	r3, #0
 80023fe:	4913      	ldr	r1, [pc, #76]	; (800244c <pageIsEmpty+0x60>)
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff fbd7 	bl	8001bb4 <io_nand_read>
	if (!(devError & devNAND)) {
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <pageIsEmpty+0x64>)
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	f003 0320 	and.w	r3, r3, #32
 800240e:	2b00      	cmp	r3, #0
 8002410:	d115      	bne.n	800243e <pageIsEmpty+0x52>
		ret = true;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	e00b      	b.n	8002434 <pageIsEmpty+0x48>
			if (*(uint8_t *)(rdBuf + i) != EMPTY) {
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <pageIsEmpty+0x60>)
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2bff      	cmp	r3, #255	; 0xff
 8002426:	d002      	beq.n	800242e <pageIsEmpty+0x42>
				ret = false;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
				break;
 800242c:	e007      	b.n	800243e <pageIsEmpty+0x52>
		for (uint32_t i = 0; i < chipConf.PageSize; i++) {
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <pageIsEmpty+0x5c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68ba      	ldr	r2, [r7, #8]
 800243a:	429a      	cmp	r2, r3
 800243c:	d3ee      	bcc.n	800241c <pageIsEmpty+0x30>
			}
		}
	}

	return ret;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200015e8 	.word	0x200015e8
 800244c:	20001600 	.word	0x20001600
 8002450:	200005a4 	.word	0x200005a4

08002454 <_write>:
	return NAND_Erase_Block(nandPort, &nans, 0);
}
*/
#ifdef SET_SMALL_FS
int _write(int file, char *buf, int len)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
	Report(0, "%.*s", len, buf);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4904      	ldr	r1, [pc, #16]	; (8002478 <_write+0x24>)
 8002466:	2000      	movs	r0, #0
 8002468:	f000 fab8 	bl	80029dc <Report>
	return len;
 800246c:	687b      	ldr	r3, [r7, #4]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	080103b8 	.word	0x080103b8

0800247c <get_qStat>:
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	dc18      	bgt.n	80024bc <get_qStat+0x40>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f113 0f06 	cmn.w	r3, #6
 8002490:	db2a      	blt.n	80024e8 <get_qStat+0x6c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3306      	adds	r3, #6
 8002496:	2b06      	cmp	r3, #6
 8002498:	d826      	bhi.n	80024e8 <get_qStat+0x6c>
 800249a:	a201      	add	r2, pc, #4	; (adr r2, 80024a0 <get_qStat+0x24>)
 800249c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a0:	080024e1 	.word	0x080024e1
 80024a4:	080024dd 	.word	0x080024dd
 80024a8:	080024d9 	.word	0x080024d9
 80024ac:	080024d5 	.word	0x080024d5
 80024b0:	080024d1 	.word	0x080024d1
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	080024c9 	.word	0x080024c9
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <get_qStat+0x68>
 80024c6:	e00f      	b.n	80024e8 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <get_qStat+0x7c>)
 80024ca:	e00e      	b.n	80024ea <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <get_qStat+0x80>)
 80024ce:	e00c      	b.n	80024ea <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <get_qStat+0x84>)
 80024d2:	e00a      	b.n	80024ea <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 80024d4:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <get_qStat+0x88>)
 80024d6:	e008      	b.n	80024ea <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <get_qStat+0x8c>)
 80024da:	e006      	b.n	80024ea <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <get_qStat+0x90>)
 80024de:	e004      	b.n	80024ea <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <get_qStat+0x94>)
 80024e2:	e002      	b.n	80024ea <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <get_qStat+0x98>)
 80024e6:	e000      	b.n	80024ea <get_qStat+0x6e>
	}

	return "UnknownError";
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <get_qStat+0x9c>)
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	080103c0 	.word	0x080103c0
 80024fc:	080103c8 	.word	0x080103c8
 8002500:	080103d0 	.word	0x080103d0
 8002504:	080103e0 	.word	0x080103e0
 8002508:	080103f0 	.word	0x080103f0
 800250c:	08010404 	.word	0x08010404
 8002510:	08010414 	.word	0x08010414
 8002514:	08010420 	.word	0x08010420
 8002518:	08010434 	.word	0x08010434

0800251c <get_logName>:
//-----------------------------------------------------------------------------
static const char *get_logName(uint8_t lg)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	switch (lg) {
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d00a      	beq.n	8002542 <get_logName+0x26>
 800252c:	2b02      	cmp	r3, #2
 800252e:	dc0a      	bgt.n	8002546 <get_logName+0x2a>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d002      	beq.n	800253a <get_logName+0x1e>
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <get_logName+0x22>
 8002538:	e005      	b.n	8002546 <get_logName+0x2a>
		case logOff:
			return "logOff";
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <get_logName+0x38>)
 800253c:	e004      	b.n	8002548 <get_logName+0x2c>
		case logOn:
			return "logOn";
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <get_logName+0x3c>)
 8002540:	e002      	b.n	8002548 <get_logName+0x2c>
		case logDump:
			return "logDump";
 8002542:	4b06      	ldr	r3, [pc, #24]	; (800255c <get_logName+0x40>)
 8002544:	e000      	b.n	8002548 <get_logName+0x2c>
	}

	return "???";
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <get_logName+0x44>)
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	08010444 	.word	0x08010444
 8002558:	0801044c 	.word	0x0801044c
 800255c:	08010454 	.word	0x08010454
 8002560:	0801045c 	.word	0x0801045c

08002564 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	; 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 8002570:	2330      	movs	r3, #48	; 0x30
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	2300      	movs	r3, #0
 800257a:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 800257c:	2300      	movs	r3, #0
 800257e:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 8002580:	78fb      	ldrb	r3, [r7, #3]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <hex2bin+0x28>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <hex2bin+0x2c>
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	e0b2      	b.n	80026f6 <hex2bin+0x192>
    if (len > 8) len = 8;
 8002590:	78fb      	ldrb	r3, [r7, #3]
 8002592:	2b08      	cmp	r3, #8
 8002594:	d901      	bls.n	800259a <hex2bin+0x36>
 8002596:	2308      	movs	r3, #8
 8002598:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 800259a:	78fb      	ldrb	r3, [r7, #3]
 800259c:	f1c3 0308 	rsb	r3, r3, #8
 80025a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 80025a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025a8:	f107 0210 	add.w	r2, r7, #16
 80025ac:	4413      	add	r3, r2
 80025ae:	78fa      	ldrb	r2, [r7, #3]
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f00c fbda 	bl	800ed6c <memcpy>

    k = j = 0;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80025be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 80025c6:	e090      	b.n	80026ea <hex2bin+0x186>
        jk = j + 2;
 80025c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025cc:	3302      	adds	r3, #2
 80025ce:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 80025d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80025d8:	e066      	b.n	80026a8 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 80025da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025de:	3328      	adds	r3, #40	; 0x28
 80025e0:	443b      	add	r3, r7
 80025e2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025e6:	2b2f      	cmp	r3, #47	; 0x2f
 80025e8:	d918      	bls.n	800261c <hex2bin+0xb8>
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	3328      	adds	r3, #40	; 0x28
 80025f0:	443b      	add	r3, r7
 80025f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80025f6:	2b39      	cmp	r3, #57	; 0x39
 80025f8:	d810      	bhi.n	800261c <hex2bin+0xb8>
 80025fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025fe:	3328      	adds	r3, #40	; 0x28
 8002600:	443b      	add	r3, r7
 8002602:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	3a30      	subs	r2, #48	; 0x30
 8002610:	b2d2      	uxtb	r2, r2
 8002612:	3328      	adds	r3, #40	; 0x28
 8002614:	443b      	add	r3, r7
 8002616:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800261a:	e040      	b.n	800269e <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800261c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002620:	3328      	adds	r3, #40	; 0x28
 8002622:	443b      	add	r3, r7
 8002624:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002628:	2b60      	cmp	r3, #96	; 0x60
 800262a:	d918      	bls.n	800265e <hex2bin+0xfa>
 800262c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002630:	3328      	adds	r3, #40	; 0x28
 8002632:	443b      	add	r3, r7
 8002634:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002638:	2b66      	cmp	r3, #102	; 0x66
 800263a:	d810      	bhi.n	800265e <hex2bin+0xfa>
 800263c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002640:	3328      	adds	r3, #40	; 0x28
 8002642:	443b      	add	r3, r7
 8002644:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8002648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	3a57      	subs	r2, #87	; 0x57
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	3328      	adds	r3, #40	; 0x28
 8002656:	443b      	add	r3, r7
 8002658:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800265c:	e01f      	b.n	800269e <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 800265e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002662:	3328      	adds	r3, #40	; 0x28
 8002664:	443b      	add	r3, r7
 8002666:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d917      	bls.n	800269e <hex2bin+0x13a>
 800266e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002672:	3328      	adds	r3, #40	; 0x28
 8002674:	443b      	add	r3, r7
 8002676:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800267a:	2b46      	cmp	r3, #70	; 0x46
 800267c:	d80f      	bhi.n	800269e <hex2bin+0x13a>
 800267e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002682:	3328      	adds	r3, #40	; 0x28
 8002684:	443b      	add	r3, r7
 8002686:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800268a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	3a37      	subs	r2, #55	; 0x37
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	3328      	adds	r3, #40	; 0x28
 8002698:	443b      	add	r3, r7
 800269a:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 800269e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a2:	3301      	adds	r3, #1
 80026a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80026a8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d393      	bcc.n	80025da <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 80026b2:	7b3b      	ldrb	r3, [r7, #12]
 80026b4:	011a      	lsls	r2, r3, #4
 80026b6:	7b7b      	ldrb	r3, [r7, #13]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 80026c0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c4:	f1c3 0303 	rsb	r3, r3, #3
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	623b      	str	r3, [r7, #32]
        k++;
 80026d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 80026e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026e4:	3302      	adds	r3, #2
 80026e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 80026ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	f67f af6a 	bls.w	80025c8 <hex2bin+0x64>
    }

    return ret;
 80026f4:	6a3b      	ldr	r3, [r7, #32]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3728      	adds	r7, #40	; 0x28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
	if (on)
 800270a:	79fb      	ldrb	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <errLedOn+0x34>)
 8002718:	f003 fcd8 	bl	80060cc <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800271c:	e005      	b.n	800272a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002724:	4803      	ldr	r0, [pc, #12]	; (8002734 <errLedOn+0x34>)
 8002726:	f003 fcd1 	bl	80060cc <HAL_GPIO_WritePin>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40020c00 	.word	0x40020c00

08002738 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	return secCounter;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <get_secCounter+0x14>)
 800273e:	681b      	ldr	r3, [r3, #0]
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200005a8 	.word	0x200005a8

08002750 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
	secCounter++;
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <inc_secCounter+0x18>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	3301      	adds	r3, #1
 800275a:	4a03      	ldr	r2, [pc, #12]	; (8002768 <inc_secCounter+0x18>)
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr
 8002768:	200005a8 	.word	0x200005a8

0800276c <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
	return msCounter;
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <get_msCounter+0x18>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 8002776:	4610      	mov	r0, r2
 8002778:	4619      	mov	r1, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	200005b0 	.word	0x200005b0

08002788 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
	msCounter++;
 800278c:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <inc_msCounter+0x20>)
 800278e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002792:	1c50      	adds	r0, r2, #1
 8002794:	f143 0100 	adc.w	r1, r3, #0
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <inc_msCounter+0x20>)
 800279a:	e9c3 0100 	strd	r0, r1, [r3]
}
 800279e:	bf00      	nop
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	200005b0 	.word	0x200005b0

080027ac <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 80027b4:	f7ff ffc0 	bl	8002738 <get_secCounter>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4413      	add	r3, r2
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 80027ce:	f7ff ffb3 	bl	8002738 <get_secCounter>
 80027d2:	4602      	mov	r2, r0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4293      	cmp	r3, r2
 80027d8:	bf94      	ite	ls
 80027da:	2301      	movls	r3, #1
 80027dc:	2300      	movhi	r3, #0
 80027de:	b2db      	uxtb	r3, r3
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b094      	sub	sp, #80	; 0x50
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	2000      	movs	r0, #0
 80027f4:	460a      	mov	r2, r1
 80027f6:	4603      	mov	r3, r0
 80027f8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 80027fc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002800:	f107 0320 	add.w	r3, r7, #32
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f00c f9d4 	bl	800ebb4 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 800280c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800280e:	b2db      	uxtb	r3, r3
 8002810:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8002812:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 800281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281e:	b2db      	uxtb	r3, r3
 8002820:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8002822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002824:	b2db      	uxtb	r3, r3
 8002826:	72fb      	strb	r3, [r7, #11]
	sTime.Hours   = ts.tm_hour + tZone;
 8002828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <set_Date+0xb0>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	4413      	add	r3, r2
 8002832:	b2db      	uxtb	r3, r3
 8002834:	733b      	strb	r3, [r7, #12]
	sTime.Minutes = ts.tm_min;
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	b2db      	uxtb	r3, r3
 800283a:	737b      	strb	r3, [r7, #13]
	sTime.Seconds = ts.tm_sec;
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	b2db      	uxtb	r3, r3
 8002840:	73bb      	strb	r3, [r7, #14]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2200      	movs	r2, #0
 8002848:	4619      	mov	r1, r3
 800284a:	4814      	ldr	r0, [pc, #80]	; (800289c <set_Date+0xb4>)
 800284c:	f006 fa08 	bl	8008c60 <HAL_RTC_SetTime>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <set_Date+0x7e>
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <set_Date+0xb8>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	f043 0308 	orr.w	r3, r3, #8
 800285e:	b29a      	uxth	r2, r3
 8002860:	4b0f      	ldr	r3, [pc, #60]	; (80028a0 <set_Date+0xb8>)
 8002862:	801a      	strh	r2, [r3, #0]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8002864:	e014      	b.n	8002890 <set_Date+0xa8>
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8002866:	f107 0308 	add.w	r3, r7, #8
 800286a:	2200      	movs	r2, #0
 800286c:	4619      	mov	r1, r3
 800286e:	480b      	ldr	r0, [pc, #44]	; (800289c <set_Date+0xb4>)
 8002870:	f006 faee 	bl	8008e50 <HAL_RTC_SetDate>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d007      	beq.n	800288a <set_Date+0xa2>
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <set_Date+0xb8>)
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	b29a      	uxth	r2, r3
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <set_Date+0xb8>)
 8002886:	801a      	strh	r2, [r3, #0]
}
 8002888:	e002      	b.n	8002890 <set_Date+0xa8>
			setDate = true;
 800288a:	4b06      	ldr	r3, [pc, #24]	; (80028a4 <set_Date+0xbc>)
 800288c:	2201      	movs	r2, #1
 800288e:	701a      	strb	r2, [r3, #0]
}
 8002890:	bf00      	nop
 8002892:	3750      	adds	r7, #80	; 0x50
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	200015bd 	.word	0x200015bd
 800289c:	20000394 	.word	0x20000394
 80028a0:	200005a4 	.word	0x200005a4
 80028a4:	200015bc 	.word	0x200015bc

080028a8 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 80028a8:	b590      	push	{r4, r7, lr}
 80028aa:	b093      	sub	sp, #76	; 0x4c
 80028ac:	af04      	add	r7, sp, #16
 80028ae:	6078      	str	r0, [r7, #4]
int ret = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 80028b4:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <sec2str+0x110>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d040      	beq.n	8002944 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 80028c2:	f7ff ff39 	bl	8002738 <get_secCounter>
 80028c6:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	4a3c      	ldr	r2, [pc, #240]	; (80029bc <sec2str+0x114>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	4a39      	ldr	r2, [pc, #228]	; (80029bc <sec2str+0x114>)
 80028d8:	fba2 1203 	umull	r1, r2, r2, r3
 80028dc:	0c12      	lsrs	r2, r2, #16
 80028de:	4938      	ldr	r1, [pc, #224]	; (80029c0 <sec2str+0x118>)
 80028e0:	fb01 f202 	mul.w	r2, r1, r2
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	4a36      	ldr	r2, [pc, #216]	; (80029c4 <sec2str+0x11c>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0adb      	lsrs	r3, r3, #11
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	4a33      	ldr	r2, [pc, #204]	; (80029c4 <sec2str+0x11c>)
 80028f8:	fba2 1203 	umull	r1, r2, r2, r3
 80028fc:	0ad2      	lsrs	r2, r2, #11
 80028fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002902:	fb01 f202 	mul.w	r2, r1, r2
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	4a2e      	ldr	r2, [pc, #184]	; (80029c8 <sec2str+0x120>)
 800290e:	fba2 2303 	umull	r2, r3, r2, r3
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8002916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002918:	4b2b      	ldr	r3, [pc, #172]	; (80029c8 <sec2str+0x120>)
 800291a:	fba3 1302 	umull	r1, r3, r3, r2
 800291e:	0959      	lsrs	r1, r3, #5
 8002920:	460b      	mov	r3, r1
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a5b      	subs	r3, r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002938:	4924      	ldr	r1, [pc, #144]	; (80029cc <sec2str+0x124>)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f00c fe8c 	bl	800f658 <siprintf>
 8002940:	6378      	str	r0, [r7, #52]	; 0x34
 8002942:	e034      	b.n	80029ae <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8002944:	f107 030c 	add.w	r3, r7, #12
 8002948:	2200      	movs	r2, #0
 800294a:	4619      	mov	r1, r3
 800294c:	4820      	ldr	r0, [pc, #128]	; (80029d0 <sec2str+0x128>)
 800294e:	f006 fb03 	bl	8008f58 <HAL_RTC_GetDate>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <sec2str+0xc0>
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <sec2str+0x12c>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	f043 0308 	orr.w	r3, r3, #8
 8002960:	b29a      	uxth	r2, r3
 8002962:	4b1c      	ldr	r3, [pc, #112]	; (80029d4 <sec2str+0x12c>)
 8002964:	801a      	strh	r2, [r3, #0]
 8002966:	e022      	b.n	80029ae <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	2200      	movs	r2, #0
 800296e:	4619      	mov	r1, r3
 8002970:	4817      	ldr	r0, [pc, #92]	; (80029d0 <sec2str+0x128>)
 8002972:	f006 fa0f 	bl	8008d94 <HAL_RTC_GetTime>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d007      	beq.n	800298c <sec2str+0xe4>
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <sec2str+0x12c>)
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	b29a      	uxth	r2, r3
 8002986:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <sec2str+0x12c>)
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	e010      	b.n	80029ae <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 800298c:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800298e:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8002990:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8002992:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8002994:	7c3b      	ldrb	r3, [r7, #16]
 8002996:	7c7a      	ldrb	r2, [r7, #17]
 8002998:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 800299a:	9102      	str	r1, [sp, #8]
 800299c:	9201      	str	r2, [sp, #4]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4623      	mov	r3, r4
 80029a2:	4602      	mov	r2, r0
 80029a4:	490c      	ldr	r1, [pc, #48]	; (80029d8 <sec2str+0x130>)
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f00c fe56 	bl	800f658 <siprintf>
 80029ac:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 80029ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	373c      	adds	r7, #60	; 0x3c
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd90      	pop	{r4, r7, pc}
 80029b8:	200015bc 	.word	0x200015bc
 80029bc:	c22e4507 	.word	0xc22e4507
 80029c0:	00015180 	.word	0x00015180
 80029c4:	91a2b3c5 	.word	0x91a2b3c5
 80029c8:	88888889 	.word	0x88888889
 80029cc:	08010460 	.word	0x08010460
 80029d0:	20000394 	.word	0x20000394
 80029d4:	200005a4 	.word	0x200005a4
 80029d8:	08010478 	.word	0x08010478

080029dc <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(const uint8_t addTime, const char *fmt, ...)
{
 80029dc:	b40e      	push	{r1, r2, r3}
 80029de:	b590      	push	{r4, r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 80029e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029ec:	613b      	str	r3, [r7, #16]
int dl = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <Report+0xb8>)
 80029f4:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d010      	beq.n	8002a24 <Report+0x48>
		dl = sec2str(buf);
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f7ff ff50 	bl	80028a8 <sec2str>
 8002a08:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7fd fbe0 	bl	80001d0 <strlen>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461a      	mov	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <Report+0xbc>)
 8002a1a:	6810      	ldr	r0, [r2, #0]
 8002a1c:	6018      	str	r0, [r3, #0]
		dl += 3;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3303      	adds	r3, #3
 8002a22:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8002a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a28:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	18d0      	adds	r0, r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	1ad1      	subs	r1, r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3a:	f00c ff89 	bl	800f950 <vsniprintf>

	uartRdy = false;
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <Report+0xc0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <Report+0xc4>)
 8002a46:	681c      	ldr	r4, [r3, #0]
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7fd fbc1 	bl	80001d0 <strlen>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68f9      	ldr	r1, [r7, #12]
 8002a56:	4620      	mov	r0, r4
 8002a58:	f007 fd7a 	bl	800a550 <HAL_UART_Transmit_DMA>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d006      	beq.n	8002a70 <Report+0x94>
 8002a62:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <Report+0xc8>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b0d      	ldr	r3, [pc, #52]	; (8002aa4 <Report+0xc8>)
 8002a6e:	801a      	strh	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8002a70:	bf00      	nop
 8002a72:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <Report+0xc0>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f083 0301 	eor.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f7      	bne.n	8002a72 <Report+0x96>

	va_end(args);

	return 0;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002a8e:	b003      	add	sp, #12
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200005b8 	.word	0x200005b8
 8002a98:	08010494 	.word	0x08010494
 8002a9c:	20000080 	.word	0x20000080
 8002aa0:	20000090 	.word	0x20000090
 8002aa4:	200005a4 	.word	0x200005a4

08002aa8 <showBuf>:
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	; 0x38
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60ba      	str	r2, [r7, #8]
 8002ab0:	607b      	str	r3, [r7, #4]
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	73bb      	strb	r3, [r7, #14]
int step = 32;
 8002aba:	2320      	movs	r3, #32
 8002abc:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t addr = adr + devAdr;
 8002ac2:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <showBuf+0x138>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	4413      	add	r3, r2
 8002aca:	62bb      	str	r3, [r7, #40]	; 0x28

	if (ind < len) {
 8002acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d271      	bcs.n	8002bb8 <showBuf+0x110>
		bool done = false;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae6:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	fbb3 f1f2 	udiv	r1, r3, r2
 8002af0:	fb01 f202 	mul.w	r2, r1, r2
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d002      	beq.n	8002b00 <showBuf+0x58>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3301      	adds	r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <showBuf+0x13c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002b06:	e046      	b.n	8002b96 <showBuf+0xee>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)addr);
 8002b08:	4836      	ldr	r0, [pc, #216]	; (8002be4 <showBuf+0x13c>)
 8002b0a:	f7fd fb61 	bl	80001d0 <strlen>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4a34      	ldr	r2, [pc, #208]	; (8002be4 <showBuf+0x13c>)
 8002b12:	4413      	add	r3, r2
 8002b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b16:	4934      	ldr	r1, [pc, #208]	; (8002be8 <showBuf+0x140>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00c fd9d 	bl	800f658 <siprintf>
			for (int i = 0; i < step; i++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e01d      	b.n	8002b60 <showBuf+0xb8>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002b24:	482f      	ldr	r0, [pc, #188]	; (8002be4 <showBuf+0x13c>)
 8002b26:	f7fd fb53 	bl	80001d0 <strlen>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4a2d      	ldr	r2, [pc, #180]	; (8002be4 <showBuf+0x13c>)
 8002b2e:	1898      	adds	r0, r3, r2
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	4413      	add	r3, r2
 8002b36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	492b      	ldr	r1, [pc, #172]	; (8002bec <showBuf+0x144>)
 8002b40:	f00c fd8a 	bl	800f658 <siprintf>
				ix++;
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	3301      	adds	r3, #1
 8002b48:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 8002b4a:	6a3a      	ldr	r2, [r7, #32]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d103      	bne.n	8002b5a <showBuf+0xb2>
					done = true;
 8002b52:	2301      	movs	r3, #1
 8002b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 8002b58:	e006      	b.n	8002b68 <showBuf+0xc0>
			for (int i = 0; i < step; i++) {
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	dbdd      	blt.n	8002b24 <showBuf+0x7c>
				}
			}
			strcat(stx, eol);
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <showBuf+0x148>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	481d      	ldr	r0, [pc, #116]	; (8002be4 <showBuf+0x13c>)
 8002b70:	f00c fdd5 	bl	800f71e <strcat>
			addr += step;
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b78:	4413      	add	r3, r2
 8002b7a:	62bb      	str	r3, [r7, #40]	; 0x28
			ind += step;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b80:	4413      	add	r3, r2
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <showBuf+0xee>
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 8002b96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b9a:	f083 0301 	eor.w	r3, r3, #1
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d1b1      	bne.n	8002b08 <showBuf+0x60>
		}
		if (dbg != logOff) Report(0, "%s", stx);
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <showBuf+0x14c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d014      	beq.n	8002bd6 <showBuf+0x12e>
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <showBuf+0x13c>)
 8002bae:	4912      	ldr	r1, [pc, #72]	; (8002bf8 <showBuf+0x150>)
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f7ff ff13 	bl	80029dc <Report>
	} else {
		if (dbg != logOff) Report(0, "\tError: ind=%lu len=%lu readed=%d%s", ind, len, rd, eol);
	}
}
 8002bb6:	e00e      	b.n	8002bd6 <showBuf+0x12e>
		if (dbg != logOff) Report(0, "\tError: ind=%lu len=%lu readed=%d%s", ind, len, rd, eol);
 8002bb8:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <showBuf+0x14c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <showBuf+0x12e>
 8002bc0:	7bbb      	ldrb	r3, [r7, #14]
 8002bc2:	4a0b      	ldr	r2, [pc, #44]	; (8002bf0 <showBuf+0x148>)
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bce:	490b      	ldr	r1, [pc, #44]	; (8002bfc <showBuf+0x154>)
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7ff ff03 	bl	80029dc <Report>
}
 8002bd6:	bf00      	nop
 8002bd8:	3730      	adds	r7, #48	; 0x30
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200015c8 	.word	0x200015c8
 8002be4:	20002604 	.word	0x20002604
 8002be8:	08010498 	.word	0x08010498
 8002bec:	080104a0 	.word	0x080104a0
 8002bf0:	20000004 	.word	0x20000004
 8002bf4:	20000082 	.word	0x20000082
 8002bf8:	080104a8 	.word	0x080104a8
 8002bfc:	080104ac 	.word	0x080104ac

08002c00 <HAL_UART_RxCpltCallback>:
#endif
//-------------------------------------------------------------------------------------------
//                        CallBack Functions
//-------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b093      	sub	sp, #76	; 0x4c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4ab3      	ldr	r2, [pc, #716]	; (8002edc <HAL_UART_RxCpltCallback+0x2dc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	f040 8282 	bne.w	8003118 <HAL_UART_RxCpltCallback+0x518>

		rxBuf[ruk++] = (char)rxByte;
 8002c14:	4bb2      	ldr	r3, [pc, #712]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	b291      	uxth	r1, r2
 8002c1c:	4ab0      	ldr	r2, [pc, #704]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c1e:	8011      	strh	r1, [r2, #0]
 8002c20:	461a      	mov	r2, r3
 8002c22:	4bb0      	ldr	r3, [pc, #704]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c24:	7819      	ldrb	r1, [r3, #0]
 8002c26:	4bb0      	ldr	r3, [pc, #704]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c28:	5499      	strb	r1, [r3, r2]

		if (rxByte == 0x0a) {//end of line
 8002c2a:	4bae      	ldr	r3, [pc, #696]	; (8002ee4 <HAL_UART_RxCpltCallback+0x2e4>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b0a      	cmp	r3, #10
 8002c30:	f040 826d 	bne.w	800310e <HAL_UART_RxCpltCallback+0x50e>
			rxBuf[--ruk] = '\0';
 8002c34:	4baa      	ldr	r3, [pc, #680]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	4ba8      	ldr	r3, [pc, #672]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c3e:	801a      	strh	r2, [r3, #0]
 8002c40:	4ba7      	ldr	r3, [pc, #668]	; (8002ee0 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4ba8      	ldr	r3, [pc, #672]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	647b      	str	r3, [r7, #68]	; 0x44
			bool check = false;
 8002c50:	2300      	movs	r3, #0
 8002c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			cmd_flag = 0;
 8002c56:	4ba5      	ldr	r3, [pc, #660]	; (8002eec <HAL_UART_RxCpltCallback+0x2ec>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	83bb      	strh	r3, [r7, #28]
			int8_t idx = -1;
 8002c60:	23ff      	movs	r3, #255	; 0xff
 8002c62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			if (strlen(rxBuf) > 2) {
 8002c66:	48a0      	ldr	r0, [pc, #640]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c68:	f7fd fab2 	bl	80001d0 <strlen>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f240 8224 	bls.w	80030bc <HAL_UART_RxCpltCallback+0x4bc>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002c7a:	e023      	b.n	8002cc4 <HAL_UART_RxCpltCallback+0xc4>
					if (!(strncmp(rxBuf, s_cmds[i], strlen(s_cmds[i])))) {
 8002c7c:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002c80:	4a9b      	ldr	r2, [pc, #620]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002c82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002c86:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002c8a:	4a99      	ldr	r2, [pc, #612]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fa9d 	bl	80001d0 <strlen>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	4892      	ldr	r0, [pc, #584]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002c9e:	f00c fd62 	bl	800f766 <strncmp>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d106      	bne.n	8002cb6 <HAL_UART_RxCpltCallback+0xb6>
						                                  //"CHECK:"
														  //"log:"
														  //"info"
														  //"memory"
						                                  //"inputerr"
						idx = i;
 8002ca8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002cac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						uk = rxBuf;
 8002cb0:	4b8d      	ldr	r3, [pc, #564]	; (8002ee8 <HAL_UART_RxCpltCallback+0x2e8>)
 8002cb2:	647b      	str	r3, [r7, #68]	; 0x44
						break;
 8002cb4:	e00a      	b.n	8002ccc <HAL_UART_RxCpltCallback+0xcc>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8002cb6:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8002cc4:	f997 3041 	ldrsb.w	r3, [r7, #65]	; 0x41
 8002cc8:	2b0e      	cmp	r3, #14
 8002cca:	ddd7      	ble.n	8002c7c <HAL_UART_RxCpltCallback+0x7c>
					}
				}
				if (idx != -1) {
 8002ccc:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd4:	f000 81f2 	beq.w	80030bc <HAL_UART_RxCpltCallback+0x4bc>
					nandLen = MAX_LEN_DATA;//256;
 8002cd8:	4b86      	ldr	r3, [pc, #536]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8002ce0:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002ce4:	4a82      	ldr	r2, [pc, #520]	; (8002ef0 <HAL_UART_RxCpltCallback+0x2f0>)
 8002ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fa70 	bl	80001d0 <strlen>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf4:	4413      	add	r3, r2
 8002cf6:	647b      	str	r3, [r7, #68]	; 0x44
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d00:	2300      	movs	r3, #0
 8002d02:	63bb      	str	r3, [r7, #56]	; 0x38
					switch (idx) {
 8002d04:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002d08:	2b0e      	cmp	r3, #14
 8002d0a:	f200 81b7 	bhi.w	800307c <HAL_UART_RxCpltCallback+0x47c>
 8002d0e:	a201      	add	r2, pc, #4	; (adr r2, 8002d14 <HAL_UART_RxCpltCallback+0x114>)
 8002d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d14:	08002d51 	.word	0x08002d51
 8002d18:	08002d51 	.word	0x08002d51
 8002d1c:	08002d59 	.word	0x08002d59
 8002d20:	08002db1 	.word	0x08002db1
 8002d24:	08002e31 	.word	0x08002e31
 8002d28:	08002e49 	.word	0x08002e49
 8002d2c:	08002fb9 	.word	0x08002fb9
 8002d30:	08002db1 	.word	0x08002db1
 8002d34:	08002e49 	.word	0x08002e49
 8002d38:	08002fef 	.word	0x08002fef
 8002d3c:	08002fef 	.word	0x08002fef
 8002d40:	08003023 	.word	0x08003023
 8002d44:	08002d51 	.word	0x08002d51
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002d51 	.word	0x08002d51
						case cmdHelp:
						case cmdInfo:
						case cmdRestart:
						case cmdMem:
						case cmdErr:
							cmd_flag = 1;
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_UART_RxCpltCallback+0x2ec>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
						break;
 8002d56:	e191      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						case cmdEpoch:
							if (strlen(uk) < 10) {
 8002d58:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d5a:	f7fd fa39 	bl	80001d0 <strlen>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b09      	cmp	r3, #9
 8002d62:	d802      	bhi.n	8002d6a <HAL_UART_RxCpltCallback+0x16a>
								qcmd.attr = 1;
 8002d64:	2301      	movs	r3, #1
 8002d66:	777b      	strb	r3, [r7, #29]
 8002d68:	e01e      	b.n	8002da8 <HAL_UART_RxCpltCallback+0x1a8>
							} else {
								uki = strchr(uk, ':');
 8002d6a:	213a      	movs	r1, #58	; 0x3a
 8002d6c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d6e:	f00c fce5 	bl	800f73c <strchr>
 8002d72:	63f8      	str	r0, [r7, #60]	; 0x3c
								if (uki) {
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_UART_RxCpltCallback+0x194>
									tZone = (uint8_t)atol(uki + 1);
 8002d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f00b fe18 	bl	800e9b4 <atol>
 8002d84:	4603      	mov	r3, r0
 8002d86:	b2da      	uxtb	r2, r3
 8002d88:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2f8>)
 8002d8a:	701a      	strb	r2, [r3, #0]
									*uki = '\0';
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	e002      	b.n	8002d9a <HAL_UART_RxCpltCallback+0x19a>
								} else {
									tZone = 0;
 8002d94:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_UART_RxCpltCallback+0x2f8>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	701a      	strb	r2, [r3, #0]
								}
								epoch = (uint32_t)atol(uk);
 8002d9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002d9c:	f00b fe0a 	bl	800e9b4 <atol>
 8002da0:	4603      	mov	r3, r0
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b55      	ldr	r3, [pc, #340]	; (8002efc <HAL_UART_RxCpltCallback+0x2fc>)
 8002da6:	601a      	str	r2, [r3, #0]
							}
							cmd_flag = 1;
 8002da8:	4b50      	ldr	r3, [pc, #320]	; (8002eec <HAL_UART_RxCpltCallback+0x2ec>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
						break;
 8002dae:	e165      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						case cmdRead://"read:0x4549ABBB:256";
						case cmdReadECC:
							uki = strchr(uk, ':');
 8002db0:	213a      	movs	r1, #58	; 0x3a
 8002db2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002db4:	f00c fcc2 	bl	800f73c <strchr>
 8002db8:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_UART_RxCpltCallback+0x1d8>
								nandLen = atol(uki + 1);
 8002dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f00b fdf5 	bl	800e9b4 <atol>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002dd0:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8002dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8002dd8:	4949      	ldr	r1, [pc, #292]	; (8002f00 <HAL_UART_RxCpltCallback+0x300>)
 8002dda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ddc:	f00c fcea 	bl	800f7b4 <strstr>
 8002de0:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d00f      	beq.n	8002e08 <HAL_UART_RxCpltCallback+0x208>
								uki += 2;
 8002de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dea:	3302      	adds	r3, #2
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
								nandAdr = hex2bin(uki, strlen(uki));
 8002dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002df0:	f7fd f9ee 	bl	80001d0 <strlen>
 8002df4:	4603      	mov	r3, r0
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dfc:	f7ff fbb2 	bl	8002564 <hex2bin>
 8002e00:	4603      	mov	r3, r0
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <HAL_UART_RxCpltCallback+0x304>)
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e006      	b.n	8002e16 <HAL_UART_RxCpltCallback+0x216>
							} else {
								nandAdr = atol(uk);
 8002e08:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e0a:	f00b fdd3 	bl	800e9b4 <atol>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b3c      	ldr	r3, [pc, #240]	; (8002f04 <HAL_UART_RxCpltCallback+0x304>)
 8002e14:	601a      	str	r2, [r3, #0]
							}
							if (idx == cmdReadECC) nandLen = chipConf.SpareAreaSize;
 8002e16:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002e1a:	2b07      	cmp	r3, #7
 8002e1c:	d104      	bne.n	8002e28 <HAL_UART_RxCpltCallback+0x228>
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <HAL_UART_RxCpltCallback+0x308>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e26:	801a      	strh	r2, [r3, #0]
							check = true;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
						break;
 8002e2e:	e125      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						case cmdNext://"next";
							nandAdr += nandLen;
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_UART_RxCpltCallback+0x2f4>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b33      	ldr	r3, [pc, #204]	; (8002f04 <HAL_UART_RxCpltCallback+0x304>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <HAL_UART_RxCpltCallback+0x304>)
 8002e3e:	6013      	str	r3, [r2, #0]
							cmd_flag = 1;
 8002e40:	4b2a      	ldr	r3, [pc, #168]	; (8002eec <HAL_UART_RxCpltCallback+0x2ec>)
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
						break;
 8002e46:	e119      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						case cmdWriteECC://"wrecc:0:12"
						{
							bool hex = false;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
							uki = strstr(uk, "0x");
 8002e4e:	492c      	ldr	r1, [pc, #176]	; (8002f00 <HAL_UART_RxCpltCallback+0x300>)
 8002e50:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002e52:	f00c fcaf 	bl	800f7b4 <strstr>
 8002e56:	63f8      	str	r0, [r7, #60]	; 0x3c
							if (uki) {
 8002e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_UART_RxCpltCallback+0x274>
								if (uki == uk) {
 8002e5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d108      	bne.n	8002e78 <HAL_UART_RxCpltCallback+0x278>
									uki += 2;
 8002e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e68:	3302      	adds	r3, #2
 8002e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
									hex = true;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e72:	e001      	b.n	8002e78 <HAL_UART_RxCpltCallback+0x278>
								}
							} else uki = uk;
 8002e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
							uke = strchr(uki, ':');//adr:byte
 8002e78:	213a      	movs	r1, #58	; 0x3a
 8002e7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e7c:	f00c fc5e 	bl	800f73c <strchr>
 8002e80:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80f6 	beq.w	8003076 <HAL_UART_RxCpltCallback+0x476>
								ukb = uke + 1;
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
								char tmp[16];
								memset(tmp, 0, 16);
 8002e90:	f107 030c 	add.w	r3, r7, #12
 8002e94:	2210      	movs	r2, #16
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f00b ff75 	bl	800ed88 <memset>
								memcpy(tmp, uki, uke - uki);
 8002e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00b ff5d 	bl	800ed6c <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8002eb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d028      	beq.n	8002f0c <HAL_UART_RxCpltCallback+0x30c>
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd f986 	bl	80001d0 <strlen>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	f107 030c 	add.w	r3, r7, #12
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff fb48 	bl	8002564 <hex2bin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4a0b      	ldr	r2, [pc, #44]	; (8002f04 <HAL_UART_RxCpltCallback+0x304>)
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e020      	b.n	8002f1e <HAL_UART_RxCpltCallback+0x31e>
 8002edc:	40004800 	.word	0x40004800
 8002ee0:	200015ba 	.word	0x200015ba
 8002ee4:	200015b8 	.word	0x200015b8
 8002ee8:	20000db8 	.word	0x20000db8
 8002eec:	200005a6 	.word	0x200005a6
 8002ef0:	20000008 	.word	0x20000008
 8002ef4:	200015d0 	.word	0x200015d0
 8002ef8:	200015bd 	.word	0x200015bd
 8002efc:	20000084 	.word	0x20000084
 8002f00:	080104d0 	.word	0x080104d0
 8002f04:	200015cc 	.word	0x200015cc
 8002f08:	200015e8 	.word	0x200015e8
								    else nandAdr = atol(tmp);
 8002f0c:	f107 030c 	add.w	r3, r7, #12
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00b fd4f 	bl	800e9b4 <atol>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461a      	mov	r2, r3
 8002f1a:	4b81      	ldr	r3, [pc, #516]	; (8003120 <HAL_UART_RxCpltCallback+0x520>)
 8002f1c:	601a      	str	r2, [r3, #0]
								uki = ukb;
 8002f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
								uke = strchr(uki, ':');//byte:len
 8002f22:	213a      	movs	r1, #58	; 0x3a
 8002f24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f26:	f00c fc09 	bl	800f73c <strchr>
 8002f2a:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_UART_RxCpltCallback+0x34a>
									nandLen = atol(uke + 1);
 8002f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f34:	3301      	adds	r3, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f00b fd3c 	bl	800e9b4 <atol>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	4b78      	ldr	r3, [pc, #480]	; (8003124 <HAL_UART_RxCpltCallback+0x524>)
 8002f42:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 8002f4a:	4977      	ldr	r1, [pc, #476]	; (8003128 <HAL_UART_RxCpltCallback+0x528>)
 8002f4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f4e:	f00c fc31 	bl	800f7b4 <strstr>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d006      	beq.n	8002f66 <HAL_UART_RxCpltCallback+0x366>
									ukb += 2;
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	3302      	adds	r3, #2
 8002f5c:	63bb      	str	r3, [r7, #56]	; 0x38
									hex = true;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f64:	e002      	b.n	8002f6c <HAL_UART_RxCpltCallback+0x36c>
								} else hex = false;
 8002f66:	2300      	movs	r3, #0
 8002f68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 8002f6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00d      	beq.n	8002f90 <HAL_UART_RxCpltCallback+0x390>
 8002f74:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f76:	f7fd f92b 	bl	80001d0 <strlen>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	4619      	mov	r1, r3
 8002f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f82:	f7ff faef 	bl	8002564 <hex2bin>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4b68      	ldr	r3, [pc, #416]	; (800312c <HAL_UART_RxCpltCallback+0x52c>)
 8002f8c:	701a      	strb	r2, [r3, #0]
 8002f8e:	e006      	b.n	8002f9e <HAL_UART_RxCpltCallback+0x39e>
								    else nandByte = (uint8_t)atol(ukb);
 8002f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f92:	f00b fd0f 	bl	800e9b4 <atol>
 8002f96:	4603      	mov	r3, r0
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	4b64      	ldr	r3, [pc, #400]	; (800312c <HAL_UART_RxCpltCallback+0x52c>)
 8002f9c:	701a      	strb	r2, [r3, #0]
								if (idx == cmdWriteECC) nandLen = chipConf.SpareAreaSize;
 8002f9e:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002fa2:	2b08      	cmp	r3, #8
 8002fa4:	d104      	bne.n	8002fb0 <HAL_UART_RxCpltCallback+0x3b0>
 8002fa6:	4b62      	ldr	r3, [pc, #392]	; (8003130 <HAL_UART_RxCpltCallback+0x530>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <HAL_UART_RxCpltCallback+0x524>)
 8002fae:	801a      	strh	r2, [r3, #0]
								check = true;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
							}
						}
						break;
 8002fb6:	e05e      	b.n	8003076 <HAL_UART_RxCpltCallback+0x476>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 8002fb8:	495e      	ldr	r1, [pc, #376]	; (8003134 <HAL_UART_RxCpltCallback+0x534>)
 8002fba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fbc:	f00c fbfa 	bl	800f7b4 <strstr>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <HAL_UART_RxCpltCallback+0x3cc>
								qcmd.attr = 1;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	777b      	strb	r3, [r7, #29]
 8002fca:	e00c      	b.n	8002fe6 <HAL_UART_RxCpltCallback+0x3e6>
							} else {
								uint32_t blk = atol(uk);
 8002fcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fce:	f00b fcf1 	bl	800e9b4 <atol>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 8002fd6:	4b56      	ldr	r3, [pc, #344]	; (8003130 <HAL_UART_RxCpltCallback+0x530>)
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	6a3a      	ldr	r2, [r7, #32]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d202      	bcs.n	8002fe6 <HAL_UART_RxCpltCallback+0x3e6>
 8002fe0:	4a55      	ldr	r2, [pc, #340]	; (8003138 <HAL_UART_RxCpltCallback+0x538>)
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	6013      	str	r3, [r2, #0]
							}
							cmd_flag = 1;
 8002fe6:	4b55      	ldr	r3, [pc, #340]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	701a      	strb	r2, [r3, #0]
						break;
 8002fec:	e046      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						case cmdCheckPage://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						case cmdCheckBlk:
						{
							uint32_t max_val = total_pages;
 8002fee:	4b54      	ldr	r3, [pc, #336]	; (8003140 <HAL_UART_RxCpltCallback+0x540>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	633b      	str	r3, [r7, #48]	; 0x30
							if (idx == cmdCheckBlk) {
 8002ff4:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8002ff8:	2b0a      	cmp	r3, #10
 8002ffa:	d102      	bne.n	8003002 <HAL_UART_RxCpltCallback+0x402>
								max_val = chipConf.BlockNbr;
 8002ffc:	4b4c      	ldr	r3, [pc, #304]	; (8003130 <HAL_UART_RxCpltCallback+0x530>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	633b      	str	r3, [r7, #48]	; 0x30
							}
							uint32_t page = atol(uk);
 8003002:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003004:	f00b fcd6 	bl	800e9b4 <atol>
 8003008:	4603      	mov	r3, r0
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < max_val) {//128MB / 2K = 65536 - pages
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	429a      	cmp	r2, r3
 8003012:	d232      	bcs.n	800307a <HAL_UART_RxCpltCallback+0x47a>
								nandPage = page;
 8003014:	4a4b      	ldr	r2, [pc, #300]	; (8003144 <HAL_UART_RxCpltCallback+0x544>)
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	6013      	str	r3, [r2, #0]
								cmd_flag = 1;
 800301a:	4b48      	ldr	r3, [pc, #288]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 800301c:	2201      	movs	r2, #1
 800301e:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8003020:	e02b      	b.n	800307a <HAL_UART_RxCpltCallback+0x47a>
						case cmdLog://"log:off" , "log:on" , "log:dump"
						{
							uint8_t lg = logNone;
 8003022:	2303      	movs	r3, #3
 8003024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							if (strstr(uk, "off")) {
 8003028:	4947      	ldr	r1, [pc, #284]	; (8003148 <HAL_UART_RxCpltCallback+0x548>)
 800302a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800302c:	f00c fbc2 	bl	800f7b4 <strstr>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_UART_RxCpltCallback+0x43e>
								lg = logOff;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800303c:	e014      	b.n	8003068 <HAL_UART_RxCpltCallback+0x468>
							} else if (strstr(uk, "on")) {
 800303e:	4943      	ldr	r1, [pc, #268]	; (800314c <HAL_UART_RxCpltCallback+0x54c>)
 8003040:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003042:	f00c fbb7 	bl	800f7b4 <strstr>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_UART_RxCpltCallback+0x454>
								lg = logOn;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003052:	e009      	b.n	8003068 <HAL_UART_RxCpltCallback+0x468>
							} else if (strstr(uk, "dump")) {
 8003054:	493e      	ldr	r1, [pc, #248]	; (8003150 <HAL_UART_RxCpltCallback+0x550>)
 8003056:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003058:	f00c fbac 	bl	800f7b4 <strstr>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_UART_RxCpltCallback+0x468>
								lg = logDump;
 8003062:	2302      	movs	r3, #2
 8003064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							}
							qcmd.attr = lg;
 8003068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800306c:	777b      	strb	r3, [r7, #29]
							cmd_flag = 1;
 800306e:	4b33      	ldr	r3, [pc, #204]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 8003070:	2201      	movs	r2, #1
 8003072:	701a      	strb	r2, [r3, #0]
						}
						break;
 8003074:	e002      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						break;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <HAL_UART_RxCpltCallback+0x47c>
						break;
 800307a:	bf00      	nop
					}
					qcmd.cmd = idx;
 800307c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8003080:	773b      	strb	r3, [r7, #28]
					if (check) {
 8003082:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <HAL_UART_RxCpltCallback+0x4bc>
						if ((nandAdr + nandLen) >= total_bytes) {
 800308a:	4b26      	ldr	r3, [pc, #152]	; (8003124 <HAL_UART_RxCpltCallback+0x524>)
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b23      	ldr	r3, [pc, #140]	; (8003120 <HAL_UART_RxCpltCallback+0x520>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	441a      	add	r2, r3
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <HAL_UART_RxCpltCallback+0x554>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d30b      	bcc.n	80030b6 <HAL_UART_RxCpltCallback+0x4b6>
							nandLen = total_bytes - nandAdr - 1;
 800309e:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <HAL_UART_RxCpltCallback+0x554>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <HAL_UART_RxCpltCallback+0x520>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_UART_RxCpltCallback+0x524>)
 80030b4:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (!cmd_flag) {
 80030bc:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d104      	bne.n	80030ce <HAL_UART_RxCpltCallback+0x4ce>
				cmd_flag = 1;
 80030c4:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
				qcmd.cmd = cmdErr;
 80030ca:	230e      	movs	r3, #14
 80030cc:	773b      	strb	r3, [r7, #28]
			}
			if (cmd_flag) {
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <HAL_UART_RxCpltCallback+0x53c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d015      	beq.n	8003102 <HAL_UART_RxCpltCallback+0x502>
				if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 80030d6:	4b20      	ldr	r3, [pc, #128]	; (8003158 <HAL_UART_RxCpltCallback+0x558>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	f107 011c 	add.w	r1, r7, #28
 80030de:	2300      	movs	r3, #0
 80030e0:	2205      	movs	r2, #5
 80030e2:	f008 fd6b 	bl	800bbbc <osMessageQueuePut>
 80030e6:	4603      	mov	r3, r0
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_UART_RxCpltCallback+0x55c>)
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b1b      	ldr	r3, [pc, #108]	; (800315c <HAL_UART_RxCpltCallback+0x55c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d006      	beq.n	8003102 <HAL_UART_RxCpltCallback+0x502>
 80030f4:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <HAL_UART_RxCpltCallback+0x560>)
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_UART_RxCpltCallback+0x560>)
 8003100:	801a      	strh	r2, [r3, #0]
			}
			//
			ruk = 0;
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_UART_RxCpltCallback+0x564>)
 8003104:	2200      	movs	r2, #0
 8003106:	801a      	strh	r2, [r3, #0]
			*rxBuf = '\0';
 8003108:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_UART_RxCpltCallback+0x568>)
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
			//
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 800310e:	2201      	movs	r2, #1
 8003110:	4916      	ldr	r1, [pc, #88]	; (800316c <HAL_UART_RxCpltCallback+0x56c>)
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f007 f9eb 	bl	800a4ee <HAL_UART_Receive_IT>
	}
}
 8003118:	bf00      	nop
 800311a:	374c      	adds	r7, #76	; 0x4c
 800311c:	46bd      	mov	sp, r7
 800311e:	bd90      	pop	{r4, r7, pc}
 8003120:	200015cc 	.word	0x200015cc
 8003124:	200015d0 	.word	0x200015d0
 8003128:	080104d0 	.word	0x080104d0
 800312c:	200000a0 	.word	0x200000a0
 8003130:	200015e8 	.word	0x200015e8
 8003134:	080104d4 	.word	0x080104d4
 8003138:	200015d4 	.word	0x200015d4
 800313c:	200005a6 	.word	0x200005a6
 8003140:	200015c0 	.word	0x200015c0
 8003144:	200015d8 	.word	0x200015d8
 8003148:	080104d8 	.word	0x080104d8
 800314c:	080104dc 	.word	0x080104dc
 8003150:	080104e0 	.word	0x080104e0
 8003154:	200015c4 	.word	0x200015c4
 8003158:	2000059c 	.word	0x2000059c
 800315c:	20002600 	.word	0x20002600
 8003160:	200005a4 	.word	0x200005a4
 8003164:	200015ba 	.word	0x200015ba
 8003168:	20000db8 	.word	0x20000db8
 800316c:	200015b8 	.word	0x200015b8

08003170 <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a05      	ldr	r2, [pc, #20]	; (8003194 <HAL_UART_TxCpltCallback+0x24>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d102      	bne.n	8003188 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_UART_TxCpltCallback+0x28>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	}
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40004800 	.word	0x40004800
 8003198:	20000080 	.word	0x20000080

0800319c <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a05      	ldr	r2, [pc, #20]	; (80031c0 <HAL_SPI_TxCpltCallback+0x24>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d102      	bne.n	80031b4 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HAL_SPI_TxCpltCallback+0x28>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
	}
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40013000 	.word	0x40013000
 80031c4:	20000081 	.word	0x20000081

080031c8 <HAL_NAND_ITCallback>:
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	cb_nandCounter++;
 80031d0:	4b05      	ldr	r3, [pc, #20]	; (80031e8 <HAL_NAND_ITCallback+0x20>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3301      	adds	r3, #1
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <HAL_NAND_ITCallback+0x20>)
 80031d8:	6013      	str	r3, [r2, #0]
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	200015dc 	.word	0x200015dc
 80031ec:	00000000 	.word	0x00000000

080031f0 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 80031f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031f2:	f2ad 4d9c 	subw	sp, sp, #1180	; 0x49c
 80031f6:	af06      	add	r7, sp, #24
 80031f8:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80031fc:	f2a3 437c 	subw	r3, r3, #1148	; 0x47c
 8003200:	6018      	str	r0, [r3, #0]
#ifdef SET_SWV
	char stz[MAX_SCR_BUF];
#endif


	HAL_Delay(500);
 8003202:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003206:	f002 f8af 	bl	8005368 <HAL_Delay>
	if (dbg != logOff) {
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <defThread+0x1a4>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d018      	beq.n	8003244 <defThread+0x54>
		Report(0, "%s", eol);
 8003212:	4b61      	ldr	r3, [pc, #388]	; (8003398 <defThread+0x1a8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	4960      	ldr	r1, [pc, #384]	; (800339c <defThread+0x1ac>)
 800321a:	2000      	movs	r0, #0
 800321c:	f7ff fbde 	bl	80029dc <Report>
		Report(1, "%s Старт '%s' FreeRTOS memory: free=%lu heap=%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003220:	4b5f      	ldr	r3, [pc, #380]	; (80033a0 <defThread+0x1b0>)
 8003222:	681c      	ldr	r4, [r3, #0]
 8003224:	f00b fa96 	bl	800e754 <xPortGetFreeHeapSize>
 8003228:	4602      	mov	r2, r0
 800322a:	4b5b      	ldr	r3, [pc, #364]	; (8003398 <defThread+0x1a8>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	9302      	str	r3, [sp, #8]
 8003230:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	9200      	str	r2, [sp, #0]
 8003238:	4b5a      	ldr	r3, [pc, #360]	; (80033a4 <defThread+0x1b4>)
 800323a:	4622      	mov	r2, r4
 800323c:	495a      	ldr	r1, [pc, #360]	; (80033a8 <defThread+0x1b8>)
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff fbcc 	bl	80029dc <Report>
	}

	uint8_t byte = logOff;
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
	uint8_t next_block_erase = 0;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
	uint32_t iBlk, stik;
	uint8_t nand_show = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
	bool readed = false;
 8003256:	2300      	movs	r3, #0
 8003258:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
	char cid[32] = {0};
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8003262:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]
 800326a:	605a      	str	r2, [r3, #4]
 800326c:	609a      	str	r2, [r3, #8]
 800326e:	60da      	str	r2, [r3, #12]
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	615a      	str	r2, [r3, #20]
 8003274:	619a      	str	r2, [r3, #24]
	uint32_t BlockSizeKB = (chipConf.BlockSize * chipConf.PageSize) / 1024;
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <defThread+0x1bc>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4a4c      	ldr	r2, [pc, #304]	; (80033ac <defThread+0x1bc>)
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	0a9b      	lsrs	r3, r3, #10
 8003284:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
	uint32_t PlaneSizeMB = (chipConf.PlaneNbr * (chipConf.BlockSize * chipConf.PageSize * chipConf.BlockNbr)) / 1024 / 1024;
 8003288:	4b48      	ldr	r3, [pc, #288]	; (80033ac <defThread+0x1bc>)
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	4a47      	ldr	r2, [pc, #284]	; (80033ac <defThread+0x1bc>)
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	4946      	ldr	r1, [pc, #280]	; (80033ac <defThread+0x1bc>)
 8003292:	6809      	ldr	r1, [r1, #0]
 8003294:	fb01 f202 	mul.w	r2, r1, r2
 8003298:	4944      	ldr	r1, [pc, #272]	; (80033ac <defThread+0x1bc>)
 800329a:	68c9      	ldr	r1, [r1, #12]
 800329c:	fb01 f202 	mul.w	r2, r1, r2
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	0d1b      	lsrs	r3, r3, #20
 80032a6:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80032aa:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <defThread+0x1c0>)
 80032ac:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
	if (nandState == HAL_NAND_STATE_READY) {
 80032b0:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <defThread+0x1c4>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	f040 8091 	bne.w	80033dc <defThread+0x1ec>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 80032ba:	4b3d      	ldr	r3, [pc, #244]	; (80033b0 <defThread+0x1c0>)
 80032bc:	785b      	ldrb	r3, [r3, #1]
 80032be:	22f1      	movs	r2, #241	; 0xf1
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d108      	bne.n	80032d6 <defThread+0xe6>
 80032c4:	4b3c      	ldr	r3, [pc, #240]	; (80033b8 <defThread+0x1c8>)
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80032cc:	2220      	movs	r2, #32
 80032ce:	4618      	mov	r0, r3
 80032d0:	f00c fa5d 	bl	800f78e <strncpy>
 80032d4:	e006      	b.n	80032e4 <defThread+0xf4>
		                               else strcpy(cid, "UNKNOWN");
 80032d6:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 80032da:	4a38      	ldr	r2, [pc, #224]	; (80033bc <defThread+0x1cc>)
 80032dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032e0:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <defThread+0x1d0>)
 80032e6:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <defThread+0x1d4>)
 80032e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80032ec:	6018      	str	r0, [r3, #0]
 80032ee:	3304      	adds	r3, #4
 80032f0:	8019      	strh	r1, [r3, #0]
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80032f2:	2300      	movs	r3, #0
 80032f4:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 80032f8:	e016      	b.n	8003328 <defThread+0x138>
 80032fa:	4831      	ldr	r0, [pc, #196]	; (80033c0 <defThread+0x1d0>)
 80032fc:	f7fc ff68 	bl	80001d0 <strlen>
 8003300:	4603      	mov	r3, r0
 8003302:	4a2f      	ldr	r2, [pc, #188]	; (80033c0 <defThread+0x1d0>)
 8003304:	1898      	adds	r0, r3, r2
 8003306:	f997 3471 	ldrsb.w	r3, [r7, #1137]	; 0x471
 800330a:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	492c      	ldr	r1, [pc, #176]	; (80033c8 <defThread+0x1d8>)
 8003316:	f00c f99f 	bl	800f658 <siprintf>
 800331a:	f997 3471 	ldrsb.w	r3, [r7, #1137]	; 0x471
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3301      	adds	r3, #1
 8003322:	b2db      	uxtb	r3, r3
 8003324:	f887 3471 	strb.w	r3, [r7, #1137]	; 0x471
 8003328:	f897 3471 	ldrb.w	r3, [r7, #1137]	; 0x471
 800332c:	2b04      	cmp	r3, #4
 800332e:	d9e4      	bls.n	80032fa <defThread+0x10a>
		sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003330:	4823      	ldr	r0, [pc, #140]	; (80033c0 <defThread+0x1d0>)
 8003332:	f7fc ff4d 	bl	80001d0 <strlen>
 8003336:	4603      	mov	r3, r0
 8003338:	4a21      	ldr	r2, [pc, #132]	; (80033c0 <defThread+0x1d0>)
 800333a:	1898      	adds	r0, r3, r2
 800333c:	4b1c      	ldr	r3, [pc, #112]	; (80033b0 <defThread+0x1c0>)
 800333e:	785b      	ldrb	r3, [r3, #1]
 8003340:	461a      	mov	r2, r3
 8003342:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003346:	4921      	ldr	r1, [pc, #132]	; (80033cc <defThread+0x1dc>)
 8003348:	f00c f986 	bl	800f658 <siprintf>
		sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 800334c:	481c      	ldr	r0, [pc, #112]	; (80033c0 <defThread+0x1d0>)
 800334e:	f7fc ff3f 	bl	80001d0 <strlen>
 8003352:	4603      	mov	r3, r0
 8003354:	4a1a      	ldr	r2, [pc, #104]	; (80033c0 <defThread+0x1d0>)
 8003356:	189c      	adds	r4, r3, r2
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <defThread+0x1bc>)
 800335a:	681d      	ldr	r5, [r3, #0]
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <defThread+0x1bc>)
 800335e:	685e      	ldr	r6, [r3, #4]
 8003360:	4b12      	ldr	r3, [pc, #72]	; (80033ac <defThread+0x1bc>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	4a11      	ldr	r2, [pc, #68]	; (80033ac <defThread+0x1bc>)
 8003366:	6912      	ldr	r2, [r2, #16]
 8003368:	4919      	ldr	r1, [pc, #100]	; (80033d0 <defThread+0x1e0>)
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	4819      	ldr	r0, [pc, #100]	; (80033d4 <defThread+0x1e4>)
 800336e:	6800      	ldr	r0, [r0, #0]
 8003370:	9005      	str	r0, [sp, #20]
 8003372:	9104      	str	r1, [sp, #16]
 8003374:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8003378:	9103      	str	r1, [sp, #12]
 800337a:	9202      	str	r2, [sp, #8]
 800337c:	9301      	str	r3, [sp, #4]
 800337e:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4633      	mov	r3, r6
 8003386:	462a      	mov	r2, r5
 8003388:	4913      	ldr	r1, [pc, #76]	; (80033d8 <defThread+0x1e8>)
 800338a:	4620      	mov	r0, r4
 800338c:	f00c f964 	bl	800f658 <siprintf>
 8003390:	e031      	b.n	80033f6 <defThread+0x206>
 8003392:	bf00      	nop
 8003394:	20000082 	.word	0x20000082
 8003398:	20000004 	.word	0x20000004
 800339c:	080104a8 	.word	0x080104a8
 80033a0:	20000000 	.word	0x20000000
 80033a4:	08013b38 	.word	0x08013b38
 80033a8:	080104e8 	.word	0x080104e8
 80033ac:	200015e8 	.word	0x200015e8
 80033b0:	200015e0 	.word	0x200015e0
 80033b4:	200000a1 	.word	0x200000a1
 80033b8:	200000a4 	.word	0x200000a4
 80033bc:	08010528 	.word	0x08010528
 80033c0:	20002604 	.word	0x20002604
 80033c4:	08010530 	.word	0x08010530
 80033c8:	080104a0 	.word	0x080104a0
 80033cc:	08010538 	.word	0x08010538
 80033d0:	200015c0 	.word	0x200015c0
 80033d4:	200015c4 	.word	0x200015c4
 80033d8:	08010550 	.word	0x08010550
#ifdef SET_AUDIO_DAC
		if (audioStat == HAL_OK) sprintf(stx+strlen(stx), "\n\tAudio: '%s' (id:%u rev:%u)", audioName, audioID, audioRev);
#endif
	} else {
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
					     nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 80033dc:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <defThread+0x470>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx, "NAND: Error nandStatus='%s'(%d)",
 80033e4:	4a9f      	ldr	r2, [pc, #636]	; (8003664 <defThread+0x474>)
 80033e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80033ea:	4b9d      	ldr	r3, [pc, #628]	; (8003660 <defThread+0x470>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	499e      	ldr	r1, [pc, #632]	; (8003668 <defThread+0x478>)
 80033f0:	489e      	ldr	r0, [pc, #632]	; (800366c <defThread+0x47c>)
 80033f2:	f00c f931 	bl	800f658 <siprintf>
	}
	if (dbg != logOff) Report(1, "%s%s", stx, eol);
 80033f6:	4b9e      	ldr	r3, [pc, #632]	; (8003670 <defThread+0x480>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d006      	beq.n	800340c <defThread+0x21c>
 80033fe:	4b9d      	ldr	r3, [pc, #628]	; (8003674 <defThread+0x484>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a9a      	ldr	r2, [pc, #616]	; (800366c <defThread+0x47c>)
 8003404:	499c      	ldr	r1, [pc, #624]	; (8003678 <defThread+0x488>)
 8003406:	2001      	movs	r0, #1
 8003408:	f7ff fae8 	bl	80029dc <Report>


	char screen[MAX_SCR_BUF];
	uint16_t err_color = BLACK;
 800340c:	2300      	movs	r3, #0
 800340e:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 8003412:	4b9a      	ldr	r3, [pc, #616]	; (800367c <defThread+0x48c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	785b      	ldrb	r3, [r3, #1]
 8003418:	b29b      	uxth	r3, r3
 800341a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800341e:	9200      	str	r2, [sp, #0]
 8003420:	22ef      	movs	r2, #239	; 0xef
 8003422:	2100      	movs	r1, #0
 8003424:	2000      	movs	r0, #0
 8003426:	f001 f91c 	bl	8004662 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 800342a:	4b94      	ldr	r3, [pc, #592]	; (800367c <defThread+0x48c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	785b      	ldrb	r3, [r3, #1]
 8003430:	b29b      	uxth	r3, r3
 8003432:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003436:	b299      	uxth	r1, r3
 8003438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	23ef      	movs	r3, #239	; 0xef
 8003440:	22ef      	movs	r2, #239	; 0xef
 8003442:	2000      	movs	r0, #0
 8003444:	f001 f90d 	bl	8004662 <ST7789_Fill>

	sprintf(screen, "NAND : %s", cid);
 8003448:	f207 420c 	addw	r2, r7, #1036	; 0x40c
 800344c:	f107 030c 	add.w	r3, r7, #12
 8003450:	498b      	ldr	r1, [pc, #556]	; (8003680 <defThread+0x490>)
 8003452:	4618      	mov	r0, r3
 8003454:	f00c f900 	bl	800f658 <siprintf>
	mkLineCenter(screen, ST7789_WIDTH / tFont->width);
 8003458:	4b8a      	ldr	r3, [pc, #552]	; (8003684 <defThread+0x494>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	23f0      	movs	r3, #240	; 0xf0
 8003462:	fb93 f3f2 	sdiv	r3, r3, r2
 8003466:	b29a      	uxth	r2, r3
 8003468:	f107 030c 	add.w	r3, r7, #12
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f001 fa04 	bl	800487c <mkLineCenter>
	sprintf(screen+strlen(screen),
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	4618      	mov	r0, r3
 800347a:	f7fc fea9 	bl	80001d0 <strlen>
 800347e:	4602      	mov	r2, r0
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	1898      	adds	r0, r3, r2
 8003486:	4b80      	ldr	r3, [pc, #512]	; (8003688 <defThread+0x498>)
 8003488:	681c      	ldr	r4, [r3, #0]
 800348a:	4b7f      	ldr	r3, [pc, #508]	; (8003688 <defThread+0x498>)
 800348c:	685d      	ldr	r5, [r3, #4]
 800348e:	4b7e      	ldr	r3, [pc, #504]	; (8003688 <defThread+0x498>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	4a7d      	ldr	r2, [pc, #500]	; (8003688 <defThread+0x498>)
 8003494:	6912      	ldr	r2, [r2, #16]
 8003496:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 800349a:	9103      	str	r1, [sp, #12]
 800349c:	9202      	str	r2, [sp, #8]
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	462b      	mov	r3, r5
 80034a8:	4622      	mov	r2, r4
 80034aa:	4978      	ldr	r1, [pc, #480]	; (800368c <defThread+0x49c>)
 80034ac:	f00c f8d4 	bl	800f658 <siprintf>
			chipConf.PlaneNbr,
			PlaneSizeMB);
#ifdef SET_AUDIO_DAC
	if (audioStat == HAL_OK) sprintf(screen+strlen(screen), "\nAudio: '%s'", audioName);
#endif
	if (cb_nandCounter) sprintf(screen+strlen(screen), "\nCallBack:%lu", cb_nandCounter);
 80034b0:	4b77      	ldr	r3, [pc, #476]	; (8003690 <defThread+0x4a0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00e      	beq.n	80034d6 <defThread+0x2e6>
 80034b8:	f107 030c 	add.w	r3, r7, #12
 80034bc:	4618      	mov	r0, r3
 80034be:	f7fc fe87 	bl	80001d0 <strlen>
 80034c2:	4602      	mov	r2, r0
 80034c4:	f107 030c 	add.w	r3, r7, #12
 80034c8:	4413      	add	r3, r2
 80034ca:	4a71      	ldr	r2, [pc, #452]	; (8003690 <defThread+0x4a0>)
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4971      	ldr	r1, [pc, #452]	; (8003694 <defThread+0x4a4>)
 80034d0:	4618      	mov	r0, r3
 80034d2:	f00c f8c1 	bl	800f658 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 80034d6:	4b6b      	ldr	r3, [pc, #428]	; (8003684 <defThread+0x494>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	785b      	ldrb	r3, [r3, #1]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd f94b 	bl	8000778 <__aeabi_i2d>
 80034e2:	4604      	mov	r4, r0
 80034e4:	460d      	mov	r5, r1
 80034e6:	4b67      	ldr	r3, [pc, #412]	; (8003684 <defThread+0x494>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	785b      	ldrb	r3, [r3, #1]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f943 	bl	8000778 <__aeabi_i2d>
 80034f2:	a359      	add	r3, pc, #356	; (adr r3, 8003658 <defThread+0x468>)
 80034f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f8:	f7fc fec2 	bl	8000280 <__aeabi_dmul>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4620      	mov	r0, r4
 8003502:	4629      	mov	r1, r5
 8003504:	f7fc ffec 	bl	80004e0 <__adddf3>
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	f7fd f99c 	bl	800084c <__aeabi_d2uiz>
 8003514:	4603      	mov	r3, r0
 8003516:	b298      	uxth	r0, r3
 8003518:	4b5a      	ldr	r3, [pc, #360]	; (8003684 <defThread+0x494>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a5e      	ldr	r2, [pc, #376]	; (8003698 <defThread+0x4a8>)
 800351e:	8812      	ldrh	r2, [r2, #0]
 8003520:	43d2      	mvns	r2, r2
 8003522:	b292      	uxth	r2, r2
 8003524:	495c      	ldr	r1, [pc, #368]	; (8003698 <defThread+0x4a8>)
 8003526:	8809      	ldrh	r1, [r1, #0]
 8003528:	f107 040c 	add.w	r4, r7, #12
 800352c:	9102      	str	r1, [sp, #8]
 800352e:	9201      	str	r2, [sp, #4]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	9200      	str	r2, [sp, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4622      	mov	r2, r4
 8003538:	4601      	mov	r1, r0
 800353a:	2000      	movs	r0, #0
 800353c:	f001 f948 	bl	80047d0 <ST7789_WriteString>
					   screen,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 8003540:	2001      	movs	r0, #1
 8003542:	f000 feff 	bl	8004344 <ipsOn>

#ifdef SET_SMALL_FS
	bool mnt = false;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
			if (ok) Report(1, "[%s] Check page:%lu OK...%s----------------------------------------%s", __func__, pg, eol, eol);
		}
	#endif
#endif

	uint16_t page_offset = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
	uint32_t page_addr = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	bool loop = true;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	bool led = false;
 800355e:	2300      	movs	r3, #0
 8003560:	f887 3466 	strb.w	r3, [r7, #1126]	; 0x466

	osStatus_t qs = osOK;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	uint8_t prio = 0;
 800356a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800356e:	f2a3 4375 	subw	r3, r3, #1141	; 0x475
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
	s_qcmd qcmd = {0};
 8003576:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800357a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800357e:	2200      	movs	r2, #0
 8003580:	801a      	strh	r2, [r3, #0]


	qcmd.cmd = cmdHelp;
 8003582:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003586:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800358a:	2200      	movs	r2, #0
 800358c:	701a      	strb	r2, [r3, #0]
	if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, prio, 5)) != osOK) devError |= devQUE;
 800358e:	4b43      	ldr	r3, [pc, #268]	; (800369c <defThread+0x4ac>)
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003596:	f2a3 4375 	subw	r3, r3, #1141	; 0x475
 800359a:	781a      	ldrb	r2, [r3, #0]
 800359c:	f107 0108 	add.w	r1, r7, #8
 80035a0:	2305      	movs	r3, #5
 80035a2:	f008 fb0b 	bl	800bbbc <osMessageQueuePut>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4a3d      	ldr	r2, [pc, #244]	; (80036a0 <defThread+0x4b0>)
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <defThread+0x4b0>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <defThread+0x3d2>
 80035b4:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <defThread+0x4b4>)
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035bc:	b29a      	uxth	r2, r3
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <defThread+0x4b4>)
 80035c0:	801a      	strh	r2, [r3, #0]


	uint32_t tmr = get_tmr(1);
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7ff f8f2 	bl	80027ac <get_tmr>
 80035c8:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c


  /* Infinite loop */

	while (loop) {
 80035cc:	f000 bd3c 	b.w	8004048 <defThread+0xe58>

		if (check_tmr(tmr)) {
 80035d0:	f8d7 045c 	ldr.w	r0, [r7, #1116]	; 0x45c
 80035d4:	f7ff f8f7 	bl	80027c6 <check_tmr>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80bd 	beq.w	800375a <defThread+0x56a>
			tmr = get_tmr(1);
 80035e0:	2001      	movs	r0, #1
 80035e2:	f7ff f8e3 	bl	80027ac <get_tmr>
 80035e6:	f8c7 045c 	str.w	r0, [r7, #1116]	; 0x45c
			//
			sec2str(screen);
 80035ea:	f107 030c 	add.w	r3, r7, #12
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff f95a 	bl	80028a8 <sec2str>
#ifdef SET_SWV
			strcpy(stz, screen);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 80035f4:	4b21      	ldr	r3, [pc, #132]	; (800367c <defThread+0x48c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	23f0      	movs	r3, #240	; 0xf0
 80035fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8003602:	b29a      	uxth	r2, r3
 8003604:	f107 030c 	add.w	r3, r7, #12
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f936 	bl	800487c <mkLineCenter>
 8003610:	4601      	mov	r1, r0
 8003612:	4b1a      	ldr	r3, [pc, #104]	; (800367c <defThread+0x48c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800361a:	9202      	str	r2, [sp, #8]
 800361c:	221f      	movs	r2, #31
 800361e:	9201      	str	r2, [sp, #4]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	9200      	str	r2, [sp, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	460a      	mov	r2, r1
 8003628:	2100      	movs	r1, #0
 800362a:	2008      	movs	r0, #8
 800362c:	f001 f8d0 	bl	80047d0 <ST7789_WriteString>

			sprintf(screen, "Error: 0x%04X", devError);
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <defThread+0x4b4>)
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	461a      	mov	r2, r3
 8003636:	f107 030c 	add.w	r3, r7, #12
 800363a:	491b      	ldr	r1, [pc, #108]	; (80036a8 <defThread+0x4b8>)
 800363c:	4618      	mov	r0, r3
 800363e:	f00c f80b 	bl	800f658 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <defThread+0x4b4>)
 8003644:	881b      	ldrh	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d030      	beq.n	80036ac <defThread+0x4bc>
 800364a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800364e:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
 8003652:	e02e      	b.n	80036b2 <defThread+0x4c2>
 8003654:	f3af 8000 	nop.w
 8003658:	33333333 	.word	0x33333333
 800365c:	3feb3333 	.word	0x3feb3333
 8003660:	200000a1 	.word	0x200000a1
 8003664:	200000a8 	.word	0x200000a8
 8003668:	080105d4 	.word	0x080105d4
 800366c:	20002604 	.word	0x20002604
 8003670:	20000082 	.word	0x20000082
 8003674:	20000004 	.word	0x20000004
 8003678:	080105f4 	.word	0x080105f4
 800367c:	20000098 	.word	0x20000098
 8003680:	080105fc 	.word	0x080105fc
 8003684:	2000009c 	.word	0x2000009c
 8003688:	200015e8 	.word	0x200015e8
 800368c:	08010608 	.word	0x08010608
 8003690:	200015dc 	.word	0x200015dc
 8003694:	08010664 	.word	0x08010664
 8003698:	200015be 	.word	0x200015be
 800369c:	2000059c 	.word	0x2000059c
 80036a0:	20002600 	.word	0x20002600
 80036a4:	200005a4 	.word	0x200005a4
 80036a8:	08010674 	.word	0x08010674
 80036ac:	2300      	movs	r3, #0
 80036ae:	f8a7 346e 	strh.w	r3, [r7, #1134]	; 0x46e
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(screen, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80036b2:	4bb2      	ldr	r3, [pc, #712]	; (800397c <defThread+0x78c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	785b      	ldrb	r3, [r3, #1]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80036be:	b29c      	uxth	r4, r3
 80036c0:	4bae      	ldr	r3, [pc, #696]	; (800397c <defThread+0x78c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	23f0      	movs	r3, #240	; 0xf0
 80036ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	f107 030c 	add.w	r3, r7, #12
 80036d4:	4611      	mov	r1, r2
 80036d6:	4618      	mov	r0, r3
 80036d8:	f001 f8d0 	bl	800487c <mkLineCenter>
 80036dc:	4601      	mov	r1, r0
 80036de:	4ba7      	ldr	r3, [pc, #668]	; (800397c <defThread+0x78c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036e6:	9202      	str	r2, [sp, #8]
 80036e8:	f8b7 246e 	ldrh.w	r2, [r7, #1134]	; 0x46e
 80036ec:	9201      	str	r2, [sp, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	9200      	str	r2, [sp, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	460a      	mov	r2, r1
 80036f6:	4621      	mov	r1, r4
 80036f8:	2000      	movs	r0, #0
 80036fa:	f001 f869 	bl	80047d0 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 80036fe:	4ba0      	ldr	r3, [pc, #640]	; (8003980 <defThread+0x790>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <defThread+0x54a>
				if (qs != qStat) {
 8003706:	4b9e      	ldr	r3, [pc, #632]	; (8003980 <defThread+0x790>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 800370e:	429a      	cmp	r2, r3
 8003710:	d013      	beq.n	800373a <defThread+0x54a>
					if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 8003712:	4b9c      	ldr	r3, [pc, #624]	; (8003984 <defThread+0x794>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <defThread+0x542>
 800371a:	4b99      	ldr	r3, [pc, #612]	; (8003980 <defThread+0x790>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4618      	mov	r0, r3
 8003720:	f7fe feac 	bl	800247c <get_qStat>
 8003724:	4602      	mov	r2, r0
 8003726:	4b98      	ldr	r3, [pc, #608]	; (8003988 <defThread+0x798>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4998      	ldr	r1, [pc, #608]	; (800398c <defThread+0x79c>)
 800372c:	2001      	movs	r0, #1
 800372e:	f7ff f955 	bl	80029dc <Report>
					qs = qStat;
 8003732:	4b93      	ldr	r3, [pc, #588]	; (8003980 <defThread+0x790>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
				}
			}

			if (devError) led = true; else led = false;
 800373a:	4b95      	ldr	r3, [pc, #596]	; (8003990 <defThread+0x7a0>)
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <defThread+0x55a>
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3466 	strb.w	r3, [r7, #1126]	; 0x466
 8003748:	e002      	b.n	8003750 <defThread+0x560>
 800374a:	2300      	movs	r3, #0
 800374c:	f887 3466 	strb.w	r3, [r7, #1126]	; 0x466
			errLedOn(led);
 8003750:	f897 3466 	ldrb.w	r3, [r7, #1126]	; 0x466
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe ffd3 	bl	8002700 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 5)) != osOK) {
 800375a:	4b8e      	ldr	r3, [pc, #568]	; (8003994 <defThread+0x7a4>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	f107 020b 	add.w	r2, r7, #11
 8003762:	f107 0108 	add.w	r1, r7, #8
 8003766:	2305      	movs	r3, #5
 8003768:	f008 fa88 	bl	800bc7c <osMessageQueueGet>
 800376c:	4603      	mov	r3, r0
 800376e:	4a84      	ldr	r2, [pc, #528]	; (8003980 <defThread+0x790>)
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b83      	ldr	r3, [pc, #524]	; (8003980 <defThread+0x790>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d028      	beq.n	80037cc <defThread+0x5dc>
			if (qs != qStat) qs = qStat;
 800377a:	4b81      	ldr	r3, [pc, #516]	; (8003980 <defThread+0x790>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003782:	429a      	cmp	r2, r3
 8003784:	d003      	beq.n	800378e <defThread+0x59e>
 8003786:	4b7e      	ldr	r3, [pc, #504]	; (8003980 <defThread+0x790>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
			if (qStat != osErrorTimeout) {
 800378e:	4b7c      	ldr	r3, [pc, #496]	; (8003980 <defThread+0x790>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f113 0f02 	cmn.w	r3, #2
 8003796:	f000 83cd 	beq.w	8003f34 <defThread+0xd44>
				devError |= devQUE;
 800379a:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <defThread+0x7a0>)
 800379c:	881b      	ldrh	r3, [r3, #0]
 800379e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	4b7a      	ldr	r3, [pc, #488]	; (8003990 <defThread+0x7a0>)
 80037a6:	801a      	strh	r2, [r3, #0]
				if (dbg != logOff) Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80037a8:	4b76      	ldr	r3, [pc, #472]	; (8003984 <defThread+0x794>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 83c1 	beq.w	8003f34 <defThread+0xd44>
 80037b2:	4b73      	ldr	r3, [pc, #460]	; (8003980 <defThread+0x790>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fe60 	bl	800247c <get_qStat>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b72      	ldr	r3, [pc, #456]	; (8003988 <defThread+0x798>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4972      	ldr	r1, [pc, #456]	; (800398c <defThread+0x79c>)
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7ff f909 	bl	80029dc <Report>
 80037ca:	e3b3      	b.n	8003f34 <defThread+0xd44>
			}
		} else {
			uint16_t ccolor = CYAN;
 80037cc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80037d0:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
			if (qcmd.cmd == cmdErr) ccolor = MAGENTA;
 80037d4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80037d8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b0e      	cmp	r3, #14
 80037e0:	d103      	bne.n	80037ea <defThread+0x5fa>
 80037e2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80037e6:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
			sprintf(screen, "Cmd: %s", str_cmds[qcmd.cmd]);
 80037ea:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80037ee:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	461a      	mov	r2, r3
 80037f6:	4b68      	ldr	r3, [pc, #416]	; (8003998 <defThread+0x7a8>)
 80037f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037fc:	f107 030c 	add.w	r3, r7, #12
 8003800:	4966      	ldr	r1, [pc, #408]	; (800399c <defThread+0x7ac>)
 8003802:	4618      	mov	r0, r3
 8003804:	f00b ff28 	bl	800f658 <siprintf>
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <defThread+0x78c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	785b      	ldrb	r3, [r3, #1]
 800380e:	b29b      	uxth	r3, r3
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	b29b      	uxth	r3, r3
 8003814:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003818:	b29c      	uxth	r4, r3
							   mkLineCenter(screen, ST7789_WIDTH / fntKey->width),
 800381a:	4b58      	ldr	r3, [pc, #352]	; (800397c <defThread+0x78c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	461a      	mov	r2, r3
 8003822:	23f0      	movs	r3, #240	; 0xf0
 8003824:	fb93 f3f2 	sdiv	r3, r3, r2
 8003828:	b29a      	uxth	r2, r3
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f001 f823 	bl	800487c <mkLineCenter>
 8003836:	4601      	mov	r1, r0
			ST7789_WriteString(0, ST7789_WIDTH - (fntKey->height << 1),
 8003838:	4b50      	ldr	r3, [pc, #320]	; (800397c <defThread+0x78c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2200      	movs	r2, #0
 800383e:	9202      	str	r2, [sp, #8]
 8003840:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 8003844:	9201      	str	r2, [sp, #4]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	9200      	str	r2, [sp, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	460a      	mov	r2, r1
 800384e:	4621      	mov	r1, r4
 8003850:	2000      	movs	r0, #0
 8003852:	f000 ffbd 	bl	80047d0 <ST7789_WriteString>
							   *fntKey,
							   ccolor,
							   BLACK);
			//
			if (dbg > logOn)
 8003856:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <defThread+0x794>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d91e      	bls.n	800389c <defThread+0x6ac>
				Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 800385e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003862:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	4619      	mov	r1, r3
 800386a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800386e:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003872:	785b      	ldrb	r3, [r3, #1]
 8003874:	4618      	mov	r0, r3
 8003876:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800387a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b45      	ldr	r3, [pc, #276]	; (8003998 <defThread+0x7a8>)
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	4a3f      	ldr	r2, [pc, #252]	; (8003988 <defThread+0x798>)
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	9201      	str	r2, [sp, #4]
 800388e:	9300      	str	r3, [sp, #0]
 8003890:	4603      	mov	r3, r0
 8003892:	460a      	mov	r2, r1
 8003894:	4942      	ldr	r1, [pc, #264]	; (80039a0 <defThread+0x7b0>)
 8003896:	2001      	movs	r0, #1
 8003898:	f7ff f8a0 	bl	80029dc <Report>
			//
			nand_show = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
			switch (qcmd.cmd) {
 80038a2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80038a6:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b0e      	cmp	r3, #14
 80038ae:	f200 832f 	bhi.w	8003f10 <defThread+0xd20>
 80038b2:	a201      	add	r2, pc, #4	; (adr r2, 80038b8 <defThread+0x6c8>)
 80038b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b8:	08003905 	.word	0x08003905
 80038bc:	08003973 	.word	0x08003973
 80038c0:	08003a87 	.word	0x08003a87
 80038c4:	08003b31 	.word	0x08003b31
 80038c8:	08003b31 	.word	0x08003b31
 80038cc:	08003e1b 	.word	0x08003e1b
 80038d0:	08003be5 	.word	0x08003be5
 80038d4:	08003b31 	.word	0x08003b31
 80038d8:	08003f11 	.word	0x08003f11
 80038dc:	08003ce1 	.word	0x08003ce1
 80038e0:	08003d4b 	.word	0x08003d4b
 80038e4:	08003ac1 	.word	0x08003ac1
 80038e8:	080039c1 	.word	0x080039c1
 80038ec:	08003959 	.word	0x08003959
 80038f0:	080038f5 	.word	0x080038f5
				case cmdErr:
					Report(1, "!!! Error command !!!%s", eol);
 80038f4:	4b24      	ldr	r3, [pc, #144]	; (8003988 <defThread+0x798>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	492a      	ldr	r1, [pc, #168]	; (80039a4 <defThread+0x7b4>)
 80038fc:	2001      	movs	r0, #1
 80038fe:	f7ff f86d 	bl	80029dc <Report>
				break;
 8003902:	e305      	b.n	8003f10 <defThread+0xd20>
				case cmdHelp:
					sprintf(stx, "Support next commands:%s", eol);
 8003904:	4b20      	ldr	r3, [pc, #128]	; (8003988 <defThread+0x798>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	4927      	ldr	r1, [pc, #156]	; (80039a8 <defThread+0x7b8>)
 800390c:	4827      	ldr	r0, [pc, #156]	; (80039ac <defThread+0x7bc>)
 800390e:	f00b fea3 	bl	800f658 <siprintf>
					for (uint8_t i = 0; i < MAX_CMDS; i++) sprintf(stx+strlen(stx), "\t'%s'%s", s_cmds[i], eol);
 8003912:	2300      	movs	r3, #0
 8003914:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
 8003918:	e014      	b.n	8003944 <defThread+0x754>
 800391a:	4824      	ldr	r0, [pc, #144]	; (80039ac <defThread+0x7bc>)
 800391c:	f7fc fc58 	bl	80001d0 <strlen>
 8003920:	4603      	mov	r3, r0
 8003922:	4a22      	ldr	r2, [pc, #136]	; (80039ac <defThread+0x7bc>)
 8003924:	1898      	adds	r0, r3, r2
 8003926:	f897 3459 	ldrb.w	r3, [r7, #1113]	; 0x459
 800392a:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <defThread+0x7c0>)
 800392c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <defThread+0x798>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	491f      	ldr	r1, [pc, #124]	; (80039b4 <defThread+0x7c4>)
 8003936:	f00b fe8f 	bl	800f658 <siprintf>
 800393a:	f897 3459 	ldrb.w	r3, [r7, #1113]	; 0x459
 800393e:	3301      	adds	r3, #1
 8003940:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
 8003944:	f897 3459 	ldrb.w	r3, [r7, #1113]	; 0x459
 8003948:	2b0e      	cmp	r3, #14
 800394a:	d9e6      	bls.n	800391a <defThread+0x72a>
					Report(1, "%s", stx);
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <defThread+0x7bc>)
 800394e:	491a      	ldr	r1, [pc, #104]	; (80039b8 <defThread+0x7c8>)
 8003950:	2001      	movs	r0, #1
 8003952:	f7ff f843 	bl	80029dc <Report>
				break;
 8003956:	e2db      	b.n	8003f10 <defThread+0xd20>
				case cmdMem:
					Report(1, "FreeRTOS memory: free=%lu heap=%lu bytes%s", xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8003958:	f00a fefc 	bl	800e754 <xPortGetFreeHeapSize>
 800395c:	4602      	mov	r2, r0
 800395e:	4b0a      	ldr	r3, [pc, #40]	; (8003988 <defThread+0x798>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003968:	4914      	ldr	r1, [pc, #80]	; (80039bc <defThread+0x7cc>)
 800396a:	2001      	movs	r0, #1
 800396c:	f7ff f836 	bl	80029dc <Report>
				break;
 8003970:	e2ce      	b.n	8003f10 <defThread+0xd20>
				case cmdRestart:
					loop = false;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
		  		break;
 8003978:	e2ca      	b.n	8003f10 <defThread+0xd20>
 800397a:	bf00      	nop
 800397c:	20000098 	.word	0x20000098
 8003980:	20002600 	.word	0x20002600
 8003984:	20000082 	.word	0x20000082
 8003988:	20000004 	.word	0x20000004
 800398c:	08010684 	.word	0x08010684
 8003990:	200005a4 	.word	0x200005a4
 8003994:	2000059c 	.word	0x2000059c
 8003998:	20000044 	.word	0x20000044
 800399c:	08010690 	.word	0x08010690
 80039a0:	08010698 	.word	0x08010698
 80039a4:	080106b0 	.word	0x080106b0
 80039a8:	080106c8 	.word	0x080106c8
 80039ac:	20002604 	.word	0x20002604
 80039b0:	20000008 	.word	0x20000008
 80039b4:	080106e4 	.word	0x080106e4
 80039b8:	080104a8 	.word	0x080104a8
 80039bc:	080106ec 	.word	0x080106ec
				case cmdInfo:
					if (dbg != logOff) {
 80039c0:	4baf      	ldr	r3, [pc, #700]	; (8003c80 <defThread+0xa90>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 8298 	beq.w	8003efa <defThread+0xd0a>
						strcpy(stx, "NAND:");
 80039ca:	4bae      	ldr	r3, [pc, #696]	; (8003c84 <defThread+0xa94>)
 80039cc:	4aae      	ldr	r2, [pc, #696]	; (8003c88 <defThread+0xa98>)
 80039ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80039d2:	6018      	str	r0, [r3, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	8019      	strh	r1, [r3, #0]
						//uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
						for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80039d8:	2300      	movs	r3, #0
 80039da:	f887 3458 	strb.w	r3, [r7, #1112]	; 0x458
 80039de:	e016      	b.n	8003a0e <defThread+0x81e>
 80039e0:	48a8      	ldr	r0, [pc, #672]	; (8003c84 <defThread+0xa94>)
 80039e2:	f7fc fbf5 	bl	80001d0 <strlen>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4aa6      	ldr	r2, [pc, #664]	; (8003c84 <defThread+0xa94>)
 80039ea:	1898      	adds	r0, r3, r2
 80039ec:	f997 3458 	ldrsb.w	r3, [r7, #1112]	; 0x458
 80039f0:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 80039f4:	4413      	add	r3, r2
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	49a4      	ldr	r1, [pc, #656]	; (8003c8c <defThread+0xa9c>)
 80039fc:	f00b fe2c 	bl	800f658 <siprintf>
 8003a00:	f997 3458 	ldrsb.w	r3, [r7, #1112]	; 0x458
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	3301      	adds	r3, #1
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	f887 3458 	strb.w	r3, [r7, #1112]	; 0x458
 8003a0e:	f897 3458 	ldrb.w	r3, [r7, #1112]	; 0x458
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d9e4      	bls.n	80039e0 <defThread+0x7f0>
						sprintf(stx+strlen(stx), "\n\tDevice_Id=%02X '%s'\n", nandID.Device_Id, cid);
 8003a16:	489b      	ldr	r0, [pc, #620]	; (8003c84 <defThread+0xa94>)
 8003a18:	f7fc fbda 	bl	80001d0 <strlen>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	4a99      	ldr	r2, [pc, #612]	; (8003c84 <defThread+0xa94>)
 8003a20:	1898      	adds	r0, r3, r2
 8003a22:	4b9b      	ldr	r3, [pc, #620]	; (8003c90 <defThread+0xaa0>)
 8003a24:	785b      	ldrb	r3, [r3, #1]
 8003a26:	461a      	mov	r2, r3
 8003a28:	f207 430c 	addw	r3, r7, #1036	; 0x40c
 8003a2c:	4999      	ldr	r1, [pc, #612]	; (8003c94 <defThread+0xaa4>)
 8003a2e:	f00b fe13 	bl	800f658 <siprintf>
						sprintf(stx+strlen(stx), "\tPageSize:%lu\n\tSpareAreaSize:%lu\n\tBlockSize:%lu KB\n\tBlockNbr:%lu\n\tPlaneNbr:%lu\n\tPlaneSize:%lu MB"
 8003a32:	4894      	ldr	r0, [pc, #592]	; (8003c84 <defThread+0xa94>)
 8003a34:	f7fc fbcc 	bl	80001d0 <strlen>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4a92      	ldr	r2, [pc, #584]	; (8003c84 <defThread+0xa94>)
 8003a3c:	189c      	adds	r4, r3, r2
 8003a3e:	4b96      	ldr	r3, [pc, #600]	; (8003c98 <defThread+0xaa8>)
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	4b95      	ldr	r3, [pc, #596]	; (8003c98 <defThread+0xaa8>)
 8003a44:	685e      	ldr	r6, [r3, #4]
 8003a46:	4b94      	ldr	r3, [pc, #592]	; (8003c98 <defThread+0xaa8>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a93      	ldr	r2, [pc, #588]	; (8003c98 <defThread+0xaa8>)
 8003a4c:	6912      	ldr	r2, [r2, #16]
 8003a4e:	4993      	ldr	r1, [pc, #588]	; (8003c9c <defThread+0xaac>)
 8003a50:	6809      	ldr	r1, [r1, #0]
 8003a52:	4893      	ldr	r0, [pc, #588]	; (8003ca0 <defThread+0xab0>)
 8003a54:	6800      	ldr	r0, [r0, #0]
 8003a56:	9005      	str	r0, [sp, #20]
 8003a58:	9104      	str	r1, [sp, #16]
 8003a5a:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8003a5e:	9103      	str	r1, [sp, #12]
 8003a60:	9202      	str	r2, [sp, #8]
 8003a62:	9301      	str	r3, [sp, #4]
 8003a64:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8003a68:	9300      	str	r3, [sp, #0]
 8003a6a:	4633      	mov	r3, r6
 8003a6c:	462a      	mov	r2, r5
 8003a6e:	498d      	ldr	r1, [pc, #564]	; (8003ca4 <defThread+0xab4>)
 8003a70:	4620      	mov	r0, r4
 8003a72:	f00b fdf1 	bl	800f658 <siprintf>
											PlaneSizeMB,
											total_pages, total_bytes);
#ifdef SET_AUDIO_DAC
						if (audioStat == HAL_OK) sprintf(stx+strlen(stx), "\n\tAudio: '%s' (id:%u rev:%u)", audioName, audioID, audioRev);
#endif
						Report(1, "%s%s", stx, eol);
 8003a76:	4b8c      	ldr	r3, [pc, #560]	; (8003ca8 <defThread+0xab8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a82      	ldr	r2, [pc, #520]	; (8003c84 <defThread+0xa94>)
 8003a7c:	498b      	ldr	r1, [pc, #556]	; (8003cac <defThread+0xabc>)
 8003a7e:	2001      	movs	r0, #1
 8003a80:	f7fe ffac 	bl	80029dc <Report>
					}
				break;
 8003a84:	e239      	b.n	8003efa <defThread+0xd0a>
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8003a86:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003a8a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003a8e:	785b      	ldrb	r3, [r3, #1]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <defThread+0x8b0>
						set_Date(epoch);
 8003a94:	4b86      	ldr	r3, [pc, #536]	; (8003cb0 <defThread+0xac0>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fe fea5 	bl	80027e8 <set_Date>
					} else {//show date&time
						sec2str(stx);
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8003a9e:	e22e      	b.n	8003efe <defThread+0xd0e>
						sec2str(stx);
 8003aa0:	4878      	ldr	r0, [pc, #480]	; (8003c84 <defThread+0xa94>)
 8003aa2:	f7fe ff01 	bl	80028a8 <sec2str>
						if (dbg != logOff) Report(0, "%s <- Current date&time%s", stx, eol);
 8003aa6:	4b76      	ldr	r3, [pc, #472]	; (8003c80 <defThread+0xa90>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 8227 	beq.w	8003efe <defThread+0xd0e>
 8003ab0:	4b7d      	ldr	r3, [pc, #500]	; (8003ca8 <defThread+0xab8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a73      	ldr	r2, [pc, #460]	; (8003c84 <defThread+0xa94>)
 8003ab6:	497f      	ldr	r1, [pc, #508]	; (8003cb4 <defThread+0xac4>)
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fe ff8f 	bl	80029dc <Report>
				break;
 8003abe:	e21e      	b.n	8003efe <defThread+0xd0e>
				case cmdLog:
					if (qcmd.attr < logNone) {
 8003ac0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003ac4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d81e      	bhi.n	8003b0c <defThread+0x91c>
						Report(1, "Set log level to '%s'(%u)%s", get_logName(qcmd.attr), qcmd.attr, eol);
 8003ace:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003ad2:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe fd1f 	bl	800251c <get_logName>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003ae4:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003ae8:	785b      	ldrb	r3, [r3, #1]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4b6e      	ldr	r3, [pc, #440]	; (8003ca8 <defThread+0xab8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	460b      	mov	r3, r1
 8003af4:	4970      	ldr	r1, [pc, #448]	; (8003cb8 <defThread+0xac8>)
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7fe ff70 	bl	80029dc <Report>
						dbg = qcmd.attr;
 8003afc:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003b00:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003b04:	785a      	ldrb	r2, [r3, #1]
 8003b06:	4b5e      	ldr	r3, [pc, #376]	; (8003c80 <defThread+0xa90>)
 8003b08:	701a      	strb	r2, [r3, #0]
					} else {
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
					}
				break;
 8003b0a:	e201      	b.n	8003f10 <defThread+0xd20>
						Report(1, "Current log level is '%s'(%u)%s", get_logName(dbg), dbg, eol);
 8003b0c:	4b5c      	ldr	r3, [pc, #368]	; (8003c80 <defThread+0xa90>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe fd03 	bl	800251c <get_logName>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <defThread+0xa90>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4b62      	ldr	r3, [pc, #392]	; (8003ca8 <defThread+0xab8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	460b      	mov	r3, r1
 8003b26:	4965      	ldr	r1, [pc, #404]	; (8003cbc <defThread+0xacc>)
 8003b28:	2001      	movs	r0, #1
 8003b2a:	f7fe ff57 	bl	80029dc <Report>
				break;
 8003b2e:	e1ef      	b.n	8003f10 <defThread+0xd20>
				case cmdRead:
				case cmdNext:
				case cmdReadECC:
				{
					if ((qcmd.cmd == cmdRead) || (qcmd.cmd == cmdReadECC)) {
 8003b30:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003b34:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d006      	beq.n	8003b4c <defThread+0x95c>
 8003b3e:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003b42:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b07      	cmp	r3, #7
 8003b4a:	d10a      	bne.n	8003b62 <defThread+0x972>
						readed = true;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
						page_offset = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
						page_addr = nandAdr;
 8003b58:	4b59      	ldr	r3, [pc, #356]	; (8003cc0 <defThread+0xad0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003b60:	e018      	b.n	8003b94 <defThread+0x9a4>
					} else {
						page_offset += nandLen;
 8003b62:	4b58      	ldr	r3, [pc, #352]	; (8003cc4 <defThread+0xad4>)
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
						if (!(page_offset % chipConf.PageSize)) {
 8003b70:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 8003b74:	4a48      	ldr	r2, [pc, #288]	; (8003c98 <defThread+0xaa8>)
 8003b76:	6812      	ldr	r2, [r2, #0]
 8003b78:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b7c:	fb01 f202 	mul.w	r2, r1, r2
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <defThread+0x9a4>
							page_offset = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f8a7 346c 	strh.w	r3, [r7, #1132]	; 0x46c
							nandAdr = page_addr;
 8003b8c:	4a4c      	ldr	r2, [pc, #304]	; (8003cc0 <defThread+0xad0>)
 8003b8e:	f8d7 3468 	ldr.w	r3, [r7, #1128]	; 0x468
 8003b92:	6013      	str	r3, [r2, #0]
						}
					}
					if (qcmd.cmd == cmdReadECC) {
 8003b94:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003b98:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b07      	cmp	r3, #7
 8003ba0:	d10e      	bne.n	8003bc0 <defThread+0x9d0>
						readed = false;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3472 	strb.w	r3, [r7, #1138]	; 0x472
						io_nand_read_spare(page_addr / chipConf.PageSize, rdBuf, 1);
 8003ba8:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <defThread+0xaa8>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4944      	ldr	r1, [pc, #272]	; (8003cc8 <defThread+0xad8>)
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe f819 	bl	8001bf0 <io_nand_read_spare>
 8003bbe:	e00d      	b.n	8003bdc <defThread+0x9ec>
					} else {
						io_nand_read(page_addr / chipConf.PageSize, rdBuf, nandLen, page_offset);
 8003bc0:	4b35      	ldr	r3, [pc, #212]	; (8003c98 <defThread+0xaa8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f8d7 2468 	ldr.w	r2, [r7, #1128]	; 0x468
 8003bc8:	fbb2 f0f3 	udiv	r0, r2, r3
 8003bcc:	4b3d      	ldr	r3, [pc, #244]	; (8003cc4 <defThread+0xad4>)
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	f8b7 346c 	ldrh.w	r3, [r7, #1132]	; 0x46c
 8003bd6:	493c      	ldr	r1, [pc, #240]	; (8003cc8 <defThread+0xad8>)
 8003bd8:	f7fd ffec 	bl	8001bb4 <io_nand_read>
					}
					nand_show = 1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3473 	strb.w	r3, [r7, #1139]	; 0x473
				}
				break;
 8003be2:	e195      	b.n	8003f10 <defThread+0xd20>
				case cmdErase:
					if (!qcmd.attr) {
 8003be4:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8003be8:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8003bec:	785b      	ldrb	r3, [r3, #1]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d132      	bne.n	8003c58 <defThread+0xa68>
						uint32_t bk = nandBlk;// * chipConf.PageSize;
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <defThread+0xadc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
						io_nand_block_erase(bk);
 8003bfa:	f8d7 0434 	ldr.w	r0, [r7, #1076]	; 0x434
 8003bfe:	f7fe f831 	bl	8001c64 <io_nand_block_erase>
						if (dbg != logOff) {
 8003c02:	4b1f      	ldr	r3, [pc, #124]	; (8003c80 <defThread+0xa90>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 817b 	beq.w	8003f02 <defThread+0xd12>
							if (devError & devNAND) {
 8003c0c:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <defThread+0xae0>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	f003 0320 	and.w	r3, r3, #32
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00f      	beq.n	8003c38 <defThread+0xa48>
								Report(1, "Erase nand block:%lu addr:%u Error !%s", nandBlk / chipConf.BlockSize, bk, eol);
 8003c18:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <defThread+0xadc>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	4b1e      	ldr	r3, [pc, #120]	; (8003c98 <defThread+0xaa8>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c24:	4b20      	ldr	r3, [pc, #128]	; (8003ca8 <defThread+0xab8>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003c2e:	4929      	ldr	r1, [pc, #164]	; (8003cd4 <defThread+0xae4>)
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7fe fed3 	bl	80029dc <Report>
						iBlk = 0;
						next_block_erase = 1;
						if (dbg != logOff) Report(1, "Erase chip ");
						stik = HAL_GetTick();
					}
				break;
 8003c36:	e164      	b.n	8003f02 <defThread+0xd12>
								Report(1, "Erase nand block:%lu addr:%u Ok !%s", nandBlk / chipConf.BlockSize, bk, eol);
 8003c38:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <defThread+0xadc>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <defThread+0xaa8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <defThread+0xab8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8003c4e:	4922      	ldr	r1, [pc, #136]	; (8003cd8 <defThread+0xae8>)
 8003c50:	2001      	movs	r0, #1
 8003c52:	f7fe fec3 	bl	80029dc <Report>
				break;
 8003c56:	e154      	b.n	8003f02 <defThread+0xd12>
						iBlk = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
						next_block_erase = 1;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
						if (dbg != logOff) Report(1, "Erase chip ");
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <defThread+0xa90>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <defThread+0xa84>
 8003c6c:	491b      	ldr	r1, [pc, #108]	; (8003cdc <defThread+0xaec>)
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7fe feb4 	bl	80029dc <Report>
						stik = HAL_GetTick();
 8003c74:	f001 fb6c 	bl	8005350 <HAL_GetTick>
 8003c78:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
				break;
 8003c7c:	e141      	b.n	8003f02 <defThread+0xd12>
 8003c7e:	bf00      	nop
 8003c80:	20000082 	.word	0x20000082
 8003c84:	20002604 	.word	0x20002604
 8003c88:	08010530 	.word	0x08010530
 8003c8c:	080104a0 	.word	0x080104a0
 8003c90:	200015e0 	.word	0x200015e0
 8003c94:	08010538 	.word	0x08010538
 8003c98:	200015e8 	.word	0x200015e8
 8003c9c:	200015c0 	.word	0x200015c0
 8003ca0:	200015c4 	.word	0x200015c4
 8003ca4:	08010550 	.word	0x08010550
 8003ca8:	20000004 	.word	0x20000004
 8003cac:	080105f4 	.word	0x080105f4
 8003cb0:	20000084 	.word	0x20000084
 8003cb4:	08010718 	.word	0x08010718
 8003cb8:	08010734 	.word	0x08010734
 8003cbc:	08010750 	.word	0x08010750
 8003cc0:	200015cc 	.word	0x200015cc
 8003cc4:	200015d0 	.word	0x200015d0
 8003cc8:	20001600 	.word	0x20001600
 8003ccc:	200015d4 	.word	0x200015d4
 8003cd0:	200005a4 	.word	0x200005a4
 8003cd4:	08010770 	.word	0x08010770
 8003cd8:	08010798 	.word	0x08010798
 8003cdc:	080107bc 	.word	0x080107bc
				case cmdCheckPage://check page
				{
					uint32_t adr = nandPage * chipConf.PageSize;//nand_PageToBlock(nandPage);
 8003ce0:	4ba3      	ldr	r3, [pc, #652]	; (8003f70 <defThread+0xd80>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4aa3      	ldr	r2, [pc, #652]	; (8003f74 <defThread+0xd84>)
 8003ce6:	6812      	ldr	r2, [r2, #0]
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
					if (!pageIsEmpty(nandPage)) {
 8003cf0:	4ba0      	ldr	r3, [pc, #640]	; (8003f74 <defThread+0xd84>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe fb79 	bl	80023ec <pageIsEmpty>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f083 0301 	eor.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d010      	beq.n	8003d28 <defThread+0xb38>
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X Not empty%s", nandPage, adr, eol);
 8003d06:	4b9c      	ldr	r3, [pc, #624]	; (8003f78 <defThread+0xd88>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 80fb 	beq.w	8003f06 <defThread+0xd16>
 8003d10:	4b98      	ldr	r3, [pc, #608]	; (8003f74 <defThread+0xd84>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b99      	ldr	r3, [pc, #612]	; (8003f7c <defThread+0xd8c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003d1e:	4998      	ldr	r1, [pc, #608]	; (8003f80 <defThread+0xd90>)
 8003d20:	2001      	movs	r0, #1
 8003d22:	f7fe fe5b 	bl	80029dc <Report>
					} else {
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X is Empty%s", nandPage, adr , eol);
					}
				}
				break;
 8003d26:	e0ee      	b.n	8003f06 <defThread+0xd16>
						if (dbg != logOff) Report(1, "Page:%lu in addr:0x%X is Empty%s", nandPage, adr , eol);
 8003d28:	4b93      	ldr	r3, [pc, #588]	; (8003f78 <defThread+0xd88>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80ea 	beq.w	8003f06 <defThread+0xd16>
 8003d32:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <defThread+0xd84>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4b91      	ldr	r3, [pc, #580]	; (8003f7c <defThread+0xd8c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8003d40:	4990      	ldr	r1, [pc, #576]	; (8003f84 <defThread+0xd94>)
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fe fe4a 	bl	80029dc <Report>
				break;
 8003d48:	e0dd      	b.n	8003f06 <defThread+0xd16>
				case cmdCheckBlk://check block
				{
					uint32_t pg, spg = chipConf.BlockSize * nandPage;//start page in block
 8003d4a:	4b89      	ldr	r3, [pc, #548]	; (8003f70 <defThread+0xd80>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	4a89      	ldr	r2, [pc, #548]	; (8003f74 <defThread+0xd84>)
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	fb02 f303 	mul.w	r3, r2, r3
 8003d56:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
					bool ok = true;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
					byte = dbg;
 8003d60:	4b85      	ldr	r3, [pc, #532]	; (8003f78 <defThread+0xd88>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
					dbg = logOff;
 8003d68:	4b83      	ldr	r3, [pc, #524]	; (8003f78 <defThread+0xd88>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	701a      	strb	r2, [r3, #0]
					for (pg = spg; pg < (spg + chipConf.BlockSize); pg++) {
 8003d6e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003d72:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8003d76:	e012      	b.n	8003d9e <defThread+0xbae>
						if (!pageIsEmpty(pg)) {
 8003d78:	f8d7 0454 	ldr.w	r0, [r7, #1108]	; 0x454
 8003d7c:	f7fe fb36 	bl	80023ec <pageIsEmpty>
 8003d80:	4603      	mov	r3, r0
 8003d82:	f083 0301 	eor.w	r3, r3, #1
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <defThread+0xba4>
							ok = false;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3453 	strb.w	r3, [r7, #1107]	; 0x453
							break;
 8003d92:	e00d      	b.n	8003db0 <defThread+0xbc0>
					for (pg = spg; pg < (spg + chipConf.BlockSize); pg++) {
 8003d94:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003d98:	3301      	adds	r3, #1
 8003d9a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8003d9e:	4b74      	ldr	r3, [pc, #464]	; (8003f70 <defThread+0xd80>)
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003da6:	4413      	add	r3, r2
 8003da8:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d3e3      	bcc.n	8003d78 <defThread+0xb88>
						}
					}
					dbg = byte;
 8003db0:	4a71      	ldr	r2, [pc, #452]	; (8003f78 <defThread+0xd88>)
 8003db2:	f897 3452 	ldrb.w	r3, [r7, #1106]	; 0x452
 8003db6:	7013      	strb	r3, [r2, #0]
					if (dbg != logOff) {
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <defThread+0xd88>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80a4 	beq.w	8003f0a <defThread+0xd1a>
						if (ok) {
 8003dc2:	f897 3453 	ldrb.w	r3, [r7, #1107]	; 0x453
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d017      	beq.n	8003dfa <defThread+0xc0a>
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
									spg / chipConf.BlockSize, spg, spg + chipConf.BlockSize - 1, eol);
 8003dca:	4b69      	ldr	r3, [pc, #420]	; (8003f70 <defThread+0xd80>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
 8003dce:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003dd2:	fbb2 f1f3 	udiv	r1, r2, r3
									spg / chipConf.BlockSize, spg, spg + chipConf.BlockSize - 1, eol);
 8003dd6:	4b66      	ldr	r3, [pc, #408]	; (8003f70 <defThread+0xd80>)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003dde:	4413      	add	r3, r2
							Report(1, "Block:%lu Page:%lu..%lu is Empty%s",
 8003de0:	3b01      	subs	r3, #1
 8003de2:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <defThread+0xd8c>)
 8003de4:	6812      	ldr	r2, [r2, #0]
 8003de6:	9201      	str	r2, [sp, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8003dee:	460a      	mov	r2, r1
 8003df0:	4965      	ldr	r1, [pc, #404]	; (8003f88 <defThread+0xd98>)
 8003df2:	2001      	movs	r0, #1
 8003df4:	f7fe fdf2 	bl	80029dc <Report>
							Report(1, "Block:%lu Page:%lu Not empty%s",
									spg / chipConf.BlockSize, pg, eol);
						}
					}
				}
				break;
 8003df8:	e087      	b.n	8003f0a <defThread+0xd1a>
									spg / chipConf.BlockSize, pg, eol);
 8003dfa:	4b5d      	ldr	r3, [pc, #372]	; (8003f70 <defThread+0xd80>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
							Report(1, "Block:%lu Page:%lu Not empty%s",
 8003dfe:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 8003e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e06:	4b5d      	ldr	r3, [pc, #372]	; (8003f7c <defThread+0xd8c>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	9300      	str	r3, [sp, #0]
 8003e0c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8003e10:	495e      	ldr	r1, [pc, #376]	; (8003f8c <defThread+0xd9c>)
 8003e12:	2001      	movs	r0, #1
 8003e14:	f7fe fde2 	bl	80029dc <Report>
				break;
 8003e18:	e077      	b.n	8003f0a <defThread+0xd1a>
				case cmdWrite:
				//case cmdWriteECC:
				{
					uint32_t wadr = nandAdr / chipConf.PageSize;
 8003e1a:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <defThread+0xda0>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4b54      	ldr	r3, [pc, #336]	; (8003f70 <defThread+0xd80>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e26:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					if (!pageIsEmpty(wadr)) {
 8003e2a:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003e2e:	f7fe fadd 	bl	80023ec <pageIsEmpty>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <defThread+0xc6c>
						io_nand_block_erase(wadr);
 8003e3e:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003e42:	f7fd ff0f 	bl	8001c64 <io_nand_block_erase>
						sprintf(stx, "Erase nand addr:%lu done", wadr + devAdr);
 8003e46:	4b53      	ldr	r3, [pc, #332]	; (8003f94 <defThread+0xda4>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003e4e:	4413      	add	r3, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4951      	ldr	r1, [pc, #324]	; (8003f98 <defThread+0xda8>)
 8003e54:	4851      	ldr	r0, [pc, #324]	; (8003f9c <defThread+0xdac>)
 8003e56:	f00b fbff 	bl	800f658 <siprintf>
 8003e5a:	e009      	b.n	8003e70 <defThread+0xc80>
					} else {
						sprintf(stx, "Addr:%lu is Empty", wadr + devAdr);
 8003e5c:	4b4d      	ldr	r3, [pc, #308]	; (8003f94 <defThread+0xda4>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8003e64:	4413      	add	r3, r2
 8003e66:	461a      	mov	r2, r3
 8003e68:	494d      	ldr	r1, [pc, #308]	; (8003fa0 <defThread+0xdb0>)
 8003e6a:	484c      	ldr	r0, [pc, #304]	; (8003f9c <defThread+0xdac>)
 8003e6c:	f00b fbf4 	bl	800f658 <siprintf>
					}
					if (dbg != logOff) Report(1, "%s%s", stx, eol);
 8003e70:	4b41      	ldr	r3, [pc, #260]	; (8003f78 <defThread+0xd88>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d006      	beq.n	8003e86 <defThread+0xc96>
 8003e78:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <defThread+0xd8c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a47      	ldr	r2, [pc, #284]	; (8003f9c <defThread+0xdac>)
 8003e7e:	4949      	ldr	r1, [pc, #292]	; (8003fa4 <defThread+0xdb4>)
 8003e80:	2001      	movs	r0, #1
 8003e82:	f7fe fdab 	bl	80029dc <Report>
					memset(wrBuf, EMPTY, chipConf.PageSize);
 8003e86:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <defThread+0xd80>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	21ff      	movs	r1, #255	; 0xff
 8003e8e:	4846      	ldr	r0, [pc, #280]	; (8003fa8 <defThread+0xdb8>)
 8003e90:	f00a ff7a 	bl	800ed88 <memset>
					uint16_t ofs = 0;//(nandAdr - devAdr) % chipConf.PageSize;
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
					memset(wrBuf /* + ofs*/, nandByte, nandLen);
 8003e9a:	4b44      	ldr	r3, [pc, #272]	; (8003fac <defThread+0xdbc>)
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4b43      	ldr	r3, [pc, #268]	; (8003fb0 <defThread+0xdc0>)
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4840      	ldr	r0, [pc, #256]	; (8003fa8 <defThread+0xdb8>)
 8003ea8:	f00a ff6e 	bl	800ed88 <memset>
					io_nand_write(wadr, wrBuf, nandLen, ofs);
 8003eac:	4b40      	ldr	r3, [pc, #256]	; (8003fb0 <defThread+0xdc0>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8003eb6:	493c      	ldr	r1, [pc, #240]	; (8003fa8 <defThread+0xdb8>)
 8003eb8:	f8d7 0430 	ldr.w	r0, [r7, #1072]	; 0x430
 8003ebc:	f7fd feb4 	bl	8001c28 <io_nand_write>
					if (dbg != logOff) Report(1, "Write nand adr:0x%X byte:0x%02X len:%lu ofs:%u%s",
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <defThread+0xd88>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d022      	beq.n	8003f0e <defThread+0xd1e>
 8003ec8:	4b31      	ldr	r3, [pc, #196]	; (8003f90 <defThread+0xda0>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <defThread+0xda4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	18d1      	adds	r1, r2, r3
 8003ed2:	4b36      	ldr	r3, [pc, #216]	; (8003fac <defThread+0xdbc>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461c      	mov	r4, r3
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <defThread+0xdc0>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8003ee2:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <defThread+0xd8c>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	9202      	str	r2, [sp, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	9000      	str	r0, [sp, #0]
 8003eec:	4623      	mov	r3, r4
 8003eee:	460a      	mov	r2, r1
 8003ef0:	4930      	ldr	r1, [pc, #192]	; (8003fb4 <defThread+0xdc4>)
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	f7fe fd72 	bl	80029dc <Report>
												nandAdr + devAdr, nandByte, nandLen, ofs, eol);
				}
				break;
 8003ef8:	e009      	b.n	8003f0e <defThread+0xd1e>
				break;
 8003efa:	bf00      	nop
 8003efc:	e008      	b.n	8003f10 <defThread+0xd20>
				break;
 8003efe:	bf00      	nop
 8003f00:	e006      	b.n	8003f10 <defThread+0xd20>
				break;
 8003f02:	bf00      	nop
 8003f04:	e004      	b.n	8003f10 <defThread+0xd20>
				break;
 8003f06:	bf00      	nop
 8003f08:	e002      	b.n	8003f10 <defThread+0xd20>
				break;
 8003f0a:	bf00      	nop
 8003f0c:	e000      	b.n	8003f10 <defThread+0xd20>
				break;
 8003f0e:	bf00      	nop
			}
			if (nand_show) {
 8003f10:	f897 3473 	ldrb.w	r3, [r7, #1139]	; 0x473
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <defThread+0xd44>
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8003f18:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <defThread+0xda0>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <defThread+0xdc0>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	461c      	mov	r4, r3
 8003f22:	f897 1472 	ldrb.w	r1, [r7, #1138]	; 0x472
 8003f26:	f897 0473 	ldrb.w	r0, [r7, #1139]	; 0x473
 8003f2a:	4b23      	ldr	r3, [pc, #140]	; (8003fb8 <defThread+0xdc8>)
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	4623      	mov	r3, r4
 8003f30:	f7fe fdba 	bl	8002aa8 <showBuf>
			}
		}

		// Erase all pages
		if (next_block_erase) {
 8003f34:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8082 	beq.w	8004042 <defThread+0xe52>
			byte = dbg;
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <defThread+0xd88>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f887 3452 	strb.w	r3, [r7, #1106]	; 0x452
			dbg = logOff;//disable print log !
 8003f46:	4b0c      	ldr	r3, [pc, #48]	; (8003f78 <defThread+0xd88>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
			io_nand_block_erase(iBlk);
 8003f4c:	f8d7 0478 	ldr.w	r0, [r7, #1144]	; 0x478
 8003f50:	f7fd fe88 	bl	8001c64 <io_nand_block_erase>
			dbg = byte;//restore dbg value !
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <defThread+0xd88>)
 8003f56:	f897 3452 	ldrb.w	r3, [r7, #1106]	; 0x452
 8003f5a:	7013      	strb	r3, [r2, #0]
			if (devError & devNAND) {
 8003f5c:	4b17      	ldr	r3, [pc, #92]	; (8003fbc <defThread+0xdcc>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02b      	beq.n	8003fc0 <defThread+0xdd0>
				next_block_erase = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
 8003f6e:	e040      	b.n	8003ff2 <defThread+0xe02>
 8003f70:	200015e8 	.word	0x200015e8
 8003f74:	200015d8 	.word	0x200015d8
 8003f78:	20000082 	.word	0x20000082
 8003f7c:	20000004 	.word	0x20000004
 8003f80:	080107c8 	.word	0x080107c8
 8003f84:	080107ec 	.word	0x080107ec
 8003f88:	08010810 	.word	0x08010810
 8003f8c:	08010834 	.word	0x08010834
 8003f90:	200015cc 	.word	0x200015cc
 8003f94:	200015c8 	.word	0x200015c8
 8003f98:	08010854 	.word	0x08010854
 8003f9c:	20002604 	.word	0x20002604
 8003fa0:	08010870 	.word	0x08010870
 8003fa4:	080105f4 	.word	0x080105f4
 8003fa8:	20001e00 	.word	0x20001e00
 8003fac:	200000a0 	.word	0x200000a0
 8003fb0:	200015d0 	.word	0x200015d0
 8003fb4:	08010884 	.word	0x08010884
 8003fb8:	20001600 	.word	0x20001600
 8003fbc:	200005a4 	.word	0x200005a4
			} else {
				//if (!(iBlk % (chipConf.PageSize * 1024))) Report(0, ".");
				//if (iBlk >= (chipConf.PlaneSize * chipConf.PlaneNbr)) next_block_erase = 0;
				if (!(iBlk % (chipConf.BlockSize * 16))) Report(0, ".");
 8003fc0:	4b36      	ldr	r3, [pc, #216]	; (800409c <defThread+0xeac>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	011a      	lsls	r2, r3, #4
 8003fc6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fca:	fbb3 f1f2 	udiv	r1, r3, r2
 8003fce:	fb01 f202 	mul.w	r2, r1, r2
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <defThread+0xdf0>
 8003fd8:	4931      	ldr	r1, [pc, #196]	; (80040a0 <defThread+0xeb0>)
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f7fe fcfe 	bl	80029dc <Report>
				if (iBlk >= total_pages) next_block_erase = 0;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <defThread+0xeb4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d302      	bcc.n	8003ff2 <defThread+0xe02>
 8003fec:	2300      	movs	r3, #0
 8003fee:	f887 347f 	strb.w	r3, [r7, #1151]	; 0x47f
			}
			if (!next_block_erase) {
 8003ff2:	f897 347f 	ldrb.w	r3, [r7, #1151]	; 0x47f
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11c      	bne.n	8004034 <defThread+0xe44>
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 8003ffa:	4b2b      	ldr	r3, [pc, #172]	; (80040a8 <defThread+0xeb8>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <defThread+0xe44>
						iBlk / chipConf.BlockSize, (HAL_GetTick() - stik) / 1000, eol);
 8004002:	4b26      	ldr	r3, [pc, #152]	; (800409c <defThread+0xeac>)
 8004004:	689b      	ldr	r3, [r3, #8]
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 8004006:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800400a:	fbb2 f4f3 	udiv	r4, r2, r3
						iBlk / chipConf.BlockSize, (HAL_GetTick() - stik) / 1000, eol);
 800400e:	f001 f99f 	bl	8005350 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	f8d7 3474 	ldr.w	r3, [r7, #1140]	; 0x474
 8004018:	1ad3      	subs	r3, r2, r3
				if (dbg != logOff) Report(0, " %lu blocks (%lu sec)%s",
 800401a:	4a24      	ldr	r2, [pc, #144]	; (80040ac <defThread+0xebc>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	099a      	lsrs	r2, r3, #6
 8004022:	4b23      	ldr	r3, [pc, #140]	; (80040b0 <defThread+0xec0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4613      	mov	r3, r2
 800402a:	4622      	mov	r2, r4
 800402c:	4921      	ldr	r1, [pc, #132]	; (80040b4 <defThread+0xec4>)
 800402e:	2000      	movs	r0, #0
 8004030:	f7fe fcd4 	bl	80029dc <Report>
			}
			iBlk += chipConf.BlockSize;//chipConf.PageSize;
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <defThread+0xeac>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800403c:	4413      	add	r3, r2
 800403e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
		}
		//
		osDelay(5);
 8004042:	2005      	movs	r0, #5
 8004044:	f007 fca2 	bl	800b98c <osDelay>
	while (loop) {
 8004048:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f aabf 	bne.w	80035d0 <defThread+0x3e0>

//	if (wrBuf) free(wrBuf);
//	if (rdBuf) free(rdBuf);

#ifdef SET_SMALL_FS
	if (mnt) fs_err = io_fs_unmount();
 8004052:	f897 3443 	ldrb.w	r3, [r7, #1091]	; 0x443
 8004056:	2b00      	cmp	r3, #0
 8004058:	d004      	beq.n	8004064 <defThread+0xe74>
 800405a:	f001 f8bf 	bl	80051dc <io_fs_unmount>
 800405e:	4603      	mov	r3, r0
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <defThread+0xec8>)
 8004062:	6013      	str	r3, [r2, #0]
#endif

	if (dbg != logOff) Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <defThread+0xeb8>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d011      	beq.n	8004090 <defThread+0xea0>
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <defThread+0xecc>)
 800406e:	681c      	ldr	r4, [r3, #0]
 8004070:	f00a fb70 	bl	800e754 <xPortGetFreeHeapSize>
 8004074:	4602      	mov	r2, r0
 8004076:	4b0e      	ldr	r3, [pc, #56]	; (80040b0 <defThread+0xec0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	9302      	str	r3, [sp, #8]
 800407c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004080:	9301      	str	r3, [sp, #4]
 8004082:	9200      	str	r2, [sp, #0]
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <defThread+0xed0>)
 8004086:	4622      	mov	r2, r4
 8004088:	490e      	ldr	r1, [pc, #56]	; (80040c4 <defThread+0xed4>)
 800408a:	2001      	movs	r0, #1
 800408c:	f7fe fca6 	bl	80029dc <Report>
	osDelay(250);
 8004090:	20fa      	movs	r0, #250	; 0xfa
 8004092:	f007 fc7b 	bl	800b98c <osDelay>

	NVIC_SystemReset();
 8004096:	f7fd fdfd 	bl	8001c94 <__NVIC_SystemReset>
 800409a:	bf00      	nop
 800409c:	200015e8 	.word	0x200015e8
 80040a0:	080108b8 	.word	0x080108b8
 80040a4:	200015c0 	.word	0x200015c0
 80040a8:	20000082 	.word	0x20000082
 80040ac:	10624dd3 	.word	0x10624dd3
 80040b0:	20000004 	.word	0x20000004
 80040b4:	080108bc 	.word	0x080108bc
 80040b8:	20002e04 	.word	0x20002e04
 80040bc:	20000000 	.word	0x20000000
 80040c0:	08013b38 	.word	0x08013b38
 80040c4:	080108d4 	.word	0x080108d4

080040c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040c8:	b5b0      	push	{r4, r5, r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a10      	ldr	r2, [pc, #64]	; (8004118 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d102      	bne.n	80040e0 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80040da:	f001 f925 	bl	8005328 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 80040de:	e016      	b.n	800410e <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e8:	d111      	bne.n	800410e <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 80040ea:	f7fe fb3f 	bl	800276c <get_msCounter>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	f002 0403 	and.w	r4, r2, #3
 80040f6:	2500      	movs	r5, #0
 80040f8:	1ee3      	subs	r3, r4, #3
 80040fa:	432b      	orrs	r3, r5
 80040fc:	d105      	bne.n	800410a <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 80040fe:	f7fe fb27 	bl	8002750 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8004102:	2180      	movs	r1, #128	; 0x80
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8004106:	f001 fffa 	bl	80060fe <HAL_GPIO_TogglePin>
	  inc_msCounter();
 800410a:	f7fe fb3d 	bl	8002788 <inc_msCounter>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}
 8004116:	bf00      	nop
 8004118:	40010000 	.word	0x40010000
 800411c:	40020800 	.word	0x40020800

08004120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

	devError |= devSYS;
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <Error_Handler+0x1c>)
 8004126:	881b      	ldrh	r3, [r3, #0]
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	b29a      	uxth	r2, r3
 800412e:	4b03      	ldr	r3, [pc, #12]	; (800413c <Error_Handler+0x1c>)
 8004130:	801a      	strh	r2, [r3, #0]
	errLedOn(true);
 8004132:	2001      	movs	r0, #1
 8004134:	f7fe fae4 	bl	8002700 <errLedOn>

  /* USER CODE END Error_Handler_Debug */
}
 8004138:	bf00      	nop
 800413a:	bd80      	pop	{r7, pc}
 800413c:	200005a4 	.word	0x200005a4

08004140 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 800414a:	2200      	movs	r2, #0
 800414c:	2104      	movs	r1, #4
 800414e:	480c      	ldr	r0, [pc, #48]	; (8004180 <ST7789_WriteCommand+0x40>)
 8004150:	f001 ffbc 	bl	80060cc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <ST7789_WriteCommand+0x44>)
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	2396      	movs	r3, #150	; 0x96
 800415a:	1df9      	adds	r1, r7, #7
 800415c:	2201      	movs	r2, #1
 800415e:	f005 f890 	bl	8009282 <HAL_SPI_Transmit>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <ST7789_WriteCommand+0x36>
 8004168:	4b07      	ldr	r3, [pc, #28]	; (8004188 <ST7789_WriteCommand+0x48>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	f043 0310 	orr.w	r3, r3, #16
 8004170:	b29a      	uxth	r2, r3
 8004172:	4b05      	ldr	r3, [pc, #20]	; (8004188 <ST7789_WriteCommand+0x48>)
 8004174:	801a      	strh	r2, [r3, #0]
}
 8004176:	bf00      	nop
 8004178:	3708      	adds	r7, #8
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40020000 	.word	0x40020000
 8004184:	20000088 	.word	0x20000088
 8004188:	200005a4 	.word	0x200005a4

0800418c <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8004196:	2200      	movs	r2, #0
 8004198:	2104      	movs	r1, #4
 800419a:	480e      	ldr	r0, [pc, #56]	; (80041d4 <ST7789_WriteCommands+0x48>)
 800419c:	f001 ff96 	bl	80060cc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 80041a0:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <ST7789_WriteCommands+0x4c>)
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	2196      	movs	r1, #150	; 0x96
 80041aa:	460b      	mov	r3, r1
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	f005 f865 	bl	8009282 <HAL_SPI_Transmit>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d006      	beq.n	80041cc <ST7789_WriteCommands+0x40>
 80041be:	4b07      	ldr	r3, [pc, #28]	; (80041dc <ST7789_WriteCommands+0x50>)
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	f043 0310 	orr.w	r3, r3, #16
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <ST7789_WriteCommands+0x50>)
 80041ca:	801a      	strh	r2, [r3, #0]
}
 80041cc:	bf00      	nop
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40020000 	.word	0x40020000
 80041d8:	20000088 	.word	0x20000088
 80041dc:	200005a4 	.word	0x200005a4

080041e0 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 80041ee:	2201      	movs	r2, #1
 80041f0:	2104      	movs	r1, #4
 80041f2:	481f      	ldr	r0, [pc, #124]	; (8004270 <ST7789_WriteData+0x90>)
 80041f4:	f001 ff6a 	bl	80060cc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 80041f8:	e029      	b.n	800424e <ST7789_WriteData+0x6e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004200:	4293      	cmp	r3, r2
 8004202:	bf28      	it	cs
 8004204:	4613      	movcs	r3, r2
 8004206:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <ST7789_WriteData+0x94>)
 800420a:	2200      	movs	r2, #0
 800420c:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <ST7789_WriteData+0x98>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	89ba      	ldrh	r2, [r7, #12]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4618      	mov	r0, r3
 8004218:	f005 f970 	bl	80094fc <HAL_SPI_Transmit_DMA>
 800421c:	4603      	mov	r3, r0
 800421e:	461a      	mov	r2, r3
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	4313      	orrs	r3, r2
 8004224:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8004226:	e002      	b.n	800422e <ST7789_WriteData+0x4e>
 8004228:	2001      	movs	r0, #1
 800422a:	f001 f89d 	bl	8005368 <HAL_Delay>
 800422e:	4b11      	ldr	r3, [pc, #68]	; (8004274 <ST7789_WriteData+0x94>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1f4      	bne.n	8004228 <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 800423e:	89bb      	ldrh	r3, [r7, #12]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	4413      	add	r3, r2
 8004244:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8004246:	89bb      	ldrh	r3, [r7, #12]
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1d2      	bne.n	80041fa <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8004254:	7bfb      	ldrb	r3, [r7, #15]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <ST7789_WriteData+0x88>
 800425a:	4b08      	ldr	r3, [pc, #32]	; (800427c <ST7789_WriteData+0x9c>)
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	f043 0310 	orr.w	r3, r3, #16
 8004262:	b29a      	uxth	r2, r3
 8004264:	4b05      	ldr	r3, [pc, #20]	; (800427c <ST7789_WriteData+0x9c>)
 8004266:	801a      	strh	r2, [r3, #0]
}
 8004268:	bf00      	nop
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40020000 	.word	0x40020000
 8004274:	20000081 	.word	0x20000081
 8004278:	20000088 	.word	0x20000088
 800427c:	200005a4 	.word	0x200005a4

08004280 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 800428e:	2201      	movs	r2, #1
 8004290:	2104      	movs	r1, #4
 8004292:	4815      	ldr	r0, [pc, #84]	; (80042e8 <ST7789_WriteDataLine+0x68>)
 8004294:	f001 ff1a 	bl	80060cc <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8004298:	4b14      	ldr	r3, [pc, #80]	; (80042ec <ST7789_WriteDataLine+0x6c>)
 800429a:	2200      	movs	r2, #0
 800429c:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <ST7789_WriteDataLine+0x70>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	683a      	ldr	r2, [r7, #0]
 80042a4:	b292      	uxth	r2, r2
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f005 f927 	bl	80094fc <HAL_SPI_Transmit_DMA>
 80042ae:	4603      	mov	r3, r0
 80042b0:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 80042b2:	e002      	b.n	80042ba <ST7789_WriteDataLine+0x3a>
 80042b4:	2001      	movs	r0, #1
 80042b6:	f001 f857 	bl	8005368 <HAL_Delay>
 80042ba:	4b0c      	ldr	r3, [pc, #48]	; (80042ec <ST7789_WriteDataLine+0x6c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f083 0301 	eor.w	r3, r3, #1
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f4      	bne.n	80042b4 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d006      	beq.n	80042de <ST7789_WriteDataLine+0x5e>
 80042d0:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <ST7789_WriteDataLine+0x74>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	f043 0310 	orr.w	r3, r3, #16
 80042d8:	b29a      	uxth	r2, r3
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <ST7789_WriteDataLine+0x74>)
 80042dc:	801a      	strh	r2, [r3, #0]
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40020000 	.word	0x40020000
 80042ec:	20000081 	.word	0x20000081
 80042f0:	20000088 	.word	0x20000088
 80042f4:	200005a4 	.word	0x200005a4

080042f8 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8004302:	2201      	movs	r2, #1
 8004304:	2104      	movs	r1, #4
 8004306:	480c      	ldr	r0, [pc, #48]	; (8004338 <ST7789_WriteSmallData+0x40>)
 8004308:	f001 fee0 	bl	80060cc <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <ST7789_WriteSmallData+0x44>)
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	2396      	movs	r3, #150	; 0x96
 8004312:	1df9      	adds	r1, r7, #7
 8004314:	2201      	movs	r2, #1
 8004316:	f004 ffb4 	bl	8009282 <HAL_SPI_Transmit>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d006      	beq.n	800432e <ST7789_WriteSmallData+0x36>
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <ST7789_WriteSmallData+0x48>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	f043 0310 	orr.w	r3, r3, #16
 8004328:	b29a      	uxth	r2, r3
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <ST7789_WriteSmallData+0x48>)
 800432c:	801a      	strh	r2, [r3, #0]
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40020000 	.word	0x40020000
 800433c:	20000088 	.word	0x20000088
 8004340:	200005a4 	.word	0x200005a4

08004344 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <ipsOn+0x18>
 8004354:	2029      	movs	r0, #41	; 0x29
 8004356:	f7ff fef3 	bl	8004140 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 800435a:	e002      	b.n	8004362 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 800435c:	2028      	movs	r0, #40	; 0x28
 800435e:	f7ff feef 	bl	8004140 <ST7789_WriteCommand>
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	4603      	mov	r3, r0
 8004374:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8004376:	2036      	movs	r0, #54	; 0x36
 8004378:	f7ff fee2 	bl	8004140 <ST7789_WriteCommand>
	switch (m) {
 800437c:	79fb      	ldrb	r3, [r7, #7]
 800437e:	2b03      	cmp	r3, #3
 8004380:	d81a      	bhi.n	80043b8 <ST7789_SetRotation+0x4c>
 8004382:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <ST7789_SetRotation+0x1c>)
 8004384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004388:	08004399 	.word	0x08004399
 800438c:	080043a1 	.word	0x080043a1
 8004390:	080043a9 	.word	0x080043a9
 8004394:	080043b1 	.word	0x080043b1
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8004398:	20c0      	movs	r0, #192	; 0xc0
 800439a:	f7ff ffad 	bl	80042f8 <ST7789_WriteSmallData>
		break;
 800439e:	e00c      	b.n	80043ba <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80043a0:	20a0      	movs	r0, #160	; 0xa0
 80043a2:	f7ff ffa9 	bl	80042f8 <ST7789_WriteSmallData>
		break;
 80043a6:	e008      	b.n	80043ba <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7ff ffa5 	bl	80042f8 <ST7789_WriteSmallData>
		break;
 80043ae:	e004      	b.n	80043ba <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 80043b0:	2060      	movs	r0, #96	; 0x60
 80043b2:	f7ff ffa1 	bl	80042f8 <ST7789_WriteSmallData>
		break;
 80043b6:	e000      	b.n	80043ba <ST7789_SetRotation+0x4e>
	default:
		break;
 80043b8:	bf00      	nop
	}
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	4604      	mov	r4, r0
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4623      	mov	r3, r4
 80043d4:	80fb      	strh	r3, [r7, #6]
 80043d6:	4603      	mov	r3, r0
 80043d8:	80bb      	strh	r3, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	807b      	strh	r3, [r7, #2]
 80043de:	4613      	mov	r3, r2
 80043e0:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 80043e2:	88fb      	ldrh	r3, [r7, #6]
 80043e4:	82fb      	strh	r3, [r7, #22]
 80043e6:	887b      	ldrh	r3, [r7, #2]
 80043e8:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 80043ea:	88bb      	ldrh	r3, [r7, #4]
 80043ec:	827b      	strh	r3, [r7, #18]
 80043ee:	883b      	ldrh	r3, [r7, #0]
 80043f0:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 80043f2:	202a      	movs	r0, #42	; 0x2a
 80043f4:	f7ff fea4 	bl	8004140 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 80043f8:	8afb      	ldrh	r3, [r7, #22]
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	733b      	strb	r3, [r7, #12]
 8004402:	8afb      	ldrh	r3, [r7, #22]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	737b      	strb	r3, [r7, #13]
 8004408:	8abb      	ldrh	r3, [r7, #20]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	73bb      	strb	r3, [r7, #14]
 8004412:	8abb      	ldrh	r3, [r7, #20]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	2104      	movs	r1, #4
 800441e:	4618      	mov	r0, r3
 8004420:	f7ff fede 	bl	80041e0 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8004424:	202b      	movs	r0, #43	; 0x2b
 8004426:	f7ff fe8b 	bl	8004140 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800442a:	8a7b      	ldrh	r3, [r7, #18]
 800442c:	0a1b      	lsrs	r3, r3, #8
 800442e:	b29b      	uxth	r3, r3
 8004430:	b2db      	uxtb	r3, r3
 8004432:	723b      	strb	r3, [r7, #8]
 8004434:	8a7b      	ldrh	r3, [r7, #18]
 8004436:	b2db      	uxtb	r3, r3
 8004438:	727b      	strb	r3, [r7, #9]
 800443a:	8a3b      	ldrh	r3, [r7, #16]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	b29b      	uxth	r3, r3
 8004440:	b2db      	uxtb	r3, r3
 8004442:	72bb      	strb	r3, [r7, #10]
 8004444:	8a3b      	ldrh	r3, [r7, #16]
 8004446:	b2db      	uxtb	r3, r3
 8004448:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	2104      	movs	r1, #4
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fec5 	bl	80041e0 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8004456:	202c      	movs	r0, #44	; 0x2c
 8004458:	f7ff fe72 	bl	8004140 <ST7789_WriteCommand>
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}

08004464 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 8004468:	2014      	movs	r0, #20
 800446a:	f000 ff7d 	bl	8005368 <HAL_Delay>
    ST7789_RST_Clr();
 800446e:	2200      	movs	r2, #0
 8004470:	2102      	movs	r1, #2
 8004472:	4808      	ldr	r0, [pc, #32]	; (8004494 <ST7789_Reset+0x30>)
 8004474:	f001 fe2a 	bl	80060cc <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 8004478:	200a      	movs	r0, #10
 800447a:	f000 ff75 	bl	8005368 <HAL_Delay>
    ST7789_RST_Set();
 800447e:	2201      	movs	r2, #1
 8004480:	2102      	movs	r1, #2
 8004482:	4804      	ldr	r0, [pc, #16]	; (8004494 <ST7789_Reset+0x30>)
 8004484:	f001 fe22 	bl	80060cc <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 8004488:	2014      	movs	r0, #20
 800448a:	f000 ff6d 	bl	8005368 <HAL_Delay>
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40020000 	.word	0x40020000

08004498 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b08f      	sub	sp, #60	; 0x3c
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 80044a2:	203a      	movs	r0, #58	; 0x3a
 80044a4:	f7ff fe4c 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 80044a8:	2055      	movs	r0, #85	; 0x55
 80044aa:	f7ff ff25 	bl	80042f8 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 80044ae:	20b2      	movs	r0, #178	; 0xb2
 80044b0:	f7ff fe46 	bl	8004140 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 80044b4:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <ST7789_Init+0x108>)
 80044b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044be:	6018      	str	r0, [r3, #0]
 80044c0:	3304      	adds	r3, #4
 80044c2:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 80044c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044c8:	2105      	movs	r1, #5
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff fe88 	bl	80041e0 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 80044d0:	2003      	movs	r0, #3
 80044d2:	f7ff ff4b 	bl	800436c <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 80044d6:	20b7      	movs	r0, #183	; 0xb7
 80044d8:	f7ff fe32 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 80044dc:	2035      	movs	r0, #53	; 0x35
 80044de:	f7ff ff0b 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 80044e2:	20bb      	movs	r0, #187	; 0xbb
 80044e4:	f7ff fe2c 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 80044e8:	2019      	movs	r0, #25
 80044ea:	f7ff ff05 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 80044ee:	20c0      	movs	r0, #192	; 0xc0
 80044f0:	f7ff fe26 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 80044f4:	202c      	movs	r0, #44	; 0x2c
 80044f6:	f7ff feff 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 80044fa:	20c2      	movs	r0, #194	; 0xc2
 80044fc:	f7ff fe20 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8004500:	2001      	movs	r0, #1
 8004502:	f7ff fef9 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8004506:	20ff      	movs	r0, #255	; 0xff
 8004508:	f7ff fef6 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 800450c:	20c3      	movs	r0, #195	; 0xc3
 800450e:	f7ff fe17 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8004512:	2012      	movs	r0, #18
 8004514:	f7ff fef0 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8004518:	20c4      	movs	r0, #196	; 0xc4
 800451a:	f7ff fe11 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800451e:	2020      	movs	r0, #32
 8004520:	f7ff feea 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8004524:	20c6      	movs	r0, #198	; 0xc6
 8004526:	f7ff fe0b 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800452a:	200f      	movs	r0, #15
 800452c:	f7ff fee4 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8004530:	20d0      	movs	r0, #208	; 0xd0
 8004532:	f7ff fe05 	bl	8004140 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8004536:	20a4      	movs	r0, #164	; 0xa4
 8004538:	f7ff fede 	bl	80042f8 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 800453c:	20a1      	movs	r0, #161	; 0xa1
 800453e:	f7ff fedb 	bl	80042f8 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8004542:	20e0      	movs	r0, #224	; 0xe0
 8004544:	f7ff fdfc 	bl	8004140 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8004548:	4b16      	ldr	r3, [pc, #88]	; (80045a4 <ST7789_Init+0x10c>)
 800454a:	f107 041c 	add.w	r4, r7, #28
 800454e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004550:	c407      	stmia	r4!, {r0, r1, r2}
 8004552:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004554:	f107 031c 	add.w	r3, r7, #28
 8004558:	210e      	movs	r1, #14
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fe40 	bl	80041e0 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8004560:	20e1      	movs	r0, #225	; 0xe1
 8004562:	f7ff fded 	bl	8004140 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <ST7789_Init+0x110>)
 8004568:	f107 040c 	add.w	r4, r7, #12
 800456c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456e:	c407      	stmia	r4!, {r0, r1, r2}
 8004570:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8004572:	f107 030c 	add.w	r3, r7, #12
 8004576:	210e      	movs	r1, #14
 8004578:	4618      	mov	r0, r3
 800457a:	f7ff fe31 	bl	80041e0 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 800457e:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <ST7789_Init+0x114>)
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 8004582:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004586:	2104      	movs	r1, #4
 8004588:	4618      	mov	r0, r3
 800458a:	f7ff fdff 	bl	800418c <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 800458e:	88fb      	ldrh	r3, [r7, #6]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 f80d 	bl	80045b0 <ST7789_Fill_Color>
}
 8004596:	bf00      	nop
 8004598:	373c      	adds	r7, #60	; 0x3c
 800459a:	46bd      	mov	sp, r7
 800459c:	bd90      	pop	{r4, r7, pc}
 800459e:	bf00      	nop
 80045a0:	08010900 	.word	0x08010900
 80045a4:	08010908 	.word	0x08010908
 80045a8:	08010918 	.word	0x08010918
 80045ac:	28131121 	.word	0x28131121

080045b0 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b0fc      	sub	sp, #496	; 0x1f0
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4602      	mov	r2, r0
 80045b8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80045bc:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80045c0:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 80045c2:	23ef      	movs	r3, #239	; 0xef
 80045c4:	22ef      	movs	r2, #239	; 0xef
 80045c6:	2100      	movs	r1, #0
 80045c8:	2000      	movs	r0, #0
 80045ca:	f7ff fefb 	bl	80043c4 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80045da:	e024      	b.n	8004626 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 80045dc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80045e0:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	b21a      	sxth	r2, r3
 80045ec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80045f0:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b21b      	sxth	r3, r3
 80045fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045fe:	b21b      	sxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b219      	sxth	r1, r3
 8004604:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004608:	f107 020c 	add.w	r2, r7, #12
 800460c:	4413      	add	r3, r2
 800460e:	b28a      	uxth	r2, r1
 8004610:	801a      	strh	r2, [r3, #0]
		i += 2;
 8004612:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8004616:	3302      	adds	r3, #2
 8004618:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800461c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004620:	3301      	adds	r3, #1
 8004622:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004626:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800462a:	2bef      	cmp	r3, #239	; 0xef
 800462c:	d9d6      	bls.n	80045dc <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800462e:	2300      	movs	r3, #0
 8004630:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8004634:	e00b      	b.n	800464e <ST7789_Fill_Color+0x9e>
 8004636:	f107 030c 	add.w	r3, r7, #12
 800463a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fe1e 	bl	8004280 <ST7789_WriteDataLine>
 8004644:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004648:	3301      	adds	r3, #1
 800464a:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800464e:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8004652:	2bef      	cmp	r3, #239	; 0xef
 8004654:	d9ef      	bls.n	8004636 <ST7789_Fill_Color+0x86>

//#endif
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8004662:	b590      	push	{r4, r7, lr}
 8004664:	b085      	sub	sp, #20
 8004666:	af00      	add	r7, sp, #0
 8004668:	4604      	mov	r4, r0
 800466a:	4608      	mov	r0, r1
 800466c:	4611      	mov	r1, r2
 800466e:	461a      	mov	r2, r3
 8004670:	4623      	mov	r3, r4
 8004672:	80fb      	strh	r3, [r7, #6]
 8004674:	4603      	mov	r3, r0
 8004676:	80bb      	strh	r3, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	807b      	strh	r3, [r7, #2]
 800467c:	4613      	mov	r3, r2
 800467e:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 8004680:	887b      	ldrh	r3, [r7, #2]
 8004682:	2bef      	cmp	r3, #239	; 0xef
 8004684:	d82b      	bhi.n	80046de <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 8004686:	883b      	ldrh	r3, [r7, #0]
 8004688:	2bef      	cmp	r3, #239	; 0xef
 800468a:	d828      	bhi.n	80046de <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 800468c:	8c3b      	ldrh	r3, [r7, #32]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	b29b      	uxth	r3, r3
 8004692:	b2db      	uxtb	r3, r3
 8004694:	723b      	strb	r3, [r7, #8]
 8004696:	8c3b      	ldrh	r3, [r7, #32]
 8004698:	b2db      	uxtb	r3, r3
 800469a:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800469c:	883b      	ldrh	r3, [r7, #0]
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	88b9      	ldrh	r1, [r7, #4]
 80046a2:	88f8      	ldrh	r0, [r7, #6]
 80046a4:	f7ff fe8e 	bl	80043c4 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 80046a8:	88bb      	ldrh	r3, [r7, #4]
 80046aa:	81fb      	strh	r3, [r7, #14]
 80046ac:	e012      	b.n	80046d4 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 80046ae:	88fb      	ldrh	r3, [r7, #6]
 80046b0:	81bb      	strh	r3, [r7, #12]
 80046b2:	e008      	b.n	80046c6 <ST7789_Fill+0x64>
 80046b4:	f107 0308 	add.w	r3, r7, #8
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fd90 	bl	80041e0 <ST7789_WriteData>
 80046c0:	89bb      	ldrh	r3, [r7, #12]
 80046c2:	3301      	adds	r3, #1
 80046c4:	81bb      	strh	r3, [r7, #12]
 80046c6:	89ba      	ldrh	r2, [r7, #12]
 80046c8:	887b      	ldrh	r3, [r7, #2]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d9f2      	bls.n	80046b4 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	3301      	adds	r3, #1
 80046d2:	81fb      	strh	r3, [r7, #14]
 80046d4:	89fa      	ldrh	r2, [r7, #14]
 80046d6:	883b      	ldrh	r3, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d9e8      	bls.n	80046ae <ST7789_Fill+0x4c>
 80046dc:	e000      	b.n	80046e0 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80046de:	bf00      	nop
	}
}
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd90      	pop	{r4, r7, pc}

080046e6 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80046e6:	b082      	sub	sp, #8
 80046e8:	b590      	push	{r4, r7, lr}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	637b      	str	r3, [r7, #52]	; 0x34
 80046f0:	4603      	mov	r3, r0
 80046f2:	80fb      	strh	r3, [r7, #6]
 80046f4:	460b      	mov	r3, r1
 80046f6:	80bb      	strh	r3, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 80046fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004700:	b29a      	uxth	r2, r3
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	4413      	add	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	3b01      	subs	r3, #1
 800470a:	b29c      	uxth	r4, r3
 800470c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004710:	b29a      	uxth	r2, r3
 8004712:	88bb      	ldrh	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	88b9      	ldrh	r1, [r7, #4]
 800471e:	88f8      	ldrh	r0, [r7, #6]
 8004720:	4622      	mov	r2, r4
 8004722:	f7ff fe4f 	bl	80043c4 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8004726:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004728:	0a1b      	lsrs	r3, r3, #8
 800472a:	b29b      	uxth	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	733b      	strb	r3, [r7, #12]
 8004730:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004732:	b2db      	uxtb	r3, r3
 8004734:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8004736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	b29b      	uxth	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	723b      	strb	r3, [r7, #8]
 8004742:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004746:	b2db      	uxtb	r3, r3
 8004748:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
 8004752:	e02f      	b.n	80047b4 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 8004754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004756:	78fb      	ldrb	r3, [r7, #3]
 8004758:	3b20      	subs	r3, #32
 800475a:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800475e:	fb01 f303 	mul.w	r3, r1, r3
 8004762:	4619      	mov	r1, r3
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	440b      	add	r3, r1
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e015      	b.n	80047a2 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <ST7789_WriteChar+0xa8>
				uk = cdata;
 8004786:	f107 030c 	add.w	r3, r7, #12
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	e002      	b.n	8004794 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 8004794:	2102      	movs	r1, #2
 8004796:	6978      	ldr	r0, [r7, #20]
 8004798:	f7ff fd22 	bl	80041e0 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	3301      	adds	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80047a6:	461a      	mov	r2, r3
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d3e3      	bcc.n	8004776 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3301      	adds	r3, #1
 80047b2:	61fb      	str	r3, [r7, #28]
 80047b4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047b8:	461a      	mov	r2, r3
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4293      	cmp	r3, r2
 80047be:	d3c9      	bcc.n	8004754 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	3724      	adds	r7, #36	; 0x24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80047cc:	b002      	add	sp, #8
 80047ce:	4770      	bx	lr

080047d0 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 80047d0:	b082      	sub	sp, #8
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af04      	add	r7, sp, #16
 80047d8:	603a      	str	r2, [r7, #0]
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	4603      	mov	r3, r0
 80047de:	80fb      	strh	r3, [r7, #6]
 80047e0:	460b      	mov	r3, r1
 80047e2:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d03f      	beq.n	800486a <ST7789_WriteString+0x9a>

	while (*str) {
 80047ea:	e039      	b.n	8004860 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	7d3a      	ldrb	r2, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	2bef      	cmp	r3, #239	; 0xef
 80047f4:	dd13      	ble.n	800481e <ST7789_WriteString+0x4e>
			x = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80047fa:	7d7b      	ldrb	r3, [r7, #21]
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	88bb      	ldrh	r3, [r7, #4]
 8004800:	4413      	add	r3, r2
 8004802:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8004804:	88bb      	ldrh	r3, [r7, #4]
 8004806:	7d7a      	ldrb	r2, [r7, #21]
 8004808:	4413      	add	r3, r2
 800480a:	2bef      	cmp	r3, #239	; 0xef
 800480c:	dc2f      	bgt.n	800486e <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b20      	cmp	r3, #32
 8004814:	d103      	bne.n	800481e <ST7789_WriteString+0x4e>
				str++;
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	3301      	adds	r3, #1
 800481a:	603b      	str	r3, [r7, #0]
				continue;
 800481c:	e020      	b.n	8004860 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b0a      	cmp	r3, #10
 8004824:	d012      	beq.n	800484c <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	781a      	ldrb	r2, [r3, #0]
 800482a:	88b9      	ldrh	r1, [r7, #4]
 800482c:	88f8      	ldrh	r0, [r7, #6]
 800482e:	8c3b      	ldrh	r3, [r7, #32]
 8004830:	9302      	str	r3, [sp, #8]
 8004832:	8bbb      	ldrh	r3, [r7, #28]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f7ff ff53 	bl	80046e6 <ST7789_WriteChar>
			x += font.width;
 8004840:	7d3b      	ldrb	r3, [r7, #20]
 8004842:	b29a      	uxth	r2, r3
 8004844:	88fb      	ldrh	r3, [r7, #6]
 8004846:	4413      	add	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
 800484a:	e006      	b.n	800485a <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 800484c:	2300      	movs	r3, #0
 800484e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8004850:	7d7b      	ldrb	r3, [r7, #21]
 8004852:	b29a      	uxth	r2, r3
 8004854:	88bb      	ldrh	r3, [r7, #4]
 8004856:	4413      	add	r3, r2
 8004858:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	3301      	adds	r3, #1
 800485e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1c1      	bne.n	80047ec <ST7789_WriteString+0x1c>
 8004868:	e002      	b.n	8004870 <ST7789_WriteString+0xa0>
	if (!str) return;
 800486a:	bf00      	nop
 800486c:	e000      	b.n	8004870 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 800486e:	bf00      	nop
	}
}
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004878:	b002      	add	sp, #8
 800487a:	4770      	bx	lr

0800487c <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b0a4      	sub	sp, #144	; 0x90
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 8004888:	2300      	movs	r3, #0
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	f107 0310 	add.w	r3, r7, #16
 8004890:	227c      	movs	r2, #124	; 0x7c
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f00a fa77 	bl	800ed88 <memset>

	memset(st, 0x20, 127);
 800489a:	f107 030c 	add.w	r3, r7, #12
 800489e:	227f      	movs	r2, #127	; 0x7f
 80048a0:	2120      	movs	r1, #32
 80048a2:	4618      	mov	r0, r3
 80048a4:	f00a fa70 	bl	800ed88 <memset>
	int8_t k = strlen(str);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fb fc91 	bl	80001d0 <strlen>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 80048b4:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80048b8:	887b      	ldrh	r3, [r7, #2]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	da25      	bge.n	800490a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	0fda      	lsrs	r2, r3, #31
 80048c8:	4413      	add	r3, r2
 80048ca:	105b      	asrs	r3, r3, #1
 80048cc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 80048d0:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80048d4:	f107 020c 	add.w	r2, r7, #12
 80048d8:	4413      	add	r3, r2
 80048da:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f00a fa43 	bl	800ed6c <memcpy>
		st[k + n*2 + 1] = '\0';
 80048e6:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 80048ea:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80048ee:	005b      	lsls	r3, r3, #1
 80048f0:	4413      	add	r3, r2
 80048f2:	3301      	adds	r3, #1
 80048f4:	3390      	adds	r3, #144	; 0x90
 80048f6:	443b      	add	r3, r7
 80048f8:	2200      	movs	r2, #0
 80048fa:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 80048fe:	f107 030c 	add.w	r3, r7, #12
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f00a ff26 	bl	800f756 <strcpy>
	}

	return str;
 800490a:	687b      	ldr	r3, [r7, #4]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3790      	adds	r7, #144	; 0x90
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <HAL_MspInit+0x74>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	4a19      	ldr	r2, [pc, #100]	; (8004988 <HAL_MspInit+0x74>)
 8004924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004928:	6453      	str	r3, [r2, #68]	; 0x44
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <HAL_MspInit+0x74>)
 800492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800492e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004936:	2300      	movs	r3, #0
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <HAL_MspInit+0x74>)
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	4a12      	ldr	r2, [pc, #72]	; (8004988 <HAL_MspInit+0x74>)
 8004940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004944:	6413      	str	r3, [r2, #64]	; 0x40
 8004946:	4b10      	ldr	r3, [pc, #64]	; (8004988 <HAL_MspInit+0x74>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800494e:	603b      	str	r3, [r7, #0]
 8004950:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004952:	2200      	movs	r2, #0
 8004954:	210f      	movs	r1, #15
 8004956:	f06f 0001 	mvn.w	r0, #1
 800495a:	f000 fde1 	bl	8005520 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2105      	movs	r1, #5
 8004962:	2005      	movs	r0, #5
 8004964:	f000 fddc 	bl	8005520 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004968:	2005      	movs	r0, #5
 800496a:	f000 fdf5 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800496e:	2200      	movs	r2, #0
 8004970:	2105      	movs	r1, #5
 8004972:	2005      	movs	r0, #5
 8004974:	f000 fdd4 	bl	8005520 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004978:	2005      	movs	r0, #5
 800497a:	f000 fded 	bl	8005558 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800

0800498c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a59      	ldr	r2, [pc, #356]	; (8004b10 <HAL_I2C_MspInit+0x184>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	f040 80ab 	bne.w	8004b06 <HAL_I2C_MspInit+0x17a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	613b      	str	r3, [r7, #16]
 80049b4:	4b57      	ldr	r3, [pc, #348]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	4a56      	ldr	r2, [pc, #344]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 80049ba:	f043 0302 	orr.w	r3, r3, #2
 80049be:	6313      	str	r3, [r2, #48]	; 0x30
 80049c0:	4b54      	ldr	r3, [pc, #336]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80049cc:	f44f 7310 	mov.w	r3, #576	; 0x240
 80049d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049d2:	2312      	movs	r3, #18
 80049d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049da:	2303      	movs	r3, #3
 80049dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049de:	2304      	movs	r3, #4
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049e2:	f107 0314 	add.w	r3, r7, #20
 80049e6:	4619      	mov	r1, r3
 80049e8:	484b      	ldr	r0, [pc, #300]	; (8004b18 <HAL_I2C_MspInit+0x18c>)
 80049ea:	f001 f9d3 	bl	8005d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	4b48      	ldr	r3, [pc, #288]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a47      	ldr	r2, [pc, #284]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 80049f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b45      	ldr	r3, [pc, #276]	; (8004b14 <HAL_I2C_MspInit+0x188>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8004a0a:	4b44      	ldr	r3, [pc, #272]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a0c:	4a44      	ldr	r2, [pc, #272]	; (8004b20 <HAL_I2C_MspInit+0x194>)
 8004a0e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8004a10:	4b42      	ldr	r3, [pc, #264]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a18:	4b40      	ldr	r3, [pc, #256]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a20:	2200      	movs	r2, #0
 8004a22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a24:	4b3d      	ldr	r3, [pc, #244]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a2c:	4b3b      	ldr	r3, [pc, #236]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a32:	4b3a      	ldr	r3, [pc, #232]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004a38:	4b38      	ldr	r3, [pc, #224]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a3e:	4b37      	ldr	r3, [pc, #220]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004a44:	4b35      	ldr	r3, [pc, #212]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a46:	2204      	movs	r2, #4
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004a4a:	4b34      	ldr	r3, [pc, #208]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004a50:	4b32      	ldr	r3, [pc, #200]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004a56:	4b31      	ldr	r3, [pc, #196]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004a5c:	482f      	ldr	r0, [pc, #188]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a5e:	f000 fd89 	bl	8005574 <HAL_DMA_Init>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_I2C_MspInit+0xe0>
    {
      Error_Handler();
 8004a68:	f7ff fb5a 	bl	8004120 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a2b      	ldr	r2, [pc, #172]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a70:	639a      	str	r2, [r3, #56]	; 0x38
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <HAL_I2C_MspInit+0x190>)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8004a78:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a7a:	4a2b      	ldr	r2, [pc, #172]	; (8004b28 <HAL_I2C_MspInit+0x19c>)
 8004a7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8004a7e:	4b29      	ldr	r3, [pc, #164]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004a84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a86:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a88:	2240      	movs	r2, #64	; 0x40
 8004a8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a8c:	4b25      	ldr	r3, [pc, #148]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a92:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a9a:	4b22      	ldr	r3, [pc, #136]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004aac:	4b1d      	ldr	r3, [pc, #116]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004ab4:	2204      	movs	r2, #4
 8004ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2c1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ab8:	4b1a      	ldr	r3, [pc, #104]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004aba:	2203      	movs	r2, #3
 8004abc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2c1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004abe:	4b19      	ldr	r3, [pc, #100]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2c1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004ac4:	4b17      	ldr	r3, [pc, #92]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004aca:	4816      	ldr	r0, [pc, #88]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004acc:	f000 fd52 	bl	8005574 <HAL_DMA_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <HAL_I2C_MspInit+0x14e>
    {
      Error_Handler();
 8004ad6:	f7ff fb23 	bl	8004120 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a11      	ldr	r2, [pc, #68]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004ade:	635a      	str	r2, [r3, #52]	; 0x34
 8004ae0:	4a10      	ldr	r2, [pc, #64]	; (8004b24 <HAL_I2C_MspInit+0x198>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2105      	movs	r1, #5
 8004aea:	201f      	movs	r0, #31
 8004aec:	f000 fd18 	bl	8005520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004af0:	201f      	movs	r0, #31
 8004af2:	f000 fd31 	bl	8005558 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2105      	movs	r1, #5
 8004afa:	2020      	movs	r0, #32
 8004afc:	f000 fd10 	bl	8005520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004b00:	2020      	movs	r0, #32
 8004b02:	f000 fd29 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004b06:	bf00      	nop
 8004b08:	3728      	adds	r7, #40	; 0x28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	40005400 	.word	0x40005400
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	200002d4 	.word	0x200002d4
 8004b20:	40026010 	.word	0x40026010
 8004b24:	20000334 	.word	0x20000334
 8004b28:	400260a0 	.word	0x400260a0

08004b2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b34:	f107 0308 	add.w	r3, r7, #8
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a0c      	ldr	r2, [pc, #48]	; (8004b78 <HAL_RTC_MspInit+0x4c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d110      	bne.n	8004b6e <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004b4c:	2302      	movs	r3, #2
 8004b4e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <HAL_RTC_MspInit+0x50>)
 8004b52:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b54:	f107 0308 	add.w	r3, r7, #8
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f003 ff29 	bl	80089b0 <HAL_RCCEx_PeriphCLKConfig>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8004b64:	f7ff fadc 	bl	8004120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004b68:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RTC_MspInit+0x54>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004b6e:	bf00      	nop
 8004b70:	3718      	adds	r7, #24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40002800 	.word	0x40002800
 8004b7c:	00190300 	.word	0x00190300
 8004b80:	42470e3c 	.word	0x42470e3c

08004b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b8c:	f107 0314 	add.w	r3, r7, #20
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]
 8004b94:	605a      	str	r2, [r3, #4]
 8004b96:	609a      	str	r2, [r3, #8]
 8004b98:	60da      	str	r2, [r3, #12]
 8004b9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a39      	ldr	r2, [pc, #228]	; (8004c88 <HAL_SPI_MspInit+0x104>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d16b      	bne.n	8004c7e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	4b38      	ldr	r3, [pc, #224]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	4a37      	ldr	r2, [pc, #220]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bb6:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd2:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_SPI_MspInit+0x108>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 8004bde:	23a0      	movs	r3, #160	; 0xa0
 8004be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be2:	2302      	movs	r3, #2
 8004be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be6:	2300      	movs	r3, #0
 8004be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bea:	2303      	movs	r3, #3
 8004bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bee:	2305      	movs	r3, #5
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004bf2:	f107 0314 	add.w	r3, r7, #20
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4825      	ldr	r0, [pc, #148]	; (8004c90 <HAL_SPI_MspInit+0x10c>)
 8004bfa:	f001 f8cb 	bl	8005d94 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8004bfe:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c00:	4a25      	ldr	r2, [pc, #148]	; (8004c98 <HAL_SPI_MspInit+0x114>)
 8004c02:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8004c04:	4b23      	ldr	r3, [pc, #140]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c06:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8004c0a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c0c:	4b21      	ldr	r3, [pc, #132]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c12:	4b20      	ldr	r3, [pc, #128]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c18:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c1e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c20:	4b1c      	ldr	r3, [pc, #112]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c26:	4b1b      	ldr	r3, [pc, #108]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c32:	4b18      	ldr	r3, [pc, #96]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004c38:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004c3a:	4b16      	ldr	r3, [pc, #88]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004c40:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c42:	2203      	movs	r2, #3
 8004c44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004c46:	4b13      	ldr	r3, [pc, #76]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004c4c:	4b11      	ldr	r3, [pc, #68]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004c52:	4810      	ldr	r0, [pc, #64]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c54:	f000 fc8e 	bl	8005574 <HAL_DMA_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8004c5e:	f7ff fa5f 	bl	8004120 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a0b      	ldr	r2, [pc, #44]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c66:	649a      	str	r2, [r3, #72]	; 0x48
 8004c68:	4a0a      	ldr	r2, [pc, #40]	; (8004c94 <HAL_SPI_MspInit+0x110>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2102      	movs	r1, #2
 8004c72:	2023      	movs	r0, #35	; 0x23
 8004c74:	f000 fc54 	bl	8005520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004c78:	2023      	movs	r0, #35	; 0x23
 8004c7a:	f000 fc6d 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004c7e:	bf00      	nop
 8004c80:	3728      	adds	r7, #40	; 0x28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40013000 	.word	0x40013000
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	40020000 	.word	0x40020000
 8004c94:	2000040c 	.word	0x2000040c
 8004c98:	40026458 	.word	0x40026458

08004c9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cac:	d115      	bne.n	8004cda <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ce4 <HAL_TIM_Base_MspInit+0x48>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	4a0b      	ldr	r2, [pc, #44]	; (8004ce4 <HAL_TIM_Base_MspInit+0x48>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_TIM_Base_MspInit+0x48>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2101      	movs	r1, #1
 8004cce:	201c      	movs	r0, #28
 8004cd0:	f000 fc26 	bl	8005520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cd4:	201c      	movs	r0, #28
 8004cd6:	f000 fc3f 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40023800 	.word	0x40023800

08004ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	; 0x28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a35      	ldr	r2, [pc, #212]	; (8004ddc <HAL_UART_MspInit+0xf4>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d163      	bne.n	8004dd2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	4a33      	ldr	r2, [pc, #204]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d18:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1a:	4b31      	ldr	r3, [pc, #196]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d22:	613b      	str	r3, [r7, #16]
 8004d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d30:	f043 0302 	orr.w	r3, r3, #2
 8004d34:	6313      	str	r3, [r2, #48]	; 0x30
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_UART_MspInit+0xf8>)
 8004d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8004d42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d48:	2302      	movs	r3, #2
 8004d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d50:	2303      	movs	r3, #3
 8004d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d54:	2307      	movs	r3, #7
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	4619      	mov	r1, r3
 8004d5e:	4821      	ldr	r0, [pc, #132]	; (8004de4 <HAL_UART_MspInit+0xfc>)
 8004d60:	f001 f818 	bl	8005d94 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8004d64:	4b20      	ldr	r3, [pc, #128]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d66:	4a21      	ldr	r2, [pc, #132]	; (8004dec <HAL_UART_MspInit+0x104>)
 8004d68:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004d6a:	4b1f      	ldr	r3, [pc, #124]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d70:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d74:	2240      	movs	r2, #64	; 0x40
 8004d76:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d78:	4b1b      	ldr	r3, [pc, #108]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d7e:	4b1a      	ldr	r3, [pc, #104]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d84:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8004d92:	4b15      	ldr	r3, [pc, #84]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d98:	4b13      	ldr	r3, [pc, #76]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004d9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d9e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004da6:	4810      	ldr	r0, [pc, #64]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004da8:	f000 fbe4 	bl	8005574 <HAL_DMA_Init>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004db2:	f7ff f9b5 	bl	8004120 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a0b      	ldr	r2, [pc, #44]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004dba:	635a      	str	r2, [r3, #52]	; 0x34
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	; (8004de8 <HAL_UART_MspInit+0x100>)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	2105      	movs	r1, #5
 8004dc6:	2027      	movs	r0, #39	; 0x27
 8004dc8:	f000 fbaa 	bl	8005520 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004dcc:	2027      	movs	r0, #39	; 0x27
 8004dce:	f000 fbc3 	bl	8005558 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004dd2:	bf00      	nop
 8004dd4:	3728      	adds	r7, #40	; 0x28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40023800 	.word	0x40023800
 8004de4:	40020400 	.word	0x40020400
 8004de8:	200004f8 	.word	0x200004f8
 8004dec:	40026058 	.word	0x40026058

08004df0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	609a      	str	r2, [r3, #8]
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8004e04:	4b28      	ldr	r3, [pc, #160]	; (8004ea8 <HAL_FSMC_MspInit+0xb8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d148      	bne.n	8004e9e <HAL_FSMC_MspInit+0xae>
    return;
  }
  FSMC_Initialized = 1;
 8004e0c:	4b26      	ldr	r3, [pc, #152]	; (8004ea8 <HAL_FSMC_MspInit+0xb8>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4b25      	ldr	r3, [pc, #148]	; (8004eac <HAL_FSMC_MspInit+0xbc>)
 8004e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1a:	4a24      	ldr	r2, [pc, #144]	; (8004eac <HAL_FSMC_MspInit+0xbc>)
 8004e1c:	f043 0301 	orr.w	r3, r3, #1
 8004e20:	6393      	str	r3, [r2, #56]	; 0x38
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_FSMC_MspInit+0xbc>)
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	603b      	str	r3, [r7, #0]
 8004e2c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 8004e2e:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004e32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e34:	2302      	movs	r3, #2
 8004e36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004e40:	230c      	movs	r3, #12
 8004e42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e44:	1d3b      	adds	r3, r7, #4
 8004e46:	4619      	mov	r1, r3
 8004e48:	4819      	ldr	r0, [pc, #100]	; (8004eb0 <HAL_FSMC_MspInit+0xc0>)
 8004e4a:	f000 ffa3 	bl	8005d94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8004e4e:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8004e52:	607b      	str	r3, [r7, #4]
                            |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                            |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e54:	2302      	movs	r3, #2
 8004e56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004e60:	230c      	movs	r3, #12
 8004e62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e64:	1d3b      	adds	r3, r7, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4812      	ldr	r0, [pc, #72]	; (8004eb4 <HAL_FSMC_MspInit+0xc4>)
 8004e6a:	f000 ff93 	bl	8005d94 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = NOE_Pin;
 8004e6e:	2310      	movs	r3, #16
 8004e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e72:	2302      	movs	r3, #2
 8004e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e76:	2301      	movs	r3, #1
 8004e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8004e7e:	230c      	movs	r3, #12
 8004e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NOE_GPIO_Port, &GPIO_InitStruct);
 8004e82:	1d3b      	adds	r3, r7, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	480b      	ldr	r0, [pc, #44]	; (8004eb4 <HAL_FSMC_MspInit+0xc4>)
 8004e88:	f000 ff84 	bl	8005d94 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	2105      	movs	r1, #5
 8004e90:	2030      	movs	r0, #48	; 0x30
 8004e92:	f000 fb45 	bl	8005520 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8004e96:	2030      	movs	r0, #48	; 0x30
 8004e98:	f000 fb5e 	bl	8005558 <HAL_NVIC_EnableIRQ>
 8004e9c:	e000      	b.n	8004ea0 <HAL_FSMC_MspInit+0xb0>
    return;
 8004e9e:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20002e08 	.word	0x20002e08
 8004eac:	40023800 	.word	0x40023800
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	40020c00 	.word	0x40020c00

08004eb8 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8004ec0:	f7ff ff96 	bl	8004df0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8004ec4:	bf00      	nop
 8004ec6:	3708      	adds	r7, #8
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08c      	sub	sp, #48	; 0x30
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004edc:	2200      	movs	r2, #0
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	2019      	movs	r0, #25
 8004ee2:	f000 fb1d 	bl	8005520 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004ee6:	2019      	movs	r0, #25
 8004ee8:	f000 fb36 	bl	8005558 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	4b1f      	ldr	r3, [pc, #124]	; (8004f70 <HAL_InitTick+0xa4>)
 8004ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <HAL_InitTick+0xa4>)
 8004ef6:	f043 0301 	orr.w	r3, r3, #1
 8004efa:	6453      	str	r3, [r2, #68]	; 0x44
 8004efc:	4b1c      	ldr	r3, [pc, #112]	; (8004f70 <HAL_InitTick+0xa4>)
 8004efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f00:	f003 0301 	and.w	r3, r3, #1
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f08:	f107 0210 	add.w	r2, r7, #16
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	4611      	mov	r1, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	f003 fd1a 	bl	800894c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004f18:	f003 fd04 	bl	8008924 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <HAL_InitTick+0xa8>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	0c9b      	lsrs	r3, r3, #18
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004f30:	4b11      	ldr	r3, [pc, #68]	; (8004f78 <HAL_InitTick+0xac>)
 8004f32:	4a12      	ldr	r2, [pc, #72]	; (8004f7c <HAL_InitTick+0xb0>)
 8004f34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_InitTick+0xac>)
 8004f38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004f3c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004f3e:	4a0e      	ldr	r2, [pc, #56]	; (8004f78 <HAL_InitTick+0xac>)
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004f44:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_InitTick+0xac>)
 8004f46:	2200      	movs	r2, #0
 8004f48:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_InitTick+0xac>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004f50:	4809      	ldr	r0, [pc, #36]	; (8004f78 <HAL_InitTick+0xac>)
 8004f52:	f004 fdfd 	bl	8009b50 <HAL_TIM_Base_Init>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004f5c:	4806      	ldr	r0, [pc, #24]	; (8004f78 <HAL_InitTick+0xac>)
 8004f5e:	f004 fe47 	bl	8009bf0 <HAL_TIM_Base_Start_IT>
 8004f62:	4603      	mov	r3, r0
 8004f64:	e000      	b.n	8004f68 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	; 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	431bde83 	.word	0x431bde83
 8004f78:	20002e0c 	.word	0x20002e0c
 8004f7c:	40010000 	.word	0x40010000

08004f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f80:	b480      	push	{r7}
 8004f82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f84:	bf00      	nop
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f92:	e7fe      	b.n	8004f92 <HardFault_Handler+0x4>

08004f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f98:	e7fe      	b.n	8004f98 <MemManage_Handler+0x4>

08004f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f9e:	e7fe      	b.n	8004f9e <BusFault_Handler+0x4>

08004fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fa4:	e7fe      	b.n	8004fa4 <UsageFault_Handler+0x4>

08004fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004fc8:	4802      	ldr	r0, [pc, #8]	; (8004fd4 <DMA1_Stream0_IRQHandler+0x10>)
 8004fca:	f000 fc6b 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004fce:	bf00      	nop
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	200002d4 	.word	0x200002d4

08004fd8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004fdc:	4802      	ldr	r0, [pc, #8]	; (8004fe8 <DMA1_Stream3_IRQHandler+0x10>)
 8004fde:	f000 fc61 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004fe2:	bf00      	nop
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200004f8 	.word	0x200004f8

08004fec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ff0:	4802      	ldr	r0, [pc, #8]	; (8004ffc <DMA1_Stream6_IRQHandler+0x10>)
 8004ff2:	f000 fc57 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004ff6:	bf00      	nop
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000334 	.word	0x20000334

08005000 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005004:	4802      	ldr	r0, [pc, #8]	; (8005010 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005006:	f004 fe63 	bl	8009cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800500a:	bf00      	nop
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20002e0c 	.word	0x20002e0c

08005014 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005018:	4802      	ldr	r0, [pc, #8]	; (8005024 <TIM2_IRQHandler+0x10>)
 800501a:	f004 fe59 	bl	8009cd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	2000046c 	.word	0x2000046c

08005028 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800502c:	4802      	ldr	r0, [pc, #8]	; (8005038 <I2C1_EV_IRQHandler+0x10>)
 800502e:	f001 f9c5 	bl	80063bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000280 	.word	0x20000280

0800503c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8005040:	4802      	ldr	r0, [pc, #8]	; (800504c <I2C1_ER_IRQHandler+0x10>)
 8005042:	f001 fb2c 	bl	800669e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8005046:	bf00      	nop
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000280 	.word	0x20000280

08005050 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005054:	4802      	ldr	r0, [pc, #8]	; (8005060 <SPI1_IRQHandler+0x10>)
 8005056:	f004 fb07 	bl	8009668 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800505a:	bf00      	nop
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	200003b4 	.word	0x200003b4

08005064 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005068:	4802      	ldr	r0, [pc, #8]	; (8005074 <USART3_IRQHandler+0x10>)
 800506a:	f005 faef 	bl	800a64c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	200004b4 	.word	0x200004b4

08005078 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 800507c:	4802      	ldr	r0, [pc, #8]	; (8005088 <FSMC_IRQHandler+0x10>)
 800507e:	f002 fec6 	bl	8007e0e <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8005082:	bf00      	nop
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20000558 	.word	0x20000558

0800508c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8005090:	4802      	ldr	r0, [pc, #8]	; (800509c <DMA2_Stream3_IRQHandler+0x10>)
 8005092:	f000 fc07 	bl	80058a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	2000040c 	.word	0x2000040c

080050a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b086      	sub	sp, #24
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	60f8      	str	r0, [r7, #12]
 80050a8:	60b9      	str	r1, [r7, #8]
 80050aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e00a      	b.n	80050c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80050b2:	f3af 8000 	nop.w
 80050b6:	4601      	mov	r1, r0
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	60ba      	str	r2, [r7, #8]
 80050be:	b2ca      	uxtb	r2, r1
 80050c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3301      	adds	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	dbf0      	blt.n	80050b2 <_read+0x12>
	}

return len;
 80050d0:	687b      	ldr	r3, [r7, #4]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3718      	adds	r7, #24
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <_close>:
	}
	return len;
}

int _close(int file)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
	return -1;
 80050e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005102:	605a      	str	r2, [r3, #4]
	return 0;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <_isatty>:

int _isatty(int file)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
	return 1;
 800511a:	2301      	movs	r3, #1
}
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
	return 0;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3714      	adds	r7, #20
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b086      	sub	sp, #24
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <_sbrk+0x5c>)
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <_sbrk+0x60>)
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005158:	4b13      	ldr	r3, [pc, #76]	; (80051a8 <_sbrk+0x64>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005160:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <_sbrk+0x64>)
 8005162:	4a12      	ldr	r2, [pc, #72]	; (80051ac <_sbrk+0x68>)
 8005164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005166:	4b10      	ldr	r3, [pc, #64]	; (80051a8 <_sbrk+0x64>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4413      	add	r3, r2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	429a      	cmp	r2, r3
 8005172:	d207      	bcs.n	8005184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005174:	f009 fc22 	bl	800e9bc <__errno>
 8005178:	4603      	mov	r3, r0
 800517a:	220c      	movs	r2, #12
 800517c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005182:	e009      	b.n	8005198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005184:	4b08      	ldr	r3, [pc, #32]	; (80051a8 <_sbrk+0x64>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800518a:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <_sbrk+0x64>)
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4413      	add	r3, r2
 8005192:	4a05      	ldr	r2, [pc, #20]	; (80051a8 <_sbrk+0x64>)
 8005194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005196:	68fb      	ldr	r3, [r7, #12]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20020000 	.word	0x20020000
 80051a4:	00001800 	.word	0x00001800
 80051a8:	20002e54 	.word	0x20002e54
 80051ac:	20007cf8 	.word	0x20007cf8

080051b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80051b4:	4b08      	ldr	r3, [pc, #32]	; (80051d8 <SystemInit+0x28>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	4a07      	ldr	r2, [pc, #28]	; (80051d8 <SystemInit+0x28>)
 80051bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051c4:	4b04      	ldr	r3, [pc, #16]	; (80051d8 <SystemInit+0x28>)
 80051c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ca:	609a      	str	r2, [r3, #8]
#endif
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000ed00 	.word	0xe000ed00

080051dc <io_fs_unmount>:
/brief: Unmount a FS
/param:
/return: A negative error code on failure
-----------------------------------------------------------*/
int io_fs_unmount()
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	af00      	add	r7, sp, #0
    return lfs_unmount(&_lfs);
 80051e0:	4802      	ldr	r0, [pc, #8]	; (80051ec <io_fs_unmount+0x10>)
 80051e2:	f000 f837 	bl	8005254 <lfs_unmount>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20002e58 	.word	0x20002e58

080051f0 <lfs_free>:
    return NULL;
#endif
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f009 fdaf 	bl	800ed5c <free>
#else
    (void)p;
#endif
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <lfs_deinit>:
cleanup:
    lfs_deinit(lfs);
    return err;
}

static int lfs_deinit(lfs_t *lfs) {
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff ffe7 	bl	80051f0 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff ffdd 	bl	80051f0 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800523a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d104      	bne.n	800524a <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff ffd3 	bl	80051f0 <lfs_free>
    }

    return 0;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <lfs_unmount>:
    lfs_unmount(lfs);
    LFS_TRACE("lfs_mount -> %d", err);
    return err;
}

int lfs_unmount(lfs_t *lfs) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
    LFS_TRACE("lfs_unmount(%p)", (void*)lfs);
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	f640 6198 	movw	r1, #3736	; 0xe98
 8005262:	4809      	ldr	r0, [pc, #36]	; (8005288 <lfs_unmount+0x34>)
 8005264:	f00a f966 	bl	800f534 <iprintf>
    int err = lfs_deinit(lfs);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ffcc 	bl	8005206 <lfs_deinit>
 800526e:	60f8      	str	r0, [r7, #12]
    LFS_TRACE("lfs_unmount -> %d", err);
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	f640 619a 	movw	r1, #3738	; 0xe9a
 8005276:	4805      	ldr	r0, [pc, #20]	; (800528c <lfs_unmount+0x38>)
 8005278:	f00a f95c 	bl	800f534 <iprintf>
    return err;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3710      	adds	r7, #16
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	08011864 	.word	0x08011864
 800528c:	08011884 	.word	0x08011884

08005290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005294:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005296:	e003      	b.n	80052a0 <LoopCopyDataInit>

08005298 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800529a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800529c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800529e:	3104      	adds	r1, #4

080052a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80052a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80052a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80052a8:	d3f6      	bcc.n	8005298 <CopyDataInit>
  ldr  r2, =_sbss
 80052aa:	4a0b      	ldr	r2, [pc, #44]	; (80052d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80052ac:	e002      	b.n	80052b4 <LoopFillZerobss>

080052ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80052ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80052b0:	f842 3b04 	str.w	r3, [r2], #4

080052b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80052b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80052b8:	d3f9      	bcc.n	80052ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80052ba:	f7ff ff79 	bl	80051b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052be:	f009 fd25 	bl	800ed0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80052c2:	f7fc fcfd 	bl	8001cc0 <main>
  bx  lr    
 80052c6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80052c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80052cc:	08013d0c 	.word	0x08013d0c
  ldr  r0, =_sdata
 80052d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80052d4:	2000013c 	.word	0x2000013c
  ldr  r2, =_sbss
 80052d8:	20000140 	.word	0x20000140
  ldr  r3, = _ebss
 80052dc:	20007cf4 	.word	0x20007cf4

080052e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80052e0:	e7fe      	b.n	80052e0 <ADC_IRQHandler>
	...

080052e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_Init+0x40>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a0d      	ldr	r2, [pc, #52]	; (8005324 <HAL_Init+0x40>)
 80052ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052f4:	4b0b      	ldr	r3, [pc, #44]	; (8005324 <HAL_Init+0x40>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_Init+0x40>)
 80052fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005300:	4b08      	ldr	r3, [pc, #32]	; (8005324 <HAL_Init+0x40>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a07      	ldr	r2, [pc, #28]	; (8005324 <HAL_Init+0x40>)
 8005306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800530a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800530c:	2003      	movs	r0, #3
 800530e:	f000 f8fc 	bl	800550a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005312:	200f      	movs	r0, #15
 8005314:	f7ff fdda 	bl	8004ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005318:	f7ff fafc 	bl	8004914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40023c00 	.word	0x40023c00

08005328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800532c:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_IncTick+0x20>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_IncTick+0x24>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4413      	add	r3, r2
 8005338:	4a04      	ldr	r2, [pc, #16]	; (800534c <HAL_IncTick+0x24>)
 800533a:	6013      	str	r3, [r2, #0]
}
 800533c:	bf00      	nop
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr
 8005346:	bf00      	nop
 8005348:	200000c0 	.word	0x200000c0
 800534c:	20002ed0 	.word	0x20002ed0

08005350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005350:	b480      	push	{r7}
 8005352:	af00      	add	r7, sp, #0
  return uwTick;
 8005354:	4b03      	ldr	r3, [pc, #12]	; (8005364 <HAL_GetTick+0x14>)
 8005356:	681b      	ldr	r3, [r3, #0]
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20002ed0 	.word	0x20002ed0

08005368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005370:	f7ff ffee 	bl	8005350 <HAL_GetTick>
 8005374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005380:	d005      	beq.n	800538e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_Delay+0x44>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	461a      	mov	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4413      	add	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800538e:	bf00      	nop
 8005390:	f7ff ffde 	bl	8005350 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d8f7      	bhi.n	8005390 <HAL_Delay+0x28>
  {
  }
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	200000c0 	.word	0x200000c0

080053b0 <__NVIC_SetPriorityGrouping>:
{
 80053b0:	b480      	push	{r7}
 80053b2:	b085      	sub	sp, #20
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053c0:	4b0c      	ldr	r3, [pc, #48]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053cc:	4013      	ands	r3, r2
 80053ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053e2:	4a04      	ldr	r2, [pc, #16]	; (80053f4 <__NVIC_SetPriorityGrouping+0x44>)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	60d3      	str	r3, [r2, #12]
}
 80053e8:	bf00      	nop
 80053ea:	3714      	adds	r7, #20
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	e000ed00 	.word	0xe000ed00

080053f8 <__NVIC_GetPriorityGrouping>:
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053fc:	4b04      	ldr	r3, [pc, #16]	; (8005410 <__NVIC_GetPriorityGrouping+0x18>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	0a1b      	lsrs	r3, r3, #8
 8005402:	f003 0307 	and.w	r3, r3, #7
}
 8005406:	4618      	mov	r0, r3
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	e000ed00 	.word	0xe000ed00

08005414 <__NVIC_EnableIRQ>:
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	4603      	mov	r3, r0
 800541c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800541e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005422:	2b00      	cmp	r3, #0
 8005424:	db0b      	blt.n	800543e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005426:	79fb      	ldrb	r3, [r7, #7]
 8005428:	f003 021f 	and.w	r2, r3, #31
 800542c:	4907      	ldr	r1, [pc, #28]	; (800544c <__NVIC_EnableIRQ+0x38>)
 800542e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	2001      	movs	r0, #1
 8005436:	fa00 f202 	lsl.w	r2, r0, r2
 800543a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e000e100 	.word	0xe000e100

08005450 <__NVIC_SetPriority>:
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	6039      	str	r1, [r7, #0]
 800545a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800545c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005460:	2b00      	cmp	r3, #0
 8005462:	db0a      	blt.n	800547a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	490c      	ldr	r1, [pc, #48]	; (800549c <__NVIC_SetPriority+0x4c>)
 800546a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800546e:	0112      	lsls	r2, r2, #4
 8005470:	b2d2      	uxtb	r2, r2
 8005472:	440b      	add	r3, r1
 8005474:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005478:	e00a      	b.n	8005490 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	b2da      	uxtb	r2, r3
 800547e:	4908      	ldr	r1, [pc, #32]	; (80054a0 <__NVIC_SetPriority+0x50>)
 8005480:	79fb      	ldrb	r3, [r7, #7]
 8005482:	f003 030f 	and.w	r3, r3, #15
 8005486:	3b04      	subs	r3, #4
 8005488:	0112      	lsls	r2, r2, #4
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	440b      	add	r3, r1
 800548e:	761a      	strb	r2, [r3, #24]
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000e100 	.word	0xe000e100
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <NVIC_EncodePriority>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 0307 	and.w	r3, r3, #7
 80054b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f1c3 0307 	rsb	r3, r3, #7
 80054be:	2b04      	cmp	r3, #4
 80054c0:	bf28      	it	cs
 80054c2:	2304      	movcs	r3, #4
 80054c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	3304      	adds	r3, #4
 80054ca:	2b06      	cmp	r3, #6
 80054cc:	d902      	bls.n	80054d4 <NVIC_EncodePriority+0x30>
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3b03      	subs	r3, #3
 80054d2:	e000      	b.n	80054d6 <NVIC_EncodePriority+0x32>
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	401a      	ands	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	fa01 f303 	lsl.w	r3, r1, r3
 80054f6:	43d9      	mvns	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054fc:	4313      	orrs	r3, r2
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3724      	adds	r7, #36	; 0x24
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff ff4c 	bl	80053b0 <__NVIC_SetPriorityGrouping>
}
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005532:	f7ff ff61 	bl	80053f8 <__NVIC_GetPriorityGrouping>
 8005536:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	6978      	ldr	r0, [r7, #20]
 800553e:	f7ff ffb1 	bl	80054a4 <NVIC_EncodePriority>
 8005542:	4602      	mov	r2, r0
 8005544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005548:	4611      	mov	r1, r2
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff ff80 	bl	8005450 <__NVIC_SetPriority>
}
 8005550:	bf00      	nop
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff ff54 	bl	8005414 <__NVIC_EnableIRQ>
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005580:	f7ff fee6 	bl	8005350 <HAL_GetTick>
 8005584:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e099      	b.n	80056c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0201 	bic.w	r2, r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055b0:	e00f      	b.n	80055d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055b2:	f7ff fecd 	bl	8005350 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d908      	bls.n	80055d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2203      	movs	r2, #3
 80055ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e078      	b.n	80056c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e8      	bne.n	80055b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4b38      	ldr	r3, [pc, #224]	; (80056cc <HAL_DMA_Init+0x158>)
 80055ec:	4013      	ands	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80055fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800560a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005616:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2b04      	cmp	r3, #4
 800562a:	d107      	bne.n	800563c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005634:	4313      	orrs	r3, r2
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	4313      	orrs	r3, r2
 800563a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005662:	2b04      	cmp	r3, #4
 8005664:	d117      	bne.n	8005696 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00e      	beq.n	8005696 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb0f 	bl	8005c9c <DMA_CheckFifoParam>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d008      	beq.n	8005696 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005692:	2301      	movs	r3, #1
 8005694:	e016      	b.n	80056c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fac6 	bl	8005c30 <DMA_CalcBaseAndBitshift>
 80056a4:	4603      	mov	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056ac:	223f      	movs	r2, #63	; 0x3f
 80056ae:	409a      	lsls	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3718      	adds	r7, #24
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	f010803f 	.word	0xf010803f

080056d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_DMA_Start_IT+0x26>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e040      	b.n	8005778 <HAL_DMA_Start_IT+0xa8>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d12f      	bne.n	800576a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fa58 	bl	8005bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	223f      	movs	r2, #63	; 0x3f
 800572a:	409a      	lsls	r2, r3
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0216 	orr.w	r2, r2, #22
 800573e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d007      	beq.n	8005758 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f042 0208 	orr.w	r2, r2, #8
 8005756:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f042 0201 	orr.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	e005      	b.n	8005776 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005772:	2302      	movs	r3, #2
 8005774:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800578e:	f7ff fddf 	bl	8005350 <HAL_GetTick>
 8005792:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d008      	beq.n	80057b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e052      	b.n	8005858 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f022 0216 	bic.w	r2, r2, #22
 80057c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d103      	bne.n	80057e2 <HAL_DMA_Abort+0x62>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d007      	beq.n	80057f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0208 	bic.w	r2, r2, #8
 80057f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f022 0201 	bic.w	r2, r2, #1
 8005800:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005802:	e013      	b.n	800582c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005804:	f7ff fda4 	bl	8005350 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b05      	cmp	r3, #5
 8005810:	d90c      	bls.n	800582c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2203      	movs	r2, #3
 800581c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e015      	b.n	8005858 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1e4      	bne.n	8005804 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583e:	223f      	movs	r2, #63	; 0x3f
 8005840:	409a      	lsls	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b02      	cmp	r3, #2
 8005872:	d004      	beq.n	800587e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2280      	movs	r2, #128	; 0x80
 8005878:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e00c      	b.n	8005898 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2205      	movs	r2, #5
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0201 	bic.w	r2, r2, #1
 8005894:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058b0:	4b8e      	ldr	r3, [pc, #568]	; (8005aec <HAL_DMA_IRQHandler+0x248>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a8e      	ldr	r2, [pc, #568]	; (8005af0 <HAL_DMA_IRQHandler+0x24c>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	0a9b      	lsrs	r3, r3, #10
 80058bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ce:	2208      	movs	r2, #8
 80058d0:	409a      	lsls	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4013      	ands	r3, r2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01a      	beq.n	8005910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0204 	bic.w	r2, r2, #4
 80058f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fc:	2208      	movs	r2, #8
 80058fe:	409a      	lsls	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005908:	f043 0201 	orr.w	r2, r3, #1
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005914:	2201      	movs	r2, #1
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00b      	beq.n	8005946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005932:	2201      	movs	r2, #1
 8005934:	409a      	lsls	r2, r3
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	f043 0202 	orr.w	r2, r3, #2
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	2204      	movs	r2, #4
 800594c:	409a      	lsls	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4013      	ands	r3, r2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d012      	beq.n	800597c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005968:	2204      	movs	r2, #4
 800596a:	409a      	lsls	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005980:	2210      	movs	r2, #16
 8005982:	409a      	lsls	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d043      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0308 	and.w	r3, r3, #8
 8005996:	2b00      	cmp	r3, #0
 8005998:	d03c      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599e:	2210      	movs	r2, #16
 80059a0:	409a      	lsls	r2, r3
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d018      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d108      	bne.n	80059d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d024      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
 80059d2:	e01f      	b.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01b      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	4798      	blx	r3
 80059e4:	e016      	b.n	8005a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d107      	bne.n	8005a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f022 0208 	bic.w	r2, r2, #8
 8005a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d003      	beq.n	8005a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a18:	2220      	movs	r2, #32
 8005a1a:	409a      	lsls	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 808f 	beq.w	8005b44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8087 	beq.w	8005b44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	409a      	lsls	r2, r3
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b05      	cmp	r3, #5
 8005a4c:	d136      	bne.n	8005abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0216 	bic.w	r2, r2, #22
 8005a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695a      	ldr	r2, [r3, #20]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d103      	bne.n	8005a7e <HAL_DMA_IRQHandler+0x1da>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d007      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0208 	bic.w	r2, r2, #8
 8005a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a92:	223f      	movs	r2, #63	; 0x3f
 8005a94:	409a      	lsls	r2, r3
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d07e      	beq.n	8005bb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	4798      	blx	r3
        }
        return;
 8005aba:	e079      	b.n	8005bb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d01d      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10d      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d031      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	4798      	blx	r3
 8005ae8:	e02c      	b.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
 8005aea:	bf00      	nop
 8005aec:	200000b8 	.word	0x200000b8
 8005af0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d023      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	e01e      	b.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10f      	bne.n	8005b34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0210 	bic.w	r2, r2, #16
 8005b22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d032      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2205      	movs	r2, #5
 8005b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0201 	bic.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d307      	bcc.n	8005b8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f2      	bne.n	8005b70 <HAL_DMA_IRQHandler+0x2cc>
 8005b8a:	e000      	b.n	8005b8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005b8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d005      	beq.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
 8005bae:	e000      	b.n	8005bb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005bb0:	bf00      	nop
    }
  }
}
 8005bb2:	3718      	adds	r7, #24
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bc6:	b2db      	uxtb	r3, r3
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
 8005be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	2b40      	cmp	r3, #64	; 0x40
 8005c00:	d108      	bne.n	8005c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c12:	e007      	b.n	8005c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	60da      	str	r2, [r3, #12]
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	3b10      	subs	r3, #16
 8005c40:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <DMA_CalcBaseAndBitshift+0x64>)
 8005c42:	fba2 2303 	umull	r2, r3, r2, r3
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c4a:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <DMA_CalcBaseAndBitshift+0x68>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b03      	cmp	r3, #3
 8005c5c:	d909      	bls.n	8005c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	1d1a      	adds	r2, r3, #4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8005c70:	e007      	b.n	8005c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005c7a:	f023 0303 	bic.w	r3, r3, #3
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	aaaaaaab 	.word	0xaaaaaaab
 8005c98:	08013b5c 	.word	0x08013b5c

08005c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d11f      	bne.n	8005cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d856      	bhi.n	8005d6a <DMA_CheckFifoParam+0xce>
 8005cbc:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <DMA_CheckFifoParam+0x28>)
 8005cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc2:	bf00      	nop
 8005cc4:	08005cd5 	.word	0x08005cd5
 8005cc8:	08005ce7 	.word	0x08005ce7
 8005ccc:	08005cd5 	.word	0x08005cd5
 8005cd0:	08005d6b 	.word	0x08005d6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d046      	beq.n	8005d6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ce4:	e043      	b.n	8005d6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cee:	d140      	bne.n	8005d72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cf4:	e03d      	b.n	8005d72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cfe:	d121      	bne.n	8005d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	d837      	bhi.n	8005d76 <DMA_CheckFifoParam+0xda>
 8005d06:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <DMA_CheckFifoParam+0x70>)
 8005d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0c:	08005d1d 	.word	0x08005d1d
 8005d10:	08005d23 	.word	0x08005d23
 8005d14:	08005d1d 	.word	0x08005d1d
 8005d18:	08005d35 	.word	0x08005d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d20:	e030      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d025      	beq.n	8005d7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d32:	e022      	b.n	8005d7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005d3c:	d11f      	bne.n	8005d7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d42:	e01c      	b.n	8005d7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d903      	bls.n	8005d52 <DMA_CheckFifoParam+0xb6>
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d003      	beq.n	8005d58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d50:	e018      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	73fb      	strb	r3, [r7, #15]
      break;
 8005d56:	e015      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e00b      	b.n	8005d82 <DMA_CheckFifoParam+0xe6>
      break;
 8005d6a:	bf00      	nop
 8005d6c:	e00a      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d6e:	bf00      	nop
 8005d70:	e008      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d72:	bf00      	nop
 8005d74:	e006      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d76:	bf00      	nop
 8005d78:	e004      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d7a:	bf00      	nop
 8005d7c:	e002      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d7e:	bf00      	nop
 8005d80:	e000      	b.n	8005d84 <DMA_CheckFifoParam+0xe8>
      break;
 8005d82:	bf00      	nop
    }
  } 
  
  return status; 
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop

08005d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e16b      	b.n	8006088 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f040 815a 	bne.w	8006082 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d005      	beq.n	8005de6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d130      	bne.n	8005e48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	005b      	lsls	r3, r3, #1
 8005df0:	2203      	movs	r2, #3
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	69ba      	ldr	r2, [r7, #24]
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4013      	ands	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	091b      	lsrs	r3, r3, #4
 8005e32:	f003 0201 	and.w	r2, r3, #1
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f003 0303 	and.w	r3, r3, #3
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d017      	beq.n	8005e84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	2203      	movs	r2, #3
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43db      	mvns	r3, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	69ba      	ldr	r2, [r7, #24]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d123      	bne.n	8005ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	220f      	movs	r2, #15
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	08da      	lsrs	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0203 	and.w	r2, r3, #3
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80b4 	beq.w	8006082 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b60      	ldr	r3, [pc, #384]	; (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	4a5f      	ldr	r2, [pc, #380]	; (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2a:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f36:	4a5b      	ldr	r2, [pc, #364]	; (80060a4 <HAL_GPIO_Init+0x310>)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a52      	ldr	r2, [pc, #328]	; (80060a8 <HAL_GPIO_Init+0x314>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d02b      	beq.n	8005fba <HAL_GPIO_Init+0x226>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a51      	ldr	r2, [pc, #324]	; (80060ac <HAL_GPIO_Init+0x318>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d025      	beq.n	8005fb6 <HAL_GPIO_Init+0x222>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a50      	ldr	r2, [pc, #320]	; (80060b0 <HAL_GPIO_Init+0x31c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d01f      	beq.n	8005fb2 <HAL_GPIO_Init+0x21e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4f      	ldr	r2, [pc, #316]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d019      	beq.n	8005fae <HAL_GPIO_Init+0x21a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a4e      	ldr	r2, [pc, #312]	; (80060b8 <HAL_GPIO_Init+0x324>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d013      	beq.n	8005faa <HAL_GPIO_Init+0x216>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a4d      	ldr	r2, [pc, #308]	; (80060bc <HAL_GPIO_Init+0x328>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00d      	beq.n	8005fa6 <HAL_GPIO_Init+0x212>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a4c      	ldr	r2, [pc, #304]	; (80060c0 <HAL_GPIO_Init+0x32c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <HAL_GPIO_Init+0x20e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a4b      	ldr	r2, [pc, #300]	; (80060c4 <HAL_GPIO_Init+0x330>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d101      	bne.n	8005f9e <HAL_GPIO_Init+0x20a>
 8005f9a:	2307      	movs	r3, #7
 8005f9c:	e00e      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	e00c      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fa2:	2306      	movs	r3, #6
 8005fa4:	e00a      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fa6:	2305      	movs	r3, #5
 8005fa8:	e008      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005faa:	2304      	movs	r3, #4
 8005fac:	e006      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e004      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fb2:	2302      	movs	r3, #2
 8005fb4:	e002      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e000      	b.n	8005fbc <HAL_GPIO_Init+0x228>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	f002 0203 	and.w	r2, r2, #3
 8005fc2:	0092      	lsls	r2, r2, #2
 8005fc4:	4093      	lsls	r3, r2
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fcc:	4935      	ldr	r1, [pc, #212]	; (80060a4 <HAL_GPIO_Init+0x310>)
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	089b      	lsrs	r3, r3, #2
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	69ba      	ldr	r2, [r7, #24]
 8005fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005fda:	4b3b      	ldr	r3, [pc, #236]	; (80060c8 <HAL_GPIO_Init+0x334>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	43db      	mvns	r3, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4013      	ands	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ffe:	4a32      	ldr	r2, [pc, #200]	; (80060c8 <HAL_GPIO_Init+0x334>)
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006004:	4b30      	ldr	r3, [pc, #192]	; (80060c8 <HAL_GPIO_Init+0x334>)
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	43db      	mvns	r3, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4013      	ands	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d003      	beq.n	8006028 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4313      	orrs	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006028:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <HAL_GPIO_Init+0x334>)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800602e:	4b26      	ldr	r3, [pc, #152]	; (80060c8 <HAL_GPIO_Init+0x334>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	43db      	mvns	r3, r3
 8006038:	69ba      	ldr	r2, [r7, #24]
 800603a:	4013      	ands	r3, r2
 800603c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006052:	4a1d      	ldr	r2, [pc, #116]	; (80060c8 <HAL_GPIO_Init+0x334>)
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_GPIO_Init+0x334>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	43db      	mvns	r3, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d003      	beq.n	800607c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800607c:	4a12      	ldr	r2, [pc, #72]	; (80060c8 <HAL_GPIO_Init+0x334>)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	f67f ae90 	bls.w	8005db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	3724      	adds	r7, #36	; 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	40023800 	.word	0x40023800
 80060a4:	40013800 	.word	0x40013800
 80060a8:	40020000 	.word	0x40020000
 80060ac:	40020400 	.word	0x40020400
 80060b0:	40020800 	.word	0x40020800
 80060b4:	40020c00 	.word	0x40020c00
 80060b8:	40021000 	.word	0x40021000
 80060bc:	40021400 	.word	0x40021400
 80060c0:	40021800 	.word	0x40021800
 80060c4:	40021c00 	.word	0x40021c00
 80060c8:	40013c00 	.word	0x40013c00

080060cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	807b      	strh	r3, [r7, #2]
 80060d8:	4613      	mov	r3, r2
 80060da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060dc:	787b      	ldrb	r3, [r7, #1]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060e2:	887a      	ldrh	r2, [r7, #2]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060e8:	e003      	b.n	80060f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060ea:	887b      	ldrh	r3, [r7, #2]
 80060ec:	041a      	lsls	r2, r3, #16
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	619a      	str	r2, [r3, #24]
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060fe:	b480      	push	{r7}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006110:	887a      	ldrh	r2, [r7, #2]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4013      	ands	r3, r2
 8006116:	041a      	lsls	r2, r3, #16
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	43d9      	mvns	r1, r3
 800611c:	887b      	ldrh	r3, [r7, #2]
 800611e:	400b      	ands	r3, r1
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	619a      	str	r2, [r3, #24]
}
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e12b      	b.n	800639e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fe fc16 	bl	800498c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	; 0x24
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 0201 	bic.w	r2, r2, #1
 8006176:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006186:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006196:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006198:	f002 fbb0 	bl	80088fc <HAL_RCC_GetPCLK1Freq>
 800619c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	4a81      	ldr	r2, [pc, #516]	; (80063a8 <HAL_I2C_Init+0x274>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d807      	bhi.n	80061b8 <HAL_I2C_Init+0x84>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a80      	ldr	r2, [pc, #512]	; (80063ac <HAL_I2C_Init+0x278>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	bf94      	ite	ls
 80061b0:	2301      	movls	r3, #1
 80061b2:	2300      	movhi	r3, #0
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	e006      	b.n	80061c6 <HAL_I2C_Init+0x92>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4a7d      	ldr	r2, [pc, #500]	; (80063b0 <HAL_I2C_Init+0x27c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf94      	ite	ls
 80061c0:	2301      	movls	r3, #1
 80061c2:	2300      	movhi	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e0e7      	b.n	800639e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a78      	ldr	r2, [pc, #480]	; (80063b4 <HAL_I2C_Init+0x280>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0c9b      	lsrs	r3, r3, #18
 80061d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a6a      	ldr	r2, [pc, #424]	; (80063a8 <HAL_I2C_Init+0x274>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d802      	bhi.n	8006208 <HAL_I2C_Init+0xd4>
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3301      	adds	r3, #1
 8006206:	e009      	b.n	800621c <HAL_I2C_Init+0xe8>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800620e:	fb02 f303 	mul.w	r3, r2, r3
 8006212:	4a69      	ldr	r2, [pc, #420]	; (80063b8 <HAL_I2C_Init+0x284>)
 8006214:	fba2 2303 	umull	r2, r3, r2, r3
 8006218:	099b      	lsrs	r3, r3, #6
 800621a:	3301      	adds	r3, #1
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	430b      	orrs	r3, r1
 8006222:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800622e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	495c      	ldr	r1, [pc, #368]	; (80063a8 <HAL_I2C_Init+0x274>)
 8006238:	428b      	cmp	r3, r1
 800623a:	d819      	bhi.n	8006270 <HAL_I2C_Init+0x13c>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1e59      	subs	r1, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	005b      	lsls	r3, r3, #1
 8006246:	fbb1 f3f3 	udiv	r3, r1, r3
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006250:	400b      	ands	r3, r1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_I2C_Init+0x138>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	1e59      	subs	r1, r3, #1
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	fbb1 f3f3 	udiv	r3, r1, r3
 8006264:	3301      	adds	r3, #1
 8006266:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800626a:	e051      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 800626c:	2304      	movs	r3, #4
 800626e:	e04f      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d111      	bne.n	800629c <HAL_I2C_Init+0x168>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	1e58      	subs	r0, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	440b      	add	r3, r1
 8006286:	fbb0 f3f3 	udiv	r3, r0, r3
 800628a:	3301      	adds	r3, #1
 800628c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf0c      	ite	eq
 8006294:	2301      	moveq	r3, #1
 8006296:	2300      	movne	r3, #0
 8006298:	b2db      	uxtb	r3, r3
 800629a:	e012      	b.n	80062c2 <HAL_I2C_Init+0x18e>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1e58      	subs	r0, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6859      	ldr	r1, [r3, #4]
 80062a4:	460b      	mov	r3, r1
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	0099      	lsls	r1, r3, #2
 80062ac:	440b      	add	r3, r1
 80062ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b2:	3301      	adds	r3, #1
 80062b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf0c      	ite	eq
 80062bc:	2301      	moveq	r3, #1
 80062be:	2300      	movne	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_I2C_Init+0x196>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e022      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10e      	bne.n	80062f0 <HAL_I2C_Init+0x1bc>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1e58      	subs	r0, r3, #1
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6859      	ldr	r1, [r3, #4]
 80062da:	460b      	mov	r3, r1
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	440b      	add	r3, r1
 80062e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062e4:	3301      	adds	r3, #1
 80062e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062ee:	e00f      	b.n	8006310 <HAL_I2C_Init+0x1dc>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	1e58      	subs	r0, r3, #1
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6859      	ldr	r1, [r3, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	440b      	add	r3, r1
 80062fe:	0099      	lsls	r1, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	fbb0 f3f3 	udiv	r3, r0, r3
 8006306:	3301      	adds	r3, #1
 8006308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800630c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	6809      	ldr	r1, [r1, #0]
 8006314:	4313      	orrs	r3, r2
 8006316:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800633e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6911      	ldr	r1, [r2, #16]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	68d2      	ldr	r2, [r2, #12]
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6812      	ldr	r2, [r2, #0]
 8006350:	430b      	orrs	r3, r1
 8006352:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	000186a0 	.word	0x000186a0
 80063ac:	001e847f 	.word	0x001e847f
 80063b0:	003d08ff 	.word	0x003d08ff
 80063b4:	431bde83 	.word	0x431bde83
 80063b8:	10624dd3 	.word	0x10624dd3

080063bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d003      	beq.n	80063f4 <HAL_I2C_EV_IRQHandler+0x38>
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	f040 80c1 	bne.w	8006576 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006404:	69fb      	ldr	r3, [r7, #28]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10d      	bne.n	800642a <HAL_I2C_EV_IRQHandler+0x6e>
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006414:	d003      	beq.n	800641e <HAL_I2C_EV_IRQHandler+0x62>
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800641c:	d101      	bne.n	8006422 <HAL_I2C_EV_IRQHandler+0x66>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <HAL_I2C_EV_IRQHandler+0x68>
 8006422:	2300      	movs	r3, #0
 8006424:	2b01      	cmp	r3, #1
 8006426:	f000 8132 	beq.w	800668e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00c      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0x92>
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	0a5b      	lsrs	r3, r3, #9
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f001 fc7b 	bl	8007d3c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fd83 	bl	8006f52 <I2C_Master_SB>
 800644c:	e092      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	08db      	lsrs	r3, r3, #3
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b00      	cmp	r3, #0
 8006458:	d009      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0xb2>
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	0a5b      	lsrs	r3, r3, #9
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fdf9 	bl	800705e <I2C_Master_ADD10>
 800646c:	e082      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d009      	beq.n	800648e <HAL_I2C_EV_IRQHandler+0xd2>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	0a5b      	lsrs	r3, r3, #9
 800647e:	f003 0301 	and.w	r3, r3, #1
 8006482:	2b00      	cmp	r3, #0
 8006484:	d003      	beq.n	800648e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fe13 	bl	80070b2 <I2C_Master_ADDR>
 800648c:	e072      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	089b      	lsrs	r3, r3, #2
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	d03b      	beq.n	8006512 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a8:	f000 80f3 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00f      	beq.n	80064d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	0a9b      	lsrs	r3, r3, #10
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d009      	beq.n	80064d8 <HAL_I2C_EV_IRQHandler+0x11c>
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	089b      	lsrs	r3, r3, #2
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 f9f3 	bl	80068bc <I2C_MasterTransmit_TXE>
 80064d6:	e04d      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	089b      	lsrs	r3, r3, #2
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f000 80d6 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	0a5b      	lsrs	r3, r3, #9
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	f000 80cf 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b21      	cmp	r3, #33	; 0x21
 80064f8:	d103      	bne.n	8006502 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa7a 	bl	80069f4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006500:	e0c7      	b.n	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	f040 80c4 	bne.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fae8 	bl	8006ae0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006510:	e0bf      	b.n	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006520:	f000 80b7 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	099b      	lsrs	r3, r3, #6
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00f      	beq.n	8006550 <HAL_I2C_EV_IRQHandler+0x194>
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	0a9b      	lsrs	r3, r3, #10
 8006534:	f003 0301 	and.w	r3, r3, #1
 8006538:	2b00      	cmp	r3, #0
 800653a:	d009      	beq.n	8006550 <HAL_I2C_EV_IRQHandler+0x194>
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	089b      	lsrs	r3, r3, #2
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d103      	bne.n	8006550 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 fb5d 	bl	8006c08 <I2C_MasterReceive_RXNE>
 800654e:	e011      	b.n	8006574 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	089b      	lsrs	r3, r3, #2
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	2b00      	cmp	r3, #0
 800655a:	f000 809a 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	0a5b      	lsrs	r3, r3, #9
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 8093 	beq.w	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fc06 	bl	8006d7e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006572:	e08e      	b.n	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006574:	e08d      	b.n	8006692 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	61fb      	str	r3, [r7, #28]
 8006586:	e007      	b.n	8006598 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	f003 0301 	and.w	r3, r3, #1
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <HAL_I2C_EV_IRQHandler+0x20e>
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	0a5b      	lsrs	r3, r3, #9
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 ffc4 	bl	8007550 <I2C_Slave_ADDR>
 80065c8:	e066      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	091b      	lsrs	r3, r3, #4
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d009      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x22e>
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	0a5b      	lsrs	r3, r3, #9
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 fffe 	bl	80075e4 <I2C_Slave_STOPF>
 80065e8:	e056      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
 80065ec:	2b21      	cmp	r3, #33	; 0x21
 80065ee:	d002      	beq.n	80065f6 <HAL_I2C_EV_IRQHandler+0x23a>
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	2b29      	cmp	r3, #41	; 0x29
 80065f4:	d125      	bne.n	8006642 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	09db      	lsrs	r3, r3, #7
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00f      	beq.n	8006622 <HAL_I2C_EV_IRQHandler+0x266>
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	0a9b      	lsrs	r3, r3, #10
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <HAL_I2C_EV_IRQHandler+0x266>
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	089b      	lsrs	r3, r3, #2
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d103      	bne.n	8006622 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 feda 	bl	80073d4 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006620:	e039      	b.n	8006696 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	2b00      	cmp	r3, #0
 800662c:	d033      	beq.n	8006696 <HAL_I2C_EV_IRQHandler+0x2da>
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	0a5b      	lsrs	r3, r3, #9
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02d      	beq.n	8006696 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 ff07 	bl	800744e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006640:	e029      	b.n	8006696 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006642:	69fb      	ldr	r3, [r7, #28]
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00f      	beq.n	800666e <HAL_I2C_EV_IRQHandler+0x2b2>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	0a9b      	lsrs	r3, r3, #10
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d009      	beq.n	800666e <HAL_I2C_EV_IRQHandler+0x2b2>
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	089b      	lsrs	r3, r3, #2
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 ff12 	bl	8007490 <I2C_SlaveReceive_RXNE>
 800666c:	e014      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	089b      	lsrs	r3, r3, #2
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00e      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	0a5b      	lsrs	r3, r3, #9
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 ff40 	bl	800750c <I2C_SlaveReceive_BTF>
 800668c:	e004      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800668e:	bf00      	nop
 8006690:	e002      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006692:	bf00      	nop
 8006694:	e000      	b.n	8006698 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006696:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b08a      	sub	sp, #40	; 0x28
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066c0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	0a1b      	lsrs	r3, r3, #8
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00e      	beq.n	80066ec <HAL_I2C_ER_IRQHandler+0x4e>
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	f043 0301 	orr.w	r3, r3, #1
 80066e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066ea:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	0a5b      	lsrs	r3, r3, #9
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00e      	beq.n	8006716 <HAL_I2C_ER_IRQHandler+0x78>
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b00      	cmp	r3, #0
 8006702:	d008      	beq.n	8006716 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006706:	f043 0302 	orr.w	r3, r3, #2
 800670a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006714:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	0a9b      	lsrs	r3, r3, #10
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d03f      	beq.n	80067a2 <HAL_I2C_ER_IRQHandler+0x104>
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	0a1b      	lsrs	r3, r3, #8
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d039      	beq.n	80067a2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800672e:	7efb      	ldrb	r3, [r7, #27]
 8006730:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006736:	b29b      	uxth	r3, r3
 8006738:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006740:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006748:	7ebb      	ldrb	r3, [r7, #26]
 800674a:	2b20      	cmp	r3, #32
 800674c:	d112      	bne.n	8006774 <HAL_I2C_ER_IRQHandler+0xd6>
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <HAL_I2C_ER_IRQHandler+0xd6>
 8006754:	7cfb      	ldrb	r3, [r7, #19]
 8006756:	2b21      	cmp	r3, #33	; 0x21
 8006758:	d008      	beq.n	800676c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	2b29      	cmp	r3, #41	; 0x29
 800675e:	d005      	beq.n	800676c <HAL_I2C_ER_IRQHandler+0xce>
 8006760:	7cfb      	ldrb	r3, [r7, #19]
 8006762:	2b28      	cmp	r3, #40	; 0x28
 8006764:	d106      	bne.n	8006774 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2b21      	cmp	r3, #33	; 0x21
 800676a:	d103      	bne.n	8006774 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f001 f869 	bl	8007844 <I2C_Slave_AF>
 8006772:	e016      	b.n	80067a2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800677c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	f043 0304 	orr.w	r3, r3, #4
 8006784:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006786:	7efb      	ldrb	r3, [r7, #27]
 8006788:	2b10      	cmp	r3, #16
 800678a:	d002      	beq.n	8006792 <HAL_I2C_ER_IRQHandler+0xf4>
 800678c:	7efb      	ldrb	r3, [r7, #27]
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d107      	bne.n	80067a2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	0adb      	lsrs	r3, r3, #11
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00e      	beq.n	80067cc <HAL_I2C_ER_IRQHandler+0x12e>
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	0a1b      	lsrs	r3, r3, #8
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d008      	beq.n	80067cc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80067ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067bc:	f043 0308 	orr.w	r3, r3, #8
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80067ca:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d008      	beq.n	80067e4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d8:	431a      	orrs	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f001 f8a0 	bl	8007924 <I2C_ITError>
  }
}
 80067e4:	bf00      	nop
 80067e6:	3728      	adds	r7, #40	; 0x28
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	460b      	mov	r3, r1
 8006846:	70fb      	strb	r3, [r7, #3]
 8006848:	4613      	mov	r3, r2
 800684a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d150      	bne.n	8006984 <I2C_MasterTransmit_TXE+0xc8>
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b21      	cmp	r3, #33	; 0x21
 80068e6:	d14d      	bne.n	8006984 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d01d      	beq.n	800692a <I2C_MasterTransmit_TXE+0x6e>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	d01a      	beq.n	800692a <I2C_MasterTransmit_TXE+0x6e>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80068fa:	d016      	beq.n	800692a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800690a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2211      	movs	r2, #17
 8006910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7ff ff62 	bl	80067ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006928:	e060      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006938:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006948:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d107      	bne.n	8006974 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff7d 	bl	800686c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006972:	e03b      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff ff35 	bl	80067ec <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006982:	e033      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006984:	7bfb      	ldrb	r3, [r7, #15]
 8006986:	2b21      	cmp	r3, #33	; 0x21
 8006988:	d005      	beq.n	8006996 <I2C_MasterTransmit_TXE+0xda>
 800698a:	7bbb      	ldrb	r3, [r7, #14]
 800698c:	2b40      	cmp	r3, #64	; 0x40
 800698e:	d12d      	bne.n	80069ec <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006990:	7bfb      	ldrb	r3, [r7, #15]
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d12a      	bne.n	80069ec <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699a:	b29b      	uxth	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d108      	bne.n	80069b2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685a      	ldr	r2, [r3, #4]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ae:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80069b0:	e01c      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d103      	bne.n	80069c6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f88e 	bl	8006ae0 <I2C_MemoryTransmit_TXE_BTF>
}
 80069c4:	e012      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	3b01      	subs	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80069ea:	e7ff      	b.n	80069ec <I2C_MasterTransmit_TXE+0x130>
 80069ec:	bf00      	nop
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a00:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b21      	cmp	r3, #33	; 0x21
 8006a0c:	d164      	bne.n	8006ad8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	781a      	ldrb	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006a3c:	e04c      	b.n	8006ad8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d01d      	beq.n	8006a80 <I2C_MasterTransmit_BTF+0x8c>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2b20      	cmp	r3, #32
 8006a48:	d01a      	beq.n	8006a80 <I2C_MasterTransmit_BTF+0x8c>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a50:	d016      	beq.n	8006a80 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685a      	ldr	r2, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a60:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2211      	movs	r2, #17
 8006a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2220      	movs	r2, #32
 8006a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff feb7 	bl	80067ec <HAL_I2C_MasterTxCpltCallback>
}
 8006a7e:	e02b      	b.n	8006ad8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	685a      	ldr	r2, [r3, #4]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006a8e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a9e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b40      	cmp	r3, #64	; 0x40
 8006ab8:	d107      	bne.n	8006aca <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff fed2 	bl	800686c <HAL_I2C_MemTxCpltCallback>
}
 8006ac8:	e006      	b.n	8006ad8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe8a 	bl	80067ec <HAL_I2C_MasterTxCpltCallback>
}
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d11d      	bne.n	8006b34 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10b      	bne.n	8006b18 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b10:	1c9a      	adds	r2, r3, #2
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006b16:	e073      	b.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	121b      	asrs	r3, r3, #8
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b32:	e065      	b.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d10b      	bne.n	8006b54 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b52:	e055      	b.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d151      	bne.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b22      	cmp	r3, #34	; 0x22
 8006b60:	d10d      	bne.n	8006b7e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b70:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006b7c:	e040      	b.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d015      	beq.n	8006bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b21      	cmp	r3, #33	; 0x21
 8006b8c:	d112      	bne.n	8006bb4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b92:	781a      	ldrb	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006bb2:	e025      	b.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d120      	bne.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b21      	cmp	r3, #33	; 0x21
 8006bc2:	d11d      	bne.n	8006c00 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006bd2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006be2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f7ff fe36 	bl	800686c <HAL_I2C_MemTxCpltCallback>
}
 8006c00:	bf00      	nop
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b22      	cmp	r3, #34	; 0x22
 8006c1a:	f040 80ac 	bne.w	8006d76 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b03      	cmp	r3, #3
 8006c2a:	d921      	bls.n	8006c70 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	691a      	ldr	r2, [r3, #16]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	b2d2      	uxtb	r2, r2
 8006c38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	f040 808c 	bne.w	8006d76 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c6c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006c6e:	e082      	b.n	8006d76 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d075      	beq.n	8006d64 <I2C_MasterReceive_RXNE+0x15c>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d002      	beq.n	8006c84 <I2C_MasterReceive_RXNE+0x7c>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d16f      	bne.n	8006d64 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f827 	bl	8007cd8 <I2C_WaitOnSTOPRequestThroughIT>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d142      	bne.n	8006d16 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006cae:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	2b40      	cmp	r3, #64	; 0x40
 8006ce8:	d10a      	bne.n	8006d00 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fdc1 	bl	8006880 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006cfe:	e03a      	b.n	8006d76 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2212      	movs	r2, #18
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff fd76 	bl	8006800 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d14:	e02f      	b.n	8006d76 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d24:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	691a      	ldr	r2, [r3, #16]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7ff fd99 	bl	8006894 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006d62:	e008      	b.n	8006d76 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d72:	605a      	str	r2, [r3, #4]
}
 8006d74:	e7ff      	b.n	8006d76 <I2C_MasterReceive_RXNE+0x16e>
 8006d76:	bf00      	nop
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d11b      	bne.n	8006dce <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006da4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006dcc:	e0bd      	b.n	8006f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d129      	bne.n	8006e2c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b04      	cmp	r3, #4
 8006dec:	d00a      	beq.n	8006e04 <I2C_MasterReceive_BTF+0x86>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d007      	beq.n	8006e04 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e02:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	1c5a      	adds	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006e2a:	e08e      	b.n	8006f4a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d176      	bne.n	8006f24 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d002      	beq.n	8006e42 <I2C_MasterReceive_BTF+0xc4>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2b10      	cmp	r3, #16
 8006e40:	d108      	bne.n	8006e54 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e019      	b.n	8006e88 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b04      	cmp	r3, #4
 8006e58:	d002      	beq.n	8006e60 <I2C_MasterReceive_BTF+0xe2>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b02      	cmp	r3, #2
 8006e5e:	d108      	bne.n	8006e72 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	e00a      	b.n	8006e88 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b10      	cmp	r3, #16
 8006e76:	d007      	beq.n	8006e88 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e86:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	685a      	ldr	r2, [r3, #4]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ee2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d10a      	bne.n	8006f0e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff fcba 	bl	8006880 <HAL_I2C_MemRxCpltCallback>
}
 8006f0c:	e01d      	b.n	8006f4a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2212      	movs	r2, #18
 8006f1a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fc6f 	bl	8006800 <HAL_I2C_MasterRxCpltCallback>
}
 8006f22:	e012      	b.n	8006f4a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691a      	ldr	r2, [r3, #16]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	b2d2      	uxtb	r2, r2
 8006f30:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b083      	sub	sp, #12
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d117      	bne.n	8006f96 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006f7e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006f80:	e067      	b.n	8007052 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	f043 0301 	orr.w	r3, r3, #1
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	611a      	str	r2, [r3, #16]
}
 8006f94:	e05d      	b.n	8007052 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9e:	d133      	bne.n	8007008 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b21      	cmp	r3, #33	; 0x21
 8006faa:	d109      	bne.n	8006fc0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006fbc:	611a      	str	r2, [r3, #16]
 8006fbe:	e008      	b.n	8006fd2 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	f043 0301 	orr.w	r3, r3, #1
 8006fca:	b2da      	uxtb	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <I2C_Master_SB+0x92>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d108      	bne.n	8006ff6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d032      	beq.n	8007052 <I2C_Master_SB+0x100>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d02d      	beq.n	8007052 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007004:	605a      	str	r2, [r3, #4]
}
 8007006:	e024      	b.n	8007052 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	2b00      	cmp	r3, #0
 800700e:	d10e      	bne.n	800702e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007014:	b29b      	uxth	r3, r3
 8007016:	11db      	asrs	r3, r3, #7
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f003 0306 	and.w	r3, r3, #6
 800701e:	b2db      	uxtb	r3, r3
 8007020:	f063 030f 	orn	r3, r3, #15
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	611a      	str	r2, [r3, #16]
}
 800702c:	e011      	b.n	8007052 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007032:	2b01      	cmp	r3, #1
 8007034:	d10d      	bne.n	8007052 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800703a:	b29b      	uxth	r3, r3
 800703c:	11db      	asrs	r3, r3, #7
 800703e:	b2db      	uxtb	r3, r3
 8007040:	f003 0306 	and.w	r3, r3, #6
 8007044:	b2db      	uxtb	r3, r3
 8007046:	f063 030e 	orn	r3, r3, #14
 800704a:	b2da      	uxtb	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	611a      	str	r2, [r3, #16]
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	b2da      	uxtb	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <I2C_Master_ADD10+0x26>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d108      	bne.n	8007096 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00c      	beq.n	80070a6 <I2C_Master_ADD10+0x48>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070a4:	605a      	str	r2, [r3, #4]
  }
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b091      	sub	sp, #68	; 0x44
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ce:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b22      	cmp	r3, #34	; 0x22
 80070da:	f040 8169 	bne.w	80073b0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10f      	bne.n	8007106 <I2C_Master_ADDR+0x54>
 80070e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80070ea:	2b40      	cmp	r3, #64	; 0x40
 80070ec:	d10b      	bne.n	8007106 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ee:	2300      	movs	r3, #0
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	695b      	ldr	r3, [r3, #20]
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	699b      	ldr	r3, [r3, #24]
 8007100:	633b      	str	r3, [r7, #48]	; 0x30
 8007102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007104:	e160      	b.n	80073c8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800710a:	2b00      	cmp	r3, #0
 800710c:	d11d      	bne.n	800714a <I2C_Master_ADDR+0x98>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007116:	d118      	bne.n	800714a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007118:	2300      	movs	r3, #0
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800712c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800713c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	651a      	str	r2, [r3, #80]	; 0x50
 8007148:	e13e      	b.n	80073c8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d113      	bne.n	800717c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007154:	2300      	movs	r3, #0
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	62bb      	str	r3, [r7, #40]	; 0x28
 8007168:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	e115      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007180:	b29b      	uxth	r3, r3
 8007182:	2b01      	cmp	r3, #1
 8007184:	f040 808a 	bne.w	800729c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800718e:	d137      	bne.n	8007200 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800719e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ae:	d113      	bne.n	80071d8 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071be:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071c0:	2300      	movs	r3, #0
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	e0e7      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071d8:	2300      	movs	r3, #0
 80071da:	623b      	str	r3, [r7, #32]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	623b      	str	r3, [r7, #32]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699b      	ldr	r3, [r3, #24]
 80071ea:	623b      	str	r3, [r7, #32]
 80071ec:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	e0d3      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	2b08      	cmp	r3, #8
 8007204:	d02e      	beq.n	8007264 <I2C_Master_ADDR+0x1b2>
 8007206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007208:	2b20      	cmp	r3, #32
 800720a:	d02b      	beq.n	8007264 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	2b12      	cmp	r3, #18
 8007210:	d102      	bne.n	8007218 <I2C_Master_ADDR+0x166>
 8007212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007214:	2b01      	cmp	r3, #1
 8007216:	d125      	bne.n	8007264 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721a:	2b04      	cmp	r3, #4
 800721c:	d00e      	beq.n	800723c <I2C_Master_ADDR+0x18a>
 800721e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007220:	2b02      	cmp	r3, #2
 8007222:	d00b      	beq.n	800723c <I2C_Master_ADDR+0x18a>
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	2b10      	cmp	r3, #16
 8007228:	d008      	beq.n	800723c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e007      	b.n	800724c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800724a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	e0a1      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007272:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	61bb      	str	r3, [r7, #24]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e085      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d14d      	bne.n	8007342 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80072a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d016      	beq.n	80072da <I2C_Master_ADDR+0x228>
 80072ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d013      	beq.n	80072da <I2C_Master_ADDR+0x228>
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	2b10      	cmp	r3, #16
 80072b6:	d010      	beq.n	80072da <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e007      	b.n	80072ea <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072e8:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f8:	d117      	bne.n	800732a <I2C_Master_ADDR+0x278>
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007300:	d00b      	beq.n	800731a <I2C_Master_ADDR+0x268>
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b01      	cmp	r3, #1
 8007306:	d008      	beq.n	800731a <I2C_Master_ADDR+0x268>
 8007308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730a:	2b08      	cmp	r3, #8
 800730c:	d005      	beq.n	800731a <I2C_Master_ADDR+0x268>
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	2b10      	cmp	r3, #16
 8007312:	d002      	beq.n	800731a <I2C_Master_ADDR+0x268>
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	2b20      	cmp	r3, #32
 8007318:	d107      	bne.n	800732a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007328:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800732a:	2300      	movs	r3, #0
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	617b      	str	r3, [r7, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	e032      	b.n	80073a8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007350:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d117      	bne.n	8007392 <I2C_Master_ADDR+0x2e0>
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007368:	d00b      	beq.n	8007382 <I2C_Master_ADDR+0x2d0>
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	2b01      	cmp	r3, #1
 800736e:	d008      	beq.n	8007382 <I2C_Master_ADDR+0x2d0>
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	2b08      	cmp	r3, #8
 8007374:	d005      	beq.n	8007382 <I2C_Master_ADDR+0x2d0>
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	2b10      	cmp	r3, #16
 800737a:	d002      	beq.n	8007382 <I2C_Master_ADDR+0x2d0>
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b20      	cmp	r3, #32
 8007380:	d107      	bne.n	8007392 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007390:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007392:	2300      	movs	r3, #0
 8007394:	613b      	str	r3, [r7, #16]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	695b      	ldr	r3, [r3, #20]
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80073ae:	e00b      	b.n	80073c8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
}
 80073c6:	e7ff      	b.n	80073c8 <I2C_Master_ADDR+0x316>
 80073c8:	bf00      	nop
 80073ca:	3744      	adds	r7, #68	; 0x44
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d02b      	beq.n	8007446 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	781a      	ldrb	r2, [r3, #0]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007408:	b29b      	uxth	r3, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d114      	bne.n	8007446 <I2C_SlaveTransmit_TXE+0x72>
 800741c:	7bfb      	ldrb	r3, [r7, #15]
 800741e:	2b29      	cmp	r3, #41	; 0x29
 8007420:	d111      	bne.n	8007446 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007430:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2221      	movs	r2, #33	; 0x21
 8007436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2228      	movs	r2, #40	; 0x28
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff f9e7 	bl	8006814 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007446:	bf00      	nop
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800745a:	b29b      	uxth	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d011      	beq.n	8007484 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	1c5a      	adds	r2, r3, #1
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800747a:	b29b      	uxth	r3, r3
 800747c:	3b01      	subs	r3, #1
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800749e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d02c      	beq.n	8007504 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d114      	bne.n	8007504 <I2C_SlaveReceive_RXNE+0x74>
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b2a      	cmp	r3, #42	; 0x2a
 80074de:	d111      	bne.n	8007504 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2222      	movs	r2, #34	; 0x22
 80074f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2228      	movs	r2, #40	; 0x28
 80074fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff f992 	bl	8006828 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007504:	bf00      	nop
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d012      	beq.n	8007544 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753a:	b29b      	uxth	r3, r3
 800753c:	3b01      	subs	r3, #1
 800753e:	b29a      	uxth	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800755a:	2300      	movs	r3, #0
 800755c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007564:	b2db      	uxtb	r3, r3
 8007566:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800756a:	2b28      	cmp	r3, #40	; 0x28
 800756c:	d127      	bne.n	80075be <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	685a      	ldr	r2, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800757c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	089b      	lsrs	r3, r3, #2
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800758a:	2301      	movs	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	81bb      	strh	r3, [r7, #12]
 80075a0:	e002      	b.n	80075a8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	699b      	ldr	r3, [r3, #24]
 80075a6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80075b0:	89ba      	ldrh	r2, [r7, #12]
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	4619      	mov	r1, r3
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7ff f940 	bl	800683c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80075bc:	e00e      	b.n	80075dc <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075be:	2300      	movs	r3, #0
 80075c0:	60bb      	str	r3, [r7, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	695b      	ldr	r3, [r3, #20]
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	699b      	ldr	r3, [r3, #24]
 80075d0:	60bb      	str	r3, [r7, #8]
 80075d2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80075dc:	bf00      	nop
 80075de:	3710      	adds	r7, #16
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075f2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007602:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007604:	2300      	movs	r3, #0
 8007606:	60bb      	str	r3, [r7, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	60bb      	str	r3, [r7, #8]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007630:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800763c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007640:	d172      	bne.n	8007728 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	2b22      	cmp	r3, #34	; 0x22
 8007646:	d002      	beq.n	800764e <I2C_Slave_STOPF+0x6a>
 8007648:	7bfb      	ldrb	r3, [r7, #15]
 800764a:	2b2a      	cmp	r3, #42	; 0x2a
 800764c:	d135      	bne.n	80076ba <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	b29a      	uxth	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007660:	b29b      	uxth	r3, r3
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	f043 0204 	orr.w	r2, r3, #4
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007680:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fa96 	bl	8005bb8 <HAL_DMA_GetState>
 800768c:	4603      	mov	r3, r0
 800768e:	2b01      	cmp	r3, #1
 8007690:	d049      	beq.n	8007726 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007696:	4a69      	ldr	r2, [pc, #420]	; (800783c <I2C_Slave_STOPF+0x258>)
 8007698:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769e:	4618      	mov	r0, r3
 80076a0:	f7fe f8de 	bl	8005860 <HAL_DMA_Abort_IT>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d03d      	beq.n	8007726 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076b8:	e035      	b.n	8007726 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	b29a      	uxth	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d005      	beq.n	80076de <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d6:	f043 0204 	orr.w	r2, r3, #4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685a      	ldr	r2, [r3, #4]
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ec:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fa60 	bl	8005bb8 <HAL_DMA_GetState>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d014      	beq.n	8007728 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007702:	4a4e      	ldr	r2, [pc, #312]	; (800783c <I2C_Slave_STOPF+0x258>)
 8007704:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe f8a8 	bl	8005860 <HAL_DMA_Abort_IT>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d008      	beq.n	8007728 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007720:	4610      	mov	r0, r2
 8007722:	4798      	blx	r3
 8007724:	e000      	b.n	8007728 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007726:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d03e      	beq.n	80077b0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b04      	cmp	r3, #4
 800773e:	d112      	bne.n	8007766 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	1c5a      	adds	r2, r3, #1
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800775c:	b29b      	uxth	r3, r3
 800775e:	3b01      	subs	r3, #1
 8007760:	b29a      	uxth	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007770:	2b40      	cmp	r3, #64	; 0x40
 8007772:	d112      	bne.n	800779a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	b2d2      	uxtb	r2, r2
 8007780:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800779e:	b29b      	uxth	r3, r3
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	f043 0204 	orr.w	r2, r3, #4
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 f8b3 	bl	8007924 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80077be:	e039      	b.n	8007834 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	2b2a      	cmp	r3, #42	; 0x2a
 80077c4:	d109      	bne.n	80077da <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2228      	movs	r2, #40	; 0x28
 80077d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff f827 	bl	8006828 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b28      	cmp	r3, #40	; 0x28
 80077e4:	d111      	bne.n	800780a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a15      	ldr	r2, [pc, #84]	; (8007840 <I2C_Slave_STOPF+0x25c>)
 80077ea:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2220      	movs	r2, #32
 80077f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f7ff f828 	bl	8006858 <HAL_I2C_ListenCpltCallback>
}
 8007808:	e014      	b.n	8007834 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800780e:	2b22      	cmp	r3, #34	; 0x22
 8007810:	d002      	beq.n	8007818 <I2C_Slave_STOPF+0x234>
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	2b22      	cmp	r3, #34	; 0x22
 8007816:	d10d      	bne.n	8007834 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fe fffa 	bl	8006828 <HAL_I2C_SlaveRxCpltCallback>
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	08007b89 	.word	0x08007b89
 8007840:	ffff0000 	.word	0xffff0000

08007844 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007858:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b08      	cmp	r3, #8
 800785e:	d002      	beq.n	8007866 <I2C_Slave_AF+0x22>
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	2b20      	cmp	r3, #32
 8007864:	d129      	bne.n	80078ba <I2C_Slave_AF+0x76>
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	2b28      	cmp	r3, #40	; 0x28
 800786a:	d126      	bne.n	80078ba <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	4a2c      	ldr	r2, [pc, #176]	; (8007920 <I2C_Slave_AF+0xdc>)
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007880:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800788a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800789a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2220      	movs	r2, #32
 80078a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f7fe ffd0 	bl	8006858 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80078b8:	e02e      	b.n	8007918 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	2b21      	cmp	r3, #33	; 0x21
 80078be:	d126      	bne.n	800790e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a17      	ldr	r2, [pc, #92]	; (8007920 <I2C_Slave_AF+0xdc>)
 80078c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2221      	movs	r2, #33	; 0x21
 80078ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2220      	movs	r2, #32
 80078d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078ea:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80078f4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007904:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7fe ff84 	bl	8006814 <HAL_I2C_SlaveTxCpltCallback>
}
 800790c:	e004      	b.n	8007918 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007916:	615a      	str	r2, [r3, #20]
}
 8007918:	bf00      	nop
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	ffff0000 	.word	0xffff0000

08007924 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007932:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b10      	cmp	r3, #16
 8007940:	d002      	beq.n	8007948 <I2C_ITError+0x24>
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b40      	cmp	r3, #64	; 0x40
 8007946:	d10a      	bne.n	800795e <I2C_ITError+0x3a>
 8007948:	7bfb      	ldrb	r3, [r7, #15]
 800794a:	2b22      	cmp	r3, #34	; 0x22
 800794c:	d107      	bne.n	800795e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800795c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007964:	2b28      	cmp	r3, #40	; 0x28
 8007966:	d107      	bne.n	8007978 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2228      	movs	r2, #40	; 0x28
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007976:	e015      	b.n	80079a4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007986:	d00a      	beq.n	800799e <I2C_ITError+0x7a>
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b60      	cmp	r3, #96	; 0x60
 800798c:	d007      	beq.n	800799e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2220      	movs	r2, #32
 8007992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079b2:	d162      	bne.n	8007a7a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d020      	beq.n	8007a14 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d6:	4a6a      	ldr	r2, [pc, #424]	; (8007b80 <I2C_ITError+0x25c>)
 80079d8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	4618      	mov	r0, r3
 80079e0:	f7fd ff3e 	bl	8005860 <HAL_DMA_Abort_IT>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8089 	beq.w	8007afe <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0201 	bic.w	r2, r2, #1
 80079fa:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a0e:	4610      	mov	r0, r2
 8007a10:	4798      	blx	r3
 8007a12:	e074      	b.n	8007afe <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	4a59      	ldr	r2, [pc, #356]	; (8007b80 <I2C_ITError+0x25c>)
 8007a1a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fd ff1d 	bl	8005860 <HAL_DMA_Abort_IT>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d068      	beq.n	8007afe <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d10b      	bne.n	8007a52 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	691a      	ldr	r2, [r3, #16]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a44:	b2d2      	uxtb	r2, r2
 8007a46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	1c5a      	adds	r2, r3, #1
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 0201 	bic.w	r2, r2, #1
 8007a60:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007a74:	4610      	mov	r0, r2
 8007a76:	4798      	blx	r3
 8007a78:	e041      	b.n	8007afe <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b60      	cmp	r3, #96	; 0x60
 8007a84:	d125      	bne.n	8007ad2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9e:	2b40      	cmp	r3, #64	; 0x40
 8007aa0:	d10b      	bne.n	8007aba <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	691a      	ldr	r2, [r3, #16]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	b2d2      	uxtb	r2, r2
 8007aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	1c5a      	adds	r2, r3, #1
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0201 	bic.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7fe feec 	bl	80068a8 <HAL_I2C_AbortCpltCallback>
 8007ad0:	e015      	b.n	8007afe <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d10b      	bne.n	8007af8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aea:	b2d2      	uxtb	r2, r2
 8007aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7fe fecb 	bl	8006894 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b02:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10e      	bne.n	8007b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d109      	bne.n	8007b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685a      	ldr	r2, [r3, #4]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b3a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b42:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b48:	f003 0304 	and.w	r3, r3, #4
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d113      	bne.n	8007b78 <I2C_ITError+0x254>
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b28      	cmp	r3, #40	; 0x28
 8007b54:	d110      	bne.n	8007b78 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <I2C_ITError+0x260>)
 8007b5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fe fe70 	bl	8006858 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b78:	bf00      	nop
 8007b7a:	3710      	adds	r7, #16
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}
 8007b80:	08007b89 	.word	0x08007b89
 8007b84:	ffff0000 	.word	0xffff0000

08007b88 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b98:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ba0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ba2:	4b4b      	ldr	r3, [pc, #300]	; (8007cd0 <I2C_DMAAbort+0x148>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	08db      	lsrs	r3, r3, #3
 8007ba8:	4a4a      	ldr	r2, [pc, #296]	; (8007cd4 <I2C_DMAAbort+0x14c>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	0a1a      	lsrs	r2, r3, #8
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	00da      	lsls	r2, r3, #3
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8007bce:	e00a      	b.n	8007be6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be4:	d0ea      	beq.n	8007bbc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d003      	beq.n	8007bf6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	2200      	movs	r2, #0
 8007c04:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c14:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c28:	2200      	movs	r2, #0
 8007c2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	2200      	movs	r2, #0
 8007c3a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b60      	cmp	r3, #96	; 0x60
 8007c56:	d10e      	bne.n	8007c76 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7fe fe1a 	bl	80068a8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007c74:	e027      	b.n	8007cc6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c76:	7cfb      	ldrb	r3, [r7, #19]
 8007c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c7c:	2b28      	cmp	r3, #40	; 0x28
 8007c7e:	d117      	bne.n	8007cb0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f042 0201 	orr.w	r2, r2, #1
 8007c8e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c9e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2228      	movs	r2, #40	; 0x28
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007cae:	e007      	b.n	8007cc0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	2220      	movs	r2, #32
 8007cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007cc0:	6978      	ldr	r0, [r7, #20]
 8007cc2:	f7fe fde7 	bl	8006894 <HAL_I2C_ErrorCallback>
}
 8007cc6:	bf00      	nop
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	200000b8 	.word	0x200000b8
 8007cd4:	14f8b589 	.word	0x14f8b589

08007cd8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	08db      	lsrs	r3, r3, #3
 8007cea:	4a13      	ldr	r2, [pc, #76]	; (8007d38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	0a1a      	lsrs	r2, r3, #8
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	f043 0220 	orr.w	r2, r3, #32
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e008      	b.n	8007d28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d24:	d0e9      	beq.n	8007cfa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3714      	adds	r7, #20
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	200000b8 	.word	0x200000b8
 8007d38:	14f8b589 	.word	0x14f8b589

08007d3c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007d4c:	d103      	bne.n	8007d56 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007d54:	e007      	b.n	8007d66 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007d5e:	d102      	bne.n	8007d66 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2208      	movs	r2, #8
 8007d64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e03e      	b.n	8007e06 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d106      	bne.n	8007da2 <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	f7fd f88b 	bl	8004eb8 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f003 fc15 	bl	800b5dc <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6818      	ldr	r0, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	f003 fc59 	bl	800b674 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	f003 fc86 	bl	800b6de <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	2b10      	cmp	r3, #16
 8007dd8:	d108      	bne.n	8007dec <HAL_NAND_Init+0x7a>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0204 	orr.w	r2, r2, #4
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e007      	b.n	8007dfc <HAL_NAND_Init+0x8a>
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6a1a      	ldr	r2, [r3, #32]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0204 	orr.w	r2, r2, #4
 8007dfa:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b082      	sub	sp, #8
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d10a      	bne.n	8007e34 <HAL_NAND_IRQHandler+0x26>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	e009      	b.n	8007e48 <HAL_NAND_IRQHandler+0x3a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d017      	beq.n	8007e7c <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fb f9bb 	bl	80031c8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d108      	bne.n	8007e6c <HAL_NAND_IRQHandler+0x5e>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f022 0201 	bic.w	r2, r2, #1
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e007      	b.n	8007e7c <HAL_NAND_IRQHandler+0x6e>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0201 	bic.w	r2, r2, #1
 8007e7a:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d10a      	bne.n	8007e9a <HAL_NAND_IRQHandler+0x8c>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f003 0302 	and.w	r3, r3, #2
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	bf0c      	ite	eq
 8007e92:	2301      	moveq	r3, #1
 8007e94:	2300      	movne	r3, #0
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	e009      	b.n	8007eae <HAL_NAND_IRQHandler+0xa0>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d017      	beq.n	8007ee2 <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7fb f988 	bl	80031c8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	2b10      	cmp	r3, #16
 8007ebe:	d108      	bne.n	8007ed2 <HAL_NAND_IRQHandler+0xc4>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685a      	ldr	r2, [r3, #4]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0202 	bic.w	r2, r2, #2
 8007ece:	605a      	str	r2, [r3, #4]
 8007ed0:	e007      	b.n	8007ee2 <HAL_NAND_IRQHandler+0xd4>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0202 	bic.w	r2, r2, #2
 8007ee0:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	2b10      	cmp	r3, #16
 8007ee8:	d10a      	bne.n	8007f00 <HAL_NAND_IRQHandler+0xf2>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f003 0304 	and.w	r3, r3, #4
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	e009      	b.n	8007f14 <HAL_NAND_IRQHandler+0x106>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	f003 0304 	and.w	r3, r3, #4
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	bf0c      	ite	eq
 8007f0e:	2301      	moveq	r3, #1
 8007f10:	2300      	movne	r3, #0
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d017      	beq.n	8007f48 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7fb f955 	bl	80031c8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b10      	cmp	r3, #16
 8007f24:	d108      	bne.n	8007f38 <HAL_NAND_IRQHandler+0x12a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685a      	ldr	r2, [r3, #4]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0204 	bic.w	r2, r2, #4
 8007f34:	605a      	str	r2, [r3, #4]
 8007f36:	e007      	b.n	8007f48 <HAL_NAND_IRQHandler+0x13a>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	2b10      	cmp	r3, #16
 8007f4e:	d10a      	bne.n	8007f66 <HAL_NAND_IRQHandler+0x158>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	bf0c      	ite	eq
 8007f5e:	2301      	moveq	r3, #1
 8007f60:	2300      	movne	r3, #0
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	e009      	b.n	8007f7a <HAL_NAND_IRQHandler+0x16c>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f70:	2b40      	cmp	r3, #64	; 0x40
 8007f72:	bf0c      	ite	eq
 8007f74:	2301      	moveq	r3, #1
 8007f76:	2300      	movne	r3, #0
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f7fb f922 	bl	80031c8 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	2b10      	cmp	r3, #16
 8007f8a:	d108      	bne.n	8007f9e <HAL_NAND_IRQHandler+0x190>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f9a:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8007f9c:	e007      	b.n	8007fae <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  return hnand->State;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007fc4:	b2db      	uxtb	r3, r3
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b085      	sub	sp, #20
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8007fda:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007fde:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fe6:	2270      	movs	r2, #112	; 0x70
 8007fe8:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e007      	b.n	8008010 <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d001      	beq.n	800800e <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 800800a:	2340      	movs	r3, #64	; 0x40
 800800c:	e000      	b.n	8008010 <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 800800e:	2300      	movs	r3, #0
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e267      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 0301 	and.w	r3, r3, #1
 8008036:	2b00      	cmp	r3, #0
 8008038:	d075      	beq.n	8008126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800803a:	4b88      	ldr	r3, [pc, #544]	; (800825c <HAL_RCC_OscConfig+0x240>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 030c 	and.w	r3, r3, #12
 8008042:	2b04      	cmp	r3, #4
 8008044:	d00c      	beq.n	8008060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008046:	4b85      	ldr	r3, [pc, #532]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800804e:	2b08      	cmp	r3, #8
 8008050:	d112      	bne.n	8008078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008052:	4b82      	ldr	r3, [pc, #520]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800805a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800805e:	d10b      	bne.n	8008078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008060:	4b7e      	ldr	r3, [pc, #504]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d05b      	beq.n	8008124 <HAL_RCC_OscConfig+0x108>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d157      	bne.n	8008124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008074:	2301      	movs	r3, #1
 8008076:	e242      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008080:	d106      	bne.n	8008090 <HAL_RCC_OscConfig+0x74>
 8008082:	4b76      	ldr	r3, [pc, #472]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a75      	ldr	r2, [pc, #468]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800808c:	6013      	str	r3, [r2, #0]
 800808e:	e01d      	b.n	80080cc <HAL_RCC_OscConfig+0xb0>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008098:	d10c      	bne.n	80080b4 <HAL_RCC_OscConfig+0x98>
 800809a:	4b70      	ldr	r3, [pc, #448]	; (800825c <HAL_RCC_OscConfig+0x240>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a6f      	ldr	r2, [pc, #444]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	4b6d      	ldr	r3, [pc, #436]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a6c      	ldr	r2, [pc, #432]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e00b      	b.n	80080cc <HAL_RCC_OscConfig+0xb0>
 80080b4:	4b69      	ldr	r3, [pc, #420]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a68      	ldr	r2, [pc, #416]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	4b66      	ldr	r3, [pc, #408]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a65      	ldr	r2, [pc, #404]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d013      	beq.n	80080fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080d4:	f7fd f93c 	bl	8005350 <HAL_GetTick>
 80080d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080da:	e008      	b.n	80080ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80080dc:	f7fd f938 	bl	8005350 <HAL_GetTick>
 80080e0:	4602      	mov	r2, r0
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	1ad3      	subs	r3, r2, r3
 80080e6:	2b64      	cmp	r3, #100	; 0x64
 80080e8:	d901      	bls.n	80080ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080ea:	2303      	movs	r3, #3
 80080ec:	e207      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ee:	4b5b      	ldr	r3, [pc, #364]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d0f0      	beq.n	80080dc <HAL_RCC_OscConfig+0xc0>
 80080fa:	e014      	b.n	8008126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080fc:	f7fd f928 	bl	8005350 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008102:	e008      	b.n	8008116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008104:	f7fd f924 	bl	8005350 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b64      	cmp	r3, #100	; 0x64
 8008110:	d901      	bls.n	8008116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e1f3      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008116:	4b51      	ldr	r3, [pc, #324]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <HAL_RCC_OscConfig+0xe8>
 8008122:	e000      	b.n	8008126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d063      	beq.n	80081fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008132:	4b4a      	ldr	r3, [pc, #296]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 030c 	and.w	r3, r3, #12
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800813e:	4b47      	ldr	r3, [pc, #284]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008146:	2b08      	cmp	r3, #8
 8008148:	d11c      	bne.n	8008184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800814a:	4b44      	ldr	r3, [pc, #272]	; (800825c <HAL_RCC_OscConfig+0x240>)
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d116      	bne.n	8008184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008156:	4b41      	ldr	r3, [pc, #260]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f003 0302 	and.w	r3, r3, #2
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <HAL_RCC_OscConfig+0x152>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d001      	beq.n	800816e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	e1c7      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800816e:	4b3b      	ldr	r3, [pc, #236]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	4937      	ldr	r1, [pc, #220]	; (800825c <HAL_RCC_OscConfig+0x240>)
 800817e:	4313      	orrs	r3, r2
 8008180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008182:	e03a      	b.n	80081fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68db      	ldr	r3, [r3, #12]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d020      	beq.n	80081ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800818c:	4b34      	ldr	r3, [pc, #208]	; (8008260 <HAL_RCC_OscConfig+0x244>)
 800818e:	2201      	movs	r2, #1
 8008190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008192:	f7fd f8dd 	bl	8005350 <HAL_GetTick>
 8008196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008198:	e008      	b.n	80081ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800819a:	f7fd f8d9 	bl	8005350 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d901      	bls.n	80081ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e1a8      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081ac:	4b2b      	ldr	r3, [pc, #172]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0302 	and.w	r3, r3, #2
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d0f0      	beq.n	800819a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b8:	4b28      	ldr	r3, [pc, #160]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	4925      	ldr	r1, [pc, #148]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80081c8:	4313      	orrs	r3, r2
 80081ca:	600b      	str	r3, [r1, #0]
 80081cc:	e015      	b.n	80081fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081ce:	4b24      	ldr	r3, [pc, #144]	; (8008260 <HAL_RCC_OscConfig+0x244>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d4:	f7fd f8bc 	bl	8005350 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80081dc:	f7fd f8b8 	bl	8005350 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e187      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081ee:	4b1b      	ldr	r3, [pc, #108]	; (800825c <HAL_RCC_OscConfig+0x240>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d1f0      	bne.n	80081dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 0308 	and.w	r3, r3, #8
 8008202:	2b00      	cmp	r3, #0
 8008204:	d036      	beq.n	8008274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	695b      	ldr	r3, [r3, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d016      	beq.n	800823c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800820e:	4b15      	ldr	r3, [pc, #84]	; (8008264 <HAL_RCC_OscConfig+0x248>)
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008214:	f7fd f89c 	bl	8005350 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800821c:	f7fd f898 	bl	8005350 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e167      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800822e:	4b0b      	ldr	r3, [pc, #44]	; (800825c <HAL_RCC_OscConfig+0x240>)
 8008230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0x200>
 800823a:	e01b      	b.n	8008274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <HAL_RCC_OscConfig+0x248>)
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008242:	f7fd f885 	bl	8005350 <HAL_GetTick>
 8008246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008248:	e00e      	b.n	8008268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800824a:	f7fd f881 	bl	8005350 <HAL_GetTick>
 800824e:	4602      	mov	r2, r0
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	1ad3      	subs	r3, r2, r3
 8008254:	2b02      	cmp	r3, #2
 8008256:	d907      	bls.n	8008268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008258:	2303      	movs	r3, #3
 800825a:	e150      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
 800825c:	40023800 	.word	0x40023800
 8008260:	42470000 	.word	0x42470000
 8008264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008268:	4b88      	ldr	r3, [pc, #544]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800826a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1ea      	bne.n	800824a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 0304 	and.w	r3, r3, #4
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 8097 	beq.w	80083b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008282:	2300      	movs	r3, #0
 8008284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008286:	4b81      	ldr	r3, [pc, #516]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008292:	2300      	movs	r3, #0
 8008294:	60bb      	str	r3, [r7, #8]
 8008296:	4b7d      	ldr	r3, [pc, #500]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829a:	4a7c      	ldr	r2, [pc, #496]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800829c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082a0:	6413      	str	r3, [r2, #64]	; 0x40
 80082a2:	4b7a      	ldr	r3, [pc, #488]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80082a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082aa:	60bb      	str	r3, [r7, #8]
 80082ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ae:	2301      	movs	r3, #1
 80082b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b2:	4b77      	ldr	r3, [pc, #476]	; (8008490 <HAL_RCC_OscConfig+0x474>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d118      	bne.n	80082f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082be:	4b74      	ldr	r3, [pc, #464]	; (8008490 <HAL_RCC_OscConfig+0x474>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a73      	ldr	r2, [pc, #460]	; (8008490 <HAL_RCC_OscConfig+0x474>)
 80082c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082ca:	f7fd f841 	bl	8005350 <HAL_GetTick>
 80082ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082d2:	f7fd f83d 	bl	8005350 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e10c      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082e4:	4b6a      	ldr	r3, [pc, #424]	; (8008490 <HAL_RCC_OscConfig+0x474>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d106      	bne.n	8008306 <HAL_RCC_OscConfig+0x2ea>
 80082f8:	4b64      	ldr	r3, [pc, #400]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80082fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fc:	4a63      	ldr	r2, [pc, #396]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80082fe:	f043 0301 	orr.w	r3, r3, #1
 8008302:	6713      	str	r3, [r2, #112]	; 0x70
 8008304:	e01c      	b.n	8008340 <HAL_RCC_OscConfig+0x324>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b05      	cmp	r3, #5
 800830c:	d10c      	bne.n	8008328 <HAL_RCC_OscConfig+0x30c>
 800830e:	4b5f      	ldr	r3, [pc, #380]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008312:	4a5e      	ldr	r2, [pc, #376]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008314:	f043 0304 	orr.w	r3, r3, #4
 8008318:	6713      	str	r3, [r2, #112]	; 0x70
 800831a:	4b5c      	ldr	r3, [pc, #368]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a5b      	ldr	r2, [pc, #364]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
 8008326:	e00b      	b.n	8008340 <HAL_RCC_OscConfig+0x324>
 8008328:	4b58      	ldr	r3, [pc, #352]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800832a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832c:	4a57      	ldr	r2, [pc, #348]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	6713      	str	r3, [r2, #112]	; 0x70
 8008334:	4b55      	ldr	r3, [pc, #340]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008338:	4a54      	ldr	r2, [pc, #336]	; (800848c <HAL_RCC_OscConfig+0x470>)
 800833a:	f023 0304 	bic.w	r3, r3, #4
 800833e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d015      	beq.n	8008374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008348:	f7fd f802 	bl	8005350 <HAL_GetTick>
 800834c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834e:	e00a      	b.n	8008366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008350:	f7fc fffe 	bl	8005350 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f241 3288 	movw	r2, #5000	; 0x1388
 800835e:	4293      	cmp	r3, r2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e0cb      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008366:	4b49      	ldr	r3, [pc, #292]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0ee      	beq.n	8008350 <HAL_RCC_OscConfig+0x334>
 8008372:	e014      	b.n	800839e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008374:	f7fc ffec 	bl	8005350 <HAL_GetTick>
 8008378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800837a:	e00a      	b.n	8008392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800837c:	f7fc ffe8 	bl	8005350 <HAL_GetTick>
 8008380:	4602      	mov	r2, r0
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	1ad3      	subs	r3, r2, r3
 8008386:	f241 3288 	movw	r2, #5000	; 0x1388
 800838a:	4293      	cmp	r3, r2
 800838c:	d901      	bls.n	8008392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e0b5      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008392:	4b3e      	ldr	r3, [pc, #248]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008396:	f003 0302 	and.w	r3, r3, #2
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1ee      	bne.n	800837c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800839e:	7dfb      	ldrb	r3, [r7, #23]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d105      	bne.n	80083b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083a4:	4b39      	ldr	r3, [pc, #228]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80083a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a8:	4a38      	ldr	r2, [pc, #224]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80083aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80a1 	beq.w	80084fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083ba:	4b34      	ldr	r3, [pc, #208]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 030c 	and.w	r3, r3, #12
 80083c2:	2b08      	cmp	r3, #8
 80083c4:	d05c      	beq.n	8008480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d141      	bne.n	8008452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ce:	4b31      	ldr	r3, [pc, #196]	; (8008494 <HAL_RCC_OscConfig+0x478>)
 80083d0:	2200      	movs	r2, #0
 80083d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083d4:	f7fc ffbc 	bl	8005350 <HAL_GetTick>
 80083d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083dc:	f7fc ffb8 	bl	8005350 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d901      	bls.n	80083ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e087      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083ee:	4b27      	ldr	r3, [pc, #156]	; (800848c <HAL_RCC_OscConfig+0x470>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d1f0      	bne.n	80083dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008408:	019b      	lsls	r3, r3, #6
 800840a:	431a      	orrs	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	3b01      	subs	r3, #1
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	491b      	ldr	r1, [pc, #108]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008420:	4313      	orrs	r3, r2
 8008422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008424:	4b1b      	ldr	r3, [pc, #108]	; (8008494 <HAL_RCC_OscConfig+0x478>)
 8008426:	2201      	movs	r2, #1
 8008428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800842a:	f7fc ff91 	bl	8005350 <HAL_GetTick>
 800842e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008430:	e008      	b.n	8008444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008432:	f7fc ff8d 	bl	8005350 <HAL_GetTick>
 8008436:	4602      	mov	r2, r0
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	2b02      	cmp	r3, #2
 800843e:	d901      	bls.n	8008444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e05c      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008444:	4b11      	ldr	r3, [pc, #68]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f0      	beq.n	8008432 <HAL_RCC_OscConfig+0x416>
 8008450:	e054      	b.n	80084fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008452:	4b10      	ldr	r3, [pc, #64]	; (8008494 <HAL_RCC_OscConfig+0x478>)
 8008454:	2200      	movs	r2, #0
 8008456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008458:	f7fc ff7a 	bl	8005350 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008460:	f7fc ff76 	bl	8005350 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b02      	cmp	r3, #2
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e045      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_RCC_OscConfig+0x470>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0x444>
 800847e:	e03d      	b.n	80084fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	699b      	ldr	r3, [r3, #24]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d107      	bne.n	8008498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e038      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
 800848c:	40023800 	.word	0x40023800
 8008490:	40007000 	.word	0x40007000
 8008494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008498:	4b1b      	ldr	r3, [pc, #108]	; (8008508 <HAL_RCC_OscConfig+0x4ec>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d028      	beq.n	80084f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d121      	bne.n	80084f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084be:	429a      	cmp	r2, r3
 80084c0:	d11a      	bne.n	80084f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80084c8:	4013      	ands	r3, r2
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80084ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d111      	bne.n	80084f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084de:	085b      	lsrs	r3, r3, #1
 80084e0:	3b01      	subs	r3, #1
 80084e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d107      	bne.n	80084f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d001      	beq.n	80084fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e000      	b.n	80084fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40023800 	.word	0x40023800

0800850c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e0cc      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008520:	4b68      	ldr	r3, [pc, #416]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0307 	and.w	r3, r3, #7
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	429a      	cmp	r2, r3
 800852c:	d90c      	bls.n	8008548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800852e:	4b65      	ldr	r3, [pc, #404]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	b2d2      	uxtb	r2, r2
 8008534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008536:	4b63      	ldr	r3, [pc, #396]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0307 	and.w	r3, r3, #7
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e0b8      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d020      	beq.n	8008596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 0304 	and.w	r3, r3, #4
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008560:	4b59      	ldr	r3, [pc, #356]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	4a58      	ldr	r2, [pc, #352]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800856a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008578:	4b53      	ldr	r3, [pc, #332]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	4a52      	ldr	r2, [pc, #328]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800857e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008584:	4b50      	ldr	r3, [pc, #320]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	494d      	ldr	r1, [pc, #308]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008592:	4313      	orrs	r3, r2
 8008594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d044      	beq.n	800862c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d107      	bne.n	80085ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085aa:	4b47      	ldr	r3, [pc, #284]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d119      	bne.n	80085ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e07f      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d003      	beq.n	80085ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d107      	bne.n	80085da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ca:	4b3f      	ldr	r3, [pc, #252]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e06f      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085da:	4b3b      	ldr	r3, [pc, #236]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0302 	and.w	r3, r3, #2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d101      	bne.n	80085ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e067      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085ea:	4b37      	ldr	r3, [pc, #220]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f023 0203 	bic.w	r2, r3, #3
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	4934      	ldr	r1, [pc, #208]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085fc:	f7fc fea8 	bl	8005350 <HAL_GetTick>
 8008600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008602:	e00a      	b.n	800861a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008604:	f7fc fea4 	bl	8005350 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008612:	4293      	cmp	r3, r2
 8008614:	d901      	bls.n	800861a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e04f      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800861a:	4b2b      	ldr	r3, [pc, #172]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 020c 	and.w	r2, r3, #12
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	429a      	cmp	r2, r3
 800862a:	d1eb      	bne.n	8008604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800862c:	4b25      	ldr	r3, [pc, #148]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 0307 	and.w	r3, r3, #7
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d20c      	bcs.n	8008654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800863a:	4b22      	ldr	r3, [pc, #136]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 800863c:	683a      	ldr	r2, [r7, #0]
 800863e:	b2d2      	uxtb	r2, r2
 8008640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008642:	4b20      	ldr	r3, [pc, #128]	; (80086c4 <HAL_RCC_ClockConfig+0x1b8>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0307 	and.w	r3, r3, #7
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	429a      	cmp	r2, r3
 800864e:	d001      	beq.n	8008654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e032      	b.n	80086ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0304 	and.w	r3, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	d008      	beq.n	8008672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008660:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	4916      	ldr	r1, [pc, #88]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800866e:	4313      	orrs	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	2b00      	cmp	r3, #0
 800867c:	d009      	beq.n	8008692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	00db      	lsls	r3, r3, #3
 800868c:	490e      	ldr	r1, [pc, #56]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800868e:	4313      	orrs	r3, r2
 8008690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008692:	f000 f821 	bl	80086d8 <HAL_RCC_GetSysClockFreq>
 8008696:	4602      	mov	r2, r0
 8008698:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <HAL_RCC_ClockConfig+0x1bc>)
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	091b      	lsrs	r3, r3, #4
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	490a      	ldr	r1, [pc, #40]	; (80086cc <HAL_RCC_ClockConfig+0x1c0>)
 80086a4:	5ccb      	ldrb	r3, [r1, r3]
 80086a6:	fa22 f303 	lsr.w	r3, r2, r3
 80086aa:	4a09      	ldr	r2, [pc, #36]	; (80086d0 <HAL_RCC_ClockConfig+0x1c4>)
 80086ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80086ae:	4b09      	ldr	r3, [pc, #36]	; (80086d4 <HAL_RCC_ClockConfig+0x1c8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc fc0a 	bl	8004ecc <HAL_InitTick>

  return HAL_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	40023c00 	.word	0x40023c00
 80086c8:	40023800 	.word	0x40023800
 80086cc:	08013b44 	.word	0x08013b44
 80086d0:	200000b8 	.word	0x200000b8
 80086d4:	200000bc 	.word	0x200000bc

080086d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086dc:	b094      	sub	sp, #80	; 0x50
 80086de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	647b      	str	r3, [r7, #68]	; 0x44
 80086e4:	2300      	movs	r3, #0
 80086e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086e8:	2300      	movs	r3, #0
 80086ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80086ec:	2300      	movs	r3, #0
 80086ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086f0:	4b79      	ldr	r3, [pc, #484]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 030c 	and.w	r3, r3, #12
 80086f8:	2b08      	cmp	r3, #8
 80086fa:	d00d      	beq.n	8008718 <HAL_RCC_GetSysClockFreq+0x40>
 80086fc:	2b08      	cmp	r3, #8
 80086fe:	f200 80e1 	bhi.w	80088c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008702:	2b00      	cmp	r3, #0
 8008704:	d002      	beq.n	800870c <HAL_RCC_GetSysClockFreq+0x34>
 8008706:	2b04      	cmp	r3, #4
 8008708:	d003      	beq.n	8008712 <HAL_RCC_GetSysClockFreq+0x3a>
 800870a:	e0db      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800870c:	4b73      	ldr	r3, [pc, #460]	; (80088dc <HAL_RCC_GetSysClockFreq+0x204>)
 800870e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008710:	e0db      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008712:	4b73      	ldr	r3, [pc, #460]	; (80088e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8008714:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008716:	e0d8      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008718:	4b6f      	ldr	r3, [pc, #444]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008720:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008722:	4b6d      	ldr	r3, [pc, #436]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d063      	beq.n	80087f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800872e:	4b6a      	ldr	r3, [pc, #424]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	099b      	lsrs	r3, r3, #6
 8008734:	2200      	movs	r2, #0
 8008736:	63bb      	str	r3, [r7, #56]	; 0x38
 8008738:	63fa      	str	r2, [r7, #60]	; 0x3c
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008740:	633b      	str	r3, [r7, #48]	; 0x30
 8008742:	2300      	movs	r3, #0
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
 8008746:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800874a:	4622      	mov	r2, r4
 800874c:	462b      	mov	r3, r5
 800874e:	f04f 0000 	mov.w	r0, #0
 8008752:	f04f 0100 	mov.w	r1, #0
 8008756:	0159      	lsls	r1, r3, #5
 8008758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800875c:	0150      	lsls	r0, r2, #5
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4621      	mov	r1, r4
 8008764:	1a51      	subs	r1, r2, r1
 8008766:	6139      	str	r1, [r7, #16]
 8008768:	4629      	mov	r1, r5
 800876a:	eb63 0301 	sbc.w	r3, r3, r1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	f04f 0200 	mov.w	r2, #0
 8008774:	f04f 0300 	mov.w	r3, #0
 8008778:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800877c:	4659      	mov	r1, fp
 800877e:	018b      	lsls	r3, r1, #6
 8008780:	4651      	mov	r1, sl
 8008782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008786:	4651      	mov	r1, sl
 8008788:	018a      	lsls	r2, r1, #6
 800878a:	4651      	mov	r1, sl
 800878c:	ebb2 0801 	subs.w	r8, r2, r1
 8008790:	4659      	mov	r1, fp
 8008792:	eb63 0901 	sbc.w	r9, r3, r1
 8008796:	f04f 0200 	mov.w	r2, #0
 800879a:	f04f 0300 	mov.w	r3, #0
 800879e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087aa:	4690      	mov	r8, r2
 80087ac:	4699      	mov	r9, r3
 80087ae:	4623      	mov	r3, r4
 80087b0:	eb18 0303 	adds.w	r3, r8, r3
 80087b4:	60bb      	str	r3, [r7, #8]
 80087b6:	462b      	mov	r3, r5
 80087b8:	eb49 0303 	adc.w	r3, r9, r3
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	f04f 0200 	mov.w	r2, #0
 80087c2:	f04f 0300 	mov.w	r3, #0
 80087c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80087ca:	4629      	mov	r1, r5
 80087cc:	024b      	lsls	r3, r1, #9
 80087ce:	4621      	mov	r1, r4
 80087d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80087d4:	4621      	mov	r1, r4
 80087d6:	024a      	lsls	r2, r1, #9
 80087d8:	4610      	mov	r0, r2
 80087da:	4619      	mov	r1, r3
 80087dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087de:	2200      	movs	r2, #0
 80087e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80087e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087e8:	f7f8 f8a0 	bl	800092c <__aeabi_uldivmod>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4613      	mov	r3, r2
 80087f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f4:	e058      	b.n	80088a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087f6:	4b38      	ldr	r3, [pc, #224]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	099b      	lsrs	r3, r3, #6
 80087fc:	2200      	movs	r2, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	4611      	mov	r1, r2
 8008802:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008806:	623b      	str	r3, [r7, #32]
 8008808:	2300      	movs	r3, #0
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
 800880c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008810:	4642      	mov	r2, r8
 8008812:	464b      	mov	r3, r9
 8008814:	f04f 0000 	mov.w	r0, #0
 8008818:	f04f 0100 	mov.w	r1, #0
 800881c:	0159      	lsls	r1, r3, #5
 800881e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008822:	0150      	lsls	r0, r2, #5
 8008824:	4602      	mov	r2, r0
 8008826:	460b      	mov	r3, r1
 8008828:	4641      	mov	r1, r8
 800882a:	ebb2 0a01 	subs.w	sl, r2, r1
 800882e:	4649      	mov	r1, r9
 8008830:	eb63 0b01 	sbc.w	fp, r3, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008840:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008844:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008848:	ebb2 040a 	subs.w	r4, r2, sl
 800884c:	eb63 050b 	sbc.w	r5, r3, fp
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	00eb      	lsls	r3, r5, #3
 800885a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800885e:	00e2      	lsls	r2, r4, #3
 8008860:	4614      	mov	r4, r2
 8008862:	461d      	mov	r5, r3
 8008864:	4643      	mov	r3, r8
 8008866:	18e3      	adds	r3, r4, r3
 8008868:	603b      	str	r3, [r7, #0]
 800886a:	464b      	mov	r3, r9
 800886c:	eb45 0303 	adc.w	r3, r5, r3
 8008870:	607b      	str	r3, [r7, #4]
 8008872:	f04f 0200 	mov.w	r2, #0
 8008876:	f04f 0300 	mov.w	r3, #0
 800887a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800887e:	4629      	mov	r1, r5
 8008880:	028b      	lsls	r3, r1, #10
 8008882:	4621      	mov	r1, r4
 8008884:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008888:	4621      	mov	r1, r4
 800888a:	028a      	lsls	r2, r1, #10
 800888c:	4610      	mov	r0, r2
 800888e:	4619      	mov	r1, r3
 8008890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008892:	2200      	movs	r2, #0
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	61fa      	str	r2, [r7, #28]
 8008898:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800889c:	f7f8 f846 	bl	800092c <__aeabi_uldivmod>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4613      	mov	r3, r2
 80088a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80088a8:	4b0b      	ldr	r3, [pc, #44]	; (80088d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	0c1b      	lsrs	r3, r3, #16
 80088ae:	f003 0303 	and.w	r3, r3, #3
 80088b2:	3301      	adds	r3, #1
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80088b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80088c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088c2:	e002      	b.n	80088ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80088c4:	4b05      	ldr	r3, [pc, #20]	; (80088dc <HAL_RCC_GetSysClockFreq+0x204>)
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80088c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80088ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3750      	adds	r7, #80	; 0x50
 80088d0:	46bd      	mov	sp, r7
 80088d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088d6:	bf00      	nop
 80088d8:	40023800 	.word	0x40023800
 80088dc:	00f42400 	.word	0x00f42400
 80088e0:	007a1200 	.word	0x007a1200

080088e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088e4:	b480      	push	{r7}
 80088e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088e8:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80088ea:	681b      	ldr	r3, [r3, #0]
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	200000b8 	.word	0x200000b8

080088fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008900:	f7ff fff0 	bl	80088e4 <HAL_RCC_GetHCLKFreq>
 8008904:	4602      	mov	r2, r0
 8008906:	4b05      	ldr	r3, [pc, #20]	; (800891c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	0a9b      	lsrs	r3, r3, #10
 800890c:	f003 0307 	and.w	r3, r3, #7
 8008910:	4903      	ldr	r1, [pc, #12]	; (8008920 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008912:	5ccb      	ldrb	r3, [r1, r3]
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008918:	4618      	mov	r0, r3
 800891a:	bd80      	pop	{r7, pc}
 800891c:	40023800 	.word	0x40023800
 8008920:	08013b54 	.word	0x08013b54

08008924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008928:	f7ff ffdc 	bl	80088e4 <HAL_RCC_GetHCLKFreq>
 800892c:	4602      	mov	r2, r0
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	0b5b      	lsrs	r3, r3, #13
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	4903      	ldr	r1, [pc, #12]	; (8008948 <HAL_RCC_GetPCLK2Freq+0x24>)
 800893a:	5ccb      	ldrb	r3, [r1, r3]
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008940:	4618      	mov	r0, r3
 8008942:	bd80      	pop	{r7, pc}
 8008944:	40023800 	.word	0x40023800
 8008948:	08013b54 	.word	0x08013b54

0800894c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	220f      	movs	r2, #15
 800895a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800895c:	4b12      	ldr	r3, [pc, #72]	; (80089a8 <HAL_RCC_GetClockConfig+0x5c>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	f003 0203 	and.w	r2, r3, #3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008968:	4b0f      	ldr	r3, [pc, #60]	; (80089a8 <HAL_RCC_GetClockConfig+0x5c>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008974:	4b0c      	ldr	r3, [pc, #48]	; (80089a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008980:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <HAL_RCC_GetClockConfig+0x5c>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	08db      	lsrs	r3, r3, #3
 8008986:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800898e:	4b07      	ldr	r3, [pc, #28]	; (80089ac <HAL_RCC_GetClockConfig+0x60>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0207 	and.w	r2, r3, #7
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	601a      	str	r2, [r3, #0]
}
 800899a:	bf00      	nop
 800899c:	370c      	adds	r7, #12
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40023800 	.word	0x40023800
 80089ac:	40023c00 	.word	0x40023c00

080089b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d035      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089d8:	4b62      	ldr	r3, [pc, #392]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80089da:	2200      	movs	r2, #0
 80089dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80089de:	f7fc fcb7 	bl	8005350 <HAL_GetTick>
 80089e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089e4:	e008      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80089e6:	f7fc fcb3 	bl	8005350 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	d901      	bls.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e0b0      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089f8:	4b5b      	ldr	r3, [pc, #364]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1f0      	bne.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	019a      	lsls	r2, r3, #6
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
 8008a0e:	071b      	lsls	r3, r3, #28
 8008a10:	4955      	ldr	r1, [pc, #340]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a18:	4b52      	ldr	r3, [pc, #328]	; (8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a1e:	f7fc fc97 	bl	8005350 <HAL_GetTick>
 8008a22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a24:	e008      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a26:	f7fc fc93 	bl	8005350 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e090      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a38:	4b4b      	ldr	r3, [pc, #300]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8083 	beq.w	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008a52:	2300      	movs	r3, #0
 8008a54:	60fb      	str	r3, [r7, #12]
 8008a56:	4b44      	ldr	r3, [pc, #272]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5a:	4a43      	ldr	r2, [pc, #268]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a60:	6413      	str	r3, [r2, #64]	; 0x40
 8008a62:	4b41      	ldr	r3, [pc, #260]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008a6e:	4b3f      	ldr	r3, [pc, #252]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a3e      	ldr	r2, [pc, #248]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a7a:	f7fc fc69 	bl	8005350 <HAL_GetTick>
 8008a7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a80:	e008      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008a82:	f7fc fc65 	bl	8005350 <HAL_GetTick>
 8008a86:	4602      	mov	r2, r0
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	2b02      	cmp	r3, #2
 8008a8e:	d901      	bls.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008a90:	2303      	movs	r3, #3
 8008a92:	e062      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008a94:	4b35      	ldr	r3, [pc, #212]	; (8008b6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d0f0      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008aa0:	4b31      	ldr	r3, [pc, #196]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008aa8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d02f      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d028      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008abe:	4b2a      	ldr	r3, [pc, #168]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ac6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008ac8:	4b29      	ldr	r3, [pc, #164]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008aca:	2201      	movs	r2, #1
 8008acc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008ace:	4b28      	ldr	r3, [pc, #160]	; (8008b70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008ad4:	4a24      	ldr	r2, [pc, #144]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008ada:	4b23      	ldr	r3, [pc, #140]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d114      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008ae6:	f7fc fc33 	bl	8005350 <HAL_GetTick>
 8008aea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008aec:	e00a      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008aee:	f7fc fc2f 	bl	8005350 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e02a      	b.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008b04:	4b18      	ldr	r3, [pc, #96]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0ee      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b1c:	d10d      	bne.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b32:	490d      	ldr	r1, [pc, #52]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	608b      	str	r3, [r1, #8]
 8008b38:	e005      	b.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008b3a:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	4a0a      	ldr	r2, [pc, #40]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008b44:	6093      	str	r3, [r2, #8]
 8008b46:	4b08      	ldr	r3, [pc, #32]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b52:	4905      	ldr	r1, [pc, #20]	; (8008b68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	42470068 	.word	0x42470068
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	40007000 	.word	0x40007000
 8008b70:	42470e40 	.word	0x42470e40

08008b74 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e066      	b.n	8008c58 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	7f5b      	ldrb	r3, [r3, #29]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d105      	bne.n	8008ba0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7fb ffc6 	bl	8004b2c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2202      	movs	r2, #2
 8008ba4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	22ca      	movs	r2, #202	; 0xca
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2253      	movs	r2, #83	; 0x53
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fa45 	bl	8009046 <RTC_EnterInitMode>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d12c      	bne.n	8008c20 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	6812      	ldr	r2, [r2, #0]
 8008bd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bd8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6899      	ldr	r1, [r3, #8]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	691b      	ldr	r3, [r3, #16]
 8008be8:	431a      	orrs	r2, r3
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	431a      	orrs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	68d2      	ldr	r2, [r2, #12]
 8008c00:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6919      	ldr	r1, [r3, #16]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	041a      	lsls	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	430a      	orrs	r2, r1
 8008c14:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa4c 	bl	80090b4 <RTC_ExitInitMode>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d113      	bne.n	8008c4e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c34:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699a      	ldr	r2, [r3, #24]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	22ff      	movs	r2, #255	; 0xff
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8008c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	7f1b      	ldrb	r3, [r3, #28]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_RTC_SetTime+0x1c>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e087      	b.n	8008d8c <HAL_RTC_SetTime+0x12c>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2202      	movs	r2, #2
 8008c86:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d126      	bne.n	8008cdc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d102      	bne.n	8008ca2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fa29 	bl	80090fe <RTC_ByteToBcd2>
 8008cac:	4603      	mov	r3, r0
 8008cae:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	785b      	ldrb	r3, [r3, #1]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f000 fa22 	bl	80090fe <RTC_ByteToBcd2>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cbe:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	789b      	ldrb	r3, [r3, #2]
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f000 fa1a 	bl	80090fe <RTC_ByteToBcd2>
 8008cca:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008ccc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	78db      	ldrb	r3, [r3, #3]
 8008cd4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]
 8008cda:	e018      	b.n	8008d0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	2200      	movs	r2, #0
 8008cee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	785b      	ldrb	r3, [r3, #1]
 8008cfa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008cfc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008cfe:	68ba      	ldr	r2, [r7, #8]
 8008d00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	78db      	ldrb	r3, [r3, #3]
 8008d08:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	22ca      	movs	r2, #202	; 0xca
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	2253      	movs	r2, #83	; 0x53
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d1e:	68f8      	ldr	r0, [r7, #12]
 8008d20:	f000 f991 	bl	8009046 <RTC_EnterInitMode>
 8008d24:	4603      	mov	r3, r0
 8008d26:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d28:	7cfb      	ldrb	r3, [r7, #19]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d120      	bne.n	8008d70 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008d38:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008d3c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d4c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6899      	ldr	r1, [r3, #8]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	68da      	ldr	r2, [r3, #12]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d66:	68f8      	ldr	r0, [r7, #12]
 8008d68:	f000 f9a4 	bl	80090b4 <RTC_ExitInitMode>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d70:	7cfb      	ldrb	r3, [r7, #19]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d102      	bne.n	8008d7c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	22ff      	movs	r2, #255	; 0xff
 8008d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2200      	movs	r2, #0
 8008d88:	771a      	strb	r2, [r3, #28]

  return status;
 8008d8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd90      	pop	{r4, r7, pc}

08008d94 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	60b9      	str	r1, [r7, #8]
 8008d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	691b      	ldr	r3, [r3, #16]
 8008db4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008dc6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	0c1b      	lsrs	r3, r3, #16
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dd6:	b2da      	uxtb	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	0a1b      	lsrs	r3, r3, #8
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	b2db      	uxtb	r3, r3
 8008df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	0d9b      	lsrs	r3, r3, #22
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d11a      	bne.n	8008e46 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	781b      	ldrb	r3, [r3, #0]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 f98f 	bl	8009138 <RTC_Bcd2ToByte>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 f986 	bl	8009138 <RTC_Bcd2ToByte>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	789b      	ldrb	r3, [r3, #2]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f000 f97d 	bl	8009138 <RTC_Bcd2ToByte>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	461a      	mov	r2, r3
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3718      	adds	r7, #24
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e50:	b590      	push	{r4, r7, lr}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7f1b      	ldrb	r3, [r3, #28]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_RTC_SetDate+0x1c>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e071      	b.n	8008f50 <HAL_RTC_SetDate+0x100>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10e      	bne.n	8008e9c <HAL_RTC_SetDate+0x4c>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	f003 0310 	and.w	r3, r3, #16
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d008      	beq.n	8008e9c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	f023 0310 	bic.w	r3, r3, #16
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	330a      	adds	r3, #10
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d11c      	bne.n	8008edc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f929 	bl	80090fe <RTC_ByteToBcd2>
 8008eac:	4603      	mov	r3, r0
 8008eae:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	785b      	ldrb	r3, [r3, #1]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 f922 	bl	80090fe <RTC_ByteToBcd2>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ebe:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	789b      	ldrb	r3, [r3, #2]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f91a 	bl	80090fe <RTC_ByteToBcd2>
 8008eca:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008ecc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e00e      	b.n	8008efa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	78db      	ldrb	r3, [r3, #3]
 8008ee0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	785b      	ldrb	r3, [r3, #1]
 8008ee6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ee8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008eee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	22ca      	movs	r2, #202	; 0xca
 8008f00:	625a      	str	r2, [r3, #36]	; 0x24
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2253      	movs	r2, #83	; 0x53
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f000 f89b 	bl	8009046 <RTC_EnterInitMode>
 8008f10:	4603      	mov	r3, r0
 8008f12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f14:	7cfb      	ldrb	r3, [r7, #19]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10c      	bne.n	8008f34 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f24:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f28:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f2a:	68f8      	ldr	r0, [r7, #12]
 8008f2c:	f000 f8c2 	bl	80090b4 <RTC_ExitInitMode>
 8008f30:	4603      	mov	r3, r0
 8008f32:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008f34:	7cfb      	ldrb	r3, [r7, #19]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d102      	bne.n	8008f40 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	22ff      	movs	r2, #255	; 0xff
 8008f46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	771a      	strb	r2, [r3, #28]

  return status;
 8008f4e:	7cfb      	ldrb	r3, [r7, #19]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	371c      	adds	r7, #28
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd90      	pop	{r4, r7, pc}

08008f58 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008f72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	0c1b      	lsrs	r3, r3, #16
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	f003 031f 	and.w	r3, r3, #31
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	0b5b      	lsrs	r3, r3, #13
 8008fa4:	b2db      	uxtb	r3, r3
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d11a      	bne.n	8008fec <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	78db      	ldrb	r3, [r3, #3]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f000 f8bc 	bl	8009138 <RTC_Bcd2ToByte>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	785b      	ldrb	r3, [r3, #1]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f000 f8b3 	bl	8009138 <RTC_Bcd2ToByte>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	789b      	ldrb	r3, [r3, #2]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f8aa 	bl	8009138 <RTC_Bcd2ToByte>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	68bb      	ldr	r3, [r7, #8]
 8008fea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b084      	sub	sp, #16
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009010:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009012:	f7fc f99d 	bl	8005350 <HAL_GetTick>
 8009016:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009018:	e009      	b.n	800902e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800901a:	f7fc f999 	bl	8005350 <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009028:	d901      	bls.n	800902e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e007      	b.n	800903e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d0ee      	beq.n	800901a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3710      	adds	r7, #16
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}

08009046 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009060:	2b00      	cmp	r3, #0
 8009062:	d122      	bne.n	80090aa <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009072:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009074:	f7fc f96c 	bl	8005350 <HAL_GetTick>
 8009078:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800907a:	e00c      	b.n	8009096 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800907c:	f7fc f968 	bl	8005350 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800908a:	d904      	bls.n	8009096 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2204      	movs	r2, #4
 8009090:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <RTC_EnterInitMode+0x64>
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d1e8      	bne.n	800907c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}

080090b4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090bc:	2300      	movs	r3, #0
 80090be:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090ce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	689b      	ldr	r3, [r3, #8]
 80090d6:	f003 0320 	and.w	r3, r3, #32
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ff89 	bl	8008ff6 <HAL_RTC_WaitForSynchro>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2204      	movs	r2, #4
 80090ee:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80090f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	4603      	mov	r3, r0
 8009106:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800910c:	e005      	b.n	800911a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
 8009110:	3301      	adds	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	3b0a      	subs	r3, #10
 8009118:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	2b09      	cmp	r3, #9
 800911e:	d8f6      	bhi.n	800910e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	011b      	lsls	r3, r3, #4
 8009124:	b2da      	uxtb	r2, r3
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	4313      	orrs	r3, r2
 800912a:	b2db      	uxtb	r3, r3
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009146:	79fb      	ldrb	r3, [r7, #7]
 8009148:	091b      	lsrs	r3, r3, #4
 800914a:	b2db      	uxtb	r3, r3
 800914c:	461a      	mov	r2, r3
 800914e:	0092      	lsls	r2, r2, #2
 8009150:	4413      	add	r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	f003 030f 	and.w	r3, r3, #15
 800915c:	b2da      	uxtb	r2, r3
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	4413      	add	r3, r2
 8009162:	b2db      	uxtb	r3, r3
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d101      	bne.n	8009182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e07b      	b.n	800927a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	d108      	bne.n	800919c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009192:	d009      	beq.n	80091a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	61da      	str	r2, [r3, #28]
 800919a:	e005      	b.n	80091a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d106      	bne.n	80091c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7fb fcde 	bl	8004b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091fa:	431a      	orrs	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	f003 0302 	and.w	r3, r3, #2
 8009204:	431a      	orrs	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	f003 0301 	and.w	r3, r3, #1
 800920e:	431a      	orrs	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009218:	431a      	orrs	r2, r3
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009222:	431a      	orrs	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922c:	ea42 0103 	orr.w	r1, r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	430a      	orrs	r2, r1
 800923e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	0c1b      	lsrs	r3, r3, #16
 8009246:	f003 0104 	and.w	r1, r3, #4
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	f003 0210 	and.w	r2, r3, #16
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	69da      	ldr	r2, [r3, #28]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009268:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b088      	sub	sp, #32
 8009286:	af00      	add	r7, sp, #0
 8009288:	60f8      	str	r0, [r7, #12]
 800928a:	60b9      	str	r1, [r7, #8]
 800928c:	603b      	str	r3, [r7, #0]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800929c:	2b01      	cmp	r3, #1
 800929e:	d101      	bne.n	80092a4 <HAL_SPI_Transmit+0x22>
 80092a0:	2302      	movs	r3, #2
 80092a2:	e126      	b.n	80094f2 <HAL_SPI_Transmit+0x270>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092ac:	f7fc f850 	bl	8005350 <HAL_GetTick>
 80092b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092b2:	88fb      	ldrh	r3, [r7, #6]
 80092b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d002      	beq.n	80092c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092c2:	2302      	movs	r3, #2
 80092c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092c6:	e10b      	b.n	80094e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d002      	beq.n	80092d4 <HAL_SPI_Transmit+0x52>
 80092ce:	88fb      	ldrh	r3, [r7, #6]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092d8:	e102      	b.n	80094e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2203      	movs	r2, #3
 80092de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	88fa      	ldrh	r2, [r7, #6]
 80092f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	88fa      	ldrh	r2, [r7, #6]
 80092f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2200      	movs	r2, #0
 8009304:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2200      	movs	r2, #0
 8009310:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2200      	movs	r2, #0
 8009316:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009320:	d10f      	bne.n	8009342 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009330:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009340:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d007      	beq.n	8009360 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800935e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009368:	d14b      	bne.n	8009402 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d002      	beq.n	8009378 <HAL_SPI_Transmit+0xf6>
 8009372:	8afb      	ldrh	r3, [r7, #22]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d13e      	bne.n	80093f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937c:	881a      	ldrh	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009388:	1c9a      	adds	r2, r3, #2
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009392:	b29b      	uxth	r3, r3
 8009394:	3b01      	subs	r3, #1
 8009396:	b29a      	uxth	r2, r3
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800939c:	e02b      	b.n	80093f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b02      	cmp	r3, #2
 80093aa:	d112      	bne.n	80093d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b0:	881a      	ldrh	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093bc:	1c9a      	adds	r2, r3, #2
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	3b01      	subs	r3, #1
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80093d0:	e011      	b.n	80093f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d2:	f7fb ffbd 	bl	8005350 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d803      	bhi.n	80093ea <HAL_SPI_Transmit+0x168>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093e8:	d102      	bne.n	80093f0 <HAL_SPI_Transmit+0x16e>
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093f4:	e074      	b.n	80094e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d1ce      	bne.n	800939e <HAL_SPI_Transmit+0x11c>
 8009400:	e04c      	b.n	800949c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <HAL_SPI_Transmit+0x18e>
 800940a:	8afb      	ldrh	r3, [r7, #22]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d140      	bne.n	8009492 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	330c      	adds	r3, #12
 800941a:	7812      	ldrb	r2, [r2, #0]
 800941c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800942c:	b29b      	uxth	r3, r3
 800942e:	3b01      	subs	r3, #1
 8009430:	b29a      	uxth	r2, r3
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009436:	e02c      	b.n	8009492 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	689b      	ldr	r3, [r3, #8]
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b02      	cmp	r3, #2
 8009444:	d113      	bne.n	800946e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	330c      	adds	r3, #12
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009462:	b29b      	uxth	r3, r3
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	86da      	strh	r2, [r3, #54]	; 0x36
 800946c:	e011      	b.n	8009492 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800946e:	f7fb ff6f 	bl	8005350 <HAL_GetTick>
 8009472:	4602      	mov	r2, r0
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	1ad3      	subs	r3, r2, r3
 8009478:	683a      	ldr	r2, [r7, #0]
 800947a:	429a      	cmp	r2, r3
 800947c:	d803      	bhi.n	8009486 <HAL_SPI_Transmit+0x204>
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009484:	d102      	bne.n	800948c <HAL_SPI_Transmit+0x20a>
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009490:	e026      	b.n	80094e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009496:	b29b      	uxth	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1cd      	bne.n	8009438 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	6839      	ldr	r1, [r7, #0]
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fb13 	bl	8009acc <SPI_EndRxTxTransaction>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d002      	beq.n	80094b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2220      	movs	r2, #32
 80094b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10a      	bne.n	80094d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ba:	2300      	movs	r3, #0
 80094bc:	613b      	str	r3, [r7, #16]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	613b      	str	r3, [r7, #16]
 80094ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	77fb      	strb	r3, [r7, #31]
 80094dc:	e000      	b.n	80094e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80094de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2201      	movs	r2, #1
 80094e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80094f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
	...

080094fc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	4613      	mov	r3, r2
 8009508:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800950a:	2300      	movs	r3, #0
 800950c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_SPI_Transmit_DMA+0x20>
 8009518:	2302      	movs	r3, #2
 800951a:	e09b      	b.n	8009654 <HAL_SPI_Transmit_DMA+0x158>
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b01      	cmp	r3, #1
 800952e:	d002      	beq.n	8009536 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009530:	2302      	movs	r3, #2
 8009532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009534:	e089      	b.n	800964a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_SPI_Transmit_DMA+0x46>
 800953c:	88fb      	ldrh	r3, [r7, #6]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d102      	bne.n	8009548 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009546:	e080      	b.n	800964a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2203      	movs	r2, #3
 800954c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2200      	movs	r2, #0
 8009554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	68ba      	ldr	r2, [r7, #8]
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	88fa      	ldrh	r2, [r7, #6]
 8009560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	88fa      	ldrh	r2, [r7, #6]
 8009566:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2200      	movs	r2, #0
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2200      	movs	r2, #0
 8009572:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	689b      	ldr	r3, [r3, #8]
 800958a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800958e:	d10f      	bne.n	80095b0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800959e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b4:	4a29      	ldr	r2, [pc, #164]	; (800965c <HAL_SPI_Transmit_DMA+0x160>)
 80095b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095bc:	4a28      	ldr	r2, [pc, #160]	; (8009660 <HAL_SPI_Transmit_DMA+0x164>)
 80095be:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095c4:	4a27      	ldr	r2, [pc, #156]	; (8009664 <HAL_SPI_Transmit_DMA+0x168>)
 80095c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095cc:	2200      	movs	r2, #0
 80095ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d8:	4619      	mov	r1, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	330c      	adds	r3, #12
 80095e0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80095e8:	f7fc f872 	bl	80056d0 <HAL_DMA_Start_IT>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00c      	beq.n	800960c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095f6:	f043 0210 	orr.w	r2, r3, #16
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2201      	movs	r2, #1
 8009606:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800960a:	e01e      	b.n	800964a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009616:	2b40      	cmp	r3, #64	; 0x40
 8009618:	d007      	beq.n	800962a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	681a      	ldr	r2, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009628:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 0220 	orr.w	r2, r2, #32
 8009638:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f042 0202 	orr.w	r2, r2, #2
 8009648:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}
 800965c:	08009939 	.word	0x08009939
 8009660:	08009891 	.word	0x08009891
 8009664:	08009955 	.word	0x08009955

08009668 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	099b      	lsrs	r3, r3, #6
 8009684:	f003 0301 	and.w	r3, r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	d10f      	bne.n	80096ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800968c:	69bb      	ldr	r3, [r7, #24]
 800968e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	099b      	lsrs	r3, r3, #6
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d004      	beq.n	80096ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	4798      	blx	r3
    return;
 80096aa:	e0d7      	b.n	800985c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	085b      	lsrs	r3, r3, #1
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <HAL_SPI_IRQHandler+0x66>
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	09db      	lsrs	r3, r3, #7
 80096bc:	f003 0301 	and.w	r3, r3, #1
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d004      	beq.n	80096ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
    return;
 80096cc:	e0c6      	b.n	800985c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	095b      	lsrs	r3, r3, #5
 80096d2:	f003 0301 	and.w	r3, r3, #1
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d10c      	bne.n	80096f4 <HAL_SPI_IRQHandler+0x8c>
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	099b      	lsrs	r3, r3, #6
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d106      	bne.n	80096f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	0a1b      	lsrs	r3, r3, #8
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 80b4 	beq.w	800985c <HAL_SPI_IRQHandler+0x1f4>
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	095b      	lsrs	r3, r3, #5
 80096f8:	f003 0301 	and.w	r3, r3, #1
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f000 80ad 	beq.w	800985c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	099b      	lsrs	r3, r3, #6
 8009706:	f003 0301 	and.w	r3, r3, #1
 800970a:	2b00      	cmp	r3, #0
 800970c:	d023      	beq.n	8009756 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b03      	cmp	r3, #3
 8009718:	d011      	beq.n	800973e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f043 0204 	orr.w	r2, r3, #4
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009726:	2300      	movs	r3, #0
 8009728:	617b      	str	r3, [r7, #20]
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	617b      	str	r3, [r7, #20]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	e00b      	b.n	8009756 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800973e:	2300      	movs	r3, #0
 8009740:	613b      	str	r3, [r7, #16]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	613b      	str	r3, [r7, #16]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	613b      	str	r3, [r7, #16]
 8009752:	693b      	ldr	r3, [r7, #16]
        return;
 8009754:	e082      	b.n	800985c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	095b      	lsrs	r3, r3, #5
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d014      	beq.n	800978c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f043 0201 	orr.w	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800976e:	2300      	movs	r3, #0
 8009770:	60fb      	str	r3, [r7, #12]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	689b      	ldr	r3, [r3, #8]
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009788:	601a      	str	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	0a1b      	lsrs	r3, r3, #8
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00c      	beq.n	80097b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979c:	f043 0208 	orr.w	r2, r3, #8
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80097a4:	2300      	movs	r3, #0
 80097a6:	60bb      	str	r3, [r7, #8]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	60bb      	str	r3, [r7, #8]
 80097b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d04f      	beq.n	800985a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d104      	bne.n	80097e6 <HAL_SPI_IRQHandler+0x17e>
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f003 0301 	and.w	r3, r3, #1
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d034      	beq.n	8009850 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0203 	bic.w	r2, r2, #3
 80097f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d011      	beq.n	8009822 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009802:	4a18      	ldr	r2, [pc, #96]	; (8009864 <HAL_SPI_IRQHandler+0x1fc>)
 8009804:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800980a:	4618      	mov	r0, r3
 800980c:	f7fc f828 	bl	8005860 <HAL_DMA_Abort_IT>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	d005      	beq.n	8009822 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009826:	2b00      	cmp	r3, #0
 8009828:	d016      	beq.n	8009858 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800982e:	4a0d      	ldr	r2, [pc, #52]	; (8009864 <HAL_SPI_IRQHandler+0x1fc>)
 8009830:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009836:	4618      	mov	r0, r3
 8009838:	f7fc f812 	bl	8005860 <HAL_DMA_Abort_IT>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d00a      	beq.n	8009858 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009846:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800984e:	e003      	b.n	8009858 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f813 	bl	800987c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009856:	e000      	b.n	800985a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009858:	bf00      	nop
    return;
 800985a:	bf00      	nop
  }
}
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	08009995 	.word	0x08009995

08009868 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800989e:	f7fb fd57 	bl	8005350 <HAL_GetTick>
 80098a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b2:	d03b      	beq.n	800992c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	685a      	ldr	r2, [r3, #4]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0220 	bic.w	r2, r2, #32
 80098c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 0202 	bic.w	r2, r2, #2
 80098d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80098d4:	693a      	ldr	r2, [r7, #16]
 80098d6:	2164      	movs	r1, #100	; 0x64
 80098d8:	6978      	ldr	r0, [r7, #20]
 80098da:	f000 f8f7 	bl	8009acc <SPI_EndRxTxTransaction>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d005      	beq.n	80098f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e8:	f043 0220 	orr.w	r2, r3, #32
 80098ec:	697b      	ldr	r3, [r7, #20]
 80098ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	60fb      	str	r3, [r7, #12]
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2200      	movs	r2, #0
 8009912:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	2201      	movs	r2, #1
 8009918:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009924:	6978      	ldr	r0, [r7, #20]
 8009926:	f7ff ffa9 	bl	800987c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800992a:	e002      	b.n	8009932 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800992c:	6978      	ldr	r0, [r7, #20]
 800992e:	f7f9 fc35 	bl	800319c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009932:	3718      	adds	r7, #24
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8009946:	68f8      	ldr	r0, [r7, #12]
 8009948:	f7ff ff8e 	bl	8009868 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}

08009954 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	685a      	ldr	r2, [r3, #4]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f022 0203 	bic.w	r2, r2, #3
 8009970:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009976:	f043 0210 	orr.w	r2, r3, #16
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f7ff ff78 	bl	800987c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800998c:	bf00      	nop
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2200      	movs	r2, #0
 80099a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	f7ff ff64 	bl	800987c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099b4:	bf00      	nop
 80099b6:	3710      	adds	r7, #16
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bd80      	pop	{r7, pc}

080099bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b088      	sub	sp, #32
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80099cc:	f7fb fcc0 	bl	8005350 <HAL_GetTick>
 80099d0:	4602      	mov	r2, r0
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	1a9b      	subs	r3, r3, r2
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	4413      	add	r3, r2
 80099da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80099dc:	f7fb fcb8 	bl	8005350 <HAL_GetTick>
 80099e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80099e2:	4b39      	ldr	r3, [pc, #228]	; (8009ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	015b      	lsls	r3, r3, #5
 80099e8:	0d1b      	lsrs	r3, r3, #20
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	fb02 f303 	mul.w	r3, r2, r3
 80099f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099f2:	e054      	b.n	8009a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80099fa:	d050      	beq.n	8009a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099fc:	f7fb fca8 	bl	8005350 <HAL_GetTick>
 8009a00:	4602      	mov	r2, r0
 8009a02:	69bb      	ldr	r3, [r7, #24]
 8009a04:	1ad3      	subs	r3, r2, r3
 8009a06:	69fa      	ldr	r2, [r7, #28]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d902      	bls.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a0c:	69fb      	ldr	r3, [r7, #28]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d13d      	bne.n	8009a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a2a:	d111      	bne.n	8009a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a34:	d004      	beq.n	8009a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a3e:	d107      	bne.n	8009a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a58:	d10f      	bne.n	8009a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e017      	b.n	8009abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d101      	bne.n	8009a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	bf0c      	ite	eq
 8009aae:	2301      	moveq	r3, #1
 8009ab0:	2300      	movne	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	79fb      	ldrb	r3, [r7, #7]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d19b      	bne.n	80099f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3720      	adds	r7, #32
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	200000b8 	.word	0x200000b8

08009acc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af02      	add	r7, sp, #8
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ad8:	4b1b      	ldr	r3, [pc, #108]	; (8009b48 <SPI_EndRxTxTransaction+0x7c>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a1b      	ldr	r2, [pc, #108]	; (8009b4c <SPI_EndRxTxTransaction+0x80>)
 8009ade:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae2:	0d5b      	lsrs	r3, r3, #21
 8009ae4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ae8:	fb02 f303 	mul.w	r3, r2, r3
 8009aec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009af6:	d112      	bne.n	8009b1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	2180      	movs	r1, #128	; 0x80
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff ff5a 	bl	80099bc <SPI_WaitFlagStateUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d016      	beq.n	8009b3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f043 0220 	orr.w	r2, r3, #32
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009b1a:	2303      	movs	r3, #3
 8009b1c:	e00f      	b.n	8009b3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d00a      	beq.n	8009b3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	3b01      	subs	r3, #1
 8009b28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d0f2      	beq.n	8009b1e <SPI_EndRxTxTransaction+0x52>
 8009b38:	e000      	b.n	8009b3c <SPI_EndRxTxTransaction+0x70>
        break;
 8009b3a:	bf00      	nop
  }

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200000b8 	.word	0x200000b8
 8009b4c:	165e9f81 	.word	0x165e9f81

08009b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e041      	b.n	8009be6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fb f890 	bl	8004c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f000 fa96 	bl	800a0c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3708      	adds	r7, #8
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d001      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e04e      	b.n	8009ca6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	68da      	ldr	r2, [r3, #12]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f042 0201 	orr.w	r2, r2, #1
 8009c1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a23      	ldr	r2, [pc, #140]	; (8009cb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d022      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d01d      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a1f      	ldr	r2, [pc, #124]	; (8009cb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d018      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1e      	ldr	r2, [pc, #120]	; (8009cbc <HAL_TIM_Base_Start_IT+0xcc>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a1c      	ldr	r2, [pc, #112]	; (8009cc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00e      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a1b      	ldr	r2, [pc, #108]	; (8009cc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d009      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a19      	ldr	r2, [pc, #100]	; (8009cc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <HAL_TIM_Base_Start_IT+0x80>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <HAL_TIM_Base_Start_IT+0xdc>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d111      	bne.n	8009c94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2b06      	cmp	r3, #6
 8009c80:	d010      	beq.n	8009ca4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	681a      	ldr	r2, [r3, #0]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0201 	orr.w	r2, r2, #1
 8009c90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c92:	e007      	b.n	8009ca4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0201 	orr.w	r2, r2, #1
 8009ca2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	40010000 	.word	0x40010000
 8009cb8:	40000400 	.word	0x40000400
 8009cbc:	40000800 	.word	0x40000800
 8009cc0:	40000c00 	.word	0x40000c00
 8009cc4:	40010400 	.word	0x40010400
 8009cc8:	40014000 	.word	0x40014000
 8009ccc:	40001800 	.word	0x40001800

08009cd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	f003 0302 	and.w	r3, r3, #2
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d122      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	f003 0302 	and.w	r3, r3, #2
 8009cf0:	2b02      	cmp	r3, #2
 8009cf2:	d11b      	bne.n	8009d2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f06f 0202 	mvn.w	r2, #2
 8009cfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2201      	movs	r2, #1
 8009d02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	f003 0303 	and.w	r3, r3, #3
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d003      	beq.n	8009d1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f9b5 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009d18:	e005      	b.n	8009d26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 f9a7 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 f9b8 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d122      	bne.n	8009d80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	f003 0304 	and.w	r3, r3, #4
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d11b      	bne.n	8009d80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f06f 0204 	mvn.w	r2, #4
 8009d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2202      	movs	r2, #2
 8009d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	699b      	ldr	r3, [r3, #24]
 8009d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d003      	beq.n	8009d6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f98b 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009d6c:	e005      	b.n	8009d7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f97d 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 f98e 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	691b      	ldr	r3, [r3, #16]
 8009d86:	f003 0308 	and.w	r3, r3, #8
 8009d8a:	2b08      	cmp	r3, #8
 8009d8c:	d122      	bne.n	8009dd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d11b      	bne.n	8009dd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0208 	mvn.w	r2, #8
 8009da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2204      	movs	r2, #4
 8009daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d003      	beq.n	8009dc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f961 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009dc0:	e005      	b.n	8009dce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f953 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f964 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0310 	and.w	r3, r3, #16
 8009dde:	2b10      	cmp	r3, #16
 8009de0:	d122      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	f003 0310 	and.w	r3, r3, #16
 8009dec:	2b10      	cmp	r3, #16
 8009dee:	d11b      	bne.n	8009e28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f06f 0210 	mvn.w	r2, #16
 8009df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2208      	movs	r2, #8
 8009dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 f937 	bl	800a082 <HAL_TIM_IC_CaptureCallback>
 8009e14:	e005      	b.n	8009e22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f929 	bl	800a06e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f93a 	bl	800a096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	f003 0301 	and.w	r3, r3, #1
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d10e      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68db      	ldr	r3, [r3, #12]
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d107      	bne.n	8009e54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f06f 0201 	mvn.w	r2, #1
 8009e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f7fa f93a 	bl	80040c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5e:	2b80      	cmp	r3, #128	; 0x80
 8009e60:	d10e      	bne.n	8009e80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6c:	2b80      	cmp	r3, #128	; 0x80
 8009e6e:	d107      	bne.n	8009e80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 fae0 	bl	800a440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8a:	2b40      	cmp	r3, #64	; 0x40
 8009e8c:	d10e      	bne.n	8009eac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b40      	cmp	r3, #64	; 0x40
 8009e9a:	d107      	bne.n	8009eac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f8ff 	bl	800a0aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b20      	cmp	r3, #32
 8009eb8:	d10e      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	f003 0320 	and.w	r3, r3, #32
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d107      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f06f 0220 	mvn.w	r2, #32
 8009ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f000 faaa 	bl	800a42c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009eea:	2300      	movs	r3, #0
 8009eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_TIM_ConfigClockSource+0x1c>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e0b4      	b.n	800a066 <HAL_TIM_ConfigClockSource+0x186>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2202      	movs	r2, #2
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	689b      	ldr	r3, [r3, #8]
 8009f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f34:	d03e      	beq.n	8009fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8009f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f3a:	f200 8087 	bhi.w	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f42:	f000 8086 	beq.w	800a052 <HAL_TIM_ConfigClockSource+0x172>
 8009f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f4a:	d87f      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f4c:	2b70      	cmp	r3, #112	; 0x70
 8009f4e:	d01a      	beq.n	8009f86 <HAL_TIM_ConfigClockSource+0xa6>
 8009f50:	2b70      	cmp	r3, #112	; 0x70
 8009f52:	d87b      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f54:	2b60      	cmp	r3, #96	; 0x60
 8009f56:	d050      	beq.n	8009ffa <HAL_TIM_ConfigClockSource+0x11a>
 8009f58:	2b60      	cmp	r3, #96	; 0x60
 8009f5a:	d877      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f5c:	2b50      	cmp	r3, #80	; 0x50
 8009f5e:	d03c      	beq.n	8009fda <HAL_TIM_ConfigClockSource+0xfa>
 8009f60:	2b50      	cmp	r3, #80	; 0x50
 8009f62:	d873      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f64:	2b40      	cmp	r3, #64	; 0x40
 8009f66:	d058      	beq.n	800a01a <HAL_TIM_ConfigClockSource+0x13a>
 8009f68:	2b40      	cmp	r3, #64	; 0x40
 8009f6a:	d86f      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f6c:	2b30      	cmp	r3, #48	; 0x30
 8009f6e:	d064      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x15a>
 8009f70:	2b30      	cmp	r3, #48	; 0x30
 8009f72:	d86b      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d060      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x15a>
 8009f78:	2b20      	cmp	r3, #32
 8009f7a:	d867      	bhi.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d05c      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x15a>
 8009f80:	2b10      	cmp	r3, #16
 8009f82:	d05a      	beq.n	800a03a <HAL_TIM_ConfigClockSource+0x15a>
 8009f84:	e062      	b.n	800a04c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6818      	ldr	r0, [r3, #0]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	6899      	ldr	r1, [r3, #8]
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	685a      	ldr	r2, [r3, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f000 f9ad 	bl	800a2f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	609a      	str	r2, [r3, #8]
      break;
 8009fb2:	e04f      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	6899      	ldr	r1, [r3, #8]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	68db      	ldr	r3, [r3, #12]
 8009fc4:	f000 f996 	bl	800a2f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	689a      	ldr	r2, [r3, #8]
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fd6:	609a      	str	r2, [r3, #8]
      break;
 8009fd8:	e03c      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6818      	ldr	r0, [r3, #0]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	6859      	ldr	r1, [r3, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	f000 f90a 	bl	800a200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	2150      	movs	r1, #80	; 0x50
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f963 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 8009ff8:	e02c      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6818      	ldr	r0, [r3, #0]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	6859      	ldr	r1, [r3, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	461a      	mov	r2, r3
 800a008:	f000 f929 	bl	800a25e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2160      	movs	r1, #96	; 0x60
 800a012:	4618      	mov	r0, r3
 800a014:	f000 f953 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a018:	e01c      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6818      	ldr	r0, [r3, #0]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6859      	ldr	r1, [r3, #4]
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	68db      	ldr	r3, [r3, #12]
 800a026:	461a      	mov	r2, r3
 800a028:	f000 f8ea 	bl	800a200 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	2140      	movs	r1, #64	; 0x40
 800a032:	4618      	mov	r0, r3
 800a034:	f000 f943 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a038:	e00c      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4619      	mov	r1, r3
 800a044:	4610      	mov	r0, r2
 800a046:	f000 f93a 	bl	800a2be <TIM_ITRx_SetConfig>
      break;
 800a04a:	e003      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
      break;
 800a050:	e000      	b.n	800a054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	2201      	movs	r2, #1
 800a058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a064:	7bfb      	ldrb	r3, [r7, #15]
}
 800a066:	4618      	mov	r0, r3
 800a068:	3710      	adds	r7, #16
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}

0800a06e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a06e:	b480      	push	{r7}
 800a070:	b083      	sub	sp, #12
 800a072:	af00      	add	r7, sp, #0
 800a074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a076:	bf00      	nop
 800a078:	370c      	adds	r7, #12
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr

0800a082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a082:	b480      	push	{r7}
 800a084:	b083      	sub	sp, #12
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a08a:	bf00      	nop
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr

0800a096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a096:	b480      	push	{r7}
 800a098:	b083      	sub	sp, #12
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a09e:	bf00      	nop
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr

0800a0aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
	...

0800a0c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a40      	ldr	r2, [pc, #256]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d013      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d00f      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a3d      	ldr	r2, [pc, #244]	; (800a1d8 <TIM_Base_SetConfig+0x118>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d00b      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a3c      	ldr	r2, [pc, #240]	; (800a1dc <TIM_Base_SetConfig+0x11c>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d007      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a3b      	ldr	r2, [pc, #236]	; (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_Base_SetConfig+0x40>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	4a3a      	ldr	r2, [pc, #232]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d108      	bne.n	800a112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a2f      	ldr	r2, [pc, #188]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d02b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a120:	d027      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a2c      	ldr	r2, [pc, #176]	; (800a1d8 <TIM_Base_SetConfig+0x118>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d023      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a2b      	ldr	r2, [pc, #172]	; (800a1dc <TIM_Base_SetConfig+0x11c>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d01f      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	4a2a      	ldr	r2, [pc, #168]	; (800a1e0 <TIM_Base_SetConfig+0x120>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d01b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d017      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	4a28      	ldr	r2, [pc, #160]	; (800a1e8 <TIM_Base_SetConfig+0x128>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d013      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	4a27      	ldr	r2, [pc, #156]	; (800a1ec <TIM_Base_SetConfig+0x12c>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d00f      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	4a26      	ldr	r2, [pc, #152]	; (800a1f0 <TIM_Base_SetConfig+0x130>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d00b      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4a25      	ldr	r2, [pc, #148]	; (800a1f4 <TIM_Base_SetConfig+0x134>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d007      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a24      	ldr	r2, [pc, #144]	; (800a1f8 <TIM_Base_SetConfig+0x138>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d003      	beq.n	800a172 <TIM_Base_SetConfig+0xb2>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a23      	ldr	r2, [pc, #140]	; (800a1fc <TIM_Base_SetConfig+0x13c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d108      	bne.n	800a184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	4313      	orrs	r3, r2
 800a182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689a      	ldr	r2, [r3, #8]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a0a      	ldr	r2, [pc, #40]	; (800a1d4 <TIM_Base_SetConfig+0x114>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d003      	beq.n	800a1b8 <TIM_Base_SetConfig+0xf8>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <TIM_Base_SetConfig+0x124>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d103      	bne.n	800a1c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	691a      	ldr	r2, [r3, #16]
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	615a      	str	r2, [r3, #20]
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	40010000 	.word	0x40010000
 800a1d8:	40000400 	.word	0x40000400
 800a1dc:	40000800 	.word	0x40000800
 800a1e0:	40000c00 	.word	0x40000c00
 800a1e4:	40010400 	.word	0x40010400
 800a1e8:	40014000 	.word	0x40014000
 800a1ec:	40014400 	.word	0x40014400
 800a1f0:	40014800 	.word	0x40014800
 800a1f4:	40001800 	.word	0x40001800
 800a1f8:	40001c00 	.word	0x40001c00
 800a1fc:	40002000 	.word	0x40002000

0800a200 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6a1b      	ldr	r3, [r3, #32]
 800a210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f023 0201 	bic.w	r2, r3, #1
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a224:	693b      	ldr	r3, [r7, #16]
 800a226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a22a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	011b      	lsls	r3, r3, #4
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	4313      	orrs	r3, r2
 800a234:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f023 030a 	bic.w	r3, r3, #10
 800a23c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	4313      	orrs	r3, r2
 800a244:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	621a      	str	r2, [r3, #32]
}
 800a252:	bf00      	nop
 800a254:	371c      	adds	r7, #28
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25e:	b480      	push	{r7}
 800a260:	b087      	sub	sp, #28
 800a262:	af00      	add	r7, sp, #0
 800a264:	60f8      	str	r0, [r7, #12]
 800a266:	60b9      	str	r1, [r7, #8]
 800a268:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f023 0210 	bic.w	r2, r3, #16
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6a1b      	ldr	r3, [r3, #32]
 800a280:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a288:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	031b      	lsls	r3, r3, #12
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	4313      	orrs	r3, r2
 800a292:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a29a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	011b      	lsls	r3, r3, #4
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	697a      	ldr	r2, [r7, #20]
 800a2aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	621a      	str	r2, [r3, #32]
}
 800a2b2:	bf00      	nop
 800a2b4:	371c      	adds	r7, #28
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b085      	sub	sp, #20
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f043 0307 	orr.w	r3, r3, #7
 800a2e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a30e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	431a      	orrs	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	609a      	str	r2, [r3, #8]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a344:	2b01      	cmp	r3, #1
 800a346:	d101      	bne.n	800a34c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a348:	2302      	movs	r3, #2
 800a34a:	e05a      	b.n	800a402 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2201      	movs	r2, #1
 800a350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	68fa      	ldr	r2, [r7, #12]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68fa      	ldr	r2, [r7, #12]
 800a384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a21      	ldr	r2, [pc, #132]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d022      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a398:	d01d      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a1d      	ldr	r2, [pc, #116]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d018      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	4a1b      	ldr	r2, [pc, #108]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d013      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a1a      	ldr	r2, [pc, #104]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d00e      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a18      	ldr	r2, [pc, #96]	; (800a420 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d009      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4a17      	ldr	r2, [pc, #92]	; (800a424 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d004      	beq.n	800a3d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4a15      	ldr	r2, [pc, #84]	; (800a428 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d10c      	bne.n	800a3f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	68ba      	ldr	r2, [r7, #8]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68ba      	ldr	r2, [r7, #8]
 800a3ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3714      	adds	r7, #20
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	40010000 	.word	0x40010000
 800a414:	40000400 	.word	0x40000400
 800a418:	40000800 	.word	0x40000800
 800a41c:	40000c00 	.word	0x40000c00
 800a420:	40010400 	.word	0x40010400
 800a424:	40014000 	.word	0x40014000
 800a428:	40001800 	.word	0x40001800

0800a42c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a434:	bf00      	nop
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a440:	b480      	push	{r7}
 800a442:	b083      	sub	sp, #12
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e03f      	b.n	800a4e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d106      	bne.n	800a480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7fa fc34 	bl	8004ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2224      	movs	r2, #36	; 0x24
 800a484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fe2b 	bl	800b0f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	695a      	ldr	r2, [r3, #20]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a4cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2220      	movs	r2, #32
 800a4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a4e4:	2300      	movs	r3, #0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	60f8      	str	r0, [r7, #12]
 800a4f6:	60b9      	str	r1, [r7, #8]
 800a4f8:	4613      	mov	r3, r2
 800a4fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b20      	cmp	r3, #32
 800a506:	d11d      	bne.n	800a544 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <HAL_UART_Receive_IT+0x26>
 800a50e:	88fb      	ldrh	r3, [r7, #6]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e016      	b.n	800a546 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_UART_Receive_IT+0x38>
 800a522:	2302      	movs	r3, #2
 800a524:	e00f      	b.n	800a546 <HAL_UART_Receive_IT+0x58>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	461a      	mov	r2, r3
 800a538:	68b9      	ldr	r1, [r7, #8]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fbd9 	bl	800acf2 <UART_Start_Receive_IT>
 800a540:	4603      	mov	r3, r0
 800a542:	e000      	b.n	800a546 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a544:	2302      	movs	r3, #2
  }
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
	...

0800a550 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b08c      	sub	sp, #48	; 0x30
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	4613      	mov	r3, r2
 800a55c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b20      	cmp	r3, #32
 800a568:	d165      	bne.n	800a636 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <HAL_UART_Transmit_DMA+0x26>
 800a570:	88fb      	ldrh	r3, [r7, #6]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e05e      	b.n	800a638 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <HAL_UART_Transmit_DMA+0x38>
 800a584:	2302      	movs	r3, #2
 800a586:	e057      	b.n	800a638 <HAL_UART_Transmit_DMA+0xe8>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	88fa      	ldrh	r2, [r7, #6]
 800a59a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	88fa      	ldrh	r2, [r7, #6]
 800a5a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2221      	movs	r2, #33	; 0x21
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b4:	4a22      	ldr	r2, [pc, #136]	; (800a640 <HAL_UART_Transmit_DMA+0xf0>)
 800a5b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	4a21      	ldr	r2, [pc, #132]	; (800a644 <HAL_UART_Transmit_DMA+0xf4>)
 800a5be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5c4:	4a20      	ldr	r2, [pc, #128]	; (800a648 <HAL_UART_Transmit_DMA+0xf8>)
 800a5c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a5d0:	f107 0308 	add.w	r3, r7, #8
 800a5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5dc:	6819      	ldr	r1, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f7fb f872 	bl	80056d0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a5f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	3314      	adds	r3, #20
 800a604:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	e853 3f00 	ldrex	r3, [r3]
 800a60c:	617b      	str	r3, [r7, #20]
   return(result);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a614:	62bb      	str	r3, [r7, #40]	; 0x28
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	3314      	adds	r3, #20
 800a61c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61e:	627a      	str	r2, [r7, #36]	; 0x24
 800a620:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a622:	6a39      	ldr	r1, [r7, #32]
 800a624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a626:	e841 2300 	strex	r3, r2, [r1]
 800a62a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1e5      	bne.n	800a5fe <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	e000      	b.n	800a638 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a636:	2302      	movs	r3, #2
  }
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3730      	adds	r7, #48	; 0x30
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	0800aba9 	.word	0x0800aba9
 800a644:	0800ac43 	.word	0x0800ac43
 800a648:	0800ac5f 	.word	0x0800ac5f

0800a64c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b0ba      	sub	sp, #232	; 0xe8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a672:	2300      	movs	r3, #0
 800a674:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a678:	2300      	movs	r3, #0
 800a67a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a68a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10f      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x66>
 800a69e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6a2:	f003 0320 	and.w	r3, r3, #32
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fc66 	bl	800af7c <UART_Receive_IT>
      return;
 800a6b0:	e256      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a6b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 80de 	beq.w	800a878 <HAL_UART_IRQHandler+0x22c>
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d106      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 80d1 	beq.w	800a878 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <HAL_UART_IRQHandler+0xae>
 800a6e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	f043 0201 	orr.w	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a6fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fe:	f003 0304 	and.w	r3, r3, #4
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <HAL_UART_IRQHandler+0xd2>
 800a706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a70a:	f003 0301 	and.w	r3, r3, #1
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d005      	beq.n	800a71e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a716:	f043 0202 	orr.w	r2, r3, #2
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a722:	f003 0302 	and.w	r3, r3, #2
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00b      	beq.n	800a742 <HAL_UART_IRQHandler+0xf6>
 800a72a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d005      	beq.n	800a742 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73a:	f043 0204 	orr.w	r2, r3, #4
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	f003 0308 	and.w	r3, r3, #8
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <HAL_UART_IRQHandler+0x126>
 800a74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a752:	f003 0320 	and.w	r3, r3, #32
 800a756:	2b00      	cmp	r3, #0
 800a758:	d105      	bne.n	800a766 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a75a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d005      	beq.n	800a772 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a76a:	f043 0208 	orr.w	r2, r3, #8
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 81ed 	beq.w	800ab56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a77c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a780:	f003 0320 	and.w	r3, r3, #32
 800a784:	2b00      	cmp	r3, #0
 800a786:	d008      	beq.n	800a79a <HAL_UART_IRQHandler+0x14e>
 800a788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b00      	cmp	r3, #0
 800a792:	d002      	beq.n	800a79a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 fbf1 	bl	800af7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	695b      	ldr	r3, [r3, #20]
 800a7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a4:	2b40      	cmp	r3, #64	; 0x40
 800a7a6:	bf0c      	ite	eq
 800a7a8:	2301      	moveq	r3, #1
 800a7aa:	2300      	movne	r3, #0
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x17a>
 800a7be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d04f      	beq.n	800a866 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 faf9 	bl	800adbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d6:	2b40      	cmp	r3, #64	; 0x40
 800a7d8:	d141      	bne.n	800a85e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3314      	adds	r3, #20
 800a7e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7e8:	e853 3f00 	ldrex	r3, [r3]
 800a7ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3314      	adds	r3, #20
 800a802:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a806:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a80a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a812:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a816:	e841 2300 	strex	r3, r2, [r1]
 800a81a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a81e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1d9      	bne.n	800a7da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d013      	beq.n	800a856 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a832:	4a7d      	ldr	r2, [pc, #500]	; (800aa28 <HAL_UART_IRQHandler+0x3dc>)
 800a834:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7fb f810 	bl	8005860 <HAL_DMA_Abort_IT>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d016      	beq.n	800a874 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a854:	e00e      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f000 f990 	bl	800ab7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a85c:	e00a      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 f98c 	bl	800ab7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a864:	e006      	b.n	800a874 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f988 	bl	800ab7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800a872:	e170      	b.n	800ab56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a874:	bf00      	nop
    return;
 800a876:	e16e      	b.n	800ab56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	f040 814a 	bne.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a886:	f003 0310 	and.w	r3, r3, #16
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 8143 	beq.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800a890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a894:	f003 0310 	and.w	r3, r3, #16
 800a898:	2b00      	cmp	r3, #0
 800a89a:	f000 813c 	beq.w	800ab16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60bb      	str	r3, [r7, #8]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	60bb      	str	r3, [r7, #8]
 800a8b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	695b      	ldr	r3, [r3, #20]
 800a8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8be:	2b40      	cmp	r3, #64	; 0x40
 800a8c0:	f040 80b4 	bne.w	800aa2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a8d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	f000 8140 	beq.w	800ab5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	f080 8139 	bcs.w	800ab5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fa:	f000 8088 	beq.w	800aa0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	330c      	adds	r3, #12
 800a904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a908:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a90c:	e853 3f00 	ldrex	r3, [r3]
 800a910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a914:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a91c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	330c      	adds	r3, #12
 800a926:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a92a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a92e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a932:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a936:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1d9      	bne.n	800a8fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3314      	adds	r3, #20
 800a950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a95a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	3314      	adds	r3, #20
 800a96a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a96e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a972:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a976:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a97a:	e841 2300 	strex	r3, r2, [r1]
 800a97e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a982:	2b00      	cmp	r3, #0
 800a984:	d1e1      	bne.n	800a94a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	3314      	adds	r3, #20
 800a98c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a99c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3314      	adds	r3, #20
 800a9a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a9aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a9ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a9b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a9b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e3      	bne.n	800a986 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2220      	movs	r2, #32
 800a9c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	330c      	adds	r3, #12
 800a9d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9d6:	e853 3f00 	ldrex	r3, [r3]
 800a9da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9de:	f023 0310 	bic.w	r3, r3, #16
 800a9e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	330c      	adds	r3, #12
 800a9ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a9f0:	65ba      	str	r2, [r7, #88]	; 0x58
 800a9f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1e3      	bne.n	800a9cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fa feb9 	bl	8005780 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8b6 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa24:	e099      	b.n	800ab5a <HAL_UART_IRQHandler+0x50e>
 800aa26:	bf00      	nop
 800aa28:	0800ae85 	.word	0x0800ae85
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	f000 808b 	beq.w	800ab5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800aa48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f000 8086 	beq.w	800ab5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	330c      	adds	r3, #12
 800aa58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	e853 3f00 	ldrex	r3, [r3]
 800aa60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	330c      	adds	r3, #12
 800aa72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800aa76:	647a      	str	r2, [r7, #68]	; 0x44
 800aa78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa7e:	e841 2300 	strex	r3, r2, [r1]
 800aa82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1e3      	bne.n	800aa52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	3314      	adds	r3, #20
 800aa90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	623b      	str	r3, [r7, #32]
   return(result);
 800aa9a:	6a3b      	ldr	r3, [r7, #32]
 800aa9c:	f023 0301 	bic.w	r3, r3, #1
 800aaa0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	3314      	adds	r3, #20
 800aaaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aaae:	633a      	str	r2, [r7, #48]	; 0x30
 800aab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aab6:	e841 2300 	strex	r3, r2, [r1]
 800aaba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1e3      	bne.n	800aa8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2220      	movs	r2, #32
 800aac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	330c      	adds	r3, #12
 800aad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	e853 3f00 	ldrex	r3, [r3]
 800aade:	60fb      	str	r3, [r7, #12]
   return(result);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	f023 0310 	bic.w	r3, r3, #16
 800aae6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	330c      	adds	r3, #12
 800aaf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800aaf4:	61fa      	str	r2, [r7, #28]
 800aaf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	69b9      	ldr	r1, [r7, #24]
 800aafa:	69fa      	ldr	r2, [r7, #28]
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	617b      	str	r3, [r7, #20]
   return(result);
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e3      	bne.n	800aad0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ab08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 f83e 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ab14:	e023      	b.n	800ab5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ab16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <HAL_UART_IRQHandler+0x4ea>
 800ab22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d003      	beq.n	800ab36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 f9bc 	bl	800aeac <UART_Transmit_IT>
    return;
 800ab34:	e014      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ab36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00e      	beq.n	800ab60 <HAL_UART_IRQHandler+0x514>
 800ab42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d008      	beq.n	800ab60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9fc 	bl	800af4c <UART_EndTransmit_IT>
    return;
 800ab54:	e004      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
    return;
 800ab56:	bf00      	nop
 800ab58:	e002      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
      return;
 800ab5a:	bf00      	nop
 800ab5c:	e000      	b.n	800ab60 <HAL_UART_IRQHandler+0x514>
      return;
 800ab5e:	bf00      	nop
  }
}
 800ab60:	37e8      	adds	r7, #232	; 0xe8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop

0800ab68 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	460b      	mov	r3, r1
 800ab9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ab9c:	bf00      	nop
 800ab9e:	370c      	adds	r7, #12
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b090      	sub	sp, #64	; 0x40
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d137      	bne.n	800ac34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800abc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abc6:	2200      	movs	r2, #0
 800abc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800abca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3314      	adds	r3, #20
 800abd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	623b      	str	r3, [r7, #32]
   return(result);
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800abe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3314      	adds	r3, #20
 800abe8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800abea:	633a      	str	r2, [r7, #48]	; 0x30
 800abec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e5      	bne.n	800abca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800abfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	330c      	adds	r3, #12
 800ac04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac14:	637b      	str	r3, [r7, #52]	; 0x34
 800ac16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	330c      	adds	r3, #12
 800ac1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac1e:	61fa      	str	r2, [r7, #28]
 800ac20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	69b9      	ldr	r1, [r7, #24]
 800ac24:	69fa      	ldr	r2, [r7, #28]
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	617b      	str	r3, [r7, #20]
   return(result);
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e5      	bne.n	800abfe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac32:	e002      	b.n	800ac3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ac34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ac36:	f7f8 fa9b 	bl	8003170 <HAL_UART_TxCpltCallback>
}
 800ac3a:	bf00      	nop
 800ac3c:	3740      	adds	r7, #64	; 0x40
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f7ff ff89 	bl	800ab68 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac56:	bf00      	nop
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac7a:	2b80      	cmp	r3, #128	; 0x80
 800ac7c:	bf0c      	ite	eq
 800ac7e:	2301      	moveq	r3, #1
 800ac80:	2300      	movne	r3, #0
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac8c:	b2db      	uxtb	r3, r3
 800ac8e:	2b21      	cmp	r3, #33	; 0x21
 800ac90:	d108      	bne.n	800aca4 <UART_DMAError+0x46>
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d005      	beq.n	800aca4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800ac9e:	68b8      	ldr	r0, [r7, #8]
 800aca0:	f000 f865 	bl	800ad6e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	bf0c      	ite	eq
 800acb2:	2301      	moveq	r3, #1
 800acb4:	2300      	movne	r3, #0
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b22      	cmp	r3, #34	; 0x22
 800acc4:	d108      	bne.n	800acd8 <UART_DMAError+0x7a>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d005      	beq.n	800acd8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	2200      	movs	r2, #0
 800acd0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800acd2:	68b8      	ldr	r0, [r7, #8]
 800acd4:	f000 f873 	bl	800adbe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acdc:	f043 0210 	orr.w	r2, r3, #16
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ace4:	68b8      	ldr	r0, [r7, #8]
 800ace6:	f7ff ff49 	bl	800ab7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b085      	sub	sp, #20
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	60b9      	str	r1, [r7, #8]
 800acfc:	4613      	mov	r3, r2
 800acfe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	88fa      	ldrh	r2, [r7, #6]
 800ad0a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	88fa      	ldrh	r2, [r7, #6]
 800ad10:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2222      	movs	r2, #34	; 0x22
 800ad1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d007      	beq.n	800ad40 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ad3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	695a      	ldr	r2, [r3, #20]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f042 0201 	orr.w	r2, r2, #1
 800ad4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f042 0220 	orr.w	r2, r2, #32
 800ad5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b089      	sub	sp, #36	; 0x24
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	330c      	adds	r3, #12
 800ad7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	e853 3f00 	ldrex	r3, [r3]
 800ad84:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad8c:	61fb      	str	r3, [r7, #28]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	330c      	adds	r3, #12
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	61ba      	str	r2, [r7, #24]
 800ad98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9a:	6979      	ldr	r1, [r7, #20]
 800ad9c:	69ba      	ldr	r2, [r7, #24]
 800ad9e:	e841 2300 	strex	r3, r2, [r1]
 800ada2:	613b      	str	r3, [r7, #16]
   return(result);
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1e5      	bne.n	800ad76 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2220      	movs	r2, #32
 800adae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800adb2:	bf00      	nop
 800adb4:	3724      	adds	r7, #36	; 0x24
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b095      	sub	sp, #84	; 0x54
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	330c      	adds	r3, #12
 800adcc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add0:	e853 3f00 	ldrex	r3, [r3]
 800add4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800add6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800addc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	330c      	adds	r3, #12
 800ade4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ade6:	643a      	str	r2, [r7, #64]	; 0x40
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adee:	e841 2300 	strex	r3, r2, [r1]
 800adf2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d1e5      	bne.n	800adc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae02:	6a3b      	ldr	r3, [r7, #32]
 800ae04:	e853 3f00 	ldrex	r3, [r3]
 800ae08:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	f023 0301 	bic.w	r3, r3, #1
 800ae10:	64bb      	str	r3, [r7, #72]	; 0x48
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3314      	adds	r3, #20
 800ae18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ae1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae22:	e841 2300 	strex	r3, r2, [r1]
 800ae26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1e5      	bne.n	800adfa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d119      	bne.n	800ae6a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	330c      	adds	r3, #12
 800ae3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	e853 3f00 	ldrex	r3, [r3]
 800ae44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	f023 0310 	bic.w	r3, r3, #16
 800ae4c:	647b      	str	r3, [r7, #68]	; 0x44
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	330c      	adds	r3, #12
 800ae54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae56:	61ba      	str	r2, [r7, #24]
 800ae58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae5a:	6979      	ldr	r1, [r7, #20]
 800ae5c:	69ba      	ldr	r2, [r7, #24]
 800ae5e:	e841 2300 	strex	r3, r2, [r1]
 800ae62:	613b      	str	r3, [r7, #16]
   return(result);
 800ae64:	693b      	ldr	r3, [r7, #16]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d1e5      	bne.n	800ae36 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ae78:	bf00      	nop
 800ae7a:	3754      	adds	r7, #84	; 0x54
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7ff fe6c 	bl	800ab7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aea4:	bf00      	nop
 800aea6:	3710      	adds	r7, #16
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	2b21      	cmp	r3, #33	; 0x21
 800aebe:	d13e      	bne.n	800af3e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aec8:	d114      	bne.n	800aef4 <UART_Transmit_IT+0x48>
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	691b      	ldr	r3, [r3, #16]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d110      	bne.n	800aef4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6a1b      	ldr	r3, [r3, #32]
 800aed6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	881b      	ldrh	r3, [r3, #0]
 800aedc:	461a      	mov	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aee6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a1b      	ldr	r3, [r3, #32]
 800aeec:	1c9a      	adds	r2, r3, #2
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	621a      	str	r2, [r3, #32]
 800aef2:	e008      	b.n	800af06 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	1c59      	adds	r1, r3, #1
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	6211      	str	r1, [r2, #32]
 800aefe:	781a      	ldrb	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	3b01      	subs	r3, #1
 800af0e:	b29b      	uxth	r3, r3
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	4619      	mov	r1, r3
 800af14:	84d1      	strh	r1, [r2, #38]	; 0x26
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10f      	bne.n	800af3a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	68da      	ldr	r2, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800af28:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af38:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800af3a:	2300      	movs	r3, #0
 800af3c:	e000      	b.n	800af40 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800af3e:	2302      	movs	r3, #2
  }
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	68da      	ldr	r2, [r3, #12]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f7f8 f8ff 	bl	8003170 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3708      	adds	r7, #8
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b08c      	sub	sp, #48	; 0x30
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b22      	cmp	r3, #34	; 0x22
 800af8e:	f040 80ab 	bne.w	800b0e8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af9a:	d117      	bne.n	800afcc <UART_Receive_IT+0x50>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d113      	bne.n	800afcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afac:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	b29a      	uxth	r2, r3
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc4:	1c9a      	adds	r2, r3, #2
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	629a      	str	r2, [r3, #40]	; 0x28
 800afca:	e026      	b.n	800b01a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afde:	d007      	beq.n	800aff0 <UART_Receive_IT+0x74>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <UART_Receive_IT+0x82>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d106      	bne.n	800affe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800affa:	701a      	strb	r2, [r3, #0]
 800affc:	e008      	b.n	800b010 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b014:	1c5a      	adds	r2, r3, #1
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b01e:	b29b      	uxth	r3, r3
 800b020:	3b01      	subs	r3, #1
 800b022:	b29b      	uxth	r3, r3
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	4619      	mov	r1, r3
 800b028:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d15a      	bne.n	800b0e4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f022 0220 	bic.w	r2, r2, #32
 800b03c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	68da      	ldr	r2, [r3, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b04c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	695a      	ldr	r2, [r3, #20]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f022 0201 	bic.w	r2, r2, #1
 800b05c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2220      	movs	r2, #32
 800b062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d135      	bne.n	800b0da <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2200      	movs	r2, #0
 800b072:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	330c      	adds	r3, #12
 800b07a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	e853 3f00 	ldrex	r3, [r3]
 800b082:	613b      	str	r3, [r7, #16]
   return(result);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f023 0310 	bic.w	r3, r3, #16
 800b08a:	627b      	str	r3, [r7, #36]	; 0x24
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	330c      	adds	r3, #12
 800b092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b094:	623a      	str	r2, [r7, #32]
 800b096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b098:	69f9      	ldr	r1, [r7, #28]
 800b09a:	6a3a      	ldr	r2, [r7, #32]
 800b09c:	e841 2300 	strex	r3, r2, [r1]
 800b0a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d1e5      	bne.n	800b074 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0310 	and.w	r3, r3, #16
 800b0b2:	2b10      	cmp	r3, #16
 800b0b4:	d10a      	bne.n	800b0cc <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60fb      	str	r3, [r7, #12]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fd5c 	bl	800ab90 <HAL_UARTEx_RxEventCallback>
 800b0d8:	e002      	b.n	800b0e0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b0da:	6878      	ldr	r0, [r7, #4]
 800b0dc:	f7f7 fd90 	bl	8002c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	e002      	b.n	800b0ea <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e000      	b.n	800b0ea <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b0e8:	2302      	movs	r3, #2
  }
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3730      	adds	r7, #48	; 0x30
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
	...

0800b0f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b0f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0f8:	b0c0      	sub	sp, #256	; 0x100
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b10c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b110:	68d9      	ldr	r1, [r3, #12]
 800b112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	ea40 0301 	orr.w	r3, r0, r1
 800b11c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b122:	689a      	ldr	r2, [r3, #8]
 800b124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b128:	691b      	ldr	r3, [r3, #16]
 800b12a:	431a      	orrs	r2, r3
 800b12c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b130:	695b      	ldr	r3, [r3, #20]
 800b132:	431a      	orrs	r2, r3
 800b134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b138:	69db      	ldr	r3, [r3, #28]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b14c:	f021 010c 	bic.w	r1, r1, #12
 800b150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b15a:	430b      	orrs	r3, r1
 800b15c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b15e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	695b      	ldr	r3, [r3, #20]
 800b166:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b16a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b16e:	6999      	ldr	r1, [r3, #24]
 800b170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	ea40 0301 	orr.w	r3, r0, r1
 800b17a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b17c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	4b8f      	ldr	r3, [pc, #572]	; (800b3c0 <UART_SetConfig+0x2cc>)
 800b184:	429a      	cmp	r2, r3
 800b186:	d005      	beq.n	800b194 <UART_SetConfig+0xa0>
 800b188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4b8d      	ldr	r3, [pc, #564]	; (800b3c4 <UART_SetConfig+0x2d0>)
 800b190:	429a      	cmp	r2, r3
 800b192:	d104      	bne.n	800b19e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b194:	f7fd fbc6 	bl	8008924 <HAL_RCC_GetPCLK2Freq>
 800b198:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b19c:	e003      	b.n	800b1a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b19e:	f7fd fbad 	bl	80088fc <HAL_RCC_GetPCLK1Freq>
 800b1a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1b0:	f040 810c 	bne.w	800b3cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b1be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b1c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	1891      	adds	r1, r2, r2
 800b1cc:	65b9      	str	r1, [r7, #88]	; 0x58
 800b1ce:	415b      	adcs	r3, r3
 800b1d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	eb12 0801 	adds.w	r8, r2, r1
 800b1dc:	4629      	mov	r1, r5
 800b1de:	eb43 0901 	adc.w	r9, r3, r1
 800b1e2:	f04f 0200 	mov.w	r2, #0
 800b1e6:	f04f 0300 	mov.w	r3, #0
 800b1ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b1ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b1f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b1f6:	4690      	mov	r8, r2
 800b1f8:	4699      	mov	r9, r3
 800b1fa:	4623      	mov	r3, r4
 800b1fc:	eb18 0303 	adds.w	r3, r8, r3
 800b200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b204:	462b      	mov	r3, r5
 800b206:	eb49 0303 	adc.w	r3, r9, r3
 800b20a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2200      	movs	r2, #0
 800b216:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b21a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b21e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b222:	460b      	mov	r3, r1
 800b224:	18db      	adds	r3, r3, r3
 800b226:	653b      	str	r3, [r7, #80]	; 0x50
 800b228:	4613      	mov	r3, r2
 800b22a:	eb42 0303 	adc.w	r3, r2, r3
 800b22e:	657b      	str	r3, [r7, #84]	; 0x54
 800b230:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b234:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b238:	f7f5 fb78 	bl	800092c <__aeabi_uldivmod>
 800b23c:	4602      	mov	r2, r0
 800b23e:	460b      	mov	r3, r1
 800b240:	4b61      	ldr	r3, [pc, #388]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b242:	fba3 2302 	umull	r2, r3, r3, r2
 800b246:	095b      	lsrs	r3, r3, #5
 800b248:	011c      	lsls	r4, r3, #4
 800b24a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b24e:	2200      	movs	r2, #0
 800b250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b254:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b258:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b25c:	4642      	mov	r2, r8
 800b25e:	464b      	mov	r3, r9
 800b260:	1891      	adds	r1, r2, r2
 800b262:	64b9      	str	r1, [r7, #72]	; 0x48
 800b264:	415b      	adcs	r3, r3
 800b266:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b268:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b26c:	4641      	mov	r1, r8
 800b26e:	eb12 0a01 	adds.w	sl, r2, r1
 800b272:	4649      	mov	r1, r9
 800b274:	eb43 0b01 	adc.w	fp, r3, r1
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b284:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b288:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b28c:	4692      	mov	sl, r2
 800b28e:	469b      	mov	fp, r3
 800b290:	4643      	mov	r3, r8
 800b292:	eb1a 0303 	adds.w	r3, sl, r3
 800b296:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b29a:	464b      	mov	r3, r9
 800b29c:	eb4b 0303 	adc.w	r3, fp, r3
 800b2a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b2b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	18db      	adds	r3, r3, r3
 800b2bc:	643b      	str	r3, [r7, #64]	; 0x40
 800b2be:	4613      	mov	r3, r2
 800b2c0:	eb42 0303 	adc.w	r3, r2, r3
 800b2c4:	647b      	str	r3, [r7, #68]	; 0x44
 800b2c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b2ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b2ce:	f7f5 fb2d 	bl	800092c <__aeabi_uldivmod>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	460b      	mov	r3, r1
 800b2d6:	4611      	mov	r1, r2
 800b2d8:	4b3b      	ldr	r3, [pc, #236]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b2da:	fba3 2301 	umull	r2, r3, r3, r1
 800b2de:	095b      	lsrs	r3, r3, #5
 800b2e0:	2264      	movs	r2, #100	; 0x64
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	1acb      	subs	r3, r1, r3
 800b2e8:	00db      	lsls	r3, r3, #3
 800b2ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b2ee:	4b36      	ldr	r3, [pc, #216]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800b2f4:	095b      	lsrs	r3, r3, #5
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2fc:	441c      	add	r4, r3
 800b2fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b302:	2200      	movs	r2, #0
 800b304:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b308:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b30c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b310:	4642      	mov	r2, r8
 800b312:	464b      	mov	r3, r9
 800b314:	1891      	adds	r1, r2, r2
 800b316:	63b9      	str	r1, [r7, #56]	; 0x38
 800b318:	415b      	adcs	r3, r3
 800b31a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b320:	4641      	mov	r1, r8
 800b322:	1851      	adds	r1, r2, r1
 800b324:	6339      	str	r1, [r7, #48]	; 0x30
 800b326:	4649      	mov	r1, r9
 800b328:	414b      	adcs	r3, r1
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
 800b32c:	f04f 0200 	mov.w	r2, #0
 800b330:	f04f 0300 	mov.w	r3, #0
 800b334:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b338:	4659      	mov	r1, fp
 800b33a:	00cb      	lsls	r3, r1, #3
 800b33c:	4651      	mov	r1, sl
 800b33e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b342:	4651      	mov	r1, sl
 800b344:	00ca      	lsls	r2, r1, #3
 800b346:	4610      	mov	r0, r2
 800b348:	4619      	mov	r1, r3
 800b34a:	4603      	mov	r3, r0
 800b34c:	4642      	mov	r2, r8
 800b34e:	189b      	adds	r3, r3, r2
 800b350:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b354:	464b      	mov	r3, r9
 800b356:	460a      	mov	r2, r1
 800b358:	eb42 0303 	adc.w	r3, r2, r3
 800b35c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b364:	685b      	ldr	r3, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b36c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b370:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b374:	460b      	mov	r3, r1
 800b376:	18db      	adds	r3, r3, r3
 800b378:	62bb      	str	r3, [r7, #40]	; 0x28
 800b37a:	4613      	mov	r3, r2
 800b37c:	eb42 0303 	adc.w	r3, r2, r3
 800b380:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b382:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b386:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b38a:	f7f5 facf 	bl	800092c <__aeabi_uldivmod>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b394:	fba3 1302 	umull	r1, r3, r3, r2
 800b398:	095b      	lsrs	r3, r3, #5
 800b39a:	2164      	movs	r1, #100	; 0x64
 800b39c:	fb01 f303 	mul.w	r3, r1, r3
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	3332      	adds	r3, #50	; 0x32
 800b3a6:	4a08      	ldr	r2, [pc, #32]	; (800b3c8 <UART_SetConfig+0x2d4>)
 800b3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ac:	095b      	lsrs	r3, r3, #5
 800b3ae:	f003 0207 	and.w	r2, r3, #7
 800b3b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4422      	add	r2, r4
 800b3ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b3bc:	e105      	b.n	800b5ca <UART_SetConfig+0x4d6>
 800b3be:	bf00      	nop
 800b3c0:	40011000 	.word	0x40011000
 800b3c4:	40011400 	.word	0x40011400
 800b3c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b3cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b3d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b3da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	1891      	adds	r1, r2, r2
 800b3e4:	6239      	str	r1, [r7, #32]
 800b3e6:	415b      	adcs	r3, r3
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b3ee:	4641      	mov	r1, r8
 800b3f0:	1854      	adds	r4, r2, r1
 800b3f2:	4649      	mov	r1, r9
 800b3f4:	eb43 0501 	adc.w	r5, r3, r1
 800b3f8:	f04f 0200 	mov.w	r2, #0
 800b3fc:	f04f 0300 	mov.w	r3, #0
 800b400:	00eb      	lsls	r3, r5, #3
 800b402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b406:	00e2      	lsls	r2, r4, #3
 800b408:	4614      	mov	r4, r2
 800b40a:	461d      	mov	r5, r3
 800b40c:	4643      	mov	r3, r8
 800b40e:	18e3      	adds	r3, r4, r3
 800b410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b414:	464b      	mov	r3, r9
 800b416:	eb45 0303 	adc.w	r3, r5, r3
 800b41a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b41e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b42a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b42e:	f04f 0200 	mov.w	r2, #0
 800b432:	f04f 0300 	mov.w	r3, #0
 800b436:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b43a:	4629      	mov	r1, r5
 800b43c:	008b      	lsls	r3, r1, #2
 800b43e:	4621      	mov	r1, r4
 800b440:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b444:	4621      	mov	r1, r4
 800b446:	008a      	lsls	r2, r1, #2
 800b448:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b44c:	f7f5 fa6e 	bl	800092c <__aeabi_uldivmod>
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	4b60      	ldr	r3, [pc, #384]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b456:	fba3 2302 	umull	r2, r3, r3, r2
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	011c      	lsls	r4, r3, #4
 800b45e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b462:	2200      	movs	r2, #0
 800b464:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b468:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b46c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b470:	4642      	mov	r2, r8
 800b472:	464b      	mov	r3, r9
 800b474:	1891      	adds	r1, r2, r2
 800b476:	61b9      	str	r1, [r7, #24]
 800b478:	415b      	adcs	r3, r3
 800b47a:	61fb      	str	r3, [r7, #28]
 800b47c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b480:	4641      	mov	r1, r8
 800b482:	1851      	adds	r1, r2, r1
 800b484:	6139      	str	r1, [r7, #16]
 800b486:	4649      	mov	r1, r9
 800b488:	414b      	adcs	r3, r1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	f04f 0200 	mov.w	r2, #0
 800b490:	f04f 0300 	mov.w	r3, #0
 800b494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b498:	4659      	mov	r1, fp
 800b49a:	00cb      	lsls	r3, r1, #3
 800b49c:	4651      	mov	r1, sl
 800b49e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4a2:	4651      	mov	r1, sl
 800b4a4:	00ca      	lsls	r2, r1, #3
 800b4a6:	4610      	mov	r0, r2
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	189b      	adds	r3, r3, r2
 800b4b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b4b4:	464b      	mov	r3, r9
 800b4b6:	460a      	mov	r2, r1
 800b4b8:	eb42 0303 	adc.w	r3, r2, r3
 800b4bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b4ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b4cc:	f04f 0200 	mov.w	r2, #0
 800b4d0:	f04f 0300 	mov.w	r3, #0
 800b4d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b4d8:	4649      	mov	r1, r9
 800b4da:	008b      	lsls	r3, r1, #2
 800b4dc:	4641      	mov	r1, r8
 800b4de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4e2:	4641      	mov	r1, r8
 800b4e4:	008a      	lsls	r2, r1, #2
 800b4e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b4ea:	f7f5 fa1f 	bl	800092c <__aeabi_uldivmod>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4b39      	ldr	r3, [pc, #228]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b4f4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4f8:	095b      	lsrs	r3, r3, #5
 800b4fa:	2164      	movs	r1, #100	; 0x64
 800b4fc:	fb01 f303 	mul.w	r3, r1, r3
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	011b      	lsls	r3, r3, #4
 800b504:	3332      	adds	r3, #50	; 0x32
 800b506:	4a34      	ldr	r2, [pc, #208]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b508:	fba2 2303 	umull	r2, r3, r2, r3
 800b50c:	095b      	lsrs	r3, r3, #5
 800b50e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b512:	441c      	add	r4, r3
 800b514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b518:	2200      	movs	r2, #0
 800b51a:	673b      	str	r3, [r7, #112]	; 0x70
 800b51c:	677a      	str	r2, [r7, #116]	; 0x74
 800b51e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b522:	4642      	mov	r2, r8
 800b524:	464b      	mov	r3, r9
 800b526:	1891      	adds	r1, r2, r2
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	415b      	adcs	r3, r3
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b532:	4641      	mov	r1, r8
 800b534:	1851      	adds	r1, r2, r1
 800b536:	6039      	str	r1, [r7, #0]
 800b538:	4649      	mov	r1, r9
 800b53a:	414b      	adcs	r3, r1
 800b53c:	607b      	str	r3, [r7, #4]
 800b53e:	f04f 0200 	mov.w	r2, #0
 800b542:	f04f 0300 	mov.w	r3, #0
 800b546:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b54a:	4659      	mov	r1, fp
 800b54c:	00cb      	lsls	r3, r1, #3
 800b54e:	4651      	mov	r1, sl
 800b550:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b554:	4651      	mov	r1, sl
 800b556:	00ca      	lsls	r2, r1, #3
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	4603      	mov	r3, r0
 800b55e:	4642      	mov	r2, r8
 800b560:	189b      	adds	r3, r3, r2
 800b562:	66bb      	str	r3, [r7, #104]	; 0x68
 800b564:	464b      	mov	r3, r9
 800b566:	460a      	mov	r2, r1
 800b568:	eb42 0303 	adc.w	r3, r2, r3
 800b56c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b56e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	663b      	str	r3, [r7, #96]	; 0x60
 800b578:	667a      	str	r2, [r7, #100]	; 0x64
 800b57a:	f04f 0200 	mov.w	r2, #0
 800b57e:	f04f 0300 	mov.w	r3, #0
 800b582:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b586:	4649      	mov	r1, r9
 800b588:	008b      	lsls	r3, r1, #2
 800b58a:	4641      	mov	r1, r8
 800b58c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b590:	4641      	mov	r1, r8
 800b592:	008a      	lsls	r2, r1, #2
 800b594:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b598:	f7f5 f9c8 	bl	800092c <__aeabi_uldivmod>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4b0d      	ldr	r3, [pc, #52]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b5a2:	fba3 1302 	umull	r1, r3, r3, r2
 800b5a6:	095b      	lsrs	r3, r3, #5
 800b5a8:	2164      	movs	r1, #100	; 0x64
 800b5aa:	fb01 f303 	mul.w	r3, r1, r3
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	011b      	lsls	r3, r3, #4
 800b5b2:	3332      	adds	r3, #50	; 0x32
 800b5b4:	4a08      	ldr	r2, [pc, #32]	; (800b5d8 <UART_SetConfig+0x4e4>)
 800b5b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	f003 020f 	and.w	r2, r3, #15
 800b5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4422      	add	r2, r4
 800b5c8:	609a      	str	r2, [r3, #8]
}
 800b5ca:	bf00      	nop
 800b5cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5d6:	bf00      	nop
 800b5d8:	51eb851f 	.word	0x51eb851f

0800b5dc <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b10      	cmp	r3, #16
 800b5ec:	d11c      	bne.n	800b628 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	4b1f      	ldr	r3, [pc, #124]	; (800b670 <FSMC_NAND_Init+0x94>)
 800b5f4:	4013      	ands	r3, r2
 800b5f6:	683a      	ldr	r2, [r7, #0]
 800b5f8:	6851      	ldr	r1, [r2, #4]
 800b5fa:	683a      	ldr	r2, [r7, #0]
 800b5fc:	6892      	ldr	r2, [r2, #8]
 800b5fe:	4311      	orrs	r1, r2
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	68d2      	ldr	r2, [r2, #12]
 800b604:	4311      	orrs	r1, r2
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	6912      	ldr	r2, [r2, #16]
 800b60a:	4311      	orrs	r1, r2
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	6952      	ldr	r2, [r2, #20]
 800b610:	0252      	lsls	r2, r2, #9
 800b612:	4311      	orrs	r1, r2
 800b614:	683a      	ldr	r2, [r7, #0]
 800b616:	6992      	ldr	r2, [r2, #24]
 800b618:	0352      	lsls	r2, r2, #13
 800b61a:	430a      	orrs	r2, r1
 800b61c:	4313      	orrs	r3, r2
 800b61e:	f043 0208 	orr.w	r2, r3, #8
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	601a      	str	r2, [r3, #0]
 800b626:	e01b      	b.n	800b660 <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a1a      	ldr	r2, [r3, #32]
 800b62c:	4b10      	ldr	r3, [pc, #64]	; (800b670 <FSMC_NAND_Init+0x94>)
 800b62e:	4013      	ands	r3, r2
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	6851      	ldr	r1, [r2, #4]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	6892      	ldr	r2, [r2, #8]
 800b638:	4311      	orrs	r1, r2
 800b63a:	683a      	ldr	r2, [r7, #0]
 800b63c:	68d2      	ldr	r2, [r2, #12]
 800b63e:	4311      	orrs	r1, r2
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	6912      	ldr	r2, [r2, #16]
 800b644:	4311      	orrs	r1, r2
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	6952      	ldr	r2, [r2, #20]
 800b64a:	0252      	lsls	r2, r2, #9
 800b64c:	4311      	orrs	r1, r2
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	6992      	ldr	r2, [r2, #24]
 800b652:	0352      	lsls	r2, r2, #13
 800b654:	430a      	orrs	r2, r1
 800b656:	4313      	orrs	r3, r2
 800b658:	f043 0208 	orr.w	r2, r3, #8
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 800b660:	2300      	movs	r3, #0
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	fff00181 	.word	0xfff00181

0800b674 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b10      	cmp	r3, #16
 800b684:	d112      	bne.n	800b6ac <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68bb      	ldr	r3, [r7, #8]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	021b      	lsls	r3, r3, #8
 800b694:	431a      	orrs	r2, r3
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	689b      	ldr	r3, [r3, #8]
 800b69a:	041b      	lsls	r3, r3, #16
 800b69c:	431a      	orrs	r2, r3
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	68db      	ldr	r3, [r3, #12]
 800b6a2:	061b      	lsls	r3, r3, #24
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	609a      	str	r2, [r3, #8]
 800b6aa:	e011      	b.n	800b6d0 <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	021b      	lsls	r3, r3, #8
 800b6ba:	431a      	orrs	r2, r3
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	041b      	lsls	r3, r3, #16
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	061b      	lsls	r3, r3, #24
 800b6ca:	431a      	orrs	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 800b6d0:	2300      	movs	r3, #0
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3714      	adds	r7, #20
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6dc:	4770      	bx	lr

0800b6de <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b085      	sub	sp, #20
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	60f8      	str	r0, [r7, #12]
 800b6e6:	60b9      	str	r1, [r7, #8]
 800b6e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b10      	cmp	r3, #16
 800b6ee:	d112      	bne.n	800b716 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	431a      	orrs	r2, r3
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	041b      	lsls	r3, r3, #16
 800b706:	431a      	orrs	r2, r3
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	061b      	lsls	r3, r3, #24
 800b70e:	431a      	orrs	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	60da      	str	r2, [r3, #12]
 800b714:	e011      	b.n	800b73a <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	021b      	lsls	r3, r3, #8
 800b724:	431a      	orrs	r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	689b      	ldr	r3, [r3, #8]
 800b72a:	041b      	lsls	r3, r3, #16
 800b72c:	431a      	orrs	r2, r3
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	061b      	lsls	r3, r3, #24
 800b734:	431a      	orrs	r2, r3
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <__NVIC_SetPriority>:
{
 800b748:	b480      	push	{r7}
 800b74a:	b083      	sub	sp, #12
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	4603      	mov	r3, r0
 800b750:	6039      	str	r1, [r7, #0]
 800b752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	db0a      	blt.n	800b772 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	b2da      	uxtb	r2, r3
 800b760:	490c      	ldr	r1, [pc, #48]	; (800b794 <__NVIC_SetPriority+0x4c>)
 800b762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b766:	0112      	lsls	r2, r2, #4
 800b768:	b2d2      	uxtb	r2, r2
 800b76a:	440b      	add	r3, r1
 800b76c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b770:	e00a      	b.n	800b788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	b2da      	uxtb	r2, r3
 800b776:	4908      	ldr	r1, [pc, #32]	; (800b798 <__NVIC_SetPriority+0x50>)
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	f003 030f 	and.w	r3, r3, #15
 800b77e:	3b04      	subs	r3, #4
 800b780:	0112      	lsls	r2, r2, #4
 800b782:	b2d2      	uxtb	r2, r2
 800b784:	440b      	add	r3, r1
 800b786:	761a      	strb	r2, [r3, #24]
}
 800b788:	bf00      	nop
 800b78a:	370c      	adds	r7, #12
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr
 800b794:	e000e100 	.word	0xe000e100
 800b798:	e000ed00 	.word	0xe000ed00

0800b79c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b7a0:	4b05      	ldr	r3, [pc, #20]	; (800b7b8 <SysTick_Handler+0x1c>)
 800b7a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b7a4:	f002 f856 	bl	800d854 <xTaskGetSchedulerState>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d001      	beq.n	800b7b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b7ae:	f002 fe3b 	bl	800e428 <xPortSysTickHandler>
  }
}
 800b7b2:	bf00      	nop
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	e000e010 	.word	0xe000e010

0800b7bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	f06f 0004 	mvn.w	r0, #4
 800b7c6:	f7ff ffbf 	bl	800b748 <__NVIC_SetPriority>
#endif
}
 800b7ca:	bf00      	nop
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7d6:	f3ef 8305 	mrs	r3, IPSR
 800b7da:	603b      	str	r3, [r7, #0]
  return(result);
 800b7dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b7e2:	f06f 0305 	mvn.w	r3, #5
 800b7e6:	607b      	str	r3, [r7, #4]
 800b7e8:	e00f      	b.n	800b80a <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <osKernelInitialize+0x44>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d108      	bne.n	800b804 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 800b7f2:	4809      	ldr	r0, [pc, #36]	; (800b818 <osKernelInitialize+0x48>)
 800b7f4:	f003 f814 	bl	800e820 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 800b7f8:	4b06      	ldr	r3, [pc, #24]	; (800b814 <osKernelInitialize+0x44>)
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b7fe:	2300      	movs	r3, #0
 800b800:	607b      	str	r3, [r7, #4]
 800b802:	e002      	b.n	800b80a <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 800b804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b808:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b80a:	687b      	ldr	r3, [r7, #4]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	20002ed4 	.word	0x20002ed4
 800b818:	200000c4 	.word	0x200000c4

0800b81c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b822:	f3ef 8305 	mrs	r3, IPSR
 800b826:	603b      	str	r3, [r7, #0]
  return(result);
 800b828:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d003      	beq.n	800b836 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b82e:	f06f 0305 	mvn.w	r3, #5
 800b832:	607b      	str	r3, [r7, #4]
 800b834:	e010      	b.n	800b858 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b836:	4b0b      	ldr	r3, [pc, #44]	; (800b864 <osKernelStart+0x48>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	2b01      	cmp	r3, #1
 800b83c:	d109      	bne.n	800b852 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b83e:	f7ff ffbd 	bl	800b7bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b842:	4b08      	ldr	r3, [pc, #32]	; (800b864 <osKernelStart+0x48>)
 800b844:	2202      	movs	r2, #2
 800b846:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b848:	f001 fba8 	bl	800cf9c <vTaskStartScheduler>
      stat = osOK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	607b      	str	r3, [r7, #4]
 800b850:	e002      	b.n	800b858 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b858:	687b      	ldr	r3, [r7, #4]
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	3708      	adds	r7, #8
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	20002ed4 	.word	0x20002ed4

0800b868 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b868:	b580      	push	{r7, lr}
 800b86a:	b08e      	sub	sp, #56	; 0x38
 800b86c:	af04      	add	r7, sp, #16
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b874:	2300      	movs	r3, #0
 800b876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b878:	f3ef 8305 	mrs	r3, IPSR
 800b87c:	617b      	str	r3, [r7, #20]
  return(result);
 800b87e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b880:	2b00      	cmp	r3, #0
 800b882:	d17e      	bne.n	800b982 <osThreadNew+0x11a>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d07b      	beq.n	800b982 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b88a:	2380      	movs	r3, #128	; 0x80
 800b88c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b88e:	2318      	movs	r3, #24
 800b890:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b892:	2300      	movs	r3, #0
 800b894:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b89a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d045      	beq.n	800b92e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d002      	beq.n	800b8b0 <osThreadNew+0x48>
        name = attr->name;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	699b      	ldr	r3, [r3, #24]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d002      	beq.n	800b8be <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d008      	beq.n	800b8d6 <osThreadNew+0x6e>
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	2b38      	cmp	r3, #56	; 0x38
 800b8c8:	d805      	bhi.n	800b8d6 <osThreadNew+0x6e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d001      	beq.n	800b8da <osThreadNew+0x72>
        return (NULL);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	e054      	b.n	800b984 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	089b      	lsrs	r3, r3, #2
 800b8e8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	689b      	ldr	r3, [r3, #8]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d00e      	beq.n	800b910 <osThreadNew+0xa8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	2bbb      	cmp	r3, #187	; 0xbb
 800b8f8:	d90a      	bls.n	800b910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d006      	beq.n	800b910 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	695b      	ldr	r3, [r3, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <osThreadNew+0xa8>
        mem = 1;
 800b90a:	2301      	movs	r3, #1
 800b90c:	61bb      	str	r3, [r7, #24]
 800b90e:	e010      	b.n	800b932 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d10c      	bne.n	800b932 <osThreadNew+0xca>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d108      	bne.n	800b932 <osThreadNew+0xca>
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d104      	bne.n	800b932 <osThreadNew+0xca>
          mem = 0;
 800b928:	2300      	movs	r3, #0
 800b92a:	61bb      	str	r3, [r7, #24]
 800b92c:	e001      	b.n	800b932 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b92e:	2300      	movs	r3, #0
 800b930:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d110      	bne.n	800b95a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b940:	9202      	str	r2, [sp, #8]
 800b942:	9301      	str	r3, [sp, #4]
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	6a3a      	ldr	r2, [r7, #32]
 800b94c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f001 f938 	bl	800cbc4 <xTaskCreateStatic>
 800b954:	4603      	mov	r3, r0
 800b956:	613b      	str	r3, [r7, #16]
 800b958:	e013      	b.n	800b982 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b95a:	69bb      	ldr	r3, [r7, #24]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d110      	bne.n	800b982 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b960:	6a3b      	ldr	r3, [r7, #32]
 800b962:	b29a      	uxth	r2, r3
 800b964:	f107 0310 	add.w	r3, r7, #16
 800b968:	9301      	str	r3, [sp, #4]
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	f001 f983 	bl	800cc7e <xTaskCreate>
 800b978:	4603      	mov	r3, r0
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d001      	beq.n	800b982 <osThreadNew+0x11a>
            hTask = NULL;
 800b97e:	2300      	movs	r3, #0
 800b980:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b982:	693b      	ldr	r3, [r7, #16]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3728      	adds	r7, #40	; 0x28
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b994:	f3ef 8305 	mrs	r3, IPSR
 800b998:	60bb      	str	r3, [r7, #8]
  return(result);
 800b99a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d003      	beq.n	800b9a8 <osDelay+0x1c>
    stat = osErrorISR;
 800b9a0:	f06f 0305 	mvn.w	r3, #5
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	e007      	b.n	800b9b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f001 fabe 	bl	800cf34 <vTaskDelay>
    }
  }

  return (stat);
 800b9b8:	68fb      	ldr	r3, [r7, #12]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b08a      	sub	sp, #40	; 0x28
 800b9c6:	af02      	add	r7, sp, #8
 800b9c8:	60f8      	str	r0, [r7, #12]
 800b9ca:	60b9      	str	r1, [r7, #8]
 800b9cc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9d2:	f3ef 8305 	mrs	r3, IPSR
 800b9d6:	613b      	str	r3, [r7, #16]
  return(result);
 800b9d8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d175      	bne.n	800baca <osSemaphoreNew+0x108>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d072      	beq.n	800baca <osSemaphoreNew+0x108>
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d86e      	bhi.n	800baca <osSemaphoreNew+0x108>
    mem = -1;
 800b9ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d015      	beq.n	800ba24 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	689b      	ldr	r3, [r3, #8]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d006      	beq.n	800ba0e <osSemaphoreNew+0x4c>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	2b4f      	cmp	r3, #79	; 0x4f
 800ba06:	d902      	bls.n	800ba0e <osSemaphoreNew+0x4c>
        mem = 1;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	61bb      	str	r3, [r7, #24]
 800ba0c:	e00c      	b.n	800ba28 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d108      	bne.n	800ba28 <osSemaphoreNew+0x66>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d104      	bne.n	800ba28 <osSemaphoreNew+0x66>
          mem = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	e001      	b.n	800ba28 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba2e:	d04c      	beq.n	800baca <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d128      	bne.n	800ba88 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d10a      	bne.n	800ba52 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	2203      	movs	r2, #3
 800ba42:	9200      	str	r2, [sp, #0]
 800ba44:	2200      	movs	r2, #0
 800ba46:	2100      	movs	r1, #0
 800ba48:	2001      	movs	r0, #1
 800ba4a:	f000 fac5 	bl	800bfd8 <xQueueGenericCreateStatic>
 800ba4e:	61f8      	str	r0, [r7, #28]
 800ba50:	e005      	b.n	800ba5e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ba52:	2203      	movs	r2, #3
 800ba54:	2100      	movs	r1, #0
 800ba56:	2001      	movs	r0, #1
 800ba58:	f000 fb36 	bl	800c0c8 <xQueueGenericCreate>
 800ba5c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d022      	beq.n	800baaa <osSemaphoreNew+0xe8>
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01f      	beq.n	800baaa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2100      	movs	r1, #0
 800ba70:	69f8      	ldr	r0, [r7, #28]
 800ba72:	f000 fbf1 	bl	800c258 <xQueueGenericSend>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b01      	cmp	r3, #1
 800ba7a:	d016      	beq.n	800baaa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ba7c:	69f8      	ldr	r0, [r7, #28]
 800ba7e:	f000 fee5 	bl	800c84c <vQueueDelete>
            hSemaphore = NULL;
 800ba82:	2300      	movs	r3, #0
 800ba84:	61fb      	str	r3, [r7, #28]
 800ba86:	e010      	b.n	800baaa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d108      	bne.n	800baa0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	689b      	ldr	r3, [r3, #8]
 800ba92:	461a      	mov	r2, r3
 800ba94:	68b9      	ldr	r1, [r7, #8]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 fb73 	bl	800c182 <xQueueCreateCountingSemaphoreStatic>
 800ba9c:	61f8      	str	r0, [r7, #28]
 800ba9e:	e004      	b.n	800baaa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800baa0:	68b9      	ldr	r1, [r7, #8]
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f000 fba4 	bl	800c1f0 <xQueueCreateCountingSemaphore>
 800baa8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00c      	beq.n	800baca <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d003      	beq.n	800babe <osSemaphoreNew+0xfc>
          name = attr->name;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e001      	b.n	800bac2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800babe:	2300      	movs	r3, #0
 800bac0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bac2:	6979      	ldr	r1, [r7, #20]
 800bac4:	69f8      	ldr	r0, [r7, #28]
 800bac6:	f000 fff5 	bl	800cab4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800baca:	69fb      	ldr	r3, [r7, #28]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3720      	adds	r7, #32
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b08a      	sub	sp, #40	; 0x28
 800bad8:	af02      	add	r7, sp, #8
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800bae0:	2300      	movs	r3, #0
 800bae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bae4:	f3ef 8305 	mrs	r3, IPSR
 800bae8:	613b      	str	r3, [r7, #16]
  return(result);
 800baea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800baec:	2b00      	cmp	r3, #0
 800baee:	d15f      	bne.n	800bbb0 <osMessageQueueNew+0xdc>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d05c      	beq.n	800bbb0 <osMessageQueueNew+0xdc>
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d059      	beq.n	800bbb0 <osMessageQueueNew+0xdc>
    mem = -1;
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d029      	beq.n	800bb5c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	689b      	ldr	r3, [r3, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d012      	beq.n	800bb36 <osMessageQueueNew+0x62>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	68db      	ldr	r3, [r3, #12]
 800bb14:	2b4f      	cmp	r3, #79	; 0x4f
 800bb16:	d90e      	bls.n	800bb36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	695a      	ldr	r2, [r3, #20]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	fb01 f303 	mul.w	r3, r1, r3
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d302      	bcc.n	800bb36 <osMessageQueueNew+0x62>
        mem = 1;
 800bb30:	2301      	movs	r3, #1
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	e014      	b.n	800bb60 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d110      	bne.n	800bb60 <osMessageQueueNew+0x8c>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10c      	bne.n	800bb60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d108      	bne.n	800bb60 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d104      	bne.n	800bb60 <osMessageQueueNew+0x8c>
          mem = 0;
 800bb56:	2300      	movs	r3, #0
 800bb58:	61bb      	str	r3, [r7, #24]
 800bb5a:	e001      	b.n	800bb60 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bb60:	69bb      	ldr	r3, [r7, #24]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d10b      	bne.n	800bb7e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	691a      	ldr	r2, [r3, #16]
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	2100      	movs	r1, #0
 800bb70:	9100      	str	r1, [sp, #0]
 800bb72:	68b9      	ldr	r1, [r7, #8]
 800bb74:	68f8      	ldr	r0, [r7, #12]
 800bb76:	f000 fa2f 	bl	800bfd8 <xQueueGenericCreateStatic>
 800bb7a:	61f8      	str	r0, [r7, #28]
 800bb7c:	e008      	b.n	800bb90 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d105      	bne.n	800bb90 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bb84:	2200      	movs	r2, #0
 800bb86:	68b9      	ldr	r1, [r7, #8]
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f000 fa9d 	bl	800c0c8 <xQueueGenericCreate>
 800bb8e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800bb90:	69fb      	ldr	r3, [r7, #28]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d00c      	beq.n	800bbb0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d003      	beq.n	800bba4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	617b      	str	r3, [r7, #20]
 800bba2:	e001      	b.n	800bba8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800bba8:	6979      	ldr	r1, [r7, #20]
 800bbaa:	69f8      	ldr	r0, [r7, #28]
 800bbac:	f000 ff82 	bl	800cab4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bbb0:	69fb      	ldr	r3, [r7, #28]
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3720      	adds	r7, #32
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b088      	sub	sp, #32
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	4613      	mov	r3, r2
 800bbca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bbd4:	f3ef 8305 	mrs	r3, IPSR
 800bbd8:	617b      	str	r3, [r7, #20]
  return(result);
 800bbda:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d028      	beq.n	800bc32 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bbe0:	69bb      	ldr	r3, [r7, #24]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <osMessageQueuePut+0x36>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d002      	beq.n	800bbf2 <osMessageQueuePut+0x36>
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d003      	beq.n	800bbfa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bbf2:	f06f 0303 	mvn.w	r3, #3
 800bbf6:	61fb      	str	r3, [r7, #28]
 800bbf8:	e038      	b.n	800bc6c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bbfe:	f107 0210 	add.w	r2, r7, #16
 800bc02:	2300      	movs	r3, #0
 800bc04:	68b9      	ldr	r1, [r7, #8]
 800bc06:	69b8      	ldr	r0, [r7, #24]
 800bc08:	f000 fc24 	bl	800c454 <xQueueGenericSendFromISR>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d003      	beq.n	800bc1a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bc12:	f06f 0302 	mvn.w	r3, #2
 800bc16:	61fb      	str	r3, [r7, #28]
 800bc18:	e028      	b.n	800bc6c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d025      	beq.n	800bc6c <osMessageQueuePut+0xb0>
 800bc20:	4b15      	ldr	r3, [pc, #84]	; (800bc78 <osMessageQueuePut+0xbc>)
 800bc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	f3bf 8f4f 	dsb	sy
 800bc2c:	f3bf 8f6f 	isb	sy
 800bc30:	e01c      	b.n	800bc6c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d002      	beq.n	800bc3e <osMessageQueuePut+0x82>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d103      	bne.n	800bc46 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bc3e:	f06f 0303 	mvn.w	r3, #3
 800bc42:	61fb      	str	r3, [r7, #28]
 800bc44:	e012      	b.n	800bc6c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bc46:	2300      	movs	r3, #0
 800bc48:	683a      	ldr	r2, [r7, #0]
 800bc4a:	68b9      	ldr	r1, [r7, #8]
 800bc4c:	69b8      	ldr	r0, [r7, #24]
 800bc4e:	f000 fb03 	bl	800c258 <xQueueGenericSend>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d009      	beq.n	800bc6c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d003      	beq.n	800bc66 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bc5e:	f06f 0301 	mvn.w	r3, #1
 800bc62:	61fb      	str	r3, [r7, #28]
 800bc64:	e002      	b.n	800bc6c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bc66:	f06f 0302 	mvn.w	r3, #2
 800bc6a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bc6c:	69fb      	ldr	r3, [r7, #28]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3720      	adds	r7, #32
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	e000ed04 	.word	0xe000ed04

0800bc7c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b088      	sub	sp, #32
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	607a      	str	r2, [r7, #4]
 800bc88:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc92:	f3ef 8305 	mrs	r3, IPSR
 800bc96:	617b      	str	r3, [r7, #20]
  return(result);
 800bc98:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d028      	beq.n	800bcf0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d005      	beq.n	800bcb0 <osMessageQueueGet+0x34>
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d002      	beq.n	800bcb0 <osMessageQueueGet+0x34>
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800bcb0:	f06f 0303 	mvn.w	r3, #3
 800bcb4:	61fb      	str	r3, [r7, #28]
 800bcb6:	e037      	b.n	800bd28 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800bcbc:	f107 0310 	add.w	r3, r7, #16
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	68b9      	ldr	r1, [r7, #8]
 800bcc4:	69b8      	ldr	r0, [r7, #24]
 800bcc6:	f000 fd41 	bl	800c74c <xQueueReceiveFromISR>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d003      	beq.n	800bcd8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800bcd0:	f06f 0302 	mvn.w	r3, #2
 800bcd4:	61fb      	str	r3, [r7, #28]
 800bcd6:	e027      	b.n	800bd28 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d024      	beq.n	800bd28 <osMessageQueueGet+0xac>
 800bcde:	4b15      	ldr	r3, [pc, #84]	; (800bd34 <osMessageQueueGet+0xb8>)
 800bce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	f3bf 8f4f 	dsb	sy
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	e01b      	b.n	800bd28 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d002      	beq.n	800bcfc <osMessageQueueGet+0x80>
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d103      	bne.n	800bd04 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800bcfc:	f06f 0303 	mvn.w	r3, #3
 800bd00:	61fb      	str	r3, [r7, #28]
 800bd02:	e011      	b.n	800bd28 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bd04:	683a      	ldr	r2, [r7, #0]
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	69b8      	ldr	r0, [r7, #24]
 800bd0a:	f000 fc3f 	bl	800c58c <xQueueReceive>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b01      	cmp	r3, #1
 800bd12:	d009      	beq.n	800bd28 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d003      	beq.n	800bd22 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800bd1a:	f06f 0301 	mvn.w	r3, #1
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	e002      	b.n	800bd28 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800bd22:	f06f 0302 	mvn.w	r3, #2
 800bd26:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bd28:	69fb      	ldr	r3, [r7, #28]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3720      	adds	r7, #32
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	e000ed04 	.word	0xe000ed04

0800bd38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	60f8      	str	r0, [r7, #12]
 800bd40:	60b9      	str	r1, [r7, #8]
 800bd42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	4a07      	ldr	r2, [pc, #28]	; (800bd64 <vApplicationGetIdleTaskMemory+0x2c>)
 800bd48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	4a06      	ldr	r2, [pc, #24]	; (800bd68 <vApplicationGetIdleTaskMemory+0x30>)
 800bd4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2280      	movs	r2, #128	; 0x80
 800bd54:	601a      	str	r2, [r3, #0]
}
 800bd56:	bf00      	nop
 800bd58:	3714      	adds	r7, #20
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop
 800bd64:	20006ed8 	.word	0x20006ed8
 800bd68:	20006f94 	.word	0x20006f94

0800bd6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4a07      	ldr	r2, [pc, #28]	; (800bd98 <vApplicationGetTimerTaskMemory+0x2c>)
 800bd7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	4a06      	ldr	r2, [pc, #24]	; (800bd9c <vApplicationGetTimerTaskMemory+0x30>)
 800bd82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd8a:	601a      	str	r2, [r3, #0]
}
 800bd8c:	bf00      	nop
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	20007194 	.word	0x20007194
 800bd9c:	20007250 	.word	0x20007250

0800bda0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f103 0208 	add.w	r2, r3, #8
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f103 0208 	add.w	r2, r3, #8
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f103 0208 	add.w	r2, r3, #8
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bdee:	bf00      	nop
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr

0800bdfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdfa:	b480      	push	{r7}
 800bdfc:	b085      	sub	sp, #20
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689a      	ldr	r2, [r3, #8]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	683a      	ldr	r2, [r7, #0]
 800be24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	687a      	ldr	r2, [r7, #4]
 800be2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	1c5a      	adds	r2, r3, #1
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	601a      	str	r2, [r3, #0]
}
 800be36:	bf00      	nop
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
 800be4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be58:	d103      	bne.n	800be62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e00c      	b.n	800be7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3308      	adds	r3, #8
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	e002      	b.n	800be70 <vListInsert+0x2e>
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	685b      	ldr	r3, [r3, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	429a      	cmp	r2, r3
 800be7a:	d2f6      	bcs.n	800be6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	685a      	ldr	r2, [r3, #4]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	683a      	ldr	r2, [r7, #0]
 800be8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	601a      	str	r2, [r3, #0]
}
 800bea8:	bf00      	nop
 800beaa:	3714      	adds	r7, #20
 800beac:	46bd      	mov	sp, r7
 800beae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb2:	4770      	bx	lr

0800beb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	691b      	ldr	r3, [r3, #16]
 800bec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6892      	ldr	r2, [r2, #8]
 800beca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	6852      	ldr	r2, [r2, #4]
 800bed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d103      	bne.n	800bee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	1e5a      	subs	r2, r3, #1
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d10a      	bne.n	800bf32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bf2e:	bf00      	nop
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bf32:	f002 f9e7 	bl	800e304 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681a      	ldr	r2, [r3, #0]
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3e:	68f9      	ldr	r1, [r7, #12]
 800bf40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf42:	fb01 f303 	mul.w	r3, r1, r3
 800bf46:	441a      	add	r2, r3
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	681a      	ldr	r2, [r3, #0]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf62:	3b01      	subs	r3, #1
 800bf64:	68f9      	ldr	r1, [r7, #12]
 800bf66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bf68:	fb01 f303 	mul.w	r3, r1, r3
 800bf6c:	441a      	add	r2, r3
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	22ff      	movs	r2, #255	; 0xff
 800bf76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	22ff      	movs	r2, #255	; 0xff
 800bf7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d114      	bne.n	800bfb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d01a      	beq.n	800bfc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	3310      	adds	r3, #16
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 fa9b 	bl	800d4d0 <xTaskRemoveFromEventList>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d012      	beq.n	800bfc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bfa0:	4b0c      	ldr	r3, [pc, #48]	; (800bfd4 <xQueueGenericReset+0xcc>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	f3bf 8f6f 	isb	sy
 800bfb0:	e009      	b.n	800bfc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3310      	adds	r3, #16
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f7ff fef2 	bl	800bda0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3324      	adds	r3, #36	; 0x24
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7ff feed 	bl	800bda0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bfc6:	f002 f9cd 	bl	800e364 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bfca:	2301      	movs	r3, #1
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	e000ed04 	.word	0xe000ed04

0800bfd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b08e      	sub	sp, #56	; 0x38
 800bfdc:	af02      	add	r7, sp, #8
 800bfde:	60f8      	str	r0, [r7, #12]
 800bfe0:	60b9      	str	r1, [r7, #8]
 800bfe2:	607a      	str	r2, [r7, #4]
 800bfe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d10a      	bne.n	800c002 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	f383 8811 	msr	BASEPRI, r3
 800bff4:	f3bf 8f6f 	isb	sy
 800bff8:	f3bf 8f4f 	dsb	sy
 800bffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bffe:	bf00      	nop
 800c000:	e7fe      	b.n	800c000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10a      	bne.n	800c01e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <xQueueGenericCreateStatic+0x52>
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <xQueueGenericCreateStatic+0x56>
 800c02a:	2301      	movs	r3, #1
 800c02c:	e000      	b.n	800c030 <xQueueGenericCreateStatic+0x58>
 800c02e:	2300      	movs	r3, #0
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10a      	bne.n	800c04a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c038:	f383 8811 	msr	BASEPRI, r3
 800c03c:	f3bf 8f6f 	isb	sy
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	623b      	str	r3, [r7, #32]
}
 800c046:	bf00      	nop
 800c048:	e7fe      	b.n	800c048 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d102      	bne.n	800c056 <xQueueGenericCreateStatic+0x7e>
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d101      	bne.n	800c05a <xQueueGenericCreateStatic+0x82>
 800c056:	2301      	movs	r3, #1
 800c058:	e000      	b.n	800c05c <xQueueGenericCreateStatic+0x84>
 800c05a:	2300      	movs	r3, #0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d10a      	bne.n	800c076 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c064:	f383 8811 	msr	BASEPRI, r3
 800c068:	f3bf 8f6f 	isb	sy
 800c06c:	f3bf 8f4f 	dsb	sy
 800c070:	61fb      	str	r3, [r7, #28]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c076:	2350      	movs	r3, #80	; 0x50
 800c078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b50      	cmp	r3, #80	; 0x50
 800c07e:	d00a      	beq.n	800c096 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c084:	f383 8811 	msr	BASEPRI, r3
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	f3bf 8f4f 	dsb	sy
 800c090:	61bb      	str	r3, [r7, #24]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c096:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00d      	beq.n	800c0be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2201      	movs	r2, #1
 800c0a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c0aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	68b9      	ldr	r1, [r7, #8]
 800c0b8:	68f8      	ldr	r0, [r7, #12]
 800c0ba:	f000 f83f 	bl	800c13c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3730      	adds	r7, #48	; 0x30
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b08a      	sub	sp, #40	; 0x28
 800c0cc:	af02      	add	r7, sp, #8
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10a      	bne.n	800c0f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	613b      	str	r3, [r7, #16]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	68ba      	ldr	r2, [r7, #8]
 800c0f6:	fb02 f303 	mul.w	r3, r2, r3
 800c0fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	3350      	adds	r3, #80	; 0x50
 800c100:	4618      	mov	r0, r3
 800c102:	f002 fa21 	bl	800e548 <pvPortMalloc>
 800c106:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c108:	69bb      	ldr	r3, [r7, #24]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d011      	beq.n	800c132 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	3350      	adds	r3, #80	; 0x50
 800c116:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c120:	79fa      	ldrb	r2, [r7, #7]
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	4613      	mov	r3, r2
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	68b9      	ldr	r1, [r7, #8]
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 f805 	bl	800c13c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c132:	69bb      	ldr	r3, [r7, #24]
	}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b084      	sub	sp, #16
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d103      	bne.n	800c158 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c150:	69bb      	ldr	r3, [r7, #24]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	601a      	str	r2, [r3, #0]
 800c156:	e002      	b.n	800c15e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c16a:	2101      	movs	r1, #1
 800c16c:	69b8      	ldr	r0, [r7, #24]
 800c16e:	f7ff fecb 	bl	800bf08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c172:	69bb      	ldr	r3, [r7, #24]
 800c174:	78fa      	ldrb	r2, [r7, #3]
 800c176:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c17a:	bf00      	nop
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c182:	b580      	push	{r7, lr}
 800c184:	b08a      	sub	sp, #40	; 0x28
 800c186:	af02      	add	r7, sp, #8
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d10a      	bne.n	800c1aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c194:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c198:	f383 8811 	msr	BASEPRI, r3
 800c19c:	f3bf 8f6f 	isb	sy
 800c1a0:	f3bf 8f4f 	dsb	sy
 800c1a4:	61bb      	str	r3, [r7, #24]
}
 800c1a6:	bf00      	nop
 800c1a8:	e7fe      	b.n	800c1a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d90a      	bls.n	800c1c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	617b      	str	r3, [r7, #20]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	9300      	str	r3, [sp, #0]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7ff ff00 	bl	800bfd8 <xQueueGenericCreateStatic>
 800c1d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
	}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
 800c1f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10a      	bne.n	800c216 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	613b      	str	r3, [r7, #16]
}
 800c212:	bf00      	nop
 800c214:	e7fe      	b.n	800c214 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c216:	683a      	ldr	r2, [r7, #0]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d90a      	bls.n	800c234 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c222:	f383 8811 	msr	BASEPRI, r3
 800c226:	f3bf 8f6f 	isb	sy
 800c22a:	f3bf 8f4f 	dsb	sy
 800c22e:	60fb      	str	r3, [r7, #12]
}
 800c230:	bf00      	nop
 800c232:	e7fe      	b.n	800c232 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c234:	2202      	movs	r2, #2
 800c236:	2100      	movs	r1, #0
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff ff45 	bl	800c0c8 <xQueueGenericCreate>
 800c23e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d002      	beq.n	800c24c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c24c:	697b      	ldr	r3, [r7, #20]
	}
 800c24e:	4618      	mov	r0, r3
 800c250:	3718      	adds	r7, #24
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b08e      	sub	sp, #56	; 0x38
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	60f8      	str	r0, [r7, #12]
 800c260:	60b9      	str	r1, [r7, #8]
 800c262:	607a      	str	r2, [r7, #4]
 800c264:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c266:	2300      	movs	r3, #0
 800c268:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10a      	bne.n	800c28a <xQueueGenericSend+0x32>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c286:	bf00      	nop
 800c288:	e7fe      	b.n	800c288 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d103      	bne.n	800c298 <xQueueGenericSend+0x40>
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c294:	2b00      	cmp	r3, #0
 800c296:	d101      	bne.n	800c29c <xQueueGenericSend+0x44>
 800c298:	2301      	movs	r3, #1
 800c29a:	e000      	b.n	800c29e <xQueueGenericSend+0x46>
 800c29c:	2300      	movs	r3, #0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d10a      	bne.n	800c2b8 <xQueueGenericSend+0x60>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2b4:	bf00      	nop
 800c2b6:	e7fe      	b.n	800c2b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d103      	bne.n	800c2c6 <xQueueGenericSend+0x6e>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d101      	bne.n	800c2ca <xQueueGenericSend+0x72>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e000      	b.n	800c2cc <xQueueGenericSend+0x74>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10a      	bne.n	800c2e6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	623b      	str	r3, [r7, #32]
}
 800c2e2:	bf00      	nop
 800c2e4:	e7fe      	b.n	800c2e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e6:	f001 fab5 	bl	800d854 <xTaskGetSchedulerState>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d102      	bne.n	800c2f6 <xQueueGenericSend+0x9e>
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <xQueueGenericSend+0xa2>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <xQueueGenericSend+0xa4>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10a      	bne.n	800c316 <xQueueGenericSend+0xbe>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	61fb      	str	r3, [r7, #28]
}
 800c312:	bf00      	nop
 800c314:	e7fe      	b.n	800c314 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c316:	f001 fff5 	bl	800e304 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c322:	429a      	cmp	r2, r3
 800c324:	d302      	bcc.n	800c32c <xQueueGenericSend+0xd4>
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d129      	bne.n	800c380 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	68b9      	ldr	r1, [r7, #8]
 800c330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c332:	f000 faae 	bl	800c892 <prvCopyDataToQueue>
 800c336:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d010      	beq.n	800c362 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c342:	3324      	adds	r3, #36	; 0x24
 800c344:	4618      	mov	r0, r3
 800c346:	f001 f8c3 	bl	800d4d0 <xTaskRemoveFromEventList>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d013      	beq.n	800c378 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c350:	4b3f      	ldr	r3, [pc, #252]	; (800c450 <xQueueGenericSend+0x1f8>)
 800c352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	e00a      	b.n	800c378 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c364:	2b00      	cmp	r3, #0
 800c366:	d007      	beq.n	800c378 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c368:	4b39      	ldr	r3, [pc, #228]	; (800c450 <xQueueGenericSend+0x1f8>)
 800c36a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36e:	601a      	str	r2, [r3, #0]
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c378:	f001 fff4 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e063      	b.n	800c448 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d103      	bne.n	800c38e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c386:	f001 ffed 	bl	800e364 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c38a:	2300      	movs	r3, #0
 800c38c:	e05c      	b.n	800c448 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c390:	2b00      	cmp	r3, #0
 800c392:	d106      	bne.n	800c3a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c394:	f107 0314 	add.w	r3, r7, #20
 800c398:	4618      	mov	r0, r3
 800c39a:	f001 f8fd 	bl	800d598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c39e:	2301      	movs	r3, #1
 800c3a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3a2:	f001 ffdf 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3a6:	f000 fe69 	bl	800d07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3aa:	f001 ffab 	bl	800e304 <vPortEnterCritical>
 800c3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3b4:	b25b      	sxtb	r3, r3
 800c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3ba:	d103      	bne.n	800c3c4 <xQueueGenericSend+0x16c>
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3ca:	b25b      	sxtb	r3, r3
 800c3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3d0:	d103      	bne.n	800c3da <xQueueGenericSend+0x182>
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3da:	f001 ffc3 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3de:	1d3a      	adds	r2, r7, #4
 800c3e0:	f107 0314 	add.w	r3, r7, #20
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f001 f8ec 	bl	800d5c4 <xTaskCheckForTimeOut>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d124      	bne.n	800c43c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c3f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3f4:	f000 fb45 	bl	800ca82 <prvIsQueueFull>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d018      	beq.n	800c430 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c400:	3310      	adds	r3, #16
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	4611      	mov	r1, r2
 800c406:	4618      	mov	r0, r3
 800c408:	f001 f812 	bl	800d430 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c40e:	f000 fad0 	bl	800c9b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c412:	f000 fe41 	bl	800d098 <xTaskResumeAll>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f47f af7c 	bne.w	800c316 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c41e:	4b0c      	ldr	r3, [pc, #48]	; (800c450 <xQueueGenericSend+0x1f8>)
 800c420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c424:	601a      	str	r2, [r3, #0]
 800c426:	f3bf 8f4f 	dsb	sy
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	e772      	b.n	800c316 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c432:	f000 fabe 	bl	800c9b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c436:	f000 fe2f 	bl	800d098 <xTaskResumeAll>
 800c43a:	e76c      	b.n	800c316 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c43c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c43e:	f000 fab8 	bl	800c9b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c442:	f000 fe29 	bl	800d098 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c446:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3738      	adds	r7, #56	; 0x38
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}
 800c450:	e000ed04 	.word	0xe000ed04

0800c454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b090      	sub	sp, #64	; 0x40
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
 800c460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d10a      	bne.n	800c482 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c470:	f383 8811 	msr	BASEPRI, r3
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c47e:	bf00      	nop
 800c480:	e7fe      	b.n	800c480 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d103      	bne.n	800c490 <xQueueGenericSendFromISR+0x3c>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <xQueueGenericSendFromISR+0x40>
 800c490:	2301      	movs	r3, #1
 800c492:	e000      	b.n	800c496 <xQueueGenericSendFromISR+0x42>
 800c494:	2300      	movs	r3, #0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d10a      	bne.n	800c4b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49e:	f383 8811 	msr	BASEPRI, r3
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	f3bf 8f4f 	dsb	sy
 800c4aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4ac:	bf00      	nop
 800c4ae:	e7fe      	b.n	800c4ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d103      	bne.n	800c4be <xQueueGenericSendFromISR+0x6a>
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d101      	bne.n	800c4c2 <xQueueGenericSendFromISR+0x6e>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e000      	b.n	800c4c4 <xQueueGenericSendFromISR+0x70>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d10a      	bne.n	800c4de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c4c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4cc:	f383 8811 	msr	BASEPRI, r3
 800c4d0:	f3bf 8f6f 	isb	sy
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	623b      	str	r3, [r7, #32]
}
 800c4da:	bf00      	nop
 800c4dc:	e7fe      	b.n	800c4dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4de:	f001 fff3 	bl	800e4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800c4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	61fa      	str	r2, [r7, #28]
 800c4f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c4fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c506:	429a      	cmp	r2, r3
 800c508:	d302      	bcc.n	800c510 <xQueueGenericSendFromISR+0xbc>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	2b02      	cmp	r3, #2
 800c50e:	d12f      	bne.n	800c570 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c512:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c526:	f000 f9b4 	bl	800c892 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c52a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c52e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c532:	d112      	bne.n	800c55a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d016      	beq.n	800c56a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53e:	3324      	adds	r3, #36	; 0x24
 800c540:	4618      	mov	r0, r3
 800c542:	f000 ffc5 	bl	800d4d0 <xTaskRemoveFromEventList>
 800c546:	4603      	mov	r3, r0
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d00e      	beq.n	800c56a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00b      	beq.n	800c56a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e007      	b.n	800c56a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c55a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c55e:	3301      	adds	r3, #1
 800c560:	b2db      	uxtb	r3, r3
 800c562:	b25a      	sxtb	r2, r3
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c56a:	2301      	movs	r3, #1
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c56e:	e001      	b.n	800c574 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c570:	2300      	movs	r3, #0
 800c572:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c576:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c578:	697b      	ldr	r3, [r7, #20]
 800c57a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c57e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c582:	4618      	mov	r0, r3
 800c584:	3740      	adds	r7, #64	; 0x40
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
	...

0800c58c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08c      	sub	sp, #48	; 0x30
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c598:	2300      	movs	r3, #0
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10a      	bne.n	800c5bc <xQueueReceive+0x30>
	__asm volatile
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	623b      	str	r3, [r7, #32]
}
 800c5b8:	bf00      	nop
 800c5ba:	e7fe      	b.n	800c5ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d103      	bne.n	800c5ca <xQueueReceive+0x3e>
 800c5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d101      	bne.n	800c5ce <xQueueReceive+0x42>
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	e000      	b.n	800c5d0 <xQueueReceive+0x44>
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <xQueueReceive+0x5e>
	__asm volatile
 800c5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d8:	f383 8811 	msr	BASEPRI, r3
 800c5dc:	f3bf 8f6f 	isb	sy
 800c5e0:	f3bf 8f4f 	dsb	sy
 800c5e4:	61fb      	str	r3, [r7, #28]
}
 800c5e6:	bf00      	nop
 800c5e8:	e7fe      	b.n	800c5e8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5ea:	f001 f933 	bl	800d854 <xTaskGetSchedulerState>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d102      	bne.n	800c5fa <xQueueReceive+0x6e>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <xQueueReceive+0x72>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e000      	b.n	800c600 <xQueueReceive+0x74>
 800c5fe:	2300      	movs	r3, #0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d10a      	bne.n	800c61a <xQueueReceive+0x8e>
	__asm volatile
 800c604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c608:	f383 8811 	msr	BASEPRI, r3
 800c60c:	f3bf 8f6f 	isb	sy
 800c610:	f3bf 8f4f 	dsb	sy
 800c614:	61bb      	str	r3, [r7, #24]
}
 800c616:	bf00      	nop
 800c618:	e7fe      	b.n	800c618 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c61a:	f001 fe73 	bl	800e304 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c626:	2b00      	cmp	r3, #0
 800c628:	d01f      	beq.n	800c66a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c62a:	68b9      	ldr	r1, [r7, #8]
 800c62c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c62e:	f000 f99a 	bl	800c966 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c634:	1e5a      	subs	r2, r3, #1
 800c636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c638:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63c:	691b      	ldr	r3, [r3, #16]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00f      	beq.n	800c662 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c644:	3310      	adds	r3, #16
 800c646:	4618      	mov	r0, r3
 800c648:	f000 ff42 	bl	800d4d0 <xTaskRemoveFromEventList>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d007      	beq.n	800c662 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c652:	4b3d      	ldr	r3, [pc, #244]	; (800c748 <xQueueReceive+0x1bc>)
 800c654:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c658:	601a      	str	r2, [r3, #0]
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c662:	f001 fe7f 	bl	800e364 <vPortExitCritical>
				return pdPASS;
 800c666:	2301      	movs	r3, #1
 800c668:	e069      	b.n	800c73e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d103      	bne.n	800c678 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c670:	f001 fe78 	bl	800e364 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c674:	2300      	movs	r3, #0
 800c676:	e062      	b.n	800c73e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d106      	bne.n	800c68c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c67e:	f107 0310 	add.w	r3, r7, #16
 800c682:	4618      	mov	r0, r3
 800c684:	f000 ff88 	bl	800d598 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c688:	2301      	movs	r3, #1
 800c68a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c68c:	f001 fe6a 	bl	800e364 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c690:	f000 fcf4 	bl	800d07c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c694:	f001 fe36 	bl	800e304 <vPortEnterCritical>
 800c698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a4:	d103      	bne.n	800c6ae <xQueueReceive+0x122>
 800c6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c6b4:	b25b      	sxtb	r3, r3
 800c6b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6ba:	d103      	bne.n	800c6c4 <xQueueReceive+0x138>
 800c6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c6c4:	f001 fe4e 	bl	800e364 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6c8:	1d3a      	adds	r2, r7, #4
 800c6ca:	f107 0310 	add.w	r3, r7, #16
 800c6ce:	4611      	mov	r1, r2
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 ff77 	bl	800d5c4 <xTaskCheckForTimeOut>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d123      	bne.n	800c724 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6de:	f000 f9ba 	bl	800ca56 <prvIsQueueEmpty>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d017      	beq.n	800c718 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ea:	3324      	adds	r3, #36	; 0x24
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	4611      	mov	r1, r2
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fe9d 	bl	800d430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c6f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6f8:	f000 f95b 	bl	800c9b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c6fc:	f000 fccc 	bl	800d098 <xTaskResumeAll>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d189      	bne.n	800c61a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c706:	4b10      	ldr	r3, [pc, #64]	; (800c748 <xQueueReceive+0x1bc>)
 800c708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c70c:	601a      	str	r2, [r3, #0]
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	f3bf 8f6f 	isb	sy
 800c716:	e780      	b.n	800c61a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c71a:	f000 f94a 	bl	800c9b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c71e:	f000 fcbb 	bl	800d098 <xTaskResumeAll>
 800c722:	e77a      	b.n	800c61a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c726:	f000 f944 	bl	800c9b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c72a:	f000 fcb5 	bl	800d098 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c72e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c730:	f000 f991 	bl	800ca56 <prvIsQueueEmpty>
 800c734:	4603      	mov	r3, r0
 800c736:	2b00      	cmp	r3, #0
 800c738:	f43f af6f 	beq.w	800c61a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c73c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3730      	adds	r7, #48	; 0x30
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	e000ed04 	.word	0xe000ed04

0800c74c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b08e      	sub	sp, #56	; 0x38
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	623b      	str	r3, [r7, #32]
}
 800c774:	bf00      	nop
 800c776:	e7fe      	b.n	800c776 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d103      	bne.n	800c786 <xQueueReceiveFromISR+0x3a>
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <xQueueReceiveFromISR+0x3e>
 800c786:	2301      	movs	r3, #1
 800c788:	e000      	b.n	800c78c <xQueueReceiveFromISR+0x40>
 800c78a:	2300      	movs	r3, #0
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d10a      	bne.n	800c7a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c794:	f383 8811 	msr	BASEPRI, r3
 800c798:	f3bf 8f6f 	isb	sy
 800c79c:	f3bf 8f4f 	dsb	sy
 800c7a0:	61fb      	str	r3, [r7, #28]
}
 800c7a2:	bf00      	nop
 800c7a4:	e7fe      	b.n	800c7a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7a6:	f001 fe8f 	bl	800e4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c7aa:	f3ef 8211 	mrs	r2, BASEPRI
 800c7ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	61ba      	str	r2, [r7, #24]
 800c7c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c7c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d02f      	beq.n	800c832 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c7dc:	68b9      	ldr	r1, [r7, #8]
 800c7de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7e0:	f000 f8c1 	bl	800c966 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e6:	1e5a      	subs	r2, r3, #1
 800c7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c7ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7f4:	d112      	bne.n	800c81c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	691b      	ldr	r3, [r3, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d016      	beq.n	800c82c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	3310      	adds	r3, #16
 800c802:	4618      	mov	r0, r3
 800c804:	f000 fe64 	bl	800d4d0 <xTaskRemoveFromEventList>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00e      	beq.n	800c82c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00b      	beq.n	800c82c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	2201      	movs	r2, #1
 800c818:	601a      	str	r2, [r3, #0]
 800c81a:	e007      	b.n	800c82c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c81c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c820:	3301      	adds	r3, #1
 800c822:	b2db      	uxtb	r3, r3
 800c824:	b25a      	sxtb	r2, r3
 800c826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c82c:	2301      	movs	r3, #1
 800c82e:	637b      	str	r3, [r7, #52]	; 0x34
 800c830:	e001      	b.n	800c836 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c832:	2300      	movs	r3, #0
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
 800c836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c838:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	f383 8811 	msr	BASEPRI, r3
}
 800c840:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c844:	4618      	mov	r0, r3
 800c846:	3738      	adds	r7, #56	; 0x38
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b084      	sub	sp, #16
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10a      	bne.n	800c874 <vQueueDelete+0x28>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	60bb      	str	r3, [r7, #8]
}
 800c870:	bf00      	nop
 800c872:	e7fe      	b.n	800c872 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f000 f947 	bl	800cb08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c880:	2b00      	cmp	r3, #0
 800c882:	d102      	bne.n	800c88a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f001 ff03 	bl	800e690 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c88a:	bf00      	nop
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b086      	sub	sp, #24
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d10d      	bne.n	800c8cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d14d      	bne.n	800c954 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	689b      	ldr	r3, [r3, #8]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 ffe7 	bl	800d890 <xTaskPriorityDisinherit>
 800c8c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	609a      	str	r2, [r3, #8]
 800c8ca:	e043      	b.n	800c954 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d119      	bne.n	800c906 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6858      	ldr	r0, [r3, #4]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8da:	461a      	mov	r2, r3
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	f002 fa45 	bl	800ed6c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	685a      	ldr	r2, [r3, #4]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ea:	441a      	add	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	689b      	ldr	r3, [r3, #8]
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d32b      	bcc.n	800c954 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	605a      	str	r2, [r3, #4]
 800c904:	e026      	b.n	800c954 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	68d8      	ldr	r0, [r3, #12]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	461a      	mov	r2, r3
 800c910:	68b9      	ldr	r1, [r7, #8]
 800c912:	f002 fa2b 	bl	800ed6c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	68da      	ldr	r2, [r3, #12]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	425b      	negs	r3, r3
 800c920:	441a      	add	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	68da      	ldr	r2, [r3, #12]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d207      	bcs.n	800c942 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	689a      	ldr	r2, [r3, #8]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c93a:	425b      	negs	r3, r3
 800c93c:	441a      	add	r2, r3
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d105      	bne.n	800c954 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	3b01      	subs	r3, #1
 800c952:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c954:	693b      	ldr	r3, [r7, #16]
 800c956:	1c5a      	adds	r2, r3, #1
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c95c:	697b      	ldr	r3, [r7, #20]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	3718      	adds	r7, #24
 800c962:	46bd      	mov	sp, r7
 800c964:	bd80      	pop	{r7, pc}

0800c966 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c966:	b580      	push	{r7, lr}
 800c968:	b082      	sub	sp, #8
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
 800c96e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c974:	2b00      	cmp	r3, #0
 800c976:	d018      	beq.n	800c9aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	68da      	ldr	r2, [r3, #12]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c980:	441a      	add	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	689b      	ldr	r3, [r3, #8]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d303      	bcc.n	800c99a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68d9      	ldr	r1, [r3, #12]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	6838      	ldr	r0, [r7, #0]
 800c9a6:	f002 f9e1 	bl	800ed6c <memcpy>
	}
}
 800c9aa:	bf00      	nop
 800c9ac:	3708      	adds	r7, #8
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}

0800c9b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c9ba:	f001 fca3 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9c6:	e011      	b.n	800c9ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d012      	beq.n	800c9f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fd7b 	bl	800d4d0 <xTaskRemoveFromEventList>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d001      	beq.n	800c9e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c9e0:	f000 fe52 	bl	800d688 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
 800c9e6:	3b01      	subs	r3, #1
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	dce9      	bgt.n	800c9c8 <prvUnlockQueue+0x16>
 800c9f4:	e000      	b.n	800c9f8 <prvUnlockQueue+0x46>
					break;
 800c9f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	22ff      	movs	r2, #255	; 0xff
 800c9fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ca00:	f001 fcb0 	bl	800e364 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ca04:	f001 fc7e 	bl	800e304 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ca0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca10:	e011      	b.n	800ca36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d012      	beq.n	800ca40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	3310      	adds	r3, #16
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 fd56 	bl	800d4d0 <xTaskRemoveFromEventList>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ca2a:	f000 fe2d 	bl	800d688 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ca2e:	7bbb      	ldrb	r3, [r7, #14]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	b2db      	uxtb	r3, r3
 800ca34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	dce9      	bgt.n	800ca12 <prvUnlockQueue+0x60>
 800ca3e:	e000      	b.n	800ca42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ca40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	22ff      	movs	r2, #255	; 0xff
 800ca46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ca4a:	f001 fc8b 	bl	800e364 <vPortExitCritical>
}
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca5e:	f001 fc51 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d102      	bne.n	800ca70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	60fb      	str	r3, [r7, #12]
 800ca6e:	e001      	b.n	800ca74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ca70:	2300      	movs	r3, #0
 800ca72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ca74:	f001 fc76 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800ca78:	68fb      	ldr	r3, [r7, #12]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ca8a:	f001 fc3b 	bl	800e304 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d102      	bne.n	800caa0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	60fb      	str	r3, [r7, #12]
 800ca9e:	e001      	b.n	800caa4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800caa0:	2300      	movs	r3, #0
 800caa2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800caa4:	f001 fc5e 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800caa8:	68fb      	ldr	r3, [r7, #12]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
	...

0800cab4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cabe:	2300      	movs	r3, #0
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	e014      	b.n	800caee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cac4:	4a0f      	ldr	r2, [pc, #60]	; (800cb04 <vQueueAddToRegistry+0x50>)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d10b      	bne.n	800cae8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cad0:	490c      	ldr	r1, [pc, #48]	; (800cb04 <vQueueAddToRegistry+0x50>)
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cada:	4a0a      	ldr	r2, [pc, #40]	; (800cb04 <vQueueAddToRegistry+0x50>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	4413      	add	r3, r2
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cae6:	e006      	b.n	800caf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	3301      	adds	r3, #1
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	2b07      	cmp	r3, #7
 800caf2:	d9e7      	bls.n	800cac4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800caf4:	bf00      	nop
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20007650 	.word	0x20007650

0800cb08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cb08:	b480      	push	{r7}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb10:	2300      	movs	r3, #0
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	e016      	b.n	800cb44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cb16:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <vQueueUnregisterQueue+0x50>)
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	4413      	add	r3, r2
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d10b      	bne.n	800cb3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cb26:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <vQueueUnregisterQueue+0x50>)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cb30:	4a09      	ldr	r2, [pc, #36]	; (800cb58 <vQueueUnregisterQueue+0x50>)
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	00db      	lsls	r3, r3, #3
 800cb36:	4413      	add	r3, r2
 800cb38:	2200      	movs	r2, #0
 800cb3a:	605a      	str	r2, [r3, #4]
				break;
 800cb3c:	e006      	b.n	800cb4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60fb      	str	r3, [r7, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	2b07      	cmp	r3, #7
 800cb48:	d9e5      	bls.n	800cb16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cb4a:	bf00      	nop
 800cb4c:	bf00      	nop
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	20007650 	.word	0x20007650

0800cb5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b086      	sub	sp, #24
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cb6c:	f001 fbca 	bl	800e304 <vPortEnterCritical>
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb76:	b25b      	sxtb	r3, r3
 800cb78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb7c:	d103      	bne.n	800cb86 <vQueueWaitForMessageRestricted+0x2a>
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb8c:	b25b      	sxtb	r3, r3
 800cb8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb92:	d103      	bne.n	800cb9c <vQueueWaitForMessageRestricted+0x40>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb9c:	f001 fbe2 	bl	800e364 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	3324      	adds	r3, #36	; 0x24
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	68b9      	ldr	r1, [r7, #8]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fc61 	bl	800d478 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cbb6:	6978      	ldr	r0, [r7, #20]
 800cbb8:	f7ff fefb 	bl	800c9b2 <prvUnlockQueue>
	}
 800cbbc:	bf00      	nop
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b08e      	sub	sp, #56	; 0x38
 800cbc8:	af04      	add	r7, sp, #16
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
 800cbd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d10a      	bne.n	800cbee <xTaskCreateStatic+0x2a>
	__asm volatile
 800cbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbdc:	f383 8811 	msr	BASEPRI, r3
 800cbe0:	f3bf 8f6f 	isb	sy
 800cbe4:	f3bf 8f4f 	dsb	sy
 800cbe8:	623b      	str	r3, [r7, #32]
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d10a      	bne.n	800cc0a <xTaskCreateStatic+0x46>
	__asm volatile
 800cbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf8:	f383 8811 	msr	BASEPRI, r3
 800cbfc:	f3bf 8f6f 	isb	sy
 800cc00:	f3bf 8f4f 	dsb	sy
 800cc04:	61fb      	str	r3, [r7, #28]
}
 800cc06:	bf00      	nop
 800cc08:	e7fe      	b.n	800cc08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc0a:	23bc      	movs	r3, #188	; 0xbc
 800cc0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc0e:	693b      	ldr	r3, [r7, #16]
 800cc10:	2bbc      	cmp	r3, #188	; 0xbc
 800cc12:	d00a      	beq.n	800cc2a <xTaskCreateStatic+0x66>
	__asm volatile
 800cc14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc18:	f383 8811 	msr	BASEPRI, r3
 800cc1c:	f3bf 8f6f 	isb	sy
 800cc20:	f3bf 8f4f 	dsb	sy
 800cc24:	61bb      	str	r3, [r7, #24]
}
 800cc26:	bf00      	nop
 800cc28:	e7fe      	b.n	800cc28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d01e      	beq.n	800cc70 <xTaskCreateStatic+0xac>
 800cc32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d01b      	beq.n	800cc70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc44:	2202      	movs	r2, #2
 800cc46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	9303      	str	r3, [sp, #12]
 800cc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc50:	9302      	str	r3, [sp, #8]
 800cc52:	f107 0314 	add.w	r3, r7, #20
 800cc56:	9301      	str	r3, [sp, #4]
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	9300      	str	r3, [sp, #0]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	68b9      	ldr	r1, [r7, #8]
 800cc62:	68f8      	ldr	r0, [r7, #12]
 800cc64:	f000 f850 	bl	800cd08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cc68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc6a:	f000 f8f3 	bl	800ce54 <prvAddNewTaskToReadyList>
 800cc6e:	e001      	b.n	800cc74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cc74:	697b      	ldr	r3, [r7, #20]
	}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3728      	adds	r7, #40	; 0x28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b08c      	sub	sp, #48	; 0x30
 800cc82:	af04      	add	r7, sp, #16
 800cc84:	60f8      	str	r0, [r7, #12]
 800cc86:	60b9      	str	r1, [r7, #8]
 800cc88:	603b      	str	r3, [r7, #0]
 800cc8a:	4613      	mov	r3, r2
 800cc8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cc8e:	88fb      	ldrh	r3, [r7, #6]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4618      	mov	r0, r3
 800cc94:	f001 fc58 	bl	800e548 <pvPortMalloc>
 800cc98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d00e      	beq.n	800ccbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cca0:	20bc      	movs	r0, #188	; 0xbc
 800cca2:	f001 fc51 	bl	800e548 <pvPortMalloc>
 800cca6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cca8:	69fb      	ldr	r3, [r7, #28]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ccae:	69fb      	ldr	r3, [r7, #28]
 800ccb0:	697a      	ldr	r2, [r7, #20]
 800ccb2:	631a      	str	r2, [r3, #48]	; 0x30
 800ccb4:	e005      	b.n	800ccc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ccb6:	6978      	ldr	r0, [r7, #20]
 800ccb8:	f001 fcea 	bl	800e690 <vPortFree>
 800ccbc:	e001      	b.n	800ccc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d017      	beq.n	800ccf8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	2200      	movs	r2, #0
 800cccc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ccd0:	88fa      	ldrh	r2, [r7, #6]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	9303      	str	r3, [sp, #12]
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	9302      	str	r3, [sp, #8]
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	9301      	str	r3, [sp, #4]
 800ccde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce0:	9300      	str	r3, [sp, #0]
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	68b9      	ldr	r1, [r7, #8]
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f000 f80e 	bl	800cd08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccec:	69f8      	ldr	r0, [r7, #28]
 800ccee:	f000 f8b1 	bl	800ce54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	e002      	b.n	800ccfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ccf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ccfe:	69bb      	ldr	r3, [r7, #24]
	}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3720      	adds	r7, #32
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	60b9      	str	r1, [r7, #8]
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	461a      	mov	r2, r3
 800cd20:	21a5      	movs	r1, #165	; 0xa5
 800cd22:	f002 f831 	bl	800ed88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd30:	3b01      	subs	r3, #1
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	4413      	add	r3, r2
 800cd36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd38:	69bb      	ldr	r3, [r7, #24]
 800cd3a:	f023 0307 	bic.w	r3, r3, #7
 800cd3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd40:	69bb      	ldr	r3, [r7, #24]
 800cd42:	f003 0307 	and.w	r3, r3, #7
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d00a      	beq.n	800cd60 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	617b      	str	r3, [r7, #20]
}
 800cd5c:	bf00      	nop
 800cd5e:	e7fe      	b.n	800cd5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01f      	beq.n	800cda6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd66:	2300      	movs	r3, #0
 800cd68:	61fb      	str	r3, [r7, #28]
 800cd6a:	e012      	b.n	800cd92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cd6c:	68ba      	ldr	r2, [r7, #8]
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	4413      	add	r3, r2
 800cd72:	7819      	ldrb	r1, [r3, #0]
 800cd74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd76:	69fb      	ldr	r3, [r7, #28]
 800cd78:	4413      	add	r3, r2
 800cd7a:	3334      	adds	r3, #52	; 0x34
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cd80:	68ba      	ldr	r2, [r7, #8]
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	4413      	add	r3, r2
 800cd86:	781b      	ldrb	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d006      	beq.n	800cd9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	61fb      	str	r3, [r7, #28]
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	2b0f      	cmp	r3, #15
 800cd96:	d9e9      	bls.n	800cd6c <prvInitialiseNewTask+0x64>
 800cd98:	e000      	b.n	800cd9c <prvInitialiseNewTask+0x94>
			{
				break;
 800cd9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cda4:	e003      	b.n	800cdae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdb0:	2b37      	cmp	r3, #55	; 0x37
 800cdb2:	d901      	bls.n	800cdb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cdb4:	2337      	movs	r3, #55	; 0x37
 800cdb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	3304      	adds	r3, #4
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7ff f806 	bl	800bde0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdd6:	3318      	adds	r3, #24
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff f801 	bl	800bde0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cde2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cde4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cdea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce06:	3354      	adds	r3, #84	; 0x54
 800ce08:	2260      	movs	r2, #96	; 0x60
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f001 ffbb 	bl	800ed88 <memset>
 800ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce14:	4a0c      	ldr	r2, [pc, #48]	; (800ce48 <prvInitialiseNewTask+0x140>)
 800ce16:	659a      	str	r2, [r3, #88]	; 0x58
 800ce18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1a:	4a0c      	ldr	r2, [pc, #48]	; (800ce4c <prvInitialiseNewTask+0x144>)
 800ce1c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce20:	4a0b      	ldr	r2, [pc, #44]	; (800ce50 <prvInitialiseNewTask+0x148>)
 800ce22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce24:	683a      	ldr	r2, [r7, #0]
 800ce26:	68f9      	ldr	r1, [r7, #12]
 800ce28:	69b8      	ldr	r0, [r7, #24]
 800ce2a:	f001 f941 	bl	800e0b0 <pxPortInitialiseStack>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce40:	bf00      	nop
 800ce42:	3720      	adds	r7, #32
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	08013b84 	.word	0x08013b84
 800ce4c:	08013ba4 	.word	0x08013ba4
 800ce50:	08013b64 	.word	0x08013b64

0800ce54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce5c:	f001 fa52 	bl	800e304 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce60:	4b2d      	ldr	r3, [pc, #180]	; (800cf18 <prvAddNewTaskToReadyList+0xc4>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	3301      	adds	r3, #1
 800ce66:	4a2c      	ldr	r2, [pc, #176]	; (800cf18 <prvAddNewTaskToReadyList+0xc4>)
 800ce68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce6a:	4b2c      	ldr	r3, [pc, #176]	; (800cf1c <prvAddNewTaskToReadyList+0xc8>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d109      	bne.n	800ce86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce72:	4a2a      	ldr	r2, [pc, #168]	; (800cf1c <prvAddNewTaskToReadyList+0xc8>)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce78:	4b27      	ldr	r3, [pc, #156]	; (800cf18 <prvAddNewTaskToReadyList+0xc4>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d110      	bne.n	800cea2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ce80:	f000 fc26 	bl	800d6d0 <prvInitialiseTaskLists>
 800ce84:	e00d      	b.n	800cea2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ce86:	4b26      	ldr	r3, [pc, #152]	; (800cf20 <prvAddNewTaskToReadyList+0xcc>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d109      	bne.n	800cea2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ce8e:	4b23      	ldr	r3, [pc, #140]	; (800cf1c <prvAddNewTaskToReadyList+0xc8>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	429a      	cmp	r2, r3
 800ce9a:	d802      	bhi.n	800cea2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ce9c:	4a1f      	ldr	r2, [pc, #124]	; (800cf1c <prvAddNewTaskToReadyList+0xc8>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cea2:	4b20      	ldr	r3, [pc, #128]	; (800cf24 <prvAddNewTaskToReadyList+0xd0>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3301      	adds	r3, #1
 800cea8:	4a1e      	ldr	r2, [pc, #120]	; (800cf24 <prvAddNewTaskToReadyList+0xd0>)
 800ceaa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ceac:	4b1d      	ldr	r3, [pc, #116]	; (800cf24 <prvAddNewTaskToReadyList+0xd0>)
 800ceae:	681a      	ldr	r2, [r3, #0]
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <prvAddNewTaskToReadyList+0xd4>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d903      	bls.n	800cec8 <prvAddNewTaskToReadyList+0x74>
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec4:	4a18      	ldr	r2, [pc, #96]	; (800cf28 <prvAddNewTaskToReadyList+0xd4>)
 800cec6:	6013      	str	r3, [r2, #0]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cecc:	4613      	mov	r3, r2
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	4413      	add	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4a15      	ldr	r2, [pc, #84]	; (800cf2c <prvAddNewTaskToReadyList+0xd8>)
 800ced6:	441a      	add	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	3304      	adds	r3, #4
 800cedc:	4619      	mov	r1, r3
 800cede:	4610      	mov	r0, r2
 800cee0:	f7fe ff8b 	bl	800bdfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cee4:	f001 fa3e 	bl	800e364 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cee8:	4b0d      	ldr	r3, [pc, #52]	; (800cf20 <prvAddNewTaskToReadyList+0xcc>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00e      	beq.n	800cf0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cef0:	4b0a      	ldr	r3, [pc, #40]	; (800cf1c <prvAddNewTaskToReadyList+0xc8>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d207      	bcs.n	800cf0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cefe:	4b0c      	ldr	r3, [pc, #48]	; (800cf30 <prvAddNewTaskToReadyList+0xdc>)
 800cf00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf04:	601a      	str	r2, [r3, #0]
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf0e:	bf00      	nop
 800cf10:	3708      	adds	r7, #8
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	20007b64 	.word	0x20007b64
 800cf1c:	20007690 	.word	0x20007690
 800cf20:	20007b70 	.word	0x20007b70
 800cf24:	20007b80 	.word	0x20007b80
 800cf28:	20007b6c 	.word	0x20007b6c
 800cf2c:	20007694 	.word	0x20007694
 800cf30:	e000ed04 	.word	0xe000ed04

0800cf34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d017      	beq.n	800cf76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf46:	4b13      	ldr	r3, [pc, #76]	; (800cf94 <vTaskDelay+0x60>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00a      	beq.n	800cf64 <vTaskDelay+0x30>
	__asm volatile
 800cf4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf52:	f383 8811 	msr	BASEPRI, r3
 800cf56:	f3bf 8f6f 	isb	sy
 800cf5a:	f3bf 8f4f 	dsb	sy
 800cf5e:	60bb      	str	r3, [r7, #8]
}
 800cf60:	bf00      	nop
 800cf62:	e7fe      	b.n	800cf62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cf64:	f000 f88a 	bl	800d07c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf68:	2100      	movs	r1, #0
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fcfe 	bl	800d96c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf70:	f000 f892 	bl	800d098 <xTaskResumeAll>
 800cf74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d107      	bne.n	800cf8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <vTaskDelay+0x64>)
 800cf7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf82:	601a      	str	r2, [r3, #0]
 800cf84:	f3bf 8f4f 	dsb	sy
 800cf88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cf8c:	bf00      	nop
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	20007b8c 	.word	0x20007b8c
 800cf98:	e000ed04 	.word	0xe000ed04

0800cf9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b08a      	sub	sp, #40	; 0x28
 800cfa0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfaa:	463a      	mov	r2, r7
 800cfac:	1d39      	adds	r1, r7, #4
 800cfae:	f107 0308 	add.w	r3, r7, #8
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	f7fe fec0 	bl	800bd38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfb8:	6839      	ldr	r1, [r7, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68ba      	ldr	r2, [r7, #8]
 800cfbe:	9202      	str	r2, [sp, #8]
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	9300      	str	r3, [sp, #0]
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	460a      	mov	r2, r1
 800cfca:	4924      	ldr	r1, [pc, #144]	; (800d05c <vTaskStartScheduler+0xc0>)
 800cfcc:	4824      	ldr	r0, [pc, #144]	; (800d060 <vTaskStartScheduler+0xc4>)
 800cfce:	f7ff fdf9 	bl	800cbc4 <xTaskCreateStatic>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	4a23      	ldr	r2, [pc, #140]	; (800d064 <vTaskStartScheduler+0xc8>)
 800cfd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cfd8:	4b22      	ldr	r3, [pc, #136]	; (800d064 <vTaskStartScheduler+0xc8>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cfe0:	2301      	movs	r3, #1
 800cfe2:	617b      	str	r3, [r7, #20]
 800cfe4:	e001      	b.n	800cfea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d102      	bne.n	800cff6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cff0:	f000 fd10 	bl	800da14 <xTimerCreateTimerTask>
 800cff4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d11b      	bne.n	800d034 <vTaskStartScheduler+0x98>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	613b      	str	r3, [r7, #16]
}
 800d00e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d010:	4b15      	ldr	r3, [pc, #84]	; (800d068 <vTaskStartScheduler+0xcc>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	3354      	adds	r3, #84	; 0x54
 800d016:	4a15      	ldr	r2, [pc, #84]	; (800d06c <vTaskStartScheduler+0xd0>)
 800d018:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d01a:	4b15      	ldr	r3, [pc, #84]	; (800d070 <vTaskStartScheduler+0xd4>)
 800d01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d020:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d022:	4b14      	ldr	r3, [pc, #80]	; (800d074 <vTaskStartScheduler+0xd8>)
 800d024:	2201      	movs	r2, #1
 800d026:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d028:	4b13      	ldr	r3, [pc, #76]	; (800d078 <vTaskStartScheduler+0xdc>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d02e:	f001 f8c7 	bl	800e1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d032:	e00e      	b.n	800d052 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d03a:	d10a      	bne.n	800d052 <vTaskStartScheduler+0xb6>
	__asm volatile
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	60fb      	str	r3, [r7, #12]
}
 800d04e:	bf00      	nop
 800d050:	e7fe      	b.n	800d050 <vTaskStartScheduler+0xb4>
}
 800d052:	bf00      	nop
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	080119e4 	.word	0x080119e4
 800d060:	0800d6a1 	.word	0x0800d6a1
 800d064:	20007b88 	.word	0x20007b88
 800d068:	20007690 	.word	0x20007690
 800d06c:	200000d8 	.word	0x200000d8
 800d070:	20007b84 	.word	0x20007b84
 800d074:	20007b70 	.word	0x20007b70
 800d078:	20007b68 	.word	0x20007b68

0800d07c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d07c:	b480      	push	{r7}
 800d07e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d080:	4b04      	ldr	r3, [pc, #16]	; (800d094 <vTaskSuspendAll+0x18>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3301      	adds	r3, #1
 800d086:	4a03      	ldr	r2, [pc, #12]	; (800d094 <vTaskSuspendAll+0x18>)
 800d088:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d08a:	bf00      	nop
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	20007b8c 	.word	0x20007b8c

0800d098 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b084      	sub	sp, #16
 800d09c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d0a6:	4b42      	ldr	r3, [pc, #264]	; (800d1b0 <xTaskResumeAll+0x118>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d10a      	bne.n	800d0c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0b2:	f383 8811 	msr	BASEPRI, r3
 800d0b6:	f3bf 8f6f 	isb	sy
 800d0ba:	f3bf 8f4f 	dsb	sy
 800d0be:	603b      	str	r3, [r7, #0]
}
 800d0c0:	bf00      	nop
 800d0c2:	e7fe      	b.n	800d0c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0c4:	f001 f91e 	bl	800e304 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0c8:	4b39      	ldr	r3, [pc, #228]	; (800d1b0 <xTaskResumeAll+0x118>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3b01      	subs	r3, #1
 800d0ce:	4a38      	ldr	r2, [pc, #224]	; (800d1b0 <xTaskResumeAll+0x118>)
 800d0d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0d2:	4b37      	ldr	r3, [pc, #220]	; (800d1b0 <xTaskResumeAll+0x118>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d162      	bne.n	800d1a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0da:	4b36      	ldr	r3, [pc, #216]	; (800d1b4 <xTaskResumeAll+0x11c>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d05e      	beq.n	800d1a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0e2:	e02f      	b.n	800d144 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0e4:	4b34      	ldr	r3, [pc, #208]	; (800d1b8 <xTaskResumeAll+0x120>)
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	68db      	ldr	r3, [r3, #12]
 800d0ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	3318      	adds	r3, #24
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe fedf 	bl	800beb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	3304      	adds	r3, #4
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe feda 	bl	800beb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d104:	4b2d      	ldr	r3, [pc, #180]	; (800d1bc <xTaskResumeAll+0x124>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d903      	bls.n	800d114 <xTaskResumeAll+0x7c>
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	4a2a      	ldr	r2, [pc, #168]	; (800d1bc <xTaskResumeAll+0x124>)
 800d112:	6013      	str	r3, [r2, #0]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d118:	4613      	mov	r3, r2
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	009b      	lsls	r3, r3, #2
 800d120:	4a27      	ldr	r2, [pc, #156]	; (800d1c0 <xTaskResumeAll+0x128>)
 800d122:	441a      	add	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	3304      	adds	r3, #4
 800d128:	4619      	mov	r1, r3
 800d12a:	4610      	mov	r0, r2
 800d12c:	f7fe fe65 	bl	800bdfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d134:	4b23      	ldr	r3, [pc, #140]	; (800d1c4 <xTaskResumeAll+0x12c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d302      	bcc.n	800d144 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d13e:	4b22      	ldr	r3, [pc, #136]	; (800d1c8 <xTaskResumeAll+0x130>)
 800d140:	2201      	movs	r2, #1
 800d142:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d144:	4b1c      	ldr	r3, [pc, #112]	; (800d1b8 <xTaskResumeAll+0x120>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1cb      	bne.n	800d0e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d152:	f000 fb5f 	bl	800d814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d156:	4b1d      	ldr	r3, [pc, #116]	; (800d1cc <xTaskResumeAll+0x134>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d010      	beq.n	800d184 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d162:	f000 f847 	bl	800d1f4 <xTaskIncrementTick>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d16c:	4b16      	ldr	r3, [pc, #88]	; (800d1c8 <xTaskResumeAll+0x130>)
 800d16e:	2201      	movs	r2, #1
 800d170:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	3b01      	subs	r3, #1
 800d176:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d1f1      	bne.n	800d162 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d17e:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <xTaskResumeAll+0x134>)
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d184:	4b10      	ldr	r3, [pc, #64]	; (800d1c8 <xTaskResumeAll+0x130>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d009      	beq.n	800d1a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d18c:	2301      	movs	r3, #1
 800d18e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d190:	4b0f      	ldr	r3, [pc, #60]	; (800d1d0 <xTaskResumeAll+0x138>)
 800d192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d196:	601a      	str	r2, [r3, #0]
 800d198:	f3bf 8f4f 	dsb	sy
 800d19c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d1a0:	f001 f8e0 	bl	800e364 <vPortExitCritical>

	return xAlreadyYielded;
 800d1a4:	68bb      	ldr	r3, [r7, #8]
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	20007b8c 	.word	0x20007b8c
 800d1b4:	20007b64 	.word	0x20007b64
 800d1b8:	20007b24 	.word	0x20007b24
 800d1bc:	20007b6c 	.word	0x20007b6c
 800d1c0:	20007694 	.word	0x20007694
 800d1c4:	20007690 	.word	0x20007690
 800d1c8:	20007b78 	.word	0x20007b78
 800d1cc:	20007b74 	.word	0x20007b74
 800d1d0:	e000ed04 	.word	0xe000ed04

0800d1d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <xTaskGetTickCount+0x1c>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d1e0:	687b      	ldr	r3, [r7, #4]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	370c      	adds	r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	20007b68 	.word	0x20007b68

0800d1f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1fe:	4b4f      	ldr	r3, [pc, #316]	; (800d33c <xTaskIncrementTick+0x148>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	2b00      	cmp	r3, #0
 800d204:	f040 808f 	bne.w	800d326 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d208:	4b4d      	ldr	r3, [pc, #308]	; (800d340 <xTaskIncrementTick+0x14c>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	3301      	adds	r3, #1
 800d20e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d210:	4a4b      	ldr	r2, [pc, #300]	; (800d340 <xTaskIncrementTick+0x14c>)
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d120      	bne.n	800d25e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d21c:	4b49      	ldr	r3, [pc, #292]	; (800d344 <xTaskIncrementTick+0x150>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <xTaskIncrementTick+0x48>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	603b      	str	r3, [r7, #0]
}
 800d238:	bf00      	nop
 800d23a:	e7fe      	b.n	800d23a <xTaskIncrementTick+0x46>
 800d23c:	4b41      	ldr	r3, [pc, #260]	; (800d344 <xTaskIncrementTick+0x150>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	60fb      	str	r3, [r7, #12]
 800d242:	4b41      	ldr	r3, [pc, #260]	; (800d348 <xTaskIncrementTick+0x154>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4a3f      	ldr	r2, [pc, #252]	; (800d344 <xTaskIncrementTick+0x150>)
 800d248:	6013      	str	r3, [r2, #0]
 800d24a:	4a3f      	ldr	r2, [pc, #252]	; (800d348 <xTaskIncrementTick+0x154>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6013      	str	r3, [r2, #0]
 800d250:	4b3e      	ldr	r3, [pc, #248]	; (800d34c <xTaskIncrementTick+0x158>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3301      	adds	r3, #1
 800d256:	4a3d      	ldr	r2, [pc, #244]	; (800d34c <xTaskIncrementTick+0x158>)
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	f000 fadb 	bl	800d814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d25e:	4b3c      	ldr	r3, [pc, #240]	; (800d350 <xTaskIncrementTick+0x15c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	429a      	cmp	r2, r3
 800d266:	d349      	bcc.n	800d2fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d268:	4b36      	ldr	r3, [pc, #216]	; (800d344 <xTaskIncrementTick+0x150>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d104      	bne.n	800d27c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d272:	4b37      	ldr	r3, [pc, #220]	; (800d350 <xTaskIncrementTick+0x15c>)
 800d274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d278:	601a      	str	r2, [r3, #0]
					break;
 800d27a:	e03f      	b.n	800d2fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d27c:	4b31      	ldr	r3, [pc, #196]	; (800d344 <xTaskIncrementTick+0x150>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	429a      	cmp	r2, r3
 800d292:	d203      	bcs.n	800d29c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d294:	4a2e      	ldr	r2, [pc, #184]	; (800d350 <xTaskIncrementTick+0x15c>)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d29a:	e02f      	b.n	800d2fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	3304      	adds	r3, #4
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fe fe07 	bl	800beb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d004      	beq.n	800d2b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	3318      	adds	r3, #24
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fdfe 	bl	800beb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2bc:	4b25      	ldr	r3, [pc, #148]	; (800d354 <xTaskIncrementTick+0x160>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d903      	bls.n	800d2cc <xTaskIncrementTick+0xd8>
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c8:	4a22      	ldr	r2, [pc, #136]	; (800d354 <xTaskIncrementTick+0x160>)
 800d2ca:	6013      	str	r3, [r2, #0]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	4a1f      	ldr	r2, [pc, #124]	; (800d358 <xTaskIncrementTick+0x164>)
 800d2da:	441a      	add	r2, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	3304      	adds	r3, #4
 800d2e0:	4619      	mov	r1, r3
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	f7fe fd89 	bl	800bdfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ec:	4b1b      	ldr	r3, [pc, #108]	; (800d35c <xTaskIncrementTick+0x168>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	d3b8      	bcc.n	800d268 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2fa:	e7b5      	b.n	800d268 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2fc:	4b17      	ldr	r3, [pc, #92]	; (800d35c <xTaskIncrementTick+0x168>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	4915      	ldr	r1, [pc, #84]	; (800d358 <xTaskIncrementTick+0x164>)
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b01      	cmp	r3, #1
 800d312:	d901      	bls.n	800d318 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d314:	2301      	movs	r3, #1
 800d316:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d318:	4b11      	ldr	r3, [pc, #68]	; (800d360 <xTaskIncrementTick+0x16c>)
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d007      	beq.n	800d330 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d320:	2301      	movs	r3, #1
 800d322:	617b      	str	r3, [r7, #20]
 800d324:	e004      	b.n	800d330 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d326:	4b0f      	ldr	r3, [pc, #60]	; (800d364 <xTaskIncrementTick+0x170>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3301      	adds	r3, #1
 800d32c:	4a0d      	ldr	r2, [pc, #52]	; (800d364 <xTaskIncrementTick+0x170>)
 800d32e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d330:	697b      	ldr	r3, [r7, #20]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3718      	adds	r7, #24
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	20007b8c 	.word	0x20007b8c
 800d340:	20007b68 	.word	0x20007b68
 800d344:	20007b1c 	.word	0x20007b1c
 800d348:	20007b20 	.word	0x20007b20
 800d34c:	20007b7c 	.word	0x20007b7c
 800d350:	20007b84 	.word	0x20007b84
 800d354:	20007b6c 	.word	0x20007b6c
 800d358:	20007694 	.word	0x20007694
 800d35c:	20007690 	.word	0x20007690
 800d360:	20007b78 	.word	0x20007b78
 800d364:	20007b74 	.word	0x20007b74

0800d368 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d36e:	4b2a      	ldr	r3, [pc, #168]	; (800d418 <vTaskSwitchContext+0xb0>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d003      	beq.n	800d37e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d376:	4b29      	ldr	r3, [pc, #164]	; (800d41c <vTaskSwitchContext+0xb4>)
 800d378:	2201      	movs	r2, #1
 800d37a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d37c:	e046      	b.n	800d40c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d37e:	4b27      	ldr	r3, [pc, #156]	; (800d41c <vTaskSwitchContext+0xb4>)
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d384:	4b26      	ldr	r3, [pc, #152]	; (800d420 <vTaskSwitchContext+0xb8>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	e010      	b.n	800d3ae <vTaskSwitchContext+0x46>
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d10a      	bne.n	800d3a8 <vTaskSwitchContext+0x40>
	__asm volatile
 800d392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d396:	f383 8811 	msr	BASEPRI, r3
 800d39a:	f3bf 8f6f 	isb	sy
 800d39e:	f3bf 8f4f 	dsb	sy
 800d3a2:	607b      	str	r3, [r7, #4]
}
 800d3a4:	bf00      	nop
 800d3a6:	e7fe      	b.n	800d3a6 <vTaskSwitchContext+0x3e>
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	3b01      	subs	r3, #1
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	491d      	ldr	r1, [pc, #116]	; (800d424 <vTaskSwitchContext+0xbc>)
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	4613      	mov	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4413      	add	r3, r2
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	440b      	add	r3, r1
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d0e4      	beq.n	800d38c <vTaskSwitchContext+0x24>
 800d3c2:	68fa      	ldr	r2, [r7, #12]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4a15      	ldr	r2, [pc, #84]	; (800d424 <vTaskSwitchContext+0xbc>)
 800d3ce:	4413      	add	r3, r2
 800d3d0:	60bb      	str	r3, [r7, #8]
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	605a      	str	r2, [r3, #4]
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	685a      	ldr	r2, [r3, #4]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	3308      	adds	r3, #8
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d104      	bne.n	800d3f2 <vTaskSwitchContext+0x8a>
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	685a      	ldr	r2, [r3, #4]
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	605a      	str	r2, [r3, #4]
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	68db      	ldr	r3, [r3, #12]
 800d3f8:	4a0b      	ldr	r2, [pc, #44]	; (800d428 <vTaskSwitchContext+0xc0>)
 800d3fa:	6013      	str	r3, [r2, #0]
 800d3fc:	4a08      	ldr	r2, [pc, #32]	; (800d420 <vTaskSwitchContext+0xb8>)
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d402:	4b09      	ldr	r3, [pc, #36]	; (800d428 <vTaskSwitchContext+0xc0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3354      	adds	r3, #84	; 0x54
 800d408:	4a08      	ldr	r2, [pc, #32]	; (800d42c <vTaskSwitchContext+0xc4>)
 800d40a:	6013      	str	r3, [r2, #0]
}
 800d40c:	bf00      	nop
 800d40e:	3714      	adds	r7, #20
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr
 800d418:	20007b8c 	.word	0x20007b8c
 800d41c:	20007b78 	.word	0x20007b78
 800d420:	20007b6c 	.word	0x20007b6c
 800d424:	20007694 	.word	0x20007694
 800d428:	20007690 	.word	0x20007690
 800d42c:	200000d8 	.word	0x200000d8

0800d430 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d10a      	bne.n	800d456 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d440:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d444:	f383 8811 	msr	BASEPRI, r3
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	f3bf 8f4f 	dsb	sy
 800d450:	60fb      	str	r3, [r7, #12]
}
 800d452:	bf00      	nop
 800d454:	e7fe      	b.n	800d454 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d456:	4b07      	ldr	r3, [pc, #28]	; (800d474 <vTaskPlaceOnEventList+0x44>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3318      	adds	r3, #24
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7fe fcef 	bl	800be42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d464:	2101      	movs	r1, #1
 800d466:	6838      	ldr	r0, [r7, #0]
 800d468:	f000 fa80 	bl	800d96c <prvAddCurrentTaskToDelayedList>
}
 800d46c:	bf00      	nop
 800d46e:	3710      	adds	r7, #16
 800d470:	46bd      	mov	sp, r7
 800d472:	bd80      	pop	{r7, pc}
 800d474:	20007690 	.word	0x20007690

0800d478 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b086      	sub	sp, #24
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d10a      	bne.n	800d4a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	617b      	str	r3, [r7, #20]
}
 800d49c:	bf00      	nop
 800d49e:	e7fe      	b.n	800d49e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d4a0:	4b0a      	ldr	r3, [pc, #40]	; (800d4cc <vTaskPlaceOnEventListRestricted+0x54>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3318      	adds	r3, #24
 800d4a6:	4619      	mov	r1, r3
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f7fe fca6 	bl	800bdfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d002      	beq.n	800d4ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d4ba:	6879      	ldr	r1, [r7, #4]
 800d4bc:	68b8      	ldr	r0, [r7, #8]
 800d4be:	f000 fa55 	bl	800d96c <prvAddCurrentTaskToDelayedList>
	}
 800d4c2:	bf00      	nop
 800d4c4:	3718      	adds	r7, #24
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	20007690 	.word	0x20007690

0800d4d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b086      	sub	sp, #24
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	68db      	ldr	r3, [r3, #12]
 800d4dc:	68db      	ldr	r3, [r3, #12]
 800d4de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d4e0:	693b      	ldr	r3, [r7, #16]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d10a      	bne.n	800d4fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ea:	f383 8811 	msr	BASEPRI, r3
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	f3bf 8f4f 	dsb	sy
 800d4f6:	60fb      	str	r3, [r7, #12]
}
 800d4f8:	bf00      	nop
 800d4fa:	e7fe      	b.n	800d4fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	3318      	adds	r3, #24
 800d500:	4618      	mov	r0, r3
 800d502:	f7fe fcd7 	bl	800beb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d506:	4b1e      	ldr	r3, [pc, #120]	; (800d580 <xTaskRemoveFromEventList+0xb0>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d11d      	bne.n	800d54a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	3304      	adds	r3, #4
 800d512:	4618      	mov	r0, r3
 800d514:	f7fe fcce 	bl	800beb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d51c:	4b19      	ldr	r3, [pc, #100]	; (800d584 <xTaskRemoveFromEventList+0xb4>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	429a      	cmp	r2, r3
 800d522:	d903      	bls.n	800d52c <xTaskRemoveFromEventList+0x5c>
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d528:	4a16      	ldr	r2, [pc, #88]	; (800d584 <xTaskRemoveFromEventList+0xb4>)
 800d52a:	6013      	str	r3, [r2, #0]
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d530:	4613      	mov	r3, r2
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	4413      	add	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4a13      	ldr	r2, [pc, #76]	; (800d588 <xTaskRemoveFromEventList+0xb8>)
 800d53a:	441a      	add	r2, r3
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	3304      	adds	r3, #4
 800d540:	4619      	mov	r1, r3
 800d542:	4610      	mov	r0, r2
 800d544:	f7fe fc59 	bl	800bdfa <vListInsertEnd>
 800d548:	e005      	b.n	800d556 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d54a:	693b      	ldr	r3, [r7, #16]
 800d54c:	3318      	adds	r3, #24
 800d54e:	4619      	mov	r1, r3
 800d550:	480e      	ldr	r0, [pc, #56]	; (800d58c <xTaskRemoveFromEventList+0xbc>)
 800d552:	f7fe fc52 	bl	800bdfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55a:	4b0d      	ldr	r3, [pc, #52]	; (800d590 <xTaskRemoveFromEventList+0xc0>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d560:	429a      	cmp	r2, r3
 800d562:	d905      	bls.n	800d570 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d564:	2301      	movs	r3, #1
 800d566:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d568:	4b0a      	ldr	r3, [pc, #40]	; (800d594 <xTaskRemoveFromEventList+0xc4>)
 800d56a:	2201      	movs	r2, #1
 800d56c:	601a      	str	r2, [r3, #0]
 800d56e:	e001      	b.n	800d574 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d570:	2300      	movs	r3, #0
 800d572:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d574:	697b      	ldr	r3, [r7, #20]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3718      	adds	r7, #24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20007b8c 	.word	0x20007b8c
 800d584:	20007b6c 	.word	0x20007b6c
 800d588:	20007694 	.word	0x20007694
 800d58c:	20007b24 	.word	0x20007b24
 800d590:	20007690 	.word	0x20007690
 800d594:	20007b78 	.word	0x20007b78

0800d598 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d598:	b480      	push	{r7}
 800d59a:	b083      	sub	sp, #12
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d5a0:	4b06      	ldr	r3, [pc, #24]	; (800d5bc <vTaskInternalSetTimeOutState+0x24>)
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d5a8:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <vTaskInternalSetTimeOutState+0x28>)
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	605a      	str	r2, [r3, #4]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	20007b7c 	.word	0x20007b7c
 800d5c0:	20007b68 	.word	0x20007b68

0800d5c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b088      	sub	sp, #32
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d10a      	bne.n	800d5ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d8:	f383 8811 	msr	BASEPRI, r3
 800d5dc:	f3bf 8f6f 	isb	sy
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	613b      	str	r3, [r7, #16]
}
 800d5e6:	bf00      	nop
 800d5e8:	e7fe      	b.n	800d5e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	60fb      	str	r3, [r7, #12]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d606:	f000 fe7d 	bl	800e304 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d60a:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <xTaskCheckForTimeOut+0xbc>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	69ba      	ldr	r2, [r7, #24]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d622:	d102      	bne.n	800d62a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d624:	2300      	movs	r3, #0
 800d626:	61fb      	str	r3, [r7, #28]
 800d628:	e023      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681a      	ldr	r2, [r3, #0]
 800d62e:	4b15      	ldr	r3, [pc, #84]	; (800d684 <xTaskCheckForTimeOut+0xc0>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	429a      	cmp	r2, r3
 800d634:	d007      	beq.n	800d646 <xTaskCheckForTimeOut+0x82>
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	69ba      	ldr	r2, [r7, #24]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d302      	bcc.n	800d646 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d640:	2301      	movs	r3, #1
 800d642:	61fb      	str	r3, [r7, #28]
 800d644:	e015      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	697a      	ldr	r2, [r7, #20]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d20b      	bcs.n	800d668 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	1ad2      	subs	r2, r2, r3
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff ff9b 	bl	800d598 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d662:	2300      	movs	r3, #0
 800d664:	61fb      	str	r3, [r7, #28]
 800d666:	e004      	b.n	800d672 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	2200      	movs	r2, #0
 800d66c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d66e:	2301      	movs	r3, #1
 800d670:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d672:	f000 fe77 	bl	800e364 <vPortExitCritical>

	return xReturn;
 800d676:	69fb      	ldr	r3, [r7, #28]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3720      	adds	r7, #32
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20007b68 	.word	0x20007b68
 800d684:	20007b7c 	.word	0x20007b7c

0800d688 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d688:	b480      	push	{r7}
 800d68a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d68c:	4b03      	ldr	r3, [pc, #12]	; (800d69c <vTaskMissedYield+0x14>)
 800d68e:	2201      	movs	r2, #1
 800d690:	601a      	str	r2, [r3, #0]
}
 800d692:	bf00      	nop
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	20007b78 	.word	0x20007b78

0800d6a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b082      	sub	sp, #8
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d6a8:	f000 f852 	bl	800d750 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d6ac:	4b06      	ldr	r3, [pc, #24]	; (800d6c8 <prvIdleTask+0x28>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d9f9      	bls.n	800d6a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d6b4:	4b05      	ldr	r3, [pc, #20]	; (800d6cc <prvIdleTask+0x2c>)
 800d6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6ba:	601a      	str	r2, [r3, #0]
 800d6bc:	f3bf 8f4f 	dsb	sy
 800d6c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d6c4:	e7f0      	b.n	800d6a8 <prvIdleTask+0x8>
 800d6c6:	bf00      	nop
 800d6c8:	20007694 	.word	0x20007694
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	607b      	str	r3, [r7, #4]
 800d6da:	e00c      	b.n	800d6f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	4413      	add	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4a12      	ldr	r2, [pc, #72]	; (800d730 <prvInitialiseTaskLists+0x60>)
 800d6e8:	4413      	add	r3, r2
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fe fb58 	bl	800bda0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	607b      	str	r3, [r7, #4]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b37      	cmp	r3, #55	; 0x37
 800d6fa:	d9ef      	bls.n	800d6dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d6fc:	480d      	ldr	r0, [pc, #52]	; (800d734 <prvInitialiseTaskLists+0x64>)
 800d6fe:	f7fe fb4f 	bl	800bda0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d702:	480d      	ldr	r0, [pc, #52]	; (800d738 <prvInitialiseTaskLists+0x68>)
 800d704:	f7fe fb4c 	bl	800bda0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d708:	480c      	ldr	r0, [pc, #48]	; (800d73c <prvInitialiseTaskLists+0x6c>)
 800d70a:	f7fe fb49 	bl	800bda0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d70e:	480c      	ldr	r0, [pc, #48]	; (800d740 <prvInitialiseTaskLists+0x70>)
 800d710:	f7fe fb46 	bl	800bda0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d714:	480b      	ldr	r0, [pc, #44]	; (800d744 <prvInitialiseTaskLists+0x74>)
 800d716:	f7fe fb43 	bl	800bda0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d71a:	4b0b      	ldr	r3, [pc, #44]	; (800d748 <prvInitialiseTaskLists+0x78>)
 800d71c:	4a05      	ldr	r2, [pc, #20]	; (800d734 <prvInitialiseTaskLists+0x64>)
 800d71e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d720:	4b0a      	ldr	r3, [pc, #40]	; (800d74c <prvInitialiseTaskLists+0x7c>)
 800d722:	4a05      	ldr	r2, [pc, #20]	; (800d738 <prvInitialiseTaskLists+0x68>)
 800d724:	601a      	str	r2, [r3, #0]
}
 800d726:	bf00      	nop
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	20007694 	.word	0x20007694
 800d734:	20007af4 	.word	0x20007af4
 800d738:	20007b08 	.word	0x20007b08
 800d73c:	20007b24 	.word	0x20007b24
 800d740:	20007b38 	.word	0x20007b38
 800d744:	20007b50 	.word	0x20007b50
 800d748:	20007b1c 	.word	0x20007b1c
 800d74c:	20007b20 	.word	0x20007b20

0800d750 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d756:	e019      	b.n	800d78c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d758:	f000 fdd4 	bl	800e304 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d75c:	4b10      	ldr	r3, [pc, #64]	; (800d7a0 <prvCheckTasksWaitingTermination+0x50>)
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	68db      	ldr	r3, [r3, #12]
 800d762:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	3304      	adds	r3, #4
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fe fba3 	bl	800beb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d76e:	4b0d      	ldr	r3, [pc, #52]	; (800d7a4 <prvCheckTasksWaitingTermination+0x54>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3b01      	subs	r3, #1
 800d774:	4a0b      	ldr	r2, [pc, #44]	; (800d7a4 <prvCheckTasksWaitingTermination+0x54>)
 800d776:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d778:	4b0b      	ldr	r3, [pc, #44]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	3b01      	subs	r3, #1
 800d77e:	4a0a      	ldr	r2, [pc, #40]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d780:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d782:	f000 fdef 	bl	800e364 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 f810 	bl	800d7ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d78c:	4b06      	ldr	r3, [pc, #24]	; (800d7a8 <prvCheckTasksWaitingTermination+0x58>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d1e1      	bne.n	800d758 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d794:	bf00      	nop
 800d796:	bf00      	nop
 800d798:	3708      	adds	r7, #8
 800d79a:	46bd      	mov	sp, r7
 800d79c:	bd80      	pop	{r7, pc}
 800d79e:	bf00      	nop
 800d7a0:	20007b38 	.word	0x20007b38
 800d7a4:	20007b64 	.word	0x20007b64
 800d7a8:	20007b4c 	.word	0x20007b4c

0800d7ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	3354      	adds	r3, #84	; 0x54
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f001 fee1 	bl	800f580 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d108      	bne.n	800d7da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 ff5f 	bl	800e690 <vPortFree>
				vPortFree( pxTCB );
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 ff5c 	bl	800e690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d7d8:	e018      	b.n	800d80c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d7e0:	2b01      	cmp	r3, #1
 800d7e2:	d103      	bne.n	800d7ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f000 ff53 	bl	800e690 <vPortFree>
	}
 800d7ea:	e00f      	b.n	800d80c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d7f2:	2b02      	cmp	r3, #2
 800d7f4:	d00a      	beq.n	800d80c <prvDeleteTCB+0x60>
	__asm volatile
 800d7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fa:	f383 8811 	msr	BASEPRI, r3
 800d7fe:	f3bf 8f6f 	isb	sy
 800d802:	f3bf 8f4f 	dsb	sy
 800d806:	60fb      	str	r3, [r7, #12]
}
 800d808:	bf00      	nop
 800d80a:	e7fe      	b.n	800d80a <prvDeleteTCB+0x5e>
	}
 800d80c:	bf00      	nop
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d81a:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <prvResetNextTaskUnblockTime+0x38>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d104      	bne.n	800d82e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d824:	4b0a      	ldr	r3, [pc, #40]	; (800d850 <prvResetNextTaskUnblockTime+0x3c>)
 800d826:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d82a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d82c:	e008      	b.n	800d840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d82e:	4b07      	ldr	r3, [pc, #28]	; (800d84c <prvResetNextTaskUnblockTime+0x38>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	4a04      	ldr	r2, [pc, #16]	; (800d850 <prvResetNextTaskUnblockTime+0x3c>)
 800d83e:	6013      	str	r3, [r2, #0]
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	20007b1c 	.word	0x20007b1c
 800d850:	20007b84 	.word	0x20007b84

0800d854 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d85a:	4b0b      	ldr	r3, [pc, #44]	; (800d888 <xTaskGetSchedulerState+0x34>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d102      	bne.n	800d868 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d862:	2301      	movs	r3, #1
 800d864:	607b      	str	r3, [r7, #4]
 800d866:	e008      	b.n	800d87a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d868:	4b08      	ldr	r3, [pc, #32]	; (800d88c <xTaskGetSchedulerState+0x38>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d102      	bne.n	800d876 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d870:	2302      	movs	r3, #2
 800d872:	607b      	str	r3, [r7, #4]
 800d874:	e001      	b.n	800d87a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d876:	2300      	movs	r3, #0
 800d878:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d87a:	687b      	ldr	r3, [r7, #4]
	}
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr
 800d888:	20007b70 	.word	0x20007b70
 800d88c:	20007b8c 	.word	0x20007b8c

0800d890 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d89c:	2300      	movs	r3, #0
 800d89e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d056      	beq.n	800d954 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8a6:	4b2e      	ldr	r3, [pc, #184]	; (800d960 <xTaskPriorityDisinherit+0xd0>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d00a      	beq.n	800d8c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	60fb      	str	r3, [r7, #12]
}
 800d8c2:	bf00      	nop
 800d8c4:	e7fe      	b.n	800d8c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8c6:	693b      	ldr	r3, [r7, #16]
 800d8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d10a      	bne.n	800d8e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	60bb      	str	r3, [r7, #8]
}
 800d8e0:	bf00      	nop
 800d8e2:	e7fe      	b.n	800d8e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8e8:	1e5a      	subs	r2, r3, #1
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d02c      	beq.n	800d954 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d8fa:	693b      	ldr	r3, [r7, #16]
 800d8fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d128      	bne.n	800d954 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	3304      	adds	r3, #4
 800d906:	4618      	mov	r0, r3
 800d908:	f7fe fad4 	bl	800beb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d90c:	693b      	ldr	r3, [r7, #16]
 800d90e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d918:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d924:	4b0f      	ldr	r3, [pc, #60]	; (800d964 <xTaskPriorityDisinherit+0xd4>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d903      	bls.n	800d934 <xTaskPriorityDisinherit+0xa4>
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d930:	4a0c      	ldr	r2, [pc, #48]	; (800d964 <xTaskPriorityDisinherit+0xd4>)
 800d932:	6013      	str	r3, [r2, #0]
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d938:	4613      	mov	r3, r2
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	4413      	add	r3, r2
 800d93e:	009b      	lsls	r3, r3, #2
 800d940:	4a09      	ldr	r2, [pc, #36]	; (800d968 <xTaskPriorityDisinherit+0xd8>)
 800d942:	441a      	add	r2, r3
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	3304      	adds	r3, #4
 800d948:	4619      	mov	r1, r3
 800d94a:	4610      	mov	r0, r2
 800d94c:	f7fe fa55 	bl	800bdfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d950:	2301      	movs	r3, #1
 800d952:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d954:	697b      	ldr	r3, [r7, #20]
	}
 800d956:	4618      	mov	r0, r3
 800d958:	3718      	adds	r7, #24
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	20007690 	.word	0x20007690
 800d964:	20007b6c 	.word	0x20007b6c
 800d968:	20007694 	.word	0x20007694

0800d96c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b084      	sub	sp, #16
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d976:	4b21      	ldr	r3, [pc, #132]	; (800d9fc <prvAddCurrentTaskToDelayedList+0x90>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d97c:	4b20      	ldr	r3, [pc, #128]	; (800da00 <prvAddCurrentTaskToDelayedList+0x94>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	3304      	adds	r3, #4
 800d982:	4618      	mov	r0, r3
 800d984:	f7fe fa96 	bl	800beb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d98e:	d10a      	bne.n	800d9a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d007      	beq.n	800d9a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d996:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <prvAddCurrentTaskToDelayedList+0x94>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3304      	adds	r3, #4
 800d99c:	4619      	mov	r1, r3
 800d99e:	4819      	ldr	r0, [pc, #100]	; (800da04 <prvAddCurrentTaskToDelayedList+0x98>)
 800d9a0:	f7fe fa2b 	bl	800bdfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9a4:	e026      	b.n	800d9f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9a6:	68fa      	ldr	r2, [r7, #12]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4413      	add	r3, r2
 800d9ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9ae:	4b14      	ldr	r3, [pc, #80]	; (800da00 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68ba      	ldr	r2, [r7, #8]
 800d9b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d209      	bcs.n	800d9d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9be:	4b12      	ldr	r3, [pc, #72]	; (800da08 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d9c0:	681a      	ldr	r2, [r3, #0]
 800d9c2:	4b0f      	ldr	r3, [pc, #60]	; (800da00 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	3304      	adds	r3, #4
 800d9c8:	4619      	mov	r1, r3
 800d9ca:	4610      	mov	r0, r2
 800d9cc:	f7fe fa39 	bl	800be42 <vListInsert>
}
 800d9d0:	e010      	b.n	800d9f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9d2:	4b0e      	ldr	r3, [pc, #56]	; (800da0c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d9d4:	681a      	ldr	r2, [r3, #0]
 800d9d6:	4b0a      	ldr	r3, [pc, #40]	; (800da00 <prvAddCurrentTaskToDelayedList+0x94>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3304      	adds	r3, #4
 800d9dc:	4619      	mov	r1, r3
 800d9de:	4610      	mov	r0, r2
 800d9e0:	f7fe fa2f 	bl	800be42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9e4:	4b0a      	ldr	r3, [pc, #40]	; (800da10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68ba      	ldr	r2, [r7, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d202      	bcs.n	800d9f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d9ee:	4a08      	ldr	r2, [pc, #32]	; (800da10 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	6013      	str	r3, [r2, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	3710      	adds	r7, #16
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	bd80      	pop	{r7, pc}
 800d9fc:	20007b68 	.word	0x20007b68
 800da00:	20007690 	.word	0x20007690
 800da04:	20007b50 	.word	0x20007b50
 800da08:	20007b20 	.word	0x20007b20
 800da0c:	20007b1c 	.word	0x20007b1c
 800da10:	20007b84 	.word	0x20007b84

0800da14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b08a      	sub	sp, #40	; 0x28
 800da18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800da1a:	2300      	movs	r3, #0
 800da1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800da1e:	f000 fb07 	bl	800e030 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800da22:	4b1c      	ldr	r3, [pc, #112]	; (800da94 <xTimerCreateTimerTask+0x80>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d021      	beq.n	800da6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800da2a:	2300      	movs	r3, #0
 800da2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800da2e:	2300      	movs	r3, #0
 800da30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800da32:	1d3a      	adds	r2, r7, #4
 800da34:	f107 0108 	add.w	r1, r7, #8
 800da38:	f107 030c 	add.w	r3, r7, #12
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7fe f995 	bl	800bd6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800da42:	6879      	ldr	r1, [r7, #4]
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	68fa      	ldr	r2, [r7, #12]
 800da48:	9202      	str	r2, [sp, #8]
 800da4a:	9301      	str	r3, [sp, #4]
 800da4c:	2302      	movs	r3, #2
 800da4e:	9300      	str	r3, [sp, #0]
 800da50:	2300      	movs	r3, #0
 800da52:	460a      	mov	r2, r1
 800da54:	4910      	ldr	r1, [pc, #64]	; (800da98 <xTimerCreateTimerTask+0x84>)
 800da56:	4811      	ldr	r0, [pc, #68]	; (800da9c <xTimerCreateTimerTask+0x88>)
 800da58:	f7ff f8b4 	bl	800cbc4 <xTaskCreateStatic>
 800da5c:	4603      	mov	r3, r0
 800da5e:	4a10      	ldr	r2, [pc, #64]	; (800daa0 <xTimerCreateTimerTask+0x8c>)
 800da60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800da62:	4b0f      	ldr	r3, [pc, #60]	; (800daa0 <xTimerCreateTimerTask+0x8c>)
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d001      	beq.n	800da6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800da6a:	2301      	movs	r3, #1
 800da6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10a      	bne.n	800da8a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	613b      	str	r3, [r7, #16]
}
 800da86:	bf00      	nop
 800da88:	e7fe      	b.n	800da88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800da8a:	697b      	ldr	r3, [r7, #20]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3718      	adds	r7, #24
 800da90:	46bd      	mov	sp, r7
 800da92:	bd80      	pop	{r7, pc}
 800da94:	20007bc0 	.word	0x20007bc0
 800da98:	080119ec 	.word	0x080119ec
 800da9c:	0800dbd9 	.word	0x0800dbd9
 800daa0:	20007bc4 	.word	0x20007bc4

0800daa4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08a      	sub	sp, #40	; 0x28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dab2:	2300      	movs	r3, #0
 800dab4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d10a      	bne.n	800dad2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac0:	f383 8811 	msr	BASEPRI, r3
 800dac4:	f3bf 8f6f 	isb	sy
 800dac8:	f3bf 8f4f 	dsb	sy
 800dacc:	623b      	str	r3, [r7, #32]
}
 800dace:	bf00      	nop
 800dad0:	e7fe      	b.n	800dad0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dad2:	4b1a      	ldr	r3, [pc, #104]	; (800db3c <xTimerGenericCommand+0x98>)
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d02a      	beq.n	800db30 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2b05      	cmp	r3, #5
 800daea:	dc18      	bgt.n	800db1e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800daec:	f7ff feb2 	bl	800d854 <xTaskGetSchedulerState>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d109      	bne.n	800db0a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800daf6:	4b11      	ldr	r3, [pc, #68]	; (800db3c <xTimerGenericCommand+0x98>)
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	f107 0110 	add.w	r1, r7, #16
 800dafe:	2300      	movs	r3, #0
 800db00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db02:	f7fe fba9 	bl	800c258 <xQueueGenericSend>
 800db06:	6278      	str	r0, [r7, #36]	; 0x24
 800db08:	e012      	b.n	800db30 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800db0a:	4b0c      	ldr	r3, [pc, #48]	; (800db3c <xTimerGenericCommand+0x98>)
 800db0c:	6818      	ldr	r0, [r3, #0]
 800db0e:	f107 0110 	add.w	r1, r7, #16
 800db12:	2300      	movs	r3, #0
 800db14:	2200      	movs	r2, #0
 800db16:	f7fe fb9f 	bl	800c258 <xQueueGenericSend>
 800db1a:	6278      	str	r0, [r7, #36]	; 0x24
 800db1c:	e008      	b.n	800db30 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800db1e:	4b07      	ldr	r3, [pc, #28]	; (800db3c <xTimerGenericCommand+0x98>)
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	f107 0110 	add.w	r1, r7, #16
 800db26:	2300      	movs	r3, #0
 800db28:	683a      	ldr	r2, [r7, #0]
 800db2a:	f7fe fc93 	bl	800c454 <xQueueGenericSendFromISR>
 800db2e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db32:	4618      	mov	r0, r3
 800db34:	3728      	adds	r7, #40	; 0x28
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	20007bc0 	.word	0x20007bc0

0800db40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b088      	sub	sp, #32
 800db44:	af02      	add	r7, sp, #8
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db4a:	4b22      	ldr	r3, [pc, #136]	; (800dbd4 <prvProcessExpiredTimer+0x94>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800db54:	697b      	ldr	r3, [r7, #20]
 800db56:	3304      	adds	r3, #4
 800db58:	4618      	mov	r0, r3
 800db5a:	f7fe f9ab 	bl	800beb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d022      	beq.n	800dbb2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	699a      	ldr	r2, [r3, #24]
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	18d1      	adds	r1, r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	6978      	ldr	r0, [r7, #20]
 800db7a:	f000 f8d1 	bl	800dd20 <prvInsertTimerInActiveList>
 800db7e:	4603      	mov	r3, r0
 800db80:	2b00      	cmp	r3, #0
 800db82:	d01f      	beq.n	800dbc4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800db84:	2300      	movs	r3, #0
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	2300      	movs	r3, #0
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	2100      	movs	r1, #0
 800db8e:	6978      	ldr	r0, [r7, #20]
 800db90:	f7ff ff88 	bl	800daa4 <xTimerGenericCommand>
 800db94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d113      	bne.n	800dbc4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800db9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba0:	f383 8811 	msr	BASEPRI, r3
 800dba4:	f3bf 8f6f 	isb	sy
 800dba8:	f3bf 8f4f 	dsb	sy
 800dbac:	60fb      	str	r3, [r7, #12]
}
 800dbae:	bf00      	nop
 800dbb0:	e7fe      	b.n	800dbb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbb8:	f023 0301 	bic.w	r3, r3, #1
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	6a1b      	ldr	r3, [r3, #32]
 800dbc8:	6978      	ldr	r0, [r7, #20]
 800dbca:	4798      	blx	r3
}
 800dbcc:	bf00      	nop
 800dbce:	3718      	adds	r7, #24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	20007bb8 	.word	0x20007bb8

0800dbd8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b084      	sub	sp, #16
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbe0:	f107 0308 	add.w	r3, r7, #8
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f000 f857 	bl	800dc98 <prvGetNextExpireTime>
 800dbea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f000 f803 	bl	800dbfc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dbf6:	f000 f8d5 	bl	800dda4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dbfa:	e7f1      	b.n	800dbe0 <prvTimerTask+0x8>

0800dbfc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dc06:	f7ff fa39 	bl	800d07c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dc0a:	f107 0308 	add.w	r3, r7, #8
 800dc0e:	4618      	mov	r0, r3
 800dc10:	f000 f866 	bl	800dce0 <prvSampleTimeNow>
 800dc14:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d130      	bne.n	800dc7e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10a      	bne.n	800dc38 <prvProcessTimerOrBlockTask+0x3c>
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d806      	bhi.n	800dc38 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dc2a:	f7ff fa35 	bl	800d098 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dc2e:	68f9      	ldr	r1, [r7, #12]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f7ff ff85 	bl	800db40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dc36:	e024      	b.n	800dc82 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d008      	beq.n	800dc50 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dc3e:	4b13      	ldr	r3, [pc, #76]	; (800dc8c <prvProcessTimerOrBlockTask+0x90>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <prvProcessTimerOrBlockTask+0x50>
 800dc48:	2301      	movs	r3, #1
 800dc4a:	e000      	b.n	800dc4e <prvProcessTimerOrBlockTask+0x52>
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dc50:	4b0f      	ldr	r3, [pc, #60]	; (800dc90 <prvProcessTimerOrBlockTask+0x94>)
 800dc52:	6818      	ldr	r0, [r3, #0]
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	f7fe ff7d 	bl	800cb5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dc62:	f7ff fa19 	bl	800d098 <xTaskResumeAll>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d10a      	bne.n	800dc82 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dc6c:	4b09      	ldr	r3, [pc, #36]	; (800dc94 <prvProcessTimerOrBlockTask+0x98>)
 800dc6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc72:	601a      	str	r2, [r3, #0]
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	f3bf 8f6f 	isb	sy
}
 800dc7c:	e001      	b.n	800dc82 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800dc7e:	f7ff fa0b 	bl	800d098 <xTaskResumeAll>
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	20007bbc 	.word	0x20007bbc
 800dc90:	20007bc0 	.word	0x20007bc0
 800dc94:	e000ed04 	.word	0xe000ed04

0800dc98 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dca0:	4b0e      	ldr	r3, [pc, #56]	; (800dcdc <prvGetNextExpireTime+0x44>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d101      	bne.n	800dcae <prvGetNextExpireTime+0x16>
 800dcaa:	2201      	movs	r2, #1
 800dcac:	e000      	b.n	800dcb0 <prvGetNextExpireTime+0x18>
 800dcae:	2200      	movs	r2, #0
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d105      	bne.n	800dcc8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dcbc:	4b07      	ldr	r3, [pc, #28]	; (800dcdc <prvGetNextExpireTime+0x44>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	e001      	b.n	800dccc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800dccc:	68fb      	ldr	r3, [r7, #12]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3714      	adds	r7, #20
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	20007bb8 	.word	0x20007bb8

0800dce0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800dce8:	f7ff fa74 	bl	800d1d4 <xTaskGetTickCount>
 800dcec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800dcee:	4b0b      	ldr	r3, [pc, #44]	; (800dd1c <prvSampleTimeNow+0x3c>)
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	429a      	cmp	r2, r3
 800dcf6:	d205      	bcs.n	800dd04 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800dcf8:	f000 f936 	bl	800df68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2201      	movs	r2, #1
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	e002      	b.n	800dd0a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2200      	movs	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dd0a:	4a04      	ldr	r2, [pc, #16]	; (800dd1c <prvSampleTimeNow+0x3c>)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dd10:	68fb      	ldr	r3, [r7, #12]
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3710      	adds	r7, #16
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	20007bc8 	.word	0x20007bc8

0800dd20 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b086      	sub	sp, #24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	607a      	str	r2, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	68fa      	ldr	r2, [r7, #12]
 800dd3c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d812      	bhi.n	800dd6c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd46:	687a      	ldr	r2, [r7, #4]
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	1ad2      	subs	r2, r2, r3
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	699b      	ldr	r3, [r3, #24]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d302      	bcc.n	800dd5a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dd54:	2301      	movs	r3, #1
 800dd56:	617b      	str	r3, [r7, #20]
 800dd58:	e01b      	b.n	800dd92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800dd5a:	4b10      	ldr	r3, [pc, #64]	; (800dd9c <prvInsertTimerInActiveList+0x7c>)
 800dd5c:	681a      	ldr	r2, [r3, #0]
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3304      	adds	r3, #4
 800dd62:	4619      	mov	r1, r3
 800dd64:	4610      	mov	r0, r2
 800dd66:	f7fe f86c 	bl	800be42 <vListInsert>
 800dd6a:	e012      	b.n	800dd92 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dd6c:	687a      	ldr	r2, [r7, #4]
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d206      	bcs.n	800dd82 <prvInsertTimerInActiveList+0x62>
 800dd74:	68ba      	ldr	r2, [r7, #8]
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d302      	bcc.n	800dd82 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	617b      	str	r3, [r7, #20]
 800dd80:	e007      	b.n	800dd92 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd82:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <prvInsertTimerInActiveList+0x80>)
 800dd84:	681a      	ldr	r2, [r3, #0]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3304      	adds	r3, #4
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	4610      	mov	r0, r2
 800dd8e:	f7fe f858 	bl	800be42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800dd92:	697b      	ldr	r3, [r7, #20]
}
 800dd94:	4618      	mov	r0, r3
 800dd96:	3718      	adds	r7, #24
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	bd80      	pop	{r7, pc}
 800dd9c:	20007bbc 	.word	0x20007bbc
 800dda0:	20007bb8 	.word	0x20007bb8

0800dda4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b08e      	sub	sp, #56	; 0x38
 800dda8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ddaa:	e0ca      	b.n	800df42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	da18      	bge.n	800dde4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ddb2:	1d3b      	adds	r3, r7, #4
 800ddb4:	3304      	adds	r3, #4
 800ddb6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d10a      	bne.n	800ddd4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ddbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc2:	f383 8811 	msr	BASEPRI, r3
 800ddc6:	f3bf 8f6f 	isb	sy
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	61fb      	str	r3, [r7, #28]
}
 800ddd0:	bf00      	nop
 800ddd2:	e7fe      	b.n	800ddd2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ddd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddda:	6850      	ldr	r0, [r2, #4]
 800dddc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddde:	6892      	ldr	r2, [r2, #8]
 800dde0:	4611      	mov	r1, r2
 800dde2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	f2c0 80aa 	blt.w	800df40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	695b      	ldr	r3, [r3, #20]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d004      	beq.n	800de02 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	3304      	adds	r3, #4
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fe f859 	bl	800beb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800de02:	463b      	mov	r3, r7
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff ff6b 	bl	800dce0 <prvSampleTimeNow>
 800de0a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2b09      	cmp	r3, #9
 800de10:	f200 8097 	bhi.w	800df42 <prvProcessReceivedCommands+0x19e>
 800de14:	a201      	add	r2, pc, #4	; (adr r2, 800de1c <prvProcessReceivedCommands+0x78>)
 800de16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de1a:	bf00      	nop
 800de1c:	0800de45 	.word	0x0800de45
 800de20:	0800de45 	.word	0x0800de45
 800de24:	0800de45 	.word	0x0800de45
 800de28:	0800deb9 	.word	0x0800deb9
 800de2c:	0800decd 	.word	0x0800decd
 800de30:	0800df17 	.word	0x0800df17
 800de34:	0800de45 	.word	0x0800de45
 800de38:	0800de45 	.word	0x0800de45
 800de3c:	0800deb9 	.word	0x0800deb9
 800de40:	0800decd 	.word	0x0800decd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800de44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de4a:	f043 0301 	orr.w	r3, r3, #1
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800de56:	68ba      	ldr	r2, [r7, #8]
 800de58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de5a:	699b      	ldr	r3, [r3, #24]
 800de5c:	18d1      	adds	r1, r2, r3
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de64:	f7ff ff5c 	bl	800dd20 <prvInsertTimerInActiveList>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d069      	beq.n	800df42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de70:	6a1b      	ldr	r3, [r3, #32]
 800de72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800de7c:	f003 0304 	and.w	r3, r3, #4
 800de80:	2b00      	cmp	r3, #0
 800de82:	d05e      	beq.n	800df42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800de84:	68ba      	ldr	r2, [r7, #8]
 800de86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	441a      	add	r2, r3
 800de8c:	2300      	movs	r3, #0
 800de8e:	9300      	str	r3, [sp, #0]
 800de90:	2300      	movs	r3, #0
 800de92:	2100      	movs	r1, #0
 800de94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de96:	f7ff fe05 	bl	800daa4 <xTimerGenericCommand>
 800de9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800de9c:	6a3b      	ldr	r3, [r7, #32]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d14f      	bne.n	800df42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	61bb      	str	r3, [r7, #24]
}
 800deb4:	bf00      	nop
 800deb6:	e7fe      	b.n	800deb6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800deb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800debe:	f023 0301 	bic.w	r3, r3, #1
 800dec2:	b2da      	uxtb	r2, r3
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800deca:	e03a      	b.n	800df42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ded2:	f043 0301 	orr.w	r3, r3, #1
 800ded6:	b2da      	uxtb	r2, r3
 800ded8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d10a      	bne.n	800df02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	617b      	str	r3, [r7, #20]
}
 800defe:	bf00      	nop
 800df00:	e7fe      	b.n	800df00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df04:	699a      	ldr	r2, [r3, #24]
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	18d1      	adds	r1, r2, r3
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df10:	f7ff ff06 	bl	800dd20 <prvInsertTimerInActiveList>
					break;
 800df14:	e015      	b.n	800df42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800df16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df1c:	f003 0302 	and.w	r3, r3, #2
 800df20:	2b00      	cmp	r3, #0
 800df22:	d103      	bne.n	800df2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800df24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df26:	f000 fbb3 	bl	800e690 <vPortFree>
 800df2a:	e00a      	b.n	800df42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800df2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df32:	f023 0301 	bic.w	r3, r3, #1
 800df36:	b2da      	uxtb	r2, r3
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800df3e:	e000      	b.n	800df42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800df40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <prvProcessReceivedCommands+0x1c0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	1d39      	adds	r1, r7, #4
 800df48:	2200      	movs	r2, #0
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fe fb1e 	bl	800c58c <xQueueReceive>
 800df50:	4603      	mov	r3, r0
 800df52:	2b00      	cmp	r3, #0
 800df54:	f47f af2a 	bne.w	800ddac <prvProcessReceivedCommands+0x8>
	}
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	3730      	adds	r7, #48	; 0x30
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	20007bc0 	.word	0x20007bc0

0800df68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b088      	sub	sp, #32
 800df6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df6e:	e048      	b.n	800e002 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800df70:	4b2d      	ldr	r3, [pc, #180]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df7a:	4b2b      	ldr	r3, [pc, #172]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68db      	ldr	r3, [r3, #12]
 800df80:	68db      	ldr	r3, [r3, #12]
 800df82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3304      	adds	r3, #4
 800df88:	4618      	mov	r0, r3
 800df8a:	f7fd ff93 	bl	800beb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df9c:	f003 0304 	and.w	r3, r3, #4
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d02e      	beq.n	800e002 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	699b      	ldr	r3, [r3, #24]
 800dfa8:	693a      	ldr	r2, [r7, #16]
 800dfaa:	4413      	add	r3, r2
 800dfac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dfae:	68ba      	ldr	r2, [r7, #8]
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d90e      	bls.n	800dfd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dfc2:	4b19      	ldr	r3, [pc, #100]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	3304      	adds	r3, #4
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4610      	mov	r0, r2
 800dfce:	f7fd ff38 	bl	800be42 <vListInsert>
 800dfd2:	e016      	b.n	800e002 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	693a      	ldr	r2, [r7, #16]
 800dfdc:	2100      	movs	r1, #0
 800dfde:	68f8      	ldr	r0, [r7, #12]
 800dfe0:	f7ff fd60 	bl	800daa4 <xTimerGenericCommand>
 800dfe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d10a      	bne.n	800e002 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	603b      	str	r3, [r7, #0]
}
 800dffe:	bf00      	nop
 800e000:	e7fe      	b.n	800e000 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e002:	4b09      	ldr	r3, [pc, #36]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1b1      	bne.n	800df70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e00c:	4b06      	ldr	r3, [pc, #24]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e012:	4b06      	ldr	r3, [pc, #24]	; (800e02c <prvSwitchTimerLists+0xc4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a04      	ldr	r2, [pc, #16]	; (800e028 <prvSwitchTimerLists+0xc0>)
 800e018:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e01a:	4a04      	ldr	r2, [pc, #16]	; (800e02c <prvSwitchTimerLists+0xc4>)
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	6013      	str	r3, [r2, #0]
}
 800e020:	bf00      	nop
 800e022:	3718      	adds	r7, #24
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	20007bb8 	.word	0x20007bb8
 800e02c:	20007bbc 	.word	0x20007bbc

0800e030 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e036:	f000 f965 	bl	800e304 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e03a:	4b15      	ldr	r3, [pc, #84]	; (800e090 <prvCheckForValidListAndQueue+0x60>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d120      	bne.n	800e084 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e042:	4814      	ldr	r0, [pc, #80]	; (800e094 <prvCheckForValidListAndQueue+0x64>)
 800e044:	f7fd feac 	bl	800bda0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e048:	4813      	ldr	r0, [pc, #76]	; (800e098 <prvCheckForValidListAndQueue+0x68>)
 800e04a:	f7fd fea9 	bl	800bda0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e04e:	4b13      	ldr	r3, [pc, #76]	; (800e09c <prvCheckForValidListAndQueue+0x6c>)
 800e050:	4a10      	ldr	r2, [pc, #64]	; (800e094 <prvCheckForValidListAndQueue+0x64>)
 800e052:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e054:	4b12      	ldr	r3, [pc, #72]	; (800e0a0 <prvCheckForValidListAndQueue+0x70>)
 800e056:	4a10      	ldr	r2, [pc, #64]	; (800e098 <prvCheckForValidListAndQueue+0x68>)
 800e058:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e05a:	2300      	movs	r3, #0
 800e05c:	9300      	str	r3, [sp, #0]
 800e05e:	4b11      	ldr	r3, [pc, #68]	; (800e0a4 <prvCheckForValidListAndQueue+0x74>)
 800e060:	4a11      	ldr	r2, [pc, #68]	; (800e0a8 <prvCheckForValidListAndQueue+0x78>)
 800e062:	2110      	movs	r1, #16
 800e064:	200a      	movs	r0, #10
 800e066:	f7fd ffb7 	bl	800bfd8 <xQueueGenericCreateStatic>
 800e06a:	4603      	mov	r3, r0
 800e06c:	4a08      	ldr	r2, [pc, #32]	; (800e090 <prvCheckForValidListAndQueue+0x60>)
 800e06e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e070:	4b07      	ldr	r3, [pc, #28]	; (800e090 <prvCheckForValidListAndQueue+0x60>)
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d005      	beq.n	800e084 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e078:	4b05      	ldr	r3, [pc, #20]	; (800e090 <prvCheckForValidListAndQueue+0x60>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	490b      	ldr	r1, [pc, #44]	; (800e0ac <prvCheckForValidListAndQueue+0x7c>)
 800e07e:	4618      	mov	r0, r3
 800e080:	f7fe fd18 	bl	800cab4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e084:	f000 f96e 	bl	800e364 <vPortExitCritical>
}
 800e088:	bf00      	nop
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	20007bc0 	.word	0x20007bc0
 800e094:	20007b90 	.word	0x20007b90
 800e098:	20007ba4 	.word	0x20007ba4
 800e09c:	20007bb8 	.word	0x20007bb8
 800e0a0:	20007bbc 	.word	0x20007bbc
 800e0a4:	20007c6c 	.word	0x20007c6c
 800e0a8:	20007bcc 	.word	0x20007bcc
 800e0ac:	080119f4 	.word	0x080119f4

0800e0b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b085      	sub	sp, #20
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	60f8      	str	r0, [r7, #12]
 800e0b8:	60b9      	str	r1, [r7, #8]
 800e0ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3b04      	subs	r3, #4
 800e0c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	3b04      	subs	r3, #4
 800e0ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	f023 0201 	bic.w	r2, r3, #1
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	3b04      	subs	r3, #4
 800e0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e0e0:	4a0c      	ldr	r2, [pc, #48]	; (800e114 <pxPortInitialiseStack+0x64>)
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3b14      	subs	r3, #20
 800e0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	3b04      	subs	r3, #4
 800e0f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f06f 0202 	mvn.w	r2, #2
 800e0fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3b20      	subs	r3, #32
 800e104:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e106:	68fb      	ldr	r3, [r7, #12]
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	0800e119 	.word	0x0800e119

0800e118 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e122:	4b12      	ldr	r3, [pc, #72]	; (800e16c <prvTaskExitError+0x54>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e12a:	d00a      	beq.n	800e142 <prvTaskExitError+0x2a>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	60fb      	str	r3, [r7, #12]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <prvTaskExitError+0x28>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	f383 8811 	msr	BASEPRI, r3
 800e14a:	f3bf 8f6f 	isb	sy
 800e14e:	f3bf 8f4f 	dsb	sy
 800e152:	60bb      	str	r3, [r7, #8]
}
 800e154:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e156:	bf00      	nop
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0fc      	beq.n	800e158 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e15e:	bf00      	nop
 800e160:	bf00      	nop
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr
 800e16c:	200000d4 	.word	0x200000d4

0800e170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e170:	4b07      	ldr	r3, [pc, #28]	; (800e190 <pxCurrentTCBConst2>)
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	6808      	ldr	r0, [r1, #0]
 800e176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17a:	f380 8809 	msr	PSP, r0
 800e17e:	f3bf 8f6f 	isb	sy
 800e182:	f04f 0000 	mov.w	r0, #0
 800e186:	f380 8811 	msr	BASEPRI, r0
 800e18a:	4770      	bx	lr
 800e18c:	f3af 8000 	nop.w

0800e190 <pxCurrentTCBConst2>:
 800e190:	20007690 	.word	0x20007690
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e194:	bf00      	nop
 800e196:	bf00      	nop

0800e198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e198:	4808      	ldr	r0, [pc, #32]	; (800e1bc <prvPortStartFirstTask+0x24>)
 800e19a:	6800      	ldr	r0, [r0, #0]
 800e19c:	6800      	ldr	r0, [r0, #0]
 800e19e:	f380 8808 	msr	MSP, r0
 800e1a2:	f04f 0000 	mov.w	r0, #0
 800e1a6:	f380 8814 	msr	CONTROL, r0
 800e1aa:	b662      	cpsie	i
 800e1ac:	b661      	cpsie	f
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	df00      	svc	0
 800e1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e1ba:	bf00      	nop
 800e1bc:	e000ed08 	.word	0xe000ed08

0800e1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b086      	sub	sp, #24
 800e1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e1c6:	4b46      	ldr	r3, [pc, #280]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	4a46      	ldr	r2, [pc, #280]	; (800e2e4 <xPortStartScheduler+0x124>)
 800e1cc:	4293      	cmp	r3, r2
 800e1ce:	d10a      	bne.n	800e1e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d4:	f383 8811 	msr	BASEPRI, r3
 800e1d8:	f3bf 8f6f 	isb	sy
 800e1dc:	f3bf 8f4f 	dsb	sy
 800e1e0:	613b      	str	r3, [r7, #16]
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e1e6:	4b3e      	ldr	r3, [pc, #248]	; (800e2e0 <xPortStartScheduler+0x120>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a3f      	ldr	r2, [pc, #252]	; (800e2e8 <xPortStartScheduler+0x128>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d10a      	bne.n	800e206 <xPortStartScheduler+0x46>
	__asm volatile
 800e1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f4:	f383 8811 	msr	BASEPRI, r3
 800e1f8:	f3bf 8f6f 	isb	sy
 800e1fc:	f3bf 8f4f 	dsb	sy
 800e200:	60fb      	str	r3, [r7, #12]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e206:	4b39      	ldr	r3, [pc, #228]	; (800e2ec <xPortStartScheduler+0x12c>)
 800e208:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	781b      	ldrb	r3, [r3, #0]
 800e20e:	b2db      	uxtb	r3, r3
 800e210:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	22ff      	movs	r2, #255	; 0xff
 800e216:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b31      	ldr	r3, [pc, #196]	; (800e2f0 <xPortStartScheduler+0x130>)
 800e22c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e22e:	4b31      	ldr	r3, [pc, #196]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e230:	2207      	movs	r2, #7
 800e232:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e234:	e009      	b.n	800e24a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e236:	4b2f      	ldr	r3, [pc, #188]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3b01      	subs	r3, #1
 800e23c:	4a2d      	ldr	r2, [pc, #180]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e23e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e240:	78fb      	ldrb	r3, [r7, #3]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	005b      	lsls	r3, r3, #1
 800e246:	b2db      	uxtb	r3, r3
 800e248:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e24a:	78fb      	ldrb	r3, [r7, #3]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e252:	2b80      	cmp	r3, #128	; 0x80
 800e254:	d0ef      	beq.n	800e236 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e256:	4b27      	ldr	r3, [pc, #156]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f1c3 0307 	rsb	r3, r3, #7
 800e25e:	2b04      	cmp	r3, #4
 800e260:	d00a      	beq.n	800e278 <xPortStartScheduler+0xb8>
	__asm volatile
 800e262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e266:	f383 8811 	msr	BASEPRI, r3
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	f3bf 8f4f 	dsb	sy
 800e272:	60bb      	str	r3, [r7, #8]
}
 800e274:	bf00      	nop
 800e276:	e7fe      	b.n	800e276 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e278:	4b1e      	ldr	r3, [pc, #120]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	021b      	lsls	r3, r3, #8
 800e27e:	4a1d      	ldr	r2, [pc, #116]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e280:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e282:	4b1c      	ldr	r3, [pc, #112]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e28a:	4a1a      	ldr	r2, [pc, #104]	; (800e2f4 <xPortStartScheduler+0x134>)
 800e28c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	b2da      	uxtb	r2, r3
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e296:	4b18      	ldr	r3, [pc, #96]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4a17      	ldr	r2, [pc, #92]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e29c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e2a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e2a2:	4b15      	ldr	r3, [pc, #84]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	4a14      	ldr	r2, [pc, #80]	; (800e2f8 <xPortStartScheduler+0x138>)
 800e2a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e2ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e2ae:	f000 f8dd 	bl	800e46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e2b2:	4b12      	ldr	r3, [pc, #72]	; (800e2fc <xPortStartScheduler+0x13c>)
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e2b8:	f000 f8fc 	bl	800e4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e2bc:	4b10      	ldr	r3, [pc, #64]	; (800e300 <xPortStartScheduler+0x140>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	4a0f      	ldr	r2, [pc, #60]	; (800e300 <xPortStartScheduler+0x140>)
 800e2c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e2c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e2c8:	f7ff ff66 	bl	800e198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e2cc:	f7ff f84c 	bl	800d368 <vTaskSwitchContext>
	prvTaskExitError();
 800e2d0:	f7ff ff22 	bl	800e118 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e2d4:	2300      	movs	r3, #0
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3718      	adds	r7, #24
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}
 800e2de:	bf00      	nop
 800e2e0:	e000ed00 	.word	0xe000ed00
 800e2e4:	410fc271 	.word	0x410fc271
 800e2e8:	410fc270 	.word	0x410fc270
 800e2ec:	e000e400 	.word	0xe000e400
 800e2f0:	20007cbc 	.word	0x20007cbc
 800e2f4:	20007cc0 	.word	0x20007cc0
 800e2f8:	e000ed20 	.word	0xe000ed20
 800e2fc:	200000d4 	.word	0x200000d4
 800e300:	e000ef34 	.word	0xe000ef34

0800e304 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
	__asm volatile
 800e30a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e30e:	f383 8811 	msr	BASEPRI, r3
 800e312:	f3bf 8f6f 	isb	sy
 800e316:	f3bf 8f4f 	dsb	sy
 800e31a:	607b      	str	r3, [r7, #4]
}
 800e31c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e31e:	4b0f      	ldr	r3, [pc, #60]	; (800e35c <vPortEnterCritical+0x58>)
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	3301      	adds	r3, #1
 800e324:	4a0d      	ldr	r2, [pc, #52]	; (800e35c <vPortEnterCritical+0x58>)
 800e326:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e328:	4b0c      	ldr	r3, [pc, #48]	; (800e35c <vPortEnterCritical+0x58>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d10f      	bne.n	800e350 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e330:	4b0b      	ldr	r3, [pc, #44]	; (800e360 <vPortEnterCritical+0x5c>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	b2db      	uxtb	r3, r3
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <vPortEnterCritical+0x4c>
	__asm volatile
 800e33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e33e:	f383 8811 	msr	BASEPRI, r3
 800e342:	f3bf 8f6f 	isb	sy
 800e346:	f3bf 8f4f 	dsb	sy
 800e34a:	603b      	str	r3, [r7, #0]
}
 800e34c:	bf00      	nop
 800e34e:	e7fe      	b.n	800e34e <vPortEnterCritical+0x4a>
	}
}
 800e350:	bf00      	nop
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	200000d4 	.word	0x200000d4
 800e360:	e000ed04 	.word	0xe000ed04

0800e364 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e36a:	4b12      	ldr	r3, [pc, #72]	; (800e3b4 <vPortExitCritical+0x50>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d10a      	bne.n	800e388 <vPortExitCritical+0x24>
	__asm volatile
 800e372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	607b      	str	r3, [r7, #4]
}
 800e384:	bf00      	nop
 800e386:	e7fe      	b.n	800e386 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e388:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <vPortExitCritical+0x50>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	4a09      	ldr	r2, [pc, #36]	; (800e3b4 <vPortExitCritical+0x50>)
 800e390:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e392:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <vPortExitCritical+0x50>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <vPortExitCritical+0x42>
 800e39a:	2300      	movs	r3, #0
 800e39c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	f383 8811 	msr	BASEPRI, r3
}
 800e3a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e3a6:	bf00      	nop
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	200000d4 	.word	0x200000d4
	...

0800e3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e3c0:	f3ef 8009 	mrs	r0, PSP
 800e3c4:	f3bf 8f6f 	isb	sy
 800e3c8:	4b15      	ldr	r3, [pc, #84]	; (800e420 <pxCurrentTCBConst>)
 800e3ca:	681a      	ldr	r2, [r3, #0]
 800e3cc:	f01e 0f10 	tst.w	lr, #16
 800e3d0:	bf08      	it	eq
 800e3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3da:	6010      	str	r0, [r2, #0]
 800e3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e3e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e3e4:	f380 8811 	msr	BASEPRI, r0
 800e3e8:	f3bf 8f4f 	dsb	sy
 800e3ec:	f3bf 8f6f 	isb	sy
 800e3f0:	f7fe ffba 	bl	800d368 <vTaskSwitchContext>
 800e3f4:	f04f 0000 	mov.w	r0, #0
 800e3f8:	f380 8811 	msr	BASEPRI, r0
 800e3fc:	bc09      	pop	{r0, r3}
 800e3fe:	6819      	ldr	r1, [r3, #0]
 800e400:	6808      	ldr	r0, [r1, #0]
 800e402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e406:	f01e 0f10 	tst.w	lr, #16
 800e40a:	bf08      	it	eq
 800e40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e410:	f380 8809 	msr	PSP, r0
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w

0800e420 <pxCurrentTCBConst>:
 800e420:	20007690 	.word	0x20007690
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop

0800e428 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
	__asm volatile
 800e42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	607b      	str	r3, [r7, #4]
}
 800e440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e442:	f7fe fed7 	bl	800d1f4 <xTaskIncrementTick>
 800e446:	4603      	mov	r3, r0
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d003      	beq.n	800e454 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e44c:	4b06      	ldr	r3, [pc, #24]	; (800e468 <xPortSysTickHandler+0x40>)
 800e44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e452:	601a      	str	r2, [r3, #0]
 800e454:	2300      	movs	r3, #0
 800e456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	f383 8811 	msr	BASEPRI, r3
}
 800e45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e460:	bf00      	nop
 800e462:	3708      	adds	r7, #8
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}
 800e468:	e000ed04 	.word	0xe000ed04

0800e46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e46c:	b480      	push	{r7}
 800e46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e472:	2200      	movs	r2, #0
 800e474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e476:	4b0b      	ldr	r3, [pc, #44]	; (800e4a4 <vPortSetupTimerInterrupt+0x38>)
 800e478:	2200      	movs	r2, #0
 800e47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e47c:	4b0a      	ldr	r3, [pc, #40]	; (800e4a8 <vPortSetupTimerInterrupt+0x3c>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4a0a      	ldr	r2, [pc, #40]	; (800e4ac <vPortSetupTimerInterrupt+0x40>)
 800e482:	fba2 2303 	umull	r2, r3, r2, r3
 800e486:	099b      	lsrs	r3, r3, #6
 800e488:	4a09      	ldr	r2, [pc, #36]	; (800e4b0 <vPortSetupTimerInterrupt+0x44>)
 800e48a:	3b01      	subs	r3, #1
 800e48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e48e:	4b04      	ldr	r3, [pc, #16]	; (800e4a0 <vPortSetupTimerInterrupt+0x34>)
 800e490:	2207      	movs	r2, #7
 800e492:	601a      	str	r2, [r3, #0]
}
 800e494:	bf00      	nop
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop
 800e4a0:	e000e010 	.word	0xe000e010
 800e4a4:	e000e018 	.word	0xe000e018
 800e4a8:	200000b8 	.word	0x200000b8
 800e4ac:	10624dd3 	.word	0x10624dd3
 800e4b0:	e000e014 	.word	0xe000e014

0800e4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e4c4 <vPortEnableVFP+0x10>
 800e4b8:	6801      	ldr	r1, [r0, #0]
 800e4ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e4be:	6001      	str	r1, [r0, #0]
 800e4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e4c2:	bf00      	nop
 800e4c4:	e000ed88 	.word	0xe000ed88

0800e4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e4ce:	f3ef 8305 	mrs	r3, IPSR
 800e4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b0f      	cmp	r3, #15
 800e4d8:	d914      	bls.n	800e504 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e4da:	4a17      	ldr	r2, [pc, #92]	; (800e538 <vPortValidateInterruptPriority+0x70>)
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	4413      	add	r3, r2
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e4e4:	4b15      	ldr	r3, [pc, #84]	; (800e53c <vPortValidateInterruptPriority+0x74>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	7afa      	ldrb	r2, [r7, #11]
 800e4ea:	429a      	cmp	r2, r3
 800e4ec:	d20a      	bcs.n	800e504 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f2:	f383 8811 	msr	BASEPRI, r3
 800e4f6:	f3bf 8f6f 	isb	sy
 800e4fa:	f3bf 8f4f 	dsb	sy
 800e4fe:	607b      	str	r3, [r7, #4]
}
 800e500:	bf00      	nop
 800e502:	e7fe      	b.n	800e502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e504:	4b0e      	ldr	r3, [pc, #56]	; (800e540 <vPortValidateInterruptPriority+0x78>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e50c:	4b0d      	ldr	r3, [pc, #52]	; (800e544 <vPortValidateInterruptPriority+0x7c>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d90a      	bls.n	800e52a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	f383 8811 	msr	BASEPRI, r3
 800e51c:	f3bf 8f6f 	isb	sy
 800e520:	f3bf 8f4f 	dsb	sy
 800e524:	603b      	str	r3, [r7, #0]
}
 800e526:	bf00      	nop
 800e528:	e7fe      	b.n	800e528 <vPortValidateInterruptPriority+0x60>
	}
 800e52a:	bf00      	nop
 800e52c:	3714      	adds	r7, #20
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
 800e536:	bf00      	nop
 800e538:	e000e3f0 	.word	0xe000e3f0
 800e53c:	20007cbc 	.word	0x20007cbc
 800e540:	e000ed0c 	.word	0xe000ed0c
 800e544:	20007cc0 	.word	0x20007cc0

0800e548 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b088      	sub	sp, #32
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e550:	2300      	movs	r3, #0
 800e552:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800e554:	4b48      	ldr	r3, [pc, #288]	; (800e678 <pvPortMalloc+0x130>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d10a      	bne.n	800e572 <pvPortMalloc+0x2a>
	__asm volatile
 800e55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e560:	f383 8811 	msr	BASEPRI, r3
 800e564:	f3bf 8f6f 	isb	sy
 800e568:	f3bf 8f4f 	dsb	sy
 800e56c:	60fb      	str	r3, [r7, #12]
}
 800e56e:	bf00      	nop
 800e570:	e7fe      	b.n	800e570 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800e572:	f7fe fd83 	bl	800d07c <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e576:	4b41      	ldr	r3, [pc, #260]	; (800e67c <pvPortMalloc+0x134>)
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4013      	ands	r3, r2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d172      	bne.n	800e668 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d00d      	beq.n	800e5a4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800e588:	2208      	movs	r2, #8
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	4413      	add	r3, r2
 800e58e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b00      	cmp	r3, #0
 800e598:	d004      	beq.n	800e5a4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f023 0307 	bic.w	r3, r3, #7
 800e5a0:	3308      	adds	r3, #8
 800e5a2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d05e      	beq.n	800e668 <pvPortMalloc+0x120>
 800e5aa:	4b35      	ldr	r3, [pc, #212]	; (800e680 <pvPortMalloc+0x138>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d859      	bhi.n	800e668 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e5b4:	4b33      	ldr	r3, [pc, #204]	; (800e684 <pvPortMalloc+0x13c>)
 800e5b6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800e5b8:	4b32      	ldr	r3, [pc, #200]	; (800e684 <pvPortMalloc+0x13c>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5be:	e004      	b.n	800e5ca <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800e5c0:	69fb      	ldr	r3, [r7, #28]
 800e5c2:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e5c4:	69fb      	ldr	r3, [r7, #28]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	d903      	bls.n	800e5dc <pvPortMalloc+0x94>
 800e5d4:	69fb      	ldr	r3, [r7, #28]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1f1      	bne.n	800e5c0 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e5dc:	4b26      	ldr	r3, [pc, #152]	; (800e678 <pvPortMalloc+0x130>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69fa      	ldr	r2, [r7, #28]
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	d040      	beq.n	800e668 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2208      	movs	r2, #8
 800e5ec:	4413      	add	r3, r2
 800e5ee:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	69bb      	ldr	r3, [r7, #24]
 800e5f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	685a      	ldr	r2, [r3, #4]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	1ad2      	subs	r2, r2, r3
 800e600:	2308      	movs	r3, #8
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	429a      	cmp	r2, r3
 800e606:	d90f      	bls.n	800e628 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e608:	69fa      	ldr	r2, [r7, #28]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	4413      	add	r3, r2
 800e60e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	685a      	ldr	r2, [r3, #4]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	1ad2      	subs	r2, r2, r3
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800e622:	6938      	ldr	r0, [r7, #16]
 800e624:	f000 f8a2 	bl	800e76c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e628:	4b15      	ldr	r3, [pc, #84]	; (800e680 <pvPortMalloc+0x138>)
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	1ad3      	subs	r3, r2, r3
 800e632:	4a13      	ldr	r2, [pc, #76]	; (800e680 <pvPortMalloc+0x138>)
 800e634:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e636:	4b12      	ldr	r3, [pc, #72]	; (800e680 <pvPortMalloc+0x138>)
 800e638:	681a      	ldr	r2, [r3, #0]
 800e63a:	4b13      	ldr	r3, [pc, #76]	; (800e688 <pvPortMalloc+0x140>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d203      	bcs.n	800e64a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e642:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <pvPortMalloc+0x138>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a10      	ldr	r2, [pc, #64]	; (800e688 <pvPortMalloc+0x140>)
 800e648:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	685a      	ldr	r2, [r3, #4]
 800e64e:	4b0b      	ldr	r3, [pc, #44]	; (800e67c <pvPortMalloc+0x134>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	431a      	orrs	r2, r3
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e658:	69fb      	ldr	r3, [r7, #28]
 800e65a:	2200      	movs	r2, #0
 800e65c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e65e:	4b0b      	ldr	r3, [pc, #44]	; (800e68c <pvPortMalloc+0x144>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	3301      	adds	r3, #1
 800e664:	4a09      	ldr	r2, [pc, #36]	; (800e68c <pvPortMalloc+0x144>)
 800e666:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e668:	f7fe fd16 	bl	800d098 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800e66c:	697b      	ldr	r3, [r7, #20]
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3720      	adds	r7, #32
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	20007ccc 	.word	0x20007ccc
 800e67c:	20007ce0 	.word	0x20007ce0
 800e680:	20007cd0 	.word	0x20007cd0
 800e684:	20007cc4 	.word	0x20007cc4
 800e688:	20007cd4 	.word	0x20007cd4
 800e68c:	20007cd8 	.word	0x20007cd8

0800e690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d04d      	beq.n	800e73e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e6a2:	2308      	movs	r3, #8
 800e6a4:	425b      	negs	r3, r3
 800e6a6:	697a      	ldr	r2, [r7, #20]
 800e6a8:	4413      	add	r3, r2
 800e6aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	685a      	ldr	r2, [r3, #4]
 800e6b4:	4b24      	ldr	r3, [pc, #144]	; (800e748 <vPortFree+0xb8>)
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d10a      	bne.n	800e6d4 <vPortFree+0x44>
	__asm volatile
 800e6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6c2:	f383 8811 	msr	BASEPRI, r3
 800e6c6:	f3bf 8f6f 	isb	sy
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	60fb      	str	r3, [r7, #12]
}
 800e6d0:	bf00      	nop
 800e6d2:	e7fe      	b.n	800e6d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00a      	beq.n	800e6f2 <vPortFree+0x62>
	__asm volatile
 800e6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	60bb      	str	r3, [r7, #8]
}
 800e6ee:	bf00      	nop
 800e6f0:	e7fe      	b.n	800e6f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	4b14      	ldr	r3, [pc, #80]	; (800e748 <vPortFree+0xb8>)
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	4013      	ands	r3, r2
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d01e      	beq.n	800e73e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d11a      	bne.n	800e73e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	685a      	ldr	r2, [r3, #4]
 800e70c:	4b0e      	ldr	r3, [pc, #56]	; (800e748 <vPortFree+0xb8>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	43db      	mvns	r3, r3
 800e712:	401a      	ands	r2, r3
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e718:	f7fe fcb0 	bl	800d07c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e71c:	693b      	ldr	r3, [r7, #16]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	4b0a      	ldr	r3, [pc, #40]	; (800e74c <vPortFree+0xbc>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4413      	add	r3, r2
 800e726:	4a09      	ldr	r2, [pc, #36]	; (800e74c <vPortFree+0xbc>)
 800e728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e72a:	6938      	ldr	r0, [r7, #16]
 800e72c:	f000 f81e 	bl	800e76c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e730:	4b07      	ldr	r3, [pc, #28]	; (800e750 <vPortFree+0xc0>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3301      	adds	r3, #1
 800e736:	4a06      	ldr	r2, [pc, #24]	; (800e750 <vPortFree+0xc0>)
 800e738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e73a:	f7fe fcad 	bl	800d098 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e73e:	bf00      	nop
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	20007ce0 	.word	0x20007ce0
 800e74c:	20007cd0 	.word	0x20007cd0
 800e750:	20007cdc 	.word	0x20007cdc

0800e754 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800e754:	b480      	push	{r7}
 800e756:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800e758:	4b03      	ldr	r3, [pc, #12]	; (800e768 <xPortGetFreeHeapSize+0x14>)
 800e75a:	681b      	ldr	r3, [r3, #0]
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	20007cd0 	.word	0x20007cd0

0800e76c <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e774:	4b28      	ldr	r3, [pc, #160]	; (800e818 <prvInsertBlockIntoFreeList+0xac>)
 800e776:	60fb      	str	r3, [r7, #12]
 800e778:	e002      	b.n	800e780 <prvInsertBlockIntoFreeList+0x14>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	429a      	cmp	r2, r3
 800e788:	d8f7      	bhi.n	800e77a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	685b      	ldr	r3, [r3, #4]
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	4413      	add	r3, r2
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	429a      	cmp	r2, r3
 800e79a:	d108      	bne.n	800e7ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	685a      	ldr	r2, [r3, #4]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	685b      	ldr	r3, [r3, #4]
 800e7a4:	441a      	add	r2, r3
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	68ba      	ldr	r2, [r7, #8]
 800e7b8:	441a      	add	r2, r3
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d118      	bne.n	800e7f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681a      	ldr	r2, [r3, #0]
 800e7c6:	4b15      	ldr	r3, [pc, #84]	; (800e81c <prvInsertBlockIntoFreeList+0xb0>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d00d      	beq.n	800e7ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685a      	ldr	r2, [r3, #4]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	441a      	add	r2, r3
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	601a      	str	r2, [r3, #0]
 800e7e8:	e008      	b.n	800e7fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7ea:	4b0c      	ldr	r3, [pc, #48]	; (800e81c <prvInsertBlockIntoFreeList+0xb0>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	e003      	b.n	800e7fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681a      	ldr	r2, [r3, #0]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7fc:	68fa      	ldr	r2, [r7, #12]
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	429a      	cmp	r2, r3
 800e802:	d002      	beq.n	800e80a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e80a:	bf00      	nop
 800e80c:	3714      	adds	r7, #20
 800e80e:	46bd      	mov	sp, r7
 800e810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e814:	4770      	bx	lr
 800e816:	bf00      	nop
 800e818:	20007cc4 	.word	0x20007cc4
 800e81c:	20007ccc 	.word	0x20007ccc

0800e820 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800e820:	b480      	push	{r7}
 800e822:	b08f      	sub	sp, #60	; 0x3c
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800e828:	2300      	movs	r3, #0
 800e82a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800e82c:	2300      	movs	r3, #0
 800e82e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800e834:	4b5a      	ldr	r3, [pc, #360]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d00a      	beq.n	800e852 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	617b      	str	r3, [r7, #20]
}
 800e84e:	bf00      	nop
 800e850:	e7fe      	b.n	800e850 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800e852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e854:	00db      	lsls	r3, r3, #3
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	4413      	add	r3, r2
 800e85a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800e85c:	e07d      	b.n	800e95a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800e85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e860:	685b      	ldr	r3, [r3, #4]
 800e862:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800e864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e86c:	f003 0307 	and.w	r3, r3, #7
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00e      	beq.n	800e892 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	3307      	adds	r3, #7
 800e878:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800e87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e87c:	f023 0307 	bic.w	r3, r3, #7
 800e880:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	461a      	mov	r2, r3
 800e888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e88a:	1ad3      	subs	r3, r2, r3
 800e88c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e88e:	4413      	add	r3, r2
 800e890:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800e896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	4a41      	ldr	r2, [pc, #260]	; (800e9a4 <vPortDefineHeapRegions+0x184>)
 800e8a0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800e8a2:	4b40      	ldr	r3, [pc, #256]	; (800e9a4 <vPortDefineHeapRegions+0x184>)
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]
 800e8a8:	e01f      	b.n	800e8ea <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800e8aa:	4b3d      	ldr	r3, [pc, #244]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d10a      	bne.n	800e8c8 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	613b      	str	r3, [r7, #16]
}
 800e8c4:	bf00      	nop
 800e8c6:	e7fe      	b.n	800e8c6 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800e8c8:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d80a      	bhi.n	800e8ea <vPortDefineHeapRegions+0xca>
	__asm volatile
 800e8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d8:	f383 8811 	msr	BASEPRI, r3
 800e8dc:	f3bf 8f6f 	isb	sy
 800e8e0:	f3bf 8f4f 	dsb	sy
 800e8e4:	60fb      	str	r3, [r7, #12]
}
 800e8e6:	bf00      	nop
 800e8e8:	e7fe      	b.n	800e8e8 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800e8ea:	4b2d      	ldr	r3, [pc, #180]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800e8f0:	69fa      	ldr	r2, [r7, #28]
 800e8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f4:	4413      	add	r3, r2
 800e8f6:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800e8f8:	2208      	movs	r2, #8
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	1a9b      	subs	r3, r3, r2
 800e8fe:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800e900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e902:	f023 0307 	bic.w	r3, r3, #7
 800e906:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800e908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90a:	4a25      	ldr	r2, [pc, #148]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e90c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800e90e:	4b24      	ldr	r3, [pc, #144]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	2200      	movs	r2, #0
 800e914:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800e916:	4b22      	ldr	r3, [pc, #136]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	2200      	movs	r2, #0
 800e91c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800e91e:	69fb      	ldr	r3, [r7, #28]
 800e920:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800e922:	6a3b      	ldr	r3, [r7, #32]
 800e924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800e92c:	4b1c      	ldr	r3, [pc, #112]	; (800e9a0 <vPortDefineHeapRegions+0x180>)
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	6a3b      	ldr	r3, [r7, #32]
 800e932:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800e934:	69bb      	ldr	r3, [r7, #24]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d002      	beq.n	800e940 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	6a3a      	ldr	r2, [r7, #32]
 800e93e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e946:	4413      	add	r3, r2
 800e948:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800e94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94c:	3301      	adds	r3, #1
 800e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800e950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	4413      	add	r3, r2
 800e958:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800e95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	f47f af7d 	bne.w	800e85e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800e964:	4a10      	ldr	r2, [pc, #64]	; (800e9a8 <vPortDefineHeapRegions+0x188>)
 800e966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e968:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800e96a:	4a10      	ldr	r2, [pc, #64]	; (800e9ac <vPortDefineHeapRegions+0x18c>)
 800e96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e96e:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800e970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e972:	2b00      	cmp	r3, #0
 800e974:	d10a      	bne.n	800e98c <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800e976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97a:	f383 8811 	msr	BASEPRI, r3
 800e97e:	f3bf 8f6f 	isb	sy
 800e982:	f3bf 8f4f 	dsb	sy
 800e986:	60bb      	str	r3, [r7, #8]
}
 800e988:	bf00      	nop
 800e98a:	e7fe      	b.n	800e98a <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e98c:	4b08      	ldr	r3, [pc, #32]	; (800e9b0 <vPortDefineHeapRegions+0x190>)
 800e98e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e992:	601a      	str	r2, [r3, #0]
}
 800e994:	bf00      	nop
 800e996:	373c      	adds	r7, #60	; 0x3c
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr
 800e9a0:	20007ccc 	.word	0x20007ccc
 800e9a4:	20007cc4 	.word	0x20007cc4
 800e9a8:	20007cd4 	.word	0x20007cd4
 800e9ac:	20007cd0 	.word	0x20007cd0
 800e9b0:	20007ce0 	.word	0x20007ce0

0800e9b4 <atol>:
 800e9b4:	220a      	movs	r2, #10
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	f000 bf94 	b.w	800f8e4 <strtol>

0800e9bc <__errno>:
 800e9bc:	4b01      	ldr	r3, [pc, #4]	; (800e9c4 <__errno+0x8>)
 800e9be:	6818      	ldr	r0, [r3, #0]
 800e9c0:	4770      	bx	lr
 800e9c2:	bf00      	nop
 800e9c4:	200000d8 	.word	0x200000d8

0800e9c8 <std>:
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	b510      	push	{r4, lr}
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e9d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9d6:	6083      	str	r3, [r0, #8]
 800e9d8:	8181      	strh	r1, [r0, #12]
 800e9da:	6643      	str	r3, [r0, #100]	; 0x64
 800e9dc:	81c2      	strh	r2, [r0, #14]
 800e9de:	6183      	str	r3, [r0, #24]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	2208      	movs	r2, #8
 800e9e4:	305c      	adds	r0, #92	; 0x5c
 800e9e6:	f000 f9cf 	bl	800ed88 <memset>
 800e9ea:	4b05      	ldr	r3, [pc, #20]	; (800ea00 <std+0x38>)
 800e9ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e9ee:	4b05      	ldr	r3, [pc, #20]	; (800ea04 <std+0x3c>)
 800e9f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9f2:	4b05      	ldr	r3, [pc, #20]	; (800ea08 <std+0x40>)
 800e9f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9f6:	4b05      	ldr	r3, [pc, #20]	; (800ea0c <std+0x44>)
 800e9f8:	6224      	str	r4, [r4, #32]
 800e9fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	bf00      	nop
 800ea00:	0800f699 	.word	0x0800f699
 800ea04:	0800f6bb 	.word	0x0800f6bb
 800ea08:	0800f6f3 	.word	0x0800f6f3
 800ea0c:	0800f717 	.word	0x0800f717

0800ea10 <_cleanup_r>:
 800ea10:	4901      	ldr	r1, [pc, #4]	; (800ea18 <_cleanup_r+0x8>)
 800ea12:	f000 b8af 	b.w	800eb74 <_fwalk_reent>
 800ea16:	bf00      	nop
 800ea18:	0800fc3d 	.word	0x0800fc3d

0800ea1c <__sfmoreglue>:
 800ea1c:	b570      	push	{r4, r5, r6, lr}
 800ea1e:	2268      	movs	r2, #104	; 0x68
 800ea20:	1e4d      	subs	r5, r1, #1
 800ea22:	4355      	muls	r5, r2
 800ea24:	460e      	mov	r6, r1
 800ea26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ea2a:	f000 fa21 	bl	800ee70 <_malloc_r>
 800ea2e:	4604      	mov	r4, r0
 800ea30:	b140      	cbz	r0, 800ea44 <__sfmoreglue+0x28>
 800ea32:	2100      	movs	r1, #0
 800ea34:	e9c0 1600 	strd	r1, r6, [r0]
 800ea38:	300c      	adds	r0, #12
 800ea3a:	60a0      	str	r0, [r4, #8]
 800ea3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ea40:	f000 f9a2 	bl	800ed88 <memset>
 800ea44:	4620      	mov	r0, r4
 800ea46:	bd70      	pop	{r4, r5, r6, pc}

0800ea48 <__sfp_lock_acquire>:
 800ea48:	4801      	ldr	r0, [pc, #4]	; (800ea50 <__sfp_lock_acquire+0x8>)
 800ea4a:	f000 b984 	b.w	800ed56 <__retarget_lock_acquire_recursive>
 800ea4e:	bf00      	nop
 800ea50:	20007ce5 	.word	0x20007ce5

0800ea54 <__sfp_lock_release>:
 800ea54:	4801      	ldr	r0, [pc, #4]	; (800ea5c <__sfp_lock_release+0x8>)
 800ea56:	f000 b97f 	b.w	800ed58 <__retarget_lock_release_recursive>
 800ea5a:	bf00      	nop
 800ea5c:	20007ce5 	.word	0x20007ce5

0800ea60 <__sinit_lock_acquire>:
 800ea60:	4801      	ldr	r0, [pc, #4]	; (800ea68 <__sinit_lock_acquire+0x8>)
 800ea62:	f000 b978 	b.w	800ed56 <__retarget_lock_acquire_recursive>
 800ea66:	bf00      	nop
 800ea68:	20007ce6 	.word	0x20007ce6

0800ea6c <__sinit_lock_release>:
 800ea6c:	4801      	ldr	r0, [pc, #4]	; (800ea74 <__sinit_lock_release+0x8>)
 800ea6e:	f000 b973 	b.w	800ed58 <__retarget_lock_release_recursive>
 800ea72:	bf00      	nop
 800ea74:	20007ce6 	.word	0x20007ce6

0800ea78 <__sinit>:
 800ea78:	b510      	push	{r4, lr}
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	f7ff fff0 	bl	800ea60 <__sinit_lock_acquire>
 800ea80:	69a3      	ldr	r3, [r4, #24]
 800ea82:	b11b      	cbz	r3, 800ea8c <__sinit+0x14>
 800ea84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea88:	f7ff bff0 	b.w	800ea6c <__sinit_lock_release>
 800ea8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ea90:	6523      	str	r3, [r4, #80]	; 0x50
 800ea92:	4b13      	ldr	r3, [pc, #76]	; (800eae0 <__sinit+0x68>)
 800ea94:	4a13      	ldr	r2, [pc, #76]	; (800eae4 <__sinit+0x6c>)
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	62a2      	str	r2, [r4, #40]	; 0x28
 800ea9a:	42a3      	cmp	r3, r4
 800ea9c:	bf04      	itt	eq
 800ea9e:	2301      	moveq	r3, #1
 800eaa0:	61a3      	streq	r3, [r4, #24]
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 f820 	bl	800eae8 <__sfp>
 800eaa8:	6060      	str	r0, [r4, #4]
 800eaaa:	4620      	mov	r0, r4
 800eaac:	f000 f81c 	bl	800eae8 <__sfp>
 800eab0:	60a0      	str	r0, [r4, #8]
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 f818 	bl	800eae8 <__sfp>
 800eab8:	2200      	movs	r2, #0
 800eaba:	60e0      	str	r0, [r4, #12]
 800eabc:	2104      	movs	r1, #4
 800eabe:	6860      	ldr	r0, [r4, #4]
 800eac0:	f7ff ff82 	bl	800e9c8 <std>
 800eac4:	68a0      	ldr	r0, [r4, #8]
 800eac6:	2201      	movs	r2, #1
 800eac8:	2109      	movs	r1, #9
 800eaca:	f7ff ff7d 	bl	800e9c8 <std>
 800eace:	68e0      	ldr	r0, [r4, #12]
 800ead0:	2202      	movs	r2, #2
 800ead2:	2112      	movs	r1, #18
 800ead4:	f7ff ff78 	bl	800e9c8 <std>
 800ead8:	2301      	movs	r3, #1
 800eada:	61a3      	str	r3, [r4, #24]
 800eadc:	e7d2      	b.n	800ea84 <__sinit+0xc>
 800eade:	bf00      	nop
 800eae0:	08013bc4 	.word	0x08013bc4
 800eae4:	0800ea11 	.word	0x0800ea11

0800eae8 <__sfp>:
 800eae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaea:	4607      	mov	r7, r0
 800eaec:	f7ff ffac 	bl	800ea48 <__sfp_lock_acquire>
 800eaf0:	4b1e      	ldr	r3, [pc, #120]	; (800eb6c <__sfp+0x84>)
 800eaf2:	681e      	ldr	r6, [r3, #0]
 800eaf4:	69b3      	ldr	r3, [r6, #24]
 800eaf6:	b913      	cbnz	r3, 800eafe <__sfp+0x16>
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f7ff ffbd 	bl	800ea78 <__sinit>
 800eafe:	3648      	adds	r6, #72	; 0x48
 800eb00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800eb04:	3b01      	subs	r3, #1
 800eb06:	d503      	bpl.n	800eb10 <__sfp+0x28>
 800eb08:	6833      	ldr	r3, [r6, #0]
 800eb0a:	b30b      	cbz	r3, 800eb50 <__sfp+0x68>
 800eb0c:	6836      	ldr	r6, [r6, #0]
 800eb0e:	e7f7      	b.n	800eb00 <__sfp+0x18>
 800eb10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eb14:	b9d5      	cbnz	r5, 800eb4c <__sfp+0x64>
 800eb16:	4b16      	ldr	r3, [pc, #88]	; (800eb70 <__sfp+0x88>)
 800eb18:	60e3      	str	r3, [r4, #12]
 800eb1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eb1e:	6665      	str	r5, [r4, #100]	; 0x64
 800eb20:	f000 f918 	bl	800ed54 <__retarget_lock_init_recursive>
 800eb24:	f7ff ff96 	bl	800ea54 <__sfp_lock_release>
 800eb28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eb2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eb30:	6025      	str	r5, [r4, #0]
 800eb32:	61a5      	str	r5, [r4, #24]
 800eb34:	2208      	movs	r2, #8
 800eb36:	4629      	mov	r1, r5
 800eb38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eb3c:	f000 f924 	bl	800ed88 <memset>
 800eb40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eb44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eb48:	4620      	mov	r0, r4
 800eb4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb4c:	3468      	adds	r4, #104	; 0x68
 800eb4e:	e7d9      	b.n	800eb04 <__sfp+0x1c>
 800eb50:	2104      	movs	r1, #4
 800eb52:	4638      	mov	r0, r7
 800eb54:	f7ff ff62 	bl	800ea1c <__sfmoreglue>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	6030      	str	r0, [r6, #0]
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d1d5      	bne.n	800eb0c <__sfp+0x24>
 800eb60:	f7ff ff78 	bl	800ea54 <__sfp_lock_release>
 800eb64:	230c      	movs	r3, #12
 800eb66:	603b      	str	r3, [r7, #0]
 800eb68:	e7ee      	b.n	800eb48 <__sfp+0x60>
 800eb6a:	bf00      	nop
 800eb6c:	08013bc4 	.word	0x08013bc4
 800eb70:	ffff0001 	.word	0xffff0001

0800eb74 <_fwalk_reent>:
 800eb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb78:	4606      	mov	r6, r0
 800eb7a:	4688      	mov	r8, r1
 800eb7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800eb80:	2700      	movs	r7, #0
 800eb82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb86:	f1b9 0901 	subs.w	r9, r9, #1
 800eb8a:	d505      	bpl.n	800eb98 <_fwalk_reent+0x24>
 800eb8c:	6824      	ldr	r4, [r4, #0]
 800eb8e:	2c00      	cmp	r4, #0
 800eb90:	d1f7      	bne.n	800eb82 <_fwalk_reent+0xe>
 800eb92:	4638      	mov	r0, r7
 800eb94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb98:	89ab      	ldrh	r3, [r5, #12]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d907      	bls.n	800ebae <_fwalk_reent+0x3a>
 800eb9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eba2:	3301      	adds	r3, #1
 800eba4:	d003      	beq.n	800ebae <_fwalk_reent+0x3a>
 800eba6:	4629      	mov	r1, r5
 800eba8:	4630      	mov	r0, r6
 800ebaa:	47c0      	blx	r8
 800ebac:	4307      	orrs	r7, r0
 800ebae:	3568      	adds	r5, #104	; 0x68
 800ebb0:	e7e9      	b.n	800eb86 <_fwalk_reent+0x12>
	...

0800ebb4 <gmtime_r>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	e9d0 6700 	ldrd	r6, r7, [r0]
 800ebbc:	460c      	mov	r4, r1
 800ebbe:	4a4f      	ldr	r2, [pc, #316]	; (800ecfc <gmtime_r+0x148>)
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	f7f1 fe61 	bl	800088c <__aeabi_ldivmod>
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4605      	mov	r5, r0
 800ebce:	4a4b      	ldr	r2, [pc, #300]	; (800ecfc <gmtime_r+0x148>)
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f7f1 fe5a 	bl	800088c <__aeabi_ldivmod>
 800ebd8:	2a00      	cmp	r2, #0
 800ebda:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800ebde:	bfb7      	itett	lt
 800ebe0:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800ebe4:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800ebe8:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800ebec:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800ebf0:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800ebf4:	fbb2 f1f0 	udiv	r1, r2, r0
 800ebf8:	fb00 2211 	mls	r2, r0, r1, r2
 800ebfc:	203c      	movs	r0, #60	; 0x3c
 800ebfe:	60a1      	str	r1, [r4, #8]
 800ec00:	fbb2 f1f0 	udiv	r1, r2, r0
 800ec04:	fb00 2211 	mls	r2, r0, r1, r2
 800ec08:	6061      	str	r1, [r4, #4]
 800ec0a:	6022      	str	r2, [r4, #0]
 800ec0c:	2107      	movs	r1, #7
 800ec0e:	1cda      	adds	r2, r3, #3
 800ec10:	fb92 f1f1 	sdiv	r1, r2, r1
 800ec14:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ec18:	1a52      	subs	r2, r2, r1
 800ec1a:	bf48      	it	mi
 800ec1c:	3207      	addmi	r2, #7
 800ec1e:	4d38      	ldr	r5, [pc, #224]	; (800ed00 <gmtime_r+0x14c>)
 800ec20:	4838      	ldr	r0, [pc, #224]	; (800ed04 <gmtime_r+0x150>)
 800ec22:	61a2      	str	r2, [r4, #24]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	bfb7      	itett	lt
 800ec28:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800ec2c:	fb93 f5f5 	sdivge	r5, r3, r5
 800ec30:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800ec34:	fb92 f5f5 	sdivlt	r5, r2, r5
 800ec38:	fb00 3005 	mla	r0, r0, r5, r3
 800ec3c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800ec40:	fbb0 f2f2 	udiv	r2, r0, r2
 800ec44:	4402      	add	r2, r0
 800ec46:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800ec4a:	fbb0 f1f3 	udiv	r1, r0, r3
 800ec4e:	1a52      	subs	r2, r2, r1
 800ec50:	f240 1c6d 	movw	ip, #365	; 0x16d
 800ec54:	492c      	ldr	r1, [pc, #176]	; (800ed08 <gmtime_r+0x154>)
 800ec56:	fbb0 f1f1 	udiv	r1, r0, r1
 800ec5a:	2764      	movs	r7, #100	; 0x64
 800ec5c:	1a52      	subs	r2, r2, r1
 800ec5e:	fbb2 f1fc 	udiv	r1, r2, ip
 800ec62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec66:	fbb1 f6f7 	udiv	r6, r1, r7
 800ec6a:	1af3      	subs	r3, r6, r3
 800ec6c:	4403      	add	r3, r0
 800ec6e:	fb0c 3311 	mls	r3, ip, r1, r3
 800ec72:	2299      	movs	r2, #153	; 0x99
 800ec74:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800ec78:	f10e 0e02 	add.w	lr, lr, #2
 800ec7c:	f103 0c01 	add.w	ip, r3, #1
 800ec80:	fbbe f0f2 	udiv	r0, lr, r2
 800ec84:	4342      	muls	r2, r0
 800ec86:	3202      	adds	r2, #2
 800ec88:	f04f 0805 	mov.w	r8, #5
 800ec8c:	fbb2 f2f8 	udiv	r2, r2, r8
 800ec90:	ebac 0c02 	sub.w	ip, ip, r2
 800ec94:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800ec98:	4596      	cmp	lr, r2
 800ec9a:	bf94      	ite	ls
 800ec9c:	2202      	movls	r2, #2
 800ec9e:	f06f 0209 	mvnhi.w	r2, #9
 800eca2:	4410      	add	r0, r2
 800eca4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800eca8:	fb02 1505 	mla	r5, r2, r5, r1
 800ecac:	2801      	cmp	r0, #1
 800ecae:	bf98      	it	ls
 800ecb0:	3501      	addls	r5, #1
 800ecb2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800ecb6:	d30d      	bcc.n	800ecd4 <gmtime_r+0x120>
 800ecb8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800ecbc:	61e3      	str	r3, [r4, #28]
 800ecbe:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800ecc8:	f8c4 c00c 	str.w	ip, [r4, #12]
 800eccc:	6223      	str	r3, [r4, #32]
 800ecce:	4620      	mov	r0, r4
 800ecd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecd4:	078a      	lsls	r2, r1, #30
 800ecd6:	d102      	bne.n	800ecde <gmtime_r+0x12a>
 800ecd8:	fb07 1616 	mls	r6, r7, r6, r1
 800ecdc:	b95e      	cbnz	r6, 800ecf6 <gmtime_r+0x142>
 800ecde:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800ece2:	fbb1 f6f2 	udiv	r6, r1, r2
 800ece6:	fb02 1216 	mls	r2, r2, r6, r1
 800ecea:	fab2 f282 	clz	r2, r2
 800ecee:	0952      	lsrs	r2, r2, #5
 800ecf0:	333b      	adds	r3, #59	; 0x3b
 800ecf2:	4413      	add	r3, r2
 800ecf4:	e7e2      	b.n	800ecbc <gmtime_r+0x108>
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	e7fa      	b.n	800ecf0 <gmtime_r+0x13c>
 800ecfa:	bf00      	nop
 800ecfc:	00015180 	.word	0x00015180
 800ed00:	00023ab1 	.word	0x00023ab1
 800ed04:	fffdc54f 	.word	0xfffdc54f
 800ed08:	00023ab0 	.word	0x00023ab0

0800ed0c <__libc_init_array>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	4d0d      	ldr	r5, [pc, #52]	; (800ed44 <__libc_init_array+0x38>)
 800ed10:	4c0d      	ldr	r4, [pc, #52]	; (800ed48 <__libc_init_array+0x3c>)
 800ed12:	1b64      	subs	r4, r4, r5
 800ed14:	10a4      	asrs	r4, r4, #2
 800ed16:	2600      	movs	r6, #0
 800ed18:	42a6      	cmp	r6, r4
 800ed1a:	d109      	bne.n	800ed30 <__libc_init_array+0x24>
 800ed1c:	4d0b      	ldr	r5, [pc, #44]	; (800ed4c <__libc_init_array+0x40>)
 800ed1e:	4c0c      	ldr	r4, [pc, #48]	; (800ed50 <__libc_init_array+0x44>)
 800ed20:	f001 fa2c 	bl	801017c <_init>
 800ed24:	1b64      	subs	r4, r4, r5
 800ed26:	10a4      	asrs	r4, r4, #2
 800ed28:	2600      	movs	r6, #0
 800ed2a:	42a6      	cmp	r6, r4
 800ed2c:	d105      	bne.n	800ed3a <__libc_init_array+0x2e>
 800ed2e:	bd70      	pop	{r4, r5, r6, pc}
 800ed30:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed34:	4798      	blx	r3
 800ed36:	3601      	adds	r6, #1
 800ed38:	e7ee      	b.n	800ed18 <__libc_init_array+0xc>
 800ed3a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed3e:	4798      	blx	r3
 800ed40:	3601      	adds	r6, #1
 800ed42:	e7f2      	b.n	800ed2a <__libc_init_array+0x1e>
 800ed44:	08013d04 	.word	0x08013d04
 800ed48:	08013d04 	.word	0x08013d04
 800ed4c:	08013d04 	.word	0x08013d04
 800ed50:	08013d08 	.word	0x08013d08

0800ed54 <__retarget_lock_init_recursive>:
 800ed54:	4770      	bx	lr

0800ed56 <__retarget_lock_acquire_recursive>:
 800ed56:	4770      	bx	lr

0800ed58 <__retarget_lock_release_recursive>:
 800ed58:	4770      	bx	lr
	...

0800ed5c <free>:
 800ed5c:	4b02      	ldr	r3, [pc, #8]	; (800ed68 <free+0xc>)
 800ed5e:	4601      	mov	r1, r0
 800ed60:	6818      	ldr	r0, [r3, #0]
 800ed62:	f000 b819 	b.w	800ed98 <_free_r>
 800ed66:	bf00      	nop
 800ed68:	200000d8 	.word	0x200000d8

0800ed6c <memcpy>:
 800ed6c:	440a      	add	r2, r1
 800ed6e:	4291      	cmp	r1, r2
 800ed70:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ed74:	d100      	bne.n	800ed78 <memcpy+0xc>
 800ed76:	4770      	bx	lr
 800ed78:	b510      	push	{r4, lr}
 800ed7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed82:	4291      	cmp	r1, r2
 800ed84:	d1f9      	bne.n	800ed7a <memcpy+0xe>
 800ed86:	bd10      	pop	{r4, pc}

0800ed88 <memset>:
 800ed88:	4402      	add	r2, r0
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	4293      	cmp	r3, r2
 800ed8e:	d100      	bne.n	800ed92 <memset+0xa>
 800ed90:	4770      	bx	lr
 800ed92:	f803 1b01 	strb.w	r1, [r3], #1
 800ed96:	e7f9      	b.n	800ed8c <memset+0x4>

0800ed98 <_free_r>:
 800ed98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed9a:	2900      	cmp	r1, #0
 800ed9c:	d044      	beq.n	800ee28 <_free_r+0x90>
 800ed9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eda2:	9001      	str	r0, [sp, #4]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	f1a1 0404 	sub.w	r4, r1, #4
 800edaa:	bfb8      	it	lt
 800edac:	18e4      	addlt	r4, r4, r3
 800edae:	f001 f813 	bl	800fdd8 <__malloc_lock>
 800edb2:	4a1e      	ldr	r2, [pc, #120]	; (800ee2c <_free_r+0x94>)
 800edb4:	9801      	ldr	r0, [sp, #4]
 800edb6:	6813      	ldr	r3, [r2, #0]
 800edb8:	b933      	cbnz	r3, 800edc8 <_free_r+0x30>
 800edba:	6063      	str	r3, [r4, #4]
 800edbc:	6014      	str	r4, [r2, #0]
 800edbe:	b003      	add	sp, #12
 800edc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800edc4:	f001 b80e 	b.w	800fde4 <__malloc_unlock>
 800edc8:	42a3      	cmp	r3, r4
 800edca:	d908      	bls.n	800edde <_free_r+0x46>
 800edcc:	6825      	ldr	r5, [r4, #0]
 800edce:	1961      	adds	r1, r4, r5
 800edd0:	428b      	cmp	r3, r1
 800edd2:	bf01      	itttt	eq
 800edd4:	6819      	ldreq	r1, [r3, #0]
 800edd6:	685b      	ldreq	r3, [r3, #4]
 800edd8:	1949      	addeq	r1, r1, r5
 800edda:	6021      	streq	r1, [r4, #0]
 800eddc:	e7ed      	b.n	800edba <_free_r+0x22>
 800edde:	461a      	mov	r2, r3
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	b10b      	cbz	r3, 800ede8 <_free_r+0x50>
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d9fa      	bls.n	800edde <_free_r+0x46>
 800ede8:	6811      	ldr	r1, [r2, #0]
 800edea:	1855      	adds	r5, r2, r1
 800edec:	42a5      	cmp	r5, r4
 800edee:	d10b      	bne.n	800ee08 <_free_r+0x70>
 800edf0:	6824      	ldr	r4, [r4, #0]
 800edf2:	4421      	add	r1, r4
 800edf4:	1854      	adds	r4, r2, r1
 800edf6:	42a3      	cmp	r3, r4
 800edf8:	6011      	str	r1, [r2, #0]
 800edfa:	d1e0      	bne.n	800edbe <_free_r+0x26>
 800edfc:	681c      	ldr	r4, [r3, #0]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	6053      	str	r3, [r2, #4]
 800ee02:	4421      	add	r1, r4
 800ee04:	6011      	str	r1, [r2, #0]
 800ee06:	e7da      	b.n	800edbe <_free_r+0x26>
 800ee08:	d902      	bls.n	800ee10 <_free_r+0x78>
 800ee0a:	230c      	movs	r3, #12
 800ee0c:	6003      	str	r3, [r0, #0]
 800ee0e:	e7d6      	b.n	800edbe <_free_r+0x26>
 800ee10:	6825      	ldr	r5, [r4, #0]
 800ee12:	1961      	adds	r1, r4, r5
 800ee14:	428b      	cmp	r3, r1
 800ee16:	bf04      	itt	eq
 800ee18:	6819      	ldreq	r1, [r3, #0]
 800ee1a:	685b      	ldreq	r3, [r3, #4]
 800ee1c:	6063      	str	r3, [r4, #4]
 800ee1e:	bf04      	itt	eq
 800ee20:	1949      	addeq	r1, r1, r5
 800ee22:	6021      	streq	r1, [r4, #0]
 800ee24:	6054      	str	r4, [r2, #4]
 800ee26:	e7ca      	b.n	800edbe <_free_r+0x26>
 800ee28:	b003      	add	sp, #12
 800ee2a:	bd30      	pop	{r4, r5, pc}
 800ee2c:	20007ce8 	.word	0x20007ce8

0800ee30 <sbrk_aligned>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	4e0e      	ldr	r6, [pc, #56]	; (800ee6c <sbrk_aligned+0x3c>)
 800ee34:	460c      	mov	r4, r1
 800ee36:	6831      	ldr	r1, [r6, #0]
 800ee38:	4605      	mov	r5, r0
 800ee3a:	b911      	cbnz	r1, 800ee42 <sbrk_aligned+0x12>
 800ee3c:	f000 fbfc 	bl	800f638 <_sbrk_r>
 800ee40:	6030      	str	r0, [r6, #0]
 800ee42:	4621      	mov	r1, r4
 800ee44:	4628      	mov	r0, r5
 800ee46:	f000 fbf7 	bl	800f638 <_sbrk_r>
 800ee4a:	1c43      	adds	r3, r0, #1
 800ee4c:	d00a      	beq.n	800ee64 <sbrk_aligned+0x34>
 800ee4e:	1cc4      	adds	r4, r0, #3
 800ee50:	f024 0403 	bic.w	r4, r4, #3
 800ee54:	42a0      	cmp	r0, r4
 800ee56:	d007      	beq.n	800ee68 <sbrk_aligned+0x38>
 800ee58:	1a21      	subs	r1, r4, r0
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f000 fbec 	bl	800f638 <_sbrk_r>
 800ee60:	3001      	adds	r0, #1
 800ee62:	d101      	bne.n	800ee68 <sbrk_aligned+0x38>
 800ee64:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee68:	4620      	mov	r0, r4
 800ee6a:	bd70      	pop	{r4, r5, r6, pc}
 800ee6c:	20007cec 	.word	0x20007cec

0800ee70 <_malloc_r>:
 800ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee74:	1ccd      	adds	r5, r1, #3
 800ee76:	f025 0503 	bic.w	r5, r5, #3
 800ee7a:	3508      	adds	r5, #8
 800ee7c:	2d0c      	cmp	r5, #12
 800ee7e:	bf38      	it	cc
 800ee80:	250c      	movcc	r5, #12
 800ee82:	2d00      	cmp	r5, #0
 800ee84:	4607      	mov	r7, r0
 800ee86:	db01      	blt.n	800ee8c <_malloc_r+0x1c>
 800ee88:	42a9      	cmp	r1, r5
 800ee8a:	d905      	bls.n	800ee98 <_malloc_r+0x28>
 800ee8c:	230c      	movs	r3, #12
 800ee8e:	603b      	str	r3, [r7, #0]
 800ee90:	2600      	movs	r6, #0
 800ee92:	4630      	mov	r0, r6
 800ee94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee98:	4e2e      	ldr	r6, [pc, #184]	; (800ef54 <_malloc_r+0xe4>)
 800ee9a:	f000 ff9d 	bl	800fdd8 <__malloc_lock>
 800ee9e:	6833      	ldr	r3, [r6, #0]
 800eea0:	461c      	mov	r4, r3
 800eea2:	bb34      	cbnz	r4, 800eef2 <_malloc_r+0x82>
 800eea4:	4629      	mov	r1, r5
 800eea6:	4638      	mov	r0, r7
 800eea8:	f7ff ffc2 	bl	800ee30 <sbrk_aligned>
 800eeac:	1c43      	adds	r3, r0, #1
 800eeae:	4604      	mov	r4, r0
 800eeb0:	d14d      	bne.n	800ef4e <_malloc_r+0xde>
 800eeb2:	6834      	ldr	r4, [r6, #0]
 800eeb4:	4626      	mov	r6, r4
 800eeb6:	2e00      	cmp	r6, #0
 800eeb8:	d140      	bne.n	800ef3c <_malloc_r+0xcc>
 800eeba:	6823      	ldr	r3, [r4, #0]
 800eebc:	4631      	mov	r1, r6
 800eebe:	4638      	mov	r0, r7
 800eec0:	eb04 0803 	add.w	r8, r4, r3
 800eec4:	f000 fbb8 	bl	800f638 <_sbrk_r>
 800eec8:	4580      	cmp	r8, r0
 800eeca:	d13a      	bne.n	800ef42 <_malloc_r+0xd2>
 800eecc:	6821      	ldr	r1, [r4, #0]
 800eece:	3503      	adds	r5, #3
 800eed0:	1a6d      	subs	r5, r5, r1
 800eed2:	f025 0503 	bic.w	r5, r5, #3
 800eed6:	3508      	adds	r5, #8
 800eed8:	2d0c      	cmp	r5, #12
 800eeda:	bf38      	it	cc
 800eedc:	250c      	movcc	r5, #12
 800eede:	4629      	mov	r1, r5
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff ffa5 	bl	800ee30 <sbrk_aligned>
 800eee6:	3001      	adds	r0, #1
 800eee8:	d02b      	beq.n	800ef42 <_malloc_r+0xd2>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	442b      	add	r3, r5
 800eeee:	6023      	str	r3, [r4, #0]
 800eef0:	e00e      	b.n	800ef10 <_malloc_r+0xa0>
 800eef2:	6822      	ldr	r2, [r4, #0]
 800eef4:	1b52      	subs	r2, r2, r5
 800eef6:	d41e      	bmi.n	800ef36 <_malloc_r+0xc6>
 800eef8:	2a0b      	cmp	r2, #11
 800eefa:	d916      	bls.n	800ef2a <_malloc_r+0xba>
 800eefc:	1961      	adds	r1, r4, r5
 800eefe:	42a3      	cmp	r3, r4
 800ef00:	6025      	str	r5, [r4, #0]
 800ef02:	bf18      	it	ne
 800ef04:	6059      	strne	r1, [r3, #4]
 800ef06:	6863      	ldr	r3, [r4, #4]
 800ef08:	bf08      	it	eq
 800ef0a:	6031      	streq	r1, [r6, #0]
 800ef0c:	5162      	str	r2, [r4, r5]
 800ef0e:	604b      	str	r3, [r1, #4]
 800ef10:	4638      	mov	r0, r7
 800ef12:	f104 060b 	add.w	r6, r4, #11
 800ef16:	f000 ff65 	bl	800fde4 <__malloc_unlock>
 800ef1a:	f026 0607 	bic.w	r6, r6, #7
 800ef1e:	1d23      	adds	r3, r4, #4
 800ef20:	1af2      	subs	r2, r6, r3
 800ef22:	d0b6      	beq.n	800ee92 <_malloc_r+0x22>
 800ef24:	1b9b      	subs	r3, r3, r6
 800ef26:	50a3      	str	r3, [r4, r2]
 800ef28:	e7b3      	b.n	800ee92 <_malloc_r+0x22>
 800ef2a:	6862      	ldr	r2, [r4, #4]
 800ef2c:	42a3      	cmp	r3, r4
 800ef2e:	bf0c      	ite	eq
 800ef30:	6032      	streq	r2, [r6, #0]
 800ef32:	605a      	strne	r2, [r3, #4]
 800ef34:	e7ec      	b.n	800ef10 <_malloc_r+0xa0>
 800ef36:	4623      	mov	r3, r4
 800ef38:	6864      	ldr	r4, [r4, #4]
 800ef3a:	e7b2      	b.n	800eea2 <_malloc_r+0x32>
 800ef3c:	4634      	mov	r4, r6
 800ef3e:	6876      	ldr	r6, [r6, #4]
 800ef40:	e7b9      	b.n	800eeb6 <_malloc_r+0x46>
 800ef42:	230c      	movs	r3, #12
 800ef44:	603b      	str	r3, [r7, #0]
 800ef46:	4638      	mov	r0, r7
 800ef48:	f000 ff4c 	bl	800fde4 <__malloc_unlock>
 800ef4c:	e7a1      	b.n	800ee92 <_malloc_r+0x22>
 800ef4e:	6025      	str	r5, [r4, #0]
 800ef50:	e7de      	b.n	800ef10 <_malloc_r+0xa0>
 800ef52:	bf00      	nop
 800ef54:	20007ce8 	.word	0x20007ce8

0800ef58 <__sfputc_r>:
 800ef58:	6893      	ldr	r3, [r2, #8]
 800ef5a:	3b01      	subs	r3, #1
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	b410      	push	{r4}
 800ef60:	6093      	str	r3, [r2, #8]
 800ef62:	da08      	bge.n	800ef76 <__sfputc_r+0x1e>
 800ef64:	6994      	ldr	r4, [r2, #24]
 800ef66:	42a3      	cmp	r3, r4
 800ef68:	db01      	blt.n	800ef6e <__sfputc_r+0x16>
 800ef6a:	290a      	cmp	r1, #10
 800ef6c:	d103      	bne.n	800ef76 <__sfputc_r+0x1e>
 800ef6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef72:	f000 bcfb 	b.w	800f96c <__swbuf_r>
 800ef76:	6813      	ldr	r3, [r2, #0]
 800ef78:	1c58      	adds	r0, r3, #1
 800ef7a:	6010      	str	r0, [r2, #0]
 800ef7c:	7019      	strb	r1, [r3, #0]
 800ef7e:	4608      	mov	r0, r1
 800ef80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef84:	4770      	bx	lr

0800ef86 <__sfputs_r>:
 800ef86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef88:	4606      	mov	r6, r0
 800ef8a:	460f      	mov	r7, r1
 800ef8c:	4614      	mov	r4, r2
 800ef8e:	18d5      	adds	r5, r2, r3
 800ef90:	42ac      	cmp	r4, r5
 800ef92:	d101      	bne.n	800ef98 <__sfputs_r+0x12>
 800ef94:	2000      	movs	r0, #0
 800ef96:	e007      	b.n	800efa8 <__sfputs_r+0x22>
 800ef98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9c:	463a      	mov	r2, r7
 800ef9e:	4630      	mov	r0, r6
 800efa0:	f7ff ffda 	bl	800ef58 <__sfputc_r>
 800efa4:	1c43      	adds	r3, r0, #1
 800efa6:	d1f3      	bne.n	800ef90 <__sfputs_r+0xa>
 800efa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efac <_vfiprintf_r>:
 800efac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb0:	460d      	mov	r5, r1
 800efb2:	b09d      	sub	sp, #116	; 0x74
 800efb4:	4614      	mov	r4, r2
 800efb6:	4698      	mov	r8, r3
 800efb8:	4606      	mov	r6, r0
 800efba:	b118      	cbz	r0, 800efc4 <_vfiprintf_r+0x18>
 800efbc:	6983      	ldr	r3, [r0, #24]
 800efbe:	b90b      	cbnz	r3, 800efc4 <_vfiprintf_r+0x18>
 800efc0:	f7ff fd5a 	bl	800ea78 <__sinit>
 800efc4:	4b89      	ldr	r3, [pc, #548]	; (800f1ec <_vfiprintf_r+0x240>)
 800efc6:	429d      	cmp	r5, r3
 800efc8:	d11b      	bne.n	800f002 <_vfiprintf_r+0x56>
 800efca:	6875      	ldr	r5, [r6, #4]
 800efcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efce:	07d9      	lsls	r1, r3, #31
 800efd0:	d405      	bmi.n	800efde <_vfiprintf_r+0x32>
 800efd2:	89ab      	ldrh	r3, [r5, #12]
 800efd4:	059a      	lsls	r2, r3, #22
 800efd6:	d402      	bmi.n	800efde <_vfiprintf_r+0x32>
 800efd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efda:	f7ff febc 	bl	800ed56 <__retarget_lock_acquire_recursive>
 800efde:	89ab      	ldrh	r3, [r5, #12]
 800efe0:	071b      	lsls	r3, r3, #28
 800efe2:	d501      	bpl.n	800efe8 <_vfiprintf_r+0x3c>
 800efe4:	692b      	ldr	r3, [r5, #16]
 800efe6:	b9eb      	cbnz	r3, 800f024 <_vfiprintf_r+0x78>
 800efe8:	4629      	mov	r1, r5
 800efea:	4630      	mov	r0, r6
 800efec:	f000 fd22 	bl	800fa34 <__swsetup_r>
 800eff0:	b1c0      	cbz	r0, 800f024 <_vfiprintf_r+0x78>
 800eff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eff4:	07dc      	lsls	r4, r3, #31
 800eff6:	d50e      	bpl.n	800f016 <_vfiprintf_r+0x6a>
 800eff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800effc:	b01d      	add	sp, #116	; 0x74
 800effe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f002:	4b7b      	ldr	r3, [pc, #492]	; (800f1f0 <_vfiprintf_r+0x244>)
 800f004:	429d      	cmp	r5, r3
 800f006:	d101      	bne.n	800f00c <_vfiprintf_r+0x60>
 800f008:	68b5      	ldr	r5, [r6, #8]
 800f00a:	e7df      	b.n	800efcc <_vfiprintf_r+0x20>
 800f00c:	4b79      	ldr	r3, [pc, #484]	; (800f1f4 <_vfiprintf_r+0x248>)
 800f00e:	429d      	cmp	r5, r3
 800f010:	bf08      	it	eq
 800f012:	68f5      	ldreq	r5, [r6, #12]
 800f014:	e7da      	b.n	800efcc <_vfiprintf_r+0x20>
 800f016:	89ab      	ldrh	r3, [r5, #12]
 800f018:	0598      	lsls	r0, r3, #22
 800f01a:	d4ed      	bmi.n	800eff8 <_vfiprintf_r+0x4c>
 800f01c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f01e:	f7ff fe9b 	bl	800ed58 <__retarget_lock_release_recursive>
 800f022:	e7e9      	b.n	800eff8 <_vfiprintf_r+0x4c>
 800f024:	2300      	movs	r3, #0
 800f026:	9309      	str	r3, [sp, #36]	; 0x24
 800f028:	2320      	movs	r3, #32
 800f02a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f02e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f032:	2330      	movs	r3, #48	; 0x30
 800f034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f1f8 <_vfiprintf_r+0x24c>
 800f038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f03c:	f04f 0901 	mov.w	r9, #1
 800f040:	4623      	mov	r3, r4
 800f042:	469a      	mov	sl, r3
 800f044:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f048:	b10a      	cbz	r2, 800f04e <_vfiprintf_r+0xa2>
 800f04a:	2a25      	cmp	r2, #37	; 0x25
 800f04c:	d1f9      	bne.n	800f042 <_vfiprintf_r+0x96>
 800f04e:	ebba 0b04 	subs.w	fp, sl, r4
 800f052:	d00b      	beq.n	800f06c <_vfiprintf_r+0xc0>
 800f054:	465b      	mov	r3, fp
 800f056:	4622      	mov	r2, r4
 800f058:	4629      	mov	r1, r5
 800f05a:	4630      	mov	r0, r6
 800f05c:	f7ff ff93 	bl	800ef86 <__sfputs_r>
 800f060:	3001      	adds	r0, #1
 800f062:	f000 80aa 	beq.w	800f1ba <_vfiprintf_r+0x20e>
 800f066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f068:	445a      	add	r2, fp
 800f06a:	9209      	str	r2, [sp, #36]	; 0x24
 800f06c:	f89a 3000 	ldrb.w	r3, [sl]
 800f070:	2b00      	cmp	r3, #0
 800f072:	f000 80a2 	beq.w	800f1ba <_vfiprintf_r+0x20e>
 800f076:	2300      	movs	r3, #0
 800f078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f07c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f080:	f10a 0a01 	add.w	sl, sl, #1
 800f084:	9304      	str	r3, [sp, #16]
 800f086:	9307      	str	r3, [sp, #28]
 800f088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f08c:	931a      	str	r3, [sp, #104]	; 0x68
 800f08e:	4654      	mov	r4, sl
 800f090:	2205      	movs	r2, #5
 800f092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f096:	4858      	ldr	r0, [pc, #352]	; (800f1f8 <_vfiprintf_r+0x24c>)
 800f098:	f7f1 f8a2 	bl	80001e0 <memchr>
 800f09c:	9a04      	ldr	r2, [sp, #16]
 800f09e:	b9d8      	cbnz	r0, 800f0d8 <_vfiprintf_r+0x12c>
 800f0a0:	06d1      	lsls	r1, r2, #27
 800f0a2:	bf44      	itt	mi
 800f0a4:	2320      	movmi	r3, #32
 800f0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0aa:	0713      	lsls	r3, r2, #28
 800f0ac:	bf44      	itt	mi
 800f0ae:	232b      	movmi	r3, #43	; 0x2b
 800f0b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b4:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b8:	2b2a      	cmp	r3, #42	; 0x2a
 800f0ba:	d015      	beq.n	800f0e8 <_vfiprintf_r+0x13c>
 800f0bc:	9a07      	ldr	r2, [sp, #28]
 800f0be:	4654      	mov	r4, sl
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	f04f 0c0a 	mov.w	ip, #10
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0cc:	3b30      	subs	r3, #48	; 0x30
 800f0ce:	2b09      	cmp	r3, #9
 800f0d0:	d94e      	bls.n	800f170 <_vfiprintf_r+0x1c4>
 800f0d2:	b1b0      	cbz	r0, 800f102 <_vfiprintf_r+0x156>
 800f0d4:	9207      	str	r2, [sp, #28]
 800f0d6:	e014      	b.n	800f102 <_vfiprintf_r+0x156>
 800f0d8:	eba0 0308 	sub.w	r3, r0, r8
 800f0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	9304      	str	r3, [sp, #16]
 800f0e4:	46a2      	mov	sl, r4
 800f0e6:	e7d2      	b.n	800f08e <_vfiprintf_r+0xe2>
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	1d19      	adds	r1, r3, #4
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	9103      	str	r1, [sp, #12]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	bfbb      	ittet	lt
 800f0f4:	425b      	neglt	r3, r3
 800f0f6:	f042 0202 	orrlt.w	r2, r2, #2
 800f0fa:	9307      	strge	r3, [sp, #28]
 800f0fc:	9307      	strlt	r3, [sp, #28]
 800f0fe:	bfb8      	it	lt
 800f100:	9204      	strlt	r2, [sp, #16]
 800f102:	7823      	ldrb	r3, [r4, #0]
 800f104:	2b2e      	cmp	r3, #46	; 0x2e
 800f106:	d10c      	bne.n	800f122 <_vfiprintf_r+0x176>
 800f108:	7863      	ldrb	r3, [r4, #1]
 800f10a:	2b2a      	cmp	r3, #42	; 0x2a
 800f10c:	d135      	bne.n	800f17a <_vfiprintf_r+0x1ce>
 800f10e:	9b03      	ldr	r3, [sp, #12]
 800f110:	1d1a      	adds	r2, r3, #4
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	9203      	str	r2, [sp, #12]
 800f116:	2b00      	cmp	r3, #0
 800f118:	bfb8      	it	lt
 800f11a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f11e:	3402      	adds	r4, #2
 800f120:	9305      	str	r3, [sp, #20]
 800f122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f208 <_vfiprintf_r+0x25c>
 800f126:	7821      	ldrb	r1, [r4, #0]
 800f128:	2203      	movs	r2, #3
 800f12a:	4650      	mov	r0, sl
 800f12c:	f7f1 f858 	bl	80001e0 <memchr>
 800f130:	b140      	cbz	r0, 800f144 <_vfiprintf_r+0x198>
 800f132:	2340      	movs	r3, #64	; 0x40
 800f134:	eba0 000a 	sub.w	r0, r0, sl
 800f138:	fa03 f000 	lsl.w	r0, r3, r0
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	4303      	orrs	r3, r0
 800f140:	3401      	adds	r4, #1
 800f142:	9304      	str	r3, [sp, #16]
 800f144:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f148:	482c      	ldr	r0, [pc, #176]	; (800f1fc <_vfiprintf_r+0x250>)
 800f14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f14e:	2206      	movs	r2, #6
 800f150:	f7f1 f846 	bl	80001e0 <memchr>
 800f154:	2800      	cmp	r0, #0
 800f156:	d03f      	beq.n	800f1d8 <_vfiprintf_r+0x22c>
 800f158:	4b29      	ldr	r3, [pc, #164]	; (800f200 <_vfiprintf_r+0x254>)
 800f15a:	bb1b      	cbnz	r3, 800f1a4 <_vfiprintf_r+0x1f8>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	3307      	adds	r3, #7
 800f160:	f023 0307 	bic.w	r3, r3, #7
 800f164:	3308      	adds	r3, #8
 800f166:	9303      	str	r3, [sp, #12]
 800f168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16a:	443b      	add	r3, r7
 800f16c:	9309      	str	r3, [sp, #36]	; 0x24
 800f16e:	e767      	b.n	800f040 <_vfiprintf_r+0x94>
 800f170:	fb0c 3202 	mla	r2, ip, r2, r3
 800f174:	460c      	mov	r4, r1
 800f176:	2001      	movs	r0, #1
 800f178:	e7a5      	b.n	800f0c6 <_vfiprintf_r+0x11a>
 800f17a:	2300      	movs	r3, #0
 800f17c:	3401      	adds	r4, #1
 800f17e:	9305      	str	r3, [sp, #20]
 800f180:	4619      	mov	r1, r3
 800f182:	f04f 0c0a 	mov.w	ip, #10
 800f186:	4620      	mov	r0, r4
 800f188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18c:	3a30      	subs	r2, #48	; 0x30
 800f18e:	2a09      	cmp	r2, #9
 800f190:	d903      	bls.n	800f19a <_vfiprintf_r+0x1ee>
 800f192:	2b00      	cmp	r3, #0
 800f194:	d0c5      	beq.n	800f122 <_vfiprintf_r+0x176>
 800f196:	9105      	str	r1, [sp, #20]
 800f198:	e7c3      	b.n	800f122 <_vfiprintf_r+0x176>
 800f19a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19e:	4604      	mov	r4, r0
 800f1a0:	2301      	movs	r3, #1
 800f1a2:	e7f0      	b.n	800f186 <_vfiprintf_r+0x1da>
 800f1a4:	ab03      	add	r3, sp, #12
 800f1a6:	9300      	str	r3, [sp, #0]
 800f1a8:	462a      	mov	r2, r5
 800f1aa:	4b16      	ldr	r3, [pc, #88]	; (800f204 <_vfiprintf_r+0x258>)
 800f1ac:	a904      	add	r1, sp, #16
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	f3af 8000 	nop.w
 800f1b4:	4607      	mov	r7, r0
 800f1b6:	1c78      	adds	r0, r7, #1
 800f1b8:	d1d6      	bne.n	800f168 <_vfiprintf_r+0x1bc>
 800f1ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1bc:	07d9      	lsls	r1, r3, #31
 800f1be:	d405      	bmi.n	800f1cc <_vfiprintf_r+0x220>
 800f1c0:	89ab      	ldrh	r3, [r5, #12]
 800f1c2:	059a      	lsls	r2, r3, #22
 800f1c4:	d402      	bmi.n	800f1cc <_vfiprintf_r+0x220>
 800f1c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1c8:	f7ff fdc6 	bl	800ed58 <__retarget_lock_release_recursive>
 800f1cc:	89ab      	ldrh	r3, [r5, #12]
 800f1ce:	065b      	lsls	r3, r3, #25
 800f1d0:	f53f af12 	bmi.w	800eff8 <_vfiprintf_r+0x4c>
 800f1d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1d6:	e711      	b.n	800effc <_vfiprintf_r+0x50>
 800f1d8:	ab03      	add	r3, sp, #12
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	462a      	mov	r2, r5
 800f1de:	4b09      	ldr	r3, [pc, #36]	; (800f204 <_vfiprintf_r+0x258>)
 800f1e0:	a904      	add	r1, sp, #16
 800f1e2:	4630      	mov	r0, r6
 800f1e4:	f000 f880 	bl	800f2e8 <_printf_i>
 800f1e8:	e7e4      	b.n	800f1b4 <_vfiprintf_r+0x208>
 800f1ea:	bf00      	nop
 800f1ec:	08013b84 	.word	0x08013b84
 800f1f0:	08013ba4 	.word	0x08013ba4
 800f1f4:	08013b64 	.word	0x08013b64
 800f1f8:	08013bc8 	.word	0x08013bc8
 800f1fc:	08013bd2 	.word	0x08013bd2
 800f200:	00000000 	.word	0x00000000
 800f204:	0800ef87 	.word	0x0800ef87
 800f208:	08013bce 	.word	0x08013bce

0800f20c <_printf_common>:
 800f20c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f210:	4616      	mov	r6, r2
 800f212:	4699      	mov	r9, r3
 800f214:	688a      	ldr	r2, [r1, #8]
 800f216:	690b      	ldr	r3, [r1, #16]
 800f218:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f21c:	4293      	cmp	r3, r2
 800f21e:	bfb8      	it	lt
 800f220:	4613      	movlt	r3, r2
 800f222:	6033      	str	r3, [r6, #0]
 800f224:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f228:	4607      	mov	r7, r0
 800f22a:	460c      	mov	r4, r1
 800f22c:	b10a      	cbz	r2, 800f232 <_printf_common+0x26>
 800f22e:	3301      	adds	r3, #1
 800f230:	6033      	str	r3, [r6, #0]
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	0699      	lsls	r1, r3, #26
 800f236:	bf42      	ittt	mi
 800f238:	6833      	ldrmi	r3, [r6, #0]
 800f23a:	3302      	addmi	r3, #2
 800f23c:	6033      	strmi	r3, [r6, #0]
 800f23e:	6825      	ldr	r5, [r4, #0]
 800f240:	f015 0506 	ands.w	r5, r5, #6
 800f244:	d106      	bne.n	800f254 <_printf_common+0x48>
 800f246:	f104 0a19 	add.w	sl, r4, #25
 800f24a:	68e3      	ldr	r3, [r4, #12]
 800f24c:	6832      	ldr	r2, [r6, #0]
 800f24e:	1a9b      	subs	r3, r3, r2
 800f250:	42ab      	cmp	r3, r5
 800f252:	dc26      	bgt.n	800f2a2 <_printf_common+0x96>
 800f254:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f258:	1e13      	subs	r3, r2, #0
 800f25a:	6822      	ldr	r2, [r4, #0]
 800f25c:	bf18      	it	ne
 800f25e:	2301      	movne	r3, #1
 800f260:	0692      	lsls	r2, r2, #26
 800f262:	d42b      	bmi.n	800f2bc <_printf_common+0xb0>
 800f264:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f268:	4649      	mov	r1, r9
 800f26a:	4638      	mov	r0, r7
 800f26c:	47c0      	blx	r8
 800f26e:	3001      	adds	r0, #1
 800f270:	d01e      	beq.n	800f2b0 <_printf_common+0xa4>
 800f272:	6823      	ldr	r3, [r4, #0]
 800f274:	68e5      	ldr	r5, [r4, #12]
 800f276:	6832      	ldr	r2, [r6, #0]
 800f278:	f003 0306 	and.w	r3, r3, #6
 800f27c:	2b04      	cmp	r3, #4
 800f27e:	bf08      	it	eq
 800f280:	1aad      	subeq	r5, r5, r2
 800f282:	68a3      	ldr	r3, [r4, #8]
 800f284:	6922      	ldr	r2, [r4, #16]
 800f286:	bf0c      	ite	eq
 800f288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f28c:	2500      	movne	r5, #0
 800f28e:	4293      	cmp	r3, r2
 800f290:	bfc4      	itt	gt
 800f292:	1a9b      	subgt	r3, r3, r2
 800f294:	18ed      	addgt	r5, r5, r3
 800f296:	2600      	movs	r6, #0
 800f298:	341a      	adds	r4, #26
 800f29a:	42b5      	cmp	r5, r6
 800f29c:	d11a      	bne.n	800f2d4 <_printf_common+0xc8>
 800f29e:	2000      	movs	r0, #0
 800f2a0:	e008      	b.n	800f2b4 <_printf_common+0xa8>
 800f2a2:	2301      	movs	r3, #1
 800f2a4:	4652      	mov	r2, sl
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	4638      	mov	r0, r7
 800f2aa:	47c0      	blx	r8
 800f2ac:	3001      	adds	r0, #1
 800f2ae:	d103      	bne.n	800f2b8 <_printf_common+0xac>
 800f2b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f2b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b8:	3501      	adds	r5, #1
 800f2ba:	e7c6      	b.n	800f24a <_printf_common+0x3e>
 800f2bc:	18e1      	adds	r1, r4, r3
 800f2be:	1c5a      	adds	r2, r3, #1
 800f2c0:	2030      	movs	r0, #48	; 0x30
 800f2c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2c6:	4422      	add	r2, r4
 800f2c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	e7c7      	b.n	800f264 <_printf_common+0x58>
 800f2d4:	2301      	movs	r3, #1
 800f2d6:	4622      	mov	r2, r4
 800f2d8:	4649      	mov	r1, r9
 800f2da:	4638      	mov	r0, r7
 800f2dc:	47c0      	blx	r8
 800f2de:	3001      	adds	r0, #1
 800f2e0:	d0e6      	beq.n	800f2b0 <_printf_common+0xa4>
 800f2e2:	3601      	adds	r6, #1
 800f2e4:	e7d9      	b.n	800f29a <_printf_common+0x8e>
	...

0800f2e8 <_printf_i>:
 800f2e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ec:	7e0f      	ldrb	r7, [r1, #24]
 800f2ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2f0:	2f78      	cmp	r7, #120	; 0x78
 800f2f2:	4691      	mov	r9, r2
 800f2f4:	4680      	mov	r8, r0
 800f2f6:	460c      	mov	r4, r1
 800f2f8:	469a      	mov	sl, r3
 800f2fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2fe:	d807      	bhi.n	800f310 <_printf_i+0x28>
 800f300:	2f62      	cmp	r7, #98	; 0x62
 800f302:	d80a      	bhi.n	800f31a <_printf_i+0x32>
 800f304:	2f00      	cmp	r7, #0
 800f306:	f000 80d8 	beq.w	800f4ba <_printf_i+0x1d2>
 800f30a:	2f58      	cmp	r7, #88	; 0x58
 800f30c:	f000 80a3 	beq.w	800f456 <_printf_i+0x16e>
 800f310:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f314:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f318:	e03a      	b.n	800f390 <_printf_i+0xa8>
 800f31a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f31e:	2b15      	cmp	r3, #21
 800f320:	d8f6      	bhi.n	800f310 <_printf_i+0x28>
 800f322:	a101      	add	r1, pc, #4	; (adr r1, 800f328 <_printf_i+0x40>)
 800f324:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f328:	0800f381 	.word	0x0800f381
 800f32c:	0800f395 	.word	0x0800f395
 800f330:	0800f311 	.word	0x0800f311
 800f334:	0800f311 	.word	0x0800f311
 800f338:	0800f311 	.word	0x0800f311
 800f33c:	0800f311 	.word	0x0800f311
 800f340:	0800f395 	.word	0x0800f395
 800f344:	0800f311 	.word	0x0800f311
 800f348:	0800f311 	.word	0x0800f311
 800f34c:	0800f311 	.word	0x0800f311
 800f350:	0800f311 	.word	0x0800f311
 800f354:	0800f4a1 	.word	0x0800f4a1
 800f358:	0800f3c5 	.word	0x0800f3c5
 800f35c:	0800f483 	.word	0x0800f483
 800f360:	0800f311 	.word	0x0800f311
 800f364:	0800f311 	.word	0x0800f311
 800f368:	0800f4c3 	.word	0x0800f4c3
 800f36c:	0800f311 	.word	0x0800f311
 800f370:	0800f3c5 	.word	0x0800f3c5
 800f374:	0800f311 	.word	0x0800f311
 800f378:	0800f311 	.word	0x0800f311
 800f37c:	0800f48b 	.word	0x0800f48b
 800f380:	682b      	ldr	r3, [r5, #0]
 800f382:	1d1a      	adds	r2, r3, #4
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	602a      	str	r2, [r5, #0]
 800f388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f38c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f390:	2301      	movs	r3, #1
 800f392:	e0a3      	b.n	800f4dc <_printf_i+0x1f4>
 800f394:	6820      	ldr	r0, [r4, #0]
 800f396:	6829      	ldr	r1, [r5, #0]
 800f398:	0606      	lsls	r6, r0, #24
 800f39a:	f101 0304 	add.w	r3, r1, #4
 800f39e:	d50a      	bpl.n	800f3b6 <_printf_i+0xce>
 800f3a0:	680e      	ldr	r6, [r1, #0]
 800f3a2:	602b      	str	r3, [r5, #0]
 800f3a4:	2e00      	cmp	r6, #0
 800f3a6:	da03      	bge.n	800f3b0 <_printf_i+0xc8>
 800f3a8:	232d      	movs	r3, #45	; 0x2d
 800f3aa:	4276      	negs	r6, r6
 800f3ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3b0:	485e      	ldr	r0, [pc, #376]	; (800f52c <_printf_i+0x244>)
 800f3b2:	230a      	movs	r3, #10
 800f3b4:	e019      	b.n	800f3ea <_printf_i+0x102>
 800f3b6:	680e      	ldr	r6, [r1, #0]
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3be:	bf18      	it	ne
 800f3c0:	b236      	sxthne	r6, r6
 800f3c2:	e7ef      	b.n	800f3a4 <_printf_i+0xbc>
 800f3c4:	682b      	ldr	r3, [r5, #0]
 800f3c6:	6820      	ldr	r0, [r4, #0]
 800f3c8:	1d19      	adds	r1, r3, #4
 800f3ca:	6029      	str	r1, [r5, #0]
 800f3cc:	0601      	lsls	r1, r0, #24
 800f3ce:	d501      	bpl.n	800f3d4 <_printf_i+0xec>
 800f3d0:	681e      	ldr	r6, [r3, #0]
 800f3d2:	e002      	b.n	800f3da <_printf_i+0xf2>
 800f3d4:	0646      	lsls	r6, r0, #25
 800f3d6:	d5fb      	bpl.n	800f3d0 <_printf_i+0xe8>
 800f3d8:	881e      	ldrh	r6, [r3, #0]
 800f3da:	4854      	ldr	r0, [pc, #336]	; (800f52c <_printf_i+0x244>)
 800f3dc:	2f6f      	cmp	r7, #111	; 0x6f
 800f3de:	bf0c      	ite	eq
 800f3e0:	2308      	moveq	r3, #8
 800f3e2:	230a      	movne	r3, #10
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3ea:	6865      	ldr	r5, [r4, #4]
 800f3ec:	60a5      	str	r5, [r4, #8]
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	bfa2      	ittt	ge
 800f3f2:	6821      	ldrge	r1, [r4, #0]
 800f3f4:	f021 0104 	bicge.w	r1, r1, #4
 800f3f8:	6021      	strge	r1, [r4, #0]
 800f3fa:	b90e      	cbnz	r6, 800f400 <_printf_i+0x118>
 800f3fc:	2d00      	cmp	r5, #0
 800f3fe:	d04d      	beq.n	800f49c <_printf_i+0x1b4>
 800f400:	4615      	mov	r5, r2
 800f402:	fbb6 f1f3 	udiv	r1, r6, r3
 800f406:	fb03 6711 	mls	r7, r3, r1, r6
 800f40a:	5dc7      	ldrb	r7, [r0, r7]
 800f40c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f410:	4637      	mov	r7, r6
 800f412:	42bb      	cmp	r3, r7
 800f414:	460e      	mov	r6, r1
 800f416:	d9f4      	bls.n	800f402 <_printf_i+0x11a>
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d10b      	bne.n	800f434 <_printf_i+0x14c>
 800f41c:	6823      	ldr	r3, [r4, #0]
 800f41e:	07de      	lsls	r6, r3, #31
 800f420:	d508      	bpl.n	800f434 <_printf_i+0x14c>
 800f422:	6923      	ldr	r3, [r4, #16]
 800f424:	6861      	ldr	r1, [r4, #4]
 800f426:	4299      	cmp	r1, r3
 800f428:	bfde      	ittt	le
 800f42a:	2330      	movle	r3, #48	; 0x30
 800f42c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f430:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f434:	1b52      	subs	r2, r2, r5
 800f436:	6122      	str	r2, [r4, #16]
 800f438:	f8cd a000 	str.w	sl, [sp]
 800f43c:	464b      	mov	r3, r9
 800f43e:	aa03      	add	r2, sp, #12
 800f440:	4621      	mov	r1, r4
 800f442:	4640      	mov	r0, r8
 800f444:	f7ff fee2 	bl	800f20c <_printf_common>
 800f448:	3001      	adds	r0, #1
 800f44a:	d14c      	bne.n	800f4e6 <_printf_i+0x1fe>
 800f44c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f450:	b004      	add	sp, #16
 800f452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f456:	4835      	ldr	r0, [pc, #212]	; (800f52c <_printf_i+0x244>)
 800f458:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f45c:	6829      	ldr	r1, [r5, #0]
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	f851 6b04 	ldr.w	r6, [r1], #4
 800f464:	6029      	str	r1, [r5, #0]
 800f466:	061d      	lsls	r5, r3, #24
 800f468:	d514      	bpl.n	800f494 <_printf_i+0x1ac>
 800f46a:	07df      	lsls	r7, r3, #31
 800f46c:	bf44      	itt	mi
 800f46e:	f043 0320 	orrmi.w	r3, r3, #32
 800f472:	6023      	strmi	r3, [r4, #0]
 800f474:	b91e      	cbnz	r6, 800f47e <_printf_i+0x196>
 800f476:	6823      	ldr	r3, [r4, #0]
 800f478:	f023 0320 	bic.w	r3, r3, #32
 800f47c:	6023      	str	r3, [r4, #0]
 800f47e:	2310      	movs	r3, #16
 800f480:	e7b0      	b.n	800f3e4 <_printf_i+0xfc>
 800f482:	6823      	ldr	r3, [r4, #0]
 800f484:	f043 0320 	orr.w	r3, r3, #32
 800f488:	6023      	str	r3, [r4, #0]
 800f48a:	2378      	movs	r3, #120	; 0x78
 800f48c:	4828      	ldr	r0, [pc, #160]	; (800f530 <_printf_i+0x248>)
 800f48e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f492:	e7e3      	b.n	800f45c <_printf_i+0x174>
 800f494:	0659      	lsls	r1, r3, #25
 800f496:	bf48      	it	mi
 800f498:	b2b6      	uxthmi	r6, r6
 800f49a:	e7e6      	b.n	800f46a <_printf_i+0x182>
 800f49c:	4615      	mov	r5, r2
 800f49e:	e7bb      	b.n	800f418 <_printf_i+0x130>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	6826      	ldr	r6, [r4, #0]
 800f4a4:	6961      	ldr	r1, [r4, #20]
 800f4a6:	1d18      	adds	r0, r3, #4
 800f4a8:	6028      	str	r0, [r5, #0]
 800f4aa:	0635      	lsls	r5, r6, #24
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	d501      	bpl.n	800f4b4 <_printf_i+0x1cc>
 800f4b0:	6019      	str	r1, [r3, #0]
 800f4b2:	e002      	b.n	800f4ba <_printf_i+0x1d2>
 800f4b4:	0670      	lsls	r0, r6, #25
 800f4b6:	d5fb      	bpl.n	800f4b0 <_printf_i+0x1c8>
 800f4b8:	8019      	strh	r1, [r3, #0]
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	6123      	str	r3, [r4, #16]
 800f4be:	4615      	mov	r5, r2
 800f4c0:	e7ba      	b.n	800f438 <_printf_i+0x150>
 800f4c2:	682b      	ldr	r3, [r5, #0]
 800f4c4:	1d1a      	adds	r2, r3, #4
 800f4c6:	602a      	str	r2, [r5, #0]
 800f4c8:	681d      	ldr	r5, [r3, #0]
 800f4ca:	6862      	ldr	r2, [r4, #4]
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	4628      	mov	r0, r5
 800f4d0:	f7f0 fe86 	bl	80001e0 <memchr>
 800f4d4:	b108      	cbz	r0, 800f4da <_printf_i+0x1f2>
 800f4d6:	1b40      	subs	r0, r0, r5
 800f4d8:	6060      	str	r0, [r4, #4]
 800f4da:	6863      	ldr	r3, [r4, #4]
 800f4dc:	6123      	str	r3, [r4, #16]
 800f4de:	2300      	movs	r3, #0
 800f4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4e4:	e7a8      	b.n	800f438 <_printf_i+0x150>
 800f4e6:	6923      	ldr	r3, [r4, #16]
 800f4e8:	462a      	mov	r2, r5
 800f4ea:	4649      	mov	r1, r9
 800f4ec:	4640      	mov	r0, r8
 800f4ee:	47d0      	blx	sl
 800f4f0:	3001      	adds	r0, #1
 800f4f2:	d0ab      	beq.n	800f44c <_printf_i+0x164>
 800f4f4:	6823      	ldr	r3, [r4, #0]
 800f4f6:	079b      	lsls	r3, r3, #30
 800f4f8:	d413      	bmi.n	800f522 <_printf_i+0x23a>
 800f4fa:	68e0      	ldr	r0, [r4, #12]
 800f4fc:	9b03      	ldr	r3, [sp, #12]
 800f4fe:	4298      	cmp	r0, r3
 800f500:	bfb8      	it	lt
 800f502:	4618      	movlt	r0, r3
 800f504:	e7a4      	b.n	800f450 <_printf_i+0x168>
 800f506:	2301      	movs	r3, #1
 800f508:	4632      	mov	r2, r6
 800f50a:	4649      	mov	r1, r9
 800f50c:	4640      	mov	r0, r8
 800f50e:	47d0      	blx	sl
 800f510:	3001      	adds	r0, #1
 800f512:	d09b      	beq.n	800f44c <_printf_i+0x164>
 800f514:	3501      	adds	r5, #1
 800f516:	68e3      	ldr	r3, [r4, #12]
 800f518:	9903      	ldr	r1, [sp, #12]
 800f51a:	1a5b      	subs	r3, r3, r1
 800f51c:	42ab      	cmp	r3, r5
 800f51e:	dcf2      	bgt.n	800f506 <_printf_i+0x21e>
 800f520:	e7eb      	b.n	800f4fa <_printf_i+0x212>
 800f522:	2500      	movs	r5, #0
 800f524:	f104 0619 	add.w	r6, r4, #25
 800f528:	e7f5      	b.n	800f516 <_printf_i+0x22e>
 800f52a:	bf00      	nop
 800f52c:	08013bd9 	.word	0x08013bd9
 800f530:	08013bea 	.word	0x08013bea

0800f534 <iprintf>:
 800f534:	b40f      	push	{r0, r1, r2, r3}
 800f536:	4b0a      	ldr	r3, [pc, #40]	; (800f560 <iprintf+0x2c>)
 800f538:	b513      	push	{r0, r1, r4, lr}
 800f53a:	681c      	ldr	r4, [r3, #0]
 800f53c:	b124      	cbz	r4, 800f548 <iprintf+0x14>
 800f53e:	69a3      	ldr	r3, [r4, #24]
 800f540:	b913      	cbnz	r3, 800f548 <iprintf+0x14>
 800f542:	4620      	mov	r0, r4
 800f544:	f7ff fa98 	bl	800ea78 <__sinit>
 800f548:	ab05      	add	r3, sp, #20
 800f54a:	9a04      	ldr	r2, [sp, #16]
 800f54c:	68a1      	ldr	r1, [r4, #8]
 800f54e:	9301      	str	r3, [sp, #4]
 800f550:	4620      	mov	r0, r4
 800f552:	f7ff fd2b 	bl	800efac <_vfiprintf_r>
 800f556:	b002      	add	sp, #8
 800f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f55c:	b004      	add	sp, #16
 800f55e:	4770      	bx	lr
 800f560:	200000d8 	.word	0x200000d8

0800f564 <cleanup_glue>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	460c      	mov	r4, r1
 800f568:	6809      	ldr	r1, [r1, #0]
 800f56a:	4605      	mov	r5, r0
 800f56c:	b109      	cbz	r1, 800f572 <cleanup_glue+0xe>
 800f56e:	f7ff fff9 	bl	800f564 <cleanup_glue>
 800f572:	4621      	mov	r1, r4
 800f574:	4628      	mov	r0, r5
 800f576:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f57a:	f7ff bc0d 	b.w	800ed98 <_free_r>
	...

0800f580 <_reclaim_reent>:
 800f580:	4b2c      	ldr	r3, [pc, #176]	; (800f634 <_reclaim_reent+0xb4>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4283      	cmp	r3, r0
 800f586:	b570      	push	{r4, r5, r6, lr}
 800f588:	4604      	mov	r4, r0
 800f58a:	d051      	beq.n	800f630 <_reclaim_reent+0xb0>
 800f58c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f58e:	b143      	cbz	r3, 800f5a2 <_reclaim_reent+0x22>
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d14a      	bne.n	800f62c <_reclaim_reent+0xac>
 800f596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f598:	6819      	ldr	r1, [r3, #0]
 800f59a:	b111      	cbz	r1, 800f5a2 <_reclaim_reent+0x22>
 800f59c:	4620      	mov	r0, r4
 800f59e:	f7ff fbfb 	bl	800ed98 <_free_r>
 800f5a2:	6961      	ldr	r1, [r4, #20]
 800f5a4:	b111      	cbz	r1, 800f5ac <_reclaim_reent+0x2c>
 800f5a6:	4620      	mov	r0, r4
 800f5a8:	f7ff fbf6 	bl	800ed98 <_free_r>
 800f5ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f5ae:	b111      	cbz	r1, 800f5b6 <_reclaim_reent+0x36>
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f7ff fbf1 	bl	800ed98 <_free_r>
 800f5b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f5b8:	b111      	cbz	r1, 800f5c0 <_reclaim_reent+0x40>
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	f7ff fbec 	bl	800ed98 <_free_r>
 800f5c0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f5c2:	b111      	cbz	r1, 800f5ca <_reclaim_reent+0x4a>
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	f7ff fbe7 	bl	800ed98 <_free_r>
 800f5ca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f5cc:	b111      	cbz	r1, 800f5d4 <_reclaim_reent+0x54>
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f7ff fbe2 	bl	800ed98 <_free_r>
 800f5d4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f5d6:	b111      	cbz	r1, 800f5de <_reclaim_reent+0x5e>
 800f5d8:	4620      	mov	r0, r4
 800f5da:	f7ff fbdd 	bl	800ed98 <_free_r>
 800f5de:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f5e0:	b111      	cbz	r1, 800f5e8 <_reclaim_reent+0x68>
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f7ff fbd8 	bl	800ed98 <_free_r>
 800f5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f5ea:	b111      	cbz	r1, 800f5f2 <_reclaim_reent+0x72>
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f7ff fbd3 	bl	800ed98 <_free_r>
 800f5f2:	69a3      	ldr	r3, [r4, #24]
 800f5f4:	b1e3      	cbz	r3, 800f630 <_reclaim_reent+0xb0>
 800f5f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	4798      	blx	r3
 800f5fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f5fe:	b1b9      	cbz	r1, 800f630 <_reclaim_reent+0xb0>
 800f600:	4620      	mov	r0, r4
 800f602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f606:	f7ff bfad 	b.w	800f564 <cleanup_glue>
 800f60a:	5949      	ldr	r1, [r1, r5]
 800f60c:	b941      	cbnz	r1, 800f620 <_reclaim_reent+0xa0>
 800f60e:	3504      	adds	r5, #4
 800f610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f612:	2d80      	cmp	r5, #128	; 0x80
 800f614:	68d9      	ldr	r1, [r3, #12]
 800f616:	d1f8      	bne.n	800f60a <_reclaim_reent+0x8a>
 800f618:	4620      	mov	r0, r4
 800f61a:	f7ff fbbd 	bl	800ed98 <_free_r>
 800f61e:	e7ba      	b.n	800f596 <_reclaim_reent+0x16>
 800f620:	680e      	ldr	r6, [r1, #0]
 800f622:	4620      	mov	r0, r4
 800f624:	f7ff fbb8 	bl	800ed98 <_free_r>
 800f628:	4631      	mov	r1, r6
 800f62a:	e7ef      	b.n	800f60c <_reclaim_reent+0x8c>
 800f62c:	2500      	movs	r5, #0
 800f62e:	e7ef      	b.n	800f610 <_reclaim_reent+0x90>
 800f630:	bd70      	pop	{r4, r5, r6, pc}
 800f632:	bf00      	nop
 800f634:	200000d8 	.word	0x200000d8

0800f638 <_sbrk_r>:
 800f638:	b538      	push	{r3, r4, r5, lr}
 800f63a:	4d06      	ldr	r5, [pc, #24]	; (800f654 <_sbrk_r+0x1c>)
 800f63c:	2300      	movs	r3, #0
 800f63e:	4604      	mov	r4, r0
 800f640:	4608      	mov	r0, r1
 800f642:	602b      	str	r3, [r5, #0]
 800f644:	f7f5 fd7e 	bl	8005144 <_sbrk>
 800f648:	1c43      	adds	r3, r0, #1
 800f64a:	d102      	bne.n	800f652 <_sbrk_r+0x1a>
 800f64c:	682b      	ldr	r3, [r5, #0]
 800f64e:	b103      	cbz	r3, 800f652 <_sbrk_r+0x1a>
 800f650:	6023      	str	r3, [r4, #0]
 800f652:	bd38      	pop	{r3, r4, r5, pc}
 800f654:	20007cf0 	.word	0x20007cf0

0800f658 <siprintf>:
 800f658:	b40e      	push	{r1, r2, r3}
 800f65a:	b500      	push	{lr}
 800f65c:	b09c      	sub	sp, #112	; 0x70
 800f65e:	ab1d      	add	r3, sp, #116	; 0x74
 800f660:	9002      	str	r0, [sp, #8]
 800f662:	9006      	str	r0, [sp, #24]
 800f664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f668:	4809      	ldr	r0, [pc, #36]	; (800f690 <siprintf+0x38>)
 800f66a:	9107      	str	r1, [sp, #28]
 800f66c:	9104      	str	r1, [sp, #16]
 800f66e:	4909      	ldr	r1, [pc, #36]	; (800f694 <siprintf+0x3c>)
 800f670:	f853 2b04 	ldr.w	r2, [r3], #4
 800f674:	9105      	str	r1, [sp, #20]
 800f676:	6800      	ldr	r0, [r0, #0]
 800f678:	9301      	str	r3, [sp, #4]
 800f67a:	a902      	add	r1, sp, #8
 800f67c:	f000 fc42 	bl	800ff04 <_svfiprintf_r>
 800f680:	9b02      	ldr	r3, [sp, #8]
 800f682:	2200      	movs	r2, #0
 800f684:	701a      	strb	r2, [r3, #0]
 800f686:	b01c      	add	sp, #112	; 0x70
 800f688:	f85d eb04 	ldr.w	lr, [sp], #4
 800f68c:	b003      	add	sp, #12
 800f68e:	4770      	bx	lr
 800f690:	200000d8 	.word	0x200000d8
 800f694:	ffff0208 	.word	0xffff0208

0800f698 <__sread>:
 800f698:	b510      	push	{r4, lr}
 800f69a:	460c      	mov	r4, r1
 800f69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6a0:	f000 fd30 	bl	8010104 <_read_r>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	bfab      	itete	ge
 800f6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800f6ac:	181b      	addge	r3, r3, r0
 800f6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f6b2:	bfac      	ite	ge
 800f6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f6b6:	81a3      	strhlt	r3, [r4, #12]
 800f6b8:	bd10      	pop	{r4, pc}

0800f6ba <__swrite>:
 800f6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6be:	461f      	mov	r7, r3
 800f6c0:	898b      	ldrh	r3, [r1, #12]
 800f6c2:	05db      	lsls	r3, r3, #23
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	4616      	mov	r6, r2
 800f6ca:	d505      	bpl.n	800f6d8 <__swrite+0x1e>
 800f6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	2200      	movs	r2, #0
 800f6d4:	f000 faee 	bl	800fcb4 <_lseek_r>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f6e2:	81a3      	strh	r3, [r4, #12]
 800f6e4:	4632      	mov	r2, r6
 800f6e6:	463b      	mov	r3, r7
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ee:	f000 b98f 	b.w	800fa10 <_write_r>

0800f6f2 <__sseek>:
 800f6f2:	b510      	push	{r4, lr}
 800f6f4:	460c      	mov	r4, r1
 800f6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fa:	f000 fadb 	bl	800fcb4 <_lseek_r>
 800f6fe:	1c43      	adds	r3, r0, #1
 800f700:	89a3      	ldrh	r3, [r4, #12]
 800f702:	bf15      	itete	ne
 800f704:	6560      	strne	r0, [r4, #84]	; 0x54
 800f706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f70e:	81a3      	strheq	r3, [r4, #12]
 800f710:	bf18      	it	ne
 800f712:	81a3      	strhne	r3, [r4, #12]
 800f714:	bd10      	pop	{r4, pc}

0800f716 <__sclose>:
 800f716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f71a:	f000 b9f9 	b.w	800fb10 <_close_r>

0800f71e <strcat>:
 800f71e:	b510      	push	{r4, lr}
 800f720:	4602      	mov	r2, r0
 800f722:	7814      	ldrb	r4, [r2, #0]
 800f724:	4613      	mov	r3, r2
 800f726:	3201      	adds	r2, #1
 800f728:	2c00      	cmp	r4, #0
 800f72a:	d1fa      	bne.n	800f722 <strcat+0x4>
 800f72c:	3b01      	subs	r3, #1
 800f72e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f732:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f736:	2a00      	cmp	r2, #0
 800f738:	d1f9      	bne.n	800f72e <strcat+0x10>
 800f73a:	bd10      	pop	{r4, pc}

0800f73c <strchr>:
 800f73c:	b2c9      	uxtb	r1, r1
 800f73e:	4603      	mov	r3, r0
 800f740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f744:	b11a      	cbz	r2, 800f74e <strchr+0x12>
 800f746:	428a      	cmp	r2, r1
 800f748:	d1f9      	bne.n	800f73e <strchr+0x2>
 800f74a:	4618      	mov	r0, r3
 800f74c:	4770      	bx	lr
 800f74e:	2900      	cmp	r1, #0
 800f750:	bf18      	it	ne
 800f752:	2300      	movne	r3, #0
 800f754:	e7f9      	b.n	800f74a <strchr+0xe>

0800f756 <strcpy>:
 800f756:	4603      	mov	r3, r0
 800f758:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f75c:	f803 2b01 	strb.w	r2, [r3], #1
 800f760:	2a00      	cmp	r2, #0
 800f762:	d1f9      	bne.n	800f758 <strcpy+0x2>
 800f764:	4770      	bx	lr

0800f766 <strncmp>:
 800f766:	b510      	push	{r4, lr}
 800f768:	b17a      	cbz	r2, 800f78a <strncmp+0x24>
 800f76a:	4603      	mov	r3, r0
 800f76c:	3901      	subs	r1, #1
 800f76e:	1884      	adds	r4, r0, r2
 800f770:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f774:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f778:	4290      	cmp	r0, r2
 800f77a:	d101      	bne.n	800f780 <strncmp+0x1a>
 800f77c:	42a3      	cmp	r3, r4
 800f77e:	d101      	bne.n	800f784 <strncmp+0x1e>
 800f780:	1a80      	subs	r0, r0, r2
 800f782:	bd10      	pop	{r4, pc}
 800f784:	2800      	cmp	r0, #0
 800f786:	d1f3      	bne.n	800f770 <strncmp+0xa>
 800f788:	e7fa      	b.n	800f780 <strncmp+0x1a>
 800f78a:	4610      	mov	r0, r2
 800f78c:	e7f9      	b.n	800f782 <strncmp+0x1c>

0800f78e <strncpy>:
 800f78e:	b510      	push	{r4, lr}
 800f790:	3901      	subs	r1, #1
 800f792:	4603      	mov	r3, r0
 800f794:	b132      	cbz	r2, 800f7a4 <strncpy+0x16>
 800f796:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f79a:	f803 4b01 	strb.w	r4, [r3], #1
 800f79e:	3a01      	subs	r2, #1
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	d1f7      	bne.n	800f794 <strncpy+0x6>
 800f7a4:	441a      	add	r2, r3
 800f7a6:	2100      	movs	r1, #0
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d100      	bne.n	800f7ae <strncpy+0x20>
 800f7ac:	bd10      	pop	{r4, pc}
 800f7ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f7b2:	e7f9      	b.n	800f7a8 <strncpy+0x1a>

0800f7b4 <strstr>:
 800f7b4:	780a      	ldrb	r2, [r1, #0]
 800f7b6:	b570      	push	{r4, r5, r6, lr}
 800f7b8:	b96a      	cbnz	r2, 800f7d6 <strstr+0x22>
 800f7ba:	bd70      	pop	{r4, r5, r6, pc}
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d109      	bne.n	800f7d4 <strstr+0x20>
 800f7c0:	460c      	mov	r4, r1
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d0f6      	beq.n	800f7ba <strstr+0x6>
 800f7cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f7d0:	429e      	cmp	r6, r3
 800f7d2:	d0f7      	beq.n	800f7c4 <strstr+0x10>
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	7803      	ldrb	r3, [r0, #0]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1ef      	bne.n	800f7bc <strstr+0x8>
 800f7dc:	4618      	mov	r0, r3
 800f7de:	e7ec      	b.n	800f7ba <strstr+0x6>

0800f7e0 <_strtol_l.constprop.0>:
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7e6:	d001      	beq.n	800f7ec <_strtol_l.constprop.0+0xc>
 800f7e8:	2b24      	cmp	r3, #36	; 0x24
 800f7ea:	d906      	bls.n	800f7fa <_strtol_l.constprop.0+0x1a>
 800f7ec:	f7ff f8e6 	bl	800e9bc <__errno>
 800f7f0:	2316      	movs	r3, #22
 800f7f2:	6003      	str	r3, [r0, #0]
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f8e0 <_strtol_l.constprop.0+0x100>
 800f7fe:	460d      	mov	r5, r1
 800f800:	462e      	mov	r6, r5
 800f802:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f806:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f80a:	f017 0708 	ands.w	r7, r7, #8
 800f80e:	d1f7      	bne.n	800f800 <_strtol_l.constprop.0+0x20>
 800f810:	2c2d      	cmp	r4, #45	; 0x2d
 800f812:	d132      	bne.n	800f87a <_strtol_l.constprop.0+0x9a>
 800f814:	782c      	ldrb	r4, [r5, #0]
 800f816:	2701      	movs	r7, #1
 800f818:	1cb5      	adds	r5, r6, #2
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d05b      	beq.n	800f8d6 <_strtol_l.constprop.0+0xf6>
 800f81e:	2b10      	cmp	r3, #16
 800f820:	d109      	bne.n	800f836 <_strtol_l.constprop.0+0x56>
 800f822:	2c30      	cmp	r4, #48	; 0x30
 800f824:	d107      	bne.n	800f836 <_strtol_l.constprop.0+0x56>
 800f826:	782c      	ldrb	r4, [r5, #0]
 800f828:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f82c:	2c58      	cmp	r4, #88	; 0x58
 800f82e:	d14d      	bne.n	800f8cc <_strtol_l.constprop.0+0xec>
 800f830:	786c      	ldrb	r4, [r5, #1]
 800f832:	2310      	movs	r3, #16
 800f834:	3502      	adds	r5, #2
 800f836:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f83a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f83e:	f04f 0c00 	mov.w	ip, #0
 800f842:	fbb8 f9f3 	udiv	r9, r8, r3
 800f846:	4666      	mov	r6, ip
 800f848:	fb03 8a19 	mls	sl, r3, r9, r8
 800f84c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f850:	f1be 0f09 	cmp.w	lr, #9
 800f854:	d816      	bhi.n	800f884 <_strtol_l.constprop.0+0xa4>
 800f856:	4674      	mov	r4, lr
 800f858:	42a3      	cmp	r3, r4
 800f85a:	dd24      	ble.n	800f8a6 <_strtol_l.constprop.0+0xc6>
 800f85c:	f1bc 0f00 	cmp.w	ip, #0
 800f860:	db1e      	blt.n	800f8a0 <_strtol_l.constprop.0+0xc0>
 800f862:	45b1      	cmp	r9, r6
 800f864:	d31c      	bcc.n	800f8a0 <_strtol_l.constprop.0+0xc0>
 800f866:	d101      	bne.n	800f86c <_strtol_l.constprop.0+0x8c>
 800f868:	45a2      	cmp	sl, r4
 800f86a:	db19      	blt.n	800f8a0 <_strtol_l.constprop.0+0xc0>
 800f86c:	fb06 4603 	mla	r6, r6, r3, r4
 800f870:	f04f 0c01 	mov.w	ip, #1
 800f874:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f878:	e7e8      	b.n	800f84c <_strtol_l.constprop.0+0x6c>
 800f87a:	2c2b      	cmp	r4, #43	; 0x2b
 800f87c:	bf04      	itt	eq
 800f87e:	782c      	ldrbeq	r4, [r5, #0]
 800f880:	1cb5      	addeq	r5, r6, #2
 800f882:	e7ca      	b.n	800f81a <_strtol_l.constprop.0+0x3a>
 800f884:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f888:	f1be 0f19 	cmp.w	lr, #25
 800f88c:	d801      	bhi.n	800f892 <_strtol_l.constprop.0+0xb2>
 800f88e:	3c37      	subs	r4, #55	; 0x37
 800f890:	e7e2      	b.n	800f858 <_strtol_l.constprop.0+0x78>
 800f892:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f896:	f1be 0f19 	cmp.w	lr, #25
 800f89a:	d804      	bhi.n	800f8a6 <_strtol_l.constprop.0+0xc6>
 800f89c:	3c57      	subs	r4, #87	; 0x57
 800f89e:	e7db      	b.n	800f858 <_strtol_l.constprop.0+0x78>
 800f8a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f8a4:	e7e6      	b.n	800f874 <_strtol_l.constprop.0+0x94>
 800f8a6:	f1bc 0f00 	cmp.w	ip, #0
 800f8aa:	da05      	bge.n	800f8b8 <_strtol_l.constprop.0+0xd8>
 800f8ac:	2322      	movs	r3, #34	; 0x22
 800f8ae:	6003      	str	r3, [r0, #0]
 800f8b0:	4646      	mov	r6, r8
 800f8b2:	b942      	cbnz	r2, 800f8c6 <_strtol_l.constprop.0+0xe6>
 800f8b4:	4630      	mov	r0, r6
 800f8b6:	e79e      	b.n	800f7f6 <_strtol_l.constprop.0+0x16>
 800f8b8:	b107      	cbz	r7, 800f8bc <_strtol_l.constprop.0+0xdc>
 800f8ba:	4276      	negs	r6, r6
 800f8bc:	2a00      	cmp	r2, #0
 800f8be:	d0f9      	beq.n	800f8b4 <_strtol_l.constprop.0+0xd4>
 800f8c0:	f1bc 0f00 	cmp.w	ip, #0
 800f8c4:	d000      	beq.n	800f8c8 <_strtol_l.constprop.0+0xe8>
 800f8c6:	1e69      	subs	r1, r5, #1
 800f8c8:	6011      	str	r1, [r2, #0]
 800f8ca:	e7f3      	b.n	800f8b4 <_strtol_l.constprop.0+0xd4>
 800f8cc:	2430      	movs	r4, #48	; 0x30
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1b1      	bne.n	800f836 <_strtol_l.constprop.0+0x56>
 800f8d2:	2308      	movs	r3, #8
 800f8d4:	e7af      	b.n	800f836 <_strtol_l.constprop.0+0x56>
 800f8d6:	2c30      	cmp	r4, #48	; 0x30
 800f8d8:	d0a5      	beq.n	800f826 <_strtol_l.constprop.0+0x46>
 800f8da:	230a      	movs	r3, #10
 800f8dc:	e7ab      	b.n	800f836 <_strtol_l.constprop.0+0x56>
 800f8de:	bf00      	nop
 800f8e0:	08013bfc 	.word	0x08013bfc

0800f8e4 <strtol>:
 800f8e4:	4613      	mov	r3, r2
 800f8e6:	460a      	mov	r2, r1
 800f8e8:	4601      	mov	r1, r0
 800f8ea:	4802      	ldr	r0, [pc, #8]	; (800f8f4 <strtol+0x10>)
 800f8ec:	6800      	ldr	r0, [r0, #0]
 800f8ee:	f7ff bf77 	b.w	800f7e0 <_strtol_l.constprop.0>
 800f8f2:	bf00      	nop
 800f8f4:	200000d8 	.word	0x200000d8

0800f8f8 <_vsniprintf_r>:
 800f8f8:	b530      	push	{r4, r5, lr}
 800f8fa:	4614      	mov	r4, r2
 800f8fc:	2c00      	cmp	r4, #0
 800f8fe:	b09b      	sub	sp, #108	; 0x6c
 800f900:	4605      	mov	r5, r0
 800f902:	461a      	mov	r2, r3
 800f904:	da05      	bge.n	800f912 <_vsniprintf_r+0x1a>
 800f906:	238b      	movs	r3, #139	; 0x8b
 800f908:	6003      	str	r3, [r0, #0]
 800f90a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f90e:	b01b      	add	sp, #108	; 0x6c
 800f910:	bd30      	pop	{r4, r5, pc}
 800f912:	f44f 7302 	mov.w	r3, #520	; 0x208
 800f916:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f91a:	bf14      	ite	ne
 800f91c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800f920:	4623      	moveq	r3, r4
 800f922:	9302      	str	r3, [sp, #8]
 800f924:	9305      	str	r3, [sp, #20]
 800f926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f92a:	9100      	str	r1, [sp, #0]
 800f92c:	9104      	str	r1, [sp, #16]
 800f92e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f932:	4669      	mov	r1, sp
 800f934:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f936:	f000 fae5 	bl	800ff04 <_svfiprintf_r>
 800f93a:	1c43      	adds	r3, r0, #1
 800f93c:	bfbc      	itt	lt
 800f93e:	238b      	movlt	r3, #139	; 0x8b
 800f940:	602b      	strlt	r3, [r5, #0]
 800f942:	2c00      	cmp	r4, #0
 800f944:	d0e3      	beq.n	800f90e <_vsniprintf_r+0x16>
 800f946:	9b00      	ldr	r3, [sp, #0]
 800f948:	2200      	movs	r2, #0
 800f94a:	701a      	strb	r2, [r3, #0]
 800f94c:	e7df      	b.n	800f90e <_vsniprintf_r+0x16>
	...

0800f950 <vsniprintf>:
 800f950:	b507      	push	{r0, r1, r2, lr}
 800f952:	9300      	str	r3, [sp, #0]
 800f954:	4613      	mov	r3, r2
 800f956:	460a      	mov	r2, r1
 800f958:	4601      	mov	r1, r0
 800f95a:	4803      	ldr	r0, [pc, #12]	; (800f968 <vsniprintf+0x18>)
 800f95c:	6800      	ldr	r0, [r0, #0]
 800f95e:	f7ff ffcb 	bl	800f8f8 <_vsniprintf_r>
 800f962:	b003      	add	sp, #12
 800f964:	f85d fb04 	ldr.w	pc, [sp], #4
 800f968:	200000d8 	.word	0x200000d8

0800f96c <__swbuf_r>:
 800f96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96e:	460e      	mov	r6, r1
 800f970:	4614      	mov	r4, r2
 800f972:	4605      	mov	r5, r0
 800f974:	b118      	cbz	r0, 800f97e <__swbuf_r+0x12>
 800f976:	6983      	ldr	r3, [r0, #24]
 800f978:	b90b      	cbnz	r3, 800f97e <__swbuf_r+0x12>
 800f97a:	f7ff f87d 	bl	800ea78 <__sinit>
 800f97e:	4b21      	ldr	r3, [pc, #132]	; (800fa04 <__swbuf_r+0x98>)
 800f980:	429c      	cmp	r4, r3
 800f982:	d12b      	bne.n	800f9dc <__swbuf_r+0x70>
 800f984:	686c      	ldr	r4, [r5, #4]
 800f986:	69a3      	ldr	r3, [r4, #24]
 800f988:	60a3      	str	r3, [r4, #8]
 800f98a:	89a3      	ldrh	r3, [r4, #12]
 800f98c:	071a      	lsls	r2, r3, #28
 800f98e:	d52f      	bpl.n	800f9f0 <__swbuf_r+0x84>
 800f990:	6923      	ldr	r3, [r4, #16]
 800f992:	b36b      	cbz	r3, 800f9f0 <__swbuf_r+0x84>
 800f994:	6923      	ldr	r3, [r4, #16]
 800f996:	6820      	ldr	r0, [r4, #0]
 800f998:	1ac0      	subs	r0, r0, r3
 800f99a:	6963      	ldr	r3, [r4, #20]
 800f99c:	b2f6      	uxtb	r6, r6
 800f99e:	4283      	cmp	r3, r0
 800f9a0:	4637      	mov	r7, r6
 800f9a2:	dc04      	bgt.n	800f9ae <__swbuf_r+0x42>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4628      	mov	r0, r5
 800f9a8:	f000 f948 	bl	800fc3c <_fflush_r>
 800f9ac:	bb30      	cbnz	r0, 800f9fc <__swbuf_r+0x90>
 800f9ae:	68a3      	ldr	r3, [r4, #8]
 800f9b0:	3b01      	subs	r3, #1
 800f9b2:	60a3      	str	r3, [r4, #8]
 800f9b4:	6823      	ldr	r3, [r4, #0]
 800f9b6:	1c5a      	adds	r2, r3, #1
 800f9b8:	6022      	str	r2, [r4, #0]
 800f9ba:	701e      	strb	r6, [r3, #0]
 800f9bc:	6963      	ldr	r3, [r4, #20]
 800f9be:	3001      	adds	r0, #1
 800f9c0:	4283      	cmp	r3, r0
 800f9c2:	d004      	beq.n	800f9ce <__swbuf_r+0x62>
 800f9c4:	89a3      	ldrh	r3, [r4, #12]
 800f9c6:	07db      	lsls	r3, r3, #31
 800f9c8:	d506      	bpl.n	800f9d8 <__swbuf_r+0x6c>
 800f9ca:	2e0a      	cmp	r6, #10
 800f9cc:	d104      	bne.n	800f9d8 <__swbuf_r+0x6c>
 800f9ce:	4621      	mov	r1, r4
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	f000 f933 	bl	800fc3c <_fflush_r>
 800f9d6:	b988      	cbnz	r0, 800f9fc <__swbuf_r+0x90>
 800f9d8:	4638      	mov	r0, r7
 800f9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9dc:	4b0a      	ldr	r3, [pc, #40]	; (800fa08 <__swbuf_r+0x9c>)
 800f9de:	429c      	cmp	r4, r3
 800f9e0:	d101      	bne.n	800f9e6 <__swbuf_r+0x7a>
 800f9e2:	68ac      	ldr	r4, [r5, #8]
 800f9e4:	e7cf      	b.n	800f986 <__swbuf_r+0x1a>
 800f9e6:	4b09      	ldr	r3, [pc, #36]	; (800fa0c <__swbuf_r+0xa0>)
 800f9e8:	429c      	cmp	r4, r3
 800f9ea:	bf08      	it	eq
 800f9ec:	68ec      	ldreq	r4, [r5, #12]
 800f9ee:	e7ca      	b.n	800f986 <__swbuf_r+0x1a>
 800f9f0:	4621      	mov	r1, r4
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	f000 f81e 	bl	800fa34 <__swsetup_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	d0cb      	beq.n	800f994 <__swbuf_r+0x28>
 800f9fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800fa00:	e7ea      	b.n	800f9d8 <__swbuf_r+0x6c>
 800fa02:	bf00      	nop
 800fa04:	08013b84 	.word	0x08013b84
 800fa08:	08013ba4 	.word	0x08013ba4
 800fa0c:	08013b64 	.word	0x08013b64

0800fa10 <_write_r>:
 800fa10:	b538      	push	{r3, r4, r5, lr}
 800fa12:	4d07      	ldr	r5, [pc, #28]	; (800fa30 <_write_r+0x20>)
 800fa14:	4604      	mov	r4, r0
 800fa16:	4608      	mov	r0, r1
 800fa18:	4611      	mov	r1, r2
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	602a      	str	r2, [r5, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	f7f2 fd18 	bl	8002454 <_write>
 800fa24:	1c43      	adds	r3, r0, #1
 800fa26:	d102      	bne.n	800fa2e <_write_r+0x1e>
 800fa28:	682b      	ldr	r3, [r5, #0]
 800fa2a:	b103      	cbz	r3, 800fa2e <_write_r+0x1e>
 800fa2c:	6023      	str	r3, [r4, #0]
 800fa2e:	bd38      	pop	{r3, r4, r5, pc}
 800fa30:	20007cf0 	.word	0x20007cf0

0800fa34 <__swsetup_r>:
 800fa34:	4b32      	ldr	r3, [pc, #200]	; (800fb00 <__swsetup_r+0xcc>)
 800fa36:	b570      	push	{r4, r5, r6, lr}
 800fa38:	681d      	ldr	r5, [r3, #0]
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	b125      	cbz	r5, 800fa4a <__swsetup_r+0x16>
 800fa40:	69ab      	ldr	r3, [r5, #24]
 800fa42:	b913      	cbnz	r3, 800fa4a <__swsetup_r+0x16>
 800fa44:	4628      	mov	r0, r5
 800fa46:	f7ff f817 	bl	800ea78 <__sinit>
 800fa4a:	4b2e      	ldr	r3, [pc, #184]	; (800fb04 <__swsetup_r+0xd0>)
 800fa4c:	429c      	cmp	r4, r3
 800fa4e:	d10f      	bne.n	800fa70 <__swsetup_r+0x3c>
 800fa50:	686c      	ldr	r4, [r5, #4]
 800fa52:	89a3      	ldrh	r3, [r4, #12]
 800fa54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fa58:	0719      	lsls	r1, r3, #28
 800fa5a:	d42c      	bmi.n	800fab6 <__swsetup_r+0x82>
 800fa5c:	06dd      	lsls	r5, r3, #27
 800fa5e:	d411      	bmi.n	800fa84 <__swsetup_r+0x50>
 800fa60:	2309      	movs	r3, #9
 800fa62:	6033      	str	r3, [r6, #0]
 800fa64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fa68:	81a3      	strh	r3, [r4, #12]
 800fa6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa6e:	e03e      	b.n	800faee <__swsetup_r+0xba>
 800fa70:	4b25      	ldr	r3, [pc, #148]	; (800fb08 <__swsetup_r+0xd4>)
 800fa72:	429c      	cmp	r4, r3
 800fa74:	d101      	bne.n	800fa7a <__swsetup_r+0x46>
 800fa76:	68ac      	ldr	r4, [r5, #8]
 800fa78:	e7eb      	b.n	800fa52 <__swsetup_r+0x1e>
 800fa7a:	4b24      	ldr	r3, [pc, #144]	; (800fb0c <__swsetup_r+0xd8>)
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	bf08      	it	eq
 800fa80:	68ec      	ldreq	r4, [r5, #12]
 800fa82:	e7e6      	b.n	800fa52 <__swsetup_r+0x1e>
 800fa84:	0758      	lsls	r0, r3, #29
 800fa86:	d512      	bpl.n	800faae <__swsetup_r+0x7a>
 800fa88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa8a:	b141      	cbz	r1, 800fa9e <__swsetup_r+0x6a>
 800fa8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa90:	4299      	cmp	r1, r3
 800fa92:	d002      	beq.n	800fa9a <__swsetup_r+0x66>
 800fa94:	4630      	mov	r0, r6
 800fa96:	f7ff f97f 	bl	800ed98 <_free_r>
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	6363      	str	r3, [r4, #52]	; 0x34
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800faa4:	81a3      	strh	r3, [r4, #12]
 800faa6:	2300      	movs	r3, #0
 800faa8:	6063      	str	r3, [r4, #4]
 800faaa:	6923      	ldr	r3, [r4, #16]
 800faac:	6023      	str	r3, [r4, #0]
 800faae:	89a3      	ldrh	r3, [r4, #12]
 800fab0:	f043 0308 	orr.w	r3, r3, #8
 800fab4:	81a3      	strh	r3, [r4, #12]
 800fab6:	6923      	ldr	r3, [r4, #16]
 800fab8:	b94b      	cbnz	r3, 800face <__swsetup_r+0x9a>
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fac4:	d003      	beq.n	800face <__swsetup_r+0x9a>
 800fac6:	4621      	mov	r1, r4
 800fac8:	4630      	mov	r0, r6
 800faca:	f000 f92b 	bl	800fd24 <__smakebuf_r>
 800face:	89a0      	ldrh	r0, [r4, #12]
 800fad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fad4:	f010 0301 	ands.w	r3, r0, #1
 800fad8:	d00a      	beq.n	800faf0 <__swsetup_r+0xbc>
 800fada:	2300      	movs	r3, #0
 800fadc:	60a3      	str	r3, [r4, #8]
 800fade:	6963      	ldr	r3, [r4, #20]
 800fae0:	425b      	negs	r3, r3
 800fae2:	61a3      	str	r3, [r4, #24]
 800fae4:	6923      	ldr	r3, [r4, #16]
 800fae6:	b943      	cbnz	r3, 800fafa <__swsetup_r+0xc6>
 800fae8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800faec:	d1ba      	bne.n	800fa64 <__swsetup_r+0x30>
 800faee:	bd70      	pop	{r4, r5, r6, pc}
 800faf0:	0781      	lsls	r1, r0, #30
 800faf2:	bf58      	it	pl
 800faf4:	6963      	ldrpl	r3, [r4, #20]
 800faf6:	60a3      	str	r3, [r4, #8]
 800faf8:	e7f4      	b.n	800fae4 <__swsetup_r+0xb0>
 800fafa:	2000      	movs	r0, #0
 800fafc:	e7f7      	b.n	800faee <__swsetup_r+0xba>
 800fafe:	bf00      	nop
 800fb00:	200000d8 	.word	0x200000d8
 800fb04:	08013b84 	.word	0x08013b84
 800fb08:	08013ba4 	.word	0x08013ba4
 800fb0c:	08013b64 	.word	0x08013b64

0800fb10 <_close_r>:
 800fb10:	b538      	push	{r3, r4, r5, lr}
 800fb12:	4d06      	ldr	r5, [pc, #24]	; (800fb2c <_close_r+0x1c>)
 800fb14:	2300      	movs	r3, #0
 800fb16:	4604      	mov	r4, r0
 800fb18:	4608      	mov	r0, r1
 800fb1a:	602b      	str	r3, [r5, #0]
 800fb1c:	f7f5 fadd 	bl	80050da <_close>
 800fb20:	1c43      	adds	r3, r0, #1
 800fb22:	d102      	bne.n	800fb2a <_close_r+0x1a>
 800fb24:	682b      	ldr	r3, [r5, #0]
 800fb26:	b103      	cbz	r3, 800fb2a <_close_r+0x1a>
 800fb28:	6023      	str	r3, [r4, #0]
 800fb2a:	bd38      	pop	{r3, r4, r5, pc}
 800fb2c:	20007cf0 	.word	0x20007cf0

0800fb30 <__sflush_r>:
 800fb30:	898a      	ldrh	r2, [r1, #12]
 800fb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb36:	4605      	mov	r5, r0
 800fb38:	0710      	lsls	r0, r2, #28
 800fb3a:	460c      	mov	r4, r1
 800fb3c:	d458      	bmi.n	800fbf0 <__sflush_r+0xc0>
 800fb3e:	684b      	ldr	r3, [r1, #4]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	dc05      	bgt.n	800fb50 <__sflush_r+0x20>
 800fb44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	dc02      	bgt.n	800fb50 <__sflush_r+0x20>
 800fb4a:	2000      	movs	r0, #0
 800fb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb52:	2e00      	cmp	r6, #0
 800fb54:	d0f9      	beq.n	800fb4a <__sflush_r+0x1a>
 800fb56:	2300      	movs	r3, #0
 800fb58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb5c:	682f      	ldr	r7, [r5, #0]
 800fb5e:	602b      	str	r3, [r5, #0]
 800fb60:	d032      	beq.n	800fbc8 <__sflush_r+0x98>
 800fb62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb64:	89a3      	ldrh	r3, [r4, #12]
 800fb66:	075a      	lsls	r2, r3, #29
 800fb68:	d505      	bpl.n	800fb76 <__sflush_r+0x46>
 800fb6a:	6863      	ldr	r3, [r4, #4]
 800fb6c:	1ac0      	subs	r0, r0, r3
 800fb6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb70:	b10b      	cbz	r3, 800fb76 <__sflush_r+0x46>
 800fb72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fb74:	1ac0      	subs	r0, r0, r3
 800fb76:	2300      	movs	r3, #0
 800fb78:	4602      	mov	r2, r0
 800fb7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb7c:	6a21      	ldr	r1, [r4, #32]
 800fb7e:	4628      	mov	r0, r5
 800fb80:	47b0      	blx	r6
 800fb82:	1c43      	adds	r3, r0, #1
 800fb84:	89a3      	ldrh	r3, [r4, #12]
 800fb86:	d106      	bne.n	800fb96 <__sflush_r+0x66>
 800fb88:	6829      	ldr	r1, [r5, #0]
 800fb8a:	291d      	cmp	r1, #29
 800fb8c:	d82c      	bhi.n	800fbe8 <__sflush_r+0xb8>
 800fb8e:	4a2a      	ldr	r2, [pc, #168]	; (800fc38 <__sflush_r+0x108>)
 800fb90:	40ca      	lsrs	r2, r1
 800fb92:	07d6      	lsls	r6, r2, #31
 800fb94:	d528      	bpl.n	800fbe8 <__sflush_r+0xb8>
 800fb96:	2200      	movs	r2, #0
 800fb98:	6062      	str	r2, [r4, #4]
 800fb9a:	04d9      	lsls	r1, r3, #19
 800fb9c:	6922      	ldr	r2, [r4, #16]
 800fb9e:	6022      	str	r2, [r4, #0]
 800fba0:	d504      	bpl.n	800fbac <__sflush_r+0x7c>
 800fba2:	1c42      	adds	r2, r0, #1
 800fba4:	d101      	bne.n	800fbaa <__sflush_r+0x7a>
 800fba6:	682b      	ldr	r3, [r5, #0]
 800fba8:	b903      	cbnz	r3, 800fbac <__sflush_r+0x7c>
 800fbaa:	6560      	str	r0, [r4, #84]	; 0x54
 800fbac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbae:	602f      	str	r7, [r5, #0]
 800fbb0:	2900      	cmp	r1, #0
 800fbb2:	d0ca      	beq.n	800fb4a <__sflush_r+0x1a>
 800fbb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbb8:	4299      	cmp	r1, r3
 800fbba:	d002      	beq.n	800fbc2 <__sflush_r+0x92>
 800fbbc:	4628      	mov	r0, r5
 800fbbe:	f7ff f8eb 	bl	800ed98 <_free_r>
 800fbc2:	2000      	movs	r0, #0
 800fbc4:	6360      	str	r0, [r4, #52]	; 0x34
 800fbc6:	e7c1      	b.n	800fb4c <__sflush_r+0x1c>
 800fbc8:	6a21      	ldr	r1, [r4, #32]
 800fbca:	2301      	movs	r3, #1
 800fbcc:	4628      	mov	r0, r5
 800fbce:	47b0      	blx	r6
 800fbd0:	1c41      	adds	r1, r0, #1
 800fbd2:	d1c7      	bne.n	800fb64 <__sflush_r+0x34>
 800fbd4:	682b      	ldr	r3, [r5, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d0c4      	beq.n	800fb64 <__sflush_r+0x34>
 800fbda:	2b1d      	cmp	r3, #29
 800fbdc:	d001      	beq.n	800fbe2 <__sflush_r+0xb2>
 800fbde:	2b16      	cmp	r3, #22
 800fbe0:	d101      	bne.n	800fbe6 <__sflush_r+0xb6>
 800fbe2:	602f      	str	r7, [r5, #0]
 800fbe4:	e7b1      	b.n	800fb4a <__sflush_r+0x1a>
 800fbe6:	89a3      	ldrh	r3, [r4, #12]
 800fbe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fbec:	81a3      	strh	r3, [r4, #12]
 800fbee:	e7ad      	b.n	800fb4c <__sflush_r+0x1c>
 800fbf0:	690f      	ldr	r7, [r1, #16]
 800fbf2:	2f00      	cmp	r7, #0
 800fbf4:	d0a9      	beq.n	800fb4a <__sflush_r+0x1a>
 800fbf6:	0793      	lsls	r3, r2, #30
 800fbf8:	680e      	ldr	r6, [r1, #0]
 800fbfa:	bf08      	it	eq
 800fbfc:	694b      	ldreq	r3, [r1, #20]
 800fbfe:	600f      	str	r7, [r1, #0]
 800fc00:	bf18      	it	ne
 800fc02:	2300      	movne	r3, #0
 800fc04:	eba6 0807 	sub.w	r8, r6, r7
 800fc08:	608b      	str	r3, [r1, #8]
 800fc0a:	f1b8 0f00 	cmp.w	r8, #0
 800fc0e:	dd9c      	ble.n	800fb4a <__sflush_r+0x1a>
 800fc10:	6a21      	ldr	r1, [r4, #32]
 800fc12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc14:	4643      	mov	r3, r8
 800fc16:	463a      	mov	r2, r7
 800fc18:	4628      	mov	r0, r5
 800fc1a:	47b0      	blx	r6
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	dc06      	bgt.n	800fc2e <__sflush_r+0xfe>
 800fc20:	89a3      	ldrh	r3, [r4, #12]
 800fc22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc26:	81a3      	strh	r3, [r4, #12]
 800fc28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fc2c:	e78e      	b.n	800fb4c <__sflush_r+0x1c>
 800fc2e:	4407      	add	r7, r0
 800fc30:	eba8 0800 	sub.w	r8, r8, r0
 800fc34:	e7e9      	b.n	800fc0a <__sflush_r+0xda>
 800fc36:	bf00      	nop
 800fc38:	20400001 	.word	0x20400001

0800fc3c <_fflush_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	690b      	ldr	r3, [r1, #16]
 800fc40:	4605      	mov	r5, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	b913      	cbnz	r3, 800fc4c <_fflush_r+0x10>
 800fc46:	2500      	movs	r5, #0
 800fc48:	4628      	mov	r0, r5
 800fc4a:	bd38      	pop	{r3, r4, r5, pc}
 800fc4c:	b118      	cbz	r0, 800fc56 <_fflush_r+0x1a>
 800fc4e:	6983      	ldr	r3, [r0, #24]
 800fc50:	b90b      	cbnz	r3, 800fc56 <_fflush_r+0x1a>
 800fc52:	f7fe ff11 	bl	800ea78 <__sinit>
 800fc56:	4b14      	ldr	r3, [pc, #80]	; (800fca8 <_fflush_r+0x6c>)
 800fc58:	429c      	cmp	r4, r3
 800fc5a:	d11b      	bne.n	800fc94 <_fflush_r+0x58>
 800fc5c:	686c      	ldr	r4, [r5, #4]
 800fc5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0ef      	beq.n	800fc46 <_fflush_r+0xa>
 800fc66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc68:	07d0      	lsls	r0, r2, #31
 800fc6a:	d404      	bmi.n	800fc76 <_fflush_r+0x3a>
 800fc6c:	0599      	lsls	r1, r3, #22
 800fc6e:	d402      	bmi.n	800fc76 <_fflush_r+0x3a>
 800fc70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc72:	f7ff f870 	bl	800ed56 <__retarget_lock_acquire_recursive>
 800fc76:	4628      	mov	r0, r5
 800fc78:	4621      	mov	r1, r4
 800fc7a:	f7ff ff59 	bl	800fb30 <__sflush_r>
 800fc7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc80:	07da      	lsls	r2, r3, #31
 800fc82:	4605      	mov	r5, r0
 800fc84:	d4e0      	bmi.n	800fc48 <_fflush_r+0xc>
 800fc86:	89a3      	ldrh	r3, [r4, #12]
 800fc88:	059b      	lsls	r3, r3, #22
 800fc8a:	d4dd      	bmi.n	800fc48 <_fflush_r+0xc>
 800fc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc8e:	f7ff f863 	bl	800ed58 <__retarget_lock_release_recursive>
 800fc92:	e7d9      	b.n	800fc48 <_fflush_r+0xc>
 800fc94:	4b05      	ldr	r3, [pc, #20]	; (800fcac <_fflush_r+0x70>)
 800fc96:	429c      	cmp	r4, r3
 800fc98:	d101      	bne.n	800fc9e <_fflush_r+0x62>
 800fc9a:	68ac      	ldr	r4, [r5, #8]
 800fc9c:	e7df      	b.n	800fc5e <_fflush_r+0x22>
 800fc9e:	4b04      	ldr	r3, [pc, #16]	; (800fcb0 <_fflush_r+0x74>)
 800fca0:	429c      	cmp	r4, r3
 800fca2:	bf08      	it	eq
 800fca4:	68ec      	ldreq	r4, [r5, #12]
 800fca6:	e7da      	b.n	800fc5e <_fflush_r+0x22>
 800fca8:	08013b84 	.word	0x08013b84
 800fcac:	08013ba4 	.word	0x08013ba4
 800fcb0:	08013b64 	.word	0x08013b64

0800fcb4 <_lseek_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	; (800fcd4 <_lseek_r+0x20>)
 800fcb8:	4604      	mov	r4, r0
 800fcba:	4608      	mov	r0, r1
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	602a      	str	r2, [r5, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	f7f5 fa30 	bl	8005128 <_lseek>
 800fcc8:	1c43      	adds	r3, r0, #1
 800fcca:	d102      	bne.n	800fcd2 <_lseek_r+0x1e>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	b103      	cbz	r3, 800fcd2 <_lseek_r+0x1e>
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	bd38      	pop	{r3, r4, r5, pc}
 800fcd4:	20007cf0 	.word	0x20007cf0

0800fcd8 <__swhatbuf_r>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	460e      	mov	r6, r1
 800fcdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fce0:	2900      	cmp	r1, #0
 800fce2:	b096      	sub	sp, #88	; 0x58
 800fce4:	4614      	mov	r4, r2
 800fce6:	461d      	mov	r5, r3
 800fce8:	da08      	bge.n	800fcfc <__swhatbuf_r+0x24>
 800fcea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fcee:	2200      	movs	r2, #0
 800fcf0:	602a      	str	r2, [r5, #0]
 800fcf2:	061a      	lsls	r2, r3, #24
 800fcf4:	d410      	bmi.n	800fd18 <__swhatbuf_r+0x40>
 800fcf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fcfa:	e00e      	b.n	800fd1a <__swhatbuf_r+0x42>
 800fcfc:	466a      	mov	r2, sp
 800fcfe:	f000 fa13 	bl	8010128 <_fstat_r>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	dbf1      	blt.n	800fcea <__swhatbuf_r+0x12>
 800fd06:	9a01      	ldr	r2, [sp, #4]
 800fd08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd10:	425a      	negs	r2, r3
 800fd12:	415a      	adcs	r2, r3
 800fd14:	602a      	str	r2, [r5, #0]
 800fd16:	e7ee      	b.n	800fcf6 <__swhatbuf_r+0x1e>
 800fd18:	2340      	movs	r3, #64	; 0x40
 800fd1a:	2000      	movs	r0, #0
 800fd1c:	6023      	str	r3, [r4, #0]
 800fd1e:	b016      	add	sp, #88	; 0x58
 800fd20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd24 <__smakebuf_r>:
 800fd24:	898b      	ldrh	r3, [r1, #12]
 800fd26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd28:	079d      	lsls	r5, r3, #30
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460c      	mov	r4, r1
 800fd2e:	d507      	bpl.n	800fd40 <__smakebuf_r+0x1c>
 800fd30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd34:	6023      	str	r3, [r4, #0]
 800fd36:	6123      	str	r3, [r4, #16]
 800fd38:	2301      	movs	r3, #1
 800fd3a:	6163      	str	r3, [r4, #20]
 800fd3c:	b002      	add	sp, #8
 800fd3e:	bd70      	pop	{r4, r5, r6, pc}
 800fd40:	ab01      	add	r3, sp, #4
 800fd42:	466a      	mov	r2, sp
 800fd44:	f7ff ffc8 	bl	800fcd8 <__swhatbuf_r>
 800fd48:	9900      	ldr	r1, [sp, #0]
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f7ff f88f 	bl	800ee70 <_malloc_r>
 800fd52:	b948      	cbnz	r0, 800fd68 <__smakebuf_r+0x44>
 800fd54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd58:	059a      	lsls	r2, r3, #22
 800fd5a:	d4ef      	bmi.n	800fd3c <__smakebuf_r+0x18>
 800fd5c:	f023 0303 	bic.w	r3, r3, #3
 800fd60:	f043 0302 	orr.w	r3, r3, #2
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	e7e3      	b.n	800fd30 <__smakebuf_r+0xc>
 800fd68:	4b0d      	ldr	r3, [pc, #52]	; (800fda0 <__smakebuf_r+0x7c>)
 800fd6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800fd6c:	89a3      	ldrh	r3, [r4, #12]
 800fd6e:	6020      	str	r0, [r4, #0]
 800fd70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd74:	81a3      	strh	r3, [r4, #12]
 800fd76:	9b00      	ldr	r3, [sp, #0]
 800fd78:	6163      	str	r3, [r4, #20]
 800fd7a:	9b01      	ldr	r3, [sp, #4]
 800fd7c:	6120      	str	r0, [r4, #16]
 800fd7e:	b15b      	cbz	r3, 800fd98 <__smakebuf_r+0x74>
 800fd80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd84:	4630      	mov	r0, r6
 800fd86:	f000 f9e1 	bl	801014c <_isatty_r>
 800fd8a:	b128      	cbz	r0, 800fd98 <__smakebuf_r+0x74>
 800fd8c:	89a3      	ldrh	r3, [r4, #12]
 800fd8e:	f023 0303 	bic.w	r3, r3, #3
 800fd92:	f043 0301 	orr.w	r3, r3, #1
 800fd96:	81a3      	strh	r3, [r4, #12]
 800fd98:	89a0      	ldrh	r0, [r4, #12]
 800fd9a:	4305      	orrs	r5, r0
 800fd9c:	81a5      	strh	r5, [r4, #12]
 800fd9e:	e7cd      	b.n	800fd3c <__smakebuf_r+0x18>
 800fda0:	0800ea11 	.word	0x0800ea11

0800fda4 <memmove>:
 800fda4:	4288      	cmp	r0, r1
 800fda6:	b510      	push	{r4, lr}
 800fda8:	eb01 0402 	add.w	r4, r1, r2
 800fdac:	d902      	bls.n	800fdb4 <memmove+0x10>
 800fdae:	4284      	cmp	r4, r0
 800fdb0:	4623      	mov	r3, r4
 800fdb2:	d807      	bhi.n	800fdc4 <memmove+0x20>
 800fdb4:	1e43      	subs	r3, r0, #1
 800fdb6:	42a1      	cmp	r1, r4
 800fdb8:	d008      	beq.n	800fdcc <memmove+0x28>
 800fdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdc2:	e7f8      	b.n	800fdb6 <memmove+0x12>
 800fdc4:	4402      	add	r2, r0
 800fdc6:	4601      	mov	r1, r0
 800fdc8:	428a      	cmp	r2, r1
 800fdca:	d100      	bne.n	800fdce <memmove+0x2a>
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdd6:	e7f7      	b.n	800fdc8 <memmove+0x24>

0800fdd8 <__malloc_lock>:
 800fdd8:	4801      	ldr	r0, [pc, #4]	; (800fde0 <__malloc_lock+0x8>)
 800fdda:	f7fe bfbc 	b.w	800ed56 <__retarget_lock_acquire_recursive>
 800fdde:	bf00      	nop
 800fde0:	20007ce4 	.word	0x20007ce4

0800fde4 <__malloc_unlock>:
 800fde4:	4801      	ldr	r0, [pc, #4]	; (800fdec <__malloc_unlock+0x8>)
 800fde6:	f7fe bfb7 	b.w	800ed58 <__retarget_lock_release_recursive>
 800fdea:	bf00      	nop
 800fdec:	20007ce4 	.word	0x20007ce4

0800fdf0 <_realloc_r>:
 800fdf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdf4:	4680      	mov	r8, r0
 800fdf6:	4614      	mov	r4, r2
 800fdf8:	460e      	mov	r6, r1
 800fdfa:	b921      	cbnz	r1, 800fe06 <_realloc_r+0x16>
 800fdfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe00:	4611      	mov	r1, r2
 800fe02:	f7ff b835 	b.w	800ee70 <_malloc_r>
 800fe06:	b92a      	cbnz	r2, 800fe14 <_realloc_r+0x24>
 800fe08:	f7fe ffc6 	bl	800ed98 <_free_r>
 800fe0c:	4625      	mov	r5, r4
 800fe0e:	4628      	mov	r0, r5
 800fe10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe14:	f000 f9aa 	bl	801016c <_malloc_usable_size_r>
 800fe18:	4284      	cmp	r4, r0
 800fe1a:	4607      	mov	r7, r0
 800fe1c:	d802      	bhi.n	800fe24 <_realloc_r+0x34>
 800fe1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe22:	d812      	bhi.n	800fe4a <_realloc_r+0x5a>
 800fe24:	4621      	mov	r1, r4
 800fe26:	4640      	mov	r0, r8
 800fe28:	f7ff f822 	bl	800ee70 <_malloc_r>
 800fe2c:	4605      	mov	r5, r0
 800fe2e:	2800      	cmp	r0, #0
 800fe30:	d0ed      	beq.n	800fe0e <_realloc_r+0x1e>
 800fe32:	42bc      	cmp	r4, r7
 800fe34:	4622      	mov	r2, r4
 800fe36:	4631      	mov	r1, r6
 800fe38:	bf28      	it	cs
 800fe3a:	463a      	movcs	r2, r7
 800fe3c:	f7fe ff96 	bl	800ed6c <memcpy>
 800fe40:	4631      	mov	r1, r6
 800fe42:	4640      	mov	r0, r8
 800fe44:	f7fe ffa8 	bl	800ed98 <_free_r>
 800fe48:	e7e1      	b.n	800fe0e <_realloc_r+0x1e>
 800fe4a:	4635      	mov	r5, r6
 800fe4c:	e7df      	b.n	800fe0e <_realloc_r+0x1e>

0800fe4e <__ssputs_r>:
 800fe4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe52:	688e      	ldr	r6, [r1, #8]
 800fe54:	429e      	cmp	r6, r3
 800fe56:	4682      	mov	sl, r0
 800fe58:	460c      	mov	r4, r1
 800fe5a:	4690      	mov	r8, r2
 800fe5c:	461f      	mov	r7, r3
 800fe5e:	d838      	bhi.n	800fed2 <__ssputs_r+0x84>
 800fe60:	898a      	ldrh	r2, [r1, #12]
 800fe62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe66:	d032      	beq.n	800fece <__ssputs_r+0x80>
 800fe68:	6825      	ldr	r5, [r4, #0]
 800fe6a:	6909      	ldr	r1, [r1, #16]
 800fe6c:	eba5 0901 	sub.w	r9, r5, r1
 800fe70:	6965      	ldr	r5, [r4, #20]
 800fe72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fe7a:	3301      	adds	r3, #1
 800fe7c:	444b      	add	r3, r9
 800fe7e:	106d      	asrs	r5, r5, #1
 800fe80:	429d      	cmp	r5, r3
 800fe82:	bf38      	it	cc
 800fe84:	461d      	movcc	r5, r3
 800fe86:	0553      	lsls	r3, r2, #21
 800fe88:	d531      	bpl.n	800feee <__ssputs_r+0xa0>
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	f7fe fff0 	bl	800ee70 <_malloc_r>
 800fe90:	4606      	mov	r6, r0
 800fe92:	b950      	cbnz	r0, 800feaa <__ssputs_r+0x5c>
 800fe94:	230c      	movs	r3, #12
 800fe96:	f8ca 3000 	str.w	r3, [sl]
 800fe9a:	89a3      	ldrh	r3, [r4, #12]
 800fe9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fea0:	81a3      	strh	r3, [r4, #12]
 800fea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feaa:	6921      	ldr	r1, [r4, #16]
 800feac:	464a      	mov	r2, r9
 800feae:	f7fe ff5d 	bl	800ed6c <memcpy>
 800feb2:	89a3      	ldrh	r3, [r4, #12]
 800feb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800feb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800febc:	81a3      	strh	r3, [r4, #12]
 800febe:	6126      	str	r6, [r4, #16]
 800fec0:	6165      	str	r5, [r4, #20]
 800fec2:	444e      	add	r6, r9
 800fec4:	eba5 0509 	sub.w	r5, r5, r9
 800fec8:	6026      	str	r6, [r4, #0]
 800feca:	60a5      	str	r5, [r4, #8]
 800fecc:	463e      	mov	r6, r7
 800fece:	42be      	cmp	r6, r7
 800fed0:	d900      	bls.n	800fed4 <__ssputs_r+0x86>
 800fed2:	463e      	mov	r6, r7
 800fed4:	6820      	ldr	r0, [r4, #0]
 800fed6:	4632      	mov	r2, r6
 800fed8:	4641      	mov	r1, r8
 800feda:	f7ff ff63 	bl	800fda4 <memmove>
 800fede:	68a3      	ldr	r3, [r4, #8]
 800fee0:	1b9b      	subs	r3, r3, r6
 800fee2:	60a3      	str	r3, [r4, #8]
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	4433      	add	r3, r6
 800fee8:	6023      	str	r3, [r4, #0]
 800feea:	2000      	movs	r0, #0
 800feec:	e7db      	b.n	800fea6 <__ssputs_r+0x58>
 800feee:	462a      	mov	r2, r5
 800fef0:	f7ff ff7e 	bl	800fdf0 <_realloc_r>
 800fef4:	4606      	mov	r6, r0
 800fef6:	2800      	cmp	r0, #0
 800fef8:	d1e1      	bne.n	800febe <__ssputs_r+0x70>
 800fefa:	6921      	ldr	r1, [r4, #16]
 800fefc:	4650      	mov	r0, sl
 800fefe:	f7fe ff4b 	bl	800ed98 <_free_r>
 800ff02:	e7c7      	b.n	800fe94 <__ssputs_r+0x46>

0800ff04 <_svfiprintf_r>:
 800ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff08:	4698      	mov	r8, r3
 800ff0a:	898b      	ldrh	r3, [r1, #12]
 800ff0c:	061b      	lsls	r3, r3, #24
 800ff0e:	b09d      	sub	sp, #116	; 0x74
 800ff10:	4607      	mov	r7, r0
 800ff12:	460d      	mov	r5, r1
 800ff14:	4614      	mov	r4, r2
 800ff16:	d50e      	bpl.n	800ff36 <_svfiprintf_r+0x32>
 800ff18:	690b      	ldr	r3, [r1, #16]
 800ff1a:	b963      	cbnz	r3, 800ff36 <_svfiprintf_r+0x32>
 800ff1c:	2140      	movs	r1, #64	; 0x40
 800ff1e:	f7fe ffa7 	bl	800ee70 <_malloc_r>
 800ff22:	6028      	str	r0, [r5, #0]
 800ff24:	6128      	str	r0, [r5, #16]
 800ff26:	b920      	cbnz	r0, 800ff32 <_svfiprintf_r+0x2e>
 800ff28:	230c      	movs	r3, #12
 800ff2a:	603b      	str	r3, [r7, #0]
 800ff2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff30:	e0d1      	b.n	80100d6 <_svfiprintf_r+0x1d2>
 800ff32:	2340      	movs	r3, #64	; 0x40
 800ff34:	616b      	str	r3, [r5, #20]
 800ff36:	2300      	movs	r3, #0
 800ff38:	9309      	str	r3, [sp, #36]	; 0x24
 800ff3a:	2320      	movs	r3, #32
 800ff3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ff44:	2330      	movs	r3, #48	; 0x30
 800ff46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80100f0 <_svfiprintf_r+0x1ec>
 800ff4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff4e:	f04f 0901 	mov.w	r9, #1
 800ff52:	4623      	mov	r3, r4
 800ff54:	469a      	mov	sl, r3
 800ff56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff5a:	b10a      	cbz	r2, 800ff60 <_svfiprintf_r+0x5c>
 800ff5c:	2a25      	cmp	r2, #37	; 0x25
 800ff5e:	d1f9      	bne.n	800ff54 <_svfiprintf_r+0x50>
 800ff60:	ebba 0b04 	subs.w	fp, sl, r4
 800ff64:	d00b      	beq.n	800ff7e <_svfiprintf_r+0x7a>
 800ff66:	465b      	mov	r3, fp
 800ff68:	4622      	mov	r2, r4
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	4638      	mov	r0, r7
 800ff6e:	f7ff ff6e 	bl	800fe4e <__ssputs_r>
 800ff72:	3001      	adds	r0, #1
 800ff74:	f000 80aa 	beq.w	80100cc <_svfiprintf_r+0x1c8>
 800ff78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ff7a:	445a      	add	r2, fp
 800ff7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ff7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	f000 80a2 	beq.w	80100cc <_svfiprintf_r+0x1c8>
 800ff88:	2300      	movs	r3, #0
 800ff8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff92:	f10a 0a01 	add.w	sl, sl, #1
 800ff96:	9304      	str	r3, [sp, #16]
 800ff98:	9307      	str	r3, [sp, #28]
 800ff9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff9e:	931a      	str	r3, [sp, #104]	; 0x68
 800ffa0:	4654      	mov	r4, sl
 800ffa2:	2205      	movs	r2, #5
 800ffa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffa8:	4851      	ldr	r0, [pc, #324]	; (80100f0 <_svfiprintf_r+0x1ec>)
 800ffaa:	f7f0 f919 	bl	80001e0 <memchr>
 800ffae:	9a04      	ldr	r2, [sp, #16]
 800ffb0:	b9d8      	cbnz	r0, 800ffea <_svfiprintf_r+0xe6>
 800ffb2:	06d0      	lsls	r0, r2, #27
 800ffb4:	bf44      	itt	mi
 800ffb6:	2320      	movmi	r3, #32
 800ffb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffbc:	0711      	lsls	r1, r2, #28
 800ffbe:	bf44      	itt	mi
 800ffc0:	232b      	movmi	r3, #43	; 0x2b
 800ffc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ffc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ffca:	2b2a      	cmp	r3, #42	; 0x2a
 800ffcc:	d015      	beq.n	800fffa <_svfiprintf_r+0xf6>
 800ffce:	9a07      	ldr	r2, [sp, #28]
 800ffd0:	4654      	mov	r4, sl
 800ffd2:	2000      	movs	r0, #0
 800ffd4:	f04f 0c0a 	mov.w	ip, #10
 800ffd8:	4621      	mov	r1, r4
 800ffda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffde:	3b30      	subs	r3, #48	; 0x30
 800ffe0:	2b09      	cmp	r3, #9
 800ffe2:	d94e      	bls.n	8010082 <_svfiprintf_r+0x17e>
 800ffe4:	b1b0      	cbz	r0, 8010014 <_svfiprintf_r+0x110>
 800ffe6:	9207      	str	r2, [sp, #28]
 800ffe8:	e014      	b.n	8010014 <_svfiprintf_r+0x110>
 800ffea:	eba0 0308 	sub.w	r3, r0, r8
 800ffee:	fa09 f303 	lsl.w	r3, r9, r3
 800fff2:	4313      	orrs	r3, r2
 800fff4:	9304      	str	r3, [sp, #16]
 800fff6:	46a2      	mov	sl, r4
 800fff8:	e7d2      	b.n	800ffa0 <_svfiprintf_r+0x9c>
 800fffa:	9b03      	ldr	r3, [sp, #12]
 800fffc:	1d19      	adds	r1, r3, #4
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	9103      	str	r1, [sp, #12]
 8010002:	2b00      	cmp	r3, #0
 8010004:	bfbb      	ittet	lt
 8010006:	425b      	neglt	r3, r3
 8010008:	f042 0202 	orrlt.w	r2, r2, #2
 801000c:	9307      	strge	r3, [sp, #28]
 801000e:	9307      	strlt	r3, [sp, #28]
 8010010:	bfb8      	it	lt
 8010012:	9204      	strlt	r2, [sp, #16]
 8010014:	7823      	ldrb	r3, [r4, #0]
 8010016:	2b2e      	cmp	r3, #46	; 0x2e
 8010018:	d10c      	bne.n	8010034 <_svfiprintf_r+0x130>
 801001a:	7863      	ldrb	r3, [r4, #1]
 801001c:	2b2a      	cmp	r3, #42	; 0x2a
 801001e:	d135      	bne.n	801008c <_svfiprintf_r+0x188>
 8010020:	9b03      	ldr	r3, [sp, #12]
 8010022:	1d1a      	adds	r2, r3, #4
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	9203      	str	r2, [sp, #12]
 8010028:	2b00      	cmp	r3, #0
 801002a:	bfb8      	it	lt
 801002c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010030:	3402      	adds	r4, #2
 8010032:	9305      	str	r3, [sp, #20]
 8010034:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010100 <_svfiprintf_r+0x1fc>
 8010038:	7821      	ldrb	r1, [r4, #0]
 801003a:	2203      	movs	r2, #3
 801003c:	4650      	mov	r0, sl
 801003e:	f7f0 f8cf 	bl	80001e0 <memchr>
 8010042:	b140      	cbz	r0, 8010056 <_svfiprintf_r+0x152>
 8010044:	2340      	movs	r3, #64	; 0x40
 8010046:	eba0 000a 	sub.w	r0, r0, sl
 801004a:	fa03 f000 	lsl.w	r0, r3, r0
 801004e:	9b04      	ldr	r3, [sp, #16]
 8010050:	4303      	orrs	r3, r0
 8010052:	3401      	adds	r4, #1
 8010054:	9304      	str	r3, [sp, #16]
 8010056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801005a:	4826      	ldr	r0, [pc, #152]	; (80100f4 <_svfiprintf_r+0x1f0>)
 801005c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010060:	2206      	movs	r2, #6
 8010062:	f7f0 f8bd 	bl	80001e0 <memchr>
 8010066:	2800      	cmp	r0, #0
 8010068:	d038      	beq.n	80100dc <_svfiprintf_r+0x1d8>
 801006a:	4b23      	ldr	r3, [pc, #140]	; (80100f8 <_svfiprintf_r+0x1f4>)
 801006c:	bb1b      	cbnz	r3, 80100b6 <_svfiprintf_r+0x1b2>
 801006e:	9b03      	ldr	r3, [sp, #12]
 8010070:	3307      	adds	r3, #7
 8010072:	f023 0307 	bic.w	r3, r3, #7
 8010076:	3308      	adds	r3, #8
 8010078:	9303      	str	r3, [sp, #12]
 801007a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801007c:	4433      	add	r3, r6
 801007e:	9309      	str	r3, [sp, #36]	; 0x24
 8010080:	e767      	b.n	800ff52 <_svfiprintf_r+0x4e>
 8010082:	fb0c 3202 	mla	r2, ip, r2, r3
 8010086:	460c      	mov	r4, r1
 8010088:	2001      	movs	r0, #1
 801008a:	e7a5      	b.n	800ffd8 <_svfiprintf_r+0xd4>
 801008c:	2300      	movs	r3, #0
 801008e:	3401      	adds	r4, #1
 8010090:	9305      	str	r3, [sp, #20]
 8010092:	4619      	mov	r1, r3
 8010094:	f04f 0c0a 	mov.w	ip, #10
 8010098:	4620      	mov	r0, r4
 801009a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801009e:	3a30      	subs	r2, #48	; 0x30
 80100a0:	2a09      	cmp	r2, #9
 80100a2:	d903      	bls.n	80100ac <_svfiprintf_r+0x1a8>
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d0c5      	beq.n	8010034 <_svfiprintf_r+0x130>
 80100a8:	9105      	str	r1, [sp, #20]
 80100aa:	e7c3      	b.n	8010034 <_svfiprintf_r+0x130>
 80100ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80100b0:	4604      	mov	r4, r0
 80100b2:	2301      	movs	r3, #1
 80100b4:	e7f0      	b.n	8010098 <_svfiprintf_r+0x194>
 80100b6:	ab03      	add	r3, sp, #12
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	462a      	mov	r2, r5
 80100bc:	4b0f      	ldr	r3, [pc, #60]	; (80100fc <_svfiprintf_r+0x1f8>)
 80100be:	a904      	add	r1, sp, #16
 80100c0:	4638      	mov	r0, r7
 80100c2:	f3af 8000 	nop.w
 80100c6:	1c42      	adds	r2, r0, #1
 80100c8:	4606      	mov	r6, r0
 80100ca:	d1d6      	bne.n	801007a <_svfiprintf_r+0x176>
 80100cc:	89ab      	ldrh	r3, [r5, #12]
 80100ce:	065b      	lsls	r3, r3, #25
 80100d0:	f53f af2c 	bmi.w	800ff2c <_svfiprintf_r+0x28>
 80100d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100d6:	b01d      	add	sp, #116	; 0x74
 80100d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100dc:	ab03      	add	r3, sp, #12
 80100de:	9300      	str	r3, [sp, #0]
 80100e0:	462a      	mov	r2, r5
 80100e2:	4b06      	ldr	r3, [pc, #24]	; (80100fc <_svfiprintf_r+0x1f8>)
 80100e4:	a904      	add	r1, sp, #16
 80100e6:	4638      	mov	r0, r7
 80100e8:	f7ff f8fe 	bl	800f2e8 <_printf_i>
 80100ec:	e7eb      	b.n	80100c6 <_svfiprintf_r+0x1c2>
 80100ee:	bf00      	nop
 80100f0:	08013bc8 	.word	0x08013bc8
 80100f4:	08013bd2 	.word	0x08013bd2
 80100f8:	00000000 	.word	0x00000000
 80100fc:	0800fe4f 	.word	0x0800fe4f
 8010100:	08013bce 	.word	0x08013bce

08010104 <_read_r>:
 8010104:	b538      	push	{r3, r4, r5, lr}
 8010106:	4d07      	ldr	r5, [pc, #28]	; (8010124 <_read_r+0x20>)
 8010108:	4604      	mov	r4, r0
 801010a:	4608      	mov	r0, r1
 801010c:	4611      	mov	r1, r2
 801010e:	2200      	movs	r2, #0
 8010110:	602a      	str	r2, [r5, #0]
 8010112:	461a      	mov	r2, r3
 8010114:	f7f4 ffc4 	bl	80050a0 <_read>
 8010118:	1c43      	adds	r3, r0, #1
 801011a:	d102      	bne.n	8010122 <_read_r+0x1e>
 801011c:	682b      	ldr	r3, [r5, #0]
 801011e:	b103      	cbz	r3, 8010122 <_read_r+0x1e>
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	bd38      	pop	{r3, r4, r5, pc}
 8010124:	20007cf0 	.word	0x20007cf0

08010128 <_fstat_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d07      	ldr	r5, [pc, #28]	; (8010148 <_fstat_r+0x20>)
 801012c:	2300      	movs	r3, #0
 801012e:	4604      	mov	r4, r0
 8010130:	4608      	mov	r0, r1
 8010132:	4611      	mov	r1, r2
 8010134:	602b      	str	r3, [r5, #0]
 8010136:	f7f4 ffdc 	bl	80050f2 <_fstat>
 801013a:	1c43      	adds	r3, r0, #1
 801013c:	d102      	bne.n	8010144 <_fstat_r+0x1c>
 801013e:	682b      	ldr	r3, [r5, #0]
 8010140:	b103      	cbz	r3, 8010144 <_fstat_r+0x1c>
 8010142:	6023      	str	r3, [r4, #0]
 8010144:	bd38      	pop	{r3, r4, r5, pc}
 8010146:	bf00      	nop
 8010148:	20007cf0 	.word	0x20007cf0

0801014c <_isatty_r>:
 801014c:	b538      	push	{r3, r4, r5, lr}
 801014e:	4d06      	ldr	r5, [pc, #24]	; (8010168 <_isatty_r+0x1c>)
 8010150:	2300      	movs	r3, #0
 8010152:	4604      	mov	r4, r0
 8010154:	4608      	mov	r0, r1
 8010156:	602b      	str	r3, [r5, #0]
 8010158:	f7f4 ffdb 	bl	8005112 <_isatty>
 801015c:	1c43      	adds	r3, r0, #1
 801015e:	d102      	bne.n	8010166 <_isatty_r+0x1a>
 8010160:	682b      	ldr	r3, [r5, #0]
 8010162:	b103      	cbz	r3, 8010166 <_isatty_r+0x1a>
 8010164:	6023      	str	r3, [r4, #0]
 8010166:	bd38      	pop	{r3, r4, r5, pc}
 8010168:	20007cf0 	.word	0x20007cf0

0801016c <_malloc_usable_size_r>:
 801016c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010170:	1f18      	subs	r0, r3, #4
 8010172:	2b00      	cmp	r3, #0
 8010174:	bfbc      	itt	lt
 8010176:	580b      	ldrlt	r3, [r1, r0]
 8010178:	18c0      	addlt	r0, r0, r3
 801017a:	4770      	bx	lr

0801017c <_init>:
 801017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801017e:	bf00      	nop
 8010180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010182:	bc08      	pop	{r3}
 8010184:	469e      	mov	lr, r3
 8010186:	4770      	bx	lr

08010188 <_fini>:
 8010188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801018a:	bf00      	nop
 801018c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801018e:	bc08      	pop	{r3}
 8010190:	469e      	mov	lr, r3
 8010192:	4770      	bx	lr
