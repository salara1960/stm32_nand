
stm32_nand.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000281c  0800cbf4  0800cbf4  0001cbf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f410  0800f410  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800f410  0800f410  0001f410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f418  0800f418  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f418  0800f418  0001f418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f41c  0800f41c  0001f41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  0800f420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00006900  20000100  20000100  00020100  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20006a00  20006a00  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002392d  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004279  00000000  00000000  00043a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00047cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005dc6  00000000  00000000  00049808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fe45  00000000  00000000  0004f5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3ee6  00000000  00000000  0006f413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001532f9  2**0
                  CONTENTS, READONLY
 20 .debug_ranges 000019c0  00000000  00000000  00153350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c44  00000000  00000000  00154d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbdc 	.word	0x0800cbdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800cbdc 	.word	0x0800cbdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_ldivmod>:
 800088c:	b97b      	cbnz	r3, 80008ae <__aeabi_ldivmod+0x22>
 800088e:	b972      	cbnz	r2, 80008ae <__aeabi_ldivmod+0x22>
 8000890:	2900      	cmp	r1, #0
 8000892:	bfbe      	ittt	lt
 8000894:	2000      	movlt	r0, #0
 8000896:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800089a:	e006      	blt.n	80008aa <__aeabi_ldivmod+0x1e>
 800089c:	bf08      	it	eq
 800089e:	2800      	cmpeq	r0, #0
 80008a0:	bf1c      	itt	ne
 80008a2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80008a6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80008aa:	f000 b9bf 	b.w	8000c2c <__aeabi_idiv0>
 80008ae:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b6:	2900      	cmp	r1, #0
 80008b8:	db09      	blt.n	80008ce <__aeabi_ldivmod+0x42>
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db1a      	blt.n	80008f4 <__aeabi_ldivmod+0x68>
 80008be:	f000 f84d 	bl	800095c <__udivmoddi4>
 80008c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008ca:	b004      	add	sp, #16
 80008cc:	4770      	bx	lr
 80008ce:	4240      	negs	r0, r0
 80008d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	db1b      	blt.n	8000910 <__aeabi_ldivmod+0x84>
 80008d8:	f000 f840 	bl	800095c <__udivmoddi4>
 80008dc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e4:	b004      	add	sp, #16
 80008e6:	4240      	negs	r0, r0
 80008e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008ec:	4252      	negs	r2, r2
 80008ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008f2:	4770      	bx	lr
 80008f4:	4252      	negs	r2, r2
 80008f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80008fa:	f000 f82f 	bl	800095c <__udivmoddi4>
 80008fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000902:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000906:	b004      	add	sp, #16
 8000908:	4240      	negs	r0, r0
 800090a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800090e:	4770      	bx	lr
 8000910:	4252      	negs	r2, r2
 8000912:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000916:	f000 f821 	bl	800095c <__udivmoddi4>
 800091a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800091e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000922:	b004      	add	sp, #16
 8000924:	4252      	negs	r2, r2
 8000926:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800092a:	4770      	bx	lr

0800092c <__aeabi_uldivmod>:
 800092c:	b953      	cbnz	r3, 8000944 <__aeabi_uldivmod+0x18>
 800092e:	b94a      	cbnz	r2, 8000944 <__aeabi_uldivmod+0x18>
 8000930:	2900      	cmp	r1, #0
 8000932:	bf08      	it	eq
 8000934:	2800      	cmpeq	r0, #0
 8000936:	bf1c      	itt	ne
 8000938:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800093c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000940:	f000 b974 	b.w	8000c2c <__aeabi_idiv0>
 8000944:	f1ad 0c08 	sub.w	ip, sp, #8
 8000948:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800094c:	f000 f806 	bl	800095c <__udivmoddi4>
 8000950:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000958:	b004      	add	sp, #16
 800095a:	4770      	bx	lr

0800095c <__udivmoddi4>:
 800095c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000960:	9d08      	ldr	r5, [sp, #32]
 8000962:	4604      	mov	r4, r0
 8000964:	468e      	mov	lr, r1
 8000966:	2b00      	cmp	r3, #0
 8000968:	d14d      	bne.n	8000a06 <__udivmoddi4+0xaa>
 800096a:	428a      	cmp	r2, r1
 800096c:	4694      	mov	ip, r2
 800096e:	d969      	bls.n	8000a44 <__udivmoddi4+0xe8>
 8000970:	fab2 f282 	clz	r2, r2
 8000974:	b152      	cbz	r2, 800098c <__udivmoddi4+0x30>
 8000976:	fa01 f302 	lsl.w	r3, r1, r2
 800097a:	f1c2 0120 	rsb	r1, r2, #32
 800097e:	fa20 f101 	lsr.w	r1, r0, r1
 8000982:	fa0c fc02 	lsl.w	ip, ip, r2
 8000986:	ea41 0e03 	orr.w	lr, r1, r3
 800098a:	4094      	lsls	r4, r2
 800098c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000990:	0c21      	lsrs	r1, r4, #16
 8000992:	fbbe f6f8 	udiv	r6, lr, r8
 8000996:	fa1f f78c 	uxth.w	r7, ip
 800099a:	fb08 e316 	mls	r3, r8, r6, lr
 800099e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80009a2:	fb06 f107 	mul.w	r1, r6, r7
 80009a6:	4299      	cmp	r1, r3
 80009a8:	d90a      	bls.n	80009c0 <__udivmoddi4+0x64>
 80009aa:	eb1c 0303 	adds.w	r3, ip, r3
 80009ae:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80009b2:	f080 811f 	bcs.w	8000bf4 <__udivmoddi4+0x298>
 80009b6:	4299      	cmp	r1, r3
 80009b8:	f240 811c 	bls.w	8000bf4 <__udivmoddi4+0x298>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	1a5b      	subs	r3, r3, r1
 80009c2:	b2a4      	uxth	r4, r4
 80009c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009c8:	fb08 3310 	mls	r3, r8, r0, r3
 80009cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009d0:	fb00 f707 	mul.w	r7, r0, r7
 80009d4:	42a7      	cmp	r7, r4
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x92>
 80009d8:	eb1c 0404 	adds.w	r4, ip, r4
 80009dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80009e0:	f080 810a 	bcs.w	8000bf8 <__udivmoddi4+0x29c>
 80009e4:	42a7      	cmp	r7, r4
 80009e6:	f240 8107 	bls.w	8000bf8 <__udivmoddi4+0x29c>
 80009ea:	4464      	add	r4, ip
 80009ec:	3802      	subs	r0, #2
 80009ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009f2:	1be4      	subs	r4, r4, r7
 80009f4:	2600      	movs	r6, #0
 80009f6:	b11d      	cbz	r5, 8000a00 <__udivmoddi4+0xa4>
 80009f8:	40d4      	lsrs	r4, r2
 80009fa:	2300      	movs	r3, #0
 80009fc:	e9c5 4300 	strd	r4, r3, [r5]
 8000a00:	4631      	mov	r1, r6
 8000a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d909      	bls.n	8000a1e <__udivmoddi4+0xc2>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	f000 80ef 	beq.w	8000bee <__udivmoddi4+0x292>
 8000a10:	2600      	movs	r6, #0
 8000a12:	e9c5 0100 	strd	r0, r1, [r5]
 8000a16:	4630      	mov	r0, r6
 8000a18:	4631      	mov	r1, r6
 8000a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a1e:	fab3 f683 	clz	r6, r3
 8000a22:	2e00      	cmp	r6, #0
 8000a24:	d14a      	bne.n	8000abc <__udivmoddi4+0x160>
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d302      	bcc.n	8000a30 <__udivmoddi4+0xd4>
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	f200 80f9 	bhi.w	8000c22 <__udivmoddi4+0x2c6>
 8000a30:	1a84      	subs	r4, r0, r2
 8000a32:	eb61 0303 	sbc.w	r3, r1, r3
 8000a36:	2001      	movs	r0, #1
 8000a38:	469e      	mov	lr, r3
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	d0e0      	beq.n	8000a00 <__udivmoddi4+0xa4>
 8000a3e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a42:	e7dd      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000a44:	b902      	cbnz	r2, 8000a48 <__udivmoddi4+0xec>
 8000a46:	deff      	udf	#255	; 0xff
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	f040 8092 	bne.w	8000b76 <__udivmoddi4+0x21a>
 8000a52:	eba1 010c 	sub.w	r1, r1, ip
 8000a56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a5a:	fa1f fe8c 	uxth.w	lr, ip
 8000a5e:	2601      	movs	r6, #1
 8000a60:	0c20      	lsrs	r0, r4, #16
 8000a62:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a66:	fb07 1113 	mls	r1, r7, r3, r1
 8000a6a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a6e:	fb0e f003 	mul.w	r0, lr, r3
 8000a72:	4288      	cmp	r0, r1
 8000a74:	d908      	bls.n	8000a88 <__udivmoddi4+0x12c>
 8000a76:	eb1c 0101 	adds.w	r1, ip, r1
 8000a7a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000a7e:	d202      	bcs.n	8000a86 <__udivmoddi4+0x12a>
 8000a80:	4288      	cmp	r0, r1
 8000a82:	f200 80cb 	bhi.w	8000c1c <__udivmoddi4+0x2c0>
 8000a86:	4643      	mov	r3, r8
 8000a88:	1a09      	subs	r1, r1, r0
 8000a8a:	b2a4      	uxth	r4, r4
 8000a8c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a90:	fb07 1110 	mls	r1, r7, r0, r1
 8000a94:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a98:	fb0e fe00 	mul.w	lr, lr, r0
 8000a9c:	45a6      	cmp	lr, r4
 8000a9e:	d908      	bls.n	8000ab2 <__udivmoddi4+0x156>
 8000aa0:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000aa8:	d202      	bcs.n	8000ab0 <__udivmoddi4+0x154>
 8000aaa:	45a6      	cmp	lr, r4
 8000aac:	f200 80bb 	bhi.w	8000c26 <__udivmoddi4+0x2ca>
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	eba4 040e 	sub.w	r4, r4, lr
 8000ab6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000aba:	e79c      	b.n	80009f6 <__udivmoddi4+0x9a>
 8000abc:	f1c6 0720 	rsb	r7, r6, #32
 8000ac0:	40b3      	lsls	r3, r6
 8000ac2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ac6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aca:	fa20 f407 	lsr.w	r4, r0, r7
 8000ace:	fa01 f306 	lsl.w	r3, r1, r6
 8000ad2:	431c      	orrs	r4, r3
 8000ad4:	40f9      	lsrs	r1, r7
 8000ad6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ada:	fa00 f306 	lsl.w	r3, r0, r6
 8000ade:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ae2:	0c20      	lsrs	r0, r4, #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fb09 1118 	mls	r1, r9, r8, r1
 8000aec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000af0:	fb08 f00e 	mul.w	r0, r8, lr
 8000af4:	4288      	cmp	r0, r1
 8000af6:	fa02 f206 	lsl.w	r2, r2, r6
 8000afa:	d90b      	bls.n	8000b14 <__udivmoddi4+0x1b8>
 8000afc:	eb1c 0101 	adds.w	r1, ip, r1
 8000b00:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000b04:	f080 8088 	bcs.w	8000c18 <__udivmoddi4+0x2bc>
 8000b08:	4288      	cmp	r0, r1
 8000b0a:	f240 8085 	bls.w	8000c18 <__udivmoddi4+0x2bc>
 8000b0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1a09      	subs	r1, r1, r0
 8000b16:	b2a4      	uxth	r4, r4
 8000b18:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b1c:	fb09 1110 	mls	r1, r9, r0, r1
 8000b20:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b24:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b28:	458e      	cmp	lr, r1
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x1e2>
 8000b2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b30:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000b34:	d26c      	bcs.n	8000c10 <__udivmoddi4+0x2b4>
 8000b36:	458e      	cmp	lr, r1
 8000b38:	d96a      	bls.n	8000c10 <__udivmoddi4+0x2b4>
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	4461      	add	r1, ip
 8000b3e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b42:	fba0 9402 	umull	r9, r4, r0, r2
 8000b46:	eba1 010e 	sub.w	r1, r1, lr
 8000b4a:	42a1      	cmp	r1, r4
 8000b4c:	46c8      	mov	r8, r9
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	d356      	bcc.n	8000c00 <__udivmoddi4+0x2a4>
 8000b52:	d053      	beq.n	8000bfc <__udivmoddi4+0x2a0>
 8000b54:	b15d      	cbz	r5, 8000b6e <__udivmoddi4+0x212>
 8000b56:	ebb3 0208 	subs.w	r2, r3, r8
 8000b5a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b5e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b62:	fa22 f306 	lsr.w	r3, r2, r6
 8000b66:	40f1      	lsrs	r1, r6
 8000b68:	431f      	orrs	r7, r3
 8000b6a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b6e:	2600      	movs	r6, #0
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b80:	fa21 f303 	lsr.w	r3, r1, r3
 8000b84:	4091      	lsls	r1, r2
 8000b86:	4301      	orrs	r1, r0
 8000b88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8c:	fa1f fe8c 	uxth.w	lr, ip
 8000b90:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b94:	fb07 3610 	mls	r6, r7, r0, r3
 8000b98:	0c0b      	lsrs	r3, r1, #16
 8000b9a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b9e:	fb00 f60e 	mul.w	r6, r0, lr
 8000ba2:	429e      	cmp	r6, r3
 8000ba4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x260>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000bb2:	d22f      	bcs.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb4:	429e      	cmp	r6, r3
 8000bb6:	d92d      	bls.n	8000c14 <__udivmoddi4+0x2b8>
 8000bb8:	3802      	subs	r0, #2
 8000bba:	4463      	add	r3, ip
 8000bbc:	1b9b      	subs	r3, r3, r6
 8000bbe:	b289      	uxth	r1, r1
 8000bc0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000bc4:	fb07 3316 	mls	r3, r7, r6, r3
 8000bc8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bcc:	fb06 f30e 	mul.w	r3, r6, lr
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d908      	bls.n	8000be6 <__udivmoddi4+0x28a>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000bdc:	d216      	bcs.n	8000c0c <__udivmoddi4+0x2b0>
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d914      	bls.n	8000c0c <__udivmoddi4+0x2b0>
 8000be2:	3e02      	subs	r6, #2
 8000be4:	4461      	add	r1, ip
 8000be6:	1ac9      	subs	r1, r1, r3
 8000be8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bec:	e738      	b.n	8000a60 <__udivmoddi4+0x104>
 8000bee:	462e      	mov	r6, r5
 8000bf0:	4628      	mov	r0, r5
 8000bf2:	e705      	b.n	8000a00 <__udivmoddi4+0xa4>
 8000bf4:	4606      	mov	r6, r0
 8000bf6:	e6e3      	b.n	80009c0 <__udivmoddi4+0x64>
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	e6f8      	b.n	80009ee <__udivmoddi4+0x92>
 8000bfc:	454b      	cmp	r3, r9
 8000bfe:	d2a9      	bcs.n	8000b54 <__udivmoddi4+0x1f8>
 8000c00:	ebb9 0802 	subs.w	r8, r9, r2
 8000c04:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c08:	3801      	subs	r0, #1
 8000c0a:	e7a3      	b.n	8000b54 <__udivmoddi4+0x1f8>
 8000c0c:	4646      	mov	r6, r8
 8000c0e:	e7ea      	b.n	8000be6 <__udivmoddi4+0x28a>
 8000c10:	4620      	mov	r0, r4
 8000c12:	e794      	b.n	8000b3e <__udivmoddi4+0x1e2>
 8000c14:	4640      	mov	r0, r8
 8000c16:	e7d1      	b.n	8000bbc <__udivmoddi4+0x260>
 8000c18:	46d0      	mov	r8, sl
 8000c1a:	e77b      	b.n	8000b14 <__udivmoddi4+0x1b8>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	4461      	add	r1, ip
 8000c20:	e732      	b.n	8000a88 <__udivmoddi4+0x12c>
 8000c22:	4630      	mov	r0, r6
 8000c24:	e709      	b.n	8000a3a <__udivmoddi4+0xde>
 8000c26:	4464      	add	r4, ip
 8000c28:	3802      	subs	r0, #2
 8000c2a:	e742      	b.n	8000ab2 <__udivmoddi4+0x156>

08000c2c <__aeabi_idiv0>:
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop

08000c30 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c34:	f3bf 8f4f 	dsb	sy
}
 8000c38:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000c42:	4904      	ldr	r1, [pc, #16]	; (8000c54 <__NVIC_SystemReset+0x24>)
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <__NVIC_SystemReset+0x28>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c4a:	f3bf 8f4f 	dsb	sy
}
 8000c4e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <__NVIC_SystemReset+0x20>
 8000c54:	e000ed00 	.word	0xe000ed00
 8000c58:	05fa0004 	.word	0x05fa0004

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f003 f83b 	bl	8003cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f887 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f000 fa2b 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c6e:	f000 f9f3 	bl	8001058 <MX_DMA_Init>
  MX_TIM2_Init();
 8000c72:	f000 f97b 	bl	8000f6c <MX_TIM2_Init>
  MX_RTC_Init();
 8000c76:	f000 f8e9 	bl	8000e4c <MX_RTC_Init>
  MX_FSMC_Init();
 8000c7a:	f000 fac9 	bl	8001210 <MX_FSMC_Init>
  MX_USART3_UART_Init();
 8000c7e:	f000 f9c1 	bl	8001004 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f93d 	bl	8000f00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  //stx = (char *)calloc(1, MAX_UART_BUF);
  //if (!stx) devError |= devMEM;

  for (uint8_t i = 0; i < 4; i++) {
 8000c86:	2300      	movs	r3, #0
 8000c88:	71fb      	strb	r3, [r7, #7]
 8000c8a:	e01e      	b.n	8000cca <main+0x6e>
	  HAL_Delay(150);
 8000c8c:	2096      	movs	r0, #150	; 0x96
 8000c8e:	f003 f867 	bl	8003d60 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2180      	movs	r1, #128	; 0x80
 8000c96:	482a      	ldr	r0, [pc, #168]	; (8000d40 <main+0xe4>)
 8000c98:	f003 ff06 	bl	8004aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ca2:	4828      	ldr	r0, [pc, #160]	; (8000d44 <main+0xe8>)
 8000ca4:	f003 ff00 	bl	8004aa8 <HAL_GPIO_WritePin>
	  HAL_Delay(150);
 8000ca8:	2096      	movs	r0, #150	; 0x96
 8000caa:	f003 f859 	bl	8003d60 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2180      	movs	r1, #128	; 0x80
 8000cb2:	4823      	ldr	r0, [pc, #140]	; (8000d40 <main+0xe4>)
 8000cb4:	f003 fef8 	bl	8004aa8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cbe:	4821      	ldr	r0, [pc, #132]	; (8000d44 <main+0xe8>)
 8000cc0:	f003 fef2 	bl	8004aa8 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 4; i++) {
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	71fb      	strb	r3, [r7, #7]
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d9dd      	bls.n	8000c8c <main+0x30>
  }

  // start timer2 + interrupt
  HAL_TIM_Base_Start_IT(timePort);
 8000cd0:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <main+0xec>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f006 f9a9 	bl	800702c <HAL_TIM_Base_Start_IT>

  HAL_UART_Receive_IT(logPort, &rxByte, 1);
 8000cda:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <main+0xf0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2201      	movs	r2, #1
 8000ce0:	491b      	ldr	r1, [pc, #108]	; (8000d50 <main+0xf4>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f006 fe21 	bl	800792a <HAL_UART_Receive_IT>

  set_Date(epoch);
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <main+0xf8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 fea3 	bl	8001a38 <set_Date>

  ST7789_Reset();
 8000cf2:	f002 fa67 	bl	80031c4 <ST7789_Reset>
  ST7789_Init(back_color);
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <main+0xfc>)
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f002 fa7c 	bl	80031f8 <ST7789_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d00:	f007 ff84 	bl	8008c0c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of binSem */
  binSemHandle = osSemaphoreNew(1, 1, &binSem_attributes);
 8000d04:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <main+0x100>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f008 f878 	bl	8008dfe <osSemaphoreNew>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <main+0x104>)
 8000d12:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQue */
  myQueHandle = osMessageQueueNew (16, sizeof(s_qcmd), &myQue_attributes);
 8000d14:	4a13      	ldr	r2, [pc, #76]	; (8000d64 <main+0x108>)
 8000d16:	2102      	movs	r1, #2
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f008 f8f9 	bl	8008f10 <osMessageQueueNew>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0x10c>)
 8000d22:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defTask */
  defTaskHandle = osThreadNew(defThread, NULL, &defTask_attributes);
 8000d24:	4a11      	ldr	r2, [pc, #68]	; (8000d6c <main+0x110>)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <main+0x114>)
 8000d2a:	f007 ffbb 	bl	8008ca4 <osThreadNew>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <main+0x118>)
 8000d32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d34:	f007 ff90 	bl	8008c58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    LOOP_FOREVER();
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f003 f811 	bl	8003d60 <HAL_Delay>
 8000d3e:	e7fb      	b.n	8000d38 <main+0xdc>
 8000d40:	40020800 	.word	0x40020800
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	2000004c 	.word	0x2000004c
 8000d4c:	20000050 	.word	0x20000050
 8000d50:	20001340 	.word	0x20001340
 8000d54:	20000044 	.word	0x20000044
 8000d58:	20001346 	.word	0x20001346
 8000d5c:	0800f240 	.word	0x0800f240
 8000d60:	20000328 	.word	0x20000328
 8000d64:	0800f228 	.word	0x0800f228
 8000d68:	20000324 	.word	0x20000324
 8000d6c:	0800f204 	.word	0x0800f204
 8000d70:	08002451 	.word	0x08002451
 8000d74:	20000320 	.word	0x20000320

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b094      	sub	sp, #80	; 0x50
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	2230      	movs	r2, #48	; 0x30
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f00b f92e 	bl	800bfe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	4b28      	ldr	r3, [pc, #160]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da4:	4a27      	ldr	r2, [pc, #156]	; (8000e44 <SystemClock_Config+0xcc>)
 8000da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000daa:	6413      	str	r3, [r2, #64]	; 0x40
 8000dac:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <SystemClock_Config+0xcc>)
 8000dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db8:	2300      	movs	r3, #0
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc6:	6013      	str	r3, [r2, #0]
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <SystemClock_Config+0xd0>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000de8:	2308      	movs	r3, #8
 8000dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000df6:	2307      	movs	r3, #7
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dfa:	f107 0320 	add.w	r3, r7, #32
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f004 fb2a 	bl	8005458 <HAL_RCC_OscConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e0a:	f002 f843 	bl	8002e94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e0e:	230f      	movs	r3, #15
 8000e10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000e1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e24:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e26:	f107 030c 	add.w	r3, r7, #12
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f004 fd8b 	bl	8005948 <HAL_RCC_ClockConfig>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e38:	f002 f82c 	bl	8002e94 <Error_Handler>
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3750      	adds	r7, #80	; 0x50
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40007000 	.word	0x40007000

08000e4c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000e60:	2300      	movs	r3, #0
 8000e62:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e64:	4b24      	ldr	r3, [pc, #144]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e66:	4a25      	ldr	r2, [pc, #148]	; (8000efc <MX_RTC_Init+0xb0>)
 8000e68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e70:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e72:	227f      	movs	r2, #127	; 0x7f
 8000e74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 2499;
 8000e76:	4b20      	ldr	r3, [pc, #128]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e78:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8000e7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e7e:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e84:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e8a:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e90:	4819      	ldr	r0, [pc, #100]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000e92:	f005 f88d 	bl	8005fb0 <HAL_RTC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8000e9c:	f001 fffa 	bl	8002e94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 21;
 8000ea0:	2315      	movs	r3, #21
 8000ea2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 52;
 8000ea4:	2334      	movs	r3, #52	; 0x34
 8000ea6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 12;
 8000ea8:	230c      	movs	r3, #12
 8000eaa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480f      	ldr	r0, [pc, #60]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ebc:	f005 f8ee 	bl	800609c <HAL_RTC_SetTime>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8000ec6:	f001 ffe5 	bl	8002e94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <MX_RTC_Init+0xac>)
 8000ee2:	f005 f9d3 	bl	800628c <HAL_RTC_SetDate>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000eec:	f001 ffd2 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000011c 	.word	0x2000011c
 8000efc:	40002800 	.word	0x40002800

08000f00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f04:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f06:	4a18      	ldr	r2, [pc, #96]	; (8000f68 <MX_SPI1_Init+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f20:	2202      	movs	r2, #2
 8000f22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f4c:	220a      	movs	r2, #10
 8000f4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_SPI1_Init+0x64>)
 8000f52:	f005 fb2b 	bl	80065ac <HAL_SPI_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f5c:	f001 ff9a 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	2000013c 	.word	0x2000013c
 8000f68:	40013000 	.word	0x40013000

08000f6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f72:	f107 0308 	add.w	r3, r7, #8
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f80:	463b      	mov	r3, r7
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  	  //  APB1 - 42MHz
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f88:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f92:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000f96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 249;
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa0:	22f9      	movs	r2, #249	; 0xf9
 8000fa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fb2:	f005 ffeb 	bl	8006f8c <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000fbc:	f001 ff6a 	bl	8002e94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fce:	f006 f9a5 	bl	800731c <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000fd8:	f001 ff5c 	bl	8002e94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000fdc:	2320      	movs	r3, #32
 8000fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM2_Init+0x94>)
 8000fea:	f006 fbc1 	bl	8007770 <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ff4:	f001 ff4e 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200001f4 	.word	0x200001f4

08001004 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART3_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001010:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001014:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART3_UART_Init+0x4c>)
 800103c:	f006 fc28 	bl	8007890 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f001 ff25 	bl	8002e94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000023c 	.word	0x2000023c
 8001054:	40004800 	.word	0x40004800

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_DMA_Init+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <MX_DMA_Init+0x68>)
 8001068:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_DMA_Init+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	603b      	str	r3, [r7, #0]
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <MX_DMA_Init+0x68>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <MX_DMA_Init+0x68>)
 8001084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_DMA_Init+0x68>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001096:	2200      	movs	r2, #0
 8001098:	2105      	movs	r1, #5
 800109a:	200e      	movs	r0, #14
 800109c:	f002 ff3c 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010a0:	200e      	movs	r0, #14
 80010a2:	f002 ff55 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2103      	movs	r1, #3
 80010aa:	203b      	movs	r0, #59	; 0x3b
 80010ac:	f002 ff34 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80010b0:	203b      	movs	r0, #59	; 0x3b
 80010b2:	f002 ff4d 	bl	8003f50 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023800 	.word	0x40023800

080010c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08c      	sub	sp, #48	; 0x30
 80010c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b48      	ldr	r3, [pc, #288]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a47      	ldr	r2, [pc, #284]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b45      	ldr	r3, [pc, #276]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <MX_GPIO_Init+0x13c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a40      	ldr	r2, [pc, #256]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b3e      	ldr	r3, [pc, #248]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a39      	ldr	r2, [pc, #228]	; (8001200 <MX_GPIO_Init+0x13c>)
 800111c:	f043 0310 	orr.w	r3, r3, #16
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b37      	ldr	r3, [pc, #220]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a32      	ldr	r2, [pc, #200]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b30      	ldr	r3, [pc, #192]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b2c      	ldr	r3, [pc, #176]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2b      	ldr	r2, [pc, #172]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b29      	ldr	r3, [pc, #164]	; (8001200 <MX_GPIO_Init+0x13c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <MX_GPIO_Init+0x13c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a24      	ldr	r2, [pc, #144]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_GPIO_Init+0x13c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	210e      	movs	r1, #14
 8001186:	481f      	ldr	r0, [pc, #124]	; (8001204 <MX_GPIO_Init+0x140>)
 8001188:	f003 fc8e 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);
 800118c:	2201      	movs	r2, #1
 800118e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <MX_GPIO_Init+0x144>)
 8001194:	f003 fc88 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_TIK_GPIO_Port, LED_TIK_Pin, GPIO_PIN_RESET);
 8001198:	2200      	movs	r2, #0
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	481b      	ldr	r0, [pc, #108]	; (800120c <MX_GPIO_Init+0x148>)
 800119e:	f003 fc83 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IPS_RES_Pin IPS_DC_Pin IPS_BLK_Pin */
  GPIO_InitStruct.Pin = IPS_RES_Pin|IPS_DC_Pin|IPS_BLK_Pin;
 80011a2:	230e      	movs	r3, #14
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011aa:	2301      	movs	r3, #1
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011ae:	2301      	movs	r3, #1
 80011b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b2:	f107 031c 	add.w	r3, r7, #28
 80011b6:	4619      	mov	r1, r3
 80011b8:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_GPIO_Init+0x140>)
 80011ba:	f003 fad9 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_ERR_Pin */
  GPIO_InitStruct.Pin = LED_ERR_Pin;
 80011be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2302      	movs	r3, #2
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_ERR_GPIO_Port, &GPIO_InitStruct);
 80011d0:	f107 031c 	add.w	r3, r7, #28
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	; (8001208 <MX_GPIO_Init+0x144>)
 80011d8:	f003 faca 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_TIK_Pin */
  GPIO_InitStruct.Pin = LED_TIK_Pin;
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80011e4:	2302      	movs	r3, #2
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_TIK_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4806      	ldr	r0, [pc, #24]	; (800120c <MX_GPIO_Init+0x148>)
 80011f4:	f003 fabc 	bl	8004770 <HAL_GPIO_Init>

}
 80011f8:	bf00      	nop
 80011fa:	3730      	adds	r7, #48	; 0x30
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	40020c00 	.word	0x40020c00
 800120c:	40020800 	.word	0x40020800

08001210 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

	cb_nandCounter = 0;
 8001216:	4b58      	ldr	r3, [pc, #352]	; (8001378 <MX_FSMC_Init+0x168>)
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]

  /* USER CODE END FSMC_Init 0 */

  FSMC_NAND_PCC_TimingTypeDef ComSpaceTiming = {0};
 800121c:	f107 0310 	add.w	r3, r7, #16
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
  FSMC_NAND_PCC_TimingTypeDef AttSpaceTiming = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the NAND1 memory initialization sequence
  */
  hnand1.Instance = FSMC_NAND_DEVICE;
 8001236:	4b51      	ldr	r3, [pc, #324]	; (800137c <MX_FSMC_Init+0x16c>)
 8001238:	4a51      	ldr	r2, [pc, #324]	; (8001380 <MX_FSMC_Init+0x170>)
 800123a:	601a      	str	r2, [r3, #0]
  /* hnand1.Init */
  hnand1.Init.NandBank = FSMC_NAND_BANK2;
 800123c:	4b4f      	ldr	r3, [pc, #316]	; (800137c <MX_FSMC_Init+0x16c>)
 800123e:	2210      	movs	r2, #16
 8001240:	605a      	str	r2, [r3, #4]
  hnand1.Init.Waitfeature = FSMC_NAND_PCC_WAIT_FEATURE_ENABLE;
 8001242:	4b4e      	ldr	r3, [pc, #312]	; (800137c <MX_FSMC_Init+0x16c>)
 8001244:	2202      	movs	r2, #2
 8001246:	609a      	str	r2, [r3, #8]
  hnand1.Init.MemoryDataWidth = FSMC_NAND_PCC_MEM_BUS_WIDTH_8;
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <MX_FSMC_Init+0x16c>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  hnand1.Init.EccComputation = FSMC_NAND_ECC_DISABLE;
 800124e:	4b4b      	ldr	r3, [pc, #300]	; (800137c <MX_FSMC_Init+0x16c>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  hnand1.Init.ECCPageSize = FSMC_NAND_ECC_PAGE_SIZE_256BYTE;
 8001254:	4b49      	ldr	r3, [pc, #292]	; (800137c <MX_FSMC_Init+0x16c>)
 8001256:	2200      	movs	r2, #0
 8001258:	615a      	str	r2, [r3, #20]
  hnand1.Init.TCLRSetupTime = 0;
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <MX_FSMC_Init+0x16c>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  hnand1.Init.TARSetupTime = 0;
 8001260:	4b46      	ldr	r3, [pc, #280]	; (800137c <MX_FSMC_Init+0x16c>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  /* hnand1.Config */
  hnand1.Config.PageSize = 2048;
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <MX_FSMC_Init+0x16c>)
 8001268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  hnand1.Config.SpareAreaSize = 16;
 800126e:	4b43      	ldr	r3, [pc, #268]	; (800137c <MX_FSMC_Init+0x16c>)
 8001270:	2210      	movs	r2, #16
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hnand1.Config.BlockSize = 131072;
 8001274:	4b41      	ldr	r3, [pc, #260]	; (800137c <MX_FSMC_Init+0x16c>)
 8001276:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800127a:	62da      	str	r2, [r3, #44]	; 0x2c
  hnand1.Config.BlockNbr = 1024;
 800127c:	4b3f      	ldr	r3, [pc, #252]	; (800137c <MX_FSMC_Init+0x16c>)
 800127e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001282:	631a      	str	r2, [r3, #48]	; 0x30
  hnand1.Config.PlaneNbr = 1;
 8001284:	4b3d      	ldr	r3, [pc, #244]	; (800137c <MX_FSMC_Init+0x16c>)
 8001286:	2201      	movs	r2, #1
 8001288:	635a      	str	r2, [r3, #52]	; 0x34
  hnand1.Config.PlaneSize = 134217728;
 800128a:	4b3c      	ldr	r3, [pc, #240]	; (800137c <MX_FSMC_Init+0x16c>)
 800128c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
  hnand1.Config.ExtraCommandEnable = DISABLE;
 8001292:	4b3a      	ldr	r3, [pc, #232]	; (800137c <MX_FSMC_Init+0x16c>)
 8001294:	2200      	movs	r2, #0
 8001296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* ComSpaceTiming */
  ComSpaceTiming.SetupTime = 252;
 800129a:	23fc      	movs	r3, #252	; 0xfc
 800129c:	613b      	str	r3, [r7, #16]
  ComSpaceTiming.WaitSetupTime = 252;
 800129e:	23fc      	movs	r3, #252	; 0xfc
 80012a0:	617b      	str	r3, [r7, #20]
  ComSpaceTiming.HoldSetupTime = 252;
 80012a2:	23fc      	movs	r3, #252	; 0xfc
 80012a4:	61bb      	str	r3, [r7, #24]
  ComSpaceTiming.HiZSetupTime = 252;
 80012a6:	23fc      	movs	r3, #252	; 0xfc
 80012a8:	61fb      	str	r3, [r7, #28]
  /* AttSpaceTiming */
  AttSpaceTiming.SetupTime = 252;
 80012aa:	23fc      	movs	r3, #252	; 0xfc
 80012ac:	603b      	str	r3, [r7, #0]
  AttSpaceTiming.WaitSetupTime = 252;
 80012ae:	23fc      	movs	r3, #252	; 0xfc
 80012b0:	607b      	str	r3, [r7, #4]
  AttSpaceTiming.HoldSetupTime = 252;
 80012b2:	23fc      	movs	r3, #252	; 0xfc
 80012b4:	60bb      	str	r3, [r7, #8]
  AttSpaceTiming.HiZSetupTime = 252;
 80012b6:	23fc      	movs	r3, #252	; 0xfc
 80012b8:	60fb      	str	r3, [r7, #12]

  if (HAL_NAND_Init(&hnand1, &ComSpaceTiming, &AttSpaceTiming) != HAL_OK)
 80012ba:	463a      	mov	r2, r7
 80012bc:	f107 0310 	add.w	r3, r7, #16
 80012c0:	4619      	mov	r1, r3
 80012c2:	482e      	ldr	r0, [pc, #184]	; (800137c <MX_FSMC_Init+0x16c>)
 80012c4:	f003 fc23 	bl	8004b0e <HAL_NAND_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_FSMC_Init+0xc2>
  {
    Error_Handler( );
 80012ce:	f001 fde1 	bl	8002e94 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  if (my_NAND_Read_ID(&hnand1, &nandID) == HAL_OK) {
 80012d2:	492c      	ldr	r1, [pc, #176]	; (8001384 <MX_FSMC_Init+0x174>)
 80012d4:	4829      	ldr	r0, [pc, #164]	; (800137c <MX_FSMC_Init+0x16c>)
 80012d6:	f000 f861 	bl	800139c <my_NAND_Read_ID>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d147      	bne.n	8001370 <MX_FSMC_Init+0x160>

	  nandState = HAL_NAND_GetState(&hnand1);
 80012e0:	4826      	ldr	r0, [pc, #152]	; (800137c <MX_FSMC_Init+0x16c>)
 80012e2:	f004 f885 	bl	80053f0 <HAL_NAND_GetState>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_FSMC_Init+0x178>)
 80012ec:	701a      	strb	r2, [r3, #0]

	  memcpy((uint8_t *)&chipConf, (uint8_t *)&hnand1.Config, sizeof(s_chipConf));
 80012ee:	4a27      	ldr	r2, [pc, #156]	; (800138c <MX_FSMC_Init+0x17c>)
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_FSMC_Init+0x16c>)
 80012f2:	4615      	mov	r5, r2
 80012f4:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80012f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001300:	e885 0003 	stmia.w	r5, {r0, r1}

	  if ((chipConf.PageSize > 0) && (chipConf.PageSize <= MAX_NAND_BUF)) {
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_FSMC_Init+0x17c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d028      	beq.n	800135e <MX_FSMC_Init+0x14e>
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_FSMC_Init+0x17c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001314:	d823      	bhi.n	800135e <MX_FSMC_Init+0x14e>
		  rdBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 8001316:	4b1d      	ldr	r3, [pc, #116]	; (800138c <MX_FSMC_Init+0x17c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4619      	mov	r1, r3
 800131c:	2001      	movs	r0, #1
 800131e:	f00a fd6d 	bl	800bdfc <calloc>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_FSMC_Init+0x180>)
 8001328:	601a      	str	r2, [r3, #0]
		  wrBuf = (uint8_t *)calloc(1, chipConf.PageSize);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <MX_FSMC_Init+0x17c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4619      	mov	r1, r3
 8001330:	2001      	movs	r0, #1
 8001332:	f00a fd63 	bl	800bdfc <calloc>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <MX_FSMC_Init+0x184>)
 800133c:	601a      	str	r2, [r3, #0]

		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_FSMC_Init+0x180>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <MX_FSMC_Init+0x13e>
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <MX_FSMC_Init+0x184>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10f      	bne.n	800136e <MX_FSMC_Init+0x15e>
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <MX_FSMC_Init+0x188>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	b2da      	uxtb	r2, r3
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_FSMC_Init+0x188>)
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	e007      	b.n	800136e <MX_FSMC_Init+0x15e>
	  } else {
		  devError |= devNAND;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_FSMC_Init+0x188>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	f043 0320 	orr.w	r3, r3, #32
 8001366:	b2da      	uxtb	r2, r3
 8001368:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_FSMC_Init+0x188>)
 800136a:	701a      	strb	r2, [r3, #0]

  }


  /* USER CODE END FSMC_Init 2 */
}
 800136c:	e000      	b.n	8001370 <MX_FSMC_Init+0x160>
		  if (!rdBuf || !wrBuf) devError |= devMEM;
 800136e:	bf00      	nop
}
 8001370:	bf00      	nop
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	2000135c 	.word	0x2000135c
 800137c:	200002e0 	.word	0x200002e0
 8001380:	a0000060 	.word	0xa0000060
 8001384:	20001360 	.word	0x20001360
 8001388:	20000061 	.word	0x20000061
 800138c:	20001368 	.word	0x20001368
 8001390:	20001380 	.word	0x20001380
 8001394:	20001384 	.word	0x20001384
 8001398:	2000032c 	.word	0x2000032c

0800139c <my_NAND_Read_ID>:

/* USER CODE BEGIN 4 */

HAL_StatusTypeDef my_NAND_Read_ID(NAND_HandleTypeDef *hnand, NAND_IDsTypeDef *pNAND_ID)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]

	if (hnand->State == HAL_NAND_STATE_BUSY) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d101      	bne.n	80013b6 <my_NAND_Read_ID+0x1a>

		return HAL_BUSY;
 80013b2:	2302      	movs	r3, #2
 80013b4:	e059      	b.n	800146a <my_NAND_Read_ID+0xce>

	} else if (hnand->State == HAL_NAND_STATE_READY) {
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d152      	bne.n	8001468 <my_NAND_Read_ID+0xcc>

		__HAL_LOCK(hnand);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <my_NAND_Read_ID+0x34>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e04c      	b.n	800146a <my_NAND_Read_ID+0xce>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2020 	strb.w	r2, [r3, #32]

	    hnand->State = HAL_NAND_STATE_BUSY;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2202      	movs	r2, #2
 80013dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    	devAdr = NAND_DEVICE1;
	    } else {
	    	devAdr = NAND_DEVICE2;
	    }
#else
	    devAdr = NAND_DEVICE;//MY_NAND_DEVICE;
 80013e0:	4b25      	ldr	r3, [pc, #148]	; (8001478 <my_NAND_Read_ID+0xdc>)
 80013e2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80013e6:	601a      	str	r2, [r3, #0]
#endif

	    /* Send Read ID command sequence */
	    *(__IO uint8_t *)((uint32_t)(devAdr | CMD_AREA))  = NAND_CMD_READID;
 80013e8:	4b23      	ldr	r3, [pc, #140]	; (8001478 <my_NAND_Read_ID+0xdc>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f0:	2290      	movs	r2, #144	; 0x90
 80013f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80013f4:	f3bf 8f4f 	dsb	sy
}
 80013f8:	bf00      	nop
	    __DSB();
	    *(__IO uint8_t *)((uint32_t)(devAdr | ADDR_AREA)) = 0x00;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <my_NAND_Read_ID+0xdc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001406:	f3bf 8f4f 	dsb	sy
}
 800140a:	bf00      	nop
	    __DSB();

	    /* Read the electronic signature from NAND flash */
	    if (hnand->Init.MemoryDataWidth == FSMC_NAND_PCC_MEM_BUS_WIDTH_8) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d123      	bne.n	800145c <my_NAND_Read_ID+0xc0>
	    	__IO uint32_t data  = *(__IO uint32_t *)devAdr;
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <my_NAND_Read_ID+0xdc>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
	    	__IO uint32_t data1 = *((__IO uint32_t *)devAdr + 4);
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <my_NAND_Read_ID+0xdc>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3310      	adds	r3, #16
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60bb      	str	r3, [r7, #8]

	    	pNAND_ID->Maker_Id   = ADDR_1ST_CYCLE(data);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	b2da      	uxtb	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	701a      	strb	r2, [r3, #0]
	    	pNAND_ID->Device_Id  = ADDR_2ND_CYCLE(data);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b2da      	uxtb	r2, r3
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	705a      	strb	r2, [r3, #1]
	    	pNAND_ID->Third_Id   = ADDR_3RD_CYCLE(data);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	b2da      	uxtb	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	709a      	strb	r2, [r3, #2]
	    	pNAND_ID->Fourth_Id  = ADDR_4TH_CYCLE(data);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	0e1b      	lsrs	r3, r3, #24
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	70da      	strb	r2, [r3, #3]
	    	pNAND_ID->Plane_Id   = ADDR_1ST_CYCLE(data1);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	711a      	strb	r2, [r3, #4]

	    	hnand->State = HAL_NAND_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	    }

	    __HAL_UNLOCK(hnand);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]

	} else {
	    return HAL_ERROR;
	}

	return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <my_NAND_Read_ID+0xce>
	    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20001348 	.word	0x20001348

0800147c <pageIsEmpty>:
//-----------------------------------------------------------------------------
bool pageIsEmpty(uint32_t page)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
bool ret = false;
 8001484:	2300      	movs	r3, #0
 8001486:	77fb      	strb	r3, [r7, #31]

	if (nandPort->State == HAL_NAND_STATE_BUSY) {
 8001488:	4b9f      	ldr	r3, [pc, #636]	; (8001708 <pageIsEmpty+0x28c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d108      	bne.n	80014a8 <pageIsEmpty+0x2c>

		devError |= devNAND;
 8001496:	4b9d      	ldr	r3, [pc, #628]	; (800170c <pageIsEmpty+0x290>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	f043 0320 	orr.w	r3, r3, #32
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	4b9a      	ldr	r3, [pc, #616]	; (800170c <pageIsEmpty+0x290>)
 80014a2:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_BUSY;
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	e12b      	b.n	8001700 <pageIsEmpty+0x284>

	} else if (nandPort->State == HAL_NAND_STATE_READY) {
 80014a8:	4b97      	ldr	r3, [pc, #604]	; (8001708 <pageIsEmpty+0x28c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	f040 811c 	bne.w	80016f0 <pageIsEmpty+0x274>

		__HAL_LOCK(nandPort);
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <pageIsEmpty+0x28c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d101      	bne.n	80014c8 <pageIsEmpty+0x4c>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e11b      	b.n	8001700 <pageIsEmpty+0x284>
 80014c8:	4b8f      	ldr	r3, [pc, #572]	; (8001708 <pageIsEmpty+0x28c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]
		nandPort->State = HAL_NAND_STATE_BUSY;
 80014d2:	4b8d      	ldr	r3, [pc, #564]	; (8001708 <pageIsEmpty+0x28c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2202      	movs	r2, #2
 80014d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		NAND_AddressTypeDef pAddress = {
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	813b      	strh	r3, [r7, #8]
 80014e2:	2301      	movs	r3, #1
 80014e4:	817b      	strh	r3, [r7, #10]
			.Page = page,
			.Plane = 1,
			.Block = nand_PageToBlock(page)
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 fed4 	bl	8002294 <nand_PageToBlock>
 80014ec:	4603      	mov	r3, r0
		NAND_AddressTypeDef pAddress = {
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	81bb      	strh	r3, [r7, #12]
		};

		uint32_t deviceaddress = devAdr;
 80014f2:	4b87      	ldr	r3, [pc, #540]	; (8001710 <pageIsEmpty+0x294>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	617b      	str	r3, [r7, #20]
		uint32_t nandaddress = ARRAY_ADDRESS(&pAddress, nandPort);
 80014f8:	893b      	ldrh	r3, [r7, #8]
 80014fa:	4619      	mov	r1, r3
 80014fc:	89bb      	ldrh	r3, [r7, #12]
 80014fe:	461a      	mov	r2, r3
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	4618      	mov	r0, r3
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <pageIsEmpty+0x28c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	fb00 f303 	mul.w	r3, r0, r3
 800150e:	4413      	add	r3, r2
 8001510:	4a7d      	ldr	r2, [pc, #500]	; (8001708 <pageIsEmpty+0x28c>)
 8001512:	6812      	ldr	r2, [r2, #0]
 8001514:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001516:	fb02 f303 	mul.w	r3, r2, r3
 800151a:	440b      	add	r3, r1
 800151c:	613b      	str	r3, [r7, #16]

		/* Page(s) read loop */
		if (nandaddress < ((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr))) {
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <pageIsEmpty+0x28c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	4a78      	ldr	r2, [pc, #480]	; (8001708 <pageIsEmpty+0x28c>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	429a      	cmp	r2, r3
 8001532:	f080 80d1 	bcs.w	80016d8 <pageIsEmpty+0x25c>
			/* Send read page command sequence */
			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001540:	f3bf 8f4f 	dsb	sy
}
 8001544:	bf00      	nop
			__DSB();

			/* Cards with page size <= 512 bytes */
			if ((nandPort->Config.PageSize) <= 512U) {
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <pageIsEmpty+0x28c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001550:	d84a      	bhi.n	80015e8 <pageIsEmpty+0x16c>
				if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) <= 65535U) {
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <pageIsEmpty+0x28c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	4a6b      	ldr	r2, [pc, #428]	; (8001708 <pageIsEmpty+0x28c>)
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001566:	d21a      	bcs.n	800159e <pageIsEmpty+0x122>
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156e:	2200      	movs	r2, #0
 8001570:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001572:	f3bf 8f4f 	dsb	sy
}
 8001576:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001584:	f3bf 8f4f 	dsb	sy
}
 8001588:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	0a1a      	lsrs	r2, r3, #8
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001598:	f3bf 8f4f 	dsb	sy
}
 800159c:	e07f      	b.n	800169e <pageIsEmpty+0x222>
					__DSB();
				} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a4:	2200      	movs	r2, #0
 80015a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015a8:	f3bf 8f4f 	dsb	sy
}
 80015ac:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	b2d2      	uxtb	r2, r2
 80015b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ba:	f3bf 8f4f 	dsb	sy
}
 80015be:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	0a1a      	lsrs	r2, r3, #8
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	0c1a      	lsrs	r2, r3, #16
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80015e2:	f3bf 8f4f 	dsb	sy
}
 80015e6:	e05a      	b.n	800169e <pageIsEmpty+0x222>
					__DSB();
				}
			} else {/* (hnand->Config.PageSize) > 512 */
				if (((nandPort->Config.BlockSize) * (nandPort->Config.BlockNbr)) <= 65535U) {
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <pageIsEmpty+0x28c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <pageIsEmpty+0x28c>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015fc:	d222      	bcs.n	8001644 <pageIsEmpty+0x1c8>
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001604:	2200      	movs	r2, #0
 8001606:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001608:	f3bf 8f4f 	dsb	sy
}
 800160c:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001618:	f3bf 8f4f 	dsb	sy
}
 800161c:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800162a:	f3bf 8f4f 	dsb	sy
}
 800162e:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	0a1a      	lsrs	r2, r3, #8
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
}
 8001642:	e02c      	b.n	800169e <pageIsEmpty+0x222>
					__DSB();
				} else {/* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800164e:	f3bf 8f4f 	dsb	sy
}
 8001652:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800165e:	f3bf 8f4f 	dsb	sy
}
 8001662:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001670:	f3bf 8f4f 	dsb	sy
}
 8001674:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	0a1a      	lsrs	r2, r3, #8
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001684:	f3bf 8f4f 	dsb	sy
}
 8001688:	bf00      	nop
					__DSB();
					*(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	0c1a      	lsrs	r2, r3, #16
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8001698:	f3bf 8f4f 	dsb	sy
}
 800169c:	bf00      	nop
					__DSB();
				}
			}

			*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a4:	2230      	movs	r2, #48	; 0x30
 80016a6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80016a8:	f3bf 8f4f 	dsb	sy
}
 80016ac:	bf00      	nop
				// Go back to read mode
				*(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
				__DSB();
			}*/

			ret = true;
 80016ae:	2301      	movs	r3, #1
 80016b0:	77fb      	strb	r3, [r7, #31]
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
 80016b6:	e009      	b.n	80016cc <pageIsEmpty+0x250>
				if (*(uint8_t *)deviceaddress != 0xff) {
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2bff      	cmp	r3, #255	; 0xff
 80016be:	d002      	beq.n	80016c6 <pageIsEmpty+0x24a>
					ret = false;
 80016c0:	2300      	movs	r3, #0
 80016c2:	77fb      	strb	r3, [r7, #31]
					break;
 80016c4:	e008      	b.n	80016d8 <pageIsEmpty+0x25c>
			for (uint32_t index = 0; index < nandPort->Config.PageSize; index++) {
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61bb      	str	r3, [r7, #24]
 80016cc:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <pageIsEmpty+0x28c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d3ef      	bcc.n	80016b8 <pageIsEmpty+0x23c>
				}
			}

		}

		nandPort->State = HAL_NAND_STATE_READY;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <pageIsEmpty+0x28c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		__HAL_UNLOCK(nandPort);
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <pageIsEmpty+0x28c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2020 	strb.w	r2, [r3, #32]
	} else {
		devError |= devNAND;
		return ret;//HAL_ERROR;
	}

	return ret;
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	e007      	b.n	8001700 <pageIsEmpty+0x284>
		devError |= devNAND;
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <pageIsEmpty+0x290>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <pageIsEmpty+0x290>)
 80016fc:	701a      	strb	r2, [r3, #0]
		return ret;//HAL_ERROR;
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000054 	.word	0x20000054
 800170c:	2000032c 	.word	0x2000032c
 8001710:	20001348 	.word	0x20001348

08001714 <get_qStat>:
//-----------------------------------------------------------------------------
static const char *get_qStat(osStatus_t osStat)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	switch (osStat) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	dc18      	bgt.n	8001754 <get_qStat+0x40>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f113 0f06 	cmn.w	r3, #6
 8001728:	db2a      	blt.n	8001780 <get_qStat+0x6c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3306      	adds	r3, #6
 800172e:	2b06      	cmp	r3, #6
 8001730:	d826      	bhi.n	8001780 <get_qStat+0x6c>
 8001732:	a201      	add	r2, pc, #4	; (adr r2, 8001738 <get_qStat+0x24>)
 8001734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001738:	08001779 	.word	0x08001779
 800173c:	08001775 	.word	0x08001775
 8001740:	08001771 	.word	0x08001771
 8001744:	0800176d 	.word	0x0800176d
 8001748:	08001769 	.word	0x08001769
 800174c:	08001765 	.word	0x08001765
 8001750:	08001761 	.word	0x08001761
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800175a:	4293      	cmp	r3, r2
 800175c:	d00e      	beq.n	800177c <get_qStat+0x68>
 800175e:	e00f      	b.n	8001780 <get_qStat+0x6c>
		case 0:
			return "osOK";//                      =  0,         ///< Operation completed successfully.
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <get_qStat+0x7c>)
 8001762:	e00e      	b.n	8001782 <get_qStat+0x6e>
		case -1:
			return "osError";//                   = -1,         ///< Unspecified RTOS error: run-time error but no other error message fits.
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <get_qStat+0x80>)
 8001766:	e00c      	b.n	8001782 <get_qStat+0x6e>
		case -2:
			return "osErrorTimeout";//            = -2,         ///< Operation not completed within the timeout period.
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <get_qStat+0x84>)
 800176a:	e00a      	b.n	8001782 <get_qStat+0x6e>
		case -3:
			return "osErrorResource";//           = -3,         ///< Resource not available.
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <get_qStat+0x88>)
 800176e:	e008      	b.n	8001782 <get_qStat+0x6e>
		case -4:
			return "osErrorParameter";//          = -4,         ///< Parameter error.
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <get_qStat+0x8c>)
 8001772:	e006      	b.n	8001782 <get_qStat+0x6e>
		case -5:
			return "osErrorNoMemory";//           = -5,         ///< System is out of memory: it was impossible to allocate or reserve memory for the operation.
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <get_qStat+0x90>)
 8001776:	e004      	b.n	8001782 <get_qStat+0x6e>
		case -6:
			return "osErrorISR";//                = -6,         ///< Not allowed in ISR context: the function cannot be called from interrupt service routines.
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <get_qStat+0x94>)
 800177a:	e002      	b.n	8001782 <get_qStat+0x6e>
		case 0x7FFFFFFF:
			return "osStatusReserved";//          = 0x7FFFFFFF  ///< Prevents enum down-size compiler optimization.
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <get_qStat+0x98>)
 800177e:	e000      	b.n	8001782 <get_qStat+0x6e>
	}

	return "UnknownError";
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <get_qStat+0x9c>)
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	0800cd00 	.word	0x0800cd00
 8001794:	0800cd08 	.word	0x0800cd08
 8001798:	0800cd10 	.word	0x0800cd10
 800179c:	0800cd20 	.word	0x0800cd20
 80017a0:	0800cd30 	.word	0x0800cd30
 80017a4:	0800cd44 	.word	0x0800cd44
 80017a8:	0800cd54 	.word	0x0800cd54
 80017ac:	0800cd60 	.word	0x0800cd60
 80017b0:	0800cd74 	.word	0x0800cd74

080017b4 <hex2bin>:
//-----------------------------------------------------------------------------
//      Функция преобразует hex-строку в бинарное число типа uint32_t
//
uint32_t hex2bin(const char *buf, uint8_t len)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	; 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
uint8_t i, j, jk, k;
uint8_t mas[8] = {0x30}, bt[2] = {0};
 80017c0:	2330      	movs	r3, #48	; 0x30
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	2300      	movs	r3, #0
 80017ca:	81bb      	strh	r3, [r7, #12]
uint32_t dword, ret = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	623b      	str	r3, [r7, #32]

    if (!len || !buf) return ret;
 80017d0:	78fb      	ldrb	r3, [r7, #3]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <hex2bin+0x28>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <hex2bin+0x2c>
 80017dc:	6a3b      	ldr	r3, [r7, #32]
 80017de:	e0b2      	b.n	8001946 <hex2bin+0x192>
    if (len > 8) len = 8;
 80017e0:	78fb      	ldrb	r3, [r7, #3]
 80017e2:	2b08      	cmp	r3, #8
 80017e4:	d901      	bls.n	80017ea <hex2bin+0x36>
 80017e6:	2308      	movs	r3, #8
 80017e8:	70fb      	strb	r3, [r7, #3]
    k = 8 - len;
 80017ea:	78fb      	ldrb	r3, [r7, #3]
 80017ec:	f1c3 0308 	rsb	r3, r3, #8
 80017f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    memcpy(&mas[k], buf, len);
 80017f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017f8:	f107 0210 	add.w	r2, r7, #16
 80017fc:	4413      	add	r3, r2
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	f00a fbe2 	bl	800bfcc <memcpy>

    k = j = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800180e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001812:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    while (k < 4) {
 8001816:	e090      	b.n	800193a <hex2bin+0x186>
        jk = j + 2;
 8001818:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800181c:	3302      	adds	r3, #2
 800181e:	77fb      	strb	r3, [r7, #31]
        for (i = j; i < jk; i++) {
 8001820:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001828:	e066      	b.n	80018f8 <hex2bin+0x144>
                 if ((mas[i] >= 0x30) && (mas[i] <= 0x39)) bt[i&1] = mas[i] - 0x30;
 800182a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800182e:	3328      	adds	r3, #40	; 0x28
 8001830:	443b      	add	r3, r7
 8001832:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001836:	2b2f      	cmp	r3, #47	; 0x2f
 8001838:	d918      	bls.n	800186c <hex2bin+0xb8>
 800183a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800183e:	3328      	adds	r3, #40	; 0x28
 8001840:	443b      	add	r3, r7
 8001842:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001846:	2b39      	cmp	r3, #57	; 0x39
 8001848:	d810      	bhi.n	800186c <hex2bin+0xb8>
 800184a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800184e:	3328      	adds	r3, #40	; 0x28
 8001850:	443b      	add	r3, r7
 8001852:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	3a30      	subs	r2, #48	; 0x30
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	3328      	adds	r3, #40	; 0x28
 8001864:	443b      	add	r3, r7
 8001866:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800186a:	e040      	b.n	80018ee <hex2bin+0x13a>
            else if ((mas[i] >= 0x61) && (mas[i] <= 0x66)) bt[i&1] = mas[i] - 0x57;//a,b,c,d,e,f
 800186c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	443b      	add	r3, r7
 8001874:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001878:	2b60      	cmp	r3, #96	; 0x60
 800187a:	d918      	bls.n	80018ae <hex2bin+0xfa>
 800187c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001880:	3328      	adds	r3, #40	; 0x28
 8001882:	443b      	add	r3, r7
 8001884:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001888:	2b66      	cmp	r3, #102	; 0x66
 800188a:	d810      	bhi.n	80018ae <hex2bin+0xfa>
 800188c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001890:	3328      	adds	r3, #40	; 0x28
 8001892:	443b      	add	r3, r7
 8001894:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001898:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800189c:	f003 0301 	and.w	r3, r3, #1
 80018a0:	3a57      	subs	r2, #87	; 0x57
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	3328      	adds	r3, #40	; 0x28
 80018a6:	443b      	add	r3, r7
 80018a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
 80018ac:	e01f      	b.n	80018ee <hex2bin+0x13a>
            else if ((mas[i] >= 0x41) && (mas[i] <= 0x46)) bt[i&1] = mas[i] - 0x37;//A,B,C,D,E,F
 80018ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018b2:	3328      	adds	r3, #40	; 0x28
 80018b4:	443b      	add	r3, r7
 80018b6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018ba:	2b40      	cmp	r3, #64	; 0x40
 80018bc:	d917      	bls.n	80018ee <hex2bin+0x13a>
 80018be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018c2:	3328      	adds	r3, #40	; 0x28
 80018c4:	443b      	add	r3, r7
 80018c6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018ca:	2b46      	cmp	r3, #70	; 0x46
 80018cc:	d80f      	bhi.n	80018ee <hex2bin+0x13a>
 80018ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	443b      	add	r3, r7
 80018d6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80018da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	3a37      	subs	r2, #55	; 0x37
 80018e4:	b2d2      	uxtb	r2, r2
 80018e6:	3328      	adds	r3, #40	; 0x28
 80018e8:	443b      	add	r3, r7
 80018ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i = j; i < jk; i++) {
 80018ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f2:	3301      	adds	r3, #1
 80018f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018f8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80018fc:	7ffb      	ldrb	r3, [r7, #31]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d393      	bcc.n	800182a <hex2bin+0x76>
        }
        dword = (bt[0] << 4) | (bt[1] & 0xf);
 8001902:	7b3b      	ldrb	r3, [r7, #12]
 8001904:	011a      	lsls	r2, r3, #4
 8001906:	7b7b      	ldrb	r3, [r7, #13]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	4313      	orrs	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        ret |= (dword << 8*(4 - k - 1));
 8001910:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001914:	f1c3 0303 	rsb	r3, r3, #3
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	6a3a      	ldr	r2, [r7, #32]
 8001922:	4313      	orrs	r3, r2
 8001924:	623b      	str	r3, [r7, #32]
        k++;
 8001926:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800192a:	3301      	adds	r3, #1
 800192c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        j += 2;
 8001930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001934:	3302      	adds	r3, #2
 8001936:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    while (k < 4) {
 800193a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800193e:	2b03      	cmp	r3, #3
 8001940:	f67f af6a 	bls.w	8001818 <hex2bin+0x64>
    }

    return ret;
 8001944:	6a3b      	ldr	r3, [r7, #32]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
	...

08001950 <errLedOn>:
//-------------------------------------------------------------------------------------------
void errLedOn(bool on)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
	if (on)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d006      	beq.n	800196e <errLedOn+0x1e>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_SET);//LED ON
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <errLedOn+0x34>)
 8001968:	f003 f89e 	bl	8004aa8 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
}
 800196c:	e005      	b.n	800197a <errLedOn+0x2a>
		HAL_GPIO_WritePin(LED_ERR_GPIO_Port, LED_ERR_Pin, GPIO_PIN_RESET);//LED OFF
 800196e:	2200      	movs	r2, #0
 8001970:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <errLedOn+0x34>)
 8001976:	f003 f897 	bl	8004aa8 <HAL_GPIO_WritePin>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020c00 	.word	0x40020c00

08001988 <get_secCounter>:
//------------------------------------------------------------------------------------
uint32_t get_secCounter()
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	return secCounter;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <get_secCounter+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000330 	.word	0x20000330

080019a0 <inc_secCounter>:
//-----------------------------------------------------------------------------
void inc_secCounter()
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
	secCounter++;
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <inc_secCounter+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a03      	ldr	r2, [pc, #12]	; (80019b8 <inc_secCounter+0x18>)
 80019ac:	6013      	str	r3, [r2, #0]
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	20000330 	.word	0x20000330

080019bc <get_msCounter>:
//-----------------------------------------------------------------------------
uint64_t get_msCounter()
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	return msCounter;
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <get_msCounter+0x18>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000338 	.word	0x20000338

080019d8 <inc_msCounter>:
//-----------------------------------------------------------------------------
void inc_msCounter()
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
	msCounter++;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <inc_msCounter+0x20>)
 80019de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e2:	1c50      	adds	r0, r2, #1
 80019e4:	f143 0100 	adc.w	r1, r3, #0
 80019e8:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <inc_msCounter+0x20>)
 80019ea:	e9c3 0100 	strd	r0, r1, [r3]
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	20000338 	.word	0x20000338

080019fc <get_tmr>:
//------------------------------------------------------------------------------------------
uint32_t get_tmr(uint32_t sec)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	return (get_secCounter() + sec);
 8001a04:	f7ff ffc0 	bl	8001988 <get_secCounter>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <check_tmr>:
//------------------------------------------------------------------------------------------
bool check_tmr(uint32_t sec)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	return (get_secCounter() >= sec ? true : false);
 8001a1e:	f7ff ffb3 	bl	8001988 <get_secCounter>
 8001a22:	4602      	mov	r2, r0
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	bf94      	ite	ls
 8001a2a:	2301      	movls	r3, #1
 8001a2c:	2300      	movhi	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <set_Date>:
{
	return (get_msCounter() >= hs ? true : false);
}
//-----------------------------------------------------------------------------------------
void set_Date(uint32_t usec)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b094      	sub	sp, #80	; 0x50
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
struct tm ts;
time_t ep = (time_t)usec;
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2000      	movs	r0, #0
 8001a44:	460a      	mov	r2, r1
 8001a46:	4603      	mov	r3, r0
 8001a48:	e9c7 2308 	strd	r2, r3, [r7, #32]

	gmtime_r(&ep, &ts);
 8001a4c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001a50:	f107 0320 	add.w	r3, r7, #32
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00a f9de 	bl	800be18 <gmtime_r>

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sDate.WeekDay = ts.tm_wday;
 8001a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	723b      	strb	r3, [r7, #8]
	sDate.Month   = ts.tm_mon + 1;
 8001a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	727b      	strb	r3, [r7, #9]
	sDate.Date    = ts.tm_mday;
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	72bb      	strb	r3, [r7, #10]
	sDate.Year    = ts.tm_year;
 8001a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	72fb      	strb	r3, [r7, #11]
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <set_Date+0xb0>)
 8001a82:	f004 fc03 	bl	800628c <HAL_RTC_SetDate>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <set_Date+0x64>
 8001a8c:	4b17      	ldr	r3, [pc, #92]	; (8001aec <set_Date+0xb4>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <set_Date+0xb4>)
 8001a98:	701a      	strb	r2, [r3, #0]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
		else {
			setDate = true;
		}
	}
}
 8001a9a:	e021      	b.n	8001ae0 <set_Date+0xa8>
		sTime.Hours   = ts.tm_hour + tZone;
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <set_Date+0xb8>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	733b      	strb	r3, [r7, #12]
		sTime.Minutes = ts.tm_min;
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	737b      	strb	r3, [r7, #13]
		sTime.Seconds = ts.tm_sec;
 8001ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	73bb      	strb	r3, [r7, #14]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK) devError |= devRTC;
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	2200      	movs	r2, #0
 8001abc:	4619      	mov	r1, r3
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <set_Date+0xb0>)
 8001ac0:	f004 faec 	bl	800609c <HAL_RTC_SetTime>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <set_Date+0xa2>
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <set_Date+0xb4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	f043 0308 	orr.w	r3, r3, #8
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <set_Date+0xb4>)
 8001ad6:	701a      	strb	r2, [r3, #0]
}
 8001ad8:	e002      	b.n	8001ae0 <set_Date+0xa8>
			setDate = true;
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <set_Date+0xbc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	3750      	adds	r7, #80	; 0x50
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000011c 	.word	0x2000011c
 8001aec:	2000032c 	.word	0x2000032c
 8001af0:	20001345 	.word	0x20001345
 8001af4:	20001344 	.word	0x20001344

08001af8 <sec2str>:

	return ep;
}
//-----------------------------------------------------------------------------------------
int sec2str(char *st)
{
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b093      	sub	sp, #76	; 0x4c
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	6078      	str	r0, [r7, #4]
int ret = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	637b      	str	r3, [r7, #52]	; 0x34

	if (!setDate) {
 8001b04:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <sec2str+0x110>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d040      	beq.n	8001b94 <sec2str+0x9c>
		uint32_t sec = get_secCounter();
 8001b12:	f7ff ff39 	bl	8001988 <get_secCounter>
 8001b16:	6338      	str	r0, [r7, #48]	; 0x30

		uint32_t day = sec / (60 * 60 * 24);
 8001b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b1a:	4a3c      	ldr	r2, [pc, #240]	; (8001c0c <sec2str+0x114>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c1b      	lsrs	r3, r3, #16
 8001b22:	62fb      	str	r3, [r7, #44]	; 0x2c
		sec %= (60 * 60 * 24);
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	4a39      	ldr	r2, [pc, #228]	; (8001c0c <sec2str+0x114>)
 8001b28:	fba2 1203 	umull	r1, r2, r2, r3
 8001b2c:	0c12      	lsrs	r2, r2, #16
 8001b2e:	4938      	ldr	r1, [pc, #224]	; (8001c10 <sec2str+0x118>)
 8001b30:	fb01 f202 	mul.w	r2, r1, r2
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t hour = sec / (60 * 60);
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	4a36      	ldr	r2, [pc, #216]	; (8001c14 <sec2str+0x11c>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0adb      	lsrs	r3, r3, #11
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
		sec %= (60 * 60);
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	4a33      	ldr	r2, [pc, #204]	; (8001c14 <sec2str+0x11c>)
 8001b48:	fba2 1203 	umull	r1, r2, r2, r3
 8001b4c:	0ad2      	lsrs	r2, r2, #11
 8001b4e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001b52:	fb01 f202 	mul.w	r2, r1, r2
 8001b56:	1a9b      	subs	r3, r3, r2
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t min = sec / (60);
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b5c:	4a2e      	ldr	r2, [pc, #184]	; (8001c18 <sec2str+0x120>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
		sec %= 60;
 8001b66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b68:	4b2b      	ldr	r3, [pc, #172]	; (8001c18 <sec2str+0x120>)
 8001b6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b6e:	0959      	lsrs	r1, r3, #5
 8001b70:	460b      	mov	r3, r1
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a5b      	subs	r3, r3, r1
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30

		ret = sprintf(st, "%lu.%02lu:%02lu:%02lu", day, hour, min, sec);
 8001b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b88:	4924      	ldr	r1, [pc, #144]	; (8001c1c <sec2str+0x124>)
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f00a fba4 	bl	800c2d8 <siprintf>
 8001b90:	6378      	str	r0, [r7, #52]	; 0x34
 8001b92:	e034      	b.n	8001bfe <sec2str+0x106>
	} else {
		RTC_TimeTypeDef sTime;
		RTC_DateTypeDef sDate;
		if (HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN)) devError |= devRTC;
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4820      	ldr	r0, [pc, #128]	; (8001c20 <sec2str+0x128>)
 8001b9e:	f004 fbf9 	bl	8006394 <HAL_RTC_GetDate>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <sec2str+0xc0>
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <sec2str+0x12c>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <sec2str+0x12c>)
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	e022      	b.n	8001bfe <sec2str+0x106>
		else {
			if (HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN)) devError |= devRTC;
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4817      	ldr	r0, [pc, #92]	; (8001c20 <sec2str+0x128>)
 8001bc2:	f004 fb05 	bl	80061d0 <HAL_RTC_GetTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <sec2str+0xe4>
 8001bcc:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <sec2str+0x12c>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <sec2str+0x12c>)
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e010      	b.n	8001bfe <sec2str+0x106>
			else {
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
								sDate.Date, sDate.Month,
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8001bde:	4618      	mov	r0, r3
								sDate.Date, sDate.Month,
 8001be0:	7b7b      	ldrb	r3, [r7, #13]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8001be2:	461c      	mov	r4, r3
								sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001be4:	7c3b      	ldrb	r3, [r7, #16]
 8001be6:	7c7a      	ldrb	r2, [r7, #17]
 8001be8:	7cb9      	ldrb	r1, [r7, #18]
				ret = sprintf(st, "%02u.%02u %02u:%02u:%02u",
 8001bea:	9102      	str	r1, [sp, #8]
 8001bec:	9201      	str	r2, [sp, #4]
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	4623      	mov	r3, r4
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	490c      	ldr	r1, [pc, #48]	; (8001c28 <sec2str+0x130>)
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f00a fb6e 	bl	800c2d8 <siprintf>
 8001bfc:	6378      	str	r0, [r7, #52]	; 0x34
			}
		}
	}

	return ret;
 8001bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	373c      	adds	r7, #60	; 0x3c
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	20001344 	.word	0x20001344
 8001c0c:	c22e4507 	.word	0xc22e4507
 8001c10:	00015180 	.word	0x00015180
 8001c14:	91a2b3c5 	.word	0x91a2b3c5
 8001c18:	88888889 	.word	0x88888889
 8001c1c:	0800cd84 	.word	0x0800cd84
 8001c20:	2000011c 	.word	0x2000011c
 8001c24:	2000032c 	.word	0x2000032c
 8001c28:	0800cd9c 	.word	0x0800cd9c

08001c2c <Report>:
//-------------------------------------------------------------------------------------------
uint8_t Report(uint8_t addTime, const char *fmt, ...)
{
 8001c2c:	b40e      	push	{r1, r2, r3}
 8001c2e:	b590      	push	{r4, r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	4603      	mov	r3, r0
 8001c36:	71fb      	strb	r3, [r7, #7]
va_list args;
size_t len = MAX_UART_BUF;
 8001c38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c3c:	613b      	str	r3, [r7, #16]
int dl = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
char *buf = &txBuf[0];
 8001c42:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <Report+0xb4>)
 8001c44:	60fb      	str	r3, [r7, #12]

	*buf = '\0';
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
	if (addTime) {
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <Report+0x48>
		dl = sec2str(buf);
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff ff50 	bl	8001af8 <sec2str>
 8001c58:	6178      	str	r0, [r7, #20]
		strcat(buf, " | ");
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f7fe fab8 	bl	80001d0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a1e      	ldr	r2, [pc, #120]	; (8001ce4 <Report+0xb8>)
 8001c6a:	6810      	ldr	r0, [r2, #0]
 8001c6c:	6018      	str	r0, [r3, #0]
		dl += 3;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3303      	adds	r3, #3
 8001c72:	617b      	str	r3, [r7, #20]
	}

	va_start(args, fmt);
 8001c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c78:	60bb      	str	r3, [r7, #8]
	vsnprintf(buf + dl, len - dl, fmt, args);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	18d0      	adds	r0, r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	1ad1      	subs	r1, r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c8a:	f00a fc4b 	bl	800c524 <vsniprintf>

	uartRdy = false;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <Report+0xbc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit_DMA(logPort, (uint8_t *)buf, strlen(buf)) != HAL_OK) devError |= devUART;
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <Report+0xc0>)
 8001c96:	681c      	ldr	r4, [r3, #0]
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7fe fa99 	bl	80001d0 <strlen>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	68f9      	ldr	r1, [r7, #12]
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f005 fe70 	bl	800798c <HAL_UART_Transmit_DMA>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d006      	beq.n	8001cc0 <Report+0x94>
 8001cb2:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <Report+0xc4>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <Report+0xc4>)
 8001cbe:	701a      	strb	r2, [r3, #0]
	while (!uartRdy) {} //HAL_Delay(1)
 8001cc0:	bf00      	nop
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <Report+0xbc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f8      	bne.n	8001cc2 <Report+0x96>

	va_end(args);

	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001cdc:	b003      	add	sp, #12
 8001cde:	4770      	bx	lr
 8001ce0:	20000340 	.word	0x20000340
 8001ce4:	0800cdb8 	.word	0x0800cdb8
 8001ce8:	20000040 	.word	0x20000040
 8001cec:	20000050 	.word	0x20000050
 8001cf0:	2000032c 	.word	0x2000032c

08001cf4 <HAL_UART_RxCpltCallback>:
//------------------------------------------------------------------------------------------
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b090      	sub	sp, #64	; 0x40
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// logPort - log
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a9c      	ldr	r2, [pc, #624]	; (8001f74 <HAL_UART_RxCpltCallback+0x280>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	f040 825d 	bne.w	80021c2 <HAL_UART_RxCpltCallback+0x4ce>

		if (rxByte == BACK_SPACE) {
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <HAL_UART_RxCpltCallback+0x284>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d10a      	bne.n	8001d26 <HAL_UART_RxCpltCallback+0x32>
			if (ruk) ruk--;
 8001d10:	4b9a      	ldr	r3, [pc, #616]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d011      	beq.n	8001d3c <HAL_UART_RxCpltCallback+0x48>
 8001d18:	4b98      	ldr	r3, [pc, #608]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b96      	ldr	r3, [pc, #600]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d22:	801a      	strh	r2, [r3, #0]
 8001d24:	e00a      	b.n	8001d3c <HAL_UART_RxCpltCallback+0x48>
		} else {
			rxBuf[ruk++] = (char)rxByte;
 8001d26:	4b95      	ldr	r3, [pc, #596]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	b291      	uxth	r1, r2
 8001d2e:	4a93      	ldr	r2, [pc, #588]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d30:	8011      	strh	r1, [r2, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b90      	ldr	r3, [pc, #576]	; (8001f78 <HAL_UART_RxCpltCallback+0x284>)
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	4b91      	ldr	r3, [pc, #580]	; (8001f80 <HAL_UART_RxCpltCallback+0x28c>)
 8001d3a:	5499      	strb	r1, [r3, r2]
		}
		if (rxByte == 0x0a) {//end of line
 8001d3c:	4b8e      	ldr	r3, [pc, #568]	; (8001f78 <HAL_UART_RxCpltCallback+0x284>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b0a      	cmp	r3, #10
 8001d42:	f040 8239 	bne.w	80021b8 <HAL_UART_RxCpltCallback+0x4c4>
			rxBuf[--ruk] = '\0';
 8001d46:	4b8d      	ldr	r3, [pc, #564]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	4b8b      	ldr	r3, [pc, #556]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	4b8a      	ldr	r3, [pc, #552]	; (8001f7c <HAL_UART_RxCpltCallback+0x288>)
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b89      	ldr	r3, [pc, #548]	; (8001f80 <HAL_UART_RxCpltCallback+0x28c>)
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	5499      	strb	r1, [r3, r2]
			char *uk = NULL;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	63fb      	str	r3, [r7, #60]	; 0x3c
			bool check = false;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			cmd_flag = 0;
 8001d68:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <HAL_UART_RxCpltCallback+0x290>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
			s_qcmd qcmd = {0};
 8001d6e:	2300      	movs	r3, #0
 8001d70:	833b      	strh	r3, [r7, #24]
			if (strlen(rxBuf) >= 4) {
 8001d72:	4883      	ldr	r0, [pc, #524]	; (8001f80 <HAL_UART_RxCpltCallback+0x28c>)
 8001d74:	f7fe fa2c 	bl	80001d0 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f240 8213 	bls.w	80021a6 <HAL_UART_RxCpltCallback+0x4b2>
				int8_t idx = -1;
 8001d80:	23ff      	movs	r3, #255	; 0xff
 8001d82:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001d8c:	e018      	b.n	8001dc0 <HAL_UART_RxCpltCallback+0xcc>
					if ((uk = strstr(rxBuf, s_cmds[i]))) {//const char *s_cmds ="restart"
 8001d8e:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001d92:	4a7d      	ldr	r2, [pc, #500]	; (8001f88 <HAL_UART_RxCpltCallback+0x294>)
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4879      	ldr	r0, [pc, #484]	; (8001f80 <HAL_UART_RxCpltCallback+0x28c>)
 8001d9c:	f00a faf3 	bl	800c386 <strstr>
 8001da0:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d004      	beq.n	8001db2 <HAL_UART_RxCpltCallback+0xbe>
														  //"read:0x4549ABBB:256"
						                                  //"next"
														  //"write:0x0:0xf0:256"
														  //"erase:"
														  //"check:"
						idx = i;
 8001da8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8001dac:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						break;
 8001db0:	e00a      	b.n	8001dc8 <HAL_UART_RxCpltCallback+0xd4>
				for (int8_t i = 0; i < MAX_CMDS; i++) {
 8001db2:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	3301      	adds	r3, #1
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 8001dc0:	f997 3039 	ldrsb.w	r3, [r7, #57]	; 0x39
 8001dc4:	2b06      	cmp	r3, #6
 8001dc6:	dde2      	ble.n	8001d8e <HAL_UART_RxCpltCallback+0x9a>
					}
				}
				if ((uk == rxBuf) && (idx != -1)) {
 8001dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dca:	4a6d      	ldr	r2, [pc, #436]	; (8001f80 <HAL_UART_RxCpltCallback+0x28c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f040 81ea 	bne.w	80021a6 <HAL_UART_RxCpltCallback+0x4b2>
 8001dd2:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dda:	f000 81e4 	beq.w	80021a6 <HAL_UART_RxCpltCallback+0x4b2>
					nandLen = MAX_LEN_DATA;//256;
 8001dde:	4b6b      	ldr	r3, [pc, #428]	; (8001f8c <HAL_UART_RxCpltCallback+0x298>)
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	801a      	strh	r2, [r3, #0]
					uk += strlen(s_cmds[idx]);
 8001de6:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001dea:	4a67      	ldr	r2, [pc, #412]	; (8001f88 <HAL_UART_RxCpltCallback+0x294>)
 8001dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe f9ed 	bl	80001d0 <strlen>
 8001df6:	4602      	mov	r2, r0
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	4413      	add	r3, r2
 8001dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
					char *uki = NULL, *uke = NULL, *ukb = NULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e06:	2300      	movs	r3, #0
 8001e08:	633b      	str	r3, [r7, #48]	; 0x30
					switch (idx) {
 8001e0a:	f997 303a 	ldrsb.w	r3, [r7, #58]	; 0x3a
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	f200 818f 	bhi.w	8002132 <HAL_UART_RxCpltCallback+0x43e>
 8001e14:	a201      	add	r2, pc, #4	; (adr r2, 8001e1c <HAL_UART_RxCpltCallback+0x128>)
 8001e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e1a:	bf00      	nop
 8001e1c:	08001e39 	.word	0x08001e39
 8001e20:	08001e45 	.word	0x08001e45
 8001e24:	08001e99 	.word	0x08001e99
 8001e28:	08001f19 	.word	0x08001f19
 8001e2c:	08001f49 	.word	0x08001f49
 8001e30:	080020b9 	.word	0x080020b9
 8001e34:	080020f3 	.word	0x080020f3
						case cmdRestart:
							qcmd.cmd = cmdRestart;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	763b      	strb	r3, [r7, #24]
							cmd_flag = 1;
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_UART_RxCpltCallback+0x290>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
						break;
 8001e42:	e176      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						case cmdEpoch:
							if (*uk == '?') {
 8001e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b3f      	cmp	r3, #63	; 0x3f
 8001e4a:	d107      	bne.n	8001e5c <HAL_UART_RxCpltCallback+0x168>
								qcmd.cmd = cmdEpoch;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	763b      	strb	r3, [r7, #24]
								qcmd.attr = 1;
 8001e50:	2301      	movs	r3, #1
 8001e52:	767b      	strb	r3, [r7, #25]
								cmd_flag = 1;
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_UART_RxCpltCallback+0x290>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	701a      	strb	r2, [r3, #0]
										qcmd.cmd = cmdEpoch;
										cmd_flag = 1;
									}
								}
							}
						break;
 8001e5a:	e165      	b.n	8002128 <HAL_UART_RxCpltCallback+0x434>
								if (strlen(uk) < 10) setDate = false;
 8001e5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e5e:	f7fe f9b7 	bl	80001d0 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b09      	cmp	r3, #9
 8001e66:	d803      	bhi.n	8001e70 <HAL_UART_RxCpltCallback+0x17c>
 8001e68:	4b49      	ldr	r3, [pc, #292]	; (8001f90 <HAL_UART_RxCpltCallback+0x29c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
						break;
 8001e6e:	e15b      	b.n	8002128 <HAL_UART_RxCpltCallback+0x434>
									uint32_t ep = (uint32_t)atol(uk);
 8001e70:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e72:	f009 ffbf 	bl	800bdf4 <atol>
 8001e76:	4603      	mov	r3, r0
 8001e78:	61fb      	str	r3, [r7, #28]
									if (ep > epoch) {
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	f240 8151 	bls.w	8002128 <HAL_UART_RxCpltCallback+0x434>
										epoch = ep;
 8001e86:	4a43      	ldr	r2, [pc, #268]	; (8001f94 <HAL_UART_RxCpltCallback+0x2a0>)
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	6013      	str	r3, [r2, #0]
										qcmd.cmd = cmdEpoch;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	763b      	strb	r3, [r7, #24]
										cmd_flag = 1;
 8001e90:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_UART_RxCpltCallback+0x290>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
						break;
 8001e96:	e147      	b.n	8002128 <HAL_UART_RxCpltCallback+0x434>
						case cmdRead://"read:0x4549ABBB:256";
							uki = strchr(uk, ':');
 8001e98:	213a      	movs	r1, #58	; 0x3a
 8001e9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e9c:	f00a fa4b 	bl	800c336 <strchr>
 8001ea0:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00b      	beq.n	8001ec0 <HAL_UART_RxCpltCallback+0x1cc>
								nandLen = atol(uki + 1);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3301      	adds	r3, #1
 8001eac:	4618      	mov	r0, r3
 8001eae:	f009 ffa1 	bl	800bdf4 <atol>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b35      	ldr	r3, [pc, #212]	; (8001f8c <HAL_UART_RxCpltCallback+0x298>)
 8001eb8:	801a      	strh	r2, [r3, #0]
								*uki = '\0';
 8001eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
							}
							uki = strstr(uk, "0x");
 8001ec0:	4935      	ldr	r1, [pc, #212]	; (8001f98 <HAL_UART_RxCpltCallback+0x2a4>)
 8001ec2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ec4:	f00a fa5f 	bl	800c386 <strstr>
 8001ec8:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00f      	beq.n	8001ef0 <HAL_UART_RxCpltCallback+0x1fc>
								uki += 2;
 8001ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	637b      	str	r3, [r7, #52]	; 0x34
								nandAdr = hex2bin(uki, strlen(uki));
 8001ed6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ed8:	f7fe f97a 	bl	80001d0 <strlen>
 8001edc:	4603      	mov	r3, r0
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ee4:	f7ff fc66 	bl	80017b4 <hex2bin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e006      	b.n	8001efe <HAL_UART_RxCpltCallback+0x20a>
							} else {
								nandAdr = atol(uk);
 8001ef0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ef2:	f009 ff7f 	bl	800bdf4 <atol>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001efc:	601a      	str	r2, [r3, #0]
							}
							nandAdr += devAdr;
 8001efe:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	4b27      	ldr	r3, [pc, #156]	; (8001fa0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f0a:	6013      	str	r3, [r2, #0]
							check = true;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdRead;
 8001f12:	2302      	movs	r3, #2
 8001f14:	763b      	strb	r3, [r7, #24]
						break;
 8001f16:	e10c      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						case cmdNext://"next";
							if (nandAdr < devAdr) nandAdr = devAdr;
 8001f18:	4b20      	ldr	r3, [pc, #128]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d203      	bcs.n	8001f2c <HAL_UART_RxCpltCallback+0x238>
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_UART_RxCpltCallback+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f2a:	6013      	str	r3, [r2, #0]
							nandAdr += nandLen;
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <HAL_UART_RxCpltCallback+0x298>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a18      	ldr	r2, [pc, #96]	; (8001f9c <HAL_UART_RxCpltCallback+0x2a8>)
 8001f3a:	6013      	str	r3, [r2, #0]
							check = true;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							qcmd.cmd = cmdNext;
 8001f42:	2303      	movs	r3, #3
 8001f44:	763b      	strb	r3, [r7, #24]
						break;
 8001f46:	e0f4      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						case cmdWrite://"write:'0x0:0x55:256'" //adr:byte:len
						{
							bool hex = false;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
							uki = strstr(uk, "0x");
 8001f4e:	4912      	ldr	r1, [pc, #72]	; (8001f98 <HAL_UART_RxCpltCallback+0x2a4>)
 8001f50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f52:	f00a fa18 	bl	800c386 <strstr>
 8001f56:	6378      	str	r0, [r7, #52]	; 0x34
							if (uki) {
 8001f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d022      	beq.n	8001fa4 <HAL_UART_RxCpltCallback+0x2b0>
								if (uki == uk) {
 8001f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d120      	bne.n	8001fa8 <HAL_UART_RxCpltCallback+0x2b4>
									uki += 2;
 8001f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f68:	3302      	adds	r3, #2
 8001f6a:	637b      	str	r3, [r7, #52]	; 0x34
									hex = true;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001f72:	e019      	b.n	8001fa8 <HAL_UART_RxCpltCallback+0x2b4>
 8001f74:	40004800 	.word	0x40004800
 8001f78:	20001340 	.word	0x20001340
 8001f7c:	20001342 	.word	0x20001342
 8001f80:	20000b40 	.word	0x20000b40
 8001f84:	2000032d 	.word	0x2000032d
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20001350 	.word	0x20001350
 8001f90:	20001344 	.word	0x20001344
 8001f94:	20000044 	.word	0x20000044
 8001f98:	0800cdbc 	.word	0x0800cdbc
 8001f9c:	2000134c 	.word	0x2000134c
 8001fa0:	20001348 	.word	0x20001348
								}
							} else uki = uk;
 8001fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
							uke = strchr(uki, ':');//adr:byte
 8001fa8:	213a      	movs	r1, #58	; 0x3a
 8001faa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fac:	f00a f9c3 	bl	800c336 <strchr>
 8001fb0:	62b8      	str	r0, [r7, #40]	; 0x28
							if (uke) {
 8001fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80b9 	beq.w	800212c <HAL_UART_RxCpltCallback+0x438>
								ukb = uke + 1;
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	633b      	str	r3, [r7, #48]	; 0x30
								char tmp[16];
								memset(tmp, 0, 16);
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	2210      	movs	r2, #16
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f00a f80d 	bl	800bfe8 <memset>
								memcpy(tmp, uki, uke - uki);
 8001fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f107 0308 	add.w	r3, r7, #8
 8001fda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f009 fff5 	bl	800bfcc <memcpy>
								if (hex) nandAdr = hex2bin(tmp, strlen(tmp));
 8001fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d010      	beq.n	800200c <HAL_UART_RxCpltCallback+0x318>
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe f8ee 	bl	80001d0 <strlen>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	f107 0308 	add.w	r3, r7, #8
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fbd8 	bl	80017b4 <hex2bin>
 8002004:	4603      	mov	r3, r0
 8002006:	4a71      	ldr	r2, [pc, #452]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e008      	b.n	800201e <HAL_UART_RxCpltCallback+0x32a>
								    else nandAdr = atol(tmp);
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	4618      	mov	r0, r3
 8002012:	f009 feef 	bl	800bdf4 <atol>
 8002016:	4603      	mov	r3, r0
 8002018:	461a      	mov	r2, r3
 800201a:	4b6c      	ldr	r3, [pc, #432]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 800201c:	601a      	str	r2, [r3, #0]
								uki = ukb;
 800201e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002020:	637b      	str	r3, [r7, #52]	; 0x34
								uke = strchr(uki, ':');//byte:len
 8002022:	213a      	movs	r1, #58	; 0x3a
 8002024:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002026:	f00a f986 	bl	800c336 <strchr>
 800202a:	62b8      	str	r0, [r7, #40]	; 0x28
								if (uke) {
 800202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_UART_RxCpltCallback+0x356>
									nandLen = atol(uke + 1);
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	3301      	adds	r3, #1
 8002036:	4618      	mov	r0, r3
 8002038:	f009 fedc 	bl	800bdf4 <atol>
 800203c:	4603      	mov	r3, r0
 800203e:	b29a      	uxth	r2, r3
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_UART_RxCpltCallback+0x4dc>)
 8002042:	801a      	strh	r2, [r3, #0]
									*uke = '\0';
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
								}
								if (strstr(ukb, "0x")) {
 800204a:	4962      	ldr	r1, [pc, #392]	; (80021d4 <HAL_UART_RxCpltCallback+0x4e0>)
 800204c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800204e:	f00a f99a 	bl	800c386 <strstr>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_UART_RxCpltCallback+0x372>
									ukb += 2;
 8002058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205a:	3302      	adds	r3, #2
 800205c:	633b      	str	r3, [r7, #48]	; 0x30
									hex = true;
 800205e:	2301      	movs	r3, #1
 8002060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8002064:	e002      	b.n	800206c <HAL_UART_RxCpltCallback+0x378>
								} else hex = false;
 8002066:	2300      	movs	r3, #0
 8002068:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
								if (hex) nandByte = (uint8_t)hex2bin(ukb, strlen(ukb));
 800206c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <HAL_UART_RxCpltCallback+0x39c>
 8002074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002076:	f7fe f8ab 	bl	80001d0 <strlen>
 800207a:	4603      	mov	r3, r0
 800207c:	b2db      	uxtb	r3, r3
 800207e:	4619      	mov	r1, r3
 8002080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002082:	f7ff fb97 	bl	80017b4 <hex2bin>
 8002086:	4603      	mov	r3, r0
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_UART_RxCpltCallback+0x4e4>)
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e006      	b.n	800209e <HAL_UART_RxCpltCallback+0x3aa>
								    else nandByte = (uint8_t)atol(ukb);
 8002090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002092:	f009 feaf 	bl	800bdf4 <atol>
 8002096:	4603      	mov	r3, r0
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b4f      	ldr	r3, [pc, #316]	; (80021d8 <HAL_UART_RxCpltCallback+0x4e4>)
 800209c:	701a      	strb	r2, [r3, #0]
								nandAdr += devAdr;
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	4b4e      	ldr	r3, [pc, #312]	; (80021dc <HAL_UART_RxCpltCallback+0x4e8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	4a48      	ldr	r2, [pc, #288]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 80020aa:	6013      	str	r3, [r2, #0]
								check = true;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								qcmd.cmd = cmdWrite;
 80020b2:	2304      	movs	r3, #4
 80020b4:	763b      	strb	r3, [r7, #24]
							}
						}
						break;
 80020b6:	e039      	b.n	800212c <HAL_UART_RxCpltCallback+0x438>
						case cmdErase://"erase:0" or "erase:all" //erase:block_number from 0..1023
							if (strstr(uk, "all")) {
 80020b8:	4949      	ldr	r1, [pc, #292]	; (80021e0 <HAL_UART_RxCpltCallback+0x4ec>)
 80020ba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020bc:	f00a f963 	bl	800c386 <strstr>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <HAL_UART_RxCpltCallback+0x3d8>
								qcmd.attr = 1;
 80020c6:	2301      	movs	r3, #1
 80020c8:	767b      	strb	r3, [r7, #25]
 80020ca:	e00c      	b.n	80020e6 <HAL_UART_RxCpltCallback+0x3f2>
							} else {
								uint32_t blk = atol(uk);
 80020cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020ce:	f009 fe91 	bl	800bdf4 <atol>
 80020d2:	4603      	mov	r3, r0
 80020d4:	623b      	str	r3, [r7, #32]
								if (blk < chipConf.BlockNbr) nandBlk = blk;
 80020d6:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	6a3a      	ldr	r2, [r7, #32]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d202      	bcs.n	80020e6 <HAL_UART_RxCpltCallback+0x3f2>
 80020e0:	4a41      	ldr	r2, [pc, #260]	; (80021e8 <HAL_UART_RxCpltCallback+0x4f4>)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	6013      	str	r3, [r2, #0]
							}
							qcmd.cmd = cmdErase;
 80020e6:	2305      	movs	r3, #5
 80020e8:	763b      	strb	r3, [r7, #24]
							cmd_flag = 1;
 80020ea:	4b40      	ldr	r3, [pc, #256]	; (80021ec <HAL_UART_RxCpltCallback+0x4f8>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
						break;
 80020f0:	e01f      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						case cmdCheck://"check:0" //check:page //(chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr
						{
							uint32_t page = atol(uk);
 80020f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020f4:	f009 fe7e 	bl	800bdf4 <atol>
 80020f8:	4603      	mov	r3, r0
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
							if (page < ((chipConf.BlockSize / chipConf.PageSize) * chipConf.BlockNbr)) {//(128K / 2K) * 1024 = 65536
 80020fc:	4b39      	ldr	r3, [pc, #228]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	4b38      	ldr	r3, [pc, #224]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 800210a:	68d2      	ldr	r2, [r2, #12]
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	429a      	cmp	r2, r3
 8002114:	d20c      	bcs.n	8002130 <HAL_UART_RxCpltCallback+0x43c>
								nandPage = page;
 8002116:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_UART_RxCpltCallback+0x4fc>)
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211a:	6013      	str	r3, [r2, #0]
								qcmd.cmd = cmdCheck;
 800211c:	2306      	movs	r3, #6
 800211e:	763b      	strb	r3, [r7, #24]
								cmd_flag = 1;
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_UART_RxCpltCallback+0x4f8>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
							}
						}
						break;
 8002126:	e003      	b.n	8002130 <HAL_UART_RxCpltCallback+0x43c>
						break;
 8002128:	bf00      	nop
 800212a:	e002      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						break;
 800212c:	bf00      	nop
 800212e:	e000      	b.n	8002132 <HAL_UART_RxCpltCallback+0x43e>
						break;
 8002130:	bf00      	nop
					}
					if (check) {
 8002132:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8002136:	2b00      	cmp	r3, #0
 8002138:	d01b      	beq.n	8002172 <HAL_UART_RxCpltCallback+0x47e>
						if ((nandAdr + nandLen) >= (chipConf.PlaneSize + devAdr)) {
 800213a:	4b25      	ldr	r3, [pc, #148]	; (80021d0 <HAL_UART_RxCpltCallback+0x4dc>)
 800213c:	881b      	ldrh	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	4b22      	ldr	r3, [pc, #136]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	441a      	add	r2, r3
 8002146:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 8002148:	6959      	ldr	r1, [r3, #20]
 800214a:	4b24      	ldr	r3, [pc, #144]	; (80021dc <HAL_UART_RxCpltCallback+0x4e8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	440b      	add	r3, r1
 8002150:	429a      	cmp	r2, r3
 8002152:	d30b      	bcc.n	800216c <HAL_UART_RxCpltCallback+0x478>
							nandLen = chipConf.PlaneSize - nandAdr - 1;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_UART_RxCpltCallback+0x4f0>)
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	b29a      	uxth	r2, r3
 800215a:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <HAL_UART_RxCpltCallback+0x4d8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_UART_RxCpltCallback+0x4dc>)
 800216a:	801a      	strh	r2, [r3, #0]
						}
						cmd_flag = 1;
 800216c:	4b1f      	ldr	r3, [pc, #124]	; (80021ec <HAL_UART_RxCpltCallback+0x4f8>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
					}
					//
					if (cmd_flag) {
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_UART_RxCpltCallback+0x4f8>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d015      	beq.n	80021a6 <HAL_UART_RxCpltCallback+0x4b2>
						if ((qStat = osMessageQueuePut(myQueHandle, (void *)&qcmd, 5, 0)) != osOK) devError |= devQUE;
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <HAL_UART_RxCpltCallback+0x500>)
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	f107 0118 	add.w	r1, r7, #24
 8002182:	2300      	movs	r3, #0
 8002184:	2205      	movs	r2, #5
 8002186:	f006 ff37 	bl	8008ff8 <osMessageQueuePut>
 800218a:	4603      	mov	r3, r0
 800218c:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <HAL_UART_RxCpltCallback+0x504>)
 800218e:	6013      	str	r3, [r2, #0]
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_UART_RxCpltCallback+0x504>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_UART_RxCpltCallback+0x4b2>
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_UART_RxCpltCallback+0x508>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HAL_UART_RxCpltCallback+0x508>)
 80021a4:	701a      	strb	r2, [r3, #0]
					}
					//
				}
			}
			ruk = 0;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_UART_RxCpltCallback+0x50c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	801a      	strh	r2, [r3, #0]
			memset(rxBuf, 0, MAX_UART_BUF);
 80021ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021b0:	2100      	movs	r1, #0
 80021b2:	4814      	ldr	r0, [pc, #80]	; (8002204 <HAL_UART_RxCpltCallback+0x510>)
 80021b4:	f009 ff18 	bl	800bfe8 <memset>
		}

		HAL_UART_Receive_IT(huart, &rxByte, 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	4913      	ldr	r1, [pc, #76]	; (8002208 <HAL_UART_RxCpltCallback+0x514>)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f005 fbb4 	bl	800792a <HAL_UART_Receive_IT>
	}
}
 80021c2:	bf00      	nop
 80021c4:	3740      	adds	r7, #64	; 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000134c 	.word	0x2000134c
 80021d0:	20001350 	.word	0x20001350
 80021d4:	0800cdbc 	.word	0x0800cdbc
 80021d8:	20000060 	.word	0x20000060
 80021dc:	20001348 	.word	0x20001348
 80021e0:	0800cdc0 	.word	0x0800cdc0
 80021e4:	20001368 	.word	0x20001368
 80021e8:	20001354 	.word	0x20001354
 80021ec:	2000032d 	.word	0x2000032d
 80021f0:	20001358 	.word	0x20001358
 80021f4:	20000324 	.word	0x20000324
 80021f8:	20001388 	.word	0x20001388
 80021fc:	2000032c 	.word	0x2000032c
 8002200:	20001342 	.word	0x20001342
 8002204:	20000b40 	.word	0x20000b40
 8002208:	20001340 	.word	0x20001340

0800220c <HAL_UART_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {// portLOG - log
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a05      	ldr	r2, [pc, #20]	; (8002230 <HAL_UART_TxCpltCallback+0x24>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d102      	bne.n	8002224 <HAL_UART_TxCpltCallback+0x18>
		uartRdy = true;
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_UART_TxCpltCallback+0x28>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
	}
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40004800 	.word	0x40004800
 8002234:	20000040 	.word	0x20000040

08002238 <HAL_SPI_TxCpltCallback>:
//-------------------------------------------------------------------------------------------
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <HAL_SPI_TxCpltCallback+0x24>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d102      	bne.n	8002250 <HAL_SPI_TxCpltCallback+0x18>
		spiRdy = true;
 800224a:	4b05      	ldr	r3, [pc, #20]	; (8002260 <HAL_SPI_TxCpltCallback+0x28>)
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
	}
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40013000 	.word	0x40013000
 8002260:	20000041 	.word	0x20000041

08002264 <HAL_NAND_ITCallback>:
	}
}
*/
//-------------------------------------------------------------------------------------------
void HAL_NAND_ITCallback(NAND_HandleTypeDef *hnand)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	if (hnand->Instance == FSMC_NAND_DEVICE) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a06      	ldr	r2, [pc, #24]	; (800228c <HAL_NAND_ITCallback+0x28>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d104      	bne.n	8002280 <HAL_NAND_ITCallback+0x1c>
		cb_nandCounter++;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_NAND_ITCallback+0x2c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	3301      	adds	r3, #1
 800227c:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_NAND_ITCallback+0x2c>)
 800227e:	6013      	str	r3, [r2, #0]
	}
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	a0000060 	.word	0xa0000060
 8002290:	2000135c 	.word	0x2000135c

08002294 <nand_PageToBlock>:
//-------------------------------------------------------------------------------------------
uint32_t nand_PageToBlock(const uint32_t page)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
    return (page * chipConf.PageSize) / chipConf.BlockSize;
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <nand_PageToBlock+0x28>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	fb03 f202 	mul.w	r2, r3, r2
 80022a6:	4b05      	ldr	r3, [pc, #20]	; (80022bc <nand_PageToBlock+0x28>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20001368 	.word	0x20001368

080022c0 <nand_BlockToPage>:
//-------------------------------------------------------------------------------------------
uint32_t nand_BlockToPage(const uint32_t blk)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	return (blk * chipConf.BlockSize) / chipConf.PageSize;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <nand_BlockToPage+0x28>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	fb03 f202 	mul.w	r2, r3, r2
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <nand_BlockToPage+0x28>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20001368 	.word	0x20001368

080022ec <showBuf>:
	return ret;
}
*/
//-------------------------------------------------------------------------------------------
void showBuf(uint8_t type, bool rd, uint32_t adr, uint32_t len, const uint8_t *buf)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08e      	sub	sp, #56	; 0x38
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	60ba      	str	r2, [r7, #8]
 80022f4:	607b      	str	r3, [r7, #4]
 80022f6:	4603      	mov	r3, r0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	460b      	mov	r3, r1
 80022fc:	73bb      	strb	r3, [r7, #14]
//uint32_t adr = nandAdr;
int step = 32;
 80022fe:	2320      	movs	r3, #32
 8002300:	617b      	str	r3, [r7, #20]
uint32_t ind = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	62fb      	str	r3, [r7, #44]	; 0x2c
uint32_t max_ind = len;//nandLen;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	62bb      	str	r3, [r7, #40]	; 0x28

	if (type == 2) {
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d10e      	bne.n	800232e <showBuf+0x42>
		if (rd) {
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <showBuf+0x3e>
			ind = adr & (chipConf.PageSize - 1);// - devAdr;
 8002316:	4b46      	ldr	r3, [pc, #280]	; (8002430 <showBuf+0x144>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
			max_ind = chipConf.PageSize;
 8002322:	4b43      	ldr	r3, [pc, #268]	; (8002430 <showBuf+0x144>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	62bb      	str	r3, [r7, #40]	; 0x28
 8002328:	e001      	b.n	800232e <showBuf+0x42>
		} else ind = max_ind;
 800232a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (ind < max_ind) {
 800232e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	429a      	cmp	r2, r3
 8002334:	d26d      	bcs.n	8002412 <showBuf+0x126>
		bool done = false;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint32_t ix = 0, sch = len / step;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	61fb      	str	r3, [r7, #28]
		if (len % step) sch++;
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002352:	fb01 f202 	mul.w	r2, r1, r2
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <showBuf+0x76>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	61fb      	str	r3, [r7, #28]
		stx[0] = '\0';
 8002362:	4b34      	ldr	r3, [pc, #208]	; (8002434 <showBuf+0x148>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
		while (!done) {
 8002368:	e046      	b.n	80023f8 <showBuf+0x10c>
			sprintf(stx+strlen(stx), "%08X ", (unsigned int)adr);
 800236a:	4832      	ldr	r0, [pc, #200]	; (8002434 <showBuf+0x148>)
 800236c:	f7fd ff30 	bl	80001d0 <strlen>
 8002370:	4603      	mov	r3, r0
 8002372:	4a30      	ldr	r2, [pc, #192]	; (8002434 <showBuf+0x148>)
 8002374:	4413      	add	r3, r2
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	492f      	ldr	r1, [pc, #188]	; (8002438 <showBuf+0x14c>)
 800237a:	4618      	mov	r0, r3
 800237c:	f009 ffac 	bl	800c2d8 <siprintf>
			for (int i = 0; i < step; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e01d      	b.n	80023c2 <showBuf+0xd6>
				sprintf(stx+strlen(stx), " %02X", *(buf + i + ind));
 8002386:	482b      	ldr	r0, [pc, #172]	; (8002434 <showBuf+0x148>)
 8002388:	f7fd ff22 	bl	80001d0 <strlen>
 800238c:	4603      	mov	r3, r0
 800238e:	4a29      	ldr	r2, [pc, #164]	; (8002434 <showBuf+0x148>)
 8002390:	1898      	adds	r0, r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	4413      	add	r3, r2
 8002398:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800239a:	4413      	add	r3, r2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	461a      	mov	r2, r3
 80023a0:	4926      	ldr	r1, [pc, #152]	; (800243c <showBuf+0x150>)
 80023a2:	f009 ff99 	bl	800c2d8 <siprintf>
				ix++;
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	3301      	adds	r3, #1
 80023aa:	623b      	str	r3, [r7, #32]
				if (ix == len) {
 80023ac:	6a3a      	ldr	r2, [r7, #32]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d103      	bne.n	80023bc <showBuf+0xd0>
					done = true;
 80023b4:	2301      	movs	r3, #1
 80023b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
 80023ba:	e006      	b.n	80023ca <showBuf+0xde>
			for (int i = 0; i < step; i++) {
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	3301      	adds	r3, #1
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbdd      	blt.n	8002386 <showBuf+0x9a>
				}
			}
			strcat(stx, eol);
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <showBuf+0x154>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	4818      	ldr	r0, [pc, #96]	; (8002434 <showBuf+0x148>)
 80023d2:	f009 ffa1 	bl	800c318 <strcat>
			adr += step;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	4413      	add	r3, r2
 80023dc:	60bb      	str	r3, [r7, #8]
			ind += step;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023e2:	4413      	add	r3, r2
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
			sch--;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	61fb      	str	r3, [r7, #28]
			if (!sch) done = true;
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <showBuf+0x10c>
 80023f2:	2301      	movs	r3, #1
 80023f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!done) {
 80023f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1b1      	bne.n	800236a <showBuf+0x7e>
		}
		Report(0, "%s", stx);
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <showBuf+0x148>)
 8002408:	490e      	ldr	r1, [pc, #56]	; (8002444 <showBuf+0x158>)
 800240a:	2000      	movs	r0, #0
 800240c:	f7ff fc0e 	bl	8001c2c <Report>
	} else {
		Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
	}
}
 8002410:	e00a      	b.n	8002428 <showBuf+0x13c>
		Report(0, "\tError: ind=%lu max_ind=%lu readed=%d%s", ind, max_ind, rd, eol);
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <showBuf+0x154>)
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	9201      	str	r2, [sp, #4]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002420:	4909      	ldr	r1, [pc, #36]	; (8002448 <showBuf+0x15c>)
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff fc02 	bl	8001c2c <Report>
}
 8002428:	bf00      	nop
 800242a:	3730      	adds	r7, #48	; 0x30
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20001368 	.word	0x20001368
 8002434:	2000138c 	.word	0x2000138c
 8002438:	0800cdc4 	.word	0x0800cdc4
 800243c:	0800cdcc 	.word	0x0800cdcc
 8002440:	20000004 	.word	0x20000004
 8002444:	0800cdd4 	.word	0x0800cdd4
 8002448:	0800cdd8 	.word	0x0800cdd8
 800244c:	00000000 	.word	0x00000000

08002450 <defThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_defThread */
void defThread(void *argument)
{
 8002450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002452:	b0a9      	sub	sp, #164	; 0xa4
 8002454:	af06      	add	r7, sp, #24
 8002456:	6078      	str	r0, [r7, #4]
#ifdef SET_SWV
	char stz[MAX_TMP_SIZE];
#endif


	HAL_Delay(500);
 8002458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800245c:	f001 fc80 	bl	8003d60 <HAL_Delay>
	Report(0, "%s", eol);
 8002460:	4ba5      	ldr	r3, [pc, #660]	; (80026f8 <defThread+0x2a8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	49a5      	ldr	r1, [pc, #660]	; (80026fc <defThread+0x2ac>)
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff fbdf 	bl	8001c2c <Report>
	Report(1, "%s Старт '%s' memory:%lu/%lu bytes%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 800246e:	4ba4      	ldr	r3, [pc, #656]	; (8002700 <defThread+0x2b0>)
 8002470:	681c      	ldr	r4, [r3, #0]
 8002472:	f009 fb8f 	bl	800bb94 <xPortGetFreeHeapSize>
 8002476:	4602      	mov	r2, r0
 8002478:	4b9f      	ldr	r3, [pc, #636]	; (80026f8 <defThread+0x2a8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	9302      	str	r3, [sp, #8]
 800247e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	9200      	str	r2, [sp, #0]
 8002486:	4b9f      	ldr	r3, [pc, #636]	; (8002704 <defThread+0x2b4>)
 8002488:	4622      	mov	r2, r4
 800248a:	499f      	ldr	r1, [pc, #636]	; (8002708 <defThread+0x2b8>)
 800248c:	2001      	movs	r0, #1
 800248e:	f7ff fbcd 	bl	8001c2c <Report>


	uint8_t next_block_erase = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	uint32_t iBlk, stik;
	NAND_AddressTypeDef clr = {
 8002498:	2300      	movs	r3, #0
 800249a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800249e:	2301      	movs	r3, #1
 80024a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80024a4:	2300      	movs	r3, #0
 80024a6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		.Page = 0,
		.Plane = 1,
		.Block = 0
	};
	uint8_t nand_show = 0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
	bool readed = false;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
	char cid[32];
	if (nandState == HAL_NAND_STATE_READY) {
 80024b6:	4b95      	ldr	r3, [pc, #596]	; (800270c <defThread+0x2bc>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d15b      	bne.n	8002576 <defThread+0x126>
		if (nandID.Device_Id == chipIDcode) strncpy(cid, chipID, sizeof(cid));
 80024be:	4b94      	ldr	r3, [pc, #592]	; (8002710 <defThread+0x2c0>)
 80024c0:	785b      	ldrb	r3, [r3, #1]
 80024c2:	22f1      	movs	r2, #241	; 0xf1
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d108      	bne.n	80024da <defThread+0x8a>
 80024c8:	4b92      	ldr	r3, [pc, #584]	; (8002714 <defThread+0x2c4>)
 80024ca:	6819      	ldr	r1, [r3, #0]
 80024cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d0:	2220      	movs	r2, #32
 80024d2:	4618      	mov	r0, r3
 80024d4:	f009 ff44 	bl	800c360 <strncpy>
 80024d8:	e006      	b.n	80024e8 <defThread+0x98>
		                               else strcpy(cid, "UNKNOWN");
 80024da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024de:	4a8e      	ldr	r2, [pc, #568]	; (8002718 <defThread+0x2c8>)
 80024e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024e4:	e883 0003 	stmia.w	r3, {r0, r1}
		strcpy(stx, "NAND:");
 80024e8:	4b8c      	ldr	r3, [pc, #560]	; (800271c <defThread+0x2cc>)
 80024ea:	4a8d      	ldr	r2, [pc, #564]	; (8002720 <defThread+0x2d0>)
 80024ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024f0:	6018      	str	r0, [r3, #0]
 80024f2:	3304      	adds	r3, #4
 80024f4:	8019      	strh	r1, [r3, #0]
		uint8_t *bid = (uint8_t *)&nandID.Maker_Id;
 80024f6:	4b86      	ldr	r3, [pc, #536]	; (8002710 <defThread+0x2c0>)
 80024f8:	66bb      	str	r3, [r7, #104]	; 0x68
		for (int8_t i = 0; i < sizeof(NAND_IDsTypeDef); i++) sprintf(stx+strlen(stx), " %02X", *(bid + i));
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 8002500:	e015      	b.n	800252e <defThread+0xde>
 8002502:	4886      	ldr	r0, [pc, #536]	; (800271c <defThread+0x2cc>)
 8002504:	f7fd fe64 	bl	80001d0 <strlen>
 8002508:	4603      	mov	r3, r0
 800250a:	4a84      	ldr	r2, [pc, #528]	; (800271c <defThread+0x2cc>)
 800250c:	1898      	adds	r0, r3, r2
 800250e:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8002512:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002514:	4413      	add	r3, r2
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4982      	ldr	r1, [pc, #520]	; (8002724 <defThread+0x2d4>)
 800251c:	f009 fedc 	bl	800c2d8 <siprintf>
 8002520:	f997 3079 	ldrsb.w	r3, [r7, #121]	; 0x79
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3301      	adds	r3, #1
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
 800252e:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
 8002532:	2b04      	cmp	r3, #4
 8002534:	d9e5      	bls.n	8002502 <defThread+0xb2>
		sprintf(stx+strlen(stx),
 8002536:	4879      	ldr	r0, [pc, #484]	; (800271c <defThread+0x2cc>)
 8002538:	f7fd fe4a 	bl	80001d0 <strlen>
 800253c:	4603      	mov	r3, r0
 800253e:	4a77      	ldr	r2, [pc, #476]	; (800271c <defThread+0x2cc>)
 8002540:	1898      	adds	r0, r3, r2
				"\n\tMakerID=%02X\n\tDevice_Id=%02X '%s'\n\tThird_Id=%02X\n\tFourth_Id=%02X\n\tPlane_Id=%02X",
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002542:	4b73      	ldr	r3, [pc, #460]	; (8002710 <defThread+0x2c0>)
 8002544:	781b      	ldrb	r3, [r3, #0]
		sprintf(stx+strlen(stx),
 8002546:	461c      	mov	r4, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002548:	4b71      	ldr	r3, [pc, #452]	; (8002710 <defThread+0x2c0>)
 800254a:	785b      	ldrb	r3, [r3, #1]
		sprintf(stx+strlen(stx),
 800254c:	461d      	mov	r5, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800254e:	4b70      	ldr	r3, [pc, #448]	; (8002710 <defThread+0x2c0>)
 8002550:	789b      	ldrb	r3, [r3, #2]
		sprintf(stx+strlen(stx),
 8002552:	461a      	mov	r2, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 8002554:	4b6e      	ldr	r3, [pc, #440]	; (8002710 <defThread+0x2c0>)
 8002556:	78db      	ldrb	r3, [r3, #3]
		sprintf(stx+strlen(stx),
 8002558:	4619      	mov	r1, r3
			    nandID.Maker_Id, nandID.Device_Id, cid, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
 800255a:	4b6d      	ldr	r3, [pc, #436]	; (8002710 <defThread+0x2c0>)
 800255c:	791b      	ldrb	r3, [r3, #4]
		sprintf(stx+strlen(stx),
 800255e:	9303      	str	r3, [sp, #12]
 8002560:	9102      	str	r1, [sp, #8]
 8002562:	9201      	str	r2, [sp, #4]
 8002564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	462b      	mov	r3, r5
 800256c:	4622      	mov	r2, r4
 800256e:	496e      	ldr	r1, [pc, #440]	; (8002728 <defThread+0x2d8>)
 8002570:	f009 feb2 	bl	800c2d8 <siprintf>
 8002574:	e00c      	b.n	8002590 <defThread+0x140>
	} else {
			sprintf(stx,
					"NAND: Error nandStatus='%s'(%d)",
					nandAllState[nandState & (MAX_NAND_STATE - 1)], nandState);
 8002576:	4b65      	ldr	r3, [pc, #404]	; (800270c <defThread+0x2bc>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	f003 0303 	and.w	r3, r3, #3
			sprintf(stx,
 800257e:	4a6b      	ldr	r2, [pc, #428]	; (800272c <defThread+0x2dc>)
 8002580:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002584:	4b61      	ldr	r3, [pc, #388]	; (800270c <defThread+0x2bc>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4969      	ldr	r1, [pc, #420]	; (8002730 <defThread+0x2e0>)
 800258a:	4864      	ldr	r0, [pc, #400]	; (800271c <defThread+0x2cc>)
 800258c:	f009 fea4 	bl	800c2d8 <siprintf>
	}
	Report(1, "%s%s", stx, eol);
 8002590:	4b59      	ldr	r3, [pc, #356]	; (80026f8 <defThread+0x2a8>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a61      	ldr	r2, [pc, #388]	; (800271c <defThread+0x2cc>)
 8002596:	4967      	ldr	r1, [pc, #412]	; (8002734 <defThread+0x2e4>)
 8002598:	2001      	movs	r0, #1
 800259a:	f7ff fb47 	bl	8001c2c <Report>


	uint16_t err_color = BLACK;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	ST7789_Fill(0, 0, ST7789_WIDTH - 1, fntKey->height, YELLOW);
 80025a4:	4b64      	ldr	r3, [pc, #400]	; (8002738 <defThread+0x2e8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025b0:	9200      	str	r2, [sp, #0]
 80025b2:	22ef      	movs	r2, #239	; 0xef
 80025b4:	2100      	movs	r1, #0
 80025b6:	2000      	movs	r0, #0
 80025b8:	f000 ff03 	bl	80033c2 <ST7789_Fill>
	ST7789_Fill(0, ST7789_WIDTH - fntKey->height, ST7789_WIDTH - 1, ST7789_HEIGHT - 1, WHITE);
 80025bc:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <defThread+0x2e8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	785b      	ldrb	r3, [r3, #1]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80025c8:	b299      	uxth	r1, r3
 80025ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ce:	9300      	str	r3, [sp, #0]
 80025d0:	23ef      	movs	r3, #239	; 0xef
 80025d2:	22ef      	movs	r2, #239	; 0xef
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 fef4 	bl	80033c2 <ST7789_Fill>

	sprintf(stx, "NAND : %s", cid);
 80025da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025de:	461a      	mov	r2, r3
 80025e0:	4956      	ldr	r1, [pc, #344]	; (800273c <defThread+0x2ec>)
 80025e2:	484e      	ldr	r0, [pc, #312]	; (800271c <defThread+0x2cc>)
 80025e4:	f009 fe78 	bl	800c2d8 <siprintf>
	mkLineCenter(stx, ST7789_WIDTH / tFont->width);
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <defThread+0x2f0>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	23f0      	movs	r3, #240	; 0xf0
 80025f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	4619      	mov	r1, r3
 80025fa:	4848      	ldr	r0, [pc, #288]	; (800271c <defThread+0x2cc>)
 80025fc:	f000 ffee 	bl	80035dc <mkLineCenter>
	//sprintf(stx+strlen(stx), "Maker:0x%02X\nchipID:0x%02X\n3-rd:0x%02X\n4-th:0x%02X\n5-th:0x%02X",
	//		                 nandID.Maker_Id, nandID.Device_Id, nandID.Third_Id, nandID.Fourth_Id, nandID.Plane_Id);
	sprintf(stx+strlen(stx),
 8002600:	4846      	ldr	r0, [pc, #280]	; (800271c <defThread+0x2cc>)
 8002602:	f7fd fde5 	bl	80001d0 <strlen>
 8002606:	4603      	mov	r3, r0
 8002608:	4a44      	ldr	r2, [pc, #272]	; (800271c <defThread+0x2cc>)
 800260a:	189c      	adds	r4, r3, r2
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <defThread+0x2f4>)
 800260e:	681d      	ldr	r5, [r3, #0]
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <defThread+0x2f4>)
 8002612:	685e      	ldr	r6, [r3, #4]
			"PageSize:%lu\nSpareAreaSize:%lu\nBlockSize:%lu KB\nBlockNbr:%lu\nPlaneNbr:%lu\nPlaneSize:%lu MB",
			chipConf.PageSize,
			chipConf.SpareAreaSize,
			chipConf.BlockSize / 1024,
 8002614:	4b4b      	ldr	r3, [pc, #300]	; (8002744 <defThread+0x2f4>)
 8002616:	689b      	ldr	r3, [r3, #8]
	sprintf(stx+strlen(stx),
 8002618:	0a9b      	lsrs	r3, r3, #10
 800261a:	4a4a      	ldr	r2, [pc, #296]	; (8002744 <defThread+0x2f4>)
 800261c:	68d2      	ldr	r2, [r2, #12]
 800261e:	4949      	ldr	r1, [pc, #292]	; (8002744 <defThread+0x2f4>)
 8002620:	6909      	ldr	r1, [r1, #16]
			chipConf.BlockNbr,
			chipConf.PlaneNbr,
			chipConf.PlaneSize / 1024 / 1024);
 8002622:	4848      	ldr	r0, [pc, #288]	; (8002744 <defThread+0x2f4>)
 8002624:	6940      	ldr	r0, [r0, #20]
	sprintf(stx+strlen(stx),
 8002626:	0d00      	lsrs	r0, r0, #20
 8002628:	9003      	str	r0, [sp, #12]
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4633      	mov	r3, r6
 8002632:	462a      	mov	r2, r5
 8002634:	4944      	ldr	r1, [pc, #272]	; (8002748 <defThread+0x2f8>)
 8002636:	4620      	mov	r0, r4
 8002638:	f009 fe4e 	bl	800c2d8 <siprintf>
	if (cb_nandCounter) sprintf(stx+strlen(stx), "\nCallBack:%lu", cb_nandCounter);
 800263c:	4b43      	ldr	r3, [pc, #268]	; (800274c <defThread+0x2fc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <defThread+0x20c>
 8002644:	4835      	ldr	r0, [pc, #212]	; (800271c <defThread+0x2cc>)
 8002646:	f7fd fdc3 	bl	80001d0 <strlen>
 800264a:	4603      	mov	r3, r0
 800264c:	4a33      	ldr	r2, [pc, #204]	; (800271c <defThread+0x2cc>)
 800264e:	4413      	add	r3, r2
 8002650:	4a3e      	ldr	r2, [pc, #248]	; (800274c <defThread+0x2fc>)
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	493e      	ldr	r1, [pc, #248]	; (8002750 <defThread+0x300>)
 8002656:	4618      	mov	r0, r3
 8002658:	f009 fe3e 	bl	800c2d8 <siprintf>
	ST7789_WriteString(0,
					   tFont->height + (tFont->height * 0.85),
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <defThread+0x2f0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	785b      	ldrb	r3, [r3, #1]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe f888 	bl	8000778 <__aeabi_i2d>
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <defThread+0x2f0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe f880 	bl	8000778 <__aeabi_i2d>
 8002678:	a31d      	add	r3, pc, #116	; (adr r3, 80026f0 <defThread+0x2a0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fd fdff 	bl	8000280 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd ff29 	bl	80004e0 <__adddf3>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
	ST7789_WriteString(0,
 8002692:	4610      	mov	r0, r2
 8002694:	4619      	mov	r1, r3
 8002696:	f7fe f8d9 	bl	800084c <__aeabi_d2uiz>
 800269a:	4603      	mov	r3, r0
 800269c:	b298      	uxth	r0, r3
 800269e:	4b28      	ldr	r3, [pc, #160]	; (8002740 <defThread+0x2f0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <defThread+0x304>)
 80026a4:	8812      	ldrh	r2, [r2, #0]
 80026a6:	43d2      	mvns	r2, r2
 80026a8:	b292      	uxth	r2, r2
 80026aa:	492a      	ldr	r1, [pc, #168]	; (8002754 <defThread+0x304>)
 80026ac:	8809      	ldrh	r1, [r1, #0]
 80026ae:	9102      	str	r1, [sp, #8]
 80026b0:	9201      	str	r2, [sp, #4]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	9200      	str	r2, [sp, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a18      	ldr	r2, [pc, #96]	; (800271c <defThread+0x2cc>)
 80026ba:	4601      	mov	r1, r0
 80026bc:	2000      	movs	r0, #0
 80026be:	f000 ff37 	bl	8003530 <ST7789_WriteString>
					   stx,
					   *tFont,
					   ~back_color,
					   back_color);
	ipsOn(1);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f000 fcee 	bl	80030a4 <ipsOn>


	bool loop = true;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
	bool led = false;
 80026ce:	2300      	movs	r3, #0
 80026d0:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	uint32_t tmr = get_tmr(1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff f991 	bl	80019fc <get_tmr>
 80026da:	6738      	str	r0, [r7, #112]	; 0x70

	s_qcmd qcmd = {0};
 80026dc:	2300      	movs	r3, #0
 80026de:	843b      	strh	r3, [r7, #32]
	uint8_t prio = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	77fb      	strb	r3, [r7, #31]
	osStatus_t qs = osOK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Infinite loop */

	while (loop) {
 80026e8:	e363      	b.n	8002db2 <defThread+0x962>
 80026ea:	bf00      	nop
 80026ec:	f3af 8000 	nop.w
 80026f0:	33333333 	.word	0x33333333
 80026f4:	3feb3333 	.word	0x3feb3333
 80026f8:	20000004 	.word	0x20000004
 80026fc:	0800cdd4 	.word	0x0800cdd4
 8002700:	20000000 	.word	0x20000000
 8002704:	0800f250 	.word	0x0800f250
 8002708:	0800ce00 	.word	0x0800ce00
 800270c:	20000061 	.word	0x20000061
 8002710:	20001360 	.word	0x20001360
 8002714:	20000064 	.word	0x20000064
 8002718:	0800ce2c 	.word	0x0800ce2c
 800271c:	2000138c 	.word	0x2000138c
 8002720:	0800ce34 	.word	0x0800ce34
 8002724:	0800cdcc 	.word	0x0800cdcc
 8002728:	0800ce3c 	.word	0x0800ce3c
 800272c:	20000068 	.word	0x20000068
 8002730:	0800ce90 	.word	0x0800ce90
 8002734:	0800ceb0 	.word	0x0800ceb0
 8002738:	20000058 	.word	0x20000058
 800273c:	0800ceb8 	.word	0x0800ceb8
 8002740:	2000005c 	.word	0x2000005c
 8002744:	20001368 	.word	0x20001368
 8002748:	0800cec4 	.word	0x0800cec4
 800274c:	2000135c 	.word	0x2000135c
 8002750:	0800cf20 	.word	0x0800cf20
 8002754:	20001346 	.word	0x20001346

		if (check_tmr(tmr)) {
 8002758:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800275a:	f7ff f95c 	bl	8001a16 <check_tmr>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8082 	beq.w	800286a <defThread+0x41a>
			tmr = get_tmr(1);
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff f948 	bl	80019fc <get_tmr>
 800276c:	6738      	str	r0, [r7, #112]	; 0x70
			//
			sec2str(stx);
 800276e:	48ab      	ldr	r0, [pc, #684]	; (8002a1c <defThread+0x5cc>)
 8002770:	f7ff f9c2 	bl	8001af8 <sec2str>
#ifdef SET_SWV
			strcpy(stz, stx);
#endif
			ST7789_WriteString(8, 0, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, BLUE, YELLOW);
 8002774:	4baa      	ldr	r3, [pc, #680]	; (8002a20 <defThread+0x5d0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	23f0      	movs	r3, #240	; 0xf0
 800277e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002782:	b29b      	uxth	r3, r3
 8002784:	4619      	mov	r1, r3
 8002786:	48a5      	ldr	r0, [pc, #660]	; (8002a1c <defThread+0x5cc>)
 8002788:	f000 ff28 	bl	80035dc <mkLineCenter>
 800278c:	4601      	mov	r1, r0
 800278e:	4ba4      	ldr	r3, [pc, #656]	; (8002a20 <defThread+0x5d0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002796:	9202      	str	r2, [sp, #8]
 8002798:	221f      	movs	r2, #31
 800279a:	9201      	str	r2, [sp, #4]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	9200      	str	r2, [sp, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	460a      	mov	r2, r1
 80027a4:	2100      	movs	r1, #0
 80027a6:	2008      	movs	r0, #8
 80027a8:	f000 fec2 	bl	8003530 <ST7789_WriteString>

			sprintf(stx, "Error: 0x%02X", devError);
 80027ac:	4b9d      	ldr	r3, [pc, #628]	; (8002a24 <defThread+0x5d4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	499d      	ldr	r1, [pc, #628]	; (8002a28 <defThread+0x5d8>)
 80027b4:	4899      	ldr	r0, [pc, #612]	; (8002a1c <defThread+0x5cc>)
 80027b6:	f009 fd8f 	bl	800c2d8 <siprintf>
			if (devError) err_color = RED; else err_color = BLACK;
 80027ba:	4b9a      	ldr	r3, [pc, #616]	; (8002a24 <defThread+0x5d4>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d004      	beq.n	80027cc <defThread+0x37c>
 80027c2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80027ca:	e002      	b.n	80027d2 <defThread+0x382>
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
			ST7789_WriteString(0, ST7789_WIDTH - fntKey->height, mkLineCenter(stx, ST7789_WIDTH / fntKey->width), *fntKey, err_color, WHITE);
 80027d2:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <defThread+0x5d0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	785b      	ldrb	r3, [r3, #1]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80027de:	b29c      	uxth	r4, r3
 80027e0:	4b8f      	ldr	r3, [pc, #572]	; (8002a20 <defThread+0x5d0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	461a      	mov	r2, r3
 80027e8:	23f0      	movs	r3, #240	; 0xf0
 80027ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	488a      	ldr	r0, [pc, #552]	; (8002a1c <defThread+0x5cc>)
 80027f4:	f000 fef2 	bl	80035dc <mkLineCenter>
 80027f8:	4601      	mov	r1, r0
 80027fa:	4b89      	ldr	r3, [pc, #548]	; (8002a20 <defThread+0x5d0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002802:	9202      	str	r2, [sp, #8]
 8002804:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	9200      	str	r2, [sp, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	460a      	mov	r2, r1
 8002812:	4621      	mov	r1, r4
 8002814:	2000      	movs	r0, #0
 8002816:	f000 fe8b 	bl	8003530 <ST7789_WriteString>
			//puts("Second...");
			printf("[%s] %s%s", __func__, stz, eol);
#endif
			//

			if (qStat != 0) {
 800281a:	4b84      	ldr	r3, [pc, #528]	; (8002a2c <defThread+0x5dc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d013      	beq.n	800284a <defThread+0x3fa>
				if (qs != qStat) {
 8002822:	4b82      	ldr	r3, [pc, #520]	; (8002a2c <defThread+0x5dc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002828:	429a      	cmp	r2, r3
 800282a:	d00e      	beq.n	800284a <defThread+0x3fa>
					Report(1, "OS: %s%s", get_qStat(qStat), eol);
 800282c:	4b7f      	ldr	r3, [pc, #508]	; (8002a2c <defThread+0x5dc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7fe ff6f 	bl	8001714 <get_qStat>
 8002836:	4602      	mov	r2, r0
 8002838:	4b7d      	ldr	r3, [pc, #500]	; (8002a30 <defThread+0x5e0>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	497d      	ldr	r1, [pc, #500]	; (8002a34 <defThread+0x5e4>)
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff f9f4 	bl	8001c2c <Report>
					qs = qStat;
 8002844:	4b79      	ldr	r3, [pc, #484]	; (8002a2c <defThread+0x5dc>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	66fb      	str	r3, [r7, #108]	; 0x6c
				}
			}

			if (devError) led = true; else led = false;
 800284a:	4b76      	ldr	r3, [pc, #472]	; (8002a24 <defThread+0x5d4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <defThread+0x40a>
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8002858:	e002      	b.n	8002860 <defThread+0x410>
 800285a:	2300      	movs	r3, #0
 800285c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			errLedOn(led);
 8002860:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff f873 	bl	8001950 <errLedOn>

		}

		if ((qStat = osMessageQueueGet(myQueHandle, (void *)&qcmd, &prio, 10)) != osOK) {
 800286a:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <defThread+0x5e8>)
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	f107 021f 	add.w	r2, r7, #31
 8002872:	f107 0120 	add.w	r1, r7, #32
 8002876:	230a      	movs	r3, #10
 8002878:	f006 fc1e 	bl	80090b8 <osMessageQueueGet>
 800287c:	4603      	mov	r3, r0
 800287e:	4a6b      	ldr	r2, [pc, #428]	; (8002a2c <defThread+0x5dc>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b6a      	ldr	r3, [pc, #424]	; (8002a2c <defThread+0x5dc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d021      	beq.n	80028ce <defThread+0x47e>
			if (qs != qStat) qs = qStat;
 800288a:	4b68      	ldr	r3, [pc, #416]	; (8002a2c <defThread+0x5dc>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002890:	429a      	cmp	r2, r3
 8002892:	d002      	beq.n	800289a <defThread+0x44a>
 8002894:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <defThread+0x5dc>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (qStat != osErrorTimeout) {
 800289a:	4b64      	ldr	r3, [pc, #400]	; (8002a2c <defThread+0x5dc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f113 0f02 	cmn.w	r3, #2
 80028a2:	f000 820f 	beq.w	8002cc4 <defThread+0x874>
				devError |= devQUE;
 80028a6:	4b5f      	ldr	r3, [pc, #380]	; (8002a24 <defThread+0x5d4>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <defThread+0x5d4>)
 80028b2:	701a      	strb	r2, [r3, #0]
				Report(1, "OS: %s%s", get_qStat(qStat), eol);
 80028b4:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <defThread+0x5dc>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe ff2b 	bl	8001714 <get_qStat>
 80028be:	4602      	mov	r2, r0
 80028c0:	4b5b      	ldr	r3, [pc, #364]	; (8002a30 <defThread+0x5e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	495b      	ldr	r1, [pc, #364]	; (8002a34 <defThread+0x5e4>)
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff f9b0 	bl	8001c2c <Report>
 80028cc:	e1fa      	b.n	8002cc4 <defThread+0x874>
			}
		} else {
			Report(1, "Command(%u.%u): '%s'%s", qcmd.cmd, qcmd.attr, str_cmds[qcmd.cmd], eol);
 80028ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028d2:	4619      	mov	r1, r3
 80028d4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80028d8:	4618      	mov	r0, r3
 80028da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028de:	461a      	mov	r2, r3
 80028e0:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <defThread+0x5ec>)
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	4a52      	ldr	r2, [pc, #328]	; (8002a30 <defThread+0x5e0>)
 80028e8:	6812      	ldr	r2, [r2, #0]
 80028ea:	9201      	str	r2, [sp, #4]
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	4603      	mov	r3, r0
 80028f0:	460a      	mov	r2, r1
 80028f2:	4953      	ldr	r1, [pc, #332]	; (8002a40 <defThread+0x5f0>)
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7ff f999 	bl	8001c2c <Report>
			nand_show = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
			switch (qcmd.cmd) {
 8002900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002904:	2b06      	cmp	r3, #6
 8002906:	f200 81ca 	bhi.w	8002c9e <defThread+0x84e>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <defThread+0x4c0>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	0800292d 	.word	0x0800292d
 8002914:	08002935 	.word	0x08002935
 8002918:	0800295f 	.word	0x0800295f
 800291c:	080029ef 	.word	0x080029ef
 8002920:	08002b49 	.word	0x08002b49
 8002924:	08002a6d 	.word	0x08002a6d
 8002928:	08002afb 	.word	0x08002afb
				case cmdRestart:
					loop = false;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
		  		break;
 8002932:	e1b4      	b.n	8002c9e <defThread+0x84e>
		  		break;
				case cmdEpoch:
					if (!qcmd.attr) {//set date&time
 8002934:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002938:	2b00      	cmp	r3, #0
 800293a:	d105      	bne.n	8002948 <defThread+0x4f8>
						set_Date(epoch);
 800293c:	4b41      	ldr	r3, [pc, #260]	; (8002a44 <defThread+0x5f4>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff f879 	bl	8001a38 <set_Date>
					} else {//show date&time
						sec2str(stx);
						Report(0, "%s <- Current date&time%s", stx, eol);
					}
				break;
 8002946:	e1aa      	b.n	8002c9e <defThread+0x84e>
						sec2str(stx);
 8002948:	4834      	ldr	r0, [pc, #208]	; (8002a1c <defThread+0x5cc>)
 800294a:	f7ff f8d5 	bl	8001af8 <sec2str>
						Report(0, "%s <- Current date&time%s", stx, eol);
 800294e:	4b38      	ldr	r3, [pc, #224]	; (8002a30 <defThread+0x5e0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a32      	ldr	r2, [pc, #200]	; (8002a1c <defThread+0x5cc>)
 8002954:	493c      	ldr	r1, [pc, #240]	; (8002a48 <defThread+0x5f8>)
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff f968 	bl	8001c2c <Report>
				break;
 800295c:	e19f      	b.n	8002c9e <defThread+0x84e>
				case cmdRead:
				{
					uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <defThread+0x5fc>)
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <defThread+0x600>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <defThread+0x604>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002970:	64fb      	str	r3, [r7, #76]	; 0x4c
					NAND_AddressTypeDef addr = {
 8002972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002974:	b29b      	uxth	r3, r3
 8002976:	833b      	strh	r3, [r7, #24]
 8002978:	2301      	movs	r3, #1
 800297a:	837b      	strh	r3, [r7, #26]
						.Page = p,
						.Plane = 1,
						.Block = nand_PageToBlock(p)
 800297c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800297e:	f7ff fc89 	bl	8002294 <nand_PageToBlock>
 8002982:	4603      	mov	r3, r0
					NAND_AddressTypeDef addr = {
 8002984:	b29b      	uxth	r3, r3
 8002986:	83bb      	strh	r3, [r7, #28]
					};
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002988:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <defThread+0x5fc>)
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	4b32      	ldr	r3, [pc, #200]	; (8002a58 <defThread+0x608>)
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	461c      	mov	r4, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8002992:	8b3b      	ldrh	r3, [r7, #24]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002994:	4619      	mov	r1, r3
							  nandAdr, nandLen, addr.Page, addr.Block, eol);
 8002996:	8bbb      	ldrh	r3, [r7, #28]
					Report(1, "Read nand adr:0x%X len:%lu (page:%lu blk:%lu)%s",
 8002998:	4618      	mov	r0, r3
 800299a:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <defThread+0x5e0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	9001      	str	r0, [sp, #4]
 80029a2:	9100      	str	r1, [sp, #0]
 80029a4:	4623      	mov	r3, r4
 80029a6:	492d      	ldr	r1, [pc, #180]	; (8002a5c <defThread+0x60c>)
 80029a8:	2001      	movs	r0, #1
 80029aa:	f7ff f93f 	bl	8001c2c <Report>
					if (rdBuf) {
 80029ae:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <defThread+0x610>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 816e 	beq.w	8002c94 <defThread+0x844>
						if (HAL_NAND_Read_Page_8b(nandPort, &addr, rdBuf, 1) == HAL_OK) {
 80029b8:	4b2a      	ldr	r3, [pc, #168]	; (8002a64 <defThread+0x614>)
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <defThread+0x610>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f107 0118 	add.w	r1, r7, #24
 80029c4:	2301      	movs	r3, #1
 80029c6:	f002 f9c4 	bl	8004d52 <HAL_NAND_Read_Page_8b>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <defThread+0x58e>
							nand_show = 1;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
							readed = true;
 80029d6:	2301      	movs	r3, #1
 80029d8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
						} else devError |= devNAND;
					}
				}
				break;
 80029dc:	e15a      	b.n	8002c94 <defThread+0x844>
						} else devError |= devNAND;
 80029de:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <defThread+0x5d4>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	f043 0320 	orr.w	r3, r3, #32
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <defThread+0x5d4>)
 80029ea:	701a      	strb	r2, [r3, #0]
				break;
 80029ec:	e152      	b.n	8002c94 <defThread+0x844>
				case cmdNext:
					Report(1, "Read next nand adr:0x%X len:%lu%s",
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <defThread+0x5fc>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b19      	ldr	r3, [pc, #100]	; (8002a58 <defThread+0x608>)
 80029f4:	881b      	ldrh	r3, [r3, #0]
 80029f6:	4619      	mov	r1, r3
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <defThread+0x5e0>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	460b      	mov	r3, r1
 8002a00:	4919      	ldr	r1, [pc, #100]	; (8002a68 <defThread+0x618>)
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7ff f912 	bl	8001c2c <Report>
							  nandAdr, nandLen, eol);
					if (rdBuf) nand_show = 2;
 8002a08:	4b15      	ldr	r3, [pc, #84]	; (8002a60 <defThread+0x610>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8143 	beq.w	8002c98 <defThread+0x848>
 8002a12:	2302      	movs	r3, #2
 8002a14:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
				break;
 8002a18:	e13e      	b.n	8002c98 <defThread+0x848>
 8002a1a:	bf00      	nop
 8002a1c:	2000138c 	.word	0x2000138c
 8002a20:	20000058 	.word	0x20000058
 8002a24:	2000032c 	.word	0x2000032c
 8002a28:	0800cf30 	.word	0x0800cf30
 8002a2c:	20001388 	.word	0x20001388
 8002a30:	20000004 	.word	0x20000004
 8002a34:	0800cf40 	.word	0x0800cf40
 8002a38:	20000324 	.word	0x20000324
 8002a3c:	20000024 	.word	0x20000024
 8002a40:	0800cf4c 	.word	0x0800cf4c
 8002a44:	20000044 	.word	0x20000044
 8002a48:	0800cf64 	.word	0x0800cf64
 8002a4c:	2000134c 	.word	0x2000134c
 8002a50:	20001348 	.word	0x20001348
 8002a54:	20001368 	.word	0x20001368
 8002a58:	20001350 	.word	0x20001350
 8002a5c:	0800cf80 	.word	0x0800cf80
 8002a60:	20001380 	.word	0x20001380
 8002a64:	20000054 	.word	0x20000054
 8002a68:	0800cfb0 	.word	0x0800cfb0
				case cmdErase:
					if (!qcmd.attr) {
 8002a6c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d134      	bne.n	8002ade <defThread+0x68e>
						NAND_AddressTypeDef addr = {
							.Page = nand_BlockToPage(nandBlk),
 8002a74:	4ba5      	ldr	r3, [pc, #660]	; (8002d0c <defThread+0x8bc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fc21 	bl	80022c0 <nand_BlockToPage>
 8002a7e:	4603      	mov	r3, r0
						NAND_AddressTypeDef addr = {
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	823b      	strh	r3, [r7, #16]
 8002a84:	2301      	movs	r3, #1
 8002a86:	827b      	strh	r3, [r7, #18]
 8002a88:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <defThread+0x8bc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	82bb      	strh	r3, [r7, #20]
							.Plane = 1,
							.Block = nandBlk
						};
						Report(1, "Erase nand block:%lu... ", addr.Block);
 8002a90:	8abb      	ldrh	r3, [r7, #20]
 8002a92:	461a      	mov	r2, r3
 8002a94:	499e      	ldr	r1, [pc, #632]	; (8002d10 <defThread+0x8c0>)
 8002a96:	2001      	movs	r0, #1
 8002a98:	f7ff f8c8 	bl	8001c2c <Report>
						uint32_t stik = HAL_GetTick();
 8002a9c:	f001 f954 	bl	8003d48 <HAL_GetTick>
 8002aa0:	6638      	str	r0, [r7, #96]	; 0x60
						if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 8002aa2:	4b9c      	ldr	r3, [pc, #624]	; (8002d14 <defThread+0x8c4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f107 0210 	add.w	r2, r7, #16
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f002 fc02 	bl	80052b6 <HAL_NAND_Erase_Block>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d006      	beq.n	8002ac6 <defThread+0x676>
 8002ab8:	4b97      	ldr	r3, [pc, #604]	; (8002d18 <defThread+0x8c8>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b95      	ldr	r3, [pc, #596]	; (8002d18 <defThread+0x8c8>)
 8002ac4:	701a      	strb	r2, [r3, #0]
						Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 8002ac6:	f001 f93f 	bl	8003d48 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ace:	1ad2      	subs	r2, r2, r3
 8002ad0:	4b92      	ldr	r3, [pc, #584]	; (8002d1c <defThread+0x8cc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4992      	ldr	r1, [pc, #584]	; (8002d20 <defThread+0x8d0>)
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff f8a8 	bl	8001c2c <Report>
						iBlk = 0;
						Report(1, "Erase chip ");
						next_block_erase = 1;
						stik = HAL_GetTick();
					}
				break;
 8002adc:	e0df      	b.n	8002c9e <defThread+0x84e>
						iBlk = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
						Report(1, "Erase chip ");
 8002ae4:	498f      	ldr	r1, [pc, #572]	; (8002d24 <defThread+0x8d4>)
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f7ff f8a0 	bl	8001c2c <Report>
						next_block_erase = 1;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
						stik = HAL_GetTick();
 8002af2:	f001 f929 	bl	8003d48 <HAL_GetTick>
 8002af6:	67f8      	str	r0, [r7, #124]	; 0x7c
				break;
 8002af8:	e0d1      	b.n	8002c9e <defThread+0x84e>
				case cmdCheck:
				{
					uint32_t b = nand_PageToBlock(nandPage);
 8002afa:	4b8b      	ldr	r3, [pc, #556]	; (8002d28 <defThread+0x8d8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fbc8 	bl	8002294 <nand_PageToBlock>
 8002b04:	6678      	str	r0, [r7, #100]	; 0x64
					//if (!isPageEmpty(nandPage)) {
					if (!pageIsEmpty(nandPage)) {
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <defThread+0x8d8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fcb6 	bl	800147c <pageIsEmpty>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f083 0301 	eor.w	r3, r3, #1
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00a      	beq.n	8002b32 <defThread+0x6e2>
						Report(1, "Page:%lu in block:%lu Not empty%s", nandPage, b, eol);
 8002b1c:	4b82      	ldr	r3, [pc, #520]	; (8002d28 <defThread+0x8d8>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b7e      	ldr	r3, [pc, #504]	; (8002d1c <defThread+0x8cc>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b28:	4980      	ldr	r1, [pc, #512]	; (8002d2c <defThread+0x8dc>)
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f7ff f87e 	bl	8001c2c <Report>
					} else {
						Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
					}
				}
				break;
 8002b30:	e0b5      	b.n	8002c9e <defThread+0x84e>
						Report(1, "Page:%lu in block:%lu is Empty%s", nandPage, b, eol);
 8002b32:	4b7d      	ldr	r3, [pc, #500]	; (8002d28 <defThread+0x8d8>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b79      	ldr	r3, [pc, #484]	; (8002d1c <defThread+0x8cc>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3e:	497c      	ldr	r1, [pc, #496]	; (8002d30 <defThread+0x8e0>)
 8002b40:	2001      	movs	r0, #1
 8002b42:	f7ff f873 	bl	8001c2c <Report>
				break;
 8002b46:	e0aa      	b.n	8002c9e <defThread+0x84e>
				case cmdWrite:
					if (wrBuf) {
 8002b48:	4b7a      	ldr	r3, [pc, #488]	; (8002d34 <defThread+0x8e4>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 80a5 	beq.w	8002c9c <defThread+0x84c>
						uint32_t p = (nandAdr - devAdr) / chipConf.PageSize;
 8002b52:	4b79      	ldr	r3, [pc, #484]	; (8002d38 <defThread+0x8e8>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b79      	ldr	r3, [pc, #484]	; (8002d3c <defThread+0x8ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	1ad2      	subs	r2, r2, r3
 8002b5c:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <defThread+0x8f0>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	65fb      	str	r3, [r7, #92]	; 0x5c
						uint32_t b = nand_PageToBlock(p);
 8002b66:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b68:	f7ff fb94 	bl	8002294 <nand_PageToBlock>
 8002b6c:	65b8      	str	r0, [r7, #88]	; 0x58
						NAND_AddressTypeDef addr = {
 8002b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	813b      	strh	r3, [r7, #8]
 8002b74:	2301      	movs	r3, #1
 8002b76:	817b      	strh	r3, [r7, #10]
 8002b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	81bb      	strh	r3, [r7, #12]
							.Page = p,
							.Plane = 1,
							.Block = b
						};
						//if (!isPageEmpty(p)) {
						if (!pageIsEmpty(nandPage)) {
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <defThread+0x8d8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fc7a 	bl	800147c <pageIsEmpty>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	f083 0301 	eor.w	r3, r3, #1
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d026      	beq.n	8002be2 <defThread+0x792>
							/*NAND_AddressTypeDef eaddr = {
								.Page = p,
								.Plane = 1,
								.Block = b
							};*/
							Report(1, "Erase nand block:%lu... ", addr.Block);
 8002b94:	89bb      	ldrh	r3, [r7, #12]
 8002b96:	461a      	mov	r2, r3
 8002b98:	495d      	ldr	r1, [pc, #372]	; (8002d10 <defThread+0x8c0>)
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	f7ff f846 	bl	8001c2c <Report>
							uint32_t stik = HAL_GetTick();
 8002ba0:	f001 f8d2 	bl	8003d48 <HAL_GetTick>
 8002ba4:	6578      	str	r0, [r7, #84]	; 0x54
							if (HAL_NAND_Erase_Block(nandPort, &addr) != HAL_OK) devError |= devNAND;
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	; (8002d14 <defThread+0x8c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f107 0208 	add.w	r2, r7, #8
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 fb80 	bl	80052b6 <HAL_NAND_Erase_Block>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d006      	beq.n	8002bca <defThread+0x77a>
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <defThread+0x8c8>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <defThread+0x8c8>)
 8002bc8:	701a      	strb	r2, [r3, #0]
							Report(0, "done (%lu ms)%s", HAL_GetTick() - stik, eol);
 8002bca:	f001 f8bd 	bl	8003d48 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <defThread+0x8cc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4951      	ldr	r1, [pc, #324]	; (8002d20 <defThread+0x8d0>)
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7ff f826 	bl	8001c2c <Report>
 8002be0:	e00b      	b.n	8002bfa <defThread+0x7aa>
						} else {
							Report(1, "Check: page:%lu in block:%lu is Empty%s", addr.Page, addr.Block, eol);
 8002be2:	893b      	ldrh	r3, [r7, #8]
 8002be4:	461a      	mov	r2, r3
 8002be6:	89bb      	ldrh	r3, [r7, #12]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <defThread+0x8cc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4954      	ldr	r1, [pc, #336]	; (8002d44 <defThread+0x8f4>)
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f7ff f819 	bl	8001c2c <Report>
						}
						//if (HAL_NAND_Read_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
						//Report(1, "Copy nand page:%lu block:%lu:%s", addr.Page, addr.Block, eol);
						memset(wrBuf, 0xff, chipConf.PageSize);
 8002bfa:	4b4e      	ldr	r3, [pc, #312]	; (8002d34 <defThread+0x8e4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <defThread+0x8f0>)
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	21ff      	movs	r1, #255	; 0xff
 8002c04:	4618      	mov	r0, r3
 8002c06:	f009 f9ef 	bl	800bfe8 <memset>
						uint32_t ofs = (nandAdr - devAdr) % chipConf.PageSize;
 8002c0a:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <defThread+0x8e8>)
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <defThread+0x8ec>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <defThread+0x8f0>)
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c1c:	fb01 f202 	mul.w	r2, r1, r2
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	653b      	str	r3, [r7, #80]	; 0x50
						memset(wrBuf + ofs, nandByte, nandLen);
 8002c24:	4b43      	ldr	r3, [pc, #268]	; (8002d34 <defThread+0x8e4>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2a:	4413      	add	r3, r2
 8002c2c:	4a46      	ldr	r2, [pc, #280]	; (8002d48 <defThread+0x8f8>)
 8002c2e:	7812      	ldrb	r2, [r2, #0]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4a46      	ldr	r2, [pc, #280]	; (8002d4c <defThread+0x8fc>)
 8002c34:	8812      	ldrh	r2, [r2, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f009 f9d6 	bl	800bfe8 <memset>
						//showBuf(1, false, devAdr, 512,/*nandAdr, nandLen,*/ wrBuf);
						if (HAL_NAND_Write_Page_8b(nandPort, &addr, wrBuf, 1) != HAL_OK) devError |= devNAND;
 8002c3c:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <defThread+0x8c4>)
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	4b3c      	ldr	r3, [pc, #240]	; (8002d34 <defThread+0x8e4>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	f107 0108 	add.w	r1, r7, #8
 8002c48:	2301      	movs	r3, #1
 8002c4a:	f002 f9dc 	bl	8005006 <HAL_NAND_Write_Page_8b>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <defThread+0x812>
 8002c54:	4b30      	ldr	r3, [pc, #192]	; (8002d18 <defThread+0x8c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <defThread+0x8c8>)
 8002c60:	701a      	strb	r2, [r3, #0]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8002c62:	4b35      	ldr	r3, [pc, #212]	; (8002d38 <defThread+0x8e8>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b38      	ldr	r3, [pc, #224]	; (8002d48 <defThread+0x8f8>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4b37      	ldr	r3, [pc, #220]	; (8002d4c <defThread+0x8fc>)
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
							      nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8002c72:	893b      	ldrh	r3, [r7, #8]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8002c74:	461c      	mov	r4, r3
							      nandAdr, ofs, nandByte, nandLen, addr.Page, addr.Block, eol);
 8002c76:	89bb      	ldrh	r3, [r7, #12]
						Report(1, "Write nand adr:0x%X shift:%lu byte:0x%02X len:%lu (page:%lu blk:%lu)%s",
 8002c78:	461d      	mov	r5, r3
 8002c7a:	4b28      	ldr	r3, [pc, #160]	; (8002d1c <defThread+0x8cc>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	9304      	str	r3, [sp, #16]
 8002c80:	9503      	str	r5, [sp, #12]
 8002c82:	9402      	str	r4, [sp, #8]
 8002c84:	9001      	str	r0, [sp, #4]
 8002c86:	9100      	str	r1, [sp, #0]
 8002c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8a:	4931      	ldr	r1, [pc, #196]	; (8002d50 <defThread+0x900>)
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f7fe ffcd 	bl	8001c2c <Report>
					}
				break;
 8002c92:	e003      	b.n	8002c9c <defThread+0x84c>
				break;
 8002c94:	bf00      	nop
 8002c96:	e002      	b.n	8002c9e <defThread+0x84e>
				break;
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <defThread+0x84e>
				break;
 8002c9c:	bf00      	nop
			}
			if (nand_show) {
 8002c9e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00e      	beq.n	8002cc4 <defThread+0x874>
				//
				showBuf(nand_show, readed, nandAdr, nandLen, rdBuf);
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <defThread+0x8e8>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <defThread+0x8fc>)
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	461c      	mov	r4, r3
 8002cb0:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <defThread+0x904>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f897 107a 	ldrb.w	r1, [r7, #122]	; 0x7a
 8002cb8:	f897 007b 	ldrb.w	r0, [r7, #123]	; 0x7b
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4623      	mov	r3, r4
 8002cc0:	f7ff fb14 	bl	80022ec <showBuf>
				//
			}
		}

		// Erase all blocks (chipConf.BlockNbr)
		if (next_block_erase) {
 8002cc4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d06f      	beq.n	8002dac <defThread+0x95c>
			clr.Block = iBlk;
 8002ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
			//clr.Page = nand_BlockToPage(iBlk);
			iBlk++;
 8002cd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			if (HAL_NAND_Erase_Block(nandPort, &clr) != HAL_OK) {
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <defThread+0x8c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 fae3 	bl	80052b6 <HAL_NAND_Erase_Block>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d030      	beq.n	8002d58 <defThread+0x908>
				devError |= devNAND;
 8002cf6:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <defThread+0x8c8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f043 0320 	orr.w	r3, r3, #32
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <defThread+0x8c8>)
 8002d02:	701a      	strb	r2, [r3, #0]
				next_block_erase = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8002d0a:	e038      	b.n	8002d7e <defThread+0x92e>
 8002d0c:	20001354 	.word	0x20001354
 8002d10:	0800cfd4 	.word	0x0800cfd4
 8002d14:	20000054 	.word	0x20000054
 8002d18:	2000032c 	.word	0x2000032c
 8002d1c:	20000004 	.word	0x20000004
 8002d20:	0800cff0 	.word	0x0800cff0
 8002d24:	0800d000 	.word	0x0800d000
 8002d28:	20001358 	.word	0x20001358
 8002d2c:	0800d00c 	.word	0x0800d00c
 8002d30:	0800d030 	.word	0x0800d030
 8002d34:	20001384 	.word	0x20001384
 8002d38:	2000134c 	.word	0x2000134c
 8002d3c:	20001348 	.word	0x20001348
 8002d40:	20001368 	.word	0x20001368
 8002d44:	0800d054 	.word	0x0800d054
 8002d48:	20000060 	.word	0x20000060
 8002d4c:	20001350 	.word	0x20001350
 8002d50:	0800d07c 	.word	0x0800d07c
 8002d54:	20001380 	.word	0x20001380
			} else {
				if (!(iBlk % 16)) Report(0, ".");
 8002d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d103      	bne.n	8002d6c <defThread+0x91c>
 8002d64:	492b      	ldr	r1, [pc, #172]	; (8002e14 <defThread+0x9c4>)
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7fe ff60 	bl	8001c2c <Report>
				if (iBlk >= chipConf.BlockNbr) next_block_erase = 0;
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	; (8002e18 <defThread+0x9c8>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d302      	bcc.n	8002d7e <defThread+0x92e>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			}
			if (!next_block_erase) Report(0, " %lu blocks (%lu sec)%s", iBlk, (HAL_GetTick() - stik) / 1000, eol);
 8002d7e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d112      	bne.n	8002dac <defThread+0x95c>
 8002d86:	f000 ffdf 	bl	8003d48 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <defThread+0x9cc>)
 8002d92:	fba2 2303 	umull	r2, r3, r2, r3
 8002d96:	099a      	lsrs	r2, r3, #6
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <defThread+0x9d0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002da4:	491f      	ldr	r1, [pc, #124]	; (8002e24 <defThread+0x9d4>)
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe ff40 	bl	8001c2c <Report>
		}
		//
		osDelay(5);
 8002dac:	2005      	movs	r0, #5
 8002dae:	f006 f80b 	bl	8008dc8 <osDelay>
	while (loop) {
 8002db2:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f47f acce 	bne.w	8002758 <defThread+0x308>
	}

	ipsOn(0);
 8002dbc:	2000      	movs	r0, #0
 8002dbe:	f000 f971 	bl	80030a4 <ipsOn>

	if (wrBuf) free(wrBuf);
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <defThread+0x9d8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <defThread+0x984>
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <defThread+0x9d8>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f009 f8f4 	bl	800bfbc <free>
	if (rdBuf) free(rdBuf);
 8002dd4:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <defThread+0x9dc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <defThread+0x996>
 8002ddc:	4b13      	ldr	r3, [pc, #76]	; (8002e2c <defThread+0x9dc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f009 f8eb 	bl	800bfbc <free>
	//if (stx) free(stx);


	Report(1, "%s Стоп '%s' memory:%lu/%lu bytes ...%s", version, __func__, xPortGetFreeHeapSize(), configTOTAL_HEAP_SIZE, eol);
 8002de6:	4b12      	ldr	r3, [pc, #72]	; (8002e30 <defThread+0x9e0>)
 8002de8:	681c      	ldr	r4, [r3, #0]
 8002dea:	f008 fed3 	bl	800bb94 <xPortGetFreeHeapSize>
 8002dee:	4602      	mov	r2, r0
 8002df0:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <defThread+0x9d0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002dfa:	9301      	str	r3, [sp, #4]
 8002dfc:	9200      	str	r2, [sp, #0]
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <defThread+0x9e4>)
 8002e00:	4622      	mov	r2, r4
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <defThread+0x9e8>)
 8002e04:	2001      	movs	r0, #1
 8002e06:	f7fe ff11 	bl	8001c2c <Report>
	osDelay(250);
 8002e0a:	20fa      	movs	r0, #250	; 0xfa
 8002e0c:	f005 ffdc 	bl	8008dc8 <osDelay>

	NVIC_SystemReset();
 8002e10:	f7fd ff0e 	bl	8000c30 <__NVIC_SystemReset>
 8002e14:	0800d0c4 	.word	0x0800d0c4
 8002e18:	20001368 	.word	0x20001368
 8002e1c:	10624dd3 	.word	0x10624dd3
 8002e20:	20000004 	.word	0x20000004
 8002e24:	0800d0c8 	.word	0x0800d0c8
 8002e28:	20001384 	.word	0x20001384
 8002e2c:	20001380 	.word	0x20001380
 8002e30:	20000000 	.word	0x20000000
 8002e34:	0800f250 	.word	0x0800f250
 8002e38:	0800d0e0 	.word	0x0800d0e0

08002e3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b5b0      	push	{r4, r5, r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a10      	ldr	r2, [pc, #64]	; (8002e8c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d102      	bne.n	8002e54 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002e4e:	f000 ff67 	bl	8003d20 <HAL_IncTick>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
	  }
	  inc_msCounter();
  }
  /* USER CODE END Callback 1 */
}
 8002e52:	e016      	b.n	8002e82 <HAL_TIM_PeriodElapsedCallback+0x46>
  else if (htim->Instance == TIM2) {
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d111      	bne.n	8002e82 <HAL_TIM_PeriodElapsedCallback+0x46>
	  if ((get_msCounter() & 3) == 3) {//seconda
 8002e5e:	f7fe fdad 	bl	80019bc <get_msCounter>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	f002 0403 	and.w	r4, r2, #3
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	1ee3      	subs	r3, r4, #3
 8002e6e:	432b      	orrs	r3, r5
 8002e70:	d105      	bne.n	8002e7e <HAL_TIM_PeriodElapsedCallback+0x42>
		  inc_secCounter();
 8002e72:	f7fe fd95 	bl	80019a0 <inc_secCounter>
		  HAL_GPIO_TogglePin(LED_TIK_GPIO_Port, LED_TIK_Pin);
 8002e76:	2180      	movs	r1, #128	; 0x80
 8002e78:	4805      	ldr	r0, [pc, #20]	; (8002e90 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002e7a:	f001 fe2e 	bl	8004ada <HAL_GPIO_TogglePin>
	  inc_msCounter();
 8002e7e:	f7fe fdab 	bl	80019d8 <inc_msCounter>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010000 	.word	0x40010000
 8002e90:	40020800 	.word	0x40020800

08002e94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
	...

08002ea4 <ST7789_WriteCommand>:
//	uint8_t *frm_buf = NULL;
//	const uint8_t total_blk_mem = 8;//240*240*2=115200 / 8 = 14400 | for stm32f407 sram - 192Кб
//#endif
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommand(uint8_t cmd)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4603      	mov	r3, r0
 8002eac:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Clr();
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2104      	movs	r1, #4
 8002eb2:	480c      	ldr	r0, [pc, #48]	; (8002ee4 <ST7789_WriteCommand+0x40>)
 8002eb4:	f001 fdf8 	bl	8004aa8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &cmd, sizeof(cmd), waits) != HAL_OK) devError |= devSPI;
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <ST7789_WriteCommand+0x44>)
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	2396      	movs	r3, #150	; 0x96
 8002ebe:	1df9      	adds	r1, r7, #7
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f003 fbfc 	bl	80066be <HAL_SPI_Transmit>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d006      	beq.n	8002eda <ST7789_WriteCommand+0x36>
 8002ecc:	4b07      	ldr	r3, [pc, #28]	; (8002eec <ST7789_WriteCommand+0x48>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	f043 0310 	orr.w	r3, r3, #16
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <ST7789_WriteCommand+0x48>)
 8002ed8:	701a      	strb	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	20000048 	.word	0x20000048
 8002eec:	2000032c 	.word	0x2000032c

08002ef0 <ST7789_WriteCommands>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteCommands(uint8_t *cmds, size_t cnt)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
	ST7789_DC_Clr();
 8002efa:	2200      	movs	r2, #0
 8002efc:	2104      	movs	r1, #4
 8002efe:	480e      	ldr	r0, [pc, #56]	; (8002f38 <ST7789_WriteCommands+0x48>)
 8002f00:	f001 fdd2 	bl	8004aa8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, cmds, cnt, waits * 10) != HAL_OK) devError |= devSPI;
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <ST7789_WriteCommands+0x4c>)
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	2196      	movs	r1, #150	; 0x96
 8002f0e:	460b      	mov	r3, r1
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	f003 fbd1 	bl	80066be <HAL_SPI_Transmit>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d006      	beq.n	8002f30 <ST7789_WriteCommands+0x40>
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <ST7789_WriteCommands+0x50>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	f043 0310 	orr.w	r3, r3, #16
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <ST7789_WriteCommands+0x50>)
 8002f2e:	701a      	strb	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	20000048 	.word	0x20000048
 8002f40:	2000032c 	.word	0x2000032c

08002f44 <ST7789_WriteData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002f52:	2201      	movs	r2, #1
 8002f54:	2104      	movs	r1, #4
 8002f56:	481f      	ldr	r0, [pc, #124]	; (8002fd4 <ST7789_WriteData+0x90>)
 8002f58:	f001 fda6 	bl	8004aa8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	while (buff_size > 0) {
 8002f5c:	e028      	b.n	8002fb0 <ST7789_WriteData+0x6c>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f64:	4293      	cmp	r3, r2
 8002f66:	bf28      	it	cs
 8002f68:	4613      	movcs	r3, r2
 8002f6a:	81bb      	strh	r3, [r7, #12]
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <ST7789_WriteData+0x94>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
		rt |= HAL_SPI_Transmit_DMA(ipsPort, buff, chunk_size);
 8002f72:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <ST7789_WriteData+0x98>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	89ba      	ldrh	r2, [r7, #12]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 fcdc 	bl	8006938 <HAL_SPI_Transmit_DMA>
 8002f80:	4603      	mov	r3, r0
 8002f82:	461a      	mov	r2, r3
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8002f8a:	e002      	b.n	8002f92 <ST7789_WriteData+0x4e>
 8002f8c:	2001      	movs	r0, #1
 8002f8e:	f000 fee7 	bl	8003d60 <HAL_Delay>
 8002f92:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <ST7789_WriteData+0x94>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1f5      	bne.n	8002f8c <ST7789_WriteData+0x48>
#else
		rt |= HAL_SPI_Transmit(ipsPort, buff, chunk_size, waits);
#endif
		buff += chunk_size;
 8002fa0:	89bb      	ldrh	r3, [r7, #12]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8002fa8:	89bb      	ldrh	r3, [r7, #12]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1d3      	bne.n	8002f5e <ST7789_WriteData+0x1a>
	}

	if (rt != HAL_OK) devError |= devSPI;
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d006      	beq.n	8002fca <ST7789_WriteData+0x86>
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <ST7789_WriteData+0x9c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4b06      	ldr	r3, [pc, #24]	; (8002fe0 <ST7789_WriteData+0x9c>)
 8002fc8:	701a      	strb	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40020000 	.word	0x40020000
 8002fd8:	20000041 	.word	0x20000041
 8002fdc:	20000048 	.word	0x20000048
 8002fe0:	2000032c 	.word	0x2000032c

08002fe4 <ST7789_WriteDataLine>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteDataLine(uint8_t *buff, size_t line_size)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
HAL_StatusTypeDef rt = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]

	ST7789_DC_Set();
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	2104      	movs	r1, #4
 8002ff6:	4814      	ldr	r0, [pc, #80]	; (8003048 <ST7789_WriteDataLine+0x64>)
 8002ff8:	f001 fd56 	bl	8004aa8 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once
	//while (buff_size > 0) {
		//uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
#ifdef SET_WITH_DMA
		spiRdy = false;
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <ST7789_WriteDataLine+0x68>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
		rt = HAL_SPI_Transmit_DMA(ipsPort, buff, line_size);
 8003002:	4b13      	ldr	r3, [pc, #76]	; (8003050 <ST7789_WriteDataLine+0x6c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	b292      	uxth	r2, r2
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fc93 	bl	8006938 <HAL_SPI_Transmit_DMA>
 8003012:	4603      	mov	r3, r0
 8003014:	73fb      	strb	r3, [r7, #15]
		while (!spiRdy) HAL_Delay(1);
 8003016:	e002      	b.n	800301e <ST7789_WriteDataLine+0x3a>
 8003018:	2001      	movs	r0, #1
 800301a:	f000 fea1 	bl	8003d60 <HAL_Delay>
 800301e:	4b0b      	ldr	r3, [pc, #44]	; (800304c <ST7789_WriteDataLine+0x68>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	f083 0301 	eor.w	r3, r3, #1
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f5      	bne.n	8003018 <ST7789_WriteDataLine+0x34>
#endif
		//buff += chunk_size;
		//buff_size -= chunk_size;
	//}

	if (rt != HAL_OK) devError |= devSPI;
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d006      	beq.n	8003040 <ST7789_WriteDataLine+0x5c>
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <ST7789_WriteDataLine+0x70>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	f043 0310 	orr.w	r3, r3, #16
 800303a:	b2da      	uxtb	r2, r3
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <ST7789_WriteDataLine+0x70>)
 800303e:	701a      	strb	r2, [r3, #0]
}
 8003040:	bf00      	nop
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40020000 	.word	0x40020000
 800304c:	20000041 	.word	0x20000041
 8003050:	20000048 	.word	0x20000048
 8003054:	2000032c 	.word	0x2000032c

08003058 <ST7789_WriteSmallData>:
//-----------------------------------------------------------------------------------------
static void ST7789_WriteSmallData(uint8_t data)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
	ST7789_DC_Set();
 8003062:	2201      	movs	r2, #1
 8003064:	2104      	movs	r1, #4
 8003066:	480c      	ldr	r0, [pc, #48]	; (8003098 <ST7789_WriteSmallData+0x40>)
 8003068:	f001 fd1e 	bl	8004aa8 <HAL_GPIO_WritePin>
	if (HAL_SPI_Transmit(ipsPort, &data, sizeof(data), waits) != HAL_OK) devError |= devSPI;
 800306c:	4b0b      	ldr	r3, [pc, #44]	; (800309c <ST7789_WriteSmallData+0x44>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	2396      	movs	r3, #150	; 0x96
 8003072:	1df9      	adds	r1, r7, #7
 8003074:	2201      	movs	r2, #1
 8003076:	f003 fb22 	bl	80066be <HAL_SPI_Transmit>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <ST7789_WriteSmallData+0x36>
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <ST7789_WriteSmallData+0x48>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f043 0310 	orr.w	r3, r3, #16
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <ST7789_WriteSmallData+0x48>)
 800308c:	701a      	strb	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40020000 	.word	0x40020000
 800309c:	20000048 	.word	0x20000048
 80030a0:	2000032c 	.word	0x2000032c

080030a4 <ipsOn>:
//-----------------------------------------------------------------------------------------
void ipsOn(uint8_t act)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
	if (act) ST7789_WriteCommand(ST7789_DISPON);
 80030ae:	79fb      	ldrb	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <ipsOn+0x18>
 80030b4:	2029      	movs	r0, #41	; 0x29
 80030b6:	f7ff fef5 	bl	8002ea4 <ST7789_WriteCommand>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
}
 80030ba:	e002      	b.n	80030c2 <ipsOn+0x1e>
	    else ST7789_WriteCommand(ST7789_DISPOFF);
 80030bc:	2028      	movs	r0, #40	; 0x28
 80030be:	f7ff fef1 	bl	8002ea4 <ST7789_WriteCommand>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <ST7789_SetRotation>:
//-----------------------------------------------------------------------------------------
void ST7789_SetRotation(uint8_t m)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80030d6:	2036      	movs	r0, #54	; 0x36
 80030d8:	f7ff fee4 	bl	8002ea4 <ST7789_WriteCommand>
	switch (m) {
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d81a      	bhi.n	8003118 <ST7789_SetRotation+0x4c>
 80030e2:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <ST7789_SetRotation+0x1c>)
 80030e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e8:	080030f9 	.word	0x080030f9
 80030ec:	08003101 	.word	0x08003101
 80030f0:	08003109 	.word	0x08003109
 80030f4:	08003111 	.word	0x08003111
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80030f8:	20c0      	movs	r0, #192	; 0xc0
 80030fa:	f7ff ffad 	bl	8003058 <ST7789_WriteSmallData>
		break;
 80030fe:	e00c      	b.n	800311a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003100:	20a0      	movs	r0, #160	; 0xa0
 8003102:	f7ff ffa9 	bl	8003058 <ST7789_WriteSmallData>
		break;
 8003106:	e008      	b.n	800311a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003108:	2000      	movs	r0, #0
 800310a:	f7ff ffa5 	bl	8003058 <ST7789_WriteSmallData>
		break;
 800310e:	e004      	b.n	800311a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003110:	2060      	movs	r0, #96	; 0x60
 8003112:	f7ff ffa1 	bl	8003058 <ST7789_WriteSmallData>
		break;
 8003116:	e000      	b.n	800311a <ST7789_SetRotation+0x4e>
	default:
		break;
 8003118:	bf00      	nop
	}
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop

08003124 <ST7789_SetAddressWindow>:
//-----------------------------------------------------------------------------------------
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	4604      	mov	r4, r0
 800312c:	4608      	mov	r0, r1
 800312e:	4611      	mov	r1, r2
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	80fb      	strh	r3, [r7, #6]
 8003136:	4603      	mov	r3, r0
 8003138:	80bb      	strh	r3, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	807b      	strh	r3, [r7, #2]
 800313e:	4613      	mov	r3, r2
 8003140:	803b      	strh	r3, [r7, #0]
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	82fb      	strh	r3, [r7, #22]
 8003146:	887b      	ldrh	r3, [r7, #2]
 8003148:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 800314a:	88bb      	ldrh	r3, [r7, #4]
 800314c:	827b      	strh	r3, [r7, #18]
 800314e:	883b      	ldrh	r3, [r7, #0]
 8003150:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 8003152:	202a      	movs	r0, #42	; 0x2a
 8003154:	f7ff fea6 	bl	8002ea4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003158:	8afb      	ldrh	r3, [r7, #22]
 800315a:	0a1b      	lsrs	r3, r3, #8
 800315c:	b29b      	uxth	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	733b      	strb	r3, [r7, #12]
 8003162:	8afb      	ldrh	r3, [r7, #22]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	737b      	strb	r3, [r7, #13]
 8003168:	8abb      	ldrh	r3, [r7, #20]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	73bb      	strb	r3, [r7, #14]
 8003172:	8abb      	ldrh	r3, [r7, #20]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	2104      	movs	r1, #4
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fee0 	bl	8002f44 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003184:	202b      	movs	r0, #43	; 0x2b
 8003186:	f7ff fe8d 	bl	8002ea4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 800318a:	8a7b      	ldrh	r3, [r7, #18]
 800318c:	0a1b      	lsrs	r3, r3, #8
 800318e:	b29b      	uxth	r3, r3
 8003190:	b2db      	uxtb	r3, r3
 8003192:	723b      	strb	r3, [r7, #8]
 8003194:	8a7b      	ldrh	r3, [r7, #18]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	727b      	strb	r3, [r7, #9]
 800319a:	8a3b      	ldrh	r3, [r7, #16]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	72bb      	strb	r3, [r7, #10]
 80031a4:	8a3b      	ldrh	r3, [r7, #16]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	2104      	movs	r1, #4
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fec7 	bl	8002f44 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80031b6:	202c      	movs	r0, #44	; 0x2c
 80031b8:	f7ff fe74 	bl	8002ea4 <ST7789_WriteCommand>
}
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd90      	pop	{r4, r7, pc}

080031c4 <ST7789_Reset>:
//-----------------------------------------------------------------------------------------
void ST7789_Reset()
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	HAL_Delay(20);//25
 80031c8:	2014      	movs	r0, #20
 80031ca:	f000 fdc9 	bl	8003d60 <HAL_Delay>
    ST7789_RST_Clr();
 80031ce:	2200      	movs	r2, #0
 80031d0:	2102      	movs	r1, #2
 80031d2:	4808      	ldr	r0, [pc, #32]	; (80031f4 <ST7789_Reset+0x30>)
 80031d4:	f001 fc68 	bl	8004aa8 <HAL_GPIO_WritePin>
    HAL_Delay(10);//25
 80031d8:	200a      	movs	r0, #10
 80031da:	f000 fdc1 	bl	8003d60 <HAL_Delay>
    ST7789_RST_Set();
 80031de:	2201      	movs	r2, #1
 80031e0:	2102      	movs	r1, #2
 80031e2:	4804      	ldr	r0, [pc, #16]	; (80031f4 <ST7789_Reset+0x30>)
 80031e4:	f001 fc60 	bl	8004aa8 <HAL_GPIO_WritePin>
    HAL_Delay(20);//50
 80031e8:	2014      	movs	r0, #20
 80031ea:	f000 fdb9 	bl	8003d60 <HAL_Delay>
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40020000 	.word	0x40020000

080031f8 <ST7789_Init>:
//-----------------------------------------------------------------------------------------
void ST7789_Init(uint16_t bkColor)
{
 80031f8:	b590      	push	{r4, r7, lr}
 80031fa:	b08f      	sub	sp, #60	; 0x3c
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	80fb      	strh	r3, [r7, #6]
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003202:	203a      	movs	r0, #58	; 0x3a
 8003204:	f7ff fe4e 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);//
 8003208:	2055      	movs	r0, #85	; 0x55
 800320a:	f7ff ff25 	bl	8003058 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 800320e:	20b2      	movs	r0, #178	; 0xb2
 8003210:	f7ff fe48 	bl	8002ea4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8003214:	4a3a      	ldr	r2, [pc, #232]	; (8003300 <ST7789_Init+0x108>)
 8003216:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800321a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800321e:	6018      	str	r0, [r3, #0]
 8003220:	3304      	adds	r3, #4
 8003222:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8003224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003228:	2105      	movs	r1, #5
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fe8a 	bl	8002f44 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003230:	2003      	movs	r0, #3
 8003232:	f7ff ff4b 	bl	80030cc <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0xB7);				//	Gate Control
 8003236:	20b7      	movs	r0, #183	; 0xb7
 8003238:	f7ff fe34 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 800323c:	2035      	movs	r0, #53	; 0x35
 800323e:	f7ff ff0b 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003242:	20bb      	movs	r0, #187	; 0xbb
 8003244:	f7ff fe2e 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8003248:	2019      	movs	r0, #25
 800324a:	f7ff ff05 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 800324e:	20c0      	movs	r0, #192	; 0xc0
 8003250:	f7ff fe28 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x2C);			//	Default value
 8003254:	202c      	movs	r0, #44	; 0x2c
 8003256:	f7ff feff 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC2);				//	VDV and VRH command Enable
 800325a:	20c2      	movs	r0, #194	; 0xc2
 800325c:	f7ff fe22 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x01);			//	Default value
 8003260:	2001      	movs	r0, #1
 8003262:	f7ff fef9 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xff);            //	Default value
 8003266:	20ff      	movs	r0, #255	; 0xff
 8003268:	f7ff fef6 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC3);				//	VRH set
 800326c:	20c3      	movs	r0, #195	; 0xc3
 800326e:	f7ff fe19 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003272:	2012      	movs	r0, #18
 8003274:	f7ff fef0 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC4);				//	VDV set
 8003278:	20c4      	movs	r0, #196	; 0xc4
 800327a:	f7ff fe13 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x20);			//	Default value
 800327e:	2020      	movs	r0, #32
 8003280:	f7ff feea 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC6);				//	Frame rate control in normal mode
 8003284:	20c6      	movs	r0, #198	; 0xc6
 8003286:	f7ff fe0d 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x0F);			//	Default value (60HZ)
 800328a:	200f      	movs	r0, #15
 800328c:	f7ff fee4 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xD0);				//	Power control
 8003290:	20d0      	movs	r0, #208	; 0xd0
 8003292:	f7ff fe07 	bl	8002ea4 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0xA4);			//	Default value
 8003296:	20a4      	movs	r0, #164	; 0xa4
 8003298:	f7ff fede 	bl	8003058 <ST7789_WriteSmallData>
    ST7789_WriteSmallData(0xA1);			//	Default value
 800329c:	20a1      	movs	r0, #161	; 0xa1
 800329e:	f7ff fedb 	bl	8003058 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80032a2:	20e0      	movs	r0, #224	; 0xe0
 80032a4:	f7ff fdfe 	bl	8002ea4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <ST7789_Init+0x10c>)
 80032aa:	f107 041c 	add.w	r4, r7, #28
 80032ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b0:	c407      	stmia	r4!, {r0, r1, r2}
 80032b2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80032b4:	f107 031c 	add.w	r3, r7, #28
 80032b8:	210e      	movs	r1, #14
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff fe42 	bl	8002f44 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80032c0:	20e1      	movs	r0, #225	; 0xe1
 80032c2:	f7ff fdef 	bl	8002ea4 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <ST7789_Init+0x110>)
 80032c8:	f107 040c 	add.w	r4, r7, #12
 80032cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ce:	c407      	stmia	r4!, {r0, r1, r2}
 80032d0:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	210e      	movs	r1, #14
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fe33 	bl	8002f44 <ST7789_WriteData>
	}

  	uint8_t cmds[] = {ST7789_INVON, ST7789_SLPOUT, ST7789_NORON, ST7789_DISPOFF};
 80032de:	4b0b      	ldr	r3, [pc, #44]	; (800330c <ST7789_Init+0x114>)
 80032e0:	637b      	str	r3, [r7, #52]	; 0x34
  	ST7789_WriteCommands(cmds, sizeof(cmds));
 80032e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032e6:	2104      	movs	r1, #4
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff fe01 	bl	8002ef0 <ST7789_WriteCommands>


	ST7789_Fill_Color(bkColor);				//	Fill with Black.
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 f80d 	bl	8003310 <ST7789_Fill_Color>
}
 80032f6:	bf00      	nop
 80032f8:	373c      	adds	r7, #60	; 0x3c
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	bf00      	nop
 8003300:	0800d10c 	.word	0x0800d10c
 8003304:	0800d114 	.word	0x0800d114
 8003308:	0800d124 	.word	0x0800d124
 800330c:	28131121 	.word	0x28131121

08003310 <ST7789_Fill_Color>:
//-----------------------------------------------------------------------------------------
void ST7789_Fill_Color(uint16_t color)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b0fc      	sub	sp, #496	; 0x1f0
 8003314:	af00      	add	r7, sp, #0
 8003316:	4602      	mov	r2, r0
 8003318:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800331c:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003320:	801a      	strh	r2, [r3, #0]

	if (frm_buf) free(frm_buf);

#else
*/
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003322:	23ef      	movs	r3, #239	; 0xef
 8003324:	22ef      	movs	r2, #239	; 0xef
 8003326:	2100      	movs	r1, #0
 8003328:	2000      	movs	r0, #0
 800332a:	f7ff fefb 	bl	8003124 <ST7789_SetAddressWindow>

	uint8_t data[ST7789_WIDTH << 1];
	uint16_t i = 0, j;
 800332e:	2300      	movs	r3, #0
 8003330:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 8003334:	2300      	movs	r3, #0
 8003336:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 800333a:	e024      	b.n	8003386 <ST7789_Fill_Color+0x76>
		*(uint16_t *)(data + i) = HTONS(color);
 800333c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003340:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	0a1b      	lsrs	r3, r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21a      	sxth	r2, r3
 800334c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003350:	f5a3 73f5 	sub.w	r3, r3, #490	; 0x1ea
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	b21b      	sxth	r3, r3
 800335a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800335e:	b21b      	sxth	r3, r3
 8003360:	4313      	orrs	r3, r2
 8003362:	b219      	sxth	r1, r3
 8003364:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003368:	f107 020c 	add.w	r2, r7, #12
 800336c:	4413      	add	r3, r2
 800336e:	b28a      	uxth	r2, r1
 8003370:	801a      	strh	r2, [r3, #0]
		i += 2;
 8003372:	f8b7 31ee 	ldrh.w	r3, [r7, #494]	; 0x1ee
 8003376:	3302      	adds	r3, #2
 8003378:	f8a7 31ee 	strh.w	r3, [r7, #494]	; 0x1ee
	for (j = 0; j < ST7789_WIDTH; j++) {
 800337c:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 8003380:	3301      	adds	r3, #1
 8003382:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003386:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 800338a:	2bef      	cmp	r3, #239	; 0xef
 800338c:	d9d6      	bls.n	800333c <ST7789_Fill_Color+0x2c>
	}
	for (j = 0; j < ST7789_HEIGHT; j++) ST7789_WriteDataLine(data, sizeof(data));
 800338e:	2300      	movs	r3, #0
 8003390:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 8003394:	e00b      	b.n	80033ae <ST7789_Fill_Color+0x9e>
 8003396:	f107 030c 	add.w	r3, r7, #12
 800339a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800339e:	4618      	mov	r0, r3
 80033a0:	f7ff fe20 	bl	8002fe4 <ST7789_WriteDataLine>
 80033a4:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80033a8:	3301      	adds	r3, #1
 80033aa:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
 80033ae:	f8b7 31ec 	ldrh.w	r3, [r7, #492]	; 0x1ec
 80033b2:	2bef      	cmp	r3, #239	; 0xef
 80033b4:	d9ef      	bls.n	8003396 <ST7789_Fill_Color+0x86>

//#endif
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <ST7789_Fill>:

	ST7789_WriteData(data, sizeof(data));
}
//-----------------------------------------------------------------------------------------
void ST7789_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80033c2:	b590      	push	{r4, r7, lr}
 80033c4:	b085      	sub	sp, #20
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4604      	mov	r4, r0
 80033ca:	4608      	mov	r0, r1
 80033cc:	4611      	mov	r1, r2
 80033ce:	461a      	mov	r2, r3
 80033d0:	4623      	mov	r3, r4
 80033d2:	80fb      	strh	r3, [r7, #6]
 80033d4:	4603      	mov	r3, r0
 80033d6:	80bb      	strh	r3, [r7, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	807b      	strh	r3, [r7, #2]
 80033dc:	4613      	mov	r3, r2
 80033de:	803b      	strh	r3, [r7, #0]
	if ((xEnd < 0) || (xEnd >= ST7789_WIDTH) ||
 80033e0:	887b      	ldrh	r3, [r7, #2]
 80033e2:	2bef      	cmp	r3, #239	; 0xef
 80033e4:	d82b      	bhi.n	800343e <ST7789_Fill+0x7c>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 80033e6:	883b      	ldrh	r3, [r7, #0]
 80033e8:	2bef      	cmp	r3, #239	; 0xef
 80033ea:	d828      	bhi.n	800343e <ST7789_Fill+0x7c>

	uint16_t i, j;
	uint8_t data[] = {color >> 8, color & 0xFF};
 80033ec:	8c3b      	ldrh	r3, [r7, #32]
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	723b      	strb	r3, [r7, #8]
 80033f6:	8c3b      	ldrh	r3, [r7, #32]
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	727b      	strb	r3, [r7, #9]
	ST7789_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80033fc:	883b      	ldrh	r3, [r7, #0]
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	88b9      	ldrh	r1, [r7, #4]
 8003402:	88f8      	ldrh	r0, [r7, #6]
 8003404:	f7ff fe8e 	bl	8003124 <ST7789_SetAddressWindow>
	for (i = ySta; i <= yEnd; i++) {
 8003408:	88bb      	ldrh	r3, [r7, #4]
 800340a:	81fb      	strh	r3, [r7, #14]
 800340c:	e012      	b.n	8003434 <ST7789_Fill+0x72>
		for (j = xSta; j <= xEnd; j++) ST7789_WriteData(data, sizeof(data));
 800340e:	88fb      	ldrh	r3, [r7, #6]
 8003410:	81bb      	strh	r3, [r7, #12]
 8003412:	e008      	b.n	8003426 <ST7789_Fill+0x64>
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff fd92 	bl	8002f44 <ST7789_WriteData>
 8003420:	89bb      	ldrh	r3, [r7, #12]
 8003422:	3301      	adds	r3, #1
 8003424:	81bb      	strh	r3, [r7, #12]
 8003426:	89ba      	ldrh	r2, [r7, #12]
 8003428:	887b      	ldrh	r3, [r7, #2]
 800342a:	429a      	cmp	r2, r3
 800342c:	d9f2      	bls.n	8003414 <ST7789_Fill+0x52>
	for (i = ySta; i <= yEnd; i++) {
 800342e:	89fb      	ldrh	r3, [r7, #14]
 8003430:	3301      	adds	r3, #1
 8003432:	81fb      	strh	r3, [r7, #14]
 8003434:	89fa      	ldrh	r2, [r7, #14]
 8003436:	883b      	ldrh	r3, [r7, #0]
 8003438:	429a      	cmp	r2, r3
 800343a:	d9e8      	bls.n	800340e <ST7789_Fill+0x4c>
 800343c:	e000      	b.n	8003440 <ST7789_Fill+0x7e>
		 (yEnd < 0) || (yEnd >= ST7789_HEIGHT))	return;
 800343e:	bf00      	nop
	}
}
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}

08003446 <ST7789_WriteChar>:
{
	ST7789_WriteCommand(invert ? 0x21 /* INVON */ : 0x20 /* INVOFF */);
}
//-----------------------------------------------------------------------------------------
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003446:	b082      	sub	sp, #8
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b089      	sub	sp, #36	; 0x24
 800344c:	af00      	add	r7, sp, #0
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
 8003450:	4603      	mov	r3, r0
 8003452:	80fb      	strh	r3, [r7, #6]
 8003454:	460b      	mov	r3, r1
 8003456:	80bb      	strh	r3, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	70fb      	strb	r3, [r7, #3]
uint32_t i, b, j;

	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 800345c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003460:	b29a      	uxth	r2, r3
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	4413      	add	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b01      	subs	r3, #1
 800346a:	b29c      	uxth	r4, r3
 800346c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003470:	b29a      	uxth	r2, r3
 8003472:	88bb      	ldrh	r3, [r7, #4]
 8003474:	4413      	add	r3, r2
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	88f8      	ldrh	r0, [r7, #6]
 8003480:	4622      	mov	r2, r4
 8003482:	f7ff fe4f 	bl	8003124 <ST7789_SetAddressWindow>
	uint8_t cdata[] = {color >> 8, color & 0xFF};
 8003486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003488:	0a1b      	lsrs	r3, r3, #8
 800348a:	b29b      	uxth	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	733b      	strb	r3, [r7, #12]
 8003490:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003492:	b2db      	uxtb	r3, r3
 8003494:	737b      	strb	r3, [r7, #13]
	uint8_t bdata[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003496:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	b29b      	uxth	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	723b      	strb	r3, [r7, #8]
 80034a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	727b      	strb	r3, [r7, #9]
	uint8_t *uk = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]

	for (i = 0; i < font.height; i++) {
 80034ae:	2300      	movs	r3, #0
 80034b0:	61fb      	str	r3, [r7, #28]
 80034b2:	e02f      	b.n	8003514 <ST7789_WriteChar+0xce>
		b = font.data[(ch - 32) * font.height + i];
 80034b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	3b20      	subs	r3, #32
 80034ba:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4619      	mov	r1, r3
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	440b      	add	r3, r1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	613b      	str	r3, [r7, #16]
		for (j = 0; j < font.width; j++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	61bb      	str	r3, [r7, #24]
 80034d4:	e015      	b.n	8003502 <ST7789_WriteChar+0xbc>
			if ((b << j) & 0x8000) {
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <ST7789_WriteChar+0xa8>
				uk = cdata;
 80034e6:	f107 030c 	add.w	r3, r7, #12
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e002      	b.n	80034f4 <ST7789_WriteChar+0xae>
			} else {
				uk = bdata;
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	617b      	str	r3, [r7, #20]
			}
			ST7789_WriteData(uk, sizeof(cdata));
 80034f4:	2102      	movs	r1, #2
 80034f6:	6978      	ldr	r0, [r7, #20]
 80034f8:	f7ff fd24 	bl	8002f44 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	3301      	adds	r3, #1
 8003500:	61bb      	str	r3, [r7, #24]
 8003502:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003506:	461a      	mov	r2, r3
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4293      	cmp	r3, r2
 800350c:	d3e3      	bcc.n	80034d6 <ST7789_WriteChar+0x90>
	for (i = 0; i < font.height; i++) {
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3301      	adds	r3, #1
 8003512:	61fb      	str	r3, [r7, #28]
 8003514:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003518:	461a      	mov	r2, r3
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4293      	cmp	r3, r2
 800351e:	d3c9      	bcc.n	80034b4 <ST7789_WriteChar+0x6e>
			while (HAL_SPI_GetState(portOLED) != HAL_SPI_STATE_READY) {
				if (HAL_SPI_GetState(portOLED) == HAL_SPI_STATE_BUSY_TX) break;
			}*/
		}
	}
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800352c:	b002      	add	sp, #8
 800352e:	4770      	bx	lr

08003530 <ST7789_WriteString>:
//-----------------------------------------------------------------------------------------
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003530:	b082      	sub	sp, #8
 8003532:	b580      	push	{r7, lr}
 8003534:	b086      	sub	sp, #24
 8003536:	af04      	add	r7, sp, #16
 8003538:	603a      	str	r2, [r7, #0]
 800353a:	617b      	str	r3, [r7, #20]
 800353c:	4603      	mov	r3, r0
 800353e:	80fb      	strh	r3, [r7, #6]
 8003540:	460b      	mov	r3, r1
 8003542:	80bb      	strh	r3, [r7, #4]
	if (!str) return;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d03f      	beq.n	80035ca <ST7789_WriteString+0x9a>

	while (*str) {
 800354a:	e039      	b.n	80035c0 <ST7789_WriteString+0x90>
		if (x + font.width >= ST7789_WIDTH) {
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	7d3a      	ldrb	r2, [r7, #20]
 8003550:	4413      	add	r3, r2
 8003552:	2bef      	cmp	r3, #239	; 0xef
 8003554:	dd13      	ble.n	800357e <ST7789_WriteString+0x4e>
			x = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800355a:	7d7b      	ldrb	r3, [r7, #21]
 800355c:	b29a      	uxth	r2, r3
 800355e:	88bb      	ldrh	r3, [r7, #4]
 8003560:	4413      	add	r3, r2
 8003562:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) break;
 8003564:	88bb      	ldrh	r3, [r7, #4]
 8003566:	7d7a      	ldrb	r2, [r7, #21]
 8003568:	4413      	add	r3, r2
 800356a:	2bef      	cmp	r3, #239	; 0xef
 800356c:	dc2f      	bgt.n	80035ce <ST7789_WriteString+0x9e>

			if (*str == ' ') {// skip spaces in the beginning of the new line
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b20      	cmp	r3, #32
 8003574:	d103      	bne.n	800357e <ST7789_WriteString+0x4e>
				str++;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	3301      	adds	r3, #1
 800357a:	603b      	str	r3, [r7, #0]
				continue;
 800357c:	e020      	b.n	80035c0 <ST7789_WriteString+0x90>
			}
		}
		if (*str != '\n') {
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b0a      	cmp	r3, #10
 8003584:	d012      	beq.n	80035ac <ST7789_WriteString+0x7c>
			ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	781a      	ldrb	r2, [r3, #0]
 800358a:	88b9      	ldrh	r1, [r7, #4]
 800358c:	88f8      	ldrh	r0, [r7, #6]
 800358e:	8c3b      	ldrh	r3, [r7, #32]
 8003590:	9302      	str	r3, [sp, #8]
 8003592:	8bbb      	ldrh	r3, [r7, #28]
 8003594:	9301      	str	r3, [sp, #4]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f7ff ff53 	bl	8003446 <ST7789_WriteChar>
			x += font.width;
 80035a0:	7d3b      	ldrb	r3, [r7, #20]
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4413      	add	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
 80035aa:	e006      	b.n	80035ba <ST7789_WriteString+0x8a>
		} else {
			x = 0;
 80035ac:	2300      	movs	r3, #0
 80035ae:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80035b0:	7d7b      	ldrb	r3, [r7, #21]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	88bb      	ldrh	r3, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	80bb      	strh	r3, [r7, #4]
		}
		str++;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	603b      	str	r3, [r7, #0]
	while (*str) {
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1c1      	bne.n	800354c <ST7789_WriteString+0x1c>
 80035c8:	e002      	b.n	80035d0 <ST7789_WriteString+0xa0>
	if (!str) return;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <ST7789_WriteString+0xa0>
			if (y + font.height >= ST7789_HEIGHT) break;
 80035ce:	bf00      	nop
	}
}
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035d8:	b002      	add	sp, #8
 80035da:	4770      	bx	lr

080035dc <mkLineCenter>:

}
*/
//-----------------------------------------------------------------------------------------
char *mkLineCenter(char *str, uint16_t width)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0a4      	sub	sp, #144	; 0x90
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	460b      	mov	r3, r1
 80035e6:	807b      	strh	r3, [r7, #2]
char st[128] = {0};
 80035e8:	2300      	movs	r3, #0
 80035ea:	60fb      	str	r3, [r7, #12]
 80035ec:	f107 0310 	add.w	r3, r7, #16
 80035f0:	227c      	movs	r2, #124	; 0x7c
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f008 fcf7 	bl	800bfe8 <memset>

	memset(st, 0x20, 127);
 80035fa:	f107 030c 	add.w	r3, r7, #12
 80035fe:	227f      	movs	r2, #127	; 0x7f
 8003600:	2120      	movs	r1, #32
 8003602:	4618      	mov	r0, r3
 8003604:	f008 fcf0 	bl	800bfe8 <memset>
	int8_t k = strlen(str);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fc fde1 	bl	80001d0 <strlen>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	if (k < width) {
 8003614:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 8003618:	887b      	ldrh	r3, [r7, #2]
 800361a:	429a      	cmp	r2, r3
 800361c:	da25      	bge.n	800366a <mkLineCenter+0x8e>
		int8_t n = (width - k)/2;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	f997 308f 	ldrsb.w	r3, [r7, #143]	; 0x8f
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	0fda      	lsrs	r2, r3, #31
 8003628:	4413      	add	r3, r2
 800362a:	105b      	asrs	r3, r3, #1
 800362c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		memcpy((char *)&st[n], (char *)str, k);
 8003630:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 8003634:	f107 020c 	add.w	r2, r7, #12
 8003638:	4413      	add	r3, r2
 800363a:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f008 fcc3 	bl	800bfcc <memcpy>
		st[k + n*2 + 1] = '\0';
 8003646:	f997 208f 	ldrsb.w	r2, [r7, #143]	; 0x8f
 800364a:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	3301      	adds	r3, #1
 8003654:	3390      	adds	r3, #144	; 0x90
 8003656:	443b      	add	r3, r7
 8003658:	2200      	movs	r2, #0
 800365a:	f803 2c84 	strb.w	r2, [r3, #-132]
		strcpy(str, st);
 800365e:	f107 030c 	add.w	r3, r7, #12
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f008 fe73 	bl	800c350 <strcpy>
	}

	return str;
 800366a:	687b      	ldr	r3, [r7, #4]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3790      	adds	r7, #144	; 0x90
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	607b      	str	r3, [r7, #4]
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_MspInit+0x74>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a19      	ldr	r2, [pc, #100]	; (80036e8 <HAL_MspInit+0x74>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <HAL_MspInit+0x74>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003696:	2300      	movs	r3, #0
 8003698:	603b      	str	r3, [r7, #0]
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_MspInit+0x74>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <HAL_MspInit+0x74>)
 80036a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a4:	6413      	str	r3, [r2, #64]	; 0x40
 80036a6:	4b10      	ldr	r3, [pc, #64]	; (80036e8 <HAL_MspInit+0x74>)
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80036b2:	2200      	movs	r2, #0
 80036b4:	210f      	movs	r1, #15
 80036b6:	f06f 0001 	mvn.w	r0, #1
 80036ba:	f000 fc2d 	bl	8003f18 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80036be:	2200      	movs	r2, #0
 80036c0:	2105      	movs	r1, #5
 80036c2:	2005      	movs	r0, #5
 80036c4:	f000 fc28 	bl	8003f18 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80036c8:	2005      	movs	r0, #5
 80036ca:	f000 fc41 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 80036ce:	2200      	movs	r2, #0
 80036d0:	2105      	movs	r1, #5
 80036d2:	2005      	movs	r0, #5
 80036d4:	f000 fc20 	bl	8003f18 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80036d8:	2005      	movs	r0, #5
 80036da:	f000 fc39 	bl	8003f50 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800

080036ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_RTC_MspInit+0x4c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d110      	bne.n	800372e <HAL_RTC_MspInit+0x42>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800370c:	2302      	movs	r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8003710:	4b0a      	ldr	r3, [pc, #40]	; (800373c <HAL_RTC_MspInit+0x50>)
 8003712:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003714:	f107 0308 	add.w	r3, r7, #8
 8003718:	4618      	mov	r0, r3
 800371a:	f002 fb67 	bl	8005dec <HAL_RCCEx_PeriphCLKConfig>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_RTC_MspInit+0x3c>
    {
      Error_Handler();
 8003724:	f7ff fbb6 	bl	8002e94 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003728:	4b05      	ldr	r3, [pc, #20]	; (8003740 <HAL_RTC_MspInit+0x54>)
 800372a:	2201      	movs	r2, #1
 800372c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40002800 	.word	0x40002800
 800373c:	00190300 	.word	0x00190300
 8003740:	42470e3c 	.word	0x42470e3c

08003744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	; 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a39      	ldr	r2, [pc, #228]	; (8003848 <HAL_SPI_MspInit+0x104>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d16b      	bne.n	800383e <HAL_SPI_MspInit+0xfa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	613b      	str	r3, [r7, #16]
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <HAL_SPI_MspInit+0x108>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a37      	ldr	r2, [pc, #220]	; (800384c <HAL_SPI_MspInit+0x108>)
 8003770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b35      	ldr	r3, [pc, #212]	; (800384c <HAL_SPI_MspInit+0x108>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	60fb      	str	r3, [r7, #12]
 8003786:	4b31      	ldr	r3, [pc, #196]	; (800384c <HAL_SPI_MspInit+0x108>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a30      	ldr	r2, [pc, #192]	; (800384c <HAL_SPI_MspInit+0x108>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b2e      	ldr	r3, [pc, #184]	; (800384c <HAL_SPI_MspInit+0x108>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = IPS_SCK_Pin|IPS_MOSI_Pin;
 800379e:	23a0      	movs	r3, #160	; 0xa0
 80037a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ae:	2305      	movs	r3, #5
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	4825      	ldr	r0, [pc, #148]	; (8003850 <HAL_SPI_MspInit+0x10c>)
 80037ba:	f000 ffd9 	bl	8004770 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80037be:	4b25      	ldr	r3, [pc, #148]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037c0:	4a25      	ldr	r2, [pc, #148]	; (8003858 <HAL_SPI_MspInit+0x114>)
 80037c2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037c6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80037ca:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037cc:	4b21      	ldr	r3, [pc, #132]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037d2:	4b20      	ldr	r3, [pc, #128]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037d8:	4b1e      	ldr	r3, [pc, #120]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037de:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037e0:	4b1c      	ldr	r3, [pc, #112]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037e6:	4b1b      	ldr	r3, [pc, #108]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037f8:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <HAL_SPI_MspInit+0x110>)
 80037fc:	2204      	movs	r2, #4
 80037fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003800:	4b14      	ldr	r3, [pc, #80]	; (8003854 <HAL_SPI_MspInit+0x110>)
 8003802:	2203      	movs	r2, #3
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_SPI_MspInit+0x110>)
 8003808:	2200      	movs	r2, #0
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800380c:	4b11      	ldr	r3, [pc, #68]	; (8003854 <HAL_SPI_MspInit+0x110>)
 800380e:	2200      	movs	r2, #0
 8003810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003812:	4810      	ldr	r0, [pc, #64]	; (8003854 <HAL_SPI_MspInit+0x110>)
 8003814:	f000 fbaa 	bl	8003f6c <HAL_DMA_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 800381e:	f7ff fb39 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <HAL_SPI_MspInit+0x110>)
 8003826:	649a      	str	r2, [r3, #72]	; 0x48
 8003828:	4a0a      	ldr	r2, [pc, #40]	; (8003854 <HAL_SPI_MspInit+0x110>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2102      	movs	r1, #2
 8003832:	2023      	movs	r0, #35	; 0x23
 8003834:	f000 fb70 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003838:	2023      	movs	r0, #35	; 0x23
 800383a:	f000 fb89 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800383e:	bf00      	nop
 8003840:	3728      	adds	r7, #40	; 0x28
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40013000 	.word	0x40013000
 800384c:	40023800 	.word	0x40023800
 8003850:	40020000 	.word	0x40020000
 8003854:	20000194 	.word	0x20000194
 8003858:	40026458 	.word	0x40026458

0800385c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800386c:	d115      	bne.n	800389a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_TIM_Base_MspInit+0x48>)
 8003874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003876:	4a0b      	ldr	r2, [pc, #44]	; (80038a4 <HAL_TIM_Base_MspInit+0x48>)
 8003878:	f043 0301 	orr.w	r3, r3, #1
 800387c:	6413      	str	r3, [r2, #64]	; 0x40
 800387e:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_TIM_Base_MspInit+0x48>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2101      	movs	r1, #1
 800388e:	201c      	movs	r0, #28
 8003890:	f000 fb42 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003894:	201c      	movs	r0, #28
 8003896:	f000 fb5b 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800

080038a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b0:	f107 0314 	add.w	r3, r7, #20
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
 80038be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a35      	ldr	r2, [pc, #212]	; (800399c <HAL_UART_MspInit+0xf4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d163      	bne.n	8003992 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	4b34      	ldr	r3, [pc, #208]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a33      	ldr	r2, [pc, #204]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e2:	613b      	str	r3, [r7, #16]
 80038e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e6:	2300      	movs	r3, #0
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	6313      	str	r3, [r2, #48]	; 0x30
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <HAL_UART_MspInit+0xf8>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	60fb      	str	r3, [r7, #12]
 8003900:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 8003902:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003908:	2302      	movs	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390c:	2300      	movs	r3, #0
 800390e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003910:	2303      	movs	r3, #3
 8003912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003914:	2307      	movs	r3, #7
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003918:	f107 0314 	add.w	r3, r7, #20
 800391c:	4619      	mov	r1, r3
 800391e:	4821      	ldr	r0, [pc, #132]	; (80039a4 <HAL_UART_MspInit+0xfc>)
 8003920:	f000 ff26 	bl	8004770 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003926:	4a21      	ldr	r2, [pc, #132]	; (80039ac <HAL_UART_MspInit+0x104>)
 8003928:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800392c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003930:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003932:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	4b1b      	ldr	r3, [pc, #108]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800393e:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003940:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003944:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003946:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800394c:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800394e:	2200      	movs	r2, #0
 8003950:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003952:	4b15      	ldr	r3, [pc, #84]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003954:	2200      	movs	r2, #0
 8003956:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003958:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800395a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800395e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003962:	2200      	movs	r2, #0
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003966:	4810      	ldr	r0, [pc, #64]	; (80039a8 <HAL_UART_MspInit+0x100>)
 8003968:	f000 fb00 	bl	8003f6c <HAL_DMA_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003972:	f7ff fa8f 	bl	8002e94 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a0b      	ldr	r2, [pc, #44]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800397a:	635a      	str	r2, [r3, #52]	; 0x34
 800397c:	4a0a      	ldr	r2, [pc, #40]	; (80039a8 <HAL_UART_MspInit+0x100>)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003982:	2200      	movs	r2, #0
 8003984:	2105      	movs	r1, #5
 8003986:	2027      	movs	r0, #39	; 0x27
 8003988:	f000 fac6 	bl	8003f18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800398c:	2027      	movs	r0, #39	; 0x27
 800398e:	f000 fadf 	bl	8003f50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003992:	bf00      	nop
 8003994:	3728      	adds	r7, #40	; 0x28
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40004800 	.word	0x40004800
 80039a0:	40023800 	.word	0x40023800
 80039a4:	40020400 	.word	0x40020400
 80039a8:	20000280 	.word	0x20000280
 80039ac:	40026058 	.word	0x40026058

080039b0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80039c4:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_FSMC_MspInit+0x98>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d139      	bne.n	8003a40 <HAL_FSMC_MspInit+0x90>
    return;
  }
  FSMC_Initialized = 1;
 80039cc:	4b1e      	ldr	r3, [pc, #120]	; (8003a48 <HAL_FSMC_MspInit+0x98>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_FSMC_MspInit+0x9c>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	4a1c      	ldr	r2, [pc, #112]	; (8003a4c <HAL_FSMC_MspInit+0x9c>)
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	6393      	str	r3, [r2, #56]	; 0x38
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_FSMC_MspInit+0x9c>)
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD6   ------> FSMC_NWAIT
  PD7   ------> FSMC_NCE2
  */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin;
 80039ee:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80039f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f4:	2302      	movs	r3, #2
 80039f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a00:	230c      	movs	r3, #12
 8003a02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4811      	ldr	r0, [pc, #68]	; (8003a50 <HAL_FSMC_MspInit+0xa0>)
 8003a0a:	f000 feb1 	bl	8004770 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = CLE_Pin|ALE_Pin|D0_Pin|D1_Pin
 8003a0e:	f64d 03f3 	movw	r3, #55539	; 0xd8f3
 8003a12:	607b      	str	r3, [r7, #4]
                          |D2_Pin|D3_Pin|NOE_Pin|NWE_Pin
                          |NWAIT_Pin|NCE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a14:	2302      	movs	r3, #2
 8003a16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8003a20:	230c      	movs	r3, #12
 8003a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	4619      	mov	r1, r3
 8003a28:	480a      	ldr	r0, [pc, #40]	; (8003a54 <HAL_FSMC_MspInit+0xa4>)
 8003a2a:	f000 fea1 	bl	8004770 <HAL_GPIO_Init>

  /* Peripheral interrupt init */
  HAL_NVIC_SetPriority(FSMC_IRQn, 5, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2105      	movs	r1, #5
 8003a32:	2030      	movs	r0, #48	; 0x30
 8003a34:	f000 fa70 	bl	8003f18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FSMC_IRQn);
 8003a38:	2030      	movs	r0, #48	; 0x30
 8003a3a:	f000 fa89 	bl	8003f50 <HAL_NVIC_EnableIRQ>
 8003a3e:	e000      	b.n	8003a42 <HAL_FSMC_MspInit+0x92>
    return;
 8003a40:	bf00      	nop
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8003a42:	3718      	adds	r7, #24
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	20001b8c 	.word	0x20001b8c
 8003a4c:	40023800 	.word	0x40023800
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40020c00 	.word	0x40020c00

08003a58 <HAL_NAND_MspInit>:

void HAL_NAND_MspInit(NAND_HandleTypeDef* hnand){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NAND_MspInit 0 */

  /* USER CODE END NAND_MspInit 0 */
  HAL_FSMC_MspInit();
 8003a60:	f7ff ffa6 	bl	80039b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN NAND_MspInit 1 */

  /* USER CODE END NAND_MspInit 1 */
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003a74:	2300      	movs	r3, #0
 8003a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	2019      	movs	r0, #25
 8003a82:	f000 fa49 	bl	8003f18 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003a86:	2019      	movs	r0, #25
 8003a88:	f000 fa62 	bl	8003f50 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	4b1f      	ldr	r3, [pc, #124]	; (8003b10 <HAL_InitTick+0xa4>)
 8003a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a94:	4a1e      	ldr	r2, [pc, #120]	; (8003b10 <HAL_InitTick+0xa4>)
 8003a96:	f043 0301 	orr.w	r3, r3, #1
 8003a9a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a9c:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_InitTick+0xa4>)
 8003a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003aa8:	f107 0210 	add.w	r2, r7, #16
 8003aac:	f107 0314 	add.w	r3, r7, #20
 8003ab0:	4611      	mov	r1, r2
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 f968 	bl	8005d88 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003ab8:	f002 f952 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 8003abc:	4603      	mov	r3, r0
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <HAL_InitTick+0xa8>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	0c9b      	lsrs	r3, r3, #18
 8003acc:	3b01      	subs	r3, #1
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	; (8003b18 <HAL_InitTick+0xac>)
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <HAL_InitTick+0xb0>)
 8003ad4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_InitTick+0xac>)
 8003ad8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003adc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003ade:	4a0e      	ldr	r2, [pc, #56]	; (8003b18 <HAL_InitTick+0xac>)
 8003ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_InitTick+0xac>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aea:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_InitTick+0xac>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003af0:	4809      	ldr	r0, [pc, #36]	; (8003b18 <HAL_InitTick+0xac>)
 8003af2:	f003 fa4b 	bl	8006f8c <HAL_TIM_Base_Init>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003afc:	4806      	ldr	r0, [pc, #24]	; (8003b18 <HAL_InitTick+0xac>)
 8003afe:	f003 fa95 	bl	800702c <HAL_TIM_Base_Start_IT>
 8003b02:	4603      	mov	r3, r0
 8003b04:	e000      	b.n	8003b08 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40023800 	.word	0x40023800
 8003b14:	431bde83 	.word	0x431bde83
 8003b18:	20001b90 	.word	0x20001b90
 8003b1c:	40010000 	.word	0x40010000

08003b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b2e:	b480      	push	{r7}
 8003b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b32:	e7fe      	b.n	8003b32 <HardFault_Handler+0x4>

08003b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b38:	e7fe      	b.n	8003b38 <MemManage_Handler+0x4>

08003b3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b3e:	e7fe      	b.n	8003b3e <BusFault_Handler+0x4>

08003b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b44:	e7fe      	b.n	8003b44 <UsageFault_Handler+0x4>

08003b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b46:	b480      	push	{r7}
 8003b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <DMA1_Stream3_IRQHandler+0x10>)
 8003b6a:	f000 fb97 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000280 	.word	0x20000280

08003b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003b7e:	f003 fac5 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20001b90 	.word	0x20001b90

08003b8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <TIM2_IRQHandler+0x10>)
 8003b92:	f003 fabb 	bl	800710c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200001f4 	.word	0x200001f4

08003ba0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <SPI1_IRQHandler+0x10>)
 8003ba6:	f002 ff7d 	bl	8006aa4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	2000013c 	.word	0x2000013c

08003bb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <USART3_IRQHandler+0x10>)
 8003bba:	f003 ff65 	bl	8007a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000023c 	.word	0x2000023c

08003bc8 <FSMC_IRQHandler>:

/**
  * @brief This function handles FSMC global interrupt.
  */
void FSMC_IRQHandler(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_IRQn 0 */

  /* USER CODE END FSMC_IRQn 0 */
  HAL_NAND_IRQHandler(&hnand1);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <FSMC_IRQHandler+0x10>)
 8003bce:	f000 ffec 	bl	8004baa <HAL_NAND_IRQHandler>
  /* USER CODE BEGIN FSMC_IRQn 1 */

  /* USER CODE END FSMC_IRQn 1 */
}
 8003bd2:	bf00      	nop
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	200002e0 	.word	0x200002e0

08003bdc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <DMA2_Stream3_IRQHandler+0x10>)
 8003be2:	f000 fb5b 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000194 	.word	0x20000194

08003bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <_sbrk+0x5c>)
 8003bfa:	4b15      	ldr	r3, [pc, #84]	; (8003c50 <_sbrk+0x60>)
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c0c:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <_sbrk+0x64>)
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <_sbrk+0x68>)
 8003c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c12:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <_sbrk+0x64>)
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4413      	add	r3, r2
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d207      	bcs.n	8003c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c20:	f008 f8f4 	bl	800be0c <__errno>
 8003c24:	4603      	mov	r3, r0
 8003c26:	220c      	movs	r2, #12
 8003c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c2e:	e009      	b.n	8003c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c30:	4b08      	ldr	r3, [pc, #32]	; (8003c54 <_sbrk+0x64>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c36:	4b07      	ldr	r3, [pc, #28]	; (8003c54 <_sbrk+0x64>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	4a05      	ldr	r2, [pc, #20]	; (8003c54 <_sbrk+0x64>)
 8003c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20020000 	.word	0x20020000
 8003c50:	00000800 	.word	0x00000800
 8003c54:	20001bd8 	.word	0x20001bd8
 8003c58:	20006a00 	.word	0x20006a00

08003c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <SystemInit+0x28>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <SystemInit+0x28>)
 8003c68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <SystemInit+0x28>)
 8003c72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c76:	609a      	str	r2, [r3, #8]
#endif
}
 8003c78:	bf00      	nop
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003c88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003c8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003c8e:	e003      	b.n	8003c98 <LoopCopyDataInit>

08003c90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003c90:	4b0c      	ldr	r3, [pc, #48]	; (8003cc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003c92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003c94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003c96:	3104      	adds	r1, #4

08003c98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003c98:	480b      	ldr	r0, [pc, #44]	; (8003cc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003c9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ccc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003c9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003c9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ca0:	d3f6      	bcc.n	8003c90 <CopyDataInit>
  ldr  r2, =_sbss
 8003ca2:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003ca4:	e002      	b.n	8003cac <LoopFillZerobss>

08003ca6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003ca6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003ca8:	f842 3b04 	str.w	r3, [r2], #4

08003cac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003cac:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003cae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003cb0:	d3f9      	bcc.n	8003ca6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003cb2:	f7ff ffd3 	bl	8003c5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003cb6:	f008 f95b 	bl	800bf70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003cba:	f7fc ffcf 	bl	8000c5c <main>
  bx  lr    
 8003cbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003cc0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003cc4:	0800f420 	.word	0x0800f420
  ldr  r0, =_sdata
 8003cc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ccc:	200000fc 	.word	0x200000fc
  ldr  r2, =_sbss
 8003cd0:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003cd4:	20006a00 	.word	0x20006a00

08003cd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003cd8:	e7fe      	b.n	8003cd8 <ADC_IRQHandler>
	...

08003cdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ce0:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <HAL_Init+0x40>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0d      	ldr	r2, [pc, #52]	; (8003d1c <HAL_Init+0x40>)
 8003ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_Init+0x40>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HAL_Init+0x40>)
 8003cf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003cf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_Init+0x40>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_Init+0x40>)
 8003cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f000 f8fc 	bl	8003f02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d0a:	200f      	movs	r0, #15
 8003d0c:	f7ff feae 	bl	8003a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d10:	f7ff fcb0 	bl	8003674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023c00 	.word	0x40023c00

08003d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <HAL_IncTick+0x20>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_IncTick+0x24>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4413      	add	r3, r2
 8003d30:	4a04      	ldr	r2, [pc, #16]	; (8003d44 <HAL_IncTick+0x24>)
 8003d32:	6013      	str	r3, [r2, #0]
}
 8003d34:	bf00      	nop
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000080 	.word	0x20000080
 8003d44:	20001bdc 	.word	0x20001bdc

08003d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d4c:	4b03      	ldr	r3, [pc, #12]	; (8003d5c <HAL_GetTick+0x14>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20001bdc 	.word	0x20001bdc

08003d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d68:	f7ff ffee 	bl	8003d48 <HAL_GetTick>
 8003d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d78:	d005      	beq.n	8003d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7a:	4b0a      	ldr	r3, [pc, #40]	; (8003da4 <HAL_Delay+0x44>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d86:	bf00      	nop
 8003d88:	f7ff ffde 	bl	8003d48 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8f7      	bhi.n	8003d88 <HAL_Delay+0x28>
  {
  }
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20000080 	.word	0x20000080

08003da8 <__NVIC_SetPriorityGrouping>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db8:	4b0c      	ldr	r3, [pc, #48]	; (8003dec <__NVIC_SetPriorityGrouping+0x44>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dda:	4a04      	ldr	r2, [pc, #16]	; (8003dec <__NVIC_SetPriorityGrouping+0x44>)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	60d3      	str	r3, [r2, #12]
}
 8003de0:	bf00      	nop
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <__NVIC_GetPriorityGrouping>:
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <__NVIC_GetPriorityGrouping+0x18>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	0a1b      	lsrs	r3, r3, #8
 8003dfa:	f003 0307 	and.w	r3, r3, #7
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	e000ed00 	.word	0xe000ed00

08003e0c <__NVIC_EnableIRQ>:
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db0b      	blt.n	8003e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	4907      	ldr	r1, [pc, #28]	; (8003e44 <__NVIC_EnableIRQ+0x38>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	e000e100 	.word	0xe000e100

08003e48 <__NVIC_SetPriority>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	6039      	str	r1, [r7, #0]
 8003e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	db0a      	blt.n	8003e72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	b2da      	uxtb	r2, r3
 8003e60:	490c      	ldr	r1, [pc, #48]	; (8003e94 <__NVIC_SetPriority+0x4c>)
 8003e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e66:	0112      	lsls	r2, r2, #4
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003e70:	e00a      	b.n	8003e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	4908      	ldr	r1, [pc, #32]	; (8003e98 <__NVIC_SetPriority+0x50>)
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	3b04      	subs	r3, #4
 8003e80:	0112      	lsls	r2, r2, #4
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	440b      	add	r3, r1
 8003e86:	761a      	strb	r2, [r3, #24]
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000e100 	.word	0xe000e100
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <NVIC_EncodePriority>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f1c3 0307 	rsb	r3, r3, #7
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	bf28      	it	cs
 8003eba:	2304      	movcs	r3, #4
 8003ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d902      	bls.n	8003ecc <NVIC_EncodePriority+0x30>
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3b03      	subs	r3, #3
 8003eca:	e000      	b.n	8003ece <NVIC_EncodePriority+0x32>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43da      	mvns	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	401a      	ands	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	fa01 f303 	lsl.w	r3, r1, r3
 8003eee:	43d9      	mvns	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef4:	4313      	orrs	r3, r2
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3724      	adds	r7, #36	; 0x24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b082      	sub	sp, #8
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7ff ff4c 	bl	8003da8 <__NVIC_SetPriorityGrouping>
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f2a:	f7ff ff61 	bl	8003df0 <__NVIC_GetPriorityGrouping>
 8003f2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7ff ffb1 	bl	8003e9c <NVIC_EncodePriority>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f40:	4611      	mov	r1, r2
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff80 	bl	8003e48 <__NVIC_SetPriority>
}
 8003f48:	bf00      	nop
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff ff54 	bl	8003e0c <__NVIC_EnableIRQ>
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff fee6 	bl	8003d48 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e099      	b.n	80040bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa8:	e00f      	b.n	8003fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003faa:	f7ff fecd 	bl	8003d48 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d908      	bls.n	8003fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e078      	b.n	80040bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e8      	bne.n	8003faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_DMA_Init+0x158>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4313      	orrs	r3, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b04      	cmp	r3, #4
 800405c:	d117      	bne.n	800408e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb01 	bl	8004678 <DMA_CheckFifoParam>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800408a:	2301      	movs	r3, #1
 800408c:	e016      	b.n	80040bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fab8 	bl	800460c <DMA_CalcBaseAndBitshift>
 800409c:	4603      	mov	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	f010803f 	.word	0xf010803f

080040c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_DMA_Start_IT+0x26>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e040      	b.n	8004170 <HAL_DMA_Start_IT+0xa8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d12f      	bne.n	8004162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa4a 	bl	80045b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0216 	orr.w	r2, r2, #22
 8004136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e005      	b.n	800416e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004186:	f7ff fddf 	bl	8003d48 <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e052      	b.n	8004250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0216 	bic.w	r2, r2, #22
 80041b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_DMA_Abort+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0208 	bic.w	r2, r2, #8
 80041e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fa:	e013      	b.n	8004224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041fc:	f7ff fda4 	bl	8003d48 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b05      	cmp	r3, #5
 8004208:	d90c      	bls.n	8004224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2203      	movs	r2, #3
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e015      	b.n	8004250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e4      	bne.n	80041fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	223f      	movs	r2, #63	; 0x3f
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00c      	b.n	8004290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a8:	4b8e      	ldr	r3, [pc, #568]	; (80044e4 <HAL_DMA_IRQHandler+0x248>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a8e      	ldr	r2, [pc, #568]	; (80044e8 <HAL_DMA_IRQHandler+0x24c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2208      	movs	r2, #8
 80042c8:	409a      	lsls	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2208      	movs	r2, #8
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2201      	movs	r2, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	2204      	movs	r2, #4
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2204      	movs	r2, #4
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2210      	movs	r2, #16
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d043      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03c      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2210      	movs	r2, #16
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e01f      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e016      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0208 	bic.w	r2, r2, #8
 80043fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2220      	movs	r2, #32
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 808f 	beq.w	800453c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8087 	beq.w	800453c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b05      	cmp	r3, #5
 8004444:	d136      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0216 	bic.w	r2, r2, #22
 8004454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <HAL_DMA_IRQHandler+0x1da>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0208 	bic.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	223f      	movs	r2, #63	; 0x3f
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07e      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
        }
        return;
 80044b2:	e079      	b.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01d      	beq.n	80044fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10d      	bne.n	80044ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d031      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e02c      	b.n	800453c <HAL_DMA_IRQHandler+0x2a0>
 80044e2:	bf00      	nop
 80044e4:	20000078 	.word	0x20000078
 80044e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d023      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
 80044fc:	e01e      	b.n	800453c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0210 	bic.w	r2, r2, #16
 800451a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004540:	2b00      	cmp	r3, #0
 8004542:	d032      	beq.n	80045aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d022      	beq.n	8004596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2205      	movs	r2, #5
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3301      	adds	r3, #1
 800456c:	60bb      	str	r3, [r7, #8]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d307      	bcc.n	8004584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f2      	bne.n	8004568 <HAL_DMA_IRQHandler+0x2cc>
 8004582:	e000      	b.n	8004586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d005      	beq.n	80045aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
 80045a6:	e000      	b.n	80045aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80045a8:	bf00      	nop
    }
  }
}
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d108      	bne.n	80045f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ee:	e007      	b.n	8004600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3b10      	subs	r3, #16
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <DMA_CalcBaseAndBitshift+0x64>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <DMA_CalcBaseAndBitshift+0x68>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d909      	bls.n	800464e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	659a      	str	r2, [r3, #88]	; 0x58
 800464c:	e007      	b.n	800465e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	aaaaaaab 	.word	0xaaaaaaab
 8004674:	0800f274 	.word	0x0800f274

08004678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11f      	bne.n	80046d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d856      	bhi.n	8004746 <DMA_CheckFifoParam+0xce>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <DMA_CheckFifoParam+0x28>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046c3 	.word	0x080046c3
 80046a8:	080046b1 	.word	0x080046b1
 80046ac:	08004747 	.word	0x08004747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d046      	beq.n	800474a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c0:	e043      	b.n	800474a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ca:	d140      	bne.n	800474e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e03d      	b.n	800474e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	d121      	bne.n	8004720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d837      	bhi.n	8004752 <DMA_CheckFifoParam+0xda>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <DMA_CheckFifoParam+0x70>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	080046ff 	.word	0x080046ff
 80046f0:	080046f9 	.word	0x080046f9
 80046f4:	08004711 	.word	0x08004711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e030      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d025      	beq.n	8004756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470e:	e022      	b.n	8004756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004718:	d11f      	bne.n	800475a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800471e:	e01c      	b.n	800475a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d903      	bls.n	800472e <DMA_CheckFifoParam+0xb6>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d003      	beq.n	8004734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800472c:	e018      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      break;
 8004732:	e015      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e00b      	b.n	800475e <DMA_CheckFifoParam+0xe6>
      break;
 8004746:	bf00      	nop
 8004748:	e00a      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e008      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e006      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004752:	bf00      	nop
 8004754:	e004      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;   
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
    }
  } 
  
  return status; 
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e16b      	b.n	8004a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800478c:	2201      	movs	r2, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f040 815a 	bne.w	8004a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d005      	beq.n	80047c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d130      	bne.n	8004824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f8:	2201      	movs	r2, #1
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 0201 	and.w	r2, r3, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b03      	cmp	r3, #3
 800482e:	d017      	beq.n	8004860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d123      	bne.n	80048b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	08da      	lsrs	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3208      	adds	r2, #8
 8004874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	08da      	lsrs	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3208      	adds	r2, #8
 80048ae:	69b9      	ldr	r1, [r7, #24]
 80048b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0203 	and.w	r2, r3, #3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80b4 	beq.w	8004a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	4a5f      	ldr	r2, [pc, #380]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 8004900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004904:	6453      	str	r3, [r2, #68]	; 0x44
 8004906:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <HAL_GPIO_Init+0x310>)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	3302      	adds	r3, #2
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	220f      	movs	r2, #15
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_GPIO_Init+0x314>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <HAL_GPIO_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a51      	ldr	r2, [pc, #324]	; (8004a88 <HAL_GPIO_Init+0x318>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d025      	beq.n	8004992 <HAL_GPIO_Init+0x222>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_GPIO_Init+0x31c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <HAL_GPIO_Init+0x21e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <HAL_GPIO_Init+0x320>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d019      	beq.n	800498a <HAL_GPIO_Init+0x21a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a4e      	ldr	r2, [pc, #312]	; (8004a94 <HAL_GPIO_Init+0x324>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_GPIO_Init+0x216>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a4d      	ldr	r2, [pc, #308]	; (8004a98 <HAL_GPIO_Init+0x328>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00d      	beq.n	8004982 <HAL_GPIO_Init+0x212>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_GPIO_Init+0x32c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <HAL_GPIO_Init+0x20e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4b      	ldr	r2, [pc, #300]	; (8004aa0 <HAL_GPIO_Init+0x330>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_GPIO_Init+0x20a>
 8004976:	2307      	movs	r3, #7
 8004978:	e00e      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800497a:	2308      	movs	r3, #8
 800497c:	e00c      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800497e:	2306      	movs	r3, #6
 8004980:	e00a      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004982:	2305      	movs	r3, #5
 8004984:	e008      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004986:	2304      	movs	r3, #4
 8004988:	e006      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800498a:	2303      	movs	r3, #3
 800498c:	e004      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800498e:	2302      	movs	r3, #2
 8004990:	e002      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004996:	2300      	movs	r3, #0
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	f002 0203 	and.w	r2, r2, #3
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	4093      	lsls	r3, r2
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a8:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_GPIO_Init+0x310>)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a04:	4a27      	ldr	r2, [pc, #156]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3301      	adds	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	f67f ae90 	bls.w	800478c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40020000 	.word	0x40020000
 8004a88:	40020400 	.word	0x40020400
 8004a8c:	40020800 	.word	0x40020800
 8004a90:	40020c00 	.word	0x40020c00
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40021400 	.word	0x40021400
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	40021c00 	.word	0x40021c00
 8004aa4:	40013c00 	.word	0x40013c00

08004aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ab8:	787b      	ldrb	r3, [r7, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004abe:	887a      	ldrh	r2, [r7, #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ac4:	e003      	b.n	8004ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aec:	887a      	ldrh	r2, [r7, #2]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	041a      	lsls	r2, r3, #16
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	400b      	ands	r3, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_NAND_Init>:
  * @param  AttSpace_Timing pointer to Attribute space timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_NAND_Init(NAND_HandleTypeDef *hnand, FMC_NAND_PCC_TimingTypeDef *ComSpace_Timing,
                                 FMC_NAND_PCC_TimingTypeDef *AttSpace_Timing)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	607a      	str	r2, [r7, #4]
  /* Check the NAND handle state */
  if (hnand == NULL)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_NAND_Init+0x16>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e03e      	b.n	8004ba2 <HAL_NAND_Init+0x94>
  }

  if (hnand->State == HAL_NAND_STATE_RESET)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <HAL_NAND_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hnand->Lock = HAL_UNLOCKED;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Init the low level hardware */
    hnand->MspInitCallback(hnand);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_NAND_MspInit(hnand);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f7fe ff8d 	bl	8003a58 <HAL_NAND_MspInit>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */
  }

  /* Initialize NAND control Interface */
  (void)FMC_NAND_Init(hnand->Instance, &(hnand->Init));
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3304      	adds	r3, #4
 8004b46:	4619      	mov	r1, r3
 8004b48:	4610      	mov	r0, r2
 8004b4a:	f003 ff65 	bl	8008a18 <FSMC_NAND_Init>

  /* Initialize NAND common space timing Interface */
  (void)FMC_NAND_CommonSpace_Timing_Init(hnand->Instance, ComSpace_Timing, hnand->Init.NandBank);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	f003 ffa9 	bl	8008ab0 <FSMC_NAND_CommonSpace_Timing_Init>

  /* Initialize NAND attribute space timing Interface */
  (void)FMC_NAND_AttributeSpace_Timing_Init(hnand->Instance, AttSpace_Timing, hnand->Init.NandBank);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	f003 ffd6 	bl	8008b1a <FSMC_NAND_AttributeSpace_Timing_Init>

  /* Enable the NAND device */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
  __FMC_NAND_ENABLE(hnand->Instance, hnand->Init.NandBank);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b10      	cmp	r3, #16
 8004b74:	d108      	bne.n	8004b88 <HAL_NAND_Init+0x7a>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f042 0204 	orr.w	r2, r2, #4
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	e007      	b.n	8004b98 <HAL_NAND_Init+0x8a>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1a      	ldr	r2, [r3, #32]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0204 	orr.w	r2, r2, #4
 8004b96:	621a      	str	r2, [r3, #32]
#else
  __FMC_NAND_ENABLE(hnand->Instance);
#endif

  /* Update the NAND controller state */
  hnand->State = HAL_NAND_STATE_READY;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_NAND_IRQHandler>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL status
  */
void HAL_NAND_IRQHandler(NAND_HandleTypeDef *hnand)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b082      	sub	sp, #8
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Check NAND interrupt Rising edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b10      	cmp	r3, #16
 8004bb8:	d10a      	bne.n	8004bd0 <HAL_NAND_IRQHandler+0x26>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e009      	b.n	8004be4 <HAL_NAND_IRQHandler+0x3a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	bf0c      	ite	eq
 8004bde:	2301      	moveq	r3, #1
 8004be0:	2300      	movne	r3, #0
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d017      	beq.n	8004c18 <HAL_NAND_IRQHandler+0x6e>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fd fb3b 	bl	8002264 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Rising edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_RISING_EDGE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b10      	cmp	r3, #16
 8004bf4:	d108      	bne.n	8004c08 <HAL_NAND_IRQHandler+0x5e>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e007      	b.n	8004c18 <HAL_NAND_IRQHandler+0x6e>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_RISING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Level flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d10a      	bne.n	8004c36 <HAL_NAND_IRQHandler+0x8c>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e009      	b.n	8004c4a <HAL_NAND_IRQHandler+0xa0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d017      	beq.n	8004c7e <HAL_NAND_IRQHandler+0xd4>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7fd fb08 	bl	8002264 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Level pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_LEVEL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d108      	bne.n	8004c6e <HAL_NAND_IRQHandler+0xc4>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0202 	bic.w	r2, r2, #2
 8004c6a:	605a      	str	r2, [r3, #4]
 8004c6c:	e007      	b.n	8004c7e <HAL_NAND_IRQHandler+0xd4>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0202 	bic.w	r2, r2, #2
 8004c7c:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_LEVEL);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt Falling edge flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d10a      	bne.n	8004c9c <HAL_NAND_IRQHandler+0xf2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	e009      	b.n	8004cb0 <HAL_NAND_IRQHandler+0x106>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	bf0c      	ite	eq
 8004caa:	2301      	moveq	r3, #1
 8004cac:	2300      	movne	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d017      	beq.n	8004ce4 <HAL_NAND_IRQHandler+0x13a>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fd fad5 	bl	8002264 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt Falling edge pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FALLING_EDGE);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d108      	bne.n	8004cd4 <HAL_NAND_IRQHandler+0x12a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0204 	bic.w	r2, r2, #4
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	e007      	b.n	8004ce4 <HAL_NAND_IRQHandler+0x13a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0204 	bic.w	r2, r2, #4
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FALLING_EDGE);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

  /* Check NAND interrupt FIFO empty flag */
  if (__FMC_NAND_GET_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d10a      	bne.n	8004d02 <HAL_NAND_IRQHandler+0x158>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf6:	2b40      	cmp	r3, #64	; 0x40
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	e009      	b.n	8004d16 <HAL_NAND_IRQHandler+0x16c>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d017      	beq.n	8004d4a <HAL_NAND_IRQHandler+0x1a0>
  {
    /* NAND interrupt callback*/
#if (USE_HAL_NAND_REGISTER_CALLBACKS == 1)
    hnand->ItCallback(hnand);
#else
    HAL_NAND_ITCallback(hnand);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fd faa2 	bl	8002264 <HAL_NAND_ITCallback>
#endif /* (USE_HAL_NAND_REGISTER_CALLBACKS) */

    /* Clear NAND interrupt FIFO empty pending bit */
#if defined(FMC_Bank2_3) || defined(FSMC_Bank2_3)
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b10      	cmp	r3, #16
 8004d26:	d108      	bne.n	8004d3a <HAL_NAND_IRQHandler+0x190>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d36:	605a      	str	r2, [r3, #4]
#else
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, FMC_FLAG_FEMPT);
#endif /* FMC_Bank2_3 || FSMC_Bank2_3 */
  }

}
 8004d38:	e007      	b.n	8004d4a <HAL_NAND_IRQHandler+0x1a0>
    __FMC_NAND_CLEAR_FLAG(hnand->Instance, hnand->Init.NandBank, FMC_FLAG_FEMPT);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d48:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_NAND_Read_Page_8b>:
  * @param  NumPageToRead  number of pages to read from block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Read_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                        uint32_t NumPageToRead)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b08c      	sub	sp, #48	; 0x30
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	60f8      	str	r0, [r7, #12]
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpagesread = 0U;
 8004d60:	2300      	movs	r3, #0
 8004d62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToRead;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d101      	bne.n	8004d7c <HAL_NAND_Read_Page_8b+0x2a>
  {
    return HAL_BUSY;
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e140      	b.n	8004ffe <HAL_NAND_Read_Page_8b+0x2ac>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	f040 8139 	bne.w	8004ffc <HAL_NAND_Read_Page_8b+0x2aa>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_NAND_Read_Page_8b+0x46>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e132      	b.n	8004ffe <HAL_NAND_Read_Page_8b+0x2ac>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 8004da8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8004dac:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	881b      	ldrh	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	889b      	ldrh	r3, [r3, #4]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	885b      	ldrh	r3, [r3, #2]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc4:	fb00 f303 	mul.w	r3, r0, r3
 8004dc8:	4413      	add	r3, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004dce:	fb02 f303 	mul.w	r3, r2, r3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) read loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004dd6:	e0fa      	b.n	8004fce <HAL_NAND_Read_Page_8b+0x27c>
    {
      /* Send read page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004de2:	f3bf 8f4f 	dsb	sy
}
 8004de6:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df0:	d848      	bhi.n	8004e84 <HAL_NAND_Read_Page_8b+0x132>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004dfa:	fb02 f303 	mul.w	r3, r2, r3
 8004dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e02:	d21a      	bcs.n	8004e3a <HAL_NAND_Read_Page_8b+0xe8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e0e:	f3bf 8f4f 	dsb	sy
}
 8004e12:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e20:	f3bf 8f4f 	dsb	sy
}
 8004e24:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	0a1a      	lsrs	r2, r3, #8
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e34:	f3bf 8f4f 	dsb	sy
}
 8004e38:	e07d      	b.n	8004f36 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e40:	2200      	movs	r2, #0
 8004e42:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e44:	f3bf 8f4f 	dsb	sy
}
 8004e48:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e56:	f3bf 8f4f 	dsb	sy
}
 8004e5a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	0a1a      	lsrs	r2, r3, #8
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e6a:	f3bf 8f4f 	dsb	sy
}
 8004e6e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	0c1a      	lsrs	r2, r3, #16
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004e7e:	f3bf 8f4f 	dsb	sy
}
 8004e82:	e058      	b.n	8004f36 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e94:	d222      	bcs.n	8004edc <HAL_NAND_Read_Page_8b+0x18a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ea0:	f3bf 8f4f 	dsb	sy
}
 8004ea4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eac:	2200      	movs	r2, #0
 8004eae:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004eb0:	f3bf 8f4f 	dsb	sy
}
 8004eb4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ec2:	f3bf 8f4f 	dsb	sy
}
 8004ec6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	0a1a      	lsrs	r2, r3, #8
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ed6:	f3bf 8f4f 	dsb	sy
}
 8004eda:	e02c      	b.n	8004f36 <HAL_NAND_Read_Page_8b+0x1e4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ee6:	f3bf 8f4f 	dsb	sy
}
 8004eea:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004ef6:	f3bf 8f4f 	dsb	sy
}
 8004efa:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f04:	b2d2      	uxtb	r2, r2
 8004f06:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f08:	f3bf 8f4f 	dsb	sy
}
 8004f0c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	0a1a      	lsrs	r2, r3, #8
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	b2d2      	uxtb	r2, r2
 8004f1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f1c:	f3bf 8f4f 	dsb	sy
}
 8004f20:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	0c1a      	lsrs	r2, r3, #16
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f30:	f3bf 8f4f 	dsb	sy
}
 8004f34:	bf00      	nop
          __DSB();
        }
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA))  = NAND_CMD_AREA_TRUE1;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	2230      	movs	r2, #48	; 0x30
 8004f3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f40:	f3bf 8f4f 	dsb	sy
}
 8004f44:	bf00      	nop
      __DSB();


      if (hnand->Config.ExtraCommandEnable == ENABLE)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d123      	bne.n	8004f98 <HAL_NAND_Read_Page_8b+0x246>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f50:	f7fe fefa 	bl	8003d48 <HAL_GetTick>
 8004f54:	6178      	str	r0, [r7, #20]

        /* Read status until NAND is ready */
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004f56:	e011      	b.n	8004f7c <HAL_NAND_Read_Page_8b+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 8004f58:	f7fe fef6 	bl	8003d48 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f66:	d909      	bls.n	8004f7c <HAL_NAND_Read_Page_8b+0x22a>
          {
            /* Update the NAND controller state */
            hnand->State = HAL_NAND_STATE_ERROR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

            /* Process unlocked */
            __HAL_UNLOCK(hnand);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2020 	strb.w	r2, [r3, #32]

            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e040      	b.n	8004ffe <HAL_NAND_Read_Page_8b+0x2ac>
        while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fa45 	bl	800540c <HAL_NAND_Read_Status>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b40      	cmp	r3, #64	; 0x40
 8004f86:	d1e7      	bne.n	8004f58 <HAL_NAND_Read_Page_8b+0x206>
          }
        }

        /* Go back to read mode */
        *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = ((uint8_t)0x00);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f92:	f3bf 8f4f 	dsb	sy
}
 8004f96:	bf00      	nop
        __DSB();
      }

      /* Get Data into Buffer */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9c:	e009      	b.n	8004fb2 <HAL_NAND_Read_Page_8b+0x260>
      {
        *buff = *(uint8_t *)deviceaddress;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	781a      	ldrb	r2, [r3, #0]
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	701a      	strb	r2, [r3, #0]
        buff++;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	61fb      	str	r3, [r7, #28]
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8004fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fae:	3301      	adds	r3, #1
 8004fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d3f0      	bcc.n	8004f9e <HAL_NAND_Read_Page_8b+0x24c>
      }

      /* Increment read pages number */
      numpagesread++;
 8004fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to read */
      nbpages--;
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8004fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fca:	3301      	adds	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_NAND_Read_Page_8b+0x296>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fdc:	fb02 f303 	mul.w	r3, r2, r3
 8004fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	f4ff aef8 	bcc.w	8004dd8 <HAL_NAND_Read_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	e000      	b.n	8004ffe <HAL_NAND_Read_Page_8b+0x2ac>
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3730      	adds	r7, #48	; 0x30
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <HAL_NAND_Write_Page_8b>:
  * @param  NumPageToWrite   number of pages to write to block
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Write_Page_8b(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress, uint8_t *pBuffer,
                                         uint32_t NumPageToWrite)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	b08c      	sub	sp, #48	; 0x30
 800500a:	af00      	add	r7, sp, #0
 800500c:	60f8      	str	r0, [r7, #12]
 800500e:	60b9      	str	r1, [r7, #8]
 8005010:	607a      	str	r2, [r7, #4]
 8005012:	603b      	str	r3, [r7, #0]
  uint32_t index;
  uint32_t tickstart;
  uint32_t deviceaddress;
  uint32_t numpageswritten = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t nandaddress;
  uint32_t nbpages = NumPageToWrite;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	623b      	str	r3, [r7, #32]
  uint8_t *buff = pBuffer;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	61fb      	str	r3, [r7, #28]

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b02      	cmp	r3, #2
 800502a:	d101      	bne.n	8005030 <HAL_NAND_Write_Page_8b+0x2a>
  {
    return HAL_BUSY;
 800502c:	2302      	movs	r3, #2
 800502e:	e13e      	b.n	80052ae <HAL_NAND_Write_Page_8b+0x2a8>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	f040 8137 	bne.w	80052ac <HAL_NAND_Write_Page_8b+0x2a6>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_NAND_Write_Page_8b+0x46>
 8005048:	2302      	movs	r3, #2
 800504a:	e130      	b.n	80052ae <HAL_NAND_Write_Page_8b+0x2a8>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 800505c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005060:	61bb      	str	r3, [r7, #24]
#endif

    /* NAND raw address calculation */
    nandaddress = ARRAY_ADDRESS(pAddress, hnand);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	4619      	mov	r1, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	889b      	ldrh	r3, [r3, #4]
 800506c:	461a      	mov	r2, r3
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	885b      	ldrh	r3, [r3, #2]
 8005072:	4618      	mov	r0, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005078:	fb00 f303 	mul.w	r3, r0, r3
 800507c:	4413      	add	r3, r2
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005082:	fb02 f303 	mul.w	r3, r2, r3
 8005086:	440b      	add	r3, r1
 8005088:	627b      	str	r3, [r7, #36]	; 0x24

    /* Page(s) write loop */
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800508a:	e0f8      	b.n	800527e <HAL_NAND_Write_Page_8b+0x278>
    {
      /* Send write page command sequence */
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_AREA_A;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005092:	2200      	movs	r2, #0
 8005094:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005096:	f3bf 8f4f 	dsb	sy
}
 800509a:	bf00      	nop
      __DSB();
      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE0;
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a2:	2280      	movs	r2, #128	; 0x80
 80050a4:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050a6:	f3bf 8f4f 	dsb	sy
}
 80050aa:	bf00      	nop
      __DSB();

      /* Cards with page size <= 512 bytes */
      if ((hnand->Config.PageSize) <= 512U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b4:	d848      	bhi.n	8005148 <HAL_NAND_Write_Page_8b+0x142>
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c6:	d21a      	bcs.n	80050fe <HAL_NAND_Write_Page_8b+0xf8>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ce:	2200      	movs	r2, #0
 80050d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050d2:	f3bf 8f4f 	dsb	sy
}
 80050d6:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050e4:	f3bf 8f4f 	dsb	sy
}
 80050e8:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	0a1a      	lsrs	r2, r3, #8
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80050f8:	f3bf 8f4f 	dsb	sy
}
 80050fc:	e07d      	b.n	80051fa <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005108:	f3bf 8f4f 	dsb	sy
}
 800510c:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800511a:	f3bf 8f4f 	dsb	sy
}
 800511e:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	0a1a      	lsrs	r2, r3, #8
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512a:	b2d2      	uxtb	r2, r2
 800512c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800512e:	f3bf 8f4f 	dsb	sy
}
 8005132:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	0c1a      	lsrs	r2, r3, #16
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800513e:	b2d2      	uxtb	r2, r2
 8005140:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005142:	f3bf 8f4f 	dsb	sy
}
 8005146:	e058      	b.n	80051fa <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
      }
      else /* (hnand->Config.PageSize) > 512 */
      {
        if (((hnand->Config.BlockSize) * (hnand->Config.BlockNbr)) <= 65535U)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005150:	fb02 f303 	mul.w	r3, r2, r3
 8005154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005158:	d222      	bcs.n	80051a0 <HAL_NAND_Write_Page_8b+0x19a>
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005164:	f3bf 8f4f 	dsb	sy
}
 8005168:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 800516a:	69bb      	ldr	r3, [r7, #24]
 800516c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005174:	f3bf 8f4f 	dsb	sy
}
 8005178:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005186:	f3bf 8f4f 	dsb	sy
}
 800518a:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 800518c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518e:	0a1a      	lsrs	r2, r3, #8
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800519a:	f3bf 8f4f 	dsb	sy
}
 800519e:	e02c      	b.n	80051fa <HAL_NAND_Write_Page_8b+0x1f4>
          __DSB();
        }
        else /* ((hnand->Config.BlockSize)*(hnand->Config.BlockNbr)) > 65535 */
        {
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051a6:	2200      	movs	r2, #0
 80051a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051aa:	f3bf 8f4f 	dsb	sy
}
 80051ae:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = 0x00U;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051ba:	f3bf 8f4f 	dsb	sy
}
 80051be:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(nandaddress);
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051cc:	f3bf 8f4f 	dsb	sy
}
 80051d0:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(nandaddress);
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	0a1a      	lsrs	r2, r3, #8
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051dc:	b2d2      	uxtb	r2, r2
 80051de:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051e0:	f3bf 8f4f 	dsb	sy
}
 80051e4:	bf00      	nop
          __DSB();
          *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(nandaddress);
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	0c1a      	lsrs	r2, r3, #16
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80051f4:	f3bf 8f4f 	dsb	sy
}
 80051f8:	bf00      	nop
          __DSB();
        }
      }

      /* Write data to memory */
      for (index = 0U; index < hnand->Config.PageSize; index++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051fe:	e00c      	b.n	800521a <HAL_NAND_Write_Page_8b+0x214>
      {
        *(__IO uint8_t *)deviceaddress = *buff;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	7812      	ldrb	r2, [r2, #0]
 8005206:	701a      	strb	r2, [r3, #0]
        buff++;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	3301      	adds	r3, #1
 800520c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("dsb 0xF":::"memory");
 800520e:	f3bf 8f4f 	dsb	sy
}
 8005212:	bf00      	nop
      for (index = 0U; index < hnand->Config.PageSize; index++)
 8005214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005216:	3301      	adds	r3, #1
 8005218:	62fb      	str	r3, [r7, #44]	; 0x2c
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005220:	429a      	cmp	r2, r3
 8005222:	d3ed      	bcc.n	8005200 <HAL_NAND_Write_Page_8b+0x1fa>
        __DSB();
      }

      *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_WRITE_TRUE1;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522a:	2210      	movs	r2, #16
 800522c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800522e:	f3bf 8f4f 	dsb	sy
}
 8005232:	bf00      	nop
      __DSB();

      /* Get tick */
      tickstart = HAL_GetTick();
 8005234:	f7fe fd88 	bl	8003d48 <HAL_GetTick>
 8005238:	6178      	str	r0, [r7, #20]

      /* Read status until NAND is ready */
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 800523a:	e011      	b.n	8005260 <HAL_NAND_Write_Page_8b+0x25a>
      {
        if ((HAL_GetTick() - tickstart) > NAND_WRITE_TIMEOUT)
 800523c:	f7fe fd84 	bl	8003d48 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800524a:	d909      	bls.n	8005260 <HAL_NAND_Write_Page_8b+0x25a>
        {
          /* Update the NAND controller state */
          hnand->State = HAL_NAND_STATE_ERROR;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2203      	movs	r2, #3
 8005250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process unlocked */
          __HAL_UNLOCK(hnand);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e026      	b.n	80052ae <HAL_NAND_Write_Page_8b+0x2a8>
      while (HAL_NAND_Read_Status(hnand) != NAND_READY)
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8d3 	bl	800540c <HAL_NAND_Read_Status>
 8005266:	4603      	mov	r3, r0
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d1e7      	bne.n	800523c <HAL_NAND_Write_Page_8b+0x236>
        }
      }

      /* Increment written pages number */
      numpageswritten++;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	3301      	adds	r3, #1
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Decrement pages to write */
      nbpages--;
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	3b01      	subs	r3, #1
 8005276:	623b      	str	r3, [r7, #32]

      /* Increment the NAND address */
      nandaddress = (uint32_t)(nandaddress + 1U);
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527a:	3301      	adds	r3, #1
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
    while ((nbpages != 0U) && (nandaddress < ((hnand->Config.BlockSize) * (hnand->Config.BlockNbr))))
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <HAL_NAND_Write_Page_8b+0x292>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800528c:	fb02 f303 	mul.w	r3, r2, r3
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	429a      	cmp	r2, r3
 8005294:	f4ff aefa 	bcc.w	800508c <HAL_NAND_Write_Page_8b+0x86>
    }

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	e000      	b.n	80052ae <HAL_NAND_Write_Page_8b+0x2a8>
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3730      	adds	r7, #48	; 0x30
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <HAL_NAND_Erase_Block>:
  *                the configuration information for NAND module.
  * @param  pAddress  pointer to NAND address structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NAND_Erase_Block(NAND_HandleTypeDef *hnand, NAND_AddressTypeDef *pAddress)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  uint32_t deviceaddress;

  /* Check the NAND controller state */
  if (hnand->State == HAL_NAND_STATE_BUSY)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d101      	bne.n	80052d0 <HAL_NAND_Erase_Block+0x1a>
  {
    return HAL_BUSY;
 80052cc:	2302      	movs	r3, #2
 80052ce:	e089      	b.n	80053e4 <HAL_NAND_Erase_Block+0x12e>
  }
  else if (hnand->State == HAL_NAND_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 8082 	bne.w	80053e2 <HAL_NAND_Erase_Block+0x12c>
  {
    /* Process Locked */
    __HAL_LOCK(hnand);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_NAND_Erase_Block+0x36>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e07b      	b.n	80053e4 <HAL_NAND_Erase_Block+0x12e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    else
    {
      deviceaddress = NAND_DEVICE2;
    }
#else
    deviceaddress = NAND_DEVICE;
 80052fc:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005300:	60fb      	str	r3, [r7, #12]
#endif

    /* Send Erase block command sequence */
    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE0;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005308:	2260      	movs	r2, #96	; 0x60
 800530a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800530c:	f3bf 8f4f 	dsb	sy
}
 8005310:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_1ST_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	881b      	ldrh	r3, [r3, #0]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	889b      	ldrh	r3, [r3, #4]
 800531c:	4619      	mov	r1, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	885b      	ldrh	r3, [r3, #2]
 8005322:	4618      	mov	r0, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	fb00 f303 	mul.w	r3, r0, r3
 800532c:	440b      	add	r3, r1
 800532e:	b2d9      	uxtb	r1, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	b2db      	uxtb	r3, r3
 8005336:	fb11 f303 	smulbb	r3, r1, r3
 800533a:	b2db      	uxtb	r3, r3
 800533c:	68f9      	ldr	r1, [r7, #12]
 800533e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005342:	4413      	add	r3, r2
 8005344:	b2db      	uxtb	r3, r3
 8005346:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005348:	f3bf 8f4f 	dsb	sy
}
 800534c:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_2ND_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	881b      	ldrh	r3, [r3, #0]
 8005352:	4619      	mov	r1, r3
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	889b      	ldrh	r3, [r3, #4]
 8005358:	461a      	mov	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	885b      	ldrh	r3, [r3, #2]
 800535e:	4618      	mov	r0, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	fb00 f303 	mul.w	r3, r0, r3
 8005368:	4413      	add	r3, r2
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	440b      	add	r3, r1
 8005374:	0a1a      	lsrs	r2, r3, #8
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005380:	f3bf 8f4f 	dsb	sy
}
 8005384:	bf00      	nop
    __DSB();
    *(__IO uint8_t *)((uint32_t)(deviceaddress | ADDR_AREA)) = ADDR_3RD_CYCLE(ARRAY_ADDRESS(pAddress, hnand));
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	889b      	ldrh	r3, [r3, #4]
 8005390:	461a      	mov	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	885b      	ldrh	r3, [r3, #2]
 8005396:	4618      	mov	r0, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	fb00 f303 	mul.w	r3, r0, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053a6:	fb02 f303 	mul.w	r3, r2, r3
 80053aa:	440b      	add	r3, r1
 80053ac:	0c1a      	lsrs	r2, r3, #16
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053b8:	f3bf 8f4f 	dsb	sy
}
 80053bc:	bf00      	nop
    __DSB();

    *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_ERASE1;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c4:	22d0      	movs	r2, #208	; 0xd0
 80053c6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80053c8:	f3bf 8f4f 	dsb	sy
}
 80053cc:	bf00      	nop
    __DSB();

    /* Update the NAND controller state */
    hnand->State = HAL_NAND_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process unlocked */
    __HAL_UNLOCK(hnand);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2020 	strb.w	r2, [r3, #32]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e000      	b.n	80053e4 <HAL_NAND_Erase_Block+0x12e>
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_NAND_GetState>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval HAL state
  */
HAL_NAND_StateTypeDef HAL_NAND_GetState(NAND_HandleTypeDef *hnand)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return hnand->State;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053fe:	b2db      	uxtb	r3, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_NAND_Read_Status>:
  * @param  hnand pointer to a NAND_HandleTypeDef structure that contains
  *                the configuration information for NAND module.
  * @retval NAND status
  */
uint32_t HAL_NAND_Read_Status(NAND_HandleTypeDef *hnand)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  else
  {
    deviceaddress = NAND_DEVICE2;
  }
#else
  deviceaddress = NAND_DEVICE;
 8005414:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005418:	60fb      	str	r3, [r7, #12]
#endif

  /* Send Read status operation command */
  *(__IO uint8_t *)((uint32_t)(deviceaddress | CMD_AREA)) = NAND_CMD_STATUS;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005420:	2270      	movs	r2, #112	; 0x70
 8005422:	701a      	strb	r2, [r3, #0]

  /* Read status register data */
  data = *(__IO uint8_t *)deviceaddress;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	b2db      	uxtb	r3, r3
 800542a:	60bb      	str	r3, [r7, #8]

  /* Return the status */
  if ((data & NAND_ERROR) == NAND_ERROR)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_NAND_Read_Status+0x2e>
  {
    return NAND_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e007      	b.n	800544a <HAL_NAND_Read_Status+0x3e>
  }
  else if ((data & NAND_READY) == NAND_READY)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_NAND_Read_Status+0x3c>
  {
    return NAND_READY;
 8005444:	2340      	movs	r3, #64	; 0x40
 8005446:	e000      	b.n	800544a <HAL_NAND_Read_Status+0x3e>
  }
  else
  {
    return NAND_BUSY;
 8005448:	2300      	movs	r3, #0
  }
}
 800544a:	4618      	mov	r0, r3
 800544c:	3714      	adds	r7, #20
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e267      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d075      	beq.n	8005562 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005476:	4b88      	ldr	r3, [pc, #544]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b04      	cmp	r3, #4
 8005480:	d00c      	beq.n	800549c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005482:	4b85      	ldr	r3, [pc, #532]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800548a:	2b08      	cmp	r3, #8
 800548c:	d112      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b82      	ldr	r3, [pc, #520]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800549a:	d10b      	bne.n	80054b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	4b7e      	ldr	r3, [pc, #504]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d05b      	beq.n	8005560 <HAL_RCC_OscConfig+0x108>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d157      	bne.n	8005560 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e242      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054bc:	d106      	bne.n	80054cc <HAL_RCC_OscConfig+0x74>
 80054be:	4b76      	ldr	r3, [pc, #472]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a75      	ldr	r2, [pc, #468]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e01d      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80054d4:	d10c      	bne.n	80054f0 <HAL_RCC_OscConfig+0x98>
 80054d6:	4b70      	ldr	r3, [pc, #448]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a6f      	ldr	r2, [pc, #444]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054e0:	6013      	str	r3, [r2, #0]
 80054e2:	4b6d      	ldr	r3, [pc, #436]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6c      	ldr	r2, [pc, #432]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	e00b      	b.n	8005508 <HAL_RCC_OscConfig+0xb0>
 80054f0:	4b69      	ldr	r3, [pc, #420]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a68      	ldr	r2, [pc, #416]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	4b66      	ldr	r3, [pc, #408]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a65      	ldr	r2, [pc, #404]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005506:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d013      	beq.n	8005538 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005510:	f7fe fc1a 	bl	8003d48 <HAL_GetTick>
 8005514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005516:	e008      	b.n	800552a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005518:	f7fe fc16 	bl	8003d48 <HAL_GetTick>
 800551c:	4602      	mov	r2, r0
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	1ad3      	subs	r3, r2, r3
 8005522:	2b64      	cmp	r3, #100	; 0x64
 8005524:	d901      	bls.n	800552a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e207      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800552a:	4b5b      	ldr	r3, [pc, #364]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0f0      	beq.n	8005518 <HAL_RCC_OscConfig+0xc0>
 8005536:	e014      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005538:	f7fe fc06 	bl	8003d48 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005540:	f7fe fc02 	bl	8003d48 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e1f3      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005552:	4b51      	ldr	r3, [pc, #324]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0xe8>
 800555e:	e000      	b.n	8005562 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005560:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d063      	beq.n	8005636 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800556e:	4b4a      	ldr	r3, [pc, #296]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f003 030c 	and.w	r3, r3, #12
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00b      	beq.n	8005592 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800557a:	4b47      	ldr	r3, [pc, #284]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005582:	2b08      	cmp	r3, #8
 8005584:	d11c      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005586:	4b44      	ldr	r3, [pc, #272]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d116      	bne.n	80055c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005592:	4b41      	ldr	r3, [pc, #260]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d001      	beq.n	80055aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e1c7      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055aa:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	00db      	lsls	r3, r3, #3
 80055b8:	4937      	ldr	r1, [pc, #220]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055be:	e03a      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d020      	beq.n	800560a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055c8:	4b34      	ldr	r3, [pc, #208]	; (800569c <HAL_RCC_OscConfig+0x244>)
 80055ca:	2201      	movs	r2, #1
 80055cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ce:	f7fe fbbb 	bl	8003d48 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055d6:	f7fe fbb7 	bl	8003d48 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e1a8      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e8:	4b2b      	ldr	r3, [pc, #172]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d0f0      	beq.n	80055d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055f4:	4b28      	ldr	r3, [pc, #160]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4925      	ldr	r1, [pc, #148]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 8005604:	4313      	orrs	r3, r2
 8005606:	600b      	str	r3, [r1, #0]
 8005608:	e015      	b.n	8005636 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800560a:	4b24      	ldr	r3, [pc, #144]	; (800569c <HAL_RCC_OscConfig+0x244>)
 800560c:	2200      	movs	r2, #0
 800560e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fe fb9a 	bl	8003d48 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005618:	f7fe fb96 	bl	8003d48 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e187      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0308 	and.w	r3, r3, #8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d036      	beq.n	80056b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800564a:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <HAL_RCC_OscConfig+0x248>)
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fe fb7a 	bl	8003d48 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005656:	e008      	b.n	800566a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005658:	f7fe fb76 	bl	8003d48 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d901      	bls.n	800566a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e167      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_OscConfig+0x240>)
 800566c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d0f0      	beq.n	8005658 <HAL_RCC_OscConfig+0x200>
 8005676:	e01b      	b.n	80056b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005678:	4b09      	ldr	r3, [pc, #36]	; (80056a0 <HAL_RCC_OscConfig+0x248>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567e:	f7fe fb63 	bl	8003d48 <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005684:	e00e      	b.n	80056a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005686:	f7fe fb5f 	bl	8003d48 <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d907      	bls.n	80056a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e150      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
 8005698:	40023800 	.word	0x40023800
 800569c:	42470000 	.word	0x42470000
 80056a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056a4:	4b88      	ldr	r3, [pc, #544]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1ea      	bne.n	8005686 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 8097 	beq.w	80057ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056be:	2300      	movs	r3, #0
 80056c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056c2:	4b81      	ldr	r3, [pc, #516]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d10f      	bne.n	80056ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056ce:	2300      	movs	r3, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	4b7d      	ldr	r3, [pc, #500]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
 80056de:	4b7a      	ldr	r3, [pc, #488]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ea:	2301      	movs	r3, #1
 80056ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ee:	4b77      	ldr	r3, [pc, #476]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d118      	bne.n	800572c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056fa:	4b74      	ldr	r3, [pc, #464]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a73      	ldr	r2, [pc, #460]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 8005700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005706:	f7fe fb1f 	bl	8003d48 <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800570e:	f7fe fb1b 	bl	8003d48 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e10c      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005720:	4b6a      	ldr	r3, [pc, #424]	; (80058cc <HAL_RCC_OscConfig+0x474>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0f0      	beq.n	800570e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d106      	bne.n	8005742 <HAL_RCC_OscConfig+0x2ea>
 8005734:	4b64      	ldr	r3, [pc, #400]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005738:	4a63      	ldr	r2, [pc, #396]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800573a:	f043 0301 	orr.w	r3, r3, #1
 800573e:	6713      	str	r3, [r2, #112]	; 0x70
 8005740:	e01c      	b.n	800577c <HAL_RCC_OscConfig+0x324>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	2b05      	cmp	r3, #5
 8005748:	d10c      	bne.n	8005764 <HAL_RCC_OscConfig+0x30c>
 800574a:	4b5f      	ldr	r3, [pc, #380]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800574c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574e:	4a5e      	ldr	r2, [pc, #376]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005750:	f043 0304 	orr.w	r3, r3, #4
 8005754:	6713      	str	r3, [r2, #112]	; 0x70
 8005756:	4b5c      	ldr	r3, [pc, #368]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575a:	4a5b      	ldr	r2, [pc, #364]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800575c:	f043 0301 	orr.w	r3, r3, #1
 8005760:	6713      	str	r3, [r2, #112]	; 0x70
 8005762:	e00b      	b.n	800577c <HAL_RCC_OscConfig+0x324>
 8005764:	4b58      	ldr	r3, [pc, #352]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	4a57      	ldr	r2, [pc, #348]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	6713      	str	r3, [r2, #112]	; 0x70
 8005770:	4b55      	ldr	r3, [pc, #340]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005774:	4a54      	ldr	r2, [pc, #336]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005776:	f023 0304 	bic.w	r3, r3, #4
 800577a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d015      	beq.n	80057b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fe fae0 	bl	8003d48 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578a:	e00a      	b.n	80057a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800578c:	f7fe fadc 	bl	8003d48 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	4293      	cmp	r3, r2
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e0cb      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a2:	4b49      	ldr	r3, [pc, #292]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	f003 0302 	and.w	r3, r3, #2
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ee      	beq.n	800578c <HAL_RCC_OscConfig+0x334>
 80057ae:	e014      	b.n	80057da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b0:	f7fe faca 	bl	8003d48 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057b6:	e00a      	b.n	80057ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057b8:	f7fe fac6 	bl	8003d48 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0b5      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057ce:	4b3e      	ldr	r3, [pc, #248]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d1ee      	bne.n	80057b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057da:	7dfb      	ldrb	r3, [r7, #23]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d105      	bne.n	80057ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057e0:	4b39      	ldr	r3, [pc, #228]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e4:	4a38      	ldr	r2, [pc, #224]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f000 80a1 	beq.w	8005938 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80057f6:	4b34      	ldr	r3, [pc, #208]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d05c      	beq.n	80058bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b02      	cmp	r3, #2
 8005808:	d141      	bne.n	800588e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800580a:	4b31      	ldr	r3, [pc, #196]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 800580c:	2200      	movs	r2, #0
 800580e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fe fa9a 	bl	8003d48 <HAL_GetTick>
 8005814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005818:	f7fe fa96 	bl	8003d48 <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e087      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1f0      	bne.n	8005818 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	69da      	ldr	r2, [r3, #28]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005844:	019b      	lsls	r3, r3, #6
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	3b01      	subs	r3, #1
 8005850:	041b      	lsls	r3, r3, #16
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005858:	061b      	lsls	r3, r3, #24
 800585a:	491b      	ldr	r1, [pc, #108]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 800585c:	4313      	orrs	r3, r2
 800585e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005860:	4b1b      	ldr	r3, [pc, #108]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 8005862:	2201      	movs	r2, #1
 8005864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005866:	f7fe fa6f 	bl	8003d48 <HAL_GetTick>
 800586a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586e:	f7fe fa6b 	bl	8003d48 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e05c      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005880:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0f0      	beq.n	800586e <HAL_RCC_OscConfig+0x416>
 800588c:	e054      	b.n	8005938 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800588e:	4b10      	ldr	r3, [pc, #64]	; (80058d0 <HAL_RCC_OscConfig+0x478>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005894:	f7fe fa58 	bl	8003d48 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800589a:	e008      	b.n	80058ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800589c:	f7fe fa54 	bl	8003d48 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d901      	bls.n	80058ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e045      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ae:	4b06      	ldr	r3, [pc, #24]	; (80058c8 <HAL_RCC_OscConfig+0x470>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d1f0      	bne.n	800589c <HAL_RCC_OscConfig+0x444>
 80058ba:	e03d      	b.n	8005938 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d107      	bne.n	80058d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e038      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
 80058c8:	40023800 	.word	0x40023800
 80058cc:	40007000 	.word	0x40007000
 80058d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x4ec>)
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	2b01      	cmp	r3, #1
 80058e0:	d028      	beq.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d121      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d11a      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005904:	4013      	ands	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800590a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800590c:	4293      	cmp	r3, r2
 800590e:	d111      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	085b      	lsrs	r3, r3, #1
 800591c:	3b01      	subs	r3, #1
 800591e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005920:	429a      	cmp	r2, r3
 8005922:	d107      	bne.n	8005934 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	40023800 	.word	0x40023800

08005948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0cc      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800595c:	4b68      	ldr	r3, [pc, #416]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d90c      	bls.n	8005984 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800596a:	4b65      	ldr	r3, [pc, #404]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005972:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0307 	and.w	r3, r3, #7
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	429a      	cmp	r2, r3
 800597e:	d001      	beq.n	8005984 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e0b8      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d020      	beq.n	80059d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800599c:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059b4:	4b53      	ldr	r3, [pc, #332]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	4a52      	ldr	r2, [pc, #328]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80059be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059c0:	4b50      	ldr	r3, [pc, #320]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	494d      	ldr	r1, [pc, #308]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d044      	beq.n	8005a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d107      	bne.n	80059f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059e6:	4b47      	ldr	r3, [pc, #284]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d119      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e07f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a02:	2b03      	cmp	r3, #3
 8005a04:	d107      	bne.n	8005a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a06:	4b3f      	ldr	r3, [pc, #252]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d109      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e06f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a16:	4b3b      	ldr	r3, [pc, #236]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e067      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a26:	4b37      	ldr	r3, [pc, #220]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f023 0203 	bic.w	r2, r3, #3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	4934      	ldr	r1, [pc, #208]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	4313      	orrs	r3, r2
 8005a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a38:	f7fe f986 	bl	8003d48 <HAL_GetTick>
 8005a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a40:	f7fe f982 	bl	8003d48 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e04f      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a56:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 020c 	and.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d1eb      	bne.n	8005a40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a68:	4b25      	ldr	r3, [pc, #148]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	683a      	ldr	r2, [r7, #0]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d20c      	bcs.n	8005a90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a76:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a78:	683a      	ldr	r2, [r7, #0]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <HAL_RCC_ClockConfig+0x1b8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d001      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e032      	b.n	8005af6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d008      	beq.n	8005aae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a9c:	4b19      	ldr	r3, [pc, #100]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4916      	ldr	r1, [pc, #88]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d009      	beq.n	8005ace <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aba:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	490e      	ldr	r1, [pc, #56]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ace:	f000 f821 	bl	8005b14 <HAL_RCC_GetSysClockFreq>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4b0b      	ldr	r3, [pc, #44]	; (8005b04 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	091b      	lsrs	r3, r3, #4
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	490a      	ldr	r1, [pc, #40]	; (8005b08 <HAL_RCC_ClockConfig+0x1c0>)
 8005ae0:	5ccb      	ldrb	r3, [r1, r3]
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005aea:	4b09      	ldr	r3, [pc, #36]	; (8005b10 <HAL_RCC_ClockConfig+0x1c8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd ffbc 	bl	8003a6c <HAL_InitTick>

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40023c00 	.word	0x40023c00
 8005b04:	40023800 	.word	0x40023800
 8005b08:	0800f25c 	.word	0x0800f25c
 8005b0c:	20000078 	.word	0x20000078
 8005b10:	2000007c 	.word	0x2000007c

08005b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b18:	b094      	sub	sp, #80	; 0x50
 8005b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b20:	2300      	movs	r3, #0
 8005b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b24:	2300      	movs	r3, #0
 8005b26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b2c:	4b79      	ldr	r3, [pc, #484]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 030c 	and.w	r3, r3, #12
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d00d      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x40>
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	f200 80e1 	bhi.w	8005d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_RCC_GetSysClockFreq+0x34>
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8005b46:	e0db      	b.n	8005d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b48:	4b73      	ldr	r3, [pc, #460]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005b4c:	e0db      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b4e:	4b73      	ldr	r3, [pc, #460]	; (8005d1c <HAL_RCC_GetSysClockFreq+0x208>)
 8005b50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005b52:	e0d8      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b54:	4b6f      	ldr	r3, [pc, #444]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b5e:	4b6d      	ldr	r3, [pc, #436]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d063      	beq.n	8005c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6a:	4b6a      	ldr	r3, [pc, #424]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	099b      	lsrs	r3, r3, #6
 8005b70:	2200      	movs	r2, #0
 8005b72:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005b7e:	2300      	movs	r3, #0
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	f04f 0000 	mov.w	r0, #0
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	0159      	lsls	r1, r3, #5
 8005b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b98:	0150      	lsls	r0, r2, #5
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	1a51      	subs	r1, r2, r1
 8005ba2:	6139      	str	r1, [r7, #16]
 8005ba4:	4629      	mov	r1, r5
 8005ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb8:	4659      	mov	r1, fp
 8005bba:	018b      	lsls	r3, r1, #6
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bc2:	4651      	mov	r1, sl
 8005bc4:	018a      	lsls	r2, r1, #6
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8005bcc:	4659      	mov	r1, fp
 8005bce:	eb63 0901 	sbc.w	r9, r3, r1
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be6:	4690      	mov	r8, r2
 8005be8:	4699      	mov	r9, r3
 8005bea:	4623      	mov	r3, r4
 8005bec:	eb18 0303 	adds.w	r3, r8, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
 8005bf2:	462b      	mov	r3, r5
 8005bf4:	eb49 0303 	adc.w	r3, r9, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c06:	4629      	mov	r1, r5
 8005c08:	024b      	lsls	r3, r1, #9
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c10:	4621      	mov	r1, r4
 8005c12:	024a      	lsls	r2, r1, #9
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c24:	f7fa fe82 	bl	800092c <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c30:	e058      	b.n	8005ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c32:	4b38      	ldr	r3, [pc, #224]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	099b      	lsrs	r3, r3, #6
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c42:	623b      	str	r3, [r7, #32]
 8005c44:	2300      	movs	r3, #0
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
 8005c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c4c:	4642      	mov	r2, r8
 8005c4e:	464b      	mov	r3, r9
 8005c50:	f04f 0000 	mov.w	r0, #0
 8005c54:	f04f 0100 	mov.w	r1, #0
 8005c58:	0159      	lsls	r1, r3, #5
 8005c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c5e:	0150      	lsls	r0, r2, #5
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4641      	mov	r1, r8
 8005c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c6a:	4649      	mov	r1, r9
 8005c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c84:	ebb2 040a 	subs.w	r4, r2, sl
 8005c88:	eb63 050b 	sbc.w	r5, r3, fp
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	f04f 0300 	mov.w	r3, #0
 8005c94:	00eb      	lsls	r3, r5, #3
 8005c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c9a:	00e2      	lsls	r2, r4, #3
 8005c9c:	4614      	mov	r4, r2
 8005c9e:	461d      	mov	r5, r3
 8005ca0:	4643      	mov	r3, r8
 8005ca2:	18e3      	adds	r3, r4, r3
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	eb45 0303 	adc.w	r3, r5, r3
 8005cac:	607b      	str	r3, [r7, #4]
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cba:	4629      	mov	r1, r5
 8005cbc:	028b      	lsls	r3, r1, #10
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cc4:	4621      	mov	r1, r4
 8005cc6:	028a      	lsls	r2, r1, #10
 8005cc8:	4610      	mov	r0, r2
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cce:	2200      	movs	r2, #0
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	61fa      	str	r2, [r7, #28]
 8005cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005cd8:	f7fa fe28 	bl	800092c <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	3301      	adds	r3, #1
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005cf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005cfe:	e002      	b.n	8005d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3750      	adds	r7, #80	; 0x50
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d12:	bf00      	nop
 8005d14:	40023800 	.word	0x40023800
 8005d18:	00f42400 	.word	0x00f42400
 8005d1c:	007a1200 	.word	0x007a1200

08005d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d26:	681b      	ldr	r3, [r3, #0]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	20000078 	.word	0x20000078

08005d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d3c:	f7ff fff0 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d40:	4602      	mov	r2, r0
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	0a9b      	lsrs	r3, r3, #10
 8005d48:	f003 0307 	and.w	r3, r3, #7
 8005d4c:	4903      	ldr	r1, [pc, #12]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4e:	5ccb      	ldrb	r3, [r1, r3]
 8005d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40023800 	.word	0x40023800
 8005d5c:	0800f26c 	.word	0x0800f26c

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d64:	f7ff ffdc 	bl	8005d20 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0b5b      	lsrs	r3, r3, #13
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800f26c 	.word	0x0800f26c

08005d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	220f      	movs	r2, #15
 8005d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0203 	and.w	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005da4:	4b0f      	ldr	r3, [pc, #60]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005db0:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005dbc:	4b09      	ldr	r3, [pc, #36]	; (8005de4 <HAL_RCC_GetClockConfig+0x5c>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005dca:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <HAL_RCC_GetClockConfig+0x60>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0207 	and.w	r2, r3, #7
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	601a      	str	r2, [r3, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800
 8005de8:	40023c00 	.word	0x40023c00

08005dec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d105      	bne.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d035      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e14:	4b62      	ldr	r3, [pc, #392]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e1a:	f7fd ff95 	bl	8003d48 <HAL_GetTick>
 8005e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e20:	e008      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e22:	f7fd ff91 	bl	8003d48 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d901      	bls.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e0b0      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f0      	bne.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	019a      	lsls	r2, r3, #6
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	071b      	lsls	r3, r3, #28
 8005e4c:	4955      	ldr	r1, [pc, #340]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e54:	4b52      	ldr	r3, [pc, #328]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e5a:	f7fd ff75 	bl	8003d48 <HAL_GetTick>
 8005e5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e60:	e008      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e62:	f7fd ff71 	bl	8003d48 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e090      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e74:	4b4b      	ldr	r3, [pc, #300]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d0f0      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 8083 	beq.w	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	4b44      	ldr	r3, [pc, #272]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	4a43      	ldr	r2, [pc, #268]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9e:	4b41      	ldr	r3, [pc, #260]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea6:	60fb      	str	r3, [r7, #12]
 8005ea8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eaa:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb6:	f7fd ff47 	bl	8003d48 <HAL_GetTick>
 8005eba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ebe:	f7fd ff43 	bl	8003d48 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e062      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed0:	4b35      	ldr	r3, [pc, #212]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005edc:	4b31      	ldr	r3, [pc, #196]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d02f      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d028      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005efa:	4b2a      	ldr	r3, [pc, #168]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f02:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f04:	4b29      	ldr	r3, [pc, #164]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f06:	2201      	movs	r2, #1
 8005f08:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f0a:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f10:	4a24      	ldr	r2, [pc, #144]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f16:	4b23      	ldr	r3, [pc, #140]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d114      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f22:	f7fd ff11 	bl	8003d48 <HAL_GetTick>
 8005f26:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f28:	e00a      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2a:	f7fd ff0d 	bl	8003d48 <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d901      	bls.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e02a      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f40:	4b18      	ldr	r3, [pc, #96]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d0ee      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f58:	d10d      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f5a:	4b12      	ldr	r3, [pc, #72]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	490d      	ldr	r1, [pc, #52]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	608b      	str	r3, [r1, #8]
 8005f74:	e005      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	4a0a      	ldr	r2, [pc, #40]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f7c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f80:	6093      	str	r3, [r2, #8]
 8005f82:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f8e:	4905      	ldr	r1, [pc, #20]	; (8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	42470068 	.word	0x42470068
 8005fa4:	40023800 	.word	0x40023800
 8005fa8:	40007000 	.word	0x40007000
 8005fac:	42470e40 	.word	0x42470e40

08005fb0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e066      	b.n	8006094 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	7f5b      	ldrb	r3, [r3, #29]
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fd fb88 	bl	80036ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	22ca      	movs	r2, #202	; 0xca
 8005fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2253      	movs	r2, #83	; 0x53
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa45 	bl	8006482 <RTC_EnterInitMode>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d12c      	bne.n	800605c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6899      	ldr	r1, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68d2      	ldr	r2, [r2, #12]
 800603c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6919      	ldr	r1, [r3, #16]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	041a      	lsls	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa4c 	bl	80064f0 <RTC_ExitInitMode>
 8006058:	4603      	mov	r3, r0
 800605a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800605c:	7bfb      	ldrb	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d113      	bne.n	800608a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	22ff      	movs	r2, #255	; 0xff
 8006090:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800609c:	b590      	push	{r4, r7, lr}
 800609e:	b087      	sub	sp, #28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	7f1b      	ldrb	r3, [r3, #28]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d101      	bne.n	80060b8 <HAL_RTC_SetTime+0x1c>
 80060b4:	2302      	movs	r3, #2
 80060b6:	e087      	b.n	80061c8 <HAL_RTC_SetTime+0x12c>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2202      	movs	r2, #2
 80060c2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d126      	bne.n	8006118 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fa29 	bl	800653a <RTC_ByteToBcd2>
 80060e8:	4603      	mov	r3, r0
 80060ea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f000 fa22 	bl	800653a <RTC_ByteToBcd2>
 80060f6:	4603      	mov	r3, r0
 80060f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80060fa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	789b      	ldrb	r3, [r3, #2]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 fa1a 	bl	800653a <RTC_ByteToBcd2>
 8006106:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006108:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	78db      	ldrb	r3, [r3, #3]
 8006110:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e018      	b.n	800614a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d102      	bne.n	800612c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2200      	movs	r2, #0
 800612a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	785b      	ldrb	r3, [r3, #1]
 8006136:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006138:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800613e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	78db      	ldrb	r3, [r3, #3]
 8006144:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006146:	4313      	orrs	r3, r2
 8006148:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	22ca      	movs	r2, #202	; 0xca
 8006150:	625a      	str	r2, [r3, #36]	; 0x24
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2253      	movs	r2, #83	; 0x53
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f991 	bl	8006482 <RTC_EnterInitMode>
 8006160:	4603      	mov	r3, r0
 8006162:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006164:	7cfb      	ldrb	r3, [r7, #19]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d120      	bne.n	80061ac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006174:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006178:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006188:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6899      	ldr	r1, [r3, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	431a      	orrs	r2, r3
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f9a4 	bl	80064f0 <RTC_ExitInitMode>
 80061a8:	4603      	mov	r3, r0
 80061aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80061ac:	7cfb      	ldrb	r3, [r7, #19]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d102      	bne.n	80061b8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	22ff      	movs	r2, #255	; 0xff
 80061be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	771a      	strb	r2, [r3, #28]

  return status;
 80061c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd90      	pop	{r4, r7, pc}

080061d0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006202:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006206:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	0c1b      	lsrs	r3, r3, #16
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	0a1b      	lsrs	r3, r3, #8
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006222:	b2da      	uxtb	r2, r3
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	b2da      	uxtb	r2, r3
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	0d9b      	lsrs	r3, r3, #22
 800623a:	b2db      	uxtb	r3, r3
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	b2da      	uxtb	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d11a      	bne.n	8006282 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 f98f 	bl	8006574 <RTC_Bcd2ToByte>
 8006256:	4603      	mov	r3, r0
 8006258:	461a      	mov	r2, r3
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	4618      	mov	r0, r3
 8006264:	f000 f986 	bl	8006574 <RTC_Bcd2ToByte>
 8006268:	4603      	mov	r3, r0
 800626a:	461a      	mov	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	789b      	ldrb	r3, [r3, #2]
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f97d 	bl	8006574 <RTC_Bcd2ToByte>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	7f1b      	ldrb	r3, [r3, #28]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d101      	bne.n	80062a8 <HAL_RTC_SetDate+0x1c>
 80062a4:	2302      	movs	r3, #2
 80062a6:	e071      	b.n	800638c <HAL_RTC_SetDate+0x100>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2201      	movs	r2, #1
 80062ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2202      	movs	r2, #2
 80062b2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10e      	bne.n	80062d8 <HAL_RTC_SetDate+0x4c>
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d008      	beq.n	80062d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	f023 0310 	bic.w	r3, r3, #16
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	330a      	adds	r3, #10
 80062d2:	b2da      	uxtb	r2, r3
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d11c      	bne.n	8006318 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f929 	bl	800653a <RTC_ByteToBcd2>
 80062e8:	4603      	mov	r3, r0
 80062ea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	785b      	ldrb	r3, [r3, #1]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f922 	bl	800653a <RTC_ByteToBcd2>
 80062f6:	4603      	mov	r3, r0
 80062f8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80062fa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	789b      	ldrb	r3, [r3, #2]
 8006300:	4618      	mov	r0, r3
 8006302:	f000 f91a 	bl	800653a <RTC_ByteToBcd2>
 8006306:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006308:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e00e      	b.n	8006336 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	78db      	ldrb	r3, [r3, #3]
 800631c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	785b      	ldrb	r3, [r3, #1]
 8006322:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006324:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006326:	68ba      	ldr	r2, [r7, #8]
 8006328:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800632a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	22ca      	movs	r2, #202	; 0xca
 800633c:	625a      	str	r2, [r3, #36]	; 0x24
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2253      	movs	r2, #83	; 0x53
 8006344:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 f89b 	bl	8006482 <RTC_EnterInitMode>
 800634c:	4603      	mov	r3, r0
 800634e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006350:	7cfb      	ldrb	r3, [r7, #19]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10c      	bne.n	8006370 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006364:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 f8c2 	bl	80064f0 <RTC_ExitInitMode>
 800636c:	4603      	mov	r3, r0
 800636e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8006370:	7cfb      	ldrb	r3, [r7, #19]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	22ff      	movs	r2, #255	; 0xff
 8006382:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	771a      	strb	r2, [r3, #28]

  return status;
 800638a:	7cfb      	ldrb	r3, [r7, #19]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	bd90      	pop	{r4, r7, pc}

08006394 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80063ae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80063b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	0a1b      	lsrs	r3, r3, #8
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	b2da      	uxtb	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	0b5b      	lsrs	r3, r3, #13
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	b2da      	uxtb	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11a      	bne.n	8006428 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	4618      	mov	r0, r3
 80063f8:	f000 f8bc 	bl	8006574 <RTC_Bcd2ToByte>
 80063fc:	4603      	mov	r3, r0
 80063fe:	461a      	mov	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	785b      	ldrb	r3, [r3, #1]
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f8b3 	bl	8006574 <RTC_Bcd2ToByte>
 800640e:	4603      	mov	r3, r0
 8006410:	461a      	mov	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	789b      	ldrb	r3, [r3, #2]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 f8aa 	bl	8006574 <RTC_Bcd2ToByte>
 8006420:	4603      	mov	r3, r0
 8006422:	461a      	mov	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3718      	adds	r7, #24
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800644c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800644e:	f7fd fc7b 	bl	8003d48 <HAL_GetTick>
 8006452:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006454:	e009      	b.n	800646a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006456:	f7fd fc77 	bl	8003d48 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006464:	d901      	bls.n	800646a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e007      	b.n	800647a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ee      	beq.n	8006456 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d122      	bne.n	80064e6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064b0:	f7fd fc4a 	bl	8003d48 <HAL_GetTick>
 80064b4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064b6:	e00c      	b.n	80064d2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064b8:	f7fd fc46 	bl	8003d48 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064c6:	d904      	bls.n	80064d2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2204      	movs	r2, #4
 80064cc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d102      	bne.n	80064e6 <RTC_EnterInitMode+0x64>
 80064e0:	7bfb      	ldrb	r3, [r7, #15]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d1e8      	bne.n	80064b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800650a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff89 	bl	8006432 <HAL_RTC_WaitForSynchro>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2204      	movs	r2, #4
 800652a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	4603      	mov	r3, r0
 8006542:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006548:	e005      	b.n	8006556 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	3301      	adds	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	3b0a      	subs	r3, #10
 8006554:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006556:	79fb      	ldrb	r3, [r7, #7]
 8006558:	2b09      	cmp	r3, #9
 800655a:	d8f6      	bhi.n	800654a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800655c:	7bfb      	ldrb	r3, [r7, #15]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	b2da      	uxtb	r2, r3
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	4313      	orrs	r3, r2
 8006566:	b2db      	uxtb	r3, r3
}
 8006568:	4618      	mov	r0, r3
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	091b      	lsrs	r3, r3, #4
 8006586:	b2db      	uxtb	r3, r3
 8006588:	461a      	mov	r2, r3
 800658a:	0092      	lsls	r2, r2, #2
 800658c:	4413      	add	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	b2da      	uxtb	r2, r3
 800659a:	7bfb      	ldrb	r3, [r7, #15]
 800659c:	4413      	add	r3, r2
 800659e:	b2db      	uxtb	r3, r3
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e07b      	b.n	80066b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d108      	bne.n	80065d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ce:	d009      	beq.n	80065e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	61da      	str	r2, [r3, #28]
 80065d6:	e005      	b.n	80065e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d106      	bne.n	8006604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fd f8a0 	bl	8003744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800661a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800662c:	431a      	orrs	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	431a      	orrs	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006654:	431a      	orrs	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665e:	431a      	orrs	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006668:	ea42 0103 	orr.w	r1, r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	0c1b      	lsrs	r3, r3, #16
 8006682:	f003 0104 	and.w	r1, r3, #4
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	f003 0210 	and.w	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69da      	ldr	r2, [r3, #28]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80066a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b088      	sub	sp, #32
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	60f8      	str	r0, [r7, #12]
 80066c6:	60b9      	str	r1, [r7, #8]
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	4613      	mov	r3, r2
 80066cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d101      	bne.n	80066e0 <HAL_SPI_Transmit+0x22>
 80066dc:	2302      	movs	r3, #2
 80066de:	e126      	b.n	800692e <HAL_SPI_Transmit+0x270>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066e8:	f7fd fb2e 	bl	8003d48 <HAL_GetTick>
 80066ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066ee:	88fb      	ldrh	r3, [r7, #6]
 80066f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d002      	beq.n	8006704 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066fe:	2302      	movs	r3, #2
 8006700:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006702:	e10b      	b.n	800691c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_SPI_Transmit+0x52>
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006714:	e102      	b.n	800691c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	88fa      	ldrh	r2, [r7, #6]
 800672e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800675c:	d10f      	bne.n	800677e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800676c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800677c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d007      	beq.n	800679c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800679a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067a4:	d14b      	bne.n	800683e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d002      	beq.n	80067b4 <HAL_SPI_Transmit+0xf6>
 80067ae:	8afb      	ldrh	r3, [r7, #22]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d13e      	bne.n	8006832 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b8:	881a      	ldrh	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c4:	1c9a      	adds	r2, r3, #2
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	3b01      	subs	r3, #1
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80067d8:	e02b      	b.n	8006832 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0302 	and.w	r3, r3, #2
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d112      	bne.n	800680e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ec:	881a      	ldrh	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f8:	1c9a      	adds	r2, r3, #2
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006802:	b29b      	uxth	r3, r3
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	86da      	strh	r2, [r3, #54]	; 0x36
 800680c:	e011      	b.n	8006832 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800680e:	f7fd fa9b 	bl	8003d48 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d803      	bhi.n	8006826 <HAL_SPI_Transmit+0x168>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006824:	d102      	bne.n	800682c <HAL_SPI_Transmit+0x16e>
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d102      	bne.n	8006832 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800682c:	2303      	movs	r3, #3
 800682e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006830:	e074      	b.n	800691c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ce      	bne.n	80067da <HAL_SPI_Transmit+0x11c>
 800683c:	e04c      	b.n	80068d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_SPI_Transmit+0x18e>
 8006846:	8afb      	ldrh	r3, [r7, #22]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d140      	bne.n	80068ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	330c      	adds	r3, #12
 8006856:	7812      	ldrb	r2, [r2, #0]
 8006858:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006868:	b29b      	uxth	r3, r3
 800686a:	3b01      	subs	r3, #1
 800686c:	b29a      	uxth	r2, r3
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006872:	e02c      	b.n	80068ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b02      	cmp	r3, #2
 8006880:	d113      	bne.n	80068aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	7812      	ldrb	r2, [r2, #0]
 800688e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006894:	1c5a      	adds	r2, r3, #1
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800689e:	b29b      	uxth	r3, r3
 80068a0:	3b01      	subs	r3, #1
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80068a8:	e011      	b.n	80068ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068aa:	f7fd fa4d 	bl	8003d48 <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d803      	bhi.n	80068c2 <HAL_SPI_Transmit+0x204>
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068c0:	d102      	bne.n	80068c8 <HAL_SPI_Transmit+0x20a>
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80068cc:	e026      	b.n	800691c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1cd      	bne.n	8006874 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f000 fb13 	bl	8006f08 <SPI_EndRxTxTransaction>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d002      	beq.n	80068ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2220      	movs	r2, #32
 80068ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10a      	bne.n	800690c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	2b00      	cmp	r3, #0
 8006912:	d002      	beq.n	800691a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e000      	b.n	800691c <HAL_SPI_Transmit+0x25e>
  }

error:
 800691a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800692c:	7ffb      	ldrb	r3, [r7, #31]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006950:	2b01      	cmp	r3, #1
 8006952:	d101      	bne.n	8006958 <HAL_SPI_Transmit_DMA+0x20>
 8006954:	2302      	movs	r3, #2
 8006956:	e09b      	b.n	8006a90 <HAL_SPI_Transmit_DMA+0x158>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006966:	b2db      	uxtb	r3, r3
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800696c:	2302      	movs	r3, #2
 800696e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006970:	e089      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d002      	beq.n	800697e <HAL_SPI_Transmit_DMA+0x46>
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d102      	bne.n	8006984 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006982:	e080      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2203      	movs	r2, #3
 8006988:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	88fa      	ldrh	r2, [r7, #6]
 800699c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	88fa      	ldrh	r2, [r7, #6]
 80069a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ca:	d10f      	bne.n	80069ec <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	4a29      	ldr	r2, [pc, #164]	; (8006a98 <HAL_SPI_Transmit_DMA+0x160>)
 80069f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f8:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_SPI_Transmit_DMA+0x164>)
 80069fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a00:	4a27      	ldr	r2, [pc, #156]	; (8006aa0 <HAL_SPI_Transmit_DMA+0x168>)
 8006a02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a08:	2200      	movs	r2, #0
 8006a0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	4619      	mov	r1, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	330c      	adds	r3, #12
 8006a1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006a24:	f7fd fb50 	bl	80040c8 <HAL_DMA_Start_IT>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a32:	f043 0210 	orr.w	r2, r3, #16
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8006a46:	e01e      	b.n	8006a86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d007      	beq.n	8006a66 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685a      	ldr	r2, [r3, #4]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0220 	orr.w	r2, r2, #32
 8006a74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0202 	orr.w	r2, r2, #2
 8006a84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	08006d75 	.word	0x08006d75
 8006a9c:	08006ccd 	.word	0x08006ccd
 8006aa0:	08006d91 	.word	0x08006d91

08006aa4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10f      	bne.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	099b      	lsrs	r3, r3, #6
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d004      	beq.n	8006ae8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	4798      	blx	r3
    return;
 8006ae6:	e0d7      	b.n	8006c98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	085b      	lsrs	r3, r3, #1
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00a      	beq.n	8006b0a <HAL_SPI_IRQHandler+0x66>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	09db      	lsrs	r3, r3, #7
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d004      	beq.n	8006b0a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	4798      	blx	r3
    return;
 8006b08:	e0c6      	b.n	8006c98 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	095b      	lsrs	r3, r3, #5
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x8c>
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	099b      	lsrs	r3, r3, #6
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	0a1b      	lsrs	r3, r3, #8
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 80b4 	beq.w	8006c98 <HAL_SPI_IRQHandler+0x1f4>
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	095b      	lsrs	r3, r3, #5
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 80ad 	beq.w	8006c98 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	099b      	lsrs	r3, r3, #6
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d023      	beq.n	8006b92 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	d011      	beq.n	8006b7a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b5a:	f043 0204 	orr.w	r2, r3, #4
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b62:	2300      	movs	r3, #0
 8006b64:	617b      	str	r3, [r7, #20]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	e00b      	b.n	8006b92 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68db      	ldr	r3, [r3, #12]
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	613b      	str	r3, [r7, #16]
 8006b8e:	693b      	ldr	r3, [r7, #16]
        return;
 8006b90:	e082      	b.n	8006c98 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	095b      	lsrs	r3, r3, #5
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d014      	beq.n	8006bc8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ba2:	f043 0201 	orr.w	r2, r3, #1
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	60fb      	str	r3, [r7, #12]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	0a1b      	lsrs	r3, r3, #8
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00c      	beq.n	8006bee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bd8:	f043 0208 	orr.w	r2, r3, #8
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006be0:	2300      	movs	r3, #0
 8006be2:	60bb      	str	r3, [r7, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d04f      	beq.n	8006c96 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c04:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	f003 0302 	and.w	r3, r3, #2
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d104      	bne.n	8006c22 <HAL_SPI_IRQHandler+0x17e>
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d034      	beq.n	8006c8c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0203 	bic.w	r2, r2, #3
 8006c30:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d011      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c3e:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8006c40:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fd fb06 	bl	8004258 <HAL_DMA_Abort_IT>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d016      	beq.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6a:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <HAL_SPI_IRQHandler+0x1fc>)
 8006c6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd faf0 	bl	8004258 <HAL_DMA_Abort_IT>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8006c8a:	e003      	b.n	8006c94 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f813 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006c92:	e000      	b.n	8006c96 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006c94:	bf00      	nop
    return;
 8006c96:	bf00      	nop
  }
}
 8006c98:	3720      	adds	r7, #32
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	08006dd1 	.word	0x08006dd1

08006ca4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cda:	f7fd f835 	bl	8003d48 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cee:	d03b      	beq.n	8006d68 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0220 	bic.w	r2, r2, #32
 8006cfe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0202 	bic.w	r2, r2, #2
 8006d0e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	2164      	movs	r1, #100	; 0x64
 8006d14:	6978      	ldr	r0, [r7, #20]
 8006d16:	f000 f8f7 	bl	8006f08 <SPI_EndRxTxTransaction>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d24:	f043 0220 	orr.w	r2, r3, #32
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68db      	ldr	r3, [r3, #12]
 8006d3e:	60fb      	str	r3, [r7, #12]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d003      	beq.n	8006d68 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d60:	6978      	ldr	r0, [r7, #20]
 8006d62:	f7ff ffa9 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d66:	e002      	b.n	8006d6e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8006d68:	6978      	ldr	r0, [r7, #20]
 8006d6a:	f7fb fa65 	bl	8002238 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff ff8e 	bl	8006ca4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d88:	bf00      	nop
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f022 0203 	bic.w	r2, r2, #3
 8006dac:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006db2:	f043 0210 	orr.w	r2, r3, #16
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f7ff ff78 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff ff64 	bl	8006cb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e08:	f7fc ff9e 	bl	8003d48 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e10:	1a9b      	subs	r3, r3, r2
 8006e12:	683a      	ldr	r2, [r7, #0]
 8006e14:	4413      	add	r3, r2
 8006e16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e18:	f7fc ff96 	bl	8003d48 <HAL_GetTick>
 8006e1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e1e:	4b39      	ldr	r3, [pc, #228]	; (8006f04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	015b      	lsls	r3, r3, #5
 8006e24:	0d1b      	lsrs	r3, r3, #20
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	fb02 f303 	mul.w	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e2e:	e054      	b.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e36:	d050      	beq.n	8006eda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e38:	f7fc ff86 	bl	8003d48 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d902      	bls.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d13d      	bne.n	8006eca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e66:	d111      	bne.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	d004      	beq.n	8006e7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e7a:	d107      	bne.n	8006e8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e94:	d10f      	bne.n	8006eb6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006eb4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e017      	b.n	8006efa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	3b01      	subs	r3, #1
 8006ed8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	bf0c      	ite	eq
 8006eea:	2301      	moveq	r3, #1
 8006eec:	2300      	movne	r3, #0
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	79fb      	ldrb	r3, [r7, #7]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d19b      	bne.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000078 	.word	0x20000078

08006f08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af02      	add	r7, sp, #8
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006f14:	4b1b      	ldr	r3, [pc, #108]	; (8006f84 <SPI_EndRxTxTransaction+0x7c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <SPI_EndRxTxTransaction+0x80>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	0d5b      	lsrs	r3, r3, #21
 8006f20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f32:	d112      	bne.n	8006f5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff5a 	bl	8006df8 <SPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d016      	beq.n	8006f78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e00f      	b.n	8006f7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f70:	2b80      	cmp	r3, #128	; 0x80
 8006f72:	d0f2      	beq.n	8006f5a <SPI_EndRxTxTransaction+0x52>
 8006f74:	e000      	b.n	8006f78 <SPI_EndRxTxTransaction+0x70>
        break;
 8006f76:	bf00      	nop
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3718      	adds	r7, #24
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000078 	.word	0x20000078
 8006f88:	165e9f81 	.word	0x165e9f81

08006f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e041      	b.n	8007022 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d106      	bne.n	8006fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fc fc52 	bl	800385c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2202      	movs	r2, #2
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4610      	mov	r0, r2
 8006fcc:	f000 fa96 	bl	80074fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800703a:	b2db      	uxtb	r3, r3
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e04e      	b.n	80070e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a23      	ldr	r2, [pc, #140]	; (80070f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706e:	d01d      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a1f      	ldr	r2, [pc, #124]	; (80070f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a1c      	ldr	r2, [pc, #112]	; (80070fc <HAL_TIM_Base_Start_IT+0xd0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_TIM_Base_Start_IT+0xd4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a19      	ldr	r2, [pc, #100]	; (8007104 <HAL_TIM_Base_Start_IT+0xd8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <HAL_TIM_Base_Start_IT+0x80>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a18      	ldr	r2, [pc, #96]	; (8007108 <HAL_TIM_Base_Start_IT+0xdc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d111      	bne.n	80070d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f003 0307 	and.w	r3, r3, #7
 80070b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d010      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ce:	e007      	b.n	80070e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f042 0201 	orr.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40000400 	.word	0x40000400
 80070f8:	40000800 	.word	0x40000800
 80070fc:	40000c00 	.word	0x40000c00
 8007100:	40010400 	.word	0x40010400
 8007104:	40014000 	.word	0x40014000
 8007108:	40001800 	.word	0x40001800

0800710c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b02      	cmp	r3, #2
 8007120:	d122      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b02      	cmp	r3, #2
 800712e:	d11b      	bne.n	8007168 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f06f 0202 	mvn.w	r2, #2
 8007138:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	f003 0303 	and.w	r3, r3, #3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d003      	beq.n	8007156 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f9b5 	bl	80074be <HAL_TIM_IC_CaptureCallback>
 8007154:	e005      	b.n	8007162 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f9a7 	bl	80074aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9b8 	bl	80074d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0304 	and.w	r3, r3, #4
 8007172:	2b04      	cmp	r3, #4
 8007174:	d122      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	f003 0304 	and.w	r3, r3, #4
 8007180:	2b04      	cmp	r3, #4
 8007182:	d11b      	bne.n	80071bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0204 	mvn.w	r2, #4
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2202      	movs	r2, #2
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f98b 	bl	80074be <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f97d 	bl	80074aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f98e 	bl	80074d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b08      	cmp	r3, #8
 80071c8:	d122      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f003 0308 	and.w	r3, r3, #8
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	d11b      	bne.n	8007210 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f06f 0208 	mvn.w	r2, #8
 80071e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2204      	movs	r2, #4
 80071e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d003      	beq.n	80071fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f961 	bl	80074be <HAL_TIM_IC_CaptureCallback>
 80071fc:	e005      	b.n	800720a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f000 f953 	bl	80074aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f964 	bl	80074d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	f003 0310 	and.w	r3, r3, #16
 800721a:	2b10      	cmp	r3, #16
 800721c:	d122      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f003 0310 	and.w	r3, r3, #16
 8007228:	2b10      	cmp	r3, #16
 800722a:	d11b      	bne.n	8007264 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0210 	mvn.w	r2, #16
 8007234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2208      	movs	r2, #8
 800723a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f937 	bl	80074be <HAL_TIM_IC_CaptureCallback>
 8007250:	e005      	b.n	800725e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f929 	bl	80074aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f93a 	bl	80074d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10e      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	f003 0301 	and.w	r3, r3, #1
 800727c:	2b01      	cmp	r3, #1
 800727e:	d107      	bne.n	8007290 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f06f 0201 	mvn.w	r2, #1
 8007288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fb fdd6 	bl	8002e3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800729a:	2b80      	cmp	r3, #128	; 0x80
 800729c:	d10e      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a8:	2b80      	cmp	r3, #128	; 0x80
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 fae0 	bl	800787c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072c6:	2b40      	cmp	r3, #64	; 0x40
 80072c8:	d10e      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	68db      	ldr	r3, [r3, #12]
 80072d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d4:	2b40      	cmp	r3, #64	; 0x40
 80072d6:	d107      	bne.n	80072e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80072e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8ff 	bl	80074e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d10e      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b20      	cmp	r3, #32
 8007302:	d107      	bne.n	8007314 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f06f 0220 	mvn.w	r2, #32
 800730c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 faaa 	bl	8007868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_TIM_ConfigClockSource+0x1c>
 8007334:	2302      	movs	r3, #2
 8007336:	e0b4      	b.n	80074a2 <HAL_TIM_ConfigClockSource+0x186>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2202      	movs	r2, #2
 8007344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800735e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007370:	d03e      	beq.n	80073f0 <HAL_TIM_ConfigClockSource+0xd4>
 8007372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007376:	f200 8087 	bhi.w	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	f000 8086 	beq.w	800748e <HAL_TIM_ConfigClockSource+0x172>
 8007382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007386:	d87f      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 8007388:	2b70      	cmp	r3, #112	; 0x70
 800738a:	d01a      	beq.n	80073c2 <HAL_TIM_ConfigClockSource+0xa6>
 800738c:	2b70      	cmp	r3, #112	; 0x70
 800738e:	d87b      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 8007390:	2b60      	cmp	r3, #96	; 0x60
 8007392:	d050      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0x11a>
 8007394:	2b60      	cmp	r3, #96	; 0x60
 8007396:	d877      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 8007398:	2b50      	cmp	r3, #80	; 0x50
 800739a:	d03c      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0xfa>
 800739c:	2b50      	cmp	r3, #80	; 0x50
 800739e:	d873      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 80073a0:	2b40      	cmp	r3, #64	; 0x40
 80073a2:	d058      	beq.n	8007456 <HAL_TIM_ConfigClockSource+0x13a>
 80073a4:	2b40      	cmp	r3, #64	; 0x40
 80073a6:	d86f      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 80073a8:	2b30      	cmp	r3, #48	; 0x30
 80073aa:	d064      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0x15a>
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d86b      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d060      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0x15a>
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	d867      	bhi.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d05c      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0x15a>
 80073bc:	2b10      	cmp	r3, #16
 80073be:	d05a      	beq.n	8007476 <HAL_TIM_ConfigClockSource+0x15a>
 80073c0:	e062      	b.n	8007488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6818      	ldr	r0, [r3, #0]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	6899      	ldr	r1, [r3, #8]
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f000 f9ad 	bl	8007730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	609a      	str	r2, [r3, #8]
      break;
 80073ee:	e04f      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	6899      	ldr	r1, [r3, #8]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	f000 f996 	bl	8007730 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689a      	ldr	r2, [r3, #8]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007412:	609a      	str	r2, [r3, #8]
      break;
 8007414:	e03c      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	6859      	ldr	r1, [r3, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	461a      	mov	r2, r3
 8007424:	f000 f90a 	bl	800763c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2150      	movs	r1, #80	; 0x50
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f963 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007434:	e02c      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6818      	ldr	r0, [r3, #0]
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	6859      	ldr	r1, [r3, #4]
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	461a      	mov	r2, r3
 8007444:	f000 f929 	bl	800769a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2160      	movs	r1, #96	; 0x60
 800744e:	4618      	mov	r0, r3
 8007450:	f000 f953 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007454:	e01c      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	6859      	ldr	r1, [r3, #4]
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	68db      	ldr	r3, [r3, #12]
 8007462:	461a      	mov	r2, r3
 8007464:	f000 f8ea 	bl	800763c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2140      	movs	r1, #64	; 0x40
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f943 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007474:	e00c      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	4610      	mov	r0, r2
 8007482:	f000 f93a 	bl	80076fa <TIM_ITRx_SetConfig>
      break;
 8007486:	e003      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
      break;
 800748c:	e000      	b.n	8007490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800748e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074aa:	b480      	push	{r7}
 80074ac:	b083      	sub	sp, #12
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074da:	bf00      	nop
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr

080074e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
	...

080074fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a40      	ldr	r2, [pc, #256]	; (8007610 <TIM_Base_SetConfig+0x114>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d013      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751a:	d00f      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a3d      	ldr	r2, [pc, #244]	; (8007614 <TIM_Base_SetConfig+0x118>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a3c      	ldr	r2, [pc, #240]	; (8007618 <TIM_Base_SetConfig+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a3b      	ldr	r2, [pc, #236]	; (800761c <TIM_Base_SetConfig+0x120>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x40>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a3a      	ldr	r2, [pc, #232]	; (8007620 <TIM_Base_SetConfig+0x124>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a2f      	ldr	r2, [pc, #188]	; (8007610 <TIM_Base_SetConfig+0x114>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d02b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d027      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a2c      	ldr	r2, [pc, #176]	; (8007614 <TIM_Base_SetConfig+0x118>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d023      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a2b      	ldr	r2, [pc, #172]	; (8007618 <TIM_Base_SetConfig+0x11c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d01f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a2a      	ldr	r2, [pc, #168]	; (800761c <TIM_Base_SetConfig+0x120>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d01b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a29      	ldr	r2, [pc, #164]	; (8007620 <TIM_Base_SetConfig+0x124>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d017      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a28      	ldr	r2, [pc, #160]	; (8007624 <TIM_Base_SetConfig+0x128>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d013      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a27      	ldr	r2, [pc, #156]	; (8007628 <TIM_Base_SetConfig+0x12c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d00f      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a26      	ldr	r2, [pc, #152]	; (800762c <TIM_Base_SetConfig+0x130>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d00b      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <TIM_Base_SetConfig+0x134>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d007      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a24      	ldr	r2, [pc, #144]	; (8007634 <TIM_Base_SetConfig+0x138>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d003      	beq.n	80075ae <TIM_Base_SetConfig+0xb2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	4a23      	ldr	r2, [pc, #140]	; (8007638 <TIM_Base_SetConfig+0x13c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d108      	bne.n	80075c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a0a      	ldr	r2, [pc, #40]	; (8007610 <TIM_Base_SetConfig+0x114>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_Base_SetConfig+0xf8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a0c      	ldr	r2, [pc, #48]	; (8007620 <TIM_Base_SetConfig+0x124>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d103      	bne.n	80075fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	691a      	ldr	r2, [r3, #16]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	615a      	str	r2, [r3, #20]
}
 8007602:	bf00      	nop
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40010000 	.word	0x40010000
 8007614:	40000400 	.word	0x40000400
 8007618:	40000800 	.word	0x40000800
 800761c:	40000c00 	.word	0x40000c00
 8007620:	40010400 	.word	0x40010400
 8007624:	40014000 	.word	0x40014000
 8007628:	40014400 	.word	0x40014400
 800762c:	40014800 	.word	0x40014800
 8007630:	40001800 	.word	0x40001800
 8007634:	40001c00 	.word	0x40001c00
 8007638:	40002000 	.word	0x40002000

0800763c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6a1b      	ldr	r3, [r3, #32]
 8007652:	f023 0201 	bic.w	r2, r3, #1
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f023 030a 	bic.w	r3, r3, #10
 8007678:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	4313      	orrs	r3, r2
 8007680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	621a      	str	r2, [r3, #32]
}
 800768e:	bf00      	nop
 8007690:	371c      	adds	r7, #28
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800769a:	b480      	push	{r7}
 800769c:	b087      	sub	sp, #28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0210 	bic.w	r2, r3, #16
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	031b      	lsls	r3, r3, #12
 80076ca:	697a      	ldr	r2, [r7, #20]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	011b      	lsls	r3, r3, #4
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	4313      	orrs	r3, r2
 80076e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	621a      	str	r2, [r3, #32]
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076fa:	b480      	push	{r7}
 80076fc:	b085      	sub	sp, #20
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007710:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	f043 0307 	orr.w	r3, r3, #7
 800771c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	609a      	str	r2, [r3, #8]
}
 8007724:	bf00      	nop
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007730:	b480      	push	{r7}
 8007732:	b087      	sub	sp, #28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800774a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	021a      	lsls	r2, r3, #8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	431a      	orrs	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4313      	orrs	r3, r2
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	4313      	orrs	r3, r2
 800775c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	609a      	str	r2, [r3, #8]
}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d101      	bne.n	8007788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007784:	2302      	movs	r3, #2
 8007786:	e05a      	b.n	800783e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a21      	ldr	r2, [pc, #132]	; (800784c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077d4:	d01d      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a1d      	ldr	r2, [pc, #116]	; (8007850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1a      	ldr	r2, [pc, #104]	; (8007858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a18      	ldr	r2, [pc, #96]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a17      	ldr	r2, [pc, #92]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a15      	ldr	r2, [pc, #84]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10c      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	4313      	orrs	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40010000 	.word	0x40010000
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800
 8007858:	40000c00 	.word	0x40000c00
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40001800 	.word	0x40001800

08007868 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d101      	bne.n	80078a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e03f      	b.n	8007922 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fb fff6 	bl	80038a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2224      	movs	r2, #36	; 0x24
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fe2b 	bl	8008530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	695a      	ldr	r2, [r3, #20]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68da      	ldr	r2, [r3, #12]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2220      	movs	r2, #32
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b084      	sub	sp, #16
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	4613      	mov	r3, r2
 8007936:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b20      	cmp	r3, #32
 8007942:	d11d      	bne.n	8007980 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d002      	beq.n	8007950 <HAL_UART_Receive_IT+0x26>
 800794a:	88fb      	ldrh	r3, [r7, #6]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e016      	b.n	8007982 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800795a:	2b01      	cmp	r3, #1
 800795c:	d101      	bne.n	8007962 <HAL_UART_Receive_IT+0x38>
 800795e:	2302      	movs	r3, #2
 8007960:	e00f      	b.n	8007982 <HAL_UART_Receive_IT+0x58>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2200      	movs	r2, #0
 800796e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	461a      	mov	r2, r3
 8007974:	68b9      	ldr	r1, [r7, #8]
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 fbd9 	bl	800812e <UART_Start_Receive_IT>
 800797c:	4603      	mov	r3, r0
 800797e:	e000      	b.n	8007982 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
	...

0800798c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b08c      	sub	sp, #48	; 0x30
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4613      	mov	r3, r2
 8007998:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d165      	bne.n	8007a72 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_UART_Transmit_DMA+0x26>
 80079ac:	88fb      	ldrh	r3, [r7, #6]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e05e      	b.n	8007a74 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_UART_Transmit_DMA+0x38>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e057      	b.n	8007a74 <HAL_UART_Transmit_DMA+0xe8>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	88fa      	ldrh	r2, [r7, #6]
 80079dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2221      	movs	r2, #33	; 0x21
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f0:	4a22      	ldr	r2, [pc, #136]	; (8007a7c <HAL_UART_Transmit_DMA+0xf0>)
 80079f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f8:	4a21      	ldr	r2, [pc, #132]	; (8007a80 <HAL_UART_Transmit_DMA+0xf4>)
 80079fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	4a20      	ldr	r2, [pc, #128]	; (8007a84 <HAL_UART_Transmit_DMA+0xf8>)
 8007a02:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a08:	2200      	movs	r2, #0
 8007a0a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a18:	6819      	ldr	r1, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	461a      	mov	r2, r3
 8007a22:	88fb      	ldrh	r3, [r7, #6]
 8007a24:	f7fc fb50 	bl	80040c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	e853 3f00 	ldrex	r3, [r3]
 8007a48:	617b      	str	r3, [r7, #20]
   return(result);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3314      	adds	r3, #20
 8007a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5a:	627a      	str	r2, [r7, #36]	; 0x24
 8007a5c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6a39      	ldr	r1, [r7, #32]
 8007a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e5      	bne.n	8007a3a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e000      	b.n	8007a74 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007a72:	2302      	movs	r3, #2
  }
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3730      	adds	r7, #48	; 0x30
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}
 8007a7c:	08007fe5 	.word	0x08007fe5
 8007a80:	0800807f 	.word	0x0800807f
 8007a84:	0800809b 	.word	0x0800809b

08007a88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b0ba      	sub	sp, #232	; 0xe8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10f      	bne.n	8007aee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d009      	beq.n	8007aee <HAL_UART_IRQHandler+0x66>
 8007ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ade:	f003 0320 	and.w	r3, r3, #32
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fc66 	bl	80083b8 <UART_Receive_IT>
      return;
 8007aec:	e256      	b.n	8007f9c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007aee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f000 80de 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x22c>
 8007af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80d1 	beq.w	8007cb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00b      	beq.n	8007b36 <HAL_UART_IRQHandler+0xae>
 8007b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	f043 0201 	orr.w	r2, r3, #1
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <HAL_UART_IRQHandler+0xd2>
 8007b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b52:	f043 0202 	orr.w	r2, r3, #2
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5e:	f003 0302 	and.w	r3, r3, #2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <HAL_UART_IRQHandler+0xf6>
 8007b66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b76:	f043 0204 	orr.w	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b82:	f003 0308 	and.w	r3, r3, #8
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d011      	beq.n	8007bae <HAL_UART_IRQHandler+0x126>
 8007b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d105      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f043 0208 	orr.w	r2, r3, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 81ed 	beq.w	8007f92 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x14e>
 8007bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc8:	f003 0320 	and.w	r3, r3, #32
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fbf1 	bl	80083b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	695b      	ldr	r3, [r3, #20]
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b40      	cmp	r3, #64	; 0x40
 8007be2:	bf0c      	ite	eq
 8007be4:	2301      	moveq	r3, #1
 8007be6:	2300      	movne	r3, #0
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf2:	f003 0308 	and.w	r3, r3, #8
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <HAL_UART_IRQHandler+0x17a>
 8007bfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d04f      	beq.n	8007ca2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 faf9 	bl	80081fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c12:	2b40      	cmp	r3, #64	; 0x40
 8007c14:	d141      	bne.n	8007c9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	3314      	adds	r3, #20
 8007c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c52:	e841 2300 	strex	r3, r2, [r1]
 8007c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1d9      	bne.n	8007c16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d013      	beq.n	8007c92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	4a7d      	ldr	r2, [pc, #500]	; (8007e64 <HAL_UART_IRQHandler+0x3dc>)
 8007c70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fc faee 	bl	8004258 <HAL_DMA_Abort_IT>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d016      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c90:	e00e      	b.n	8007cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f990 	bl	8007fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	e00a      	b.n	8007cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f98c 	bl	8007fb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	e006      	b.n	8007cb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f988 	bl	8007fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cae:	e170      	b.n	8007f92 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb0:	bf00      	nop
    return;
 8007cb2:	e16e      	b.n	8007f92 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	f040 814a 	bne.w	8007f52 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc2:	f003 0310 	and.w	r3, r3, #16
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8143 	beq.w	8007f52 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 813c 	beq.w	8007f52 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007cda:	2300      	movs	r3, #0
 8007cdc:	60bb      	str	r3, [r7, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60bb      	str	r3, [r7, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	f040 80b4 	bne.w	8007e68 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 8140 	beq.w	8007f96 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	f080 8139 	bcs.w	8007f96 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d2a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d36:	f000 8088 	beq.w	8007e4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	330c      	adds	r3, #12
 8007d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d48:	e853 3f00 	ldrex	r3, [r3]
 8007d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1d9      	bne.n	8007d3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3314      	adds	r3, #20
 8007d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d90:	e853 3f00 	ldrex	r3, [r3]
 8007d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d98:	f023 0301 	bic.w	r3, r3, #1
 8007d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3314      	adds	r3, #20
 8007da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007daa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007dae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e1      	bne.n	8007d86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3314      	adds	r3, #20
 8007dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3314      	adds	r3, #20
 8007de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e3      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	330c      	adds	r3, #12
 8007e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e12:	e853 3f00 	ldrex	r3, [r3]
 8007e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e1a:	f023 0310 	bic.w	r3, r3, #16
 8007e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	330c      	adds	r3, #12
 8007e28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e34:	e841 2300 	strex	r3, r2, [r1]
 8007e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1e3      	bne.n	8007e08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fc f997 	bl	8004178 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8b6 	bl	8007fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e60:	e099      	b.n	8007f96 <HAL_UART_IRQHandler+0x50e>
 8007e62:	bf00      	nop
 8007e64:	080082c1 	.word	0x080082c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 808b 	beq.w	8007f9a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8086 	beq.w	8007f9a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	330c      	adds	r3, #12
 8007e94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	330c      	adds	r3, #12
 8007eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8007eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e3      	bne.n	8007e8e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3314      	adds	r3, #20
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	e853 3f00 	ldrex	r3, [r3]
 8007ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ed6:	6a3b      	ldr	r3, [r7, #32]
 8007ed8:	f023 0301 	bic.w	r3, r3, #1
 8007edc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	3314      	adds	r3, #20
 8007ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eea:	633a      	str	r2, [r7, #48]	; 0x30
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e3      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	330c      	adds	r3, #12
 8007f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f023 0310 	bic.w	r3, r3, #16
 8007f22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f30:	61fa      	str	r2, [r7, #28]
 8007f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f34:	69b9      	ldr	r1, [r7, #24]
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	e841 2300 	strex	r3, r2, [r1]
 8007f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1e3      	bne.n	8007f0c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f83e 	bl	8007fcc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f50:	e023      	b.n	8007f9a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d009      	beq.n	8007f72 <HAL_UART_IRQHandler+0x4ea>
 8007f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d003      	beq.n	8007f72 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f9bc 	bl	80082e8 <UART_Transmit_IT>
    return;
 8007f70:	e014      	b.n	8007f9c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00e      	beq.n	8007f9c <HAL_UART_IRQHandler+0x514>
 8007f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d008      	beq.n	8007f9c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f9fc 	bl	8008388 <UART_EndTransmit_IT>
    return;
 8007f90:	e004      	b.n	8007f9c <HAL_UART_IRQHandler+0x514>
    return;
 8007f92:	bf00      	nop
 8007f94:	e002      	b.n	8007f9c <HAL_UART_IRQHandler+0x514>
      return;
 8007f96:	bf00      	nop
 8007f98:	e000      	b.n	8007f9c <HAL_UART_IRQHandler+0x514>
      return;
 8007f9a:	bf00      	nop
  }
}
 8007f9c:	37e8      	adds	r7, #232	; 0xe8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop

08007fa4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr

08007fe4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b090      	sub	sp, #64	; 0x40
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d137      	bne.n	8008070 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008002:	2200      	movs	r2, #0
 8008004:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	3314      	adds	r3, #20
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	e853 3f00 	ldrex	r3, [r3]
 8008014:	623b      	str	r3, [r7, #32]
   return(result);
 8008016:	6a3b      	ldr	r3, [r7, #32]
 8008018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801c:	63bb      	str	r3, [r7, #56]	; 0x38
 800801e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3314      	adds	r3, #20
 8008024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008026:	633a      	str	r2, [r7, #48]	; 0x30
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800802c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1e5      	bne.n	8008006 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800803a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	330c      	adds	r3, #12
 8008040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	e853 3f00 	ldrex	r3, [r3]
 8008048:	60fb      	str	r3, [r7, #12]
   return(result);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008050:	637b      	str	r3, [r7, #52]	; 0x34
 8008052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	330c      	adds	r3, #12
 8008058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800805a:	61fa      	str	r2, [r7, #28]
 800805c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800805e:	69b9      	ldr	r1, [r7, #24]
 8008060:	69fa      	ldr	r2, [r7, #28]
 8008062:	e841 2300 	strex	r3, r2, [r1]
 8008066:	617b      	str	r3, [r7, #20]
   return(result);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1e5      	bne.n	800803a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800806e:	e002      	b.n	8008076 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008070:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008072:	f7fa f8cb 	bl	800220c <HAL_UART_TxCpltCallback>
}
 8008076:	bf00      	nop
 8008078:	3740      	adds	r7, #64	; 0x40
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800808c:	68f8      	ldr	r0, [r7, #12]
 800808e:	f7ff ff89 	bl	8007fa4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b80      	cmp	r3, #128	; 0x80
 80080b8:	bf0c      	ite	eq
 80080ba:	2301      	moveq	r3, #1
 80080bc:	2300      	movne	r3, #0
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	2b21      	cmp	r3, #33	; 0x21
 80080cc:	d108      	bne.n	80080e0 <UART_DMAError+0x46>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	2200      	movs	r2, #0
 80080d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80080da:	68b8      	ldr	r0, [r7, #8]
 80080dc:	f000 f865 	bl	80081aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ea:	2b40      	cmp	r3, #64	; 0x40
 80080ec:	bf0c      	ite	eq
 80080ee:	2301      	moveq	r3, #1
 80080f0:	2300      	movne	r3, #0
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b22      	cmp	r3, #34	; 0x22
 8008100:	d108      	bne.n	8008114 <UART_DMAError+0x7a>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800810e:	68b8      	ldr	r0, [r7, #8]
 8008110:	f000 f873 	bl	80081fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	f043 0210 	orr.w	r2, r3, #16
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008120:	68b8      	ldr	r0, [r7, #8]
 8008122:	f7ff ff49 	bl	8007fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008126:	bf00      	nop
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	60f8      	str	r0, [r7, #12]
 8008136:	60b9      	str	r1, [r7, #8]
 8008138:	4613      	mov	r3, r2
 800813a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	88fa      	ldrh	r2, [r7, #6]
 8008146:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	88fa      	ldrh	r2, [r7, #6]
 800814c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2200      	movs	r2, #0
 8008152:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2222      	movs	r2, #34	; 0x22
 8008158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d007      	beq.n	800817c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800817a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695a      	ldr	r2, [r3, #20]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0201 	orr.w	r2, r2, #1
 800818a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68da      	ldr	r2, [r3, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0220 	orr.w	r2, r2, #32
 800819a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081aa:	b480      	push	{r7}
 80081ac:	b089      	sub	sp, #36	; 0x24
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	330c      	adds	r3, #12
 80081b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	330c      	adds	r3, #12
 80081d0:	69fa      	ldr	r2, [r7, #28]
 80081d2:	61ba      	str	r2, [r7, #24]
 80081d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6979      	ldr	r1, [r7, #20]
 80081d8:	69ba      	ldr	r2, [r7, #24]
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	613b      	str	r3, [r7, #16]
   return(result);
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e5      	bne.n	80081b2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80081ee:	bf00      	nop
 80081f0:	3724      	adds	r7, #36	; 0x24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b095      	sub	sp, #84	; 0x54
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	330c      	adds	r3, #12
 8008208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	330c      	adds	r3, #12
 8008220:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008222:	643a      	str	r2, [r7, #64]	; 0x40
 8008224:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e5      	bne.n	8008202 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3314      	adds	r3, #20
 800823c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	61fb      	str	r3, [r7, #28]
   return(result);
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	64bb      	str	r3, [r7, #72]	; 0x48
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3314      	adds	r3, #20
 8008254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800825c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	2b01      	cmp	r3, #1
 8008270:	d119      	bne.n	80082a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	60bb      	str	r3, [r7, #8]
   return(result);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f023 0310 	bic.w	r3, r3, #16
 8008288:	647b      	str	r3, [r7, #68]	; 0x44
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	330c      	adds	r3, #12
 8008290:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008292:	61ba      	str	r2, [r7, #24]
 8008294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008296:	6979      	ldr	r1, [r7, #20]
 8008298:	69ba      	ldr	r2, [r7, #24]
 800829a:	e841 2300 	strex	r3, r2, [r1]
 800829e:	613b      	str	r3, [r7, #16]
   return(result);
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1e5      	bne.n	8008272 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80082b4:	bf00      	nop
 80082b6:	3754      	adds	r7, #84	; 0x54
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fe6c 	bl	8007fb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b21      	cmp	r3, #33	; 0x21
 80082fa:	d13e      	bne.n	800837a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008304:	d114      	bne.n	8008330 <UART_Transmit_IT+0x48>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d110      	bne.n	8008330 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	461a      	mov	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008322:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	1c9a      	adds	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	621a      	str	r2, [r3, #32]
 800832e:	e008      	b.n	8008342 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	1c59      	adds	r1, r3, #1
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6211      	str	r1, [r2, #32]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008346:	b29b      	uxth	r3, r3
 8008348:	3b01      	subs	r3, #1
 800834a:	b29b      	uxth	r3, r3
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	4619      	mov	r1, r3
 8008350:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10f      	bne.n	8008376 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008364:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008374:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	e000      	b.n	800837c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800837a:	2302      	movs	r3, #2
  }
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68da      	ldr	r2, [r3, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2220      	movs	r2, #32
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7f9 ff2f 	bl	800220c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083ae:	2300      	movs	r3, #0
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	; 0x30
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b22      	cmp	r3, #34	; 0x22
 80083ca:	f040 80ab 	bne.w	8008524 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d117      	bne.n	8008408 <UART_Receive_IT+0x50>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d113      	bne.n	8008408 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80083e0:	2300      	movs	r3, #0
 80083e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083e8:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008400:	1c9a      	adds	r2, r3, #2
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	629a      	str	r2, [r3, #40]	; 0x28
 8008406:	e026      	b.n	8008456 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800840e:	2300      	movs	r3, #0
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d007      	beq.n	800842c <UART_Receive_IT+0x74>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <UART_Receive_IT+0x82>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d106      	bne.n	800843a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	b2da      	uxtb	r2, r3
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	701a      	strb	r2, [r3, #0]
 8008438:	e008      	b.n	800844c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008446:	b2da      	uxtb	r2, r3
 8008448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800845a:	b29b      	uxth	r3, r3
 800845c:	3b01      	subs	r3, #1
 800845e:	b29b      	uxth	r3, r3
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	4619      	mov	r1, r3
 8008464:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008466:	2b00      	cmp	r3, #0
 8008468:	d15a      	bne.n	8008520 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0220 	bic.w	r2, r2, #32
 8008478:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68da      	ldr	r2, [r3, #12]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008488:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	695a      	ldr	r2, [r3, #20]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0201 	bic.w	r2, r2, #1
 8008498:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d135      	bne.n	8008516 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	330c      	adds	r3, #12
 80084b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	e853 3f00 	ldrex	r3, [r3]
 80084be:	613b      	str	r3, [r7, #16]
   return(result);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	f023 0310 	bic.w	r3, r3, #16
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	330c      	adds	r3, #12
 80084ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d0:	623a      	str	r2, [r7, #32]
 80084d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	69f9      	ldr	r1, [r7, #28]
 80084d6:	6a3a      	ldr	r2, [r7, #32]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e5      	bne.n	80084b0 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0310 	and.w	r3, r3, #16
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d10a      	bne.n	8008508 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084f2:	2300      	movs	r3, #0
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	60fb      	str	r3, [r7, #12]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	60fb      	str	r3, [r7, #12]
 8008506:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800850c:	4619      	mov	r1, r3
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7ff fd5c 	bl	8007fcc <HAL_UARTEx_RxEventCallback>
 8008514:	e002      	b.n	800851c <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f7f9 fbec 	bl	8001cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	e002      	b.n	8008526 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	e000      	b.n	8008526 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008524:	2302      	movs	r3, #2
  }
}
 8008526:	4618      	mov	r0, r3
 8008528:	3730      	adds	r7, #48	; 0x30
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008534:	b0c0      	sub	sp, #256	; 0x100
 8008536:	af00      	add	r7, sp, #0
 8008538:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800853c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800854c:	68d9      	ldr	r1, [r3, #12]
 800854e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	ea40 0301 	orr.w	r3, r0, r1
 8008558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800855a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	431a      	orrs	r2, r3
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856c:	695b      	ldr	r3, [r3, #20]
 800856e:	431a      	orrs	r2, r3
 8008570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008574:	69db      	ldr	r3, [r3, #28]
 8008576:	4313      	orrs	r3, r2
 8008578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800857c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008588:	f021 010c 	bic.w	r1, r1, #12
 800858c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008596:	430b      	orrs	r3, r1
 8008598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800859a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80085a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085aa:	6999      	ldr	r1, [r3, #24]
 80085ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	ea40 0301 	orr.w	r3, r0, r1
 80085b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b8f      	ldr	r3, [pc, #572]	; (80087fc <UART_SetConfig+0x2cc>)
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d005      	beq.n	80085d0 <UART_SetConfig+0xa0>
 80085c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4b8d      	ldr	r3, [pc, #564]	; (8008800 <UART_SetConfig+0x2d0>)
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d104      	bne.n	80085da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085d0:	f7fd fbc6 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 80085d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80085d8:	e003      	b.n	80085e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085da:	f7fd fbad 	bl	8005d38 <HAL_RCC_GetPCLK1Freq>
 80085de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ec:	f040 810c 	bne.w	8008808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80085fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80085fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008602:	4622      	mov	r2, r4
 8008604:	462b      	mov	r3, r5
 8008606:	1891      	adds	r1, r2, r2
 8008608:	65b9      	str	r1, [r7, #88]	; 0x58
 800860a:	415b      	adcs	r3, r3
 800860c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800860e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008612:	4621      	mov	r1, r4
 8008614:	eb12 0801 	adds.w	r8, r2, r1
 8008618:	4629      	mov	r1, r5
 800861a:	eb43 0901 	adc.w	r9, r3, r1
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800862a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800862e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008632:	4690      	mov	r8, r2
 8008634:	4699      	mov	r9, r3
 8008636:	4623      	mov	r3, r4
 8008638:	eb18 0303 	adds.w	r3, r8, r3
 800863c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008640:	462b      	mov	r3, r5
 8008642:	eb49 0303 	adc.w	r3, r9, r3
 8008646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800864a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800865a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800865e:	460b      	mov	r3, r1
 8008660:	18db      	adds	r3, r3, r3
 8008662:	653b      	str	r3, [r7, #80]	; 0x50
 8008664:	4613      	mov	r3, r2
 8008666:	eb42 0303 	adc.w	r3, r2, r3
 800866a:	657b      	str	r3, [r7, #84]	; 0x54
 800866c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008674:	f7f8 f95a 	bl	800092c <__aeabi_uldivmod>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4b61      	ldr	r3, [pc, #388]	; (8008804 <UART_SetConfig+0x2d4>)
 800867e:	fba3 2302 	umull	r2, r3, r3, r2
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	011c      	lsls	r4, r3, #4
 8008686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800868a:	2200      	movs	r2, #0
 800868c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008690:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008698:	4642      	mov	r2, r8
 800869a:	464b      	mov	r3, r9
 800869c:	1891      	adds	r1, r2, r2
 800869e:	64b9      	str	r1, [r7, #72]	; 0x48
 80086a0:	415b      	adcs	r3, r3
 80086a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80086a8:	4641      	mov	r1, r8
 80086aa:	eb12 0a01 	adds.w	sl, r2, r1
 80086ae:	4649      	mov	r1, r9
 80086b0:	eb43 0b01 	adc.w	fp, r3, r1
 80086b4:	f04f 0200 	mov.w	r2, #0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c8:	4692      	mov	sl, r2
 80086ca:	469b      	mov	fp, r3
 80086cc:	4643      	mov	r3, r8
 80086ce:	eb1a 0303 	adds.w	r3, sl, r3
 80086d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086d6:	464b      	mov	r3, r9
 80086d8:	eb4b 0303 	adc.w	r3, fp, r3
 80086dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80086e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80086f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80086f4:	460b      	mov	r3, r1
 80086f6:	18db      	adds	r3, r3, r3
 80086f8:	643b      	str	r3, [r7, #64]	; 0x40
 80086fa:	4613      	mov	r3, r2
 80086fc:	eb42 0303 	adc.w	r3, r2, r3
 8008700:	647b      	str	r3, [r7, #68]	; 0x44
 8008702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800870a:	f7f8 f90f 	bl	800092c <__aeabi_uldivmod>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4611      	mov	r1, r2
 8008714:	4b3b      	ldr	r3, [pc, #236]	; (8008804 <UART_SetConfig+0x2d4>)
 8008716:	fba3 2301 	umull	r2, r3, r3, r1
 800871a:	095b      	lsrs	r3, r3, #5
 800871c:	2264      	movs	r2, #100	; 0x64
 800871e:	fb02 f303 	mul.w	r3, r2, r3
 8008722:	1acb      	subs	r3, r1, r3
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800872a:	4b36      	ldr	r3, [pc, #216]	; (8008804 <UART_SetConfig+0x2d4>)
 800872c:	fba3 2302 	umull	r2, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008738:	441c      	add	r4, r3
 800873a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800873e:	2200      	movs	r2, #0
 8008740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008744:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	1891      	adds	r1, r2, r2
 8008752:	63b9      	str	r1, [r7, #56]	; 0x38
 8008754:	415b      	adcs	r3, r3
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800875c:	4641      	mov	r1, r8
 800875e:	1851      	adds	r1, r2, r1
 8008760:	6339      	str	r1, [r7, #48]	; 0x30
 8008762:	4649      	mov	r1, r9
 8008764:	414b      	adcs	r3, r1
 8008766:	637b      	str	r3, [r7, #52]	; 0x34
 8008768:	f04f 0200 	mov.w	r2, #0
 800876c:	f04f 0300 	mov.w	r3, #0
 8008770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008774:	4659      	mov	r1, fp
 8008776:	00cb      	lsls	r3, r1, #3
 8008778:	4651      	mov	r1, sl
 800877a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800877e:	4651      	mov	r1, sl
 8008780:	00ca      	lsls	r2, r1, #3
 8008782:	4610      	mov	r0, r2
 8008784:	4619      	mov	r1, r3
 8008786:	4603      	mov	r3, r0
 8008788:	4642      	mov	r2, r8
 800878a:	189b      	adds	r3, r3, r2
 800878c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008790:	464b      	mov	r3, r9
 8008792:	460a      	mov	r2, r1
 8008794:	eb42 0303 	adc.w	r3, r2, r3
 8008798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800879c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80087ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087b0:	460b      	mov	r3, r1
 80087b2:	18db      	adds	r3, r3, r3
 80087b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80087b6:	4613      	mov	r3, r2
 80087b8:	eb42 0303 	adc.w	r3, r2, r3
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80087c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80087c6:	f7f8 f8b1 	bl	800092c <__aeabi_uldivmod>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4b0d      	ldr	r3, [pc, #52]	; (8008804 <UART_SetConfig+0x2d4>)
 80087d0:	fba3 1302 	umull	r1, r3, r3, r2
 80087d4:	095b      	lsrs	r3, r3, #5
 80087d6:	2164      	movs	r1, #100	; 0x64
 80087d8:	fb01 f303 	mul.w	r3, r1, r3
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	3332      	adds	r3, #50	; 0x32
 80087e2:	4a08      	ldr	r2, [pc, #32]	; (8008804 <UART_SetConfig+0x2d4>)
 80087e4:	fba2 2303 	umull	r2, r3, r2, r3
 80087e8:	095b      	lsrs	r3, r3, #5
 80087ea:	f003 0207 	and.w	r2, r3, #7
 80087ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4422      	add	r2, r4
 80087f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087f8:	e105      	b.n	8008a06 <UART_SetConfig+0x4d6>
 80087fa:	bf00      	nop
 80087fc:	40011000 	.word	0x40011000
 8008800:	40011400 	.word	0x40011400
 8008804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880c:	2200      	movs	r2, #0
 800880e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800881a:	4642      	mov	r2, r8
 800881c:	464b      	mov	r3, r9
 800881e:	1891      	adds	r1, r2, r2
 8008820:	6239      	str	r1, [r7, #32]
 8008822:	415b      	adcs	r3, r3
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
 8008826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800882a:	4641      	mov	r1, r8
 800882c:	1854      	adds	r4, r2, r1
 800882e:	4649      	mov	r1, r9
 8008830:	eb43 0501 	adc.w	r5, r3, r1
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	00eb      	lsls	r3, r5, #3
 800883e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008842:	00e2      	lsls	r2, r4, #3
 8008844:	4614      	mov	r4, r2
 8008846:	461d      	mov	r5, r3
 8008848:	4643      	mov	r3, r8
 800884a:	18e3      	adds	r3, r4, r3
 800884c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008850:	464b      	mov	r3, r9
 8008852:	eb45 0303 	adc.w	r3, r5, r3
 8008856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800885a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800886a:	f04f 0200 	mov.w	r2, #0
 800886e:	f04f 0300 	mov.w	r3, #0
 8008872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008876:	4629      	mov	r1, r5
 8008878:	008b      	lsls	r3, r1, #2
 800887a:	4621      	mov	r1, r4
 800887c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008880:	4621      	mov	r1, r4
 8008882:	008a      	lsls	r2, r1, #2
 8008884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008888:	f7f8 f850 	bl	800092c <__aeabi_uldivmod>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4b60      	ldr	r3, [pc, #384]	; (8008a14 <UART_SetConfig+0x4e4>)
 8008892:	fba3 2302 	umull	r2, r3, r3, r2
 8008896:	095b      	lsrs	r3, r3, #5
 8008898:	011c      	lsls	r4, r3, #4
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	2200      	movs	r2, #0
 80088a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80088a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80088a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80088ac:	4642      	mov	r2, r8
 80088ae:	464b      	mov	r3, r9
 80088b0:	1891      	adds	r1, r2, r2
 80088b2:	61b9      	str	r1, [r7, #24]
 80088b4:	415b      	adcs	r3, r3
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088bc:	4641      	mov	r1, r8
 80088be:	1851      	adds	r1, r2, r1
 80088c0:	6139      	str	r1, [r7, #16]
 80088c2:	4649      	mov	r1, r9
 80088c4:	414b      	adcs	r3, r1
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	f04f 0200 	mov.w	r2, #0
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088d4:	4659      	mov	r1, fp
 80088d6:	00cb      	lsls	r3, r1, #3
 80088d8:	4651      	mov	r1, sl
 80088da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088de:	4651      	mov	r1, sl
 80088e0:	00ca      	lsls	r2, r1, #3
 80088e2:	4610      	mov	r0, r2
 80088e4:	4619      	mov	r1, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	4642      	mov	r2, r8
 80088ea:	189b      	adds	r3, r3, r2
 80088ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088f0:	464b      	mov	r3, r9
 80088f2:	460a      	mov	r2, r1
 80088f4:	eb42 0303 	adc.w	r3, r2, r3
 80088f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	67bb      	str	r3, [r7, #120]	; 0x78
 8008906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008908:	f04f 0200 	mov.w	r2, #0
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008914:	4649      	mov	r1, r9
 8008916:	008b      	lsls	r3, r1, #2
 8008918:	4641      	mov	r1, r8
 800891a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800891e:	4641      	mov	r1, r8
 8008920:	008a      	lsls	r2, r1, #2
 8008922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008926:	f7f8 f801 	bl	800092c <__aeabi_uldivmod>
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	4b39      	ldr	r3, [pc, #228]	; (8008a14 <UART_SetConfig+0x4e4>)
 8008930:	fba3 1302 	umull	r1, r3, r3, r2
 8008934:	095b      	lsrs	r3, r3, #5
 8008936:	2164      	movs	r1, #100	; 0x64
 8008938:	fb01 f303 	mul.w	r3, r1, r3
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	3332      	adds	r3, #50	; 0x32
 8008942:	4a34      	ldr	r2, [pc, #208]	; (8008a14 <UART_SetConfig+0x4e4>)
 8008944:	fba2 2303 	umull	r2, r3, r2, r3
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800894e:	441c      	add	r4, r3
 8008950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008954:	2200      	movs	r2, #0
 8008956:	673b      	str	r3, [r7, #112]	; 0x70
 8008958:	677a      	str	r2, [r7, #116]	; 0x74
 800895a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800895e:	4642      	mov	r2, r8
 8008960:	464b      	mov	r3, r9
 8008962:	1891      	adds	r1, r2, r2
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	415b      	adcs	r3, r3
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800896e:	4641      	mov	r1, r8
 8008970:	1851      	adds	r1, r2, r1
 8008972:	6039      	str	r1, [r7, #0]
 8008974:	4649      	mov	r1, r9
 8008976:	414b      	adcs	r3, r1
 8008978:	607b      	str	r3, [r7, #4]
 800897a:	f04f 0200 	mov.w	r2, #0
 800897e:	f04f 0300 	mov.w	r3, #0
 8008982:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008986:	4659      	mov	r1, fp
 8008988:	00cb      	lsls	r3, r1, #3
 800898a:	4651      	mov	r1, sl
 800898c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008990:	4651      	mov	r1, sl
 8008992:	00ca      	lsls	r2, r1, #3
 8008994:	4610      	mov	r0, r2
 8008996:	4619      	mov	r1, r3
 8008998:	4603      	mov	r3, r0
 800899a:	4642      	mov	r2, r8
 800899c:	189b      	adds	r3, r3, r2
 800899e:	66bb      	str	r3, [r7, #104]	; 0x68
 80089a0:	464b      	mov	r3, r9
 80089a2:	460a      	mov	r2, r1
 80089a4:	eb42 0303 	adc.w	r3, r2, r3
 80089a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	663b      	str	r3, [r7, #96]	; 0x60
 80089b4:	667a      	str	r2, [r7, #100]	; 0x64
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80089c2:	4649      	mov	r1, r9
 80089c4:	008b      	lsls	r3, r1, #2
 80089c6:	4641      	mov	r1, r8
 80089c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089cc:	4641      	mov	r1, r8
 80089ce:	008a      	lsls	r2, r1, #2
 80089d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80089d4:	f7f7 ffaa 	bl	800092c <__aeabi_uldivmod>
 80089d8:	4602      	mov	r2, r0
 80089da:	460b      	mov	r3, r1
 80089dc:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <UART_SetConfig+0x4e4>)
 80089de:	fba3 1302 	umull	r1, r3, r3, r2
 80089e2:	095b      	lsrs	r3, r3, #5
 80089e4:	2164      	movs	r1, #100	; 0x64
 80089e6:	fb01 f303 	mul.w	r3, r1, r3
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	011b      	lsls	r3, r3, #4
 80089ee:	3332      	adds	r3, #50	; 0x32
 80089f0:	4a08      	ldr	r2, [pc, #32]	; (8008a14 <UART_SetConfig+0x4e4>)
 80089f2:	fba2 2303 	umull	r2, r3, r2, r3
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	f003 020f 	and.w	r2, r3, #15
 80089fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4422      	add	r2, r4
 8008a04:	609a      	str	r2, [r3, #8]
}
 8008a06:	bf00      	nop
 8008a08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a12:	bf00      	nop
 8008a14:	51eb851f 	.word	0x51eb851f

08008a18 <FSMC_NAND_Init>:
  * @param  Device Pointer to NAND device instance
  * @param  Init Pointer to NAND Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_Init(FSMC_NAND_TypeDef *Device, FSMC_NAND_InitTypeDef *Init)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ECCPAGE_SIZE(Init->ECCPageSize));
  assert_param(IS_FSMC_TCLR_TIME(Init->TCLRSetupTime));
  assert_param(IS_FSMC_TAR_TIME(Init->TARSetupTime));

  /* Set NAND device control parameters */
  if (Init->NandBank == FSMC_NAND_BANK2)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d11c      	bne.n	8008a64 <FSMC_NAND_Init+0x4c>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PCR2, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	4b1f      	ldr	r3, [pc, #124]	; (8008aac <FSMC_NAND_Init+0x94>)
 8008a30:	4013      	ands	r3, r2
 8008a32:	683a      	ldr	r2, [r7, #0]
 8008a34:	6851      	ldr	r1, [r2, #4]
 8008a36:	683a      	ldr	r2, [r7, #0]
 8008a38:	6892      	ldr	r2, [r2, #8]
 8008a3a:	4311      	orrs	r1, r2
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	68d2      	ldr	r2, [r2, #12]
 8008a40:	4311      	orrs	r1, r2
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	6912      	ldr	r2, [r2, #16]
 8008a46:	4311      	orrs	r1, r2
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	6952      	ldr	r2, [r2, #20]
 8008a4c:	0252      	lsls	r2, r2, #9
 8008a4e:	4311      	orrs	r1, r2
 8008a50:	683a      	ldr	r2, [r7, #0]
 8008a52:	6992      	ldr	r2, [r2, #24]
 8008a54:	0352      	lsls	r2, r2, #13
 8008a56:	430a      	orrs	r2, r1
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	f043 0208 	orr.w	r2, r3, #8
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	601a      	str	r2, [r3, #0]
 8008a62:	e01b      	b.n	8008a9c <FSMC_NAND_Init+0x84>
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PCR3, PCR_CLEAR_MASK, (Init->Waitfeature                                      |
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a1a      	ldr	r2, [r3, #32]
 8008a68:	4b10      	ldr	r3, [pc, #64]	; (8008aac <FSMC_NAND_Init+0x94>)
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	6851      	ldr	r1, [r2, #4]
 8008a70:	683a      	ldr	r2, [r7, #0]
 8008a72:	6892      	ldr	r2, [r2, #8]
 8008a74:	4311      	orrs	r1, r2
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	68d2      	ldr	r2, [r2, #12]
 8008a7a:	4311      	orrs	r1, r2
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	6912      	ldr	r2, [r2, #16]
 8008a80:	4311      	orrs	r1, r2
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	6952      	ldr	r2, [r2, #20]
 8008a86:	0252      	lsls	r2, r2, #9
 8008a88:	4311      	orrs	r1, r2
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	6992      	ldr	r2, [r2, #24]
 8008a8e:	0352      	lsls	r2, r2, #13
 8008a90:	430a      	orrs	r2, r1
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f043 0208 	orr.w	r2, r3, #8
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	621a      	str	r2, [r3, #32]
                                              Init->ECCPageSize                                      |
                                              ((Init->TCLRSetupTime) << FSMC_PCR2_TCLR_Pos)  |
                                              ((Init->TARSetupTime)  << FSMC_PCR2_TAR_Pos)));
  }

  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop
 8008aac:	fff00181 	.word	0xfff00181

08008ab0 <FSMC_NAND_CommonSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_CommonSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                   FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2b10      	cmp	r3, #16
 8008ac0:	d112      	bne.n	8008ae8 <FSMC_NAND_CommonSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PMEM2, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	431a      	orrs	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	041b      	lsls	r3, r3, #16
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	061b      	lsls	r3, r3, #24
 8008ae0:	431a      	orrs	r2, r3
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	609a      	str	r2, [r3, #8]
 8008ae6:	e011      	b.n	8008b0c <FSMC_NAND_CommonSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PMEM3, PMEM_CLEAR_MASK, (Timing->SetupTime                                             |
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	021b      	lsls	r3, r3, #8
 8008af6:	431a      	orrs	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	041b      	lsls	r3, r3, #16
 8008afe:	431a      	orrs	r2, r3
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	061b      	lsls	r3, r3, #24
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	629a      	str	r2, [r3, #40]	; 0x28
                                                ((Timing->WaitSetupTime) << FSMC_PMEM2_MEMWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PMEM2_MEMHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PMEM2_MEMHIZ2_Pos)));
  }

  return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <FSMC_NAND_AttributeSpace_Timing_Init>:
  * @param  Bank NAND bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NAND_AttributeSpace_Timing_Init(FSMC_NAND_TypeDef *Device,
                                                      FSMC_NAND_PCC_TimingTypeDef *Timing, uint32_t Bank)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	60f8      	str	r0, [r7, #12]
 8008b22:	60b9      	str	r1, [r7, #8]
 8008b24:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_HOLD_TIME(Timing->HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(Timing->HiZSetupTime));
  assert_param(IS_FSMC_NAND_BANK(Bank));

  /* Set FSMC_NAND device timing parameters */
  if (Bank == FSMC_NAND_BANK2)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b10      	cmp	r3, #16
 8008b2a:	d112      	bne.n	8008b52 <FSMC_NAND_AttributeSpace_Timing_Init+0x38>
  {
    /* NAND bank 2 registers configuration */
    MODIFY_REG(Device->PATT2, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	041b      	lsls	r3, r3, #16
 8008b42:	431a      	orrs	r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	061b      	lsls	r3, r3, #24
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	60da      	str	r2, [r3, #12]
 8008b50:	e011      	b.n	8008b76 <FSMC_NAND_AttributeSpace_Timing_Init+0x5c>
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }
  else
  {
    /* NAND bank 3 registers configuration */
    MODIFY_REG(Device->PATT3, PATT_CLEAR_MASK, (Timing->SetupTime                                             |
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	431a      	orrs	r2, r3
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	041b      	lsls	r3, r3, #16
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	061b      	lsls	r3, r3, #24
 8008b70:	431a      	orrs	r2, r3
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	62da      	str	r2, [r3, #44]	; 0x2c
                                                ((Timing->WaitSetupTime) << FSMC_PATT2_ATTWAIT2_Pos) |
                                                ((Timing->HoldSetupTime) << FSMC_PATT2_ATTHOLD2_Pos) |
                                                ((Timing->HiZSetupTime)  << FSMC_PATT2_ATTHIZ2_Pos)));
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <__NVIC_SetPriority>:
{
 8008b84:	b480      	push	{r7}
 8008b86:	b083      	sub	sp, #12
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	db0a      	blt.n	8008bae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	b2da      	uxtb	r2, r3
 8008b9c:	490c      	ldr	r1, [pc, #48]	; (8008bd0 <__NVIC_SetPriority+0x4c>)
 8008b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ba2:	0112      	lsls	r2, r2, #4
 8008ba4:	b2d2      	uxtb	r2, r2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008bac:	e00a      	b.n	8008bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	4908      	ldr	r1, [pc, #32]	; (8008bd4 <__NVIC_SetPriority+0x50>)
 8008bb4:	79fb      	ldrb	r3, [r7, #7]
 8008bb6:	f003 030f 	and.w	r3, r3, #15
 8008bba:	3b04      	subs	r3, #4
 8008bbc:	0112      	lsls	r2, r2, #4
 8008bbe:	b2d2      	uxtb	r2, r2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	761a      	strb	r2, [r3, #24]
}
 8008bc4:	bf00      	nop
 8008bc6:	370c      	adds	r7, #12
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bce:	4770      	bx	lr
 8008bd0:	e000e100 	.word	0xe000e100
 8008bd4:	e000ed00 	.word	0xe000ed00

08008bd8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008bdc:	4b05      	ldr	r3, [pc, #20]	; (8008bf4 <SysTick_Handler+0x1c>)
 8008bde:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008be0:	f002 f856 	bl	800ac90 <xTaskGetSchedulerState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b01      	cmp	r3, #1
 8008be8:	d001      	beq.n	8008bee <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008bea:	f002 fe3d 	bl	800b868 <xPortSysTickHandler>
  }
}
 8008bee:	bf00      	nop
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	e000e010 	.word	0xe000e010

08008bf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008bfc:	2100      	movs	r1, #0
 8008bfe:	f06f 0004 	mvn.w	r0, #4
 8008c02:	f7ff ffbf 	bl	8008b84 <__NVIC_SetPriority>
#endif
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c12:	f3ef 8305 	mrs	r3, IPSR
 8008c16:	603b      	str	r3, [r7, #0]
  return(result);
 8008c18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008c1e:	f06f 0305 	mvn.w	r3, #5
 8008c22:	607b      	str	r3, [r7, #4]
 8008c24:	e00f      	b.n	8008c46 <osKernelInitialize+0x3a>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008c26:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <osKernelInitialize+0x44>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d108      	bne.n	8008c40 <osKernelInitialize+0x34>
      #if defined(USE_TRACE_EVENT_RECORDER)
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
 8008c2e:	4809      	ldr	r0, [pc, #36]	; (8008c54 <osKernelInitialize+0x48>)
 8008c30:	f003 f816 	bl	800bc60 <vPortDefineHeapRegions>
      #endif
      KernelState = osKernelReady;
 8008c34:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <osKernelInitialize+0x44>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	607b      	str	r3, [r7, #4]
 8008c3e:	e002      	b.n	8008c46 <osKernelInitialize+0x3a>
    } else {
      stat = osError;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c44:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c46:	687b      	ldr	r3, [r7, #4]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3708      	adds	r7, #8
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20001be0 	.word	0x20001be0
 8008c54:	20000084 	.word	0x20000084

08008c58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c5e:	f3ef 8305 	mrs	r3, IPSR
 8008c62:	603b      	str	r3, [r7, #0]
  return(result);
 8008c64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008c6a:	f06f 0305 	mvn.w	r3, #5
 8008c6e:	607b      	str	r3, [r7, #4]
 8008c70:	e010      	b.n	8008c94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008c72:	4b0b      	ldr	r3, [pc, #44]	; (8008ca0 <osKernelStart+0x48>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d109      	bne.n	8008c8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008c7a:	f7ff ffbd 	bl	8008bf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008c7e:	4b08      	ldr	r3, [pc, #32]	; (8008ca0 <osKernelStart+0x48>)
 8008c80:	2202      	movs	r2, #2
 8008c82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008c84:	f001 fba8 	bl	800a3d8 <vTaskStartScheduler>
      stat = osOK;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	607b      	str	r3, [r7, #4]
 8008c8c:	e002      	b.n	8008c94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008c94:	687b      	ldr	r3, [r7, #4]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20001be0 	.word	0x20001be0

08008ca4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b08e      	sub	sp, #56	; 0x38
 8008ca8:	af04      	add	r7, sp, #16
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cb4:	f3ef 8305 	mrs	r3, IPSR
 8008cb8:	617b      	str	r3, [r7, #20]
  return(result);
 8008cba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d17e      	bne.n	8008dbe <osThreadNew+0x11a>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d07b      	beq.n	8008dbe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008cc6:	2380      	movs	r3, #128	; 0x80
 8008cc8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008cca:	2318      	movs	r3, #24
 8008ccc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008cd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cd6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d045      	beq.n	8008d6a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d002      	beq.n	8008cec <osThreadNew+0x48>
        name = attr->name;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d008      	beq.n	8008d12 <osThreadNew+0x6e>
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	2b38      	cmp	r3, #56	; 0x38
 8008d04:	d805      	bhi.n	8008d12 <osThreadNew+0x6e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	f003 0301 	and.w	r3, r3, #1
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d001      	beq.n	8008d16 <osThreadNew+0x72>
        return (NULL);
 8008d12:	2300      	movs	r3, #0
 8008d14:	e054      	b.n	8008dc0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	089b      	lsrs	r3, r3, #2
 8008d24:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00e      	beq.n	8008d4c <osThreadNew+0xa8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	2bbb      	cmp	r3, #187	; 0xbb
 8008d34:	d90a      	bls.n	8008d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d006      	beq.n	8008d4c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <osThreadNew+0xa8>
        mem = 1;
 8008d46:	2301      	movs	r3, #1
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	e010      	b.n	8008d6e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10c      	bne.n	8008d6e <osThreadNew+0xca>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d108      	bne.n	8008d6e <osThreadNew+0xca>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <osThreadNew+0xca>
          mem = 0;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	e001      	b.n	8008d6e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d110      	bne.n	8008d96 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	6a3a      	ldr	r2, [r7, #32]
 8008d88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f001 f938 	bl	800a000 <xTaskCreateStatic>
 8008d90:	4603      	mov	r3, r0
 8008d92:	613b      	str	r3, [r7, #16]
 8008d94:	e013      	b.n	8008dbe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d110      	bne.n	8008dbe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	f107 0310 	add.w	r3, r7, #16
 8008da4:	9301      	str	r3, [sp, #4]
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f001 f983 	bl	800a0ba <xTaskCreate>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d001      	beq.n	8008dbe <osThreadNew+0x11a>
            hTask = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008dbe:	693b      	ldr	r3, [r7, #16]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3728      	adds	r7, #40	; 0x28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dd0:	f3ef 8305 	mrs	r3, IPSR
 8008dd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <osDelay+0x1c>
    stat = osErrorISR;
 8008ddc:	f06f 0305 	mvn.w	r3, #5
 8008de0:	60fb      	str	r3, [r7, #12]
 8008de2:	e007      	b.n	8008df4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d002      	beq.n	8008df4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fabe 	bl	800a370 <vTaskDelay>
    }
  }

  return (stat);
 8008df4:	68fb      	ldr	r3, [r7, #12]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3710      	adds	r7, #16
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b08a      	sub	sp, #40	; 0x28
 8008e02:	af02      	add	r7, sp, #8
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e0e:	f3ef 8305 	mrs	r3, IPSR
 8008e12:	613b      	str	r3, [r7, #16]
  return(result);
 8008e14:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d175      	bne.n	8008f06 <osSemaphoreNew+0x108>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d072      	beq.n	8008f06 <osSemaphoreNew+0x108>
 8008e20:	68ba      	ldr	r2, [r7, #8]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d86e      	bhi.n	8008f06 <osSemaphoreNew+0x108>
    mem = -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d015      	beq.n	8008e60 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d006      	beq.n	8008e4a <osSemaphoreNew+0x4c>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	2b4f      	cmp	r3, #79	; 0x4f
 8008e42:	d902      	bls.n	8008e4a <osSemaphoreNew+0x4c>
        mem = 1;
 8008e44:	2301      	movs	r3, #1
 8008e46:	61bb      	str	r3, [r7, #24]
 8008e48:	e00c      	b.n	8008e64 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d108      	bne.n	8008e64 <osSemaphoreNew+0x66>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d104      	bne.n	8008e64 <osSemaphoreNew+0x66>
          mem = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
 8008e5e:	e001      	b.n	8008e64 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e6a:	d04c      	beq.n	8008f06 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d128      	bne.n	8008ec4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d10a      	bne.n	8008e8e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	2203      	movs	r2, #3
 8008e7e:	9200      	str	r2, [sp, #0]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2100      	movs	r1, #0
 8008e84:	2001      	movs	r0, #1
 8008e86:	f000 fac5 	bl	8009414 <xQueueGenericCreateStatic>
 8008e8a:	61f8      	str	r0, [r7, #28]
 8008e8c:	e005      	b.n	8008e9a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008e8e:	2203      	movs	r2, #3
 8008e90:	2100      	movs	r1, #0
 8008e92:	2001      	movs	r0, #1
 8008e94:	f000 fb36 	bl	8009504 <xQueueGenericCreate>
 8008e98:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d022      	beq.n	8008ee6 <osSemaphoreNew+0xe8>
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d01f      	beq.n	8008ee6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	2100      	movs	r1, #0
 8008eac:	69f8      	ldr	r0, [r7, #28]
 8008eae:	f000 fbf1 	bl	8009694 <xQueueGenericSend>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d016      	beq.n	8008ee6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008eb8:	69f8      	ldr	r0, [r7, #28]
 8008eba:	f000 fee5 	bl	8009c88 <vQueueDelete>
            hSemaphore = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	e010      	b.n	8008ee6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d108      	bne.n	8008edc <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	68b9      	ldr	r1, [r7, #8]
 8008ed2:	68f8      	ldr	r0, [r7, #12]
 8008ed4:	f000 fb73 	bl	80095be <xQueueCreateCountingSemaphoreStatic>
 8008ed8:	61f8      	str	r0, [r7, #28]
 8008eda:	e004      	b.n	8008ee6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fba4 	bl	800962c <xQueueCreateCountingSemaphore>
 8008ee4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00c      	beq.n	8008f06 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d003      	beq.n	8008efa <osSemaphoreNew+0xfc>
          name = attr->name;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	617b      	str	r3, [r7, #20]
 8008ef8:	e001      	b.n	8008efe <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008efe:	6979      	ldr	r1, [r7, #20]
 8008f00:	69f8      	ldr	r0, [r7, #28]
 8008f02:	f000 fff5 	bl	8009ef0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008f06:	69fb      	ldr	r3, [r7, #28]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3720      	adds	r7, #32
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	; 0x28
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f20:	f3ef 8305 	mrs	r3, IPSR
 8008f24:	613b      	str	r3, [r7, #16]
  return(result);
 8008f26:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d15f      	bne.n	8008fec <osMessageQueueNew+0xdc>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d05c      	beq.n	8008fec <osMessageQueueNew+0xdc>
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d059      	beq.n	8008fec <osMessageQueueNew+0xdc>
    mem = -1;
 8008f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f3c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d029      	beq.n	8008f98 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d012      	beq.n	8008f72 <osMessageQueueNew+0x62>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	2b4f      	cmp	r3, #79	; 0x4f
 8008f52:	d90e      	bls.n	8008f72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00a      	beq.n	8008f72 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	695a      	ldr	r2, [r3, #20]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68b9      	ldr	r1, [r7, #8]
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d302      	bcc.n	8008f72 <osMessageQueueNew+0x62>
        mem = 1;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	61bb      	str	r3, [r7, #24]
 8008f70:	e014      	b.n	8008f9c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d110      	bne.n	8008f9c <osMessageQueueNew+0x8c>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10c      	bne.n	8008f9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d108      	bne.n	8008f9c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <osMessageQueueNew+0x8c>
          mem = 0;
 8008f92:	2300      	movs	r3, #0
 8008f94:	61bb      	str	r3, [r7, #24]
 8008f96:	e001      	b.n	8008f9c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f9c:	69bb      	ldr	r3, [r7, #24]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d10b      	bne.n	8008fba <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	2100      	movs	r1, #0
 8008fac:	9100      	str	r1, [sp, #0]
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 fa2f 	bl	8009414 <xQueueGenericCreateStatic>
 8008fb6:	61f8      	str	r0, [r7, #28]
 8008fb8:	e008      	b.n	8008fcc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d105      	bne.n	8008fcc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	68b9      	ldr	r1, [r7, #8]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fa9d 	bl	8009504 <xQueueGenericCreate>
 8008fca:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00c      	beq.n	8008fec <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d003      	beq.n	8008fe0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	e001      	b.n	8008fe4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008fe4:	6979      	ldr	r1, [r7, #20]
 8008fe6:	69f8      	ldr	r0, [r7, #28]
 8008fe8:	f000 ff82 	bl	8009ef0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008fec:	69fb      	ldr	r3, [r7, #28]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3720      	adds	r7, #32
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b088      	sub	sp, #32
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	4613      	mov	r3, r2
 8009006:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800900c:	2300      	movs	r3, #0
 800900e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009010:	f3ef 8305 	mrs	r3, IPSR
 8009014:	617b      	str	r3, [r7, #20]
  return(result);
 8009016:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009018:	2b00      	cmp	r3, #0
 800901a:	d028      	beq.n	800906e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <osMessageQueuePut+0x36>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <osMessageQueuePut+0x36>
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800902e:	f06f 0303 	mvn.w	r3, #3
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	e038      	b.n	80090a8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800903a:	f107 0210 	add.w	r2, r7, #16
 800903e:	2300      	movs	r3, #0
 8009040:	68b9      	ldr	r1, [r7, #8]
 8009042:	69b8      	ldr	r0, [r7, #24]
 8009044:	f000 fc24 	bl	8009890 <xQueueGenericSendFromISR>
 8009048:	4603      	mov	r3, r0
 800904a:	2b01      	cmp	r3, #1
 800904c:	d003      	beq.n	8009056 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800904e:	f06f 0302 	mvn.w	r3, #2
 8009052:	61fb      	str	r3, [r7, #28]
 8009054:	e028      	b.n	80090a8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d025      	beq.n	80090a8 <osMessageQueuePut+0xb0>
 800905c:	4b15      	ldr	r3, [pc, #84]	; (80090b4 <osMessageQueuePut+0xbc>)
 800905e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009062:	601a      	str	r2, [r3, #0]
 8009064:	f3bf 8f4f 	dsb	sy
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	e01c      	b.n	80090a8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d002      	beq.n	800907a <osMessageQueuePut+0x82>
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d103      	bne.n	8009082 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800907a:	f06f 0303 	mvn.w	r3, #3
 800907e:	61fb      	str	r3, [r7, #28]
 8009080:	e012      	b.n	80090a8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009082:	2300      	movs	r3, #0
 8009084:	683a      	ldr	r2, [r7, #0]
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f000 fb03 	bl	8009694 <xQueueGenericSend>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d009      	beq.n	80090a8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800909a:	f06f 0301 	mvn.w	r3, #1
 800909e:	61fb      	str	r3, [r7, #28]
 80090a0:	e002      	b.n	80090a8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80090a2:	f06f 0302 	mvn.w	r3, #2
 80090a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80090a8:	69fb      	ldr	r3, [r7, #28]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3720      	adds	r7, #32
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}
 80090b2:	bf00      	nop
 80090b4:	e000ed04 	.word	0xe000ed04

080090b8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b088      	sub	sp, #32
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
 80090c4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090ce:	f3ef 8305 	mrs	r3, IPSR
 80090d2:	617b      	str	r3, [r7, #20]
  return(result);
 80090d4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d028      	beq.n	800912c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <osMessageQueueGet+0x34>
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <osMessageQueueGet+0x34>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d003      	beq.n	80090f4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80090ec:	f06f 0303 	mvn.w	r3, #3
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	e037      	b.n	8009164 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80090f8:	f107 0310 	add.w	r3, r7, #16
 80090fc:	461a      	mov	r2, r3
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	69b8      	ldr	r0, [r7, #24]
 8009102:	f000 fd41 	bl	8009b88 <xQueueReceiveFromISR>
 8009106:	4603      	mov	r3, r0
 8009108:	2b01      	cmp	r3, #1
 800910a:	d003      	beq.n	8009114 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800910c:	f06f 0302 	mvn.w	r3, #2
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	e027      	b.n	8009164 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d024      	beq.n	8009164 <osMessageQueueGet+0xac>
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <osMessageQueueGet+0xb8>)
 800911c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009120:	601a      	str	r2, [r3, #0]
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	e01b      	b.n	8009164 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800912c:	69bb      	ldr	r3, [r7, #24]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <osMessageQueueGet+0x80>
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d103      	bne.n	8009140 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009138:	f06f 0303 	mvn.w	r3, #3
 800913c:	61fb      	str	r3, [r7, #28]
 800913e:	e011      	b.n	8009164 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	68b9      	ldr	r1, [r7, #8]
 8009144:	69b8      	ldr	r0, [r7, #24]
 8009146:	f000 fc3f 	bl	80099c8 <xQueueReceive>
 800914a:	4603      	mov	r3, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d009      	beq.n	8009164 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d003      	beq.n	800915e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009156:	f06f 0301 	mvn.w	r3, #1
 800915a:	61fb      	str	r3, [r7, #28]
 800915c:	e002      	b.n	8009164 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800915e:	f06f 0302 	mvn.w	r3, #2
 8009162:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009164:	69fb      	ldr	r3, [r7, #28]
}
 8009166:	4618      	mov	r0, r3
 8009168:	3720      	adds	r7, #32
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	e000ed04 	.word	0xe000ed04

08009174 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	60f8      	str	r0, [r7, #12]
 800917c:	60b9      	str	r1, [r7, #8]
 800917e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	4a07      	ldr	r2, [pc, #28]	; (80091a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8009184:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	4a06      	ldr	r2, [pc, #24]	; (80091a4 <vApplicationGetIdleTaskMemory+0x30>)
 800918a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2280      	movs	r2, #128	; 0x80
 8009190:	601a      	str	r2, [r3, #0]
}
 8009192:	bf00      	nop
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	20005be4 	.word	0x20005be4
 80091a4:	20005ca0 	.word	0x20005ca0

080091a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80091a8:	b480      	push	{r7}
 80091aa:	b085      	sub	sp, #20
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4a07      	ldr	r2, [pc, #28]	; (80091d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80091b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	4a06      	ldr	r2, [pc, #24]	; (80091d8 <vApplicationGetTimerTaskMemory+0x30>)
 80091be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80091c6:	601a      	str	r2, [r3, #0]
}
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr
 80091d4:	20005ea0 	.word	0x20005ea0
 80091d8:	20005f5c 	.word	0x20005f5c

080091dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f103 0208 	add.w	r2, r3, #8
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f103 0208 	add.w	r2, r3, #8
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f103 0208 	add.w	r2, r3, #8
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800922a:	bf00      	nop
 800922c:	370c      	adds	r7, #12
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr

08009236 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009236:	b480      	push	{r7}
 8009238:	b085      	sub	sp, #20
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	689a      	ldr	r2, [r3, #8]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	683a      	ldr	r2, [r7, #0]
 8009260:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	687a      	ldr	r2, [r7, #4]
 8009266:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009294:	d103      	bne.n	800929e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	60fb      	str	r3, [r7, #12]
 800929c:	e00c      	b.n	80092b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3308      	adds	r3, #8
 80092a2:	60fb      	str	r3, [r7, #12]
 80092a4:	e002      	b.n	80092ac <vListInsert+0x2e>
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d2f6      	bcs.n	80092a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	685a      	ldr	r2, [r3, #4]
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	683a      	ldr	r2, [r7, #0]
 80092c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	6892      	ldr	r2, [r2, #8]
 8009306:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	6852      	ldr	r2, [r2, #4]
 8009310:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	429a      	cmp	r2, r3
 800931a:	d103      	bne.n	8009324 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	689a      	ldr	r2, [r3, #8]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2200      	movs	r2, #0
 8009328:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	1e5a      	subs	r2, r3, #1
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800936e:	f002 f9e9 	bl	800b744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800937e:	fb01 f303 	mul.w	r3, r1, r3
 8009382:	441a      	add	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2200      	movs	r2, #0
 800938c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	3b01      	subs	r3, #1
 80093a0:	68f9      	ldr	r1, [r7, #12]
 80093a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	441a      	add	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	22ff      	movs	r2, #255	; 0xff
 80093b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	22ff      	movs	r2, #255	; 0xff
 80093ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d114      	bne.n	80093ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d01a      	beq.n	8009402 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	3310      	adds	r3, #16
 80093d0:	4618      	mov	r0, r3
 80093d2:	f001 fa9b 	bl	800a90c <xTaskRemoveFromEventList>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d012      	beq.n	8009402 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80093dc:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <xQueueGenericReset+0xcc>)
 80093de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e2:	601a      	str	r2, [r3, #0]
 80093e4:	f3bf 8f4f 	dsb	sy
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	e009      	b.n	8009402 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3310      	adds	r3, #16
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7ff fef2 	bl	80091dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	3324      	adds	r3, #36	; 0x24
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff feed 	bl	80091dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009402:	f002 f9cf 	bl	800b7a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009406:	2301      	movs	r3, #1
}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08e      	sub	sp, #56	; 0x38
 8009418:	af02      	add	r7, sp, #8
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d10a      	bne.n	800943e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10a      	bne.n	800945a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <xQueueGenericCreateStatic+0x52>
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <xQueueGenericCreateStatic+0x56>
 8009466:	2301      	movs	r3, #1
 8009468:	e000      	b.n	800946c <xQueueGenericCreateStatic+0x58>
 800946a:	2300      	movs	r3, #0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d10a      	bne.n	8009486 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009474:	f383 8811 	msr	BASEPRI, r3
 8009478:	f3bf 8f6f 	isb	sy
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	623b      	str	r3, [r7, #32]
}
 8009482:	bf00      	nop
 8009484:	e7fe      	b.n	8009484 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d102      	bne.n	8009492 <xQueueGenericCreateStatic+0x7e>
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <xQueueGenericCreateStatic+0x82>
 8009492:	2301      	movs	r3, #1
 8009494:	e000      	b.n	8009498 <xQueueGenericCreateStatic+0x84>
 8009496:	2300      	movs	r3, #0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10a      	bne.n	80094b2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	61fb      	str	r3, [r7, #28]
}
 80094ae:	bf00      	nop
 80094b0:	e7fe      	b.n	80094b0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094b2:	2350      	movs	r3, #80	; 0x50
 80094b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	2b50      	cmp	r3, #80	; 0x50
 80094ba:	d00a      	beq.n	80094d2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	f383 8811 	msr	BASEPRI, r3
 80094c4:	f3bf 8f6f 	isb	sy
 80094c8:	f3bf 8f4f 	dsb	sy
 80094cc:	61bb      	str	r3, [r7, #24]
}
 80094ce:	bf00      	nop
 80094d0:	e7fe      	b.n	80094d0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80094d2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80094d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00d      	beq.n	80094fa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094e6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	4613      	mov	r3, r2
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f83f 	bl	8009578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3730      	adds	r7, #48	; 0x30
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009504:	b580      	push	{r7, lr}
 8009506:	b08a      	sub	sp, #40	; 0x28
 8009508:	af02      	add	r7, sp, #8
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d10a      	bne.n	800952e <xQueueGenericCreate+0x2a>
	__asm volatile
 8009518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800951c:	f383 8811 	msr	BASEPRI, r3
 8009520:	f3bf 8f6f 	isb	sy
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	613b      	str	r3, [r7, #16]
}
 800952a:	bf00      	nop
 800952c:	e7fe      	b.n	800952c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	fb02 f303 	mul.w	r3, r2, r3
 8009536:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	3350      	adds	r3, #80	; 0x50
 800953c:	4618      	mov	r0, r3
 800953e:	f002 fa23 	bl	800b988 <pvPortMalloc>
 8009542:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d011      	beq.n	800956e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	3350      	adds	r3, #80	; 0x50
 8009552:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800955c:	79fa      	ldrb	r2, [r7, #7]
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	4613      	mov	r3, r2
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	68b9      	ldr	r1, [r7, #8]
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 f805 	bl	8009578 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800956e:	69bb      	ldr	r3, [r7, #24]
	}
 8009570:	4618      	mov	r0, r3
 8009572:	3720      	adds	r7, #32
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
 8009584:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	69ba      	ldr	r2, [r7, #24]
 8009590:	601a      	str	r2, [r3, #0]
 8009592:	e002      	b.n	800959a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095a0:	69bb      	ldr	r3, [r7, #24]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095a6:	2101      	movs	r1, #1
 80095a8:	69b8      	ldr	r0, [r7, #24]
 80095aa:	f7ff fecb 	bl	8009344 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80095b6:	bf00      	nop
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b08a      	sub	sp, #40	; 0x28
 80095c2:	af02      	add	r7, sp, #8
 80095c4:	60f8      	str	r0, [r7, #12]
 80095c6:	60b9      	str	r1, [r7, #8]
 80095c8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	61bb      	str	r3, [r7, #24]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d90a      	bls.n	8009604 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	617b      	str	r3, [r7, #20]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009604:	2302      	movs	r3, #2
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	2100      	movs	r1, #0
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7ff ff00 	bl	8009414 <xQueueGenericCreateStatic>
 8009614:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009622:	69fb      	ldr	r3, [r7, #28]
	}
 8009624:	4618      	mov	r0, r3
 8009626:	3720      	adds	r7, #32
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10a      	bne.n	8009652 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800963c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009640:	f383 8811 	msr	BASEPRI, r3
 8009644:	f3bf 8f6f 	isb	sy
 8009648:	f3bf 8f4f 	dsb	sy
 800964c:	613b      	str	r3, [r7, #16]
}
 800964e:	bf00      	nop
 8009650:	e7fe      	b.n	8009650 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	d90a      	bls.n	8009670 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800965a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800965e:	f383 8811 	msr	BASEPRI, r3
 8009662:	f3bf 8f6f 	isb	sy
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	60fb      	str	r3, [r7, #12]
}
 800966c:	bf00      	nop
 800966e:	e7fe      	b.n	800966e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009670:	2202      	movs	r2, #2
 8009672:	2100      	movs	r1, #0
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff ff45 	bl	8009504 <xQueueGenericCreate>
 800967a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009688:	697b      	ldr	r3, [r7, #20]
	}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096a2:	2300      	movs	r3, #0
 80096a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10a      	bne.n	80096c6 <xQueueGenericSend+0x32>
	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <xQueueGenericSend+0x40>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <xQueueGenericSend+0x44>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <xQueueGenericSend+0x46>
 80096d8:	2300      	movs	r3, #0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10a      	bne.n	80096f4 <xQueueGenericSend+0x60>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	f383 8811 	msr	BASEPRI, r3
 80096e6:	f3bf 8f6f 	isb	sy
 80096ea:	f3bf 8f4f 	dsb	sy
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096f0:	bf00      	nop
 80096f2:	e7fe      	b.n	80096f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d103      	bne.n	8009702 <xQueueGenericSend+0x6e>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d101      	bne.n	8009706 <xQueueGenericSend+0x72>
 8009702:	2301      	movs	r3, #1
 8009704:	e000      	b.n	8009708 <xQueueGenericSend+0x74>
 8009706:	2300      	movs	r3, #0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10a      	bne.n	8009722 <xQueueGenericSend+0x8e>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	623b      	str	r3, [r7, #32]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009722:	f001 fab5 	bl	800ac90 <xTaskGetSchedulerState>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d102      	bne.n	8009732 <xQueueGenericSend+0x9e>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d101      	bne.n	8009736 <xQueueGenericSend+0xa2>
 8009732:	2301      	movs	r3, #1
 8009734:	e000      	b.n	8009738 <xQueueGenericSend+0xa4>
 8009736:	2300      	movs	r3, #0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <xQueueGenericSend+0xbe>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	61fb      	str	r3, [r7, #28]
}
 800974e:	bf00      	nop
 8009750:	e7fe      	b.n	8009750 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009752:	f001 fff7 	bl	800b744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800975e:	429a      	cmp	r2, r3
 8009760:	d302      	bcc.n	8009768 <xQueueGenericSend+0xd4>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	2b02      	cmp	r3, #2
 8009766:	d129      	bne.n	80097bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800976e:	f000 faae 	bl	8009cce <prvCopyDataToQueue>
 8009772:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800977c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977e:	3324      	adds	r3, #36	; 0x24
 8009780:	4618      	mov	r0, r3
 8009782:	f001 f8c3 	bl	800a90c <xTaskRemoveFromEventList>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d013      	beq.n	80097b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800978c:	4b3f      	ldr	r3, [pc, #252]	; (800988c <xQueueGenericSend+0x1f8>)
 800978e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	e00a      	b.n	80097b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d007      	beq.n	80097b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097a4:	4b39      	ldr	r3, [pc, #228]	; (800988c <xQueueGenericSend+0x1f8>)
 80097a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097b4:	f001 fff6 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e063      	b.n	8009884 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d103      	bne.n	80097ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097c2:	f001 ffef 	bl	800b7a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e05c      	b.n	8009884 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d106      	bne.n	80097de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097d0:	f107 0314 	add.w	r3, r7, #20
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f8fd 	bl	800a9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097da:	2301      	movs	r3, #1
 80097dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097de:	f001 ffe1 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097e2:	f000 fe69 	bl	800a4b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097e6:	f001 ffad 	bl	800b744 <vPortEnterCritical>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097f6:	d103      	bne.n	8009800 <xQueueGenericSend+0x16c>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009806:	b25b      	sxtb	r3, r3
 8009808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800980c:	d103      	bne.n	8009816 <xQueueGenericSend+0x182>
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009816:	f001 ffc5 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800981a:	1d3a      	adds	r2, r7, #4
 800981c:	f107 0314 	add.w	r3, r7, #20
 8009820:	4611      	mov	r1, r2
 8009822:	4618      	mov	r0, r3
 8009824:	f001 f8ec 	bl	800aa00 <xTaskCheckForTimeOut>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d124      	bne.n	8009878 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800982e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009830:	f000 fb45 	bl	8009ebe <prvIsQueueFull>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d018      	beq.n	800986c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800983a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983c:	3310      	adds	r3, #16
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f001 f812 	bl	800a86c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800984a:	f000 fad0 	bl	8009dee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800984e:	f000 fe41 	bl	800a4d4 <xTaskResumeAll>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	f47f af7c 	bne.w	8009752 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800985a:	4b0c      	ldr	r3, [pc, #48]	; (800988c <xQueueGenericSend+0x1f8>)
 800985c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	e772      	b.n	8009752 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800986c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800986e:	f000 fabe 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009872:	f000 fe2f 	bl	800a4d4 <xTaskResumeAll>
 8009876:	e76c      	b.n	8009752 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009878:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800987a:	f000 fab8 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800987e:	f000 fe29 	bl	800a4d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009882:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009884:	4618      	mov	r0, r3
 8009886:	3738      	adds	r7, #56	; 0x38
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	e000ed04 	.word	0xe000ed04

08009890 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b090      	sub	sp, #64	; 0x40
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d10a      	bne.n	80098be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <xQueueGenericSendFromISR+0x3c>
 80098c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <xQueueGenericSendFromISR+0x40>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <xQueueGenericSendFromISR+0x42>
 80098d0:	2300      	movs	r3, #0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10a      	bne.n	80098ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80098d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098da:	f383 8811 	msr	BASEPRI, r3
 80098de:	f3bf 8f6f 	isb	sy
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098e8:	bf00      	nop
 80098ea:	e7fe      	b.n	80098ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d103      	bne.n	80098fa <xQueueGenericSendFromISR+0x6a>
 80098f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d101      	bne.n	80098fe <xQueueGenericSendFromISR+0x6e>
 80098fa:	2301      	movs	r3, #1
 80098fc:	e000      	b.n	8009900 <xQueueGenericSendFromISR+0x70>
 80098fe:	2300      	movs	r3, #0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10a      	bne.n	800991a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009908:	f383 8811 	msr	BASEPRI, r3
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	623b      	str	r3, [r7, #32]
}
 8009916:	bf00      	nop
 8009918:	e7fe      	b.n	8009918 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800991a:	f001 fff5 	bl	800b908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800991e:	f3ef 8211 	mrs	r2, BASEPRI
 8009922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	61fa      	str	r2, [r7, #28]
 8009934:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009936:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009938:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800993a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800993e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <xQueueGenericSendFromISR+0xbc>
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	2b02      	cmp	r3, #2
 800994a:	d12f      	bne.n	80099ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800994c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800994e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009962:	f000 f9b4 	bl	8009cce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009966:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800996e:	d112      	bne.n	8009996 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009974:	2b00      	cmp	r3, #0
 8009976:	d016      	beq.n	80099a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	3324      	adds	r3, #36	; 0x24
 800997c:	4618      	mov	r0, r3
 800997e:	f000 ffc5 	bl	800a90c <xTaskRemoveFromEventList>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d00e      	beq.n	80099a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	e007      	b.n	80099a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009996:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800999a:	3301      	adds	r3, #1
 800999c:	b2db      	uxtb	r3, r3
 800999e:	b25a      	sxtb	r2, r3
 80099a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099a6:	2301      	movs	r3, #1
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80099aa:	e001      	b.n	80099b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099ac:	2300      	movs	r3, #0
 80099ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3740      	adds	r7, #64	; 0x40
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
	...

080099c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	; 0x30
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80099d4:	2300      	movs	r3, #0
 80099d6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80099dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <xQueueReceive+0x30>
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	f383 8811 	msr	BASEPRI, r3
 80099ea:	f3bf 8f6f 	isb	sy
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	623b      	str	r3, [r7, #32]
}
 80099f4:	bf00      	nop
 80099f6:	e7fe      	b.n	80099f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <xQueueReceive+0x3e>
 80099fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <xQueueReceive+0x42>
 8009a06:	2301      	movs	r3, #1
 8009a08:	e000      	b.n	8009a0c <xQueueReceive+0x44>
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <xQueueReceive+0x5e>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	61fb      	str	r3, [r7, #28]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a26:	f001 f933 	bl	800ac90 <xTaskGetSchedulerState>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <xQueueReceive+0x6e>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <xQueueReceive+0x72>
 8009a36:	2301      	movs	r3, #1
 8009a38:	e000      	b.n	8009a3c <xQueueReceive+0x74>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d10a      	bne.n	8009a56 <xQueueReceive+0x8e>
	__asm volatile
 8009a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a44:	f383 8811 	msr	BASEPRI, r3
 8009a48:	f3bf 8f6f 	isb	sy
 8009a4c:	f3bf 8f4f 	dsb	sy
 8009a50:	61bb      	str	r3, [r7, #24]
}
 8009a52:	bf00      	nop
 8009a54:	e7fe      	b.n	8009a54 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a56:	f001 fe75 	bl	800b744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d01f      	beq.n	8009aa6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6a:	f000 f99a 	bl	8009da2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	1e5a      	subs	r2, r3, #1
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00f      	beq.n	8009a9e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a80:	3310      	adds	r3, #16
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 ff42 	bl	800a90c <xTaskRemoveFromEventList>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d007      	beq.n	8009a9e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a8e:	4b3d      	ldr	r3, [pc, #244]	; (8009b84 <xQueueReceive+0x1bc>)
 8009a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a9e:	f001 fe81 	bl	800b7a4 <vPortExitCritical>
				return pdPASS;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e069      	b.n	8009b7a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aac:	f001 fe7a 	bl	800b7a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e062      	b.n	8009b7a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009aba:	f107 0310 	add.w	r3, r7, #16
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 ff88 	bl	800a9d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ac8:	f001 fe6c 	bl	800b7a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009acc:	f000 fcf4 	bl	800a4b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ad0:	f001 fe38 	bl	800b744 <vPortEnterCritical>
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ada:	b25b      	sxtb	r3, r3
 8009adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ae0:	d103      	bne.n	8009aea <xQueueReceive+0x122>
 8009ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009af0:	b25b      	sxtb	r3, r3
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009af6:	d103      	bne.n	8009b00 <xQueueReceive+0x138>
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b00:	f001 fe50 	bl	800b7a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b04:	1d3a      	adds	r2, r7, #4
 8009b06:	f107 0310 	add.w	r3, r7, #16
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 ff77 	bl	800aa00 <xTaskCheckForTimeOut>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d123      	bne.n	8009b60 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1a:	f000 f9ba 	bl	8009e92 <prvIsQueueEmpty>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d017      	beq.n	8009b54 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	3324      	adds	r3, #36	; 0x24
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	4611      	mov	r1, r2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fe9d 	bl	800a86c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b34:	f000 f95b 	bl	8009dee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b38:	f000 fccc 	bl	800a4d4 <xTaskResumeAll>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d189      	bne.n	8009a56 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009b42:	4b10      	ldr	r3, [pc, #64]	; (8009b84 <xQueueReceive+0x1bc>)
 8009b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	e780      	b.n	8009a56 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b56:	f000 f94a 	bl	8009dee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b5a:	f000 fcbb 	bl	800a4d4 <xTaskResumeAll>
 8009b5e:	e77a      	b.n	8009a56 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b62:	f000 f944 	bl	8009dee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b66:	f000 fcb5 	bl	800a4d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b6c:	f000 f991 	bl	8009e92 <prvIsQueueEmpty>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f43f af6f 	beq.w	8009a56 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3730      	adds	r7, #48	; 0x30
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08e      	sub	sp, #56	; 0x38
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10a      	bne.n	8009bb4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	623b      	str	r3, [r7, #32]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <xQueueReceiveFromISR+0x3a>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <xQueueReceiveFromISR+0x3e>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <xQueueReceiveFromISR+0x40>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	61fb      	str	r3, [r7, #28]
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009be2:	f001 fe91 	bl	800b908 <vPortValidateInterruptPriority>
	__asm volatile
 8009be6:	f3ef 8211 	mrs	r2, BASEPRI
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	61ba      	str	r2, [r7, #24]
 8009bfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d02f      	beq.n	8009c6e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1c:	f000 f8c1 	bl	8009da2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	1e5a      	subs	r2, r3, #1
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c30:	d112      	bne.n	8009c58 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d016      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	3310      	adds	r3, #16
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fe64 	bl	800a90c <xTaskRemoveFromEventList>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	e007      	b.n	8009c68 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	b25a      	sxtb	r2, r3
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c6c:	e001      	b.n	8009c72 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f383 8811 	msr	BASEPRI, r3
}
 8009c7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3738      	adds	r7, #56	; 0x38
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10a      	bne.n	8009cb0 <vQueueDelete+0x28>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	60bb      	str	r3, [r7, #8]
}
 8009cac:	bf00      	nop
 8009cae:	e7fe      	b.n	8009cae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f947 	bl	8009f44 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f001 ff05 	bl	800bad0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b086      	sub	sp, #24
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	60b9      	str	r1, [r7, #8]
 8009cd8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10d      	bne.n	8009d08 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d14d      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 ffe7 	bl	800accc <xTaskPriorityDisinherit>
 8009cfe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2200      	movs	r2, #0
 8009d04:	609a      	str	r2, [r3, #8]
 8009d06:	e043      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d119      	bne.n	8009d42 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6858      	ldr	r0, [r3, #4]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d16:	461a      	mov	r2, r3
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	f002 f957 	bl	800bfcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	685a      	ldr	r2, [r3, #4]
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	441a      	add	r2, r3
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d32b      	bcc.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681a      	ldr	r2, [r3, #0]
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	605a      	str	r2, [r3, #4]
 8009d40:	e026      	b.n	8009d90 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68d8      	ldr	r0, [r3, #12]
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68b9      	ldr	r1, [r7, #8]
 8009d4e:	f002 f93d 	bl	800bfcc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d5a:	425b      	negs	r3, r3
 8009d5c:	441a      	add	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d207      	bcs.n	8009d7e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	425b      	negs	r3, r3
 8009d78:	441a      	add	r2, r3
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2b02      	cmp	r3, #2
 8009d82:	d105      	bne.n	8009d90 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d002      	beq.n	8009d90 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d98:	697b      	ldr	r3, [r7, #20]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3718      	adds	r7, #24
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
 8009daa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d018      	beq.n	8009de6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbc:	441a      	add	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	689b      	ldr	r3, [r3, #8]
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d303      	bcc.n	8009dd6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681a      	ldr	r2, [r3, #0]
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	461a      	mov	r2, r3
 8009de0:	6838      	ldr	r0, [r7, #0]
 8009de2:	f002 f8f3 	bl	800bfcc <memcpy>
	}
}
 8009de6:	bf00      	nop
 8009de8:	3708      	adds	r7, #8
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009df6:	f001 fca5 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e00:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e02:	e011      	b.n	8009e28 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d012      	beq.n	8009e32 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3324      	adds	r3, #36	; 0x24
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 fd7b 	bl	800a90c <xTaskRemoveFromEventList>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e1c:	f000 fe52 	bl	800aac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
 8009e22:	3b01      	subs	r3, #1
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	dce9      	bgt.n	8009e04 <prvUnlockQueue+0x16>
 8009e30:	e000      	b.n	8009e34 <prvUnlockQueue+0x46>
					break;
 8009e32:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	22ff      	movs	r2, #255	; 0xff
 8009e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e3c:	f001 fcb2 	bl	800b7a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e40:	f001 fc80 	bl	800b744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e4c:	e011      	b.n	8009e72 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d012      	beq.n	8009e7c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3310      	adds	r3, #16
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 fd56 	bl	800a90c <xTaskRemoveFromEventList>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e66:	f000 fe2d 	bl	800aac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e6a:	7bbb      	ldrb	r3, [r7, #14]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dce9      	bgt.n	8009e4e <prvUnlockQueue+0x60>
 8009e7a:	e000      	b.n	8009e7e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e7c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	22ff      	movs	r2, #255	; 0xff
 8009e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e86:	f001 fc8d 	bl	800b7a4 <vPortExitCritical>
}
 8009e8a:	bf00      	nop
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}

08009e92 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b084      	sub	sp, #16
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e9a:	f001 fc53 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d102      	bne.n	8009eac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	60fb      	str	r3, [r7, #12]
 8009eaa:	e001      	b.n	8009eb0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009eb0:	f001 fc78 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ec6:	f001 fc3d 	bl	800b744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d102      	bne.n	8009edc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e001      	b.n	8009ee0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 fc60 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009efa:	2300      	movs	r3, #0
 8009efc:	60fb      	str	r3, [r7, #12]
 8009efe:	e014      	b.n	8009f2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f00:	4a0f      	ldr	r2, [pc, #60]	; (8009f40 <vQueueAddToRegistry+0x50>)
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10b      	bne.n	8009f24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f0c:	490c      	ldr	r1, [pc, #48]	; (8009f40 <vQueueAddToRegistry+0x50>)
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f16:	4a0a      	ldr	r2, [pc, #40]	; (8009f40 <vQueueAddToRegistry+0x50>)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f22:	e006      	b.n	8009f32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	3301      	adds	r3, #1
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d9e7      	bls.n	8009f00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f30:	bf00      	nop
 8009f32:	bf00      	nop
 8009f34:	3714      	adds	r7, #20
 8009f36:	46bd      	mov	sp, r7
 8009f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	2000635c 	.word	0x2000635c

08009f44 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f44:	b480      	push	{r7}
 8009f46:	b085      	sub	sp, #20
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
 8009f50:	e016      	b.n	8009f80 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f52:	4a10      	ldr	r2, [pc, #64]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	00db      	lsls	r3, r3, #3
 8009f58:	4413      	add	r3, r2
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d10b      	bne.n	8009f7a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f62:	4a0c      	ldr	r2, [pc, #48]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2100      	movs	r1, #0
 8009f68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f6c:	4a09      	ldr	r2, [pc, #36]	; (8009f94 <vQueueUnregisterQueue+0x50>)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	4413      	add	r3, r2
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]
				break;
 8009f78:	e006      	b.n	8009f88 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b07      	cmp	r3, #7
 8009f84:	d9e5      	bls.n	8009f52 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	3714      	adds	r7, #20
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	2000635c 	.word	0x2000635c

08009f98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009fa8:	f001 fbcc 	bl	800b744 <vPortEnterCritical>
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fb2:	b25b      	sxtb	r3, r3
 8009fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb8:	d103      	bne.n	8009fc2 <vQueueWaitForMessageRestricted+0x2a>
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fc8:	b25b      	sxtb	r3, r3
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fce:	d103      	bne.n	8009fd8 <vQueueWaitForMessageRestricted+0x40>
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fd8:	f001 fbe4 	bl	800b7a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d106      	bne.n	8009ff2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	3324      	adds	r3, #36	; 0x24
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	68b9      	ldr	r1, [r7, #8]
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 fc61 	bl	800a8b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009ff2:	6978      	ldr	r0, [r7, #20]
 8009ff4:	f7ff fefb 	bl	8009dee <prvUnlockQueue>
	}
 8009ff8:	bf00      	nop
 8009ffa:	3718      	adds	r7, #24
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}

0800a000 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a000:	b580      	push	{r7, lr}
 800a002:	b08e      	sub	sp, #56	; 0x38
 800a004:	af04      	add	r7, sp, #16
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	60b9      	str	r1, [r7, #8]
 800a00a:	607a      	str	r2, [r7, #4]
 800a00c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a018:	f383 8811 	msr	BASEPRI, r3
 800a01c:	f3bf 8f6f 	isb	sy
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	623b      	str	r3, [r7, #32]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d10a      	bne.n	800a046 <xTaskCreateStatic+0x46>
	__asm volatile
 800a030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a034:	f383 8811 	msr	BASEPRI, r3
 800a038:	f3bf 8f6f 	isb	sy
 800a03c:	f3bf 8f4f 	dsb	sy
 800a040:	61fb      	str	r3, [r7, #28]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a046:	23bc      	movs	r3, #188	; 0xbc
 800a048:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	2bbc      	cmp	r3, #188	; 0xbc
 800a04e:	d00a      	beq.n	800a066 <xTaskCreateStatic+0x66>
	__asm volatile
 800a050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a054:	f383 8811 	msr	BASEPRI, r3
 800a058:	f3bf 8f6f 	isb	sy
 800a05c:	f3bf 8f4f 	dsb	sy
 800a060:	61bb      	str	r3, [r7, #24]
}
 800a062:	bf00      	nop
 800a064:	e7fe      	b.n	800a064 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a066:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01e      	beq.n	800a0ac <xTaskCreateStatic+0xac>
 800a06e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a070:	2b00      	cmp	r3, #0
 800a072:	d01b      	beq.n	800a0ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a07c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	2202      	movs	r2, #2
 800a082:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a086:	2300      	movs	r3, #0
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	f107 0314 	add.w	r3, r7, #20
 800a092:	9301      	str	r3, [sp, #4]
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	68b9      	ldr	r1, [r7, #8]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 f850 	bl	800a144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0a6:	f000 f8f3 	bl	800a290 <prvAddNewTaskToReadyList>
 800a0aa:	e001      	b.n	800a0b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0b0:	697b      	ldr	r3, [r7, #20]
	}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3728      	adds	r7, #40	; 0x28
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b08c      	sub	sp, #48	; 0x30
 800a0be:	af04      	add	r7, sp, #16
 800a0c0:	60f8      	str	r0, [r7, #12]
 800a0c2:	60b9      	str	r1, [r7, #8]
 800a0c4:	603b      	str	r3, [r7, #0]
 800a0c6:	4613      	mov	r3, r2
 800a0c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a0ca:	88fb      	ldrh	r3, [r7, #6]
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f001 fc5a 	bl	800b988 <pvPortMalloc>
 800a0d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d00e      	beq.n	800a0fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a0dc:	20bc      	movs	r0, #188	; 0xbc
 800a0de:	f001 fc53 	bl	800b988 <pvPortMalloc>
 800a0e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d003      	beq.n	800a0f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	697a      	ldr	r2, [r7, #20]
 800a0ee:	631a      	str	r2, [r3, #48]	; 0x30
 800a0f0:	e005      	b.n	800a0fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f001 fcec 	bl	800bad0 <vPortFree>
 800a0f8:	e001      	b.n	800a0fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d017      	beq.n	800a134 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a10c:	88fa      	ldrh	r2, [r7, #6]
 800a10e:	2300      	movs	r3, #0
 800a110:	9303      	str	r3, [sp, #12]
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	9302      	str	r3, [sp, #8]
 800a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68b9      	ldr	r1, [r7, #8]
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 f80e 	bl	800a144 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a128:	69f8      	ldr	r0, [r7, #28]
 800a12a:	f000 f8b1 	bl	800a290 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a12e:	2301      	movs	r3, #1
 800a130:	61bb      	str	r3, [r7, #24]
 800a132:	e002      	b.n	800a13a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a138:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a13a:	69bb      	ldr	r3, [r7, #24]
	}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b088      	sub	sp, #32
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	461a      	mov	r2, r3
 800a15c:	21a5      	movs	r1, #165	; 0xa5
 800a15e:	f001 ff43 	bl	800bfe8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a164:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a16c:	3b01      	subs	r3, #1
 800a16e:	009b      	lsls	r3, r3, #2
 800a170:	4413      	add	r3, r2
 800a172:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	f023 0307 	bic.w	r3, r3, #7
 800a17a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	f003 0307 	and.w	r3, r3, #7
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00a      	beq.n	800a19c <prvInitialiseNewTask+0x58>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	617b      	str	r3, [r7, #20]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d01f      	beq.n	800a1e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	61fb      	str	r3, [r7, #28]
 800a1a6:	e012      	b.n	800a1ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	7819      	ldrb	r1, [r3, #0]
 800a1b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	3334      	adds	r3, #52	; 0x34
 800a1b8:	460a      	mov	r2, r1
 800a1ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d006      	beq.n	800a1d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	61fb      	str	r3, [r7, #28]
 800a1ce:	69fb      	ldr	r3, [r7, #28]
 800a1d0:	2b0f      	cmp	r3, #15
 800a1d2:	d9e9      	bls.n	800a1a8 <prvInitialiseNewTask+0x64>
 800a1d4:	e000      	b.n	800a1d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800a1d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1e0:	e003      	b.n	800a1ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ec:	2b37      	cmp	r3, #55	; 0x37
 800a1ee:	d901      	bls.n	800a1f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a1f0:	2337      	movs	r3, #55	; 0x37
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a202:	2200      	movs	r2, #0
 800a204:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	3304      	adds	r3, #4
 800a20a:	4618      	mov	r0, r3
 800a20c:	f7ff f806 	bl	800921c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a212:	3318      	adds	r3, #24
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff f801 	bl	800921c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a21c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a22e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	2200      	movs	r2, #0
 800a234:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	3354      	adds	r3, #84	; 0x54
 800a244:	2260      	movs	r2, #96	; 0x60
 800a246:	2100      	movs	r1, #0
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 fecd 	bl	800bfe8 <memset>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a250:	4a0c      	ldr	r2, [pc, #48]	; (800a284 <prvInitialiseNewTask+0x140>)
 800a252:	659a      	str	r2, [r3, #88]	; 0x58
 800a254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a256:	4a0c      	ldr	r2, [pc, #48]	; (800a288 <prvInitialiseNewTask+0x144>)
 800a258:	65da      	str	r2, [r3, #92]	; 0x5c
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	4a0b      	ldr	r2, [pc, #44]	; (800a28c <prvInitialiseNewTask+0x148>)
 800a25e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	68f9      	ldr	r1, [r7, #12]
 800a264:	69b8      	ldr	r0, [r7, #24]
 800a266:	f001 f941 	bl	800b4ec <pxPortInitialiseStack>
 800a26a:	4602      	mov	r2, r0
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a272:	2b00      	cmp	r3, #0
 800a274:	d002      	beq.n	800a27c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a27a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a27c:	bf00      	nop
 800a27e:	3720      	adds	r7, #32
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}
 800a284:	0800f29c 	.word	0x0800f29c
 800a288:	0800f2bc 	.word	0x0800f2bc
 800a28c:	0800f27c 	.word	0x0800f27c

0800a290 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a298:	f001 fa54 	bl	800b744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a29c:	4b2d      	ldr	r3, [pc, #180]	; (800a354 <prvAddNewTaskToReadyList+0xc4>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	4a2c      	ldr	r2, [pc, #176]	; (800a354 <prvAddNewTaskToReadyList+0xc4>)
 800a2a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a2a6:	4b2c      	ldr	r3, [pc, #176]	; (800a358 <prvAddNewTaskToReadyList+0xc8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d109      	bne.n	800a2c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a2ae:	4a2a      	ldr	r2, [pc, #168]	; (800a358 <prvAddNewTaskToReadyList+0xc8>)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a2b4:	4b27      	ldr	r3, [pc, #156]	; (800a354 <prvAddNewTaskToReadyList+0xc4>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d110      	bne.n	800a2de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a2bc:	f000 fc26 	bl	800ab0c <prvInitialiseTaskLists>
 800a2c0:	e00d      	b.n	800a2de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a2c2:	4b26      	ldr	r3, [pc, #152]	; (800a35c <prvAddNewTaskToReadyList+0xcc>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d109      	bne.n	800a2de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a2ca:	4b23      	ldr	r3, [pc, #140]	; (800a358 <prvAddNewTaskToReadyList+0xc8>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d802      	bhi.n	800a2de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2d8:	4a1f      	ldr	r2, [pc, #124]	; (800a358 <prvAddNewTaskToReadyList+0xc8>)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2de:	4b20      	ldr	r3, [pc, #128]	; (800a360 <prvAddNewTaskToReadyList+0xd0>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	4a1e      	ldr	r2, [pc, #120]	; (800a360 <prvAddNewTaskToReadyList+0xd0>)
 800a2e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2e8:	4b1d      	ldr	r3, [pc, #116]	; (800a360 <prvAddNewTaskToReadyList+0xd0>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f4:	4b1b      	ldr	r3, [pc, #108]	; (800a364 <prvAddNewTaskToReadyList+0xd4>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d903      	bls.n	800a304 <prvAddNewTaskToReadyList+0x74>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a300:	4a18      	ldr	r2, [pc, #96]	; (800a364 <prvAddNewTaskToReadyList+0xd4>)
 800a302:	6013      	str	r3, [r2, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a308:	4613      	mov	r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	4413      	add	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4a15      	ldr	r2, [pc, #84]	; (800a368 <prvAddNewTaskToReadyList+0xd8>)
 800a312:	441a      	add	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f7fe ff8b 	bl	8009236 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a320:	f001 fa40 	bl	800b7a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a324:	4b0d      	ldr	r3, [pc, #52]	; (800a35c <prvAddNewTaskToReadyList+0xcc>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00e      	beq.n	800a34a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a32c:	4b0a      	ldr	r3, [pc, #40]	; (800a358 <prvAddNewTaskToReadyList+0xc8>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a336:	429a      	cmp	r2, r3
 800a338:	d207      	bcs.n	800a34a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a33a:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <prvAddNewTaskToReadyList+0xdc>)
 800a33c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a34a:	bf00      	nop
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	20006870 	.word	0x20006870
 800a358:	2000639c 	.word	0x2000639c
 800a35c:	2000687c 	.word	0x2000687c
 800a360:	2000688c 	.word	0x2000688c
 800a364:	20006878 	.word	0x20006878
 800a368:	200063a0 	.word	0x200063a0
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a378:	2300      	movs	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d017      	beq.n	800a3b2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a382:	4b13      	ldr	r3, [pc, #76]	; (800a3d0 <vTaskDelay+0x60>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <vTaskDelay+0x30>
	__asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	60bb      	str	r3, [r7, #8]
}
 800a39c:	bf00      	nop
 800a39e:	e7fe      	b.n	800a39e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a3a0:	f000 f88a 	bl	800a4b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fcfe 	bl	800ada8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a3ac:	f000 f892 	bl	800a4d4 <xTaskResumeAll>
 800a3b0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d107      	bne.n	800a3c8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a3b8:	4b06      	ldr	r3, [pc, #24]	; (800a3d4 <vTaskDelay+0x64>)
 800a3ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3c8:	bf00      	nop
 800a3ca:	3710      	adds	r7, #16
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	20006898 	.word	0x20006898
 800a3d4:	e000ed04 	.word	0xe000ed04

0800a3d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b08a      	sub	sp, #40	; 0x28
 800a3dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3e6:	463a      	mov	r2, r7
 800a3e8:	1d39      	adds	r1, r7, #4
 800a3ea:	f107 0308 	add.w	r3, r7, #8
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f7fe fec0 	bl	8009174 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	9202      	str	r2, [sp, #8]
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	2300      	movs	r3, #0
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	2300      	movs	r3, #0
 800a404:	460a      	mov	r2, r1
 800a406:	4924      	ldr	r1, [pc, #144]	; (800a498 <vTaskStartScheduler+0xc0>)
 800a408:	4824      	ldr	r0, [pc, #144]	; (800a49c <vTaskStartScheduler+0xc4>)
 800a40a:	f7ff fdf9 	bl	800a000 <xTaskCreateStatic>
 800a40e:	4603      	mov	r3, r0
 800a410:	4a23      	ldr	r2, [pc, #140]	; (800a4a0 <vTaskStartScheduler+0xc8>)
 800a412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a414:	4b22      	ldr	r3, [pc, #136]	; (800a4a0 <vTaskStartScheduler+0xc8>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a41c:	2301      	movs	r3, #1
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	e001      	b.n	800a426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a422:	2300      	movs	r3, #0
 800a424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a426:	697b      	ldr	r3, [r7, #20]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d102      	bne.n	800a432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a42c:	f000 fd10 	bl	800ae50 <xTimerCreateTimerTask>
 800a430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d11b      	bne.n	800a470 <vTaskStartScheduler+0x98>
	__asm volatile
 800a438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43c:	f383 8811 	msr	BASEPRI, r3
 800a440:	f3bf 8f6f 	isb	sy
 800a444:	f3bf 8f4f 	dsb	sy
 800a448:	613b      	str	r3, [r7, #16]
}
 800a44a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a44c:	4b15      	ldr	r3, [pc, #84]	; (800a4a4 <vTaskStartScheduler+0xcc>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3354      	adds	r3, #84	; 0x54
 800a452:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <vTaskStartScheduler+0xd0>)
 800a454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a456:	4b15      	ldr	r3, [pc, #84]	; (800a4ac <vTaskStartScheduler+0xd4>)
 800a458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a45c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a45e:	4b14      	ldr	r3, [pc, #80]	; (800a4b0 <vTaskStartScheduler+0xd8>)
 800a460:	2201      	movs	r2, #1
 800a462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a464:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <vTaskStartScheduler+0xdc>)
 800a466:	2200      	movs	r2, #0
 800a468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a46a:	f001 f8c9 	bl	800b600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a46e:	e00e      	b.n	800a48e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a476:	d10a      	bne.n	800a48e <vTaskStartScheduler+0xb6>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60fb      	str	r3, [r7, #12]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <vTaskStartScheduler+0xb4>
}
 800a48e:	bf00      	nop
 800a490:	3718      	adds	r7, #24
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	0800d134 	.word	0x0800d134
 800a49c:	0800aadd 	.word	0x0800aadd
 800a4a0:	20006894 	.word	0x20006894
 800a4a4:	2000639c 	.word	0x2000639c
 800a4a8:	20000098 	.word	0x20000098
 800a4ac:	20006890 	.word	0x20006890
 800a4b0:	2000687c 	.word	0x2000687c
 800a4b4:	20006874 	.word	0x20006874

0800a4b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a4bc:	4b04      	ldr	r3, [pc, #16]	; (800a4d0 <vTaskSuspendAll+0x18>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	4a03      	ldr	r2, [pc, #12]	; (800a4d0 <vTaskSuspendAll+0x18>)
 800a4c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a4c6:	bf00      	nop
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr
 800a4d0:	20006898 	.word	0x20006898

0800a4d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4e2:	4b42      	ldr	r3, [pc, #264]	; (800a5ec <xTaskResumeAll+0x118>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	603b      	str	r3, [r7, #0]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a500:	f001 f920 	bl	800b744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a504:	4b39      	ldr	r3, [pc, #228]	; (800a5ec <xTaskResumeAll+0x118>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	3b01      	subs	r3, #1
 800a50a:	4a38      	ldr	r2, [pc, #224]	; (800a5ec <xTaskResumeAll+0x118>)
 800a50c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a50e:	4b37      	ldr	r3, [pc, #220]	; (800a5ec <xTaskResumeAll+0x118>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d162      	bne.n	800a5dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a516:	4b36      	ldr	r3, [pc, #216]	; (800a5f0 <xTaskResumeAll+0x11c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d05e      	beq.n	800a5dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a51e:	e02f      	b.n	800a580 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a520:	4b34      	ldr	r3, [pc, #208]	; (800a5f4 <xTaskResumeAll+0x120>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	3318      	adds	r3, #24
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7fe fedf 	bl	80092f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	3304      	adds	r3, #4
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe feda 	bl	80092f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4b2d      	ldr	r3, [pc, #180]	; (800a5f8 <xTaskResumeAll+0x124>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d903      	bls.n	800a550 <xTaskResumeAll+0x7c>
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	4a2a      	ldr	r2, [pc, #168]	; (800a5f8 <xTaskResumeAll+0x124>)
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4a27      	ldr	r2, [pc, #156]	; (800a5fc <xTaskResumeAll+0x128>)
 800a55e:	441a      	add	r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7fe fe65 	bl	8009236 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a570:	4b23      	ldr	r3, [pc, #140]	; (800a600 <xTaskResumeAll+0x12c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a576:	429a      	cmp	r2, r3
 800a578:	d302      	bcc.n	800a580 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a57a:	4b22      	ldr	r3, [pc, #136]	; (800a604 <xTaskResumeAll+0x130>)
 800a57c:	2201      	movs	r2, #1
 800a57e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a580:	4b1c      	ldr	r3, [pc, #112]	; (800a5f4 <xTaskResumeAll+0x120>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d1cb      	bne.n	800a520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a58e:	f000 fb5f 	bl	800ac50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a592:	4b1d      	ldr	r3, [pc, #116]	; (800a608 <xTaskResumeAll+0x134>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d010      	beq.n	800a5c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a59e:	f000 f847 	bl	800a630 <xTaskIncrementTick>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d002      	beq.n	800a5ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a5a8:	4b16      	ldr	r3, [pc, #88]	; (800a604 <xTaskResumeAll+0x130>)
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d1f1      	bne.n	800a59e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a5ba:	4b13      	ldr	r3, [pc, #76]	; (800a608 <xTaskResumeAll+0x134>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a5c0:	4b10      	ldr	r3, [pc, #64]	; (800a604 <xTaskResumeAll+0x130>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d009      	beq.n	800a5dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a5cc:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <xTaskResumeAll+0x138>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5dc:	f001 f8e2 	bl	800b7a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20006898 	.word	0x20006898
 800a5f0:	20006870 	.word	0x20006870
 800a5f4:	20006830 	.word	0x20006830
 800a5f8:	20006878 	.word	0x20006878
 800a5fc:	200063a0 	.word	0x200063a0
 800a600:	2000639c 	.word	0x2000639c
 800a604:	20006884 	.word	0x20006884
 800a608:	20006880 	.word	0x20006880
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <xTaskGetTickCount+0x1c>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a61c:	687b      	ldr	r3, [r7, #4]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	370c      	adds	r7, #12
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr
 800a62a:	bf00      	nop
 800a62c:	20006874 	.word	0x20006874

0800a630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a63a:	4b4f      	ldr	r3, [pc, #316]	; (800a778 <xTaskIncrementTick+0x148>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	f040 808f 	bne.w	800a762 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a644:	4b4d      	ldr	r3, [pc, #308]	; (800a77c <xTaskIncrementTick+0x14c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	3301      	adds	r3, #1
 800a64a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a64c:	4a4b      	ldr	r2, [pc, #300]	; (800a77c <xTaskIncrementTick+0x14c>)
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d120      	bne.n	800a69a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a658:	4b49      	ldr	r3, [pc, #292]	; (800a780 <xTaskIncrementTick+0x150>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00a      	beq.n	800a678 <xTaskIncrementTick+0x48>
	__asm volatile
 800a662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a666:	f383 8811 	msr	BASEPRI, r3
 800a66a:	f3bf 8f6f 	isb	sy
 800a66e:	f3bf 8f4f 	dsb	sy
 800a672:	603b      	str	r3, [r7, #0]
}
 800a674:	bf00      	nop
 800a676:	e7fe      	b.n	800a676 <xTaskIncrementTick+0x46>
 800a678:	4b41      	ldr	r3, [pc, #260]	; (800a780 <xTaskIncrementTick+0x150>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	4b41      	ldr	r3, [pc, #260]	; (800a784 <xTaskIncrementTick+0x154>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a3f      	ldr	r2, [pc, #252]	; (800a780 <xTaskIncrementTick+0x150>)
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	4a3f      	ldr	r2, [pc, #252]	; (800a784 <xTaskIncrementTick+0x154>)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	4b3e      	ldr	r3, [pc, #248]	; (800a788 <xTaskIncrementTick+0x158>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	3301      	adds	r3, #1
 800a692:	4a3d      	ldr	r2, [pc, #244]	; (800a788 <xTaskIncrementTick+0x158>)
 800a694:	6013      	str	r3, [r2, #0]
 800a696:	f000 fadb 	bl	800ac50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a69a:	4b3c      	ldr	r3, [pc, #240]	; (800a78c <xTaskIncrementTick+0x15c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	693a      	ldr	r2, [r7, #16]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d349      	bcc.n	800a738 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6a4:	4b36      	ldr	r3, [pc, #216]	; (800a780 <xTaskIncrementTick+0x150>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d104      	bne.n	800a6b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6ae:	4b37      	ldr	r3, [pc, #220]	; (800a78c <xTaskIncrementTick+0x15c>)
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6b4:	601a      	str	r2, [r3, #0]
					break;
 800a6b6:	e03f      	b.n	800a738 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6b8:	4b31      	ldr	r3, [pc, #196]	; (800a780 <xTaskIncrementTick+0x150>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68db      	ldr	r3, [r3, #12]
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6c8:	693a      	ldr	r2, [r7, #16]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	d203      	bcs.n	800a6d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6d0:	4a2e      	ldr	r2, [pc, #184]	; (800a78c <xTaskIncrementTick+0x15c>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a6d6:	e02f      	b.n	800a738 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fe07 	bl	80092f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d004      	beq.n	800a6f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	3318      	adds	r3, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fe fdfe 	bl	80092f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6f8:	4b25      	ldr	r3, [pc, #148]	; (800a790 <xTaskIncrementTick+0x160>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d903      	bls.n	800a708 <xTaskIncrementTick+0xd8>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	4a22      	ldr	r2, [pc, #136]	; (800a790 <xTaskIncrementTick+0x160>)
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	4a1f      	ldr	r2, [pc, #124]	; (800a794 <xTaskIncrementTick+0x164>)
 800a716:	441a      	add	r2, r3
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	3304      	adds	r3, #4
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7fe fd89 	bl	8009236 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a728:	4b1b      	ldr	r3, [pc, #108]	; (800a798 <xTaskIncrementTick+0x168>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72e:	429a      	cmp	r2, r3
 800a730:	d3b8      	bcc.n	800a6a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a736:	e7b5      	b.n	800a6a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a738:	4b17      	ldr	r3, [pc, #92]	; (800a798 <xTaskIncrementTick+0x168>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a73e:	4915      	ldr	r1, [pc, #84]	; (800a794 <xTaskIncrementTick+0x164>)
 800a740:	4613      	mov	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	4413      	add	r3, r2
 800a746:	009b      	lsls	r3, r3, #2
 800a748:	440b      	add	r3, r1
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d901      	bls.n	800a754 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a750:	2301      	movs	r3, #1
 800a752:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a754:	4b11      	ldr	r3, [pc, #68]	; (800a79c <xTaskIncrementTick+0x16c>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d007      	beq.n	800a76c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a75c:	2301      	movs	r3, #1
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e004      	b.n	800a76c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <xTaskIncrementTick+0x170>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3301      	adds	r3, #1
 800a768:	4a0d      	ldr	r2, [pc, #52]	; (800a7a0 <xTaskIncrementTick+0x170>)
 800a76a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a76c:	697b      	ldr	r3, [r7, #20]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	20006898 	.word	0x20006898
 800a77c:	20006874 	.word	0x20006874
 800a780:	20006828 	.word	0x20006828
 800a784:	2000682c 	.word	0x2000682c
 800a788:	20006888 	.word	0x20006888
 800a78c:	20006890 	.word	0x20006890
 800a790:	20006878 	.word	0x20006878
 800a794:	200063a0 	.word	0x200063a0
 800a798:	2000639c 	.word	0x2000639c
 800a79c:	20006884 	.word	0x20006884
 800a7a0:	20006880 	.word	0x20006880

0800a7a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b085      	sub	sp, #20
 800a7a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a7aa:	4b2a      	ldr	r3, [pc, #168]	; (800a854 <vTaskSwitchContext+0xb0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7b2:	4b29      	ldr	r3, [pc, #164]	; (800a858 <vTaskSwitchContext+0xb4>)
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7b8:	e046      	b.n	800a848 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a7ba:	4b27      	ldr	r3, [pc, #156]	; (800a858 <vTaskSwitchContext+0xb4>)
 800a7bc:	2200      	movs	r2, #0
 800a7be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7c0:	4b26      	ldr	r3, [pc, #152]	; (800a85c <vTaskSwitchContext+0xb8>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	e010      	b.n	800a7ea <vTaskSwitchContext+0x46>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d10a      	bne.n	800a7e4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	607b      	str	r3, [r7, #4]
}
 800a7e0:	bf00      	nop
 800a7e2:	e7fe      	b.n	800a7e2 <vTaskSwitchContext+0x3e>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	3b01      	subs	r3, #1
 800a7e8:	60fb      	str	r3, [r7, #12]
 800a7ea:	491d      	ldr	r1, [pc, #116]	; (800a860 <vTaskSwitchContext+0xbc>)
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	440b      	add	r3, r1
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d0e4      	beq.n	800a7c8 <vTaskSwitchContext+0x24>
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4613      	mov	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	4413      	add	r3, r2
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4a15      	ldr	r2, [pc, #84]	; (800a860 <vTaskSwitchContext+0xbc>)
 800a80a:	4413      	add	r3, r2
 800a80c:	60bb      	str	r3, [r7, #8]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	605a      	str	r2, [r3, #4]
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	3308      	adds	r3, #8
 800a820:	429a      	cmp	r2, r3
 800a822:	d104      	bne.n	800a82e <vTaskSwitchContext+0x8a>
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	605a      	str	r2, [r3, #4]
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4a0b      	ldr	r2, [pc, #44]	; (800a864 <vTaskSwitchContext+0xc0>)
 800a836:	6013      	str	r3, [r2, #0]
 800a838:	4a08      	ldr	r2, [pc, #32]	; (800a85c <vTaskSwitchContext+0xb8>)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a83e:	4b09      	ldr	r3, [pc, #36]	; (800a864 <vTaskSwitchContext+0xc0>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	3354      	adds	r3, #84	; 0x54
 800a844:	4a08      	ldr	r2, [pc, #32]	; (800a868 <vTaskSwitchContext+0xc4>)
 800a846:	6013      	str	r3, [r2, #0]
}
 800a848:	bf00      	nop
 800a84a:	3714      	adds	r7, #20
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	20006898 	.word	0x20006898
 800a858:	20006884 	.word	0x20006884
 800a85c:	20006878 	.word	0x20006878
 800a860:	200063a0 	.word	0x200063a0
 800a864:	2000639c 	.word	0x2000639c
 800a868:	20000098 	.word	0x20000098

0800a86c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d10a      	bne.n	800a892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a880:	f383 8811 	msr	BASEPRI, r3
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	f3bf 8f4f 	dsb	sy
 800a88c:	60fb      	str	r3, [r7, #12]
}
 800a88e:	bf00      	nop
 800a890:	e7fe      	b.n	800a890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a892:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <vTaskPlaceOnEventList+0x44>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	3318      	adds	r3, #24
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7fe fcef 	bl	800927e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	6838      	ldr	r0, [r7, #0]
 800a8a4:	f000 fa80 	bl	800ada8 <prvAddCurrentTaskToDelayedList>
}
 800a8a8:	bf00      	nop
 800a8aa:	3710      	adds	r7, #16
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	2000639c 	.word	0x2000639c

0800a8b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b086      	sub	sp, #24
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d10a      	bne.n	800a8dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ca:	f383 8811 	msr	BASEPRI, r3
 800a8ce:	f3bf 8f6f 	isb	sy
 800a8d2:	f3bf 8f4f 	dsb	sy
 800a8d6:	617b      	str	r3, [r7, #20]
}
 800a8d8:	bf00      	nop
 800a8da:	e7fe      	b.n	800a8da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8dc:	4b0a      	ldr	r3, [pc, #40]	; (800a908 <vTaskPlaceOnEventListRestricted+0x54>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3318      	adds	r3, #24
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f7fe fca6 	bl	8009236 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a8f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8f6:	6879      	ldr	r1, [r7, #4]
 800a8f8:	68b8      	ldr	r0, [r7, #8]
 800a8fa:	f000 fa55 	bl	800ada8 <prvAddCurrentTaskToDelayedList>
	}
 800a8fe:	bf00      	nop
 800a900:	3718      	adds	r7, #24
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	2000639c 	.word	0x2000639c

0800a90c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a926:	f383 8811 	msr	BASEPRI, r3
 800a92a:	f3bf 8f6f 	isb	sy
 800a92e:	f3bf 8f4f 	dsb	sy
 800a932:	60fb      	str	r3, [r7, #12]
}
 800a934:	bf00      	nop
 800a936:	e7fe      	b.n	800a936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	3318      	adds	r3, #24
 800a93c:	4618      	mov	r0, r3
 800a93e:	f7fe fcd7 	bl	80092f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a942:	4b1e      	ldr	r3, [pc, #120]	; (800a9bc <xTaskRemoveFromEventList+0xb0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d11d      	bne.n	800a986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	3304      	adds	r3, #4
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe fcce 	bl	80092f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a958:	4b19      	ldr	r3, [pc, #100]	; (800a9c0 <xTaskRemoveFromEventList+0xb4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d903      	bls.n	800a968 <xTaskRemoveFromEventList+0x5c>
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a964:	4a16      	ldr	r2, [pc, #88]	; (800a9c0 <xTaskRemoveFromEventList+0xb4>)
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a96c:	4613      	mov	r3, r2
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <xTaskRemoveFromEventList+0xb8>)
 800a976:	441a      	add	r2, r3
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	3304      	adds	r3, #4
 800a97c:	4619      	mov	r1, r3
 800a97e:	4610      	mov	r0, r2
 800a980:	f7fe fc59 	bl	8009236 <vListInsertEnd>
 800a984:	e005      	b.n	800a992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	3318      	adds	r3, #24
 800a98a:	4619      	mov	r1, r3
 800a98c:	480e      	ldr	r0, [pc, #56]	; (800a9c8 <xTaskRemoveFromEventList+0xbc>)
 800a98e:	f7fe fc52 	bl	8009236 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a996:	4b0d      	ldr	r3, [pc, #52]	; (800a9cc <xTaskRemoveFromEventList+0xc0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d905      	bls.n	800a9ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a9a4:	4b0a      	ldr	r3, [pc, #40]	; (800a9d0 <xTaskRemoveFromEventList+0xc4>)
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	e001      	b.n	800a9b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a9b0:	697b      	ldr	r3, [r7, #20]
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3718      	adds	r7, #24
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20006898 	.word	0x20006898
 800a9c0:	20006878 	.word	0x20006878
 800a9c4:	200063a0 	.word	0x200063a0
 800a9c8:	20006830 	.word	0x20006830
 800a9cc:	2000639c 	.word	0x2000639c
 800a9d0:	20006884 	.word	0x20006884

0800a9d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9dc:	4b06      	ldr	r3, [pc, #24]	; (800a9f8 <vTaskInternalSetTimeOutState+0x24>)
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9e4:	4b05      	ldr	r3, [pc, #20]	; (800a9fc <vTaskInternalSetTimeOutState+0x28>)
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	605a      	str	r2, [r3, #4]
}
 800a9ec:	bf00      	nop
 800a9ee:	370c      	adds	r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr
 800a9f8:	20006888 	.word	0x20006888
 800a9fc:	20006874 	.word	0x20006874

0800aa00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b088      	sub	sp, #32
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	613b      	str	r3, [r7, #16]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d10a      	bne.n	800aa42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aa2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa30:	f383 8811 	msr	BASEPRI, r3
 800aa34:	f3bf 8f6f 	isb	sy
 800aa38:	f3bf 8f4f 	dsb	sy
 800aa3c:	60fb      	str	r3, [r7, #12]
}
 800aa3e:	bf00      	nop
 800aa40:	e7fe      	b.n	800aa40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aa42:	f000 fe7f 	bl	800b744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa46:	4b1d      	ldr	r3, [pc, #116]	; (800aabc <xTaskCheckForTimeOut+0xbc>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5e:	d102      	bne.n	800aa66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa60:	2300      	movs	r3, #0
 800aa62:	61fb      	str	r3, [r7, #28]
 800aa64:	e023      	b.n	800aaae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	4b15      	ldr	r3, [pc, #84]	; (800aac0 <xTaskCheckForTimeOut+0xc0>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d007      	beq.n	800aa82 <xTaskCheckForTimeOut+0x82>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d302      	bcc.n	800aa82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	61fb      	str	r3, [r7, #28]
 800aa80:	e015      	b.n	800aaae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	697a      	ldr	r2, [r7, #20]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d20b      	bcs.n	800aaa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f7ff ff9b 	bl	800a9d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	61fb      	str	r3, [r7, #28]
 800aaa2:	e004      	b.n	800aaae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aaae:	f000 fe79 	bl	800b7a4 <vPortExitCritical>

	return xReturn;
 800aab2:	69fb      	ldr	r3, [r7, #28]
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3720      	adds	r7, #32
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	20006874 	.word	0x20006874
 800aac0:	20006888 	.word	0x20006888

0800aac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aac4:	b480      	push	{r7}
 800aac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aac8:	4b03      	ldr	r3, [pc, #12]	; (800aad8 <vTaskMissedYield+0x14>)
 800aaca:	2201      	movs	r2, #1
 800aacc:	601a      	str	r2, [r3, #0]
}
 800aace:	bf00      	nop
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr
 800aad8:	20006884 	.word	0x20006884

0800aadc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aae4:	f000 f852 	bl	800ab8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aae8:	4b06      	ldr	r3, [pc, #24]	; (800ab04 <prvIdleTask+0x28>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d9f9      	bls.n	800aae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aaf0:	4b05      	ldr	r3, [pc, #20]	; (800ab08 <prvIdleTask+0x2c>)
 800aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaf6:	601a      	str	r2, [r3, #0]
 800aaf8:	f3bf 8f4f 	dsb	sy
 800aafc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ab00:	e7f0      	b.n	800aae4 <prvIdleTask+0x8>
 800ab02:	bf00      	nop
 800ab04:	200063a0 	.word	0x200063a0
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	e00c      	b.n	800ab32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4a12      	ldr	r2, [pc, #72]	; (800ab6c <prvInitialiseTaskLists+0x60>)
 800ab24:	4413      	add	r3, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fe fb58 	bl	80091dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	3301      	adds	r3, #1
 800ab30:	607b      	str	r3, [r7, #4]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b37      	cmp	r3, #55	; 0x37
 800ab36:	d9ef      	bls.n	800ab18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab38:	480d      	ldr	r0, [pc, #52]	; (800ab70 <prvInitialiseTaskLists+0x64>)
 800ab3a:	f7fe fb4f 	bl	80091dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab3e:	480d      	ldr	r0, [pc, #52]	; (800ab74 <prvInitialiseTaskLists+0x68>)
 800ab40:	f7fe fb4c 	bl	80091dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab44:	480c      	ldr	r0, [pc, #48]	; (800ab78 <prvInitialiseTaskLists+0x6c>)
 800ab46:	f7fe fb49 	bl	80091dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab4a:	480c      	ldr	r0, [pc, #48]	; (800ab7c <prvInitialiseTaskLists+0x70>)
 800ab4c:	f7fe fb46 	bl	80091dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab50:	480b      	ldr	r0, [pc, #44]	; (800ab80 <prvInitialiseTaskLists+0x74>)
 800ab52:	f7fe fb43 	bl	80091dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab56:	4b0b      	ldr	r3, [pc, #44]	; (800ab84 <prvInitialiseTaskLists+0x78>)
 800ab58:	4a05      	ldr	r2, [pc, #20]	; (800ab70 <prvInitialiseTaskLists+0x64>)
 800ab5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab5c:	4b0a      	ldr	r3, [pc, #40]	; (800ab88 <prvInitialiseTaskLists+0x7c>)
 800ab5e:	4a05      	ldr	r2, [pc, #20]	; (800ab74 <prvInitialiseTaskLists+0x68>)
 800ab60:	601a      	str	r2, [r3, #0]
}
 800ab62:	bf00      	nop
 800ab64:	3708      	adds	r7, #8
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	200063a0 	.word	0x200063a0
 800ab70:	20006800 	.word	0x20006800
 800ab74:	20006814 	.word	0x20006814
 800ab78:	20006830 	.word	0x20006830
 800ab7c:	20006844 	.word	0x20006844
 800ab80:	2000685c 	.word	0x2000685c
 800ab84:	20006828 	.word	0x20006828
 800ab88:	2000682c 	.word	0x2000682c

0800ab8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b082      	sub	sp, #8
 800ab90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab92:	e019      	b.n	800abc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab94:	f000 fdd6 	bl	800b744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab98:	4b10      	ldr	r3, [pc, #64]	; (800abdc <prvCheckTasksWaitingTermination+0x50>)
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe fba3 	bl	80092f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800abaa:	4b0d      	ldr	r3, [pc, #52]	; (800abe0 <prvCheckTasksWaitingTermination+0x54>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3b01      	subs	r3, #1
 800abb0:	4a0b      	ldr	r2, [pc, #44]	; (800abe0 <prvCheckTasksWaitingTermination+0x54>)
 800abb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800abb4:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <prvCheckTasksWaitingTermination+0x58>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	3b01      	subs	r3, #1
 800abba:	4a0a      	ldr	r2, [pc, #40]	; (800abe4 <prvCheckTasksWaitingTermination+0x58>)
 800abbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800abbe:	f000 fdf1 	bl	800b7a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f810 	bl	800abe8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abc8:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <prvCheckTasksWaitingTermination+0x58>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1e1      	bne.n	800ab94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	3708      	adds	r7, #8
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	20006844 	.word	0x20006844
 800abe0:	20006870 	.word	0x20006870
 800abe4:	20006858 	.word	0x20006858

0800abe8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b084      	sub	sp, #16
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	3354      	adds	r3, #84	; 0x54
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 fb03 	bl	800c200 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d108      	bne.n	800ac16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 ff61 	bl	800bad0 <vPortFree>
				vPortFree( pxTCB );
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 ff5e 	bl	800bad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ac14:	e018      	b.n	800ac48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac1c:	2b01      	cmp	r3, #1
 800ac1e:	d103      	bne.n	800ac28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 ff55 	bl	800bad0 <vPortFree>
	}
 800ac26:	e00f      	b.n	800ac48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ac2e:	2b02      	cmp	r3, #2
 800ac30:	d00a      	beq.n	800ac48 <prvDeleteTCB+0x60>
	__asm volatile
 800ac32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac36:	f383 8811 	msr	BASEPRI, r3
 800ac3a:	f3bf 8f6f 	isb	sy
 800ac3e:	f3bf 8f4f 	dsb	sy
 800ac42:	60fb      	str	r3, [r7, #12]
}
 800ac44:	bf00      	nop
 800ac46:	e7fe      	b.n	800ac46 <prvDeleteTCB+0x5e>
	}
 800ac48:	bf00      	nop
 800ac4a:	3710      	adds	r7, #16
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac56:	4b0c      	ldr	r3, [pc, #48]	; (800ac88 <prvResetNextTaskUnblockTime+0x38>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d104      	bne.n	800ac6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac60:	4b0a      	ldr	r3, [pc, #40]	; (800ac8c <prvResetNextTaskUnblockTime+0x3c>)
 800ac62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ac66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac68:	e008      	b.n	800ac7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac6a:	4b07      	ldr	r3, [pc, #28]	; (800ac88 <prvResetNextTaskUnblockTime+0x38>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	4a04      	ldr	r2, [pc, #16]	; (800ac8c <prvResetNextTaskUnblockTime+0x3c>)
 800ac7a:	6013      	str	r3, [r2, #0]
}
 800ac7c:	bf00      	nop
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr
 800ac88:	20006828 	.word	0x20006828
 800ac8c:	20006890 	.word	0x20006890

0800ac90 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac96:	4b0b      	ldr	r3, [pc, #44]	; (800acc4 <xTaskGetSchedulerState+0x34>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d102      	bne.n	800aca4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac9e:	2301      	movs	r3, #1
 800aca0:	607b      	str	r3, [r7, #4]
 800aca2:	e008      	b.n	800acb6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aca4:	4b08      	ldr	r3, [pc, #32]	; (800acc8 <xTaskGetSchedulerState+0x38>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d102      	bne.n	800acb2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800acac:	2302      	movs	r3, #2
 800acae:	607b      	str	r3, [r7, #4]
 800acb0:	e001      	b.n	800acb6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800acb2:	2300      	movs	r3, #0
 800acb4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800acb6:	687b      	ldr	r3, [r7, #4]
	}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr
 800acc4:	2000687c 	.word	0x2000687c
 800acc8:	20006898 	.word	0x20006898

0800accc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800accc:	b580      	push	{r7, lr}
 800acce:	b086      	sub	sp, #24
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800acd8:	2300      	movs	r3, #0
 800acda:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d056      	beq.n	800ad90 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ace2:	4b2e      	ldr	r3, [pc, #184]	; (800ad9c <xTaskPriorityDisinherit+0xd0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	429a      	cmp	r2, r3
 800acea:	d00a      	beq.n	800ad02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	60fb      	str	r3, [r7, #12]
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10a      	bne.n	800ad20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ad0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad0e:	f383 8811 	msr	BASEPRI, r3
 800ad12:	f3bf 8f6f 	isb	sy
 800ad16:	f3bf 8f4f 	dsb	sy
 800ad1a:	60bb      	str	r3, [r7, #8]
}
 800ad1c:	bf00      	nop
 800ad1e:	e7fe      	b.n	800ad1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad24:	1e5a      	subs	r2, r3, #1
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d02c      	beq.n	800ad90 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d128      	bne.n	800ad90 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3304      	adds	r3, #4
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fe fad4 	bl	80092f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad60:	4b0f      	ldr	r3, [pc, #60]	; (800ada0 <xTaskPriorityDisinherit+0xd4>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d903      	bls.n	800ad70 <xTaskPriorityDisinherit+0xa4>
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6c:	4a0c      	ldr	r2, [pc, #48]	; (800ada0 <xTaskPriorityDisinherit+0xd4>)
 800ad6e:	6013      	str	r3, [r2, #0]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad74:	4613      	mov	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4a09      	ldr	r2, [pc, #36]	; (800ada4 <xTaskPriorityDisinherit+0xd8>)
 800ad7e:	441a      	add	r2, r3
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	3304      	adds	r3, #4
 800ad84:	4619      	mov	r1, r3
 800ad86:	4610      	mov	r0, r2
 800ad88:	f7fe fa55 	bl	8009236 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad90:	697b      	ldr	r3, [r7, #20]
	}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	2000639c 	.word	0x2000639c
 800ada0:	20006878 	.word	0x20006878
 800ada4:	200063a0 	.word	0x200063a0

0800ada8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b084      	sub	sp, #16
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800adb2:	4b21      	ldr	r3, [pc, #132]	; (800ae38 <prvAddCurrentTaskToDelayedList+0x90>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adb8:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x94>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	3304      	adds	r3, #4
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7fe fa96 	bl	80092f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adca:	d10a      	bne.n	800ade2 <prvAddCurrentTaskToDelayedList+0x3a>
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800add2:	4b1a      	ldr	r3, [pc, #104]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x94>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3304      	adds	r3, #4
 800add8:	4619      	mov	r1, r3
 800adda:	4819      	ldr	r0, [pc, #100]	; (800ae40 <prvAddCurrentTaskToDelayedList+0x98>)
 800addc:	f7fe fa2b 	bl	8009236 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ade0:	e026      	b.n	800ae30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ade2:	68fa      	ldr	r2, [r7, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4413      	add	r3, r2
 800ade8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800adea:	4b14      	ldr	r3, [pc, #80]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x94>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adf2:	68ba      	ldr	r2, [r7, #8]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d209      	bcs.n	800ae0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <prvAddCurrentTaskToDelayedList+0x9c>)
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b0f      	ldr	r3, [pc, #60]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7fe fa39 	bl	800927e <vListInsert>
}
 800ae0c:	e010      	b.n	800ae30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae0e:	4b0e      	ldr	r3, [pc, #56]	; (800ae48 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ae10:	681a      	ldr	r2, [r3, #0]
 800ae12:	4b0a      	ldr	r3, [pc, #40]	; (800ae3c <prvAddCurrentTaskToDelayedList+0x94>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3304      	adds	r3, #4
 800ae18:	4619      	mov	r1, r3
 800ae1a:	4610      	mov	r0, r2
 800ae1c:	f7fe fa2f 	bl	800927e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d202      	bcs.n	800ae30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ae2a:	4a08      	ldr	r2, [pc, #32]	; (800ae4c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	6013      	str	r3, [r2, #0]
}
 800ae30:	bf00      	nop
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20006874 	.word	0x20006874
 800ae3c:	2000639c 	.word	0x2000639c
 800ae40:	2000685c 	.word	0x2000685c
 800ae44:	2000682c 	.word	0x2000682c
 800ae48:	20006828 	.word	0x20006828
 800ae4c:	20006890 	.word	0x20006890

0800ae50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b08a      	sub	sp, #40	; 0x28
 800ae54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae5a:	f000 fb07 	bl	800b46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae5e:	4b1c      	ldr	r3, [pc, #112]	; (800aed0 <xTimerCreateTimerTask+0x80>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d021      	beq.n	800aeaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae6e:	1d3a      	adds	r2, r7, #4
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	f107 030c 	add.w	r3, r7, #12
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe f995 	bl	80091a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	68fa      	ldr	r2, [r7, #12]
 800ae84:	9202      	str	r2, [sp, #8]
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	2302      	movs	r3, #2
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	460a      	mov	r2, r1
 800ae90:	4910      	ldr	r1, [pc, #64]	; (800aed4 <xTimerCreateTimerTask+0x84>)
 800ae92:	4811      	ldr	r0, [pc, #68]	; (800aed8 <xTimerCreateTimerTask+0x88>)
 800ae94:	f7ff f8b4 	bl	800a000 <xTaskCreateStatic>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4a10      	ldr	r2, [pc, #64]	; (800aedc <xTimerCreateTimerTask+0x8c>)
 800ae9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae9e:	4b0f      	ldr	r3, [pc, #60]	; (800aedc <xTimerCreateTimerTask+0x8c>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aea6:	2301      	movs	r3, #1
 800aea8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10a      	bne.n	800aec6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	613b      	str	r3, [r7, #16]
}
 800aec2:	bf00      	nop
 800aec4:	e7fe      	b.n	800aec4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aec6:	697b      	ldr	r3, [r7, #20]
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3718      	adds	r7, #24
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	200068cc 	.word	0x200068cc
 800aed4:	0800d13c 	.word	0x0800d13c
 800aed8:	0800b015 	.word	0x0800b015
 800aedc:	200068d0 	.word	0x200068d0

0800aee0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08a      	sub	sp, #40	; 0x28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeee:	2300      	movs	r3, #0
 800aef0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d10a      	bne.n	800af0e <xTimerGenericCommand+0x2e>
	__asm volatile
 800aef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefc:	f383 8811 	msr	BASEPRI, r3
 800af00:	f3bf 8f6f 	isb	sy
 800af04:	f3bf 8f4f 	dsb	sy
 800af08:	623b      	str	r3, [r7, #32]
}
 800af0a:	bf00      	nop
 800af0c:	e7fe      	b.n	800af0c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800af0e:	4b1a      	ldr	r3, [pc, #104]	; (800af78 <xTimerGenericCommand+0x98>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d02a      	beq.n	800af6c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2b05      	cmp	r3, #5
 800af26:	dc18      	bgt.n	800af5a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800af28:	f7ff feb2 	bl	800ac90 <xTaskGetSchedulerState>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d109      	bne.n	800af46 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800af32:	4b11      	ldr	r3, [pc, #68]	; (800af78 <xTimerGenericCommand+0x98>)
 800af34:	6818      	ldr	r0, [r3, #0]
 800af36:	f107 0110 	add.w	r1, r7, #16
 800af3a:	2300      	movs	r3, #0
 800af3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af3e:	f7fe fba9 	bl	8009694 <xQueueGenericSend>
 800af42:	6278      	str	r0, [r7, #36]	; 0x24
 800af44:	e012      	b.n	800af6c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af46:	4b0c      	ldr	r3, [pc, #48]	; (800af78 <xTimerGenericCommand+0x98>)
 800af48:	6818      	ldr	r0, [r3, #0]
 800af4a:	f107 0110 	add.w	r1, r7, #16
 800af4e:	2300      	movs	r3, #0
 800af50:	2200      	movs	r2, #0
 800af52:	f7fe fb9f 	bl	8009694 <xQueueGenericSend>
 800af56:	6278      	str	r0, [r7, #36]	; 0x24
 800af58:	e008      	b.n	800af6c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af5a:	4b07      	ldr	r3, [pc, #28]	; (800af78 <xTimerGenericCommand+0x98>)
 800af5c:	6818      	ldr	r0, [r3, #0]
 800af5e:	f107 0110 	add.w	r1, r7, #16
 800af62:	2300      	movs	r3, #0
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	f7fe fc93 	bl	8009890 <xQueueGenericSendFromISR>
 800af6a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3728      	adds	r7, #40	; 0x28
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	200068cc 	.word	0x200068cc

0800af7c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af02      	add	r7, sp, #8
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af86:	4b22      	ldr	r3, [pc, #136]	; (800b010 <prvProcessExpiredTimer+0x94>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	3304      	adds	r3, #4
 800af94:	4618      	mov	r0, r3
 800af96:	f7fe f9ab 	bl	80092f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d022      	beq.n	800afee <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800afa8:	697b      	ldr	r3, [r7, #20]
 800afaa:	699a      	ldr	r2, [r3, #24]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	18d1      	adds	r1, r2, r3
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	683a      	ldr	r2, [r7, #0]
 800afb4:	6978      	ldr	r0, [r7, #20]
 800afb6:	f000 f8d1 	bl	800b15c <prvInsertTimerInActiveList>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01f      	beq.n	800b000 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afc0:	2300      	movs	r3, #0
 800afc2:	9300      	str	r3, [sp, #0]
 800afc4:	2300      	movs	r3, #0
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	2100      	movs	r1, #0
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	f7ff ff88 	bl	800aee0 <xTimerGenericCommand>
 800afd0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d113      	bne.n	800b000 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800afd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afdc:	f383 8811 	msr	BASEPRI, r3
 800afe0:	f3bf 8f6f 	isb	sy
 800afe4:	f3bf 8f4f 	dsb	sy
 800afe8:	60fb      	str	r3, [r7, #12]
}
 800afea:	bf00      	nop
 800afec:	e7fe      	b.n	800afec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aff4:	f023 0301 	bic.w	r3, r3, #1
 800aff8:	b2da      	uxtb	r2, r3
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	6978      	ldr	r0, [r7, #20]
 800b006:	4798      	blx	r3
}
 800b008:	bf00      	nop
 800b00a:	3718      	adds	r7, #24
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	200068c4 	.word	0x200068c4

0800b014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b01c:	f107 0308 	add.w	r3, r7, #8
 800b020:	4618      	mov	r0, r3
 800b022:	f000 f857 	bl	800b0d4 <prvGetNextExpireTime>
 800b026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	4619      	mov	r1, r3
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f803 	bl	800b038 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b032:	f000 f8d5 	bl	800b1e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b036:	e7f1      	b.n	800b01c <prvTimerTask+0x8>

0800b038 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b084      	sub	sp, #16
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
 800b040:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b042:	f7ff fa39 	bl	800a4b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b046:	f107 0308 	add.w	r3, r7, #8
 800b04a:	4618      	mov	r0, r3
 800b04c:	f000 f866 	bl	800b11c <prvSampleTimeNow>
 800b050:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d130      	bne.n	800b0ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d10a      	bne.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	429a      	cmp	r2, r3
 800b064:	d806      	bhi.n	800b074 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b066:	f7ff fa35 	bl	800a4d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f7ff ff85 	bl	800af7c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b072:	e024      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b07a:	4b13      	ldr	r3, [pc, #76]	; (800b0c8 <prvProcessTimerOrBlockTask+0x90>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <prvProcessTimerOrBlockTask+0x50>
 800b084:	2301      	movs	r3, #1
 800b086:	e000      	b.n	800b08a <prvProcessTimerOrBlockTask+0x52>
 800b088:	2300      	movs	r3, #0
 800b08a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b08c:	4b0f      	ldr	r3, [pc, #60]	; (800b0cc <prvProcessTimerOrBlockTask+0x94>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4619      	mov	r1, r3
 800b09a:	f7fe ff7d 	bl	8009f98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b09e:	f7ff fa19 	bl	800a4d4 <xTaskResumeAll>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10a      	bne.n	800b0be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <prvProcessTimerOrBlockTask+0x98>)
 800b0aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ae:	601a      	str	r2, [r3, #0]
 800b0b0:	f3bf 8f4f 	dsb	sy
 800b0b4:	f3bf 8f6f 	isb	sy
}
 800b0b8:	e001      	b.n	800b0be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b0ba:	f7ff fa0b 	bl	800a4d4 <xTaskResumeAll>
}
 800b0be:	bf00      	nop
 800b0c0:	3710      	adds	r7, #16
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
 800b0c6:	bf00      	nop
 800b0c8:	200068c8 	.word	0x200068c8
 800b0cc:	200068cc 	.word	0x200068cc
 800b0d0:	e000ed04 	.word	0xe000ed04

0800b0d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0dc:	4b0e      	ldr	r3, [pc, #56]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d101      	bne.n	800b0ea <prvGetNextExpireTime+0x16>
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	e000      	b.n	800b0ec <prvGetNextExpireTime+0x18>
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0f8:	4b07      	ldr	r3, [pc, #28]	; (800b118 <prvGetNextExpireTime+0x44>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	60fb      	str	r3, [r7, #12]
 800b102:	e001      	b.n	800b108 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b108:	68fb      	ldr	r3, [r7, #12]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	200068c4 	.word	0x200068c4

0800b11c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b084      	sub	sp, #16
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b124:	f7ff fa74 	bl	800a610 <xTaskGetTickCount>
 800b128:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b12a:	4b0b      	ldr	r3, [pc, #44]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	429a      	cmp	r2, r3
 800b132:	d205      	bcs.n	800b140 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b134:	f000 f936 	bl	800b3a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	e002      	b.n	800b146 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b146:	4a04      	ldr	r2, [pc, #16]	; (800b158 <prvSampleTimeNow+0x3c>)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b14c:	68fb      	ldr	r3, [r7, #12]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200068d4 	.word	0x200068d4

0800b15c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b086      	sub	sp, #24
 800b160:	af00      	add	r7, sp, #0
 800b162:	60f8      	str	r0, [r7, #12]
 800b164:	60b9      	str	r1, [r7, #8]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b17a:	68ba      	ldr	r2, [r7, #8]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d812      	bhi.n	800b1a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	1ad2      	subs	r2, r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d302      	bcc.n	800b196 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	617b      	str	r3, [r7, #20]
 800b194:	e01b      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b196:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <prvInsertTimerInActiveList+0x7c>)
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	3304      	adds	r3, #4
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4610      	mov	r0, r2
 800b1a2:	f7fe f86c 	bl	800927e <vListInsert>
 800b1a6:	e012      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d206      	bcs.n	800b1be <prvInsertTimerInActiveList+0x62>
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d302      	bcc.n	800b1be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	617b      	str	r3, [r7, #20]
 800b1bc:	e007      	b.n	800b1ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1be:	4b07      	ldr	r3, [pc, #28]	; (800b1dc <prvInsertTimerInActiveList+0x80>)
 800b1c0:	681a      	ldr	r2, [r3, #0]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7fe f858 	bl	800927e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b1ce:	697b      	ldr	r3, [r7, #20]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	200068c8 	.word	0x200068c8
 800b1dc:	200068c4 	.word	0x200068c4

0800b1e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b08e      	sub	sp, #56	; 0x38
 800b1e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1e6:	e0ca      	b.n	800b37e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da18      	bge.n	800b220 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b1ee:	1d3b      	adds	r3, r7, #4
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fe:	f383 8811 	msr	BASEPRI, r3
 800b202:	f3bf 8f6f 	isb	sy
 800b206:	f3bf 8f4f 	dsb	sy
 800b20a:	61fb      	str	r3, [r7, #28]
}
 800b20c:	bf00      	nop
 800b20e:	e7fe      	b.n	800b20e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b216:	6850      	ldr	r0, [r2, #4]
 800b218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b21a:	6892      	ldr	r2, [r2, #8]
 800b21c:	4611      	mov	r1, r2
 800b21e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f2c0 80aa 	blt.w	800b37c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d004      	beq.n	800b23e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	3304      	adds	r3, #4
 800b238:	4618      	mov	r0, r3
 800b23a:	f7fe f859 	bl	80092f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b23e:	463b      	mov	r3, r7
 800b240:	4618      	mov	r0, r3
 800b242:	f7ff ff6b 	bl	800b11c <prvSampleTimeNow>
 800b246:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b09      	cmp	r3, #9
 800b24c:	f200 8097 	bhi.w	800b37e <prvProcessReceivedCommands+0x19e>
 800b250:	a201      	add	r2, pc, #4	; (adr r2, 800b258 <prvProcessReceivedCommands+0x78>)
 800b252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b256:	bf00      	nop
 800b258:	0800b281 	.word	0x0800b281
 800b25c:	0800b281 	.word	0x0800b281
 800b260:	0800b281 	.word	0x0800b281
 800b264:	0800b2f5 	.word	0x0800b2f5
 800b268:	0800b309 	.word	0x0800b309
 800b26c:	0800b353 	.word	0x0800b353
 800b270:	0800b281 	.word	0x0800b281
 800b274:	0800b281 	.word	0x0800b281
 800b278:	0800b2f5 	.word	0x0800b2f5
 800b27c:	0800b309 	.word	0x0800b309
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b286:	f043 0301 	orr.w	r3, r3, #1
 800b28a:	b2da      	uxtb	r2, r3
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b292:	68ba      	ldr	r2, [r7, #8]
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	18d1      	adds	r1, r2, r3
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a0:	f7ff ff5c 	bl	800b15c <prvInsertTimerInActiveList>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d069      	beq.n	800b37e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d05e      	beq.n	800b37e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	441a      	add	r2, r3
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	9300      	str	r3, [sp, #0]
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2d2:	f7ff fe05 	bl	800aee0 <xTimerGenericCommand>
 800b2d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d14f      	bne.n	800b37e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	61bb      	str	r3, [r7, #24]
}
 800b2f0:	bf00      	nop
 800b2f2:	e7fe      	b.n	800b2f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2fa:	f023 0301 	bic.w	r3, r3, #1
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b306:	e03a      	b.n	800b37e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b30e:	f043 0301 	orr.w	r3, r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b31e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	617b      	str	r3, [r7, #20]
}
 800b33a:	bf00      	nop
 800b33c:	e7fe      	b.n	800b33c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b340:	699a      	ldr	r2, [r3, #24]
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	18d1      	adds	r1, r2, r3
 800b346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b348:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b34c:	f7ff ff06 	bl	800b15c <prvInsertTimerInActiveList>
					break;
 800b350:	e015      	b.n	800b37e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b358:	f003 0302 	and.w	r3, r3, #2
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d103      	bne.n	800b368 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b362:	f000 fbb5 	bl	800bad0 <vPortFree>
 800b366:	e00a      	b.n	800b37e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b36e:	f023 0301 	bic.w	r3, r3, #1
 800b372:	b2da      	uxtb	r2, r3
 800b374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b376:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b37a:	e000      	b.n	800b37e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b37c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b37e:	4b08      	ldr	r3, [pc, #32]	; (800b3a0 <prvProcessReceivedCommands+0x1c0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	1d39      	adds	r1, r7, #4
 800b384:	2200      	movs	r2, #0
 800b386:	4618      	mov	r0, r3
 800b388:	f7fe fb1e 	bl	80099c8 <xQueueReceive>
 800b38c:	4603      	mov	r3, r0
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f47f af2a 	bne.w	800b1e8 <prvProcessReceivedCommands+0x8>
	}
}
 800b394:	bf00      	nop
 800b396:	bf00      	nop
 800b398:	3730      	adds	r7, #48	; 0x30
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	200068cc 	.word	0x200068cc

0800b3a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b088      	sub	sp, #32
 800b3a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3aa:	e048      	b.n	800b43e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3ac:	4b2d      	ldr	r3, [pc, #180]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68db      	ldr	r3, [r3, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3b6:	4b2b      	ldr	r3, [pc, #172]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	f7fd ff93 	bl	80092f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b3d8:	f003 0304 	and.w	r3, r3, #4
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d02e      	beq.n	800b43e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b3ea:	68ba      	ldr	r2, [r7, #8]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d90e      	bls.n	800b410 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b3fe:	4b19      	ldr	r3, [pc, #100]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3304      	adds	r3, #4
 800b406:	4619      	mov	r1, r3
 800b408:	4610      	mov	r0, r2
 800b40a:	f7fd ff38 	bl	800927e <vListInsert>
 800b40e:	e016      	b.n	800b43e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b410:	2300      	movs	r3, #0
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2300      	movs	r3, #0
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	2100      	movs	r1, #0
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f7ff fd60 	bl	800aee0 <xTimerGenericCommand>
 800b420:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d10a      	bne.n	800b43e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b42c:	f383 8811 	msr	BASEPRI, r3
 800b430:	f3bf 8f6f 	isb	sy
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	603b      	str	r3, [r7, #0]
}
 800b43a:	bf00      	nop
 800b43c:	e7fe      	b.n	800b43c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1b1      	bne.n	800b3ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b448:	4b06      	ldr	r3, [pc, #24]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b44e:	4b06      	ldr	r3, [pc, #24]	; (800b468 <prvSwitchTimerLists+0xc4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a04      	ldr	r2, [pc, #16]	; (800b464 <prvSwitchTimerLists+0xc0>)
 800b454:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b456:	4a04      	ldr	r2, [pc, #16]	; (800b468 <prvSwitchTimerLists+0xc4>)
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	6013      	str	r3, [r2, #0]
}
 800b45c:	bf00      	nop
 800b45e:	3718      	adds	r7, #24
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	200068c4 	.word	0x200068c4
 800b468:	200068c8 	.word	0x200068c8

0800b46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b472:	f000 f967 	bl	800b744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b476:	4b15      	ldr	r3, [pc, #84]	; (800b4cc <prvCheckForValidListAndQueue+0x60>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d120      	bne.n	800b4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b47e:	4814      	ldr	r0, [pc, #80]	; (800b4d0 <prvCheckForValidListAndQueue+0x64>)
 800b480:	f7fd feac 	bl	80091dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b484:	4813      	ldr	r0, [pc, #76]	; (800b4d4 <prvCheckForValidListAndQueue+0x68>)
 800b486:	f7fd fea9 	bl	80091dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b48a:	4b13      	ldr	r3, [pc, #76]	; (800b4d8 <prvCheckForValidListAndQueue+0x6c>)
 800b48c:	4a10      	ldr	r2, [pc, #64]	; (800b4d0 <prvCheckForValidListAndQueue+0x64>)
 800b48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b490:	4b12      	ldr	r3, [pc, #72]	; (800b4dc <prvCheckForValidListAndQueue+0x70>)
 800b492:	4a10      	ldr	r2, [pc, #64]	; (800b4d4 <prvCheckForValidListAndQueue+0x68>)
 800b494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b496:	2300      	movs	r3, #0
 800b498:	9300      	str	r3, [sp, #0]
 800b49a:	4b11      	ldr	r3, [pc, #68]	; (800b4e0 <prvCheckForValidListAndQueue+0x74>)
 800b49c:	4a11      	ldr	r2, [pc, #68]	; (800b4e4 <prvCheckForValidListAndQueue+0x78>)
 800b49e:	2110      	movs	r1, #16
 800b4a0:	200a      	movs	r0, #10
 800b4a2:	f7fd ffb7 	bl	8009414 <xQueueGenericCreateStatic>
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <prvCheckForValidListAndQueue+0x60>)
 800b4aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b4ac:	4b07      	ldr	r3, [pc, #28]	; (800b4cc <prvCheckForValidListAndQueue+0x60>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d005      	beq.n	800b4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b4b4:	4b05      	ldr	r3, [pc, #20]	; (800b4cc <prvCheckForValidListAndQueue+0x60>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	490b      	ldr	r1, [pc, #44]	; (800b4e8 <prvCheckForValidListAndQueue+0x7c>)
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fe fd18 	bl	8009ef0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b4c0:	f000 f970 	bl	800b7a4 <vPortExitCritical>
}
 800b4c4:	bf00      	nop
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	200068cc 	.word	0x200068cc
 800b4d0:	2000689c 	.word	0x2000689c
 800b4d4:	200068b0 	.word	0x200068b0
 800b4d8:	200068c4 	.word	0x200068c4
 800b4dc:	200068c8 	.word	0x200068c8
 800b4e0:	20006978 	.word	0x20006978
 800b4e4:	200068d8 	.word	0x200068d8
 800b4e8:	0800d144 	.word	0x0800d144

0800b4ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3b04      	subs	r3, #4
 800b4fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	3b04      	subs	r3, #4
 800b50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	f023 0201 	bic.w	r2, r3, #1
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	3b04      	subs	r3, #4
 800b51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b51c:	4a0c      	ldr	r2, [pc, #48]	; (800b550 <pxPortInitialiseStack+0x64>)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	3b14      	subs	r3, #20
 800b526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3b04      	subs	r3, #4
 800b532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f06f 0202 	mvn.w	r2, #2
 800b53a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3b20      	subs	r3, #32
 800b540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b542:	68fb      	ldr	r3, [r7, #12]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	0800b555 	.word	0x0800b555

0800b554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b55e:	4b12      	ldr	r3, [pc, #72]	; (800b5a8 <prvTaskExitError+0x54>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b566:	d00a      	beq.n	800b57e <prvTaskExitError+0x2a>
	__asm volatile
 800b568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b56c:	f383 8811 	msr	BASEPRI, r3
 800b570:	f3bf 8f6f 	isb	sy
 800b574:	f3bf 8f4f 	dsb	sy
 800b578:	60fb      	str	r3, [r7, #12]
}
 800b57a:	bf00      	nop
 800b57c:	e7fe      	b.n	800b57c <prvTaskExitError+0x28>
	__asm volatile
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	60bb      	str	r3, [r7, #8]
}
 800b590:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b592:	bf00      	nop
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0fc      	beq.n	800b594 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b59a:	bf00      	nop
 800b59c:	bf00      	nop
 800b59e:	3714      	adds	r7, #20
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a6:	4770      	bx	lr
 800b5a8:	20000094 	.word	0x20000094
 800b5ac:	00000000 	.word	0x00000000

0800b5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5b0:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <pxCurrentTCBConst2>)
 800b5b2:	6819      	ldr	r1, [r3, #0]
 800b5b4:	6808      	ldr	r0, [r1, #0]
 800b5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ba:	f380 8809 	msr	PSP, r0
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f04f 0000 	mov.w	r0, #0
 800b5c6:	f380 8811 	msr	BASEPRI, r0
 800b5ca:	4770      	bx	lr
 800b5cc:	f3af 8000 	nop.w

0800b5d0 <pxCurrentTCBConst2>:
 800b5d0:	2000639c 	.word	0x2000639c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop

0800b5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b5d8:	4808      	ldr	r0, [pc, #32]	; (800b5fc <prvPortStartFirstTask+0x24>)
 800b5da:	6800      	ldr	r0, [r0, #0]
 800b5dc:	6800      	ldr	r0, [r0, #0]
 800b5de:	f380 8808 	msr	MSP, r0
 800b5e2:	f04f 0000 	mov.w	r0, #0
 800b5e6:	f380 8814 	msr	CONTROL, r0
 800b5ea:	b662      	cpsie	i
 800b5ec:	b661      	cpsie	f
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	df00      	svc	0
 800b5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5fa:	bf00      	nop
 800b5fc:	e000ed08 	.word	0xe000ed08

0800b600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b606:	4b46      	ldr	r3, [pc, #280]	; (800b720 <xPortStartScheduler+0x120>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	4a46      	ldr	r2, [pc, #280]	; (800b724 <xPortStartScheduler+0x124>)
 800b60c:	4293      	cmp	r3, r2
 800b60e:	d10a      	bne.n	800b626 <xPortStartScheduler+0x26>
	__asm volatile
 800b610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b614:	f383 8811 	msr	BASEPRI, r3
 800b618:	f3bf 8f6f 	isb	sy
 800b61c:	f3bf 8f4f 	dsb	sy
 800b620:	613b      	str	r3, [r7, #16]
}
 800b622:	bf00      	nop
 800b624:	e7fe      	b.n	800b624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b626:	4b3e      	ldr	r3, [pc, #248]	; (800b720 <xPortStartScheduler+0x120>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a3f      	ldr	r2, [pc, #252]	; (800b728 <xPortStartScheduler+0x128>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d10a      	bne.n	800b646 <xPortStartScheduler+0x46>
	__asm volatile
 800b630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b634:	f383 8811 	msr	BASEPRI, r3
 800b638:	f3bf 8f6f 	isb	sy
 800b63c:	f3bf 8f4f 	dsb	sy
 800b640:	60fb      	str	r3, [r7, #12]
}
 800b642:	bf00      	nop
 800b644:	e7fe      	b.n	800b644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b646:	4b39      	ldr	r3, [pc, #228]	; (800b72c <xPortStartScheduler+0x12c>)
 800b648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b64a:	697b      	ldr	r3, [r7, #20]
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	b2db      	uxtb	r3, r3
 800b650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	22ff      	movs	r2, #255	; 0xff
 800b656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	b2db      	uxtb	r3, r3
 800b65e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b660:	78fb      	ldrb	r3, [r7, #3]
 800b662:	b2db      	uxtb	r3, r3
 800b664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b668:	b2da      	uxtb	r2, r3
 800b66a:	4b31      	ldr	r3, [pc, #196]	; (800b730 <xPortStartScheduler+0x130>)
 800b66c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b66e:	4b31      	ldr	r3, [pc, #196]	; (800b734 <xPortStartScheduler+0x134>)
 800b670:	2207      	movs	r2, #7
 800b672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b674:	e009      	b.n	800b68a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b676:	4b2f      	ldr	r3, [pc, #188]	; (800b734 <xPortStartScheduler+0x134>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	4a2d      	ldr	r2, [pc, #180]	; (800b734 <xPortStartScheduler+0x134>)
 800b67e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	b2db      	uxtb	r3, r3
 800b688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b692:	2b80      	cmp	r3, #128	; 0x80
 800b694:	d0ef      	beq.n	800b676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b696:	4b27      	ldr	r3, [pc, #156]	; (800b734 <xPortStartScheduler+0x134>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f1c3 0307 	rsb	r3, r3, #7
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d00a      	beq.n	800b6b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800b6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6a6:	f383 8811 	msr	BASEPRI, r3
 800b6aa:	f3bf 8f6f 	isb	sy
 800b6ae:	f3bf 8f4f 	dsb	sy
 800b6b2:	60bb      	str	r3, [r7, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	e7fe      	b.n	800b6b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6b8:	4b1e      	ldr	r3, [pc, #120]	; (800b734 <xPortStartScheduler+0x134>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	4a1d      	ldr	r2, [pc, #116]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6c2:	4b1c      	ldr	r3, [pc, #112]	; (800b734 <xPortStartScheduler+0x134>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6ca:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <xPortStartScheduler+0x134>)
 800b6cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	b2da      	uxtb	r2, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b6d6:	4b18      	ldr	r3, [pc, #96]	; (800b738 <xPortStartScheduler+0x138>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a17      	ldr	r2, [pc, #92]	; (800b738 <xPortStartScheduler+0x138>)
 800b6dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b6e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b6e2:	4b15      	ldr	r3, [pc, #84]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a14      	ldr	r2, [pc, #80]	; (800b738 <xPortStartScheduler+0x138>)
 800b6e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b6ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b6ee:	f000 f8dd 	bl	800b8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b6f2:	4b12      	ldr	r3, [pc, #72]	; (800b73c <xPortStartScheduler+0x13c>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b6f8:	f000 f8fc 	bl	800b8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b6fc:	4b10      	ldr	r3, [pc, #64]	; (800b740 <xPortStartScheduler+0x140>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a0f      	ldr	r2, [pc, #60]	; (800b740 <xPortStartScheduler+0x140>)
 800b702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b708:	f7ff ff66 	bl	800b5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b70c:	f7ff f84a 	bl	800a7a4 <vTaskSwitchContext>
	prvTaskExitError();
 800b710:	f7ff ff20 	bl	800b554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	e000ed00 	.word	0xe000ed00
 800b724:	410fc271 	.word	0x410fc271
 800b728:	410fc270 	.word	0x410fc270
 800b72c:	e000e400 	.word	0xe000e400
 800b730:	200069c8 	.word	0x200069c8
 800b734:	200069cc 	.word	0x200069cc
 800b738:	e000ed20 	.word	0xe000ed20
 800b73c:	20000094 	.word	0x20000094
 800b740:	e000ef34 	.word	0xe000ef34

0800b744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	__asm volatile
 800b74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	607b      	str	r3, [r7, #4]
}
 800b75c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b75e:	4b0f      	ldr	r3, [pc, #60]	; (800b79c <vPortEnterCritical+0x58>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3301      	adds	r3, #1
 800b764:	4a0d      	ldr	r2, [pc, #52]	; (800b79c <vPortEnterCritical+0x58>)
 800b766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b768:	4b0c      	ldr	r3, [pc, #48]	; (800b79c <vPortEnterCritical+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d10f      	bne.n	800b790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b770:	4b0b      	ldr	r3, [pc, #44]	; (800b7a0 <vPortEnterCritical+0x5c>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	b2db      	uxtb	r3, r3
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <vPortEnterCritical+0x4c>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	f383 8811 	msr	BASEPRI, r3
 800b782:	f3bf 8f6f 	isb	sy
 800b786:	f3bf 8f4f 	dsb	sy
 800b78a:	603b      	str	r3, [r7, #0]
}
 800b78c:	bf00      	nop
 800b78e:	e7fe      	b.n	800b78e <vPortEnterCritical+0x4a>
	}
}
 800b790:	bf00      	nop
 800b792:	370c      	adds	r7, #12
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	20000094 	.word	0x20000094
 800b7a0:	e000ed04 	.word	0xe000ed04

0800b7a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7aa:	4b12      	ldr	r3, [pc, #72]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10a      	bne.n	800b7c8 <vPortExitCritical+0x24>
	__asm volatile
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	607b      	str	r3, [r7, #4]
}
 800b7c4:	bf00      	nop
 800b7c6:	e7fe      	b.n	800b7c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b7c8:	4b0a      	ldr	r3, [pc, #40]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	4a09      	ldr	r2, [pc, #36]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7d2:	4b08      	ldr	r3, [pc, #32]	; (800b7f4 <vPortExitCritical+0x50>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d105      	bne.n	800b7e6 <vPortExitCritical+0x42>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	f383 8811 	msr	BASEPRI, r3
}
 800b7e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b7e6:	bf00      	nop
 800b7e8:	370c      	adds	r7, #12
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	20000094 	.word	0x20000094
	...

0800b800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b800:	f3ef 8009 	mrs	r0, PSP
 800b804:	f3bf 8f6f 	isb	sy
 800b808:	4b15      	ldr	r3, [pc, #84]	; (800b860 <pxCurrentTCBConst>)
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	f01e 0f10 	tst.w	lr, #16
 800b810:	bf08      	it	eq
 800b812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b81a:	6010      	str	r0, [r2, #0]
 800b81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b820:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b824:	f380 8811 	msr	BASEPRI, r0
 800b828:	f3bf 8f4f 	dsb	sy
 800b82c:	f3bf 8f6f 	isb	sy
 800b830:	f7fe ffb8 	bl	800a7a4 <vTaskSwitchContext>
 800b834:	f04f 0000 	mov.w	r0, #0
 800b838:	f380 8811 	msr	BASEPRI, r0
 800b83c:	bc09      	pop	{r0, r3}
 800b83e:	6819      	ldr	r1, [r3, #0]
 800b840:	6808      	ldr	r0, [r1, #0]
 800b842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b846:	f01e 0f10 	tst.w	lr, #16
 800b84a:	bf08      	it	eq
 800b84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b850:	f380 8809 	msr	PSP, r0
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	f3af 8000 	nop.w

0800b860 <pxCurrentTCBConst>:
 800b860:	2000639c 	.word	0x2000639c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b864:	bf00      	nop
 800b866:	bf00      	nop

0800b868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
	__asm volatile
 800b86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b872:	f383 8811 	msr	BASEPRI, r3
 800b876:	f3bf 8f6f 	isb	sy
 800b87a:	f3bf 8f4f 	dsb	sy
 800b87e:	607b      	str	r3, [r7, #4]
}
 800b880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b882:	f7fe fed5 	bl	800a630 <xTaskIncrementTick>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d003      	beq.n	800b894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b88c:	4b06      	ldr	r3, [pc, #24]	; (800b8a8 <xPortSysTickHandler+0x40>)
 800b88e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	2300      	movs	r3, #0
 800b896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f383 8811 	msr	BASEPRI, r3
}
 800b89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	e000ed04 	.word	0xe000ed04

0800b8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8b0:	4b0b      	ldr	r3, [pc, #44]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8b6:	4b0b      	ldr	r3, [pc, #44]	; (800b8e4 <vPortSetupTimerInterrupt+0x38>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8bc:	4b0a      	ldr	r3, [pc, #40]	; (800b8e8 <vPortSetupTimerInterrupt+0x3c>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a0a      	ldr	r2, [pc, #40]	; (800b8ec <vPortSetupTimerInterrupt+0x40>)
 800b8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c6:	099b      	lsrs	r3, r3, #6
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <vPortSetupTimerInterrupt+0x44>)
 800b8ca:	3b01      	subs	r3, #1
 800b8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ce:	4b04      	ldr	r3, [pc, #16]	; (800b8e0 <vPortSetupTimerInterrupt+0x34>)
 800b8d0:	2207      	movs	r2, #7
 800b8d2:	601a      	str	r2, [r3, #0]
}
 800b8d4:	bf00      	nop
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop
 800b8e0:	e000e010 	.word	0xe000e010
 800b8e4:	e000e018 	.word	0xe000e018
 800b8e8:	20000078 	.word	0x20000078
 800b8ec:	10624dd3 	.word	0x10624dd3
 800b8f0:	e000e014 	.word	0xe000e014

0800b8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b904 <vPortEnableVFP+0x10>
 800b8f8:	6801      	ldr	r1, [r0, #0]
 800b8fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b8fe:	6001      	str	r1, [r0, #0]
 800b900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b902:	bf00      	nop
 800b904:	e000ed88 	.word	0xe000ed88

0800b908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b90e:	f3ef 8305 	mrs	r3, IPSR
 800b912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b0f      	cmp	r3, #15
 800b918:	d914      	bls.n	800b944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b91a:	4a17      	ldr	r2, [pc, #92]	; (800b978 <vPortValidateInterruptPriority+0x70>)
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	4413      	add	r3, r2
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <vPortValidateInterruptPriority+0x74>)
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	7afa      	ldrb	r2, [r7, #11]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d20a      	bcs.n	800b944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b932:	f383 8811 	msr	BASEPRI, r3
 800b936:	f3bf 8f6f 	isb	sy
 800b93a:	f3bf 8f4f 	dsb	sy
 800b93e:	607b      	str	r3, [r7, #4]
}
 800b940:	bf00      	nop
 800b942:	e7fe      	b.n	800b942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <vPortValidateInterruptPriority+0x78>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b94c:	4b0d      	ldr	r3, [pc, #52]	; (800b984 <vPortValidateInterruptPriority+0x7c>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	429a      	cmp	r2, r3
 800b952:	d90a      	bls.n	800b96a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b958:	f383 8811 	msr	BASEPRI, r3
 800b95c:	f3bf 8f6f 	isb	sy
 800b960:	f3bf 8f4f 	dsb	sy
 800b964:	603b      	str	r3, [r7, #0]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vPortValidateInterruptPriority+0x60>
	}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	e000e3f0 	.word	0xe000e3f0
 800b97c:	200069c8 	.word	0x200069c8
 800b980:	e000ed0c 	.word	0xe000ed0c
 800b984:	200069cc 	.word	0x200069cc

0800b988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b088      	sub	sp, #32
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]

	/* The heap must be initialised before the first call to
	prvPortMalloc(). */
	configASSERT( pxEnd );
 800b994:	4b48      	ldr	r3, [pc, #288]	; (800bab8 <pvPortMalloc+0x130>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d10a      	bne.n	800b9b2 <pvPortMalloc+0x2a>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	60fb      	str	r3, [r7, #12]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <pvPortMalloc+0x28>

	vTaskSuspendAll();
 800b9b2:	f7fe fd81 	bl	800a4b8 <vTaskSuspendAll>
	{
		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9b6:	4b41      	ldr	r3, [pc, #260]	; (800babc <pvPortMalloc+0x134>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4013      	ands	r3, r2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d172      	bne.n	800baa8 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00d      	beq.n	800b9e4 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800b9c8:	2208      	movs	r2, #8
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f003 0307 	and.w	r3, r3, #7
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d004      	beq.n	800b9e4 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	f023 0307 	bic.w	r3, r3, #7
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d05e      	beq.n	800baa8 <pvPortMalloc+0x120>
 800b9ea:	4b35      	ldr	r3, [pc, #212]	; (800bac0 <pvPortMalloc+0x138>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	687a      	ldr	r2, [r7, #4]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d859      	bhi.n	800baa8 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9f4:	4b33      	ldr	r3, [pc, #204]	; (800bac4 <pvPortMalloc+0x13c>)
 800b9f6:	61bb      	str	r3, [r7, #24]
				pxBlock = xStart.pxNextFreeBlock;
 800b9f8:	4b32      	ldr	r3, [pc, #200]	; (800bac4 <pvPortMalloc+0x13c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9fe:	e004      	b.n	800ba0a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	61bb      	str	r3, [r7, #24]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	61fb      	str	r3, [r7, #28]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	685b      	ldr	r3, [r3, #4]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d903      	bls.n	800ba1c <pvPortMalloc+0x94>
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d1f1      	bne.n	800ba00 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba1c:	4b26      	ldr	r3, [pc, #152]	; (800bab8 <pvPortMalloc+0x130>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	69fa      	ldr	r2, [r7, #28]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d040      	beq.n	800baa8 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba26:	69bb      	ldr	r3, [r7, #24]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2208      	movs	r2, #8
 800ba2c:	4413      	add	r3, r2
 800ba2e:	617b      	str	r3, [r7, #20]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	685a      	ldr	r2, [r3, #4]
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	1ad2      	subs	r2, r2, r3
 800ba40:	2308      	movs	r3, #8
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d90f      	bls.n	800ba68 <pvPortMalloc+0xe0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba48:	69fa      	ldr	r2, [r7, #28]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	4413      	add	r3, r2
 800ba4e:	613b      	str	r3, [r7, #16]

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba50:	69fb      	ldr	r3, [r7, #28]
 800ba52:	685a      	ldr	r2, [r3, #4]
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	1ad2      	subs	r2, r2, r3
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800ba62:	6938      	ldr	r0, [r7, #16]
 800ba64:	f000 f8a2 	bl	800bbac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba68:	4b15      	ldr	r3, [pc, #84]	; (800bac0 <pvPortMalloc+0x138>)
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	1ad3      	subs	r3, r2, r3
 800ba72:	4a13      	ldr	r2, [pc, #76]	; (800bac0 <pvPortMalloc+0x138>)
 800ba74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba76:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <pvPortMalloc+0x138>)
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <pvPortMalloc+0x140>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d203      	bcs.n	800ba8a <pvPortMalloc+0x102>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba82:	4b0f      	ldr	r3, [pc, #60]	; (800bac0 <pvPortMalloc+0x138>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a10      	ldr	r2, [pc, #64]	; (800bac8 <pvPortMalloc+0x140>)
 800ba88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	685a      	ldr	r2, [r3, #4]
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	; (800babc <pvPortMalloc+0x134>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	431a      	orrs	r2, r3
 800ba94:	69fb      	ldr	r3, [r7, #28]
 800ba96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba9e:	4b0b      	ldr	r3, [pc, #44]	; (800bacc <pvPortMalloc+0x144>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	4a09      	ldr	r2, [pc, #36]	; (800bacc <pvPortMalloc+0x144>)
 800baa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800baa8:	f7fe fd14 	bl	800a4d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	return pvReturn;
 800baac:	697b      	ldr	r3, [r7, #20]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3720      	adds	r7, #32
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	200069d8 	.word	0x200069d8
 800babc:	200069ec 	.word	0x200069ec
 800bac0:	200069dc 	.word	0x200069dc
 800bac4:	200069d0 	.word	0x200069d0
 800bac8:	200069e0 	.word	0x200069e0
 800bacc:	200069e4 	.word	0x200069e4

0800bad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d04d      	beq.n	800bb7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bae2:	2308      	movs	r3, #8
 800bae4:	425b      	negs	r3, r3
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4413      	add	r3, r2
 800baea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685a      	ldr	r2, [r3, #4]
 800baf4:	4b24      	ldr	r3, [pc, #144]	; (800bb88 <vPortFree+0xb8>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	4013      	ands	r3, r2
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d10a      	bne.n	800bb14 <vPortFree+0x44>
	__asm volatile
 800bafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	60fb      	str	r3, [r7, #12]
}
 800bb10:	bf00      	nop
 800bb12:	e7fe      	b.n	800bb12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00a      	beq.n	800bb32 <vPortFree+0x62>
	__asm volatile
 800bb1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb20:	f383 8811 	msr	BASEPRI, r3
 800bb24:	f3bf 8f6f 	isb	sy
 800bb28:	f3bf 8f4f 	dsb	sy
 800bb2c:	60bb      	str	r3, [r7, #8]
}
 800bb2e:	bf00      	nop
 800bb30:	e7fe      	b.n	800bb30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	685a      	ldr	r2, [r3, #4]
 800bb36:	4b14      	ldr	r3, [pc, #80]	; (800bb88 <vPortFree+0xb8>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4013      	ands	r3, r2
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d01e      	beq.n	800bb7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d11a      	bne.n	800bb7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	685a      	ldr	r2, [r3, #4]
 800bb4c:	4b0e      	ldr	r3, [pc, #56]	; (800bb88 <vPortFree+0xb8>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	401a      	ands	r2, r3
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb58:	f7fe fcae 	bl	800a4b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <vPortFree+0xbc>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4413      	add	r3, r2
 800bb66:	4a09      	ldr	r2, [pc, #36]	; (800bb8c <vPortFree+0xbc>)
 800bb68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb6a:	6938      	ldr	r0, [r7, #16]
 800bb6c:	f000 f81e 	bl	800bbac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb70:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <vPortFree+0xc0>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a06      	ldr	r2, [pc, #24]	; (800bb90 <vPortFree+0xc0>)
 800bb78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb7a:	f7fe fcab 	bl	800a4d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb7e:	bf00      	nop
 800bb80:	3718      	adds	r7, #24
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}
 800bb86:	bf00      	nop
 800bb88:	200069ec 	.word	0x200069ec
 800bb8c:	200069dc 	.word	0x200069dc
 800bb90:	200069e8 	.word	0x200069e8

0800bb94 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800bb94:	b480      	push	{r7}
 800bb96:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800bb98:	4b03      	ldr	r3, [pc, #12]	; (800bba8 <xPortGetFreeHeapSize+0x14>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	200069dc 	.word	0x200069dc

0800bbac <prvInsertBlockIntoFreeList>:
	return xMinimumEverFreeBytesRemaining;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bbb4:	4b28      	ldr	r3, [pc, #160]	; (800bc58 <prvInsertBlockIntoFreeList+0xac>)
 800bbb6:	60fb      	str	r3, [r7, #12]
 800bbb8:	e002      	b.n	800bbc0 <prvInsertBlockIntoFreeList+0x14>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d8f7      	bhi.n	800bbba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	685b      	ldr	r3, [r3, #4]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d108      	bne.n	800bbee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	441a      	add	r2, r3
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	441a      	add	r2, r3
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d118      	bne.n	800bc34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <prvInsertBlockIntoFreeList+0xb0>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d00d      	beq.n	800bc2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	441a      	add	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	601a      	str	r2, [r3, #0]
 800bc28:	e008      	b.n	800bc3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc2a:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <prvInsertBlockIntoFreeList+0xb0>)
 800bc2c:	681a      	ldr	r2, [r3, #0]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	e003      	b.n	800bc3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681a      	ldr	r2, [r3, #0]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d002      	beq.n	800bc4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc4a:	bf00      	nop
 800bc4c:	3714      	adds	r7, #20
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	200069d0 	.word	0x200069d0
 800bc5c:	200069d8 	.word	0x200069d8

0800bc60 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions )
{
 800bc60:	b480      	push	{r7}
 800bc62:	b08f      	sub	sp, #60	; 0x3c
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxFirstFreeBlockInRegion = NULL, *pxPreviousFreeBlock;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	623b      	str	r3, [r7, #32]
size_t xAlignedHeap;
size_t xTotalRegionSize, xTotalHeapSize = 0;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	633b      	str	r3, [r7, #48]	; 0x30
BaseType_t xDefinedRegions = 0;
 800bc70:	2300      	movs	r3, #0
 800bc72:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xAddress;
const HeapRegion_t *pxHeapRegion;

	/* Can only call once! */
	configASSERT( pxEnd == NULL );
 800bc74:	4b5a      	ldr	r3, [pc, #360]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <vPortDefineHeapRegions+0x32>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	617b      	str	r3, [r7, #20]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <vPortDefineHeapRegions+0x30>

	pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800bc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	627b      	str	r3, [r7, #36]	; 0x24

	while( pxHeapRegion->xSizeInBytes > 0 )
 800bc9c:	e07d      	b.n	800bd9a <vPortDefineHeapRegions+0x13a>
	{
		xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Ensure the heap region starts on a correctly aligned boundary. */
		xAddress = ( size_t ) pxHeapRegion->pucStartAddress;
 800bca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	62bb      	str	r3, [r7, #40]	; 0x28
		if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00e      	beq.n	800bcd2 <vPortDefineHeapRegions+0x72>
		{
			xAddress += ( portBYTE_ALIGNMENT - 1 );
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	3307      	adds	r3, #7
 800bcb8:	62bb      	str	r3, [r7, #40]	; 0x28
			xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbc:	f023 0307 	bic.w	r3, r3, #7
 800bcc0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Adjust the size for the bytes lost to alignment. */
			xTotalRegionSize -= xAddress - ( size_t ) pxHeapRegion->pucStartAddress;
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bcce:	4413      	add	r3, r2
 800bcd0:	637b      	str	r3, [r7, #52]	; 0x34
		}

		xAlignedHeap = xAddress;
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	61fb      	str	r3, [r7, #28]

		/* Set xStart if it has not already been set. */
		if( xDefinedRegions == 0 )
 800bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d106      	bne.n	800bcea <vPortDefineHeapRegions+0x8a>
		{
			/* xStart is used to hold a pointer to the first item in the list of
			free blocks.  The void cast is used to prevent compiler warnings. */
			xStart.pxNextFreeBlock = ( BlockLink_t * ) xAlignedHeap;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	4a41      	ldr	r2, [pc, #260]	; (800bde4 <vPortDefineHeapRegions+0x184>)
 800bce0:	6013      	str	r3, [r2, #0]
			xStart.xBlockSize = ( size_t ) 0;
 800bce2:	4b40      	ldr	r3, [pc, #256]	; (800bde4 <vPortDefineHeapRegions+0x184>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	605a      	str	r2, [r3, #4]
 800bce8:	e01f      	b.n	800bd2a <vPortDefineHeapRegions+0xca>
		}
		else
		{
			/* Should only get here if one region has already been added to the
			heap. */
			configASSERT( pxEnd != NULL );
 800bcea:	4b3d      	ldr	r3, [pc, #244]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d10a      	bne.n	800bd08 <vPortDefineHeapRegions+0xa8>
	__asm volatile
 800bcf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	613b      	str	r3, [r7, #16]
}
 800bd04:	bf00      	nop
 800bd06:	e7fe      	b.n	800bd06 <vPortDefineHeapRegions+0xa6>

			/* Check blocks are passed in with increasing start addresses. */
			configASSERT( xAddress > ( size_t ) pxEnd );
 800bd08:	4b35      	ldr	r3, [pc, #212]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d80a      	bhi.n	800bd2a <vPortDefineHeapRegions+0xca>
	__asm volatile
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	60fb      	str	r3, [r7, #12]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <vPortDefineHeapRegions+0xc8>
		}

		/* Remember the location of the end marker in the previous region, if
		any. */
		pxPreviousFreeBlock = pxEnd;
 800bd2a:	4b2d      	ldr	r3, [pc, #180]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	61bb      	str	r3, [r7, #24]

		/* pxEnd is used to mark the end of the list of free blocks and is
		inserted at the end of the region space. */
		xAddress = xAlignedHeap + xTotalRegionSize;
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd34:	4413      	add	r3, r2
 800bd36:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress -= xHeapStructSize;
 800bd38:	2208      	movs	r2, #8
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	1a9b      	subs	r3, r3, r2
 800bd3e:	62bb      	str	r3, [r7, #40]	; 0x28
		xAddress &= ~portBYTE_ALIGNMENT_MASK;
 800bd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd42:	f023 0307 	bic.w	r3, r3, #7
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
		pxEnd = ( BlockLink_t * ) xAddress;
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	4a25      	ldr	r2, [pc, #148]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd4c:	6013      	str	r3, [r2, #0]
		pxEnd->xBlockSize = 0;
 800bd4e:	4b24      	ldr	r3, [pc, #144]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	2200      	movs	r2, #0
 800bd54:	605a      	str	r2, [r3, #4]
		pxEnd->pxNextFreeBlock = NULL;
 800bd56:	4b22      	ldr	r3, [pc, #136]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	601a      	str	r2, [r3, #0]

		/* To start with there is a single free block in this region that is
		sized to take up the entire heap region minus the space taken by the
		free block structure. */
		pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	623b      	str	r3, [r7, #32]
		pxFirstFreeBlockInRegion->xBlockSize = xAddress - ( size_t ) pxFirstFreeBlockInRegion;
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd66:	1ad2      	subs	r2, r2, r3
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	605a      	str	r2, [r3, #4]
		pxFirstFreeBlockInRegion->pxNextFreeBlock = pxEnd;
 800bd6c:	4b1c      	ldr	r3, [pc, #112]	; (800bde0 <vPortDefineHeapRegions+0x180>)
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	6a3b      	ldr	r3, [r7, #32]
 800bd72:	601a      	str	r2, [r3, #0]

		/* If this is not the first region that makes up the entire heap space
		then link the previous region to this region. */
		if( pxPreviousFreeBlock != NULL )
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d002      	beq.n	800bd80 <vPortDefineHeapRegions+0x120>
		{
			pxPreviousFreeBlock->pxNextFreeBlock = pxFirstFreeBlockInRegion;
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	6a3a      	ldr	r2, [r7, #32]
 800bd7e:	601a      	str	r2, [r3, #0]
		}

		xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 800bd80:	6a3b      	ldr	r3, [r7, #32]
 800bd82:	685b      	ldr	r3, [r3, #4]
 800bd84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd86:	4413      	add	r3, r2
 800bd88:	633b      	str	r3, [r7, #48]	; 0x30

		/* Move onto the next HeapRegion_t structure. */
		xDefinedRegions++;
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
		pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800bd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	4413      	add	r3, r2
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
	while( pxHeapRegion->xSizeInBytes > 0 )
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	f47f af7d 	bne.w	800bc9e <vPortDefineHeapRegions+0x3e>
	}

	xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 800bda4:	4a10      	ldr	r2, [pc, #64]	; (800bde8 <vPortDefineHeapRegions+0x188>)
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = xTotalHeapSize;
 800bdaa:	4a10      	ldr	r2, [pc, #64]	; (800bdec <vPortDefineHeapRegions+0x18c>)
 800bdac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdae:	6013      	str	r3, [r2, #0]

	/* Check something was actually defined before it is accessed. */
	configASSERT( xTotalHeapSize );
 800bdb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10a      	bne.n	800bdcc <vPortDefineHeapRegions+0x16c>
	__asm volatile
 800bdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdba:	f383 8811 	msr	BASEPRI, r3
 800bdbe:	f3bf 8f6f 	isb	sy
 800bdc2:	f3bf 8f4f 	dsb	sy
 800bdc6:	60bb      	str	r3, [r7, #8]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <vPortDefineHeapRegions+0x16a>

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bdcc:	4b08      	ldr	r3, [pc, #32]	; (800bdf0 <vPortDefineHeapRegions+0x190>)
 800bdce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bdd2:	601a      	str	r2, [r3, #0]
}
 800bdd4:	bf00      	nop
 800bdd6:	373c      	adds	r7, #60	; 0x3c
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	200069d8 	.word	0x200069d8
 800bde4:	200069d0 	.word	0x200069d0
 800bde8:	200069e0 	.word	0x200069e0
 800bdec:	200069dc 	.word	0x200069dc
 800bdf0:	200069ec 	.word	0x200069ec

0800bdf4 <atol>:
 800bdf4:	220a      	movs	r2, #10
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	f000 bb5e 	b.w	800c4b8 <strtol>

0800bdfc <calloc>:
 800bdfc:	4b02      	ldr	r3, [pc, #8]	; (800be08 <calloc+0xc>)
 800bdfe:	460a      	mov	r2, r1
 800be00:	4601      	mov	r1, r0
 800be02:	6818      	ldr	r0, [r3, #0]
 800be04:	f000 b8f8 	b.w	800bff8 <_calloc_r>
 800be08:	20000098 	.word	0x20000098

0800be0c <__errno>:
 800be0c:	4b01      	ldr	r3, [pc, #4]	; (800be14 <__errno+0x8>)
 800be0e:	6818      	ldr	r0, [r3, #0]
 800be10:	4770      	bx	lr
 800be12:	bf00      	nop
 800be14:	20000098 	.word	0x20000098

0800be18 <gmtime_r>:
 800be18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be1c:	e9d0 6700 	ldrd	r6, r7, [r0]
 800be20:	460c      	mov	r4, r1
 800be22:	4a4f      	ldr	r2, [pc, #316]	; (800bf60 <gmtime_r+0x148>)
 800be24:	2300      	movs	r3, #0
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fd2f 	bl	800088c <__aeabi_ldivmod>
 800be2e:	4639      	mov	r1, r7
 800be30:	4605      	mov	r5, r0
 800be32:	4a4b      	ldr	r2, [pc, #300]	; (800bf60 <gmtime_r+0x148>)
 800be34:	4630      	mov	r0, r6
 800be36:	2300      	movs	r3, #0
 800be38:	f7f4 fd28 	bl	800088c <__aeabi_ldivmod>
 800be3c:	2a00      	cmp	r2, #0
 800be3e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800be42:	bfb7      	itett	lt
 800be44:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800be48:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800be4c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800be50:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800be54:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800be58:	fbb2 f1f0 	udiv	r1, r2, r0
 800be5c:	fb00 2211 	mls	r2, r0, r1, r2
 800be60:	203c      	movs	r0, #60	; 0x3c
 800be62:	60a1      	str	r1, [r4, #8]
 800be64:	fbb2 f1f0 	udiv	r1, r2, r0
 800be68:	fb00 2211 	mls	r2, r0, r1, r2
 800be6c:	6061      	str	r1, [r4, #4]
 800be6e:	6022      	str	r2, [r4, #0]
 800be70:	2107      	movs	r1, #7
 800be72:	1cda      	adds	r2, r3, #3
 800be74:	fb92 f1f1 	sdiv	r1, r2, r1
 800be78:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be7c:	1a52      	subs	r2, r2, r1
 800be7e:	bf48      	it	mi
 800be80:	3207      	addmi	r2, #7
 800be82:	4d38      	ldr	r5, [pc, #224]	; (800bf64 <gmtime_r+0x14c>)
 800be84:	4838      	ldr	r0, [pc, #224]	; (800bf68 <gmtime_r+0x150>)
 800be86:	61a2      	str	r2, [r4, #24]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	bfb7      	itett	lt
 800be8c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800be90:	fb93 f5f5 	sdivge	r5, r3, r5
 800be94:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800be98:	fb92 f5f5 	sdivlt	r5, r2, r5
 800be9c:	fb00 3005 	mla	r0, r0, r5, r3
 800bea0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800bea4:	fbb0 f2f2 	udiv	r2, r0, r2
 800bea8:	4402      	add	r2, r0
 800beaa:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800beae:	fbb0 f1f3 	udiv	r1, r0, r3
 800beb2:	1a52      	subs	r2, r2, r1
 800beb4:	f240 1c6d 	movw	ip, #365	; 0x16d
 800beb8:	492c      	ldr	r1, [pc, #176]	; (800bf6c <gmtime_r+0x154>)
 800beba:	fbb0 f1f1 	udiv	r1, r0, r1
 800bebe:	2764      	movs	r7, #100	; 0x64
 800bec0:	1a52      	subs	r2, r2, r1
 800bec2:	fbb2 f1fc 	udiv	r1, r2, ip
 800bec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800beca:	fbb1 f6f7 	udiv	r6, r1, r7
 800bece:	1af3      	subs	r3, r6, r3
 800bed0:	4403      	add	r3, r0
 800bed2:	fb0c 3311 	mls	r3, ip, r1, r3
 800bed6:	2299      	movs	r2, #153	; 0x99
 800bed8:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800bedc:	f10e 0e02 	add.w	lr, lr, #2
 800bee0:	f103 0c01 	add.w	ip, r3, #1
 800bee4:	fbbe f0f2 	udiv	r0, lr, r2
 800bee8:	4342      	muls	r2, r0
 800beea:	3202      	adds	r2, #2
 800beec:	f04f 0805 	mov.w	r8, #5
 800bef0:	fbb2 f2f8 	udiv	r2, r2, r8
 800bef4:	ebac 0c02 	sub.w	ip, ip, r2
 800bef8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800befc:	4596      	cmp	lr, r2
 800befe:	bf94      	ite	ls
 800bf00:	2202      	movls	r2, #2
 800bf02:	f06f 0209 	mvnhi.w	r2, #9
 800bf06:	4410      	add	r0, r2
 800bf08:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf0c:	fb02 1505 	mla	r5, r2, r5, r1
 800bf10:	2801      	cmp	r0, #1
 800bf12:	bf98      	it	ls
 800bf14:	3501      	addls	r5, #1
 800bf16:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800bf1a:	d30d      	bcc.n	800bf38 <gmtime_r+0x120>
 800bf1c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800bf20:	61e3      	str	r3, [r4, #28]
 800bf22:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800bf26:	2300      	movs	r3, #0
 800bf28:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800bf2c:	f8c4 c00c 	str.w	ip, [r4, #12]
 800bf30:	6223      	str	r3, [r4, #32]
 800bf32:	4620      	mov	r0, r4
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	078a      	lsls	r2, r1, #30
 800bf3a:	d102      	bne.n	800bf42 <gmtime_r+0x12a>
 800bf3c:	fb07 1616 	mls	r6, r7, r6, r1
 800bf40:	b95e      	cbnz	r6, 800bf5a <gmtime_r+0x142>
 800bf42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800bf46:	fbb1 f6f2 	udiv	r6, r1, r2
 800bf4a:	fb02 1216 	mls	r2, r2, r6, r1
 800bf4e:	fab2 f282 	clz	r2, r2
 800bf52:	0952      	lsrs	r2, r2, #5
 800bf54:	333b      	adds	r3, #59	; 0x3b
 800bf56:	4413      	add	r3, r2
 800bf58:	e7e2      	b.n	800bf20 <gmtime_r+0x108>
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	e7fa      	b.n	800bf54 <gmtime_r+0x13c>
 800bf5e:	bf00      	nop
 800bf60:	00015180 	.word	0x00015180
 800bf64:	00023ab1 	.word	0x00023ab1
 800bf68:	fffdc54f 	.word	0xfffdc54f
 800bf6c:	00023ab0 	.word	0x00023ab0

0800bf70 <__libc_init_array>:
 800bf70:	b570      	push	{r4, r5, r6, lr}
 800bf72:	4d0d      	ldr	r5, [pc, #52]	; (800bfa8 <__libc_init_array+0x38>)
 800bf74:	4c0d      	ldr	r4, [pc, #52]	; (800bfac <__libc_init_array+0x3c>)
 800bf76:	1b64      	subs	r4, r4, r5
 800bf78:	10a4      	asrs	r4, r4, #2
 800bf7a:	2600      	movs	r6, #0
 800bf7c:	42a6      	cmp	r6, r4
 800bf7e:	d109      	bne.n	800bf94 <__libc_init_array+0x24>
 800bf80:	4d0b      	ldr	r5, [pc, #44]	; (800bfb0 <__libc_init_array+0x40>)
 800bf82:	4c0c      	ldr	r4, [pc, #48]	; (800bfb4 <__libc_init_array+0x44>)
 800bf84:	f000 fe2a 	bl	800cbdc <_init>
 800bf88:	1b64      	subs	r4, r4, r5
 800bf8a:	10a4      	asrs	r4, r4, #2
 800bf8c:	2600      	movs	r6, #0
 800bf8e:	42a6      	cmp	r6, r4
 800bf90:	d105      	bne.n	800bf9e <__libc_init_array+0x2e>
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf98:	4798      	blx	r3
 800bf9a:	3601      	adds	r6, #1
 800bf9c:	e7ee      	b.n	800bf7c <__libc_init_array+0xc>
 800bf9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfa2:	4798      	blx	r3
 800bfa4:	3601      	adds	r6, #1
 800bfa6:	e7f2      	b.n	800bf8e <__libc_init_array+0x1e>
 800bfa8:	0800f418 	.word	0x0800f418
 800bfac:	0800f418 	.word	0x0800f418
 800bfb0:	0800f418 	.word	0x0800f418
 800bfb4:	0800f41c 	.word	0x0800f41c

0800bfb8 <__retarget_lock_acquire_recursive>:
 800bfb8:	4770      	bx	lr

0800bfba <__retarget_lock_release_recursive>:
 800bfba:	4770      	bx	lr

0800bfbc <free>:
 800bfbc:	4b02      	ldr	r3, [pc, #8]	; (800bfc8 <free+0xc>)
 800bfbe:	4601      	mov	r1, r0
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	f000 b82f 	b.w	800c024 <_free_r>
 800bfc6:	bf00      	nop
 800bfc8:	20000098 	.word	0x20000098

0800bfcc <memcpy>:
 800bfcc:	440a      	add	r2, r1
 800bfce:	4291      	cmp	r1, r2
 800bfd0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bfd4:	d100      	bne.n	800bfd8 <memcpy+0xc>
 800bfd6:	4770      	bx	lr
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bfe2:	4291      	cmp	r1, r2
 800bfe4:	d1f9      	bne.n	800bfda <memcpy+0xe>
 800bfe6:	bd10      	pop	{r4, pc}

0800bfe8 <memset>:
 800bfe8:	4402      	add	r2, r0
 800bfea:	4603      	mov	r3, r0
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d100      	bne.n	800bff2 <memset+0xa>
 800bff0:	4770      	bx	lr
 800bff2:	f803 1b01 	strb.w	r1, [r3], #1
 800bff6:	e7f9      	b.n	800bfec <memset+0x4>

0800bff8 <_calloc_r>:
 800bff8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bffa:	fba1 2402 	umull	r2, r4, r1, r2
 800bffe:	b94c      	cbnz	r4, 800c014 <_calloc_r+0x1c>
 800c000:	4611      	mov	r1, r2
 800c002:	9201      	str	r2, [sp, #4]
 800c004:	f000 f87a 	bl	800c0fc <_malloc_r>
 800c008:	9a01      	ldr	r2, [sp, #4]
 800c00a:	4605      	mov	r5, r0
 800c00c:	b930      	cbnz	r0, 800c01c <_calloc_r+0x24>
 800c00e:	4628      	mov	r0, r5
 800c010:	b003      	add	sp, #12
 800c012:	bd30      	pop	{r4, r5, pc}
 800c014:	220c      	movs	r2, #12
 800c016:	6002      	str	r2, [r0, #0]
 800c018:	2500      	movs	r5, #0
 800c01a:	e7f8      	b.n	800c00e <_calloc_r+0x16>
 800c01c:	4621      	mov	r1, r4
 800c01e:	f7ff ffe3 	bl	800bfe8 <memset>
 800c022:	e7f4      	b.n	800c00e <_calloc_r+0x16>

0800c024 <_free_r>:
 800c024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c026:	2900      	cmp	r1, #0
 800c028:	d044      	beq.n	800c0b4 <_free_r+0x90>
 800c02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c02e:	9001      	str	r0, [sp, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	f1a1 0404 	sub.w	r4, r1, #4
 800c036:	bfb8      	it	lt
 800c038:	18e4      	addlt	r4, r4, r3
 800c03a:	f000 fa81 	bl	800c540 <__malloc_lock>
 800c03e:	4a1e      	ldr	r2, [pc, #120]	; (800c0b8 <_free_r+0x94>)
 800c040:	9801      	ldr	r0, [sp, #4]
 800c042:	6813      	ldr	r3, [r2, #0]
 800c044:	b933      	cbnz	r3, 800c054 <_free_r+0x30>
 800c046:	6063      	str	r3, [r4, #4]
 800c048:	6014      	str	r4, [r2, #0]
 800c04a:	b003      	add	sp, #12
 800c04c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c050:	f000 ba7c 	b.w	800c54c <__malloc_unlock>
 800c054:	42a3      	cmp	r3, r4
 800c056:	d908      	bls.n	800c06a <_free_r+0x46>
 800c058:	6825      	ldr	r5, [r4, #0]
 800c05a:	1961      	adds	r1, r4, r5
 800c05c:	428b      	cmp	r3, r1
 800c05e:	bf01      	itttt	eq
 800c060:	6819      	ldreq	r1, [r3, #0]
 800c062:	685b      	ldreq	r3, [r3, #4]
 800c064:	1949      	addeq	r1, r1, r5
 800c066:	6021      	streq	r1, [r4, #0]
 800c068:	e7ed      	b.n	800c046 <_free_r+0x22>
 800c06a:	461a      	mov	r2, r3
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	b10b      	cbz	r3, 800c074 <_free_r+0x50>
 800c070:	42a3      	cmp	r3, r4
 800c072:	d9fa      	bls.n	800c06a <_free_r+0x46>
 800c074:	6811      	ldr	r1, [r2, #0]
 800c076:	1855      	adds	r5, r2, r1
 800c078:	42a5      	cmp	r5, r4
 800c07a:	d10b      	bne.n	800c094 <_free_r+0x70>
 800c07c:	6824      	ldr	r4, [r4, #0]
 800c07e:	4421      	add	r1, r4
 800c080:	1854      	adds	r4, r2, r1
 800c082:	42a3      	cmp	r3, r4
 800c084:	6011      	str	r1, [r2, #0]
 800c086:	d1e0      	bne.n	800c04a <_free_r+0x26>
 800c088:	681c      	ldr	r4, [r3, #0]
 800c08a:	685b      	ldr	r3, [r3, #4]
 800c08c:	6053      	str	r3, [r2, #4]
 800c08e:	4421      	add	r1, r4
 800c090:	6011      	str	r1, [r2, #0]
 800c092:	e7da      	b.n	800c04a <_free_r+0x26>
 800c094:	d902      	bls.n	800c09c <_free_r+0x78>
 800c096:	230c      	movs	r3, #12
 800c098:	6003      	str	r3, [r0, #0]
 800c09a:	e7d6      	b.n	800c04a <_free_r+0x26>
 800c09c:	6825      	ldr	r5, [r4, #0]
 800c09e:	1961      	adds	r1, r4, r5
 800c0a0:	428b      	cmp	r3, r1
 800c0a2:	bf04      	itt	eq
 800c0a4:	6819      	ldreq	r1, [r3, #0]
 800c0a6:	685b      	ldreq	r3, [r3, #4]
 800c0a8:	6063      	str	r3, [r4, #4]
 800c0aa:	bf04      	itt	eq
 800c0ac:	1949      	addeq	r1, r1, r5
 800c0ae:	6021      	streq	r1, [r4, #0]
 800c0b0:	6054      	str	r4, [r2, #4]
 800c0b2:	e7ca      	b.n	800c04a <_free_r+0x26>
 800c0b4:	b003      	add	sp, #12
 800c0b6:	bd30      	pop	{r4, r5, pc}
 800c0b8:	200069f4 	.word	0x200069f4

0800c0bc <sbrk_aligned>:
 800c0bc:	b570      	push	{r4, r5, r6, lr}
 800c0be:	4e0e      	ldr	r6, [pc, #56]	; (800c0f8 <sbrk_aligned+0x3c>)
 800c0c0:	460c      	mov	r4, r1
 800c0c2:	6831      	ldr	r1, [r6, #0]
 800c0c4:	4605      	mov	r5, r0
 800c0c6:	b911      	cbnz	r1, 800c0ce <sbrk_aligned+0x12>
 800c0c8:	f000 f8f6 	bl	800c2b8 <_sbrk_r>
 800c0cc:	6030      	str	r0, [r6, #0]
 800c0ce:	4621      	mov	r1, r4
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f000 f8f1 	bl	800c2b8 <_sbrk_r>
 800c0d6:	1c43      	adds	r3, r0, #1
 800c0d8:	d00a      	beq.n	800c0f0 <sbrk_aligned+0x34>
 800c0da:	1cc4      	adds	r4, r0, #3
 800c0dc:	f024 0403 	bic.w	r4, r4, #3
 800c0e0:	42a0      	cmp	r0, r4
 800c0e2:	d007      	beq.n	800c0f4 <sbrk_aligned+0x38>
 800c0e4:	1a21      	subs	r1, r4, r0
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f000 f8e6 	bl	800c2b8 <_sbrk_r>
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d101      	bne.n	800c0f4 <sbrk_aligned+0x38>
 800c0f0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	bd70      	pop	{r4, r5, r6, pc}
 800c0f8:	200069f8 	.word	0x200069f8

0800c0fc <_malloc_r>:
 800c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c100:	1ccd      	adds	r5, r1, #3
 800c102:	f025 0503 	bic.w	r5, r5, #3
 800c106:	3508      	adds	r5, #8
 800c108:	2d0c      	cmp	r5, #12
 800c10a:	bf38      	it	cc
 800c10c:	250c      	movcc	r5, #12
 800c10e:	2d00      	cmp	r5, #0
 800c110:	4607      	mov	r7, r0
 800c112:	db01      	blt.n	800c118 <_malloc_r+0x1c>
 800c114:	42a9      	cmp	r1, r5
 800c116:	d905      	bls.n	800c124 <_malloc_r+0x28>
 800c118:	230c      	movs	r3, #12
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	2600      	movs	r6, #0
 800c11e:	4630      	mov	r0, r6
 800c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c124:	4e2e      	ldr	r6, [pc, #184]	; (800c1e0 <_malloc_r+0xe4>)
 800c126:	f000 fa0b 	bl	800c540 <__malloc_lock>
 800c12a:	6833      	ldr	r3, [r6, #0]
 800c12c:	461c      	mov	r4, r3
 800c12e:	bb34      	cbnz	r4, 800c17e <_malloc_r+0x82>
 800c130:	4629      	mov	r1, r5
 800c132:	4638      	mov	r0, r7
 800c134:	f7ff ffc2 	bl	800c0bc <sbrk_aligned>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	4604      	mov	r4, r0
 800c13c:	d14d      	bne.n	800c1da <_malloc_r+0xde>
 800c13e:	6834      	ldr	r4, [r6, #0]
 800c140:	4626      	mov	r6, r4
 800c142:	2e00      	cmp	r6, #0
 800c144:	d140      	bne.n	800c1c8 <_malloc_r+0xcc>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	4631      	mov	r1, r6
 800c14a:	4638      	mov	r0, r7
 800c14c:	eb04 0803 	add.w	r8, r4, r3
 800c150:	f000 f8b2 	bl	800c2b8 <_sbrk_r>
 800c154:	4580      	cmp	r8, r0
 800c156:	d13a      	bne.n	800c1ce <_malloc_r+0xd2>
 800c158:	6821      	ldr	r1, [r4, #0]
 800c15a:	3503      	adds	r5, #3
 800c15c:	1a6d      	subs	r5, r5, r1
 800c15e:	f025 0503 	bic.w	r5, r5, #3
 800c162:	3508      	adds	r5, #8
 800c164:	2d0c      	cmp	r5, #12
 800c166:	bf38      	it	cc
 800c168:	250c      	movcc	r5, #12
 800c16a:	4629      	mov	r1, r5
 800c16c:	4638      	mov	r0, r7
 800c16e:	f7ff ffa5 	bl	800c0bc <sbrk_aligned>
 800c172:	3001      	adds	r0, #1
 800c174:	d02b      	beq.n	800c1ce <_malloc_r+0xd2>
 800c176:	6823      	ldr	r3, [r4, #0]
 800c178:	442b      	add	r3, r5
 800c17a:	6023      	str	r3, [r4, #0]
 800c17c:	e00e      	b.n	800c19c <_malloc_r+0xa0>
 800c17e:	6822      	ldr	r2, [r4, #0]
 800c180:	1b52      	subs	r2, r2, r5
 800c182:	d41e      	bmi.n	800c1c2 <_malloc_r+0xc6>
 800c184:	2a0b      	cmp	r2, #11
 800c186:	d916      	bls.n	800c1b6 <_malloc_r+0xba>
 800c188:	1961      	adds	r1, r4, r5
 800c18a:	42a3      	cmp	r3, r4
 800c18c:	6025      	str	r5, [r4, #0]
 800c18e:	bf18      	it	ne
 800c190:	6059      	strne	r1, [r3, #4]
 800c192:	6863      	ldr	r3, [r4, #4]
 800c194:	bf08      	it	eq
 800c196:	6031      	streq	r1, [r6, #0]
 800c198:	5162      	str	r2, [r4, r5]
 800c19a:	604b      	str	r3, [r1, #4]
 800c19c:	4638      	mov	r0, r7
 800c19e:	f104 060b 	add.w	r6, r4, #11
 800c1a2:	f000 f9d3 	bl	800c54c <__malloc_unlock>
 800c1a6:	f026 0607 	bic.w	r6, r6, #7
 800c1aa:	1d23      	adds	r3, r4, #4
 800c1ac:	1af2      	subs	r2, r6, r3
 800c1ae:	d0b6      	beq.n	800c11e <_malloc_r+0x22>
 800c1b0:	1b9b      	subs	r3, r3, r6
 800c1b2:	50a3      	str	r3, [r4, r2]
 800c1b4:	e7b3      	b.n	800c11e <_malloc_r+0x22>
 800c1b6:	6862      	ldr	r2, [r4, #4]
 800c1b8:	42a3      	cmp	r3, r4
 800c1ba:	bf0c      	ite	eq
 800c1bc:	6032      	streq	r2, [r6, #0]
 800c1be:	605a      	strne	r2, [r3, #4]
 800c1c0:	e7ec      	b.n	800c19c <_malloc_r+0xa0>
 800c1c2:	4623      	mov	r3, r4
 800c1c4:	6864      	ldr	r4, [r4, #4]
 800c1c6:	e7b2      	b.n	800c12e <_malloc_r+0x32>
 800c1c8:	4634      	mov	r4, r6
 800c1ca:	6876      	ldr	r6, [r6, #4]
 800c1cc:	e7b9      	b.n	800c142 <_malloc_r+0x46>
 800c1ce:	230c      	movs	r3, #12
 800c1d0:	603b      	str	r3, [r7, #0]
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	f000 f9ba 	bl	800c54c <__malloc_unlock>
 800c1d8:	e7a1      	b.n	800c11e <_malloc_r+0x22>
 800c1da:	6025      	str	r5, [r4, #0]
 800c1dc:	e7de      	b.n	800c19c <_malloc_r+0xa0>
 800c1de:	bf00      	nop
 800c1e0:	200069f4 	.word	0x200069f4

0800c1e4 <cleanup_glue>:
 800c1e4:	b538      	push	{r3, r4, r5, lr}
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	6809      	ldr	r1, [r1, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	b109      	cbz	r1, 800c1f2 <cleanup_glue+0xe>
 800c1ee:	f7ff fff9 	bl	800c1e4 <cleanup_glue>
 800c1f2:	4621      	mov	r1, r4
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1fa:	f7ff bf13 	b.w	800c024 <_free_r>
	...

0800c200 <_reclaim_reent>:
 800c200:	4b2c      	ldr	r3, [pc, #176]	; (800c2b4 <_reclaim_reent+0xb4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4283      	cmp	r3, r0
 800c206:	b570      	push	{r4, r5, r6, lr}
 800c208:	4604      	mov	r4, r0
 800c20a:	d051      	beq.n	800c2b0 <_reclaim_reent+0xb0>
 800c20c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c20e:	b143      	cbz	r3, 800c222 <_reclaim_reent+0x22>
 800c210:	68db      	ldr	r3, [r3, #12]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d14a      	bne.n	800c2ac <_reclaim_reent+0xac>
 800c216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c218:	6819      	ldr	r1, [r3, #0]
 800c21a:	b111      	cbz	r1, 800c222 <_reclaim_reent+0x22>
 800c21c:	4620      	mov	r0, r4
 800c21e:	f7ff ff01 	bl	800c024 <_free_r>
 800c222:	6961      	ldr	r1, [r4, #20]
 800c224:	b111      	cbz	r1, 800c22c <_reclaim_reent+0x2c>
 800c226:	4620      	mov	r0, r4
 800c228:	f7ff fefc 	bl	800c024 <_free_r>
 800c22c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c22e:	b111      	cbz	r1, 800c236 <_reclaim_reent+0x36>
 800c230:	4620      	mov	r0, r4
 800c232:	f7ff fef7 	bl	800c024 <_free_r>
 800c236:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c238:	b111      	cbz	r1, 800c240 <_reclaim_reent+0x40>
 800c23a:	4620      	mov	r0, r4
 800c23c:	f7ff fef2 	bl	800c024 <_free_r>
 800c240:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c242:	b111      	cbz	r1, 800c24a <_reclaim_reent+0x4a>
 800c244:	4620      	mov	r0, r4
 800c246:	f7ff feed 	bl	800c024 <_free_r>
 800c24a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c24c:	b111      	cbz	r1, 800c254 <_reclaim_reent+0x54>
 800c24e:	4620      	mov	r0, r4
 800c250:	f7ff fee8 	bl	800c024 <_free_r>
 800c254:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c256:	b111      	cbz	r1, 800c25e <_reclaim_reent+0x5e>
 800c258:	4620      	mov	r0, r4
 800c25a:	f7ff fee3 	bl	800c024 <_free_r>
 800c25e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c260:	b111      	cbz	r1, 800c268 <_reclaim_reent+0x68>
 800c262:	4620      	mov	r0, r4
 800c264:	f7ff fede 	bl	800c024 <_free_r>
 800c268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c26a:	b111      	cbz	r1, 800c272 <_reclaim_reent+0x72>
 800c26c:	4620      	mov	r0, r4
 800c26e:	f7ff fed9 	bl	800c024 <_free_r>
 800c272:	69a3      	ldr	r3, [r4, #24]
 800c274:	b1e3      	cbz	r3, 800c2b0 <_reclaim_reent+0xb0>
 800c276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c278:	4620      	mov	r0, r4
 800c27a:	4798      	blx	r3
 800c27c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c27e:	b1b9      	cbz	r1, 800c2b0 <_reclaim_reent+0xb0>
 800c280:	4620      	mov	r0, r4
 800c282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c286:	f7ff bfad 	b.w	800c1e4 <cleanup_glue>
 800c28a:	5949      	ldr	r1, [r1, r5]
 800c28c:	b941      	cbnz	r1, 800c2a0 <_reclaim_reent+0xa0>
 800c28e:	3504      	adds	r5, #4
 800c290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c292:	2d80      	cmp	r5, #128	; 0x80
 800c294:	68d9      	ldr	r1, [r3, #12]
 800c296:	d1f8      	bne.n	800c28a <_reclaim_reent+0x8a>
 800c298:	4620      	mov	r0, r4
 800c29a:	f7ff fec3 	bl	800c024 <_free_r>
 800c29e:	e7ba      	b.n	800c216 <_reclaim_reent+0x16>
 800c2a0:	680e      	ldr	r6, [r1, #0]
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f7ff febe 	bl	800c024 <_free_r>
 800c2a8:	4631      	mov	r1, r6
 800c2aa:	e7ef      	b.n	800c28c <_reclaim_reent+0x8c>
 800c2ac:	2500      	movs	r5, #0
 800c2ae:	e7ef      	b.n	800c290 <_reclaim_reent+0x90>
 800c2b0:	bd70      	pop	{r4, r5, r6, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000098 	.word	0x20000098

0800c2b8 <_sbrk_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_sbrk_r+0x1c>)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	f7f7 fc94 	bl	8003bf0 <_sbrk>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_sbrk_r+0x1a>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_sbrk_r+0x1a>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	200069fc 	.word	0x200069fc

0800c2d8 <siprintf>:
 800c2d8:	b40e      	push	{r1, r2, r3}
 800c2da:	b500      	push	{lr}
 800c2dc:	b09c      	sub	sp, #112	; 0x70
 800c2de:	ab1d      	add	r3, sp, #116	; 0x74
 800c2e0:	9002      	str	r0, [sp, #8]
 800c2e2:	9006      	str	r0, [sp, #24]
 800c2e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2e8:	4809      	ldr	r0, [pc, #36]	; (800c310 <siprintf+0x38>)
 800c2ea:	9107      	str	r1, [sp, #28]
 800c2ec:	9104      	str	r1, [sp, #16]
 800c2ee:	4909      	ldr	r1, [pc, #36]	; (800c314 <siprintf+0x3c>)
 800c2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2f4:	9105      	str	r1, [sp, #20]
 800c2f6:	6800      	ldr	r0, [r0, #0]
 800c2f8:	9301      	str	r3, [sp, #4]
 800c2fa:	a902      	add	r1, sp, #8
 800c2fc:	f000 f988 	bl	800c610 <_svfiprintf_r>
 800c300:	9b02      	ldr	r3, [sp, #8]
 800c302:	2200      	movs	r2, #0
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	b01c      	add	sp, #112	; 0x70
 800c308:	f85d eb04 	ldr.w	lr, [sp], #4
 800c30c:	b003      	add	sp, #12
 800c30e:	4770      	bx	lr
 800c310:	20000098 	.word	0x20000098
 800c314:	ffff0208 	.word	0xffff0208

0800c318 <strcat>:
 800c318:	b510      	push	{r4, lr}
 800c31a:	4602      	mov	r2, r0
 800c31c:	7814      	ldrb	r4, [r2, #0]
 800c31e:	4613      	mov	r3, r2
 800c320:	3201      	adds	r2, #1
 800c322:	2c00      	cmp	r4, #0
 800c324:	d1fa      	bne.n	800c31c <strcat+0x4>
 800c326:	3b01      	subs	r3, #1
 800c328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c32c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c330:	2a00      	cmp	r2, #0
 800c332:	d1f9      	bne.n	800c328 <strcat+0x10>
 800c334:	bd10      	pop	{r4, pc}

0800c336 <strchr>:
 800c336:	b2c9      	uxtb	r1, r1
 800c338:	4603      	mov	r3, r0
 800c33a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c33e:	b11a      	cbz	r2, 800c348 <strchr+0x12>
 800c340:	428a      	cmp	r2, r1
 800c342:	d1f9      	bne.n	800c338 <strchr+0x2>
 800c344:	4618      	mov	r0, r3
 800c346:	4770      	bx	lr
 800c348:	2900      	cmp	r1, #0
 800c34a:	bf18      	it	ne
 800c34c:	2300      	movne	r3, #0
 800c34e:	e7f9      	b.n	800c344 <strchr+0xe>

0800c350 <strcpy>:
 800c350:	4603      	mov	r3, r0
 800c352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c356:	f803 2b01 	strb.w	r2, [r3], #1
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	d1f9      	bne.n	800c352 <strcpy+0x2>
 800c35e:	4770      	bx	lr

0800c360 <strncpy>:
 800c360:	b510      	push	{r4, lr}
 800c362:	3901      	subs	r1, #1
 800c364:	4603      	mov	r3, r0
 800c366:	b132      	cbz	r2, 800c376 <strncpy+0x16>
 800c368:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c36c:	f803 4b01 	strb.w	r4, [r3], #1
 800c370:	3a01      	subs	r2, #1
 800c372:	2c00      	cmp	r4, #0
 800c374:	d1f7      	bne.n	800c366 <strncpy+0x6>
 800c376:	441a      	add	r2, r3
 800c378:	2100      	movs	r1, #0
 800c37a:	4293      	cmp	r3, r2
 800c37c:	d100      	bne.n	800c380 <strncpy+0x20>
 800c37e:	bd10      	pop	{r4, pc}
 800c380:	f803 1b01 	strb.w	r1, [r3], #1
 800c384:	e7f9      	b.n	800c37a <strncpy+0x1a>

0800c386 <strstr>:
 800c386:	780a      	ldrb	r2, [r1, #0]
 800c388:	b570      	push	{r4, r5, r6, lr}
 800c38a:	b96a      	cbnz	r2, 800c3a8 <strstr+0x22>
 800c38c:	bd70      	pop	{r4, r5, r6, pc}
 800c38e:	429a      	cmp	r2, r3
 800c390:	d109      	bne.n	800c3a6 <strstr+0x20>
 800c392:	460c      	mov	r4, r1
 800c394:	4605      	mov	r5, r0
 800c396:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d0f6      	beq.n	800c38c <strstr+0x6>
 800c39e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c3a2:	429e      	cmp	r6, r3
 800c3a4:	d0f7      	beq.n	800c396 <strstr+0x10>
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	7803      	ldrb	r3, [r0, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1ef      	bne.n	800c38e <strstr+0x8>
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	e7ec      	b.n	800c38c <strstr+0x6>
	...

0800c3b4 <_strtol_l.constprop.0>:
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3ba:	d001      	beq.n	800c3c0 <_strtol_l.constprop.0+0xc>
 800c3bc:	2b24      	cmp	r3, #36	; 0x24
 800c3be:	d906      	bls.n	800c3ce <_strtol_l.constprop.0+0x1a>
 800c3c0:	f7ff fd24 	bl	800be0c <__errno>
 800c3c4:	2316      	movs	r3, #22
 800c3c6:	6003      	str	r3, [r0, #0]
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4b4 <_strtol_l.constprop.0+0x100>
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	462e      	mov	r6, r5
 800c3d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3da:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c3de:	f017 0708 	ands.w	r7, r7, #8
 800c3e2:	d1f7      	bne.n	800c3d4 <_strtol_l.constprop.0+0x20>
 800c3e4:	2c2d      	cmp	r4, #45	; 0x2d
 800c3e6:	d132      	bne.n	800c44e <_strtol_l.constprop.0+0x9a>
 800c3e8:	782c      	ldrb	r4, [r5, #0]
 800c3ea:	2701      	movs	r7, #1
 800c3ec:	1cb5      	adds	r5, r6, #2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d05b      	beq.n	800c4aa <_strtol_l.constprop.0+0xf6>
 800c3f2:	2b10      	cmp	r3, #16
 800c3f4:	d109      	bne.n	800c40a <_strtol_l.constprop.0+0x56>
 800c3f6:	2c30      	cmp	r4, #48	; 0x30
 800c3f8:	d107      	bne.n	800c40a <_strtol_l.constprop.0+0x56>
 800c3fa:	782c      	ldrb	r4, [r5, #0]
 800c3fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c400:	2c58      	cmp	r4, #88	; 0x58
 800c402:	d14d      	bne.n	800c4a0 <_strtol_l.constprop.0+0xec>
 800c404:	786c      	ldrb	r4, [r5, #1]
 800c406:	2310      	movs	r3, #16
 800c408:	3502      	adds	r5, #2
 800c40a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c40e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c412:	f04f 0c00 	mov.w	ip, #0
 800c416:	fbb8 f9f3 	udiv	r9, r8, r3
 800c41a:	4666      	mov	r6, ip
 800c41c:	fb03 8a19 	mls	sl, r3, r9, r8
 800c420:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c424:	f1be 0f09 	cmp.w	lr, #9
 800c428:	d816      	bhi.n	800c458 <_strtol_l.constprop.0+0xa4>
 800c42a:	4674      	mov	r4, lr
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	dd24      	ble.n	800c47a <_strtol_l.constprop.0+0xc6>
 800c430:	f1bc 0f00 	cmp.w	ip, #0
 800c434:	db1e      	blt.n	800c474 <_strtol_l.constprop.0+0xc0>
 800c436:	45b1      	cmp	r9, r6
 800c438:	d31c      	bcc.n	800c474 <_strtol_l.constprop.0+0xc0>
 800c43a:	d101      	bne.n	800c440 <_strtol_l.constprop.0+0x8c>
 800c43c:	45a2      	cmp	sl, r4
 800c43e:	db19      	blt.n	800c474 <_strtol_l.constprop.0+0xc0>
 800c440:	fb06 4603 	mla	r6, r6, r3, r4
 800c444:	f04f 0c01 	mov.w	ip, #1
 800c448:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c44c:	e7e8      	b.n	800c420 <_strtol_l.constprop.0+0x6c>
 800c44e:	2c2b      	cmp	r4, #43	; 0x2b
 800c450:	bf04      	itt	eq
 800c452:	782c      	ldrbeq	r4, [r5, #0]
 800c454:	1cb5      	addeq	r5, r6, #2
 800c456:	e7ca      	b.n	800c3ee <_strtol_l.constprop.0+0x3a>
 800c458:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c45c:	f1be 0f19 	cmp.w	lr, #25
 800c460:	d801      	bhi.n	800c466 <_strtol_l.constprop.0+0xb2>
 800c462:	3c37      	subs	r4, #55	; 0x37
 800c464:	e7e2      	b.n	800c42c <_strtol_l.constprop.0+0x78>
 800c466:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c46a:	f1be 0f19 	cmp.w	lr, #25
 800c46e:	d804      	bhi.n	800c47a <_strtol_l.constprop.0+0xc6>
 800c470:	3c57      	subs	r4, #87	; 0x57
 800c472:	e7db      	b.n	800c42c <_strtol_l.constprop.0+0x78>
 800c474:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800c478:	e7e6      	b.n	800c448 <_strtol_l.constprop.0+0x94>
 800c47a:	f1bc 0f00 	cmp.w	ip, #0
 800c47e:	da05      	bge.n	800c48c <_strtol_l.constprop.0+0xd8>
 800c480:	2322      	movs	r3, #34	; 0x22
 800c482:	6003      	str	r3, [r0, #0]
 800c484:	4646      	mov	r6, r8
 800c486:	b942      	cbnz	r2, 800c49a <_strtol_l.constprop.0+0xe6>
 800c488:	4630      	mov	r0, r6
 800c48a:	e79e      	b.n	800c3ca <_strtol_l.constprop.0+0x16>
 800c48c:	b107      	cbz	r7, 800c490 <_strtol_l.constprop.0+0xdc>
 800c48e:	4276      	negs	r6, r6
 800c490:	2a00      	cmp	r2, #0
 800c492:	d0f9      	beq.n	800c488 <_strtol_l.constprop.0+0xd4>
 800c494:	f1bc 0f00 	cmp.w	ip, #0
 800c498:	d000      	beq.n	800c49c <_strtol_l.constprop.0+0xe8>
 800c49a:	1e69      	subs	r1, r5, #1
 800c49c:	6011      	str	r1, [r2, #0]
 800c49e:	e7f3      	b.n	800c488 <_strtol_l.constprop.0+0xd4>
 800c4a0:	2430      	movs	r4, #48	; 0x30
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1b1      	bne.n	800c40a <_strtol_l.constprop.0+0x56>
 800c4a6:	2308      	movs	r3, #8
 800c4a8:	e7af      	b.n	800c40a <_strtol_l.constprop.0+0x56>
 800c4aa:	2c30      	cmp	r4, #48	; 0x30
 800c4ac:	d0a5      	beq.n	800c3fa <_strtol_l.constprop.0+0x46>
 800c4ae:	230a      	movs	r3, #10
 800c4b0:	e7ab      	b.n	800c40a <_strtol_l.constprop.0+0x56>
 800c4b2:	bf00      	nop
 800c4b4:	0800f2dd 	.word	0x0800f2dd

0800c4b8 <strtol>:
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	460a      	mov	r2, r1
 800c4bc:	4601      	mov	r1, r0
 800c4be:	4802      	ldr	r0, [pc, #8]	; (800c4c8 <strtol+0x10>)
 800c4c0:	6800      	ldr	r0, [r0, #0]
 800c4c2:	f7ff bf77 	b.w	800c3b4 <_strtol_l.constprop.0>
 800c4c6:	bf00      	nop
 800c4c8:	20000098 	.word	0x20000098

0800c4cc <_vsniprintf_r>:
 800c4cc:	b530      	push	{r4, r5, lr}
 800c4ce:	4614      	mov	r4, r2
 800c4d0:	2c00      	cmp	r4, #0
 800c4d2:	b09b      	sub	sp, #108	; 0x6c
 800c4d4:	4605      	mov	r5, r0
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	da05      	bge.n	800c4e6 <_vsniprintf_r+0x1a>
 800c4da:	238b      	movs	r3, #139	; 0x8b
 800c4dc:	6003      	str	r3, [r0, #0]
 800c4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e2:	b01b      	add	sp, #108	; 0x6c
 800c4e4:	bd30      	pop	{r4, r5, pc}
 800c4e6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c4ea:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c4ee:	bf14      	ite	ne
 800c4f0:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c4f4:	4623      	moveq	r3, r4
 800c4f6:	9302      	str	r3, [sp, #8]
 800c4f8:	9305      	str	r3, [sp, #20]
 800c4fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c4fe:	9100      	str	r1, [sp, #0]
 800c500:	9104      	str	r1, [sp, #16]
 800c502:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c506:	4669      	mov	r1, sp
 800c508:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c50a:	f000 f881 	bl	800c610 <_svfiprintf_r>
 800c50e:	1c43      	adds	r3, r0, #1
 800c510:	bfbc      	itt	lt
 800c512:	238b      	movlt	r3, #139	; 0x8b
 800c514:	602b      	strlt	r3, [r5, #0]
 800c516:	2c00      	cmp	r4, #0
 800c518:	d0e3      	beq.n	800c4e2 <_vsniprintf_r+0x16>
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	2200      	movs	r2, #0
 800c51e:	701a      	strb	r2, [r3, #0]
 800c520:	e7df      	b.n	800c4e2 <_vsniprintf_r+0x16>
	...

0800c524 <vsniprintf>:
 800c524:	b507      	push	{r0, r1, r2, lr}
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4613      	mov	r3, r2
 800c52a:	460a      	mov	r2, r1
 800c52c:	4601      	mov	r1, r0
 800c52e:	4803      	ldr	r0, [pc, #12]	; (800c53c <vsniprintf+0x18>)
 800c530:	6800      	ldr	r0, [r0, #0]
 800c532:	f7ff ffcb 	bl	800c4cc <_vsniprintf_r>
 800c536:	b003      	add	sp, #12
 800c538:	f85d fb04 	ldr.w	pc, [sp], #4
 800c53c:	20000098 	.word	0x20000098

0800c540 <__malloc_lock>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__malloc_lock+0x8>)
 800c542:	f7ff bd39 	b.w	800bfb8 <__retarget_lock_acquire_recursive>
 800c546:	bf00      	nop
 800c548:	200069f0 	.word	0x200069f0

0800c54c <__malloc_unlock>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__malloc_unlock+0x8>)
 800c54e:	f7ff bd34 	b.w	800bfba <__retarget_lock_release_recursive>
 800c552:	bf00      	nop
 800c554:	200069f0 	.word	0x200069f0

0800c558 <__ssputs_r>:
 800c558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c55c:	688e      	ldr	r6, [r1, #8]
 800c55e:	429e      	cmp	r6, r3
 800c560:	4682      	mov	sl, r0
 800c562:	460c      	mov	r4, r1
 800c564:	4690      	mov	r8, r2
 800c566:	461f      	mov	r7, r3
 800c568:	d838      	bhi.n	800c5dc <__ssputs_r+0x84>
 800c56a:	898a      	ldrh	r2, [r1, #12]
 800c56c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c570:	d032      	beq.n	800c5d8 <__ssputs_r+0x80>
 800c572:	6825      	ldr	r5, [r4, #0]
 800c574:	6909      	ldr	r1, [r1, #16]
 800c576:	eba5 0901 	sub.w	r9, r5, r1
 800c57a:	6965      	ldr	r5, [r4, #20]
 800c57c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c580:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c584:	3301      	adds	r3, #1
 800c586:	444b      	add	r3, r9
 800c588:	106d      	asrs	r5, r5, #1
 800c58a:	429d      	cmp	r5, r3
 800c58c:	bf38      	it	cc
 800c58e:	461d      	movcc	r5, r3
 800c590:	0553      	lsls	r3, r2, #21
 800c592:	d531      	bpl.n	800c5f8 <__ssputs_r+0xa0>
 800c594:	4629      	mov	r1, r5
 800c596:	f7ff fdb1 	bl	800c0fc <_malloc_r>
 800c59a:	4606      	mov	r6, r0
 800c59c:	b950      	cbnz	r0, 800c5b4 <__ssputs_r+0x5c>
 800c59e:	230c      	movs	r3, #12
 800c5a0:	f8ca 3000 	str.w	r3, [sl]
 800c5a4:	89a3      	ldrh	r3, [r4, #12]
 800c5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5aa:	81a3      	strh	r3, [r4, #12]
 800c5ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b4:	6921      	ldr	r1, [r4, #16]
 800c5b6:	464a      	mov	r2, r9
 800c5b8:	f7ff fd08 	bl	800bfcc <memcpy>
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5c6:	81a3      	strh	r3, [r4, #12]
 800c5c8:	6126      	str	r6, [r4, #16]
 800c5ca:	6165      	str	r5, [r4, #20]
 800c5cc:	444e      	add	r6, r9
 800c5ce:	eba5 0509 	sub.w	r5, r5, r9
 800c5d2:	6026      	str	r6, [r4, #0]
 800c5d4:	60a5      	str	r5, [r4, #8]
 800c5d6:	463e      	mov	r6, r7
 800c5d8:	42be      	cmp	r6, r7
 800c5da:	d900      	bls.n	800c5de <__ssputs_r+0x86>
 800c5dc:	463e      	mov	r6, r7
 800c5de:	6820      	ldr	r0, [r4, #0]
 800c5e0:	4632      	mov	r2, r6
 800c5e2:	4641      	mov	r1, r8
 800c5e4:	f000 faa8 	bl	800cb38 <memmove>
 800c5e8:	68a3      	ldr	r3, [r4, #8]
 800c5ea:	1b9b      	subs	r3, r3, r6
 800c5ec:	60a3      	str	r3, [r4, #8]
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	4433      	add	r3, r6
 800c5f2:	6023      	str	r3, [r4, #0]
 800c5f4:	2000      	movs	r0, #0
 800c5f6:	e7db      	b.n	800c5b0 <__ssputs_r+0x58>
 800c5f8:	462a      	mov	r2, r5
 800c5fa:	f000 fab7 	bl	800cb6c <_realloc_r>
 800c5fe:	4606      	mov	r6, r0
 800c600:	2800      	cmp	r0, #0
 800c602:	d1e1      	bne.n	800c5c8 <__ssputs_r+0x70>
 800c604:	6921      	ldr	r1, [r4, #16]
 800c606:	4650      	mov	r0, sl
 800c608:	f7ff fd0c 	bl	800c024 <_free_r>
 800c60c:	e7c7      	b.n	800c59e <__ssputs_r+0x46>
	...

0800c610 <_svfiprintf_r>:
 800c610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c614:	4698      	mov	r8, r3
 800c616:	898b      	ldrh	r3, [r1, #12]
 800c618:	061b      	lsls	r3, r3, #24
 800c61a:	b09d      	sub	sp, #116	; 0x74
 800c61c:	4607      	mov	r7, r0
 800c61e:	460d      	mov	r5, r1
 800c620:	4614      	mov	r4, r2
 800c622:	d50e      	bpl.n	800c642 <_svfiprintf_r+0x32>
 800c624:	690b      	ldr	r3, [r1, #16]
 800c626:	b963      	cbnz	r3, 800c642 <_svfiprintf_r+0x32>
 800c628:	2140      	movs	r1, #64	; 0x40
 800c62a:	f7ff fd67 	bl	800c0fc <_malloc_r>
 800c62e:	6028      	str	r0, [r5, #0]
 800c630:	6128      	str	r0, [r5, #16]
 800c632:	b920      	cbnz	r0, 800c63e <_svfiprintf_r+0x2e>
 800c634:	230c      	movs	r3, #12
 800c636:	603b      	str	r3, [r7, #0]
 800c638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c63c:	e0d1      	b.n	800c7e2 <_svfiprintf_r+0x1d2>
 800c63e:	2340      	movs	r3, #64	; 0x40
 800c640:	616b      	str	r3, [r5, #20]
 800c642:	2300      	movs	r3, #0
 800c644:	9309      	str	r3, [sp, #36]	; 0x24
 800c646:	2320      	movs	r3, #32
 800c648:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c64c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c650:	2330      	movs	r3, #48	; 0x30
 800c652:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c7fc <_svfiprintf_r+0x1ec>
 800c656:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c65a:	f04f 0901 	mov.w	r9, #1
 800c65e:	4623      	mov	r3, r4
 800c660:	469a      	mov	sl, r3
 800c662:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c666:	b10a      	cbz	r2, 800c66c <_svfiprintf_r+0x5c>
 800c668:	2a25      	cmp	r2, #37	; 0x25
 800c66a:	d1f9      	bne.n	800c660 <_svfiprintf_r+0x50>
 800c66c:	ebba 0b04 	subs.w	fp, sl, r4
 800c670:	d00b      	beq.n	800c68a <_svfiprintf_r+0x7a>
 800c672:	465b      	mov	r3, fp
 800c674:	4622      	mov	r2, r4
 800c676:	4629      	mov	r1, r5
 800c678:	4638      	mov	r0, r7
 800c67a:	f7ff ff6d 	bl	800c558 <__ssputs_r>
 800c67e:	3001      	adds	r0, #1
 800c680:	f000 80aa 	beq.w	800c7d8 <_svfiprintf_r+0x1c8>
 800c684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c686:	445a      	add	r2, fp
 800c688:	9209      	str	r2, [sp, #36]	; 0x24
 800c68a:	f89a 3000 	ldrb.w	r3, [sl]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 80a2 	beq.w	800c7d8 <_svfiprintf_r+0x1c8>
 800c694:	2300      	movs	r3, #0
 800c696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c69a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c69e:	f10a 0a01 	add.w	sl, sl, #1
 800c6a2:	9304      	str	r3, [sp, #16]
 800c6a4:	9307      	str	r3, [sp, #28]
 800c6a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c6ac:	4654      	mov	r4, sl
 800c6ae:	2205      	movs	r2, #5
 800c6b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b4:	4851      	ldr	r0, [pc, #324]	; (800c7fc <_svfiprintf_r+0x1ec>)
 800c6b6:	f7f3 fd93 	bl	80001e0 <memchr>
 800c6ba:	9a04      	ldr	r2, [sp, #16]
 800c6bc:	b9d8      	cbnz	r0, 800c6f6 <_svfiprintf_r+0xe6>
 800c6be:	06d0      	lsls	r0, r2, #27
 800c6c0:	bf44      	itt	mi
 800c6c2:	2320      	movmi	r3, #32
 800c6c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c8:	0711      	lsls	r1, r2, #28
 800c6ca:	bf44      	itt	mi
 800c6cc:	232b      	movmi	r3, #43	; 0x2b
 800c6ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d8:	d015      	beq.n	800c706 <_svfiprintf_r+0xf6>
 800c6da:	9a07      	ldr	r2, [sp, #28]
 800c6dc:	4654      	mov	r4, sl
 800c6de:	2000      	movs	r0, #0
 800c6e0:	f04f 0c0a 	mov.w	ip, #10
 800c6e4:	4621      	mov	r1, r4
 800c6e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6ea:	3b30      	subs	r3, #48	; 0x30
 800c6ec:	2b09      	cmp	r3, #9
 800c6ee:	d94e      	bls.n	800c78e <_svfiprintf_r+0x17e>
 800c6f0:	b1b0      	cbz	r0, 800c720 <_svfiprintf_r+0x110>
 800c6f2:	9207      	str	r2, [sp, #28]
 800c6f4:	e014      	b.n	800c720 <_svfiprintf_r+0x110>
 800c6f6:	eba0 0308 	sub.w	r3, r0, r8
 800c6fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c6fe:	4313      	orrs	r3, r2
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	46a2      	mov	sl, r4
 800c704:	e7d2      	b.n	800c6ac <_svfiprintf_r+0x9c>
 800c706:	9b03      	ldr	r3, [sp, #12]
 800c708:	1d19      	adds	r1, r3, #4
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	9103      	str	r1, [sp, #12]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	bfbb      	ittet	lt
 800c712:	425b      	neglt	r3, r3
 800c714:	f042 0202 	orrlt.w	r2, r2, #2
 800c718:	9307      	strge	r3, [sp, #28]
 800c71a:	9307      	strlt	r3, [sp, #28]
 800c71c:	bfb8      	it	lt
 800c71e:	9204      	strlt	r2, [sp, #16]
 800c720:	7823      	ldrb	r3, [r4, #0]
 800c722:	2b2e      	cmp	r3, #46	; 0x2e
 800c724:	d10c      	bne.n	800c740 <_svfiprintf_r+0x130>
 800c726:	7863      	ldrb	r3, [r4, #1]
 800c728:	2b2a      	cmp	r3, #42	; 0x2a
 800c72a:	d135      	bne.n	800c798 <_svfiprintf_r+0x188>
 800c72c:	9b03      	ldr	r3, [sp, #12]
 800c72e:	1d1a      	adds	r2, r3, #4
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	9203      	str	r2, [sp, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	bfb8      	it	lt
 800c738:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c73c:	3402      	adds	r4, #2
 800c73e:	9305      	str	r3, [sp, #20]
 800c740:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c80c <_svfiprintf_r+0x1fc>
 800c744:	7821      	ldrb	r1, [r4, #0]
 800c746:	2203      	movs	r2, #3
 800c748:	4650      	mov	r0, sl
 800c74a:	f7f3 fd49 	bl	80001e0 <memchr>
 800c74e:	b140      	cbz	r0, 800c762 <_svfiprintf_r+0x152>
 800c750:	2340      	movs	r3, #64	; 0x40
 800c752:	eba0 000a 	sub.w	r0, r0, sl
 800c756:	fa03 f000 	lsl.w	r0, r3, r0
 800c75a:	9b04      	ldr	r3, [sp, #16]
 800c75c:	4303      	orrs	r3, r0
 800c75e:	3401      	adds	r4, #1
 800c760:	9304      	str	r3, [sp, #16]
 800c762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c766:	4826      	ldr	r0, [pc, #152]	; (800c800 <_svfiprintf_r+0x1f0>)
 800c768:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c76c:	2206      	movs	r2, #6
 800c76e:	f7f3 fd37 	bl	80001e0 <memchr>
 800c772:	2800      	cmp	r0, #0
 800c774:	d038      	beq.n	800c7e8 <_svfiprintf_r+0x1d8>
 800c776:	4b23      	ldr	r3, [pc, #140]	; (800c804 <_svfiprintf_r+0x1f4>)
 800c778:	bb1b      	cbnz	r3, 800c7c2 <_svfiprintf_r+0x1b2>
 800c77a:	9b03      	ldr	r3, [sp, #12]
 800c77c:	3307      	adds	r3, #7
 800c77e:	f023 0307 	bic.w	r3, r3, #7
 800c782:	3308      	adds	r3, #8
 800c784:	9303      	str	r3, [sp, #12]
 800c786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c788:	4433      	add	r3, r6
 800c78a:	9309      	str	r3, [sp, #36]	; 0x24
 800c78c:	e767      	b.n	800c65e <_svfiprintf_r+0x4e>
 800c78e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c792:	460c      	mov	r4, r1
 800c794:	2001      	movs	r0, #1
 800c796:	e7a5      	b.n	800c6e4 <_svfiprintf_r+0xd4>
 800c798:	2300      	movs	r3, #0
 800c79a:	3401      	adds	r4, #1
 800c79c:	9305      	str	r3, [sp, #20]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	f04f 0c0a 	mov.w	ip, #10
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7aa:	3a30      	subs	r2, #48	; 0x30
 800c7ac:	2a09      	cmp	r2, #9
 800c7ae:	d903      	bls.n	800c7b8 <_svfiprintf_r+0x1a8>
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0c5      	beq.n	800c740 <_svfiprintf_r+0x130>
 800c7b4:	9105      	str	r1, [sp, #20]
 800c7b6:	e7c3      	b.n	800c740 <_svfiprintf_r+0x130>
 800c7b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7bc:	4604      	mov	r4, r0
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e7f0      	b.n	800c7a4 <_svfiprintf_r+0x194>
 800c7c2:	ab03      	add	r3, sp, #12
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4b0f      	ldr	r3, [pc, #60]	; (800c808 <_svfiprintf_r+0x1f8>)
 800c7ca:	a904      	add	r1, sp, #16
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f3af 8000 	nop.w
 800c7d2:	1c42      	adds	r2, r0, #1
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	d1d6      	bne.n	800c786 <_svfiprintf_r+0x176>
 800c7d8:	89ab      	ldrh	r3, [r5, #12]
 800c7da:	065b      	lsls	r3, r3, #25
 800c7dc:	f53f af2c 	bmi.w	800c638 <_svfiprintf_r+0x28>
 800c7e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7e2:	b01d      	add	sp, #116	; 0x74
 800c7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e8:	ab03      	add	r3, sp, #12
 800c7ea:	9300      	str	r3, [sp, #0]
 800c7ec:	462a      	mov	r2, r5
 800c7ee:	4b06      	ldr	r3, [pc, #24]	; (800c808 <_svfiprintf_r+0x1f8>)
 800c7f0:	a904      	add	r1, sp, #16
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	f000 f87a 	bl	800c8ec <_printf_i>
 800c7f8:	e7eb      	b.n	800c7d2 <_svfiprintf_r+0x1c2>
 800c7fa:	bf00      	nop
 800c7fc:	0800f3dd 	.word	0x0800f3dd
 800c800:	0800f3e7 	.word	0x0800f3e7
 800c804:	00000000 	.word	0x00000000
 800c808:	0800c559 	.word	0x0800c559
 800c80c:	0800f3e3 	.word	0x0800f3e3

0800c810 <_printf_common>:
 800c810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c814:	4616      	mov	r6, r2
 800c816:	4699      	mov	r9, r3
 800c818:	688a      	ldr	r2, [r1, #8]
 800c81a:	690b      	ldr	r3, [r1, #16]
 800c81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c820:	4293      	cmp	r3, r2
 800c822:	bfb8      	it	lt
 800c824:	4613      	movlt	r3, r2
 800c826:	6033      	str	r3, [r6, #0]
 800c828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c82c:	4607      	mov	r7, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b10a      	cbz	r2, 800c836 <_printf_common+0x26>
 800c832:	3301      	adds	r3, #1
 800c834:	6033      	str	r3, [r6, #0]
 800c836:	6823      	ldr	r3, [r4, #0]
 800c838:	0699      	lsls	r1, r3, #26
 800c83a:	bf42      	ittt	mi
 800c83c:	6833      	ldrmi	r3, [r6, #0]
 800c83e:	3302      	addmi	r3, #2
 800c840:	6033      	strmi	r3, [r6, #0]
 800c842:	6825      	ldr	r5, [r4, #0]
 800c844:	f015 0506 	ands.w	r5, r5, #6
 800c848:	d106      	bne.n	800c858 <_printf_common+0x48>
 800c84a:	f104 0a19 	add.w	sl, r4, #25
 800c84e:	68e3      	ldr	r3, [r4, #12]
 800c850:	6832      	ldr	r2, [r6, #0]
 800c852:	1a9b      	subs	r3, r3, r2
 800c854:	42ab      	cmp	r3, r5
 800c856:	dc26      	bgt.n	800c8a6 <_printf_common+0x96>
 800c858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c85c:	1e13      	subs	r3, r2, #0
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	bf18      	it	ne
 800c862:	2301      	movne	r3, #1
 800c864:	0692      	lsls	r2, r2, #26
 800c866:	d42b      	bmi.n	800c8c0 <_printf_common+0xb0>
 800c868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c86c:	4649      	mov	r1, r9
 800c86e:	4638      	mov	r0, r7
 800c870:	47c0      	blx	r8
 800c872:	3001      	adds	r0, #1
 800c874:	d01e      	beq.n	800c8b4 <_printf_common+0xa4>
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	68e5      	ldr	r5, [r4, #12]
 800c87a:	6832      	ldr	r2, [r6, #0]
 800c87c:	f003 0306 	and.w	r3, r3, #6
 800c880:	2b04      	cmp	r3, #4
 800c882:	bf08      	it	eq
 800c884:	1aad      	subeq	r5, r5, r2
 800c886:	68a3      	ldr	r3, [r4, #8]
 800c888:	6922      	ldr	r2, [r4, #16]
 800c88a:	bf0c      	ite	eq
 800c88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c890:	2500      	movne	r5, #0
 800c892:	4293      	cmp	r3, r2
 800c894:	bfc4      	itt	gt
 800c896:	1a9b      	subgt	r3, r3, r2
 800c898:	18ed      	addgt	r5, r5, r3
 800c89a:	2600      	movs	r6, #0
 800c89c:	341a      	adds	r4, #26
 800c89e:	42b5      	cmp	r5, r6
 800c8a0:	d11a      	bne.n	800c8d8 <_printf_common+0xc8>
 800c8a2:	2000      	movs	r0, #0
 800c8a4:	e008      	b.n	800c8b8 <_printf_common+0xa8>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4652      	mov	r2, sl
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	47c0      	blx	r8
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	d103      	bne.n	800c8bc <_printf_common+0xac>
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8bc:	3501      	adds	r5, #1
 800c8be:	e7c6      	b.n	800c84e <_printf_common+0x3e>
 800c8c0:	18e1      	adds	r1, r4, r3
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	2030      	movs	r0, #48	; 0x30
 800c8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8ca:	4422      	add	r2, r4
 800c8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	e7c7      	b.n	800c868 <_printf_common+0x58>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	4622      	mov	r2, r4
 800c8dc:	4649      	mov	r1, r9
 800c8de:	4638      	mov	r0, r7
 800c8e0:	47c0      	blx	r8
 800c8e2:	3001      	adds	r0, #1
 800c8e4:	d0e6      	beq.n	800c8b4 <_printf_common+0xa4>
 800c8e6:	3601      	adds	r6, #1
 800c8e8:	e7d9      	b.n	800c89e <_printf_common+0x8e>
	...

0800c8ec <_printf_i>:
 800c8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8f0:	7e0f      	ldrb	r7, [r1, #24]
 800c8f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8f4:	2f78      	cmp	r7, #120	; 0x78
 800c8f6:	4691      	mov	r9, r2
 800c8f8:	4680      	mov	r8, r0
 800c8fa:	460c      	mov	r4, r1
 800c8fc:	469a      	mov	sl, r3
 800c8fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c902:	d807      	bhi.n	800c914 <_printf_i+0x28>
 800c904:	2f62      	cmp	r7, #98	; 0x62
 800c906:	d80a      	bhi.n	800c91e <_printf_i+0x32>
 800c908:	2f00      	cmp	r7, #0
 800c90a:	f000 80d8 	beq.w	800cabe <_printf_i+0x1d2>
 800c90e:	2f58      	cmp	r7, #88	; 0x58
 800c910:	f000 80a3 	beq.w	800ca5a <_printf_i+0x16e>
 800c914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c91c:	e03a      	b.n	800c994 <_printf_i+0xa8>
 800c91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c922:	2b15      	cmp	r3, #21
 800c924:	d8f6      	bhi.n	800c914 <_printf_i+0x28>
 800c926:	a101      	add	r1, pc, #4	; (adr r1, 800c92c <_printf_i+0x40>)
 800c928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c92c:	0800c985 	.word	0x0800c985
 800c930:	0800c999 	.word	0x0800c999
 800c934:	0800c915 	.word	0x0800c915
 800c938:	0800c915 	.word	0x0800c915
 800c93c:	0800c915 	.word	0x0800c915
 800c940:	0800c915 	.word	0x0800c915
 800c944:	0800c999 	.word	0x0800c999
 800c948:	0800c915 	.word	0x0800c915
 800c94c:	0800c915 	.word	0x0800c915
 800c950:	0800c915 	.word	0x0800c915
 800c954:	0800c915 	.word	0x0800c915
 800c958:	0800caa5 	.word	0x0800caa5
 800c95c:	0800c9c9 	.word	0x0800c9c9
 800c960:	0800ca87 	.word	0x0800ca87
 800c964:	0800c915 	.word	0x0800c915
 800c968:	0800c915 	.word	0x0800c915
 800c96c:	0800cac7 	.word	0x0800cac7
 800c970:	0800c915 	.word	0x0800c915
 800c974:	0800c9c9 	.word	0x0800c9c9
 800c978:	0800c915 	.word	0x0800c915
 800c97c:	0800c915 	.word	0x0800c915
 800c980:	0800ca8f 	.word	0x0800ca8f
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	1d1a      	adds	r2, r3, #4
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	602a      	str	r2, [r5, #0]
 800c98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c994:	2301      	movs	r3, #1
 800c996:	e0a3      	b.n	800cae0 <_printf_i+0x1f4>
 800c998:	6820      	ldr	r0, [r4, #0]
 800c99a:	6829      	ldr	r1, [r5, #0]
 800c99c:	0606      	lsls	r6, r0, #24
 800c99e:	f101 0304 	add.w	r3, r1, #4
 800c9a2:	d50a      	bpl.n	800c9ba <_printf_i+0xce>
 800c9a4:	680e      	ldr	r6, [r1, #0]
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	2e00      	cmp	r6, #0
 800c9aa:	da03      	bge.n	800c9b4 <_printf_i+0xc8>
 800c9ac:	232d      	movs	r3, #45	; 0x2d
 800c9ae:	4276      	negs	r6, r6
 800c9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9b4:	485e      	ldr	r0, [pc, #376]	; (800cb30 <_printf_i+0x244>)
 800c9b6:	230a      	movs	r3, #10
 800c9b8:	e019      	b.n	800c9ee <_printf_i+0x102>
 800c9ba:	680e      	ldr	r6, [r1, #0]
 800c9bc:	602b      	str	r3, [r5, #0]
 800c9be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9c2:	bf18      	it	ne
 800c9c4:	b236      	sxthne	r6, r6
 800c9c6:	e7ef      	b.n	800c9a8 <_printf_i+0xbc>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	6820      	ldr	r0, [r4, #0]
 800c9cc:	1d19      	adds	r1, r3, #4
 800c9ce:	6029      	str	r1, [r5, #0]
 800c9d0:	0601      	lsls	r1, r0, #24
 800c9d2:	d501      	bpl.n	800c9d8 <_printf_i+0xec>
 800c9d4:	681e      	ldr	r6, [r3, #0]
 800c9d6:	e002      	b.n	800c9de <_printf_i+0xf2>
 800c9d8:	0646      	lsls	r6, r0, #25
 800c9da:	d5fb      	bpl.n	800c9d4 <_printf_i+0xe8>
 800c9dc:	881e      	ldrh	r6, [r3, #0]
 800c9de:	4854      	ldr	r0, [pc, #336]	; (800cb30 <_printf_i+0x244>)
 800c9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800c9e2:	bf0c      	ite	eq
 800c9e4:	2308      	moveq	r3, #8
 800c9e6:	230a      	movne	r3, #10
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9ee:	6865      	ldr	r5, [r4, #4]
 800c9f0:	60a5      	str	r5, [r4, #8]
 800c9f2:	2d00      	cmp	r5, #0
 800c9f4:	bfa2      	ittt	ge
 800c9f6:	6821      	ldrge	r1, [r4, #0]
 800c9f8:	f021 0104 	bicge.w	r1, r1, #4
 800c9fc:	6021      	strge	r1, [r4, #0]
 800c9fe:	b90e      	cbnz	r6, 800ca04 <_printf_i+0x118>
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	d04d      	beq.n	800caa0 <_printf_i+0x1b4>
 800ca04:	4615      	mov	r5, r2
 800ca06:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca0a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca0e:	5dc7      	ldrb	r7, [r0, r7]
 800ca10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca14:	4637      	mov	r7, r6
 800ca16:	42bb      	cmp	r3, r7
 800ca18:	460e      	mov	r6, r1
 800ca1a:	d9f4      	bls.n	800ca06 <_printf_i+0x11a>
 800ca1c:	2b08      	cmp	r3, #8
 800ca1e:	d10b      	bne.n	800ca38 <_printf_i+0x14c>
 800ca20:	6823      	ldr	r3, [r4, #0]
 800ca22:	07de      	lsls	r6, r3, #31
 800ca24:	d508      	bpl.n	800ca38 <_printf_i+0x14c>
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	6861      	ldr	r1, [r4, #4]
 800ca2a:	4299      	cmp	r1, r3
 800ca2c:	bfde      	ittt	le
 800ca2e:	2330      	movle	r3, #48	; 0x30
 800ca30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca38:	1b52      	subs	r2, r2, r5
 800ca3a:	6122      	str	r2, [r4, #16]
 800ca3c:	f8cd a000 	str.w	sl, [sp]
 800ca40:	464b      	mov	r3, r9
 800ca42:	aa03      	add	r2, sp, #12
 800ca44:	4621      	mov	r1, r4
 800ca46:	4640      	mov	r0, r8
 800ca48:	f7ff fee2 	bl	800c810 <_printf_common>
 800ca4c:	3001      	adds	r0, #1
 800ca4e:	d14c      	bne.n	800caea <_printf_i+0x1fe>
 800ca50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca54:	b004      	add	sp, #16
 800ca56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca5a:	4835      	ldr	r0, [pc, #212]	; (800cb30 <_printf_i+0x244>)
 800ca5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca60:	6829      	ldr	r1, [r5, #0]
 800ca62:	6823      	ldr	r3, [r4, #0]
 800ca64:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca68:	6029      	str	r1, [r5, #0]
 800ca6a:	061d      	lsls	r5, r3, #24
 800ca6c:	d514      	bpl.n	800ca98 <_printf_i+0x1ac>
 800ca6e:	07df      	lsls	r7, r3, #31
 800ca70:	bf44      	itt	mi
 800ca72:	f043 0320 	orrmi.w	r3, r3, #32
 800ca76:	6023      	strmi	r3, [r4, #0]
 800ca78:	b91e      	cbnz	r6, 800ca82 <_printf_i+0x196>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	f023 0320 	bic.w	r3, r3, #32
 800ca80:	6023      	str	r3, [r4, #0]
 800ca82:	2310      	movs	r3, #16
 800ca84:	e7b0      	b.n	800c9e8 <_printf_i+0xfc>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	f043 0320 	orr.w	r3, r3, #32
 800ca8c:	6023      	str	r3, [r4, #0]
 800ca8e:	2378      	movs	r3, #120	; 0x78
 800ca90:	4828      	ldr	r0, [pc, #160]	; (800cb34 <_printf_i+0x248>)
 800ca92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca96:	e7e3      	b.n	800ca60 <_printf_i+0x174>
 800ca98:	0659      	lsls	r1, r3, #25
 800ca9a:	bf48      	it	mi
 800ca9c:	b2b6      	uxthmi	r6, r6
 800ca9e:	e7e6      	b.n	800ca6e <_printf_i+0x182>
 800caa0:	4615      	mov	r5, r2
 800caa2:	e7bb      	b.n	800ca1c <_printf_i+0x130>
 800caa4:	682b      	ldr	r3, [r5, #0]
 800caa6:	6826      	ldr	r6, [r4, #0]
 800caa8:	6961      	ldr	r1, [r4, #20]
 800caaa:	1d18      	adds	r0, r3, #4
 800caac:	6028      	str	r0, [r5, #0]
 800caae:	0635      	lsls	r5, r6, #24
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	d501      	bpl.n	800cab8 <_printf_i+0x1cc>
 800cab4:	6019      	str	r1, [r3, #0]
 800cab6:	e002      	b.n	800cabe <_printf_i+0x1d2>
 800cab8:	0670      	lsls	r0, r6, #25
 800caba:	d5fb      	bpl.n	800cab4 <_printf_i+0x1c8>
 800cabc:	8019      	strh	r1, [r3, #0]
 800cabe:	2300      	movs	r3, #0
 800cac0:	6123      	str	r3, [r4, #16]
 800cac2:	4615      	mov	r5, r2
 800cac4:	e7ba      	b.n	800ca3c <_printf_i+0x150>
 800cac6:	682b      	ldr	r3, [r5, #0]
 800cac8:	1d1a      	adds	r2, r3, #4
 800caca:	602a      	str	r2, [r5, #0]
 800cacc:	681d      	ldr	r5, [r3, #0]
 800cace:	6862      	ldr	r2, [r4, #4]
 800cad0:	2100      	movs	r1, #0
 800cad2:	4628      	mov	r0, r5
 800cad4:	f7f3 fb84 	bl	80001e0 <memchr>
 800cad8:	b108      	cbz	r0, 800cade <_printf_i+0x1f2>
 800cada:	1b40      	subs	r0, r0, r5
 800cadc:	6060      	str	r0, [r4, #4]
 800cade:	6863      	ldr	r3, [r4, #4]
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	2300      	movs	r3, #0
 800cae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae8:	e7a8      	b.n	800ca3c <_printf_i+0x150>
 800caea:	6923      	ldr	r3, [r4, #16]
 800caec:	462a      	mov	r2, r5
 800caee:	4649      	mov	r1, r9
 800caf0:	4640      	mov	r0, r8
 800caf2:	47d0      	blx	sl
 800caf4:	3001      	adds	r0, #1
 800caf6:	d0ab      	beq.n	800ca50 <_printf_i+0x164>
 800caf8:	6823      	ldr	r3, [r4, #0]
 800cafa:	079b      	lsls	r3, r3, #30
 800cafc:	d413      	bmi.n	800cb26 <_printf_i+0x23a>
 800cafe:	68e0      	ldr	r0, [r4, #12]
 800cb00:	9b03      	ldr	r3, [sp, #12]
 800cb02:	4298      	cmp	r0, r3
 800cb04:	bfb8      	it	lt
 800cb06:	4618      	movlt	r0, r3
 800cb08:	e7a4      	b.n	800ca54 <_printf_i+0x168>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	4632      	mov	r2, r6
 800cb0e:	4649      	mov	r1, r9
 800cb10:	4640      	mov	r0, r8
 800cb12:	47d0      	blx	sl
 800cb14:	3001      	adds	r0, #1
 800cb16:	d09b      	beq.n	800ca50 <_printf_i+0x164>
 800cb18:	3501      	adds	r5, #1
 800cb1a:	68e3      	ldr	r3, [r4, #12]
 800cb1c:	9903      	ldr	r1, [sp, #12]
 800cb1e:	1a5b      	subs	r3, r3, r1
 800cb20:	42ab      	cmp	r3, r5
 800cb22:	dcf2      	bgt.n	800cb0a <_printf_i+0x21e>
 800cb24:	e7eb      	b.n	800cafe <_printf_i+0x212>
 800cb26:	2500      	movs	r5, #0
 800cb28:	f104 0619 	add.w	r6, r4, #25
 800cb2c:	e7f5      	b.n	800cb1a <_printf_i+0x22e>
 800cb2e:	bf00      	nop
 800cb30:	0800f3ee 	.word	0x0800f3ee
 800cb34:	0800f3ff 	.word	0x0800f3ff

0800cb38 <memmove>:
 800cb38:	4288      	cmp	r0, r1
 800cb3a:	b510      	push	{r4, lr}
 800cb3c:	eb01 0402 	add.w	r4, r1, r2
 800cb40:	d902      	bls.n	800cb48 <memmove+0x10>
 800cb42:	4284      	cmp	r4, r0
 800cb44:	4623      	mov	r3, r4
 800cb46:	d807      	bhi.n	800cb58 <memmove+0x20>
 800cb48:	1e43      	subs	r3, r0, #1
 800cb4a:	42a1      	cmp	r1, r4
 800cb4c:	d008      	beq.n	800cb60 <memmove+0x28>
 800cb4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb56:	e7f8      	b.n	800cb4a <memmove+0x12>
 800cb58:	4402      	add	r2, r0
 800cb5a:	4601      	mov	r1, r0
 800cb5c:	428a      	cmp	r2, r1
 800cb5e:	d100      	bne.n	800cb62 <memmove+0x2a>
 800cb60:	bd10      	pop	{r4, pc}
 800cb62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb6a:	e7f7      	b.n	800cb5c <memmove+0x24>

0800cb6c <_realloc_r>:
 800cb6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb70:	4680      	mov	r8, r0
 800cb72:	4614      	mov	r4, r2
 800cb74:	460e      	mov	r6, r1
 800cb76:	b921      	cbnz	r1, 800cb82 <_realloc_r+0x16>
 800cb78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7c:	4611      	mov	r1, r2
 800cb7e:	f7ff babd 	b.w	800c0fc <_malloc_r>
 800cb82:	b92a      	cbnz	r2, 800cb90 <_realloc_r+0x24>
 800cb84:	f7ff fa4e 	bl	800c024 <_free_r>
 800cb88:	4625      	mov	r5, r4
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb90:	f000 f81b 	bl	800cbca <_malloc_usable_size_r>
 800cb94:	4284      	cmp	r4, r0
 800cb96:	4607      	mov	r7, r0
 800cb98:	d802      	bhi.n	800cba0 <_realloc_r+0x34>
 800cb9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb9e:	d812      	bhi.n	800cbc6 <_realloc_r+0x5a>
 800cba0:	4621      	mov	r1, r4
 800cba2:	4640      	mov	r0, r8
 800cba4:	f7ff faaa 	bl	800c0fc <_malloc_r>
 800cba8:	4605      	mov	r5, r0
 800cbaa:	2800      	cmp	r0, #0
 800cbac:	d0ed      	beq.n	800cb8a <_realloc_r+0x1e>
 800cbae:	42bc      	cmp	r4, r7
 800cbb0:	4622      	mov	r2, r4
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	bf28      	it	cs
 800cbb6:	463a      	movcs	r2, r7
 800cbb8:	f7ff fa08 	bl	800bfcc <memcpy>
 800cbbc:	4631      	mov	r1, r6
 800cbbe:	4640      	mov	r0, r8
 800cbc0:	f7ff fa30 	bl	800c024 <_free_r>
 800cbc4:	e7e1      	b.n	800cb8a <_realloc_r+0x1e>
 800cbc6:	4635      	mov	r5, r6
 800cbc8:	e7df      	b.n	800cb8a <_realloc_r+0x1e>

0800cbca <_malloc_usable_size_r>:
 800cbca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbce:	1f18      	subs	r0, r3, #4
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	bfbc      	itt	lt
 800cbd4:	580b      	ldrlt	r3, [r1, r0]
 800cbd6:	18c0      	addlt	r0, r0, r3
 800cbd8:	4770      	bx	lr
	...

0800cbdc <_init>:
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	bf00      	nop
 800cbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbe2:	bc08      	pop	{r3}
 800cbe4:	469e      	mov	lr, r3
 800cbe6:	4770      	bx	lr

0800cbe8 <_fini>:
 800cbe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbea:	bf00      	nop
 800cbec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbee:	bc08      	pop	{r3}
 800cbf0:	469e      	mov	lr, r3
 800cbf2:	4770      	bx	lr
